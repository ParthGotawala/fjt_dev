(function (maxBuildNumber, userid, requiredDet) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 5495:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-11-2021 *********************************** */
                /* **************************** Add Script Version -> 11-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5496,'2.00','V1',' Sample entry - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5496:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-11-2021 *********************************** */
                "Drop procedure if exists `Sproc_HistoryByTableName`;  \n" +
                "CREATE PROCEDURE `Sproc_HistoryByTableName`(  \n" +
                "	IN pID INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pTableName VARCHAR(255)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET @temp_Sproc_HistoryByTableName = CONCAT(\"SELECT  \n" +
                "		ID,  \n" +
                "        Tablename,  \n" +
                "        RefTransID,  \n" +
                "        Colname,  \n" +
                "        Oldval,  \n" +
                "        Newval,  \n" +
                "		valueDataType,  \n" +
                "		fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(createdBy) createdby,  \n" +
                "		fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "		FROM dataentrychange_auditlog WHERE (RefTransID='\",pID,\"' AND Tablename='\",pTableName,\"')  \n" +
                "	\");  \n" +
                "  \n" +
                "    /*This logic configure for supplier/manufacturer/customer page*/  \n" +
                "    IF pTableName = 'MFGCODEMST' THEN  \n" +
                "		SET @temp_Sproc_HistoryByTableName = CONCAT(@temp_Sproc_HistoryByTableName,  \n" +
                "			\"UNION  \n" +
                "			SELECT  \n" +
                "				ID,  \n" +
                "				Tablename,  \n" +
                "				RefTransID,  \n" +
                "				Colname,  \n" +
                "				Oldval,  \n" +
                "				Newval,  \n" +
                "				valueDataType,  \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(createdBy) createdby,  \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "			FROM dataentrychange_auditlog  \n" +
                "            WHERE (RefTransID IN (SELECT id FROM mfgcodealias WHERE mfgcodeId='\",pID,\"')  \n" +
                "				AND Tablename='MFGCODEALIAS')  \n" +
                "  \n" +
                "			UNION  \n" +
                "			SELECT  \n" +
                "				ID,  \n" +
                "				Tablename,  \n" +
                "				RefTransID,  \n" +
                "				Colname,  \n" +
                "				Oldval,  \n" +
                "				Newval,  \n" +
                "				valueDataType,  \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(createdBy) createdby,  \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "			FROM dataentrychange_auditlog  \n" +
                "            WHERE (RefTransID IN (SELECT id FROM who_bought_who WHERE buyTo='\",pID,\"')  \n" +
                "				AND Tablename='WHOBOUGHTWHO')  \n" +
                "  \n" +
                "            UNION  \n" +
                "			SELECT  \n" +
                "				ID,  \n" +
                "				Tablename,  \n" +
                "				RefTransID,  \n" +
                "				Colname,  \n" +
                "				Oldval,  \n" +
                "				Newval,  \n" +
                "				valueDataType,  \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(createdBy) createdby,  \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "			FROM dataentrychange_auditlog  \n" +
                "            WHERE (RefTransID IN (SELECT id FROM supplier_mapping_mst WHERE supplierID='\",pID,\"')  \n" +
                "				AND Tablename='SUPPLIERMAPPINGMST')  \n" +
                "  \n" +
                "			UNION  \n" +
                "			SELECT  \n" +
                "				ID,  \n" +
                "				Tablename,  \n" +
                "				RefTransID,  \n" +
                "				Colname,  \n" +
                "				Oldval,  \n" +
                "				Newval,  \n" +
                "				valueDataType,  \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(createdBy) createdby,  \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "			FROM dataentrychange_auditlog  \n" +
                "            WHERE (RefTransID IN (SELECT id FROM invalid_mfgmappingmst WHERE refmfgAliasID IN (SELECT id FROM mfgcodealias WHERE mfgcodeId='\",pID,\"'))  \n" +
                "				AND Tablename='INVALIDMFGMAPPINGMST')  \n" +
                "		\");  \n" +
                "    END IF;  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_HistoryByTableName,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_HistoryByTableName,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 12-11-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_jobtype`;  \n" +
                "CREATE TRIGGER `Trg_AU_jobtype` AFTER UPDATE ON `jobtype` FOR EACH ROW BEGIN  \n" +
                "	IF IFNULL(OLD.name,0) != IFNULL(NEW.name,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('JOBTYPE',CAST(new.id AS CHAR),'Job Type',CAST(OLD.name AS CHAR), CAST(NEW.name AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.description,0) != IFNULL(NEW.description,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('JOBTYPE',CAST(new.id AS CHAR),'Description',CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shortname,0) != IFNULL(NEW.shortname,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('JOBTYPE',CAST(new.id AS CHAR),'Short Name',CAST(OLD.shortname AS CHAR), CAST(NEW.shortname AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('JOBTYPE',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Disable' ELSE 'Enable' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Disable' ELSE 'Enable' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.termsandcondition,0) != IFNULL(NEW.termsandcondition,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType)  \n" +
                "        VALUES('JOBTYPE',CAST(new.id AS CHAR),'Notes',CAST(OLD.termsandcondition AS CHAR), CAST(NEW.termsandcondition AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'longtext');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isLaborCosting,0) != IFNULL(NEW.isLaborCosting,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('JOBTYPE',CAST(new.id AS CHAR),'Labor Costing',CAST(CASE WHEN OLD.isLaborCosting=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isLaborCosting=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isMaterialCosting,0) != IFNULL(NEW.isMaterialCosting,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('JOBTYPE',CAST(new.id AS CHAR),'Material Costing',CAST(CASE WHEN OLD.isMaterialCosting=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isMaterialCosting=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 12-11-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_rfqtype`;  \n" +
                "CREATE TRIGGER `Trg_AU_rfqtype` AFTER UPDATE ON `rfqtype` FOR EACH ROW BEGIN  \n" +
                "	IF IFNULL(OLD.name,0) != IFNULL(NEW.name,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQTYPE',CAST(new.id AS CHAR),'RFQ Type',CAST(OLD.name AS CHAR), CAST(NEW.name AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.description,0) != IFNULL(NEW.description,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQTYPE',CAST(new.id AS CHAR),'Description',CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQTYPE',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Disable' ELSE 'Enable' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Disable' ELSE 'Enable' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.termsandcondition,0) != IFNULL(NEW.termsandcondition,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType)  \n" +
                "        VALUES('RFQTYPE',CAST(new.id AS CHAR),'Notes',CAST(OLD.termsandcondition AS CHAR), CAST(NEW.termsandcondition AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'longtext');  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 12-11-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_requirement`;  \n" +
                "CREATE TRIGGER `Trg_AU_requirement` AFTER UPDATE ON `requirement` FOR EACH ROW BEGIN  \n" +
                "	IF IFNULL(OLD.name,0) != IFNULL(NEW.name,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('REQUIREMENT',CAST(new.id AS CHAR),'Name',CAST(OLD.name AS CHAR), CAST(NEW.name AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.description,0) != IFNULL(NEW.description,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('REQUIREMENT',CAST(new.id AS CHAR),'Description',CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('REQUIREMENT',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Disable' ELSE 'Enable' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Disable' ELSE 'Enable' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.category,0) != IFNULL(NEW.category,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('REQUIREMENT',CAST(new.id AS CHAR),'Category',CAST(CASE WHEN (OLD.category = 1) THEN 'Customer Quote Requirement' WHEN (OLD.category = 2) THEN 'Assembly Requirement' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.category = 1) THEN 'Customer Quote Requirement' WHEN (NEW.category = 2) THEN 'Assembly Requirement' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 12-11-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_rfq_lineitems_errorcode`;  \n" +
                "CREATE TRIGGER `Trg_AU_rfq_lineitems_errorcode` AFTER UPDATE ON `rfq_lineitems_errorcode` FOR EACH ROW BEGIN  \n" +
                "	IF IFNULL(OLD.errorColor ,0) != IFNULL(NEW.errorColor ,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Error Color',CAST(OLD.errorColor AS CHAR), CAST(NEW.errorColor AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.description,0) != IFNULL(NEW.description,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Description',CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.errorCode,0) != IFNULL(NEW.errorCode,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Error Code',CAST(OLD.errorCode AS CHAR), CAST(NEW.errorCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.systemVariable,0) != IFNULL(NEW.systemVariable,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'System Variable',CAST(OLD.systemVariable AS CHAR), CAST(NEW.systemVariable AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.displayName,0) != IFNULL(NEW.displayName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Display Name',CAST(OLD.displayName AS CHAR), CAST(NEW.displayName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.org_description,0) != IFNULL(NEW.org_description,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Default Description',CAST(OLD.org_description AS CHAR), CAST(NEW.org_description AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.narrative,0) != IFNULL(NEW.narrative,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Narrative',CAST(OLD.narrative AS CHAR), CAST(NEW.narrative AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'longtext');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isExternalIssue,0) != IFNULL(NEW.isExternalIssue,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'External Issue',CAST(CASE WHEN (OLD.isExternalIssue = 0) THEN 'No' WHEN (OLD.isExternalIssue = 1) THEN 'Yes' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.isExternalIssue = 0) THEN 'No' WHEN (NEW.isExternalIssue = 1) THEN 'Yes' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.displayOrder,0) != IFNULL(NEW.displayOrder,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Priority',CAST(OLD.displayOrder AS CHAR), CAST(NEW.displayOrder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isResearchStatus,0) != IFNULL(NEW.isResearchStatus,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Include In R&D Activity',CAST(CASE WHEN (OLD.isResearchStatus = 0) THEN 'No' WHEN (OLD.isResearchStatus = 1) THEN 'Yes' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.isResearchStatus = 0) THEN 'No' WHEN (NEW.isResearchStatus = 1) THEN 'Yes' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isAllowToEngrApproved,0) != IFNULL(NEW.isAllowToEngrApproved,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Allow Part to Engr. Approved',CAST(CASE WHEN (OLD.isAllowToEngrApproved = 0) THEN 'No'  \n" +
                "		WHEN (OLD.isAllowToEngrApproved = 1) THEN 'Yes' WHEN (OLD.isAllowToEngrApproved = 2) THEN 'N/A (Not Applicable)' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.isAllowToEngrApproved = 0) THEN 'No' WHEN (NEW.isAllowToEngrApproved = 1) THEN 'Yes' WHEN (NEW.isAllowToEngrApproved = 2) THEN 'N/A (Not Applicable)' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isAssemblyLevelError,0) != IFNULL(NEW.isAssemblyLevelError,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Allow Part to Engr. Approved',CAST(CASE WHEN (OLD.isAssemblyLevelError = 0) THEN 'Line Level' WHEN (OLD.isAssemblyLevelError = 1) THEN 'Assembly Level' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.isAssemblyLevelError = 0) THEN 'Line Level' WHEN (NEW.isAssemblyLevelError = 1) THEN 'Assembly Level' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 12-11-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_quotecharges_dynamic_fields_mst`;  \n" +
                "CREATE TRIGGER `Trg_AU_quotecharges_dynamic_fields_mst` AFTER UPDATE ON `quotecharges_dynamic_fields_mst` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "	IF IFNULL(OLD.fieldName ,0) != IFNULL(NEW.fieldName ,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Name',CAST(OLD.fieldName AS CHAR), CAST(NEW.fieldName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.dataType,0) != IFNULL(NEW.dataType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Data Type',CAST(CASE WHEN (OLD.dataType = 1) THEN 'EA' WHEN (OLD.dataType = 2) THEN 'OTC' ELSE '' END AS CHAR), CAST(CASE WHEN (OLD.dataType = 1) THEN 'EA' WHEN (OLD.dataType = 2) THEN 'OTC' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.costingType,0) != IFNULL(NEW.costingType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Costing Type',CAST(OLD.costingType AS CHAR), CAST(NEW.costingType AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.displayPercentage,0) != IFNULL(NEW.displayPercentage,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Display %',CAST(CASE WHEN (OLD.displayPercentage = 0) THEN 'No' WHEN (OLD.displayPercentage = 1) THEN 'Yes' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.displayPercentage = 0) THEN 'No' WHEN (NEW.displayPercentage = 1) THEN 'Yes' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.displayMargin,0) != IFNULL(NEW.displayMargin,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Display Margin',CAST(CASE WHEN (OLD.displayMargin = 0) THEN 'No' WHEN (OLD.displayMargin = 1) THEN 'Yes' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.displayMargin = 0) THEN 'No' WHEN (NEW.displayMargin = 1) THEN 'Yes' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.displayOrder,0) != IFNULL(NEW.displayOrder,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Display Order',CAST(OLD.displayOrder AS CHAR), CAST(NEW.displayOrder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDaysRequire,0) != IFNULL(NEW.isDaysRequire,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Days Require',CAST(CASE WHEN (OLD.isDaysRequire = 0) THEN 'No' WHEN (OLD.isDaysRequire = 1) THEN 'Yes' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.isDaysRequire = 0) THEN 'No' WHEN (NEW.isDaysRequire = 1) THEN 'Yes' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.defaultMarginValue,0) != IFNULL(NEW.defaultMarginValue,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Default Margin Value',CAST(OLD.defaultMarginValue AS CHAR), CAST(NEW.defaultMarginValue AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.marginApplicableType,0) != IFNULL(NEW.marginApplicableType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Margin Applicable Type',CAST(CASE WHEN (OLD.marginApplicableType = 1) THEN 'Markup $' WHEN (OLD.marginApplicableType = 2) THEN 'Markup %' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.marginApplicableType = 1) THEN 'Markup $' WHEN (NEW.marginApplicableType = 2) THEN 'Markup %' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.defaultuomValue,0) != IFNULL(NEW.defaultuomValue,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Default UOM Value',CAST(OLD.defaultuomValue AS CHAR), CAST(NEW.defaultuomValue AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.affectType,0) != IFNULL(NEW.affectType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Lead Time Selection Criteria',CAST(CASE WHEN (OLD.affectType  = 'L') THEN 'Labor' WHEN (OLD.affectType = 'M') THEN 'Material' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.affectType  = 'L') THEN 'Labor' WHEN (NEW.affectType = 'M') THEN 'Material' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.selectionType,0) != IFNULL(NEW.selectionType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Lead Time Affecting',CAST(CASE WHEN (OLD.selectionType  = 1) THEN 'Whichever is greater' WHEN (OLD.selectionType = 2) THEN 'Add to Lead Time' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.selectionType  = 1) THEN 'Whichever is greater' WHEN (NEW.selectionType = 2) THEN 'Add to Lead Time' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.toolingQty,0) != IFNULL(NEW.toolingQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Qty',CAST(OLD.toolingQty AS CHAR), CAST(NEW.toolingQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.toolingPrice,0) != IFNULL(NEW.toolingPrice,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Price(ea)',CAST(OLD.toolingPrice AS CHAR), CAST(NEW.toolingPrice AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.applyToAll,0) != IFNULL(NEW.applyToAll,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Apply To All',CAST(CASE WHEN (OLD.applyToAll  = 1) THEN 'Yes' WHEN (OLD.applyToAll = 0) THEN 'No' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.applyToAll  = 1) THEN 'Yes' WHEN (NEW.applyToAll = 0) THEN 'No' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCommission,0) != IFNULL(NEW.isCommission,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Commission',CAST(CASE WHEN (OLD.isCommission  = 1) THEN 'Yes' WHEN (OLD.isCommission = 0) THEN 'No' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.isCommission  = 1) THEN 'Yes' WHEN (NEW.isCommission = 0) THEN 'No' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isIncludeInOtherAttribute,0) != IFNULL(NEW.isIncludeInOtherAttribute,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Include Other Attribute In Calculation',CAST(CASE WHEN (OLD.isIncludeInOtherAttribute  = 1) THEN 'Yes' WHEN (OLD.isIncludeInOtherAttribute = 0) THEN 'No' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.isIncludeInOtherAttribute  = 1) THEN 'Yes' WHEN (NEW.isIncludeInOtherAttribute = 0) THEN 'No' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.quoteAttributeType,0) != IFNULL(NEW.quoteAttributeType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Quote Attribute Type',CAST(CASE WHEN (OLD.quoteAttributeType = 'R') THEN 'RFQ' WHEN (OLD.quoteAttributeType = 'S') THEN 'Supplier' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.quoteAttributeType = 'R') THEN 'RFQ' WHEN (NEW.quoteAttributeType = 'S') THEN 'Supplier' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.refAttributeID,0) != IFNULL(NEW.refAttributeID,0) THEN  \n" +
                "		IF OLD.refAttributeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`fieldName`, '') INTO `pOldValue` FROM quotecharges_dynamic_fields_mst WHERE id = OLD.refAttributeID ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.refAttributeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`fieldName`, '') INTO `pNewValue` FROM quotecharges_dynamic_fields_mst WHERE id = NEW.refAttributeID ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Ref. Quote Attribute',CAST(pOldValue AS CHAR), CAST(pNewValue AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 12-11-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_rfq_lineitems_keywords`;  \n" +
                "CREATE TRIGGER `Trg_AU_rfq_lineitems_keywords` AFTER UPDATE ON `rfq_lineitems_keywords` FOR EACH ROW BEGIN  \n" +
                "	IF IFNULL(OLD.keyword ,0) != IFNULL(NEW.keyword ,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_KEYWORDS',CAST(new.id AS CHAR),'Keyword',CAST(OLD.keyword AS CHAR), CAST(NEW.keyword AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.displayOrder,0) != IFNULL(NEW.displayOrder,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_KEYWORDS',CAST(new.id AS CHAR),'Display Order',CAST(OLD.displayOrder AS CHAR), CAST(NEW.displayOrder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_KEYWORDS',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Disable' ELSE 'Enable' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Disable' ELSE 'Enable' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 12-11-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_labor_cost_template`;  \n" +
                "CREATE TRIGGER `Trg_AU_labor_cost_template` AFTER UPDATE ON `labor_cost_template` FOR EACH ROW BEGIN  \n" +
                "	IF IFNULL(OLD.templateName ,0) != IFNULL(NEW.templateName ,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('LABOR_COST_TEMPLATE',CAST(new.id AS CHAR),'Template Name',CAST(OLD.templateName AS CHAR), CAST(NEW.templateName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.priceType,0) != IFNULL(NEW.priceType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('LABOR_COST_TEMPLATE',CAST(new.id AS CHAR),'Price Type',CAST(OLD.priceType AS CHAR), CAST(NEW.priceType AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('LABOR_COST_TEMPLATE',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5497,'2.00','V1',' User Story 38280: Manage History for RFQ relevant Masters - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5497:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(10),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchPoSoPsInv VARCHAR(50),  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pReceiveStatus VARCHAR(255),  \n" +
                "    IN pPackingSlipFromDate DATE,  \n" +
                "    IN pPackingSlipToDate DATE,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"  \n" +
                "									  \" )  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "	IF (pReceiveStatus IS NOT NULL AND pReceiveStatus != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (\",pReceiveStatus,\")\");  \n" +
                "    END IF;  \n" +
                "    IF pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "    END IF;  \n" +
                "	IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = refPackingSlipNumberForInvoice  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" like '%\", pPaymentNumber, \"%' \") ELSE CONCAT(\" = \", pPaymentNumber ,\" \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"  \n" +
                "			SELECT  *  \n" +
                "			FROM	(  \n" +
                "					SELECT 		p.id,  \n" +
                "							p.systemId,  \n" +
                "							p.poNumber,  \n" +
                "                            p.poDate,  \n" +
                "							p.refPurchaseOrderID poId,  \n" +
                "							p.mfgCodeID,  \n" +
                "							p.supplierSONumber,  \n" +
                "                            p.soDate,  \n" +
                "							p.packingSlipNumber,  \n" +
                "							p.packingSlipDate,  \n" +
                "							p.invoiceNumber,  \n" +
                "							p.invoiceDate,  \n" +
                "							p.creditMemoNumber,  \n" +
                "							p.creditMemoDate,  \n" +
                "							p.debitMemoNumber,  \n" +
                "							p.debitMemoDate,  \n" +
                "							p.receiptDate,  \n" +
                "							p.description,  \n" +
                "							p.billToAddress,  \n" +
                "							p.shipToAddress,  \n" +
                "							p.poVersion,  \n" +
                "							p.isDeleted,  \n" +
                "							p.receiptType,  \n" +
                "							p.`status`,  \n" +
                "							p.packingSlipModeStatus,  \n" +
                "							p.chequeNumber,  \n" +
                "							p.chequeDate,  \n" +
                "							p.chequeAmount,  \n" +
                "							p.applyDate,  \n" +
                "							p.refParentCreditDebitInvoiceno,  \n" +
                "							p.refPackingSlipNumberForInvoice,  \n" +
                "							p.invoiceTotalDue,  \n" +
                "							p.isTariffInvoice,  \n" +
                "							p.bankName,  \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "							fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "							m.mfgCode supplierCode,  \n" +
                "							fun_GetFormattedMfgCode(m.mfgCode , m.mfgName,\",v_mfgNameFormat,\") supplierCodeName,  \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "									WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) packingSlipModeStatusValue,  \n" +
                "							ps.id invoiceId,  \n" +
                "							ps.invoiceNumber refInvoiceNumber,  \n" +
                "                            ps.lockStatus refInvoiceLockStatus,  \n" +
                "							ps.invoiceDate refInvoiceDate,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.status = 'I' THEN 'Investigate'  \n" +
                "									WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
                "									WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
                "									WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "									WHEN p.status = 'P' THEN 'Fully Paid'  \n" +
                "                                    WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) statusValue,  \n" +
                "							IFNULL(g.cnt,0) packingSlipDocCount,  \n" +
                "							psm.TotalLines,  \n" +
                "							psm.PendingLines,  \n" +
                "                            psm.AcceptedWithDeviationLines,  \n" +
                "                            psm.RejectedLines,  \n" +
                "                            psm.AcceptedLines,  \n" +
                "                            p.lockStatus,  \n" +
                "                            (case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "								when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "                                when p.lockStatus = 'LC' then 'Locked'  \n" +
                "                                else null end  \n" +
                "                            ) lockStatusValue,  \n" +
                "                            fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                            p.isCustConsigned,  \n" +
                "                            CASE WHEN p.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "                            p.CustomerID,  \n" +
                "                            fun_GetFormattedMfgCode(mc.mfgcode, mc.mfgName, \",v_mfgNameFormat,\") customerName,  \n" +
                "                            p.isNonUMIDStock,  \n" +
                "                            CASE WHEN p.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue  \n" +
                "					FROM		packing_slip_material_receive p  \n" +
                "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	refPackingSlipMaterialRecID,  \n" +
                "										sum(totalLines) as TotalLines,  \n" +
                "                                        sum(pendingLines) as PendingLines,  \n" +
                "                                        sum(acceptedWithDeviationLines) as AcceptedWithDeviationLines,  \n" +
                "                                        sum(rejectedLines) as RejectedLines,  \n" +
                "                                        sum(acceptedLines) as AcceptedLines  \n" +
                "								FROM 		packing_slip_material_receive_det psm  \n" +
                "								WHERE 		isDeleted = 0  \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id  \n" +
                "                    join mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "                    LEFT JOIN mfgcodemst mc ON mc.id = p.CustomerID  \n" +
                "					WHERE p.receiptType = 'P' and p.isDeleted = false ) a  \n" +
                "			WHERE \", v_advanceFilterWhereClause  \n" +
                "		);  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "    /* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " END;  \n" +
                /* **************************** New Script -> 12-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5498,'2.00','V1',' Bug 38530: Main Branch Do Not Create UMID value not showing on Material Receipt List page - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5498:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-11-2021 *********************************** */
                "DROP function IF EXISTS `func_MismatchItemForKit`;  \n" +
                "CREATE FUNCTION `func_MismatchItemForKit`(  \n" +
                "	pRefSalesOrderDetID INT,  \n" +
                "	pAssyID INT,  \n" +
                "	pParentWHType VARCHAR(10),  \n" +
                "	pWarehouseId INT,  \n" +
                "	pBinId INT  \n" +
                ") RETURNS int  \n" +
                "BEGIN  \n" +
                "	DECLARE vMismatchCount INT;  \n" +
                "  \n" +
                "	SELECT (IF(a.isPermanentWH = 1, 1, 0) + IFNULL(SUM(a.unallocatedUMIDCount), 0) +  IFNULL(SUM(a.emptyBinCount), 0) + IFNULL(SUM(a.pendingUMIDBinCount), 0))  \n" +
                "	INTO 	vMismatchCount  \n" +
                "	FROM 	(  \n" +
                "			SELECT 	DISTINCT 	w.parentWHID,  \n" +
                "						w.parentWHType,  \n" +
                "						pw.name parentWarehouseName,  \n" +
                "						b.warehouseID,  \n" +
                "						w.name warehouseName,  \n" +
                "						w.isPermanentWH,  \n" +
                "						w.warehouseType,  \n" +
                "						w.allMovableBin,  \n" +
                "						(  \n" +
                "							SELECT 		COUNT(1)  \n" +
                "							FROM 		component_sid_stock css2  \n" +
                "							INNER JOIN 	binmst b1 ON css2.binid = b1.id AND b1.isdeleted = 0   and css2.isinstk = 1  \n" +
                "							WHERE NOT 	EXISTS (SELECT 1 FROM kit_allocation k2 WHERE   k2.refUIDId = css2.id AND k2.status = 'A' )  \n" +
                "										AND css2.isdeleted = 0  \n" +
                "										AND b1.WarehouseID = w.id  \n" +
                "										AND  css2.binid = IFNULL(pBinId, css2.binid)  \n" +
                "						) unallocatedUMIDCount,  \n" +
                "						(  \n" +
                "							SELECT 	COUNT(1) FROM binmst b1  \n" +
                "							WHERE  	b1.warehouseid = w.ID  AND b1.isactive = 1 AND b1.isdeleted = 0 AND b1.isPermanentBin = 0  \n" +
                "									AND NOT EXISTS (SELECT 1 FROM component_sid_stock css1 WHERE css1.binid = b1.id and css1.isinstk = 1  AND css1.isdeleted = 0)  \n" +
                "									AND NOT EXISTS (SELECT 1 FROM vu_umid_creation_pending p WHERE p.binID = b1.id AND BalanceQty > 0)  \n" +
                "									AND b1.id = IFNULL(pBinId, b1.id)  \n" +
                "						) emptyBinCount,  \n" +
                "						(  \n" +
                "							SELECT 	COUNT(1)  \n" +
                "							FROM 	binmst b1  \n" +
                "							WHERE  	b1.warehouseid = w.ID  \n" +
                "									AND b1.isactive = 1  \n" +
                "									AND b1.isdeleted = 0  \n" +
                "									AND b1.isPermanentBin = 0  \n" +
                "									AND EXISTS (SELECT 1 FROM vu_umid_creation_pending p WHERE p.binID = b1.id AND BalanceQty > 0)  \n" +
                "									AND b1.id = IFNULL(pBinId, b1.id)  \n" +
                "						) pendingUMIDBinCount  \n" +
                "			FROM kit_allocation k  \n" +
                "			INNER JOIN component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "			INNER JOIN binmst b ON b.id = csd.binID  \n" +
                "			INNER JOIN warehousemst w ON w.id = b.warehouseID  \n" +
                "			INNER JOIN warehousemst pw ON pw.id = w.parentWHID  \n" +
                "			WHERE 	k.status = 'A'  \n" +
                "					AND 	k.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "					AND	k.assyID = pAssyID  \n" +
                "					AND     pw.parentWHType = IFNULL(pParentWHType, pw.parentWHType)  \n" +
                "					AND	csd.isDeleted = 0  \n" +
                "					AND	b.isDeleted = 0  \n" +
                "					AND	w.isDeleted = 0  \n" +
                "					AND 	b.warehouseID = IFNULL(pWarehouseId, b.warehouseID)  \n" +
                "			ORDER BY w.name  \n" +
                "		)	AS a  \n" +
                "	WHERE 	a.isPermanentWH = 1  \n" +
                "			OR (a.unallocatedUMIDCount + a.emptyBinCount+ a.pendingUMIDBinCount) > 0;  \n" +
                "  \n" +
                "    RETURN vMismatchCount;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5499,'2.00','V1',' Change function func_MismatchItemForKit add in stock condition in component_sid_Stock table query  - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5499:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-11-2021 *********************************** */
                "drop procedure if exists `Sproc_PurchaseOrderChangeHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_PurchaseOrderChangeHistory`(  \n" +
                "	IN ppurchaseOrderID INT,  \n" +
                "	IN ppurchaseOrderDetId INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vPODetIDs VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT group_concat(id) INTO vPODetIDs FROM purchase_order_det WHERE  refPurchaseOrderID=ppurchaseOrderID AND isDeleted=0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_PurchaseOrderChangeHistory = CONCAT(\"  \n" +
                "		   select ID,Tablename,RefTransID,Colname,Oldval,Newval,fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(createdBy) createdby,  \n" +
                "		fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "		from dataentrychange_auditlog where (RefTransID=\",ppurchaseOrderID,\" and Tablename='PURCHASEORDERMST')  \n" +
                "         \");  \n" +
                "  \n" +
                "	IF ppurchaseOrderDetId IS NOT NULL THEN  \n" +
                "         SET @temp_Sproc_PurchaseOrderChangeHistory=CONCAT(@temp_Sproc_PurchaseOrderChangeHistory, \" OR (Tablename='PURCHASE_ORDER_DET' AND RefTransID = \",ppurchaseOrderDetId,\")\");  \n" +
                "	elseif vPODetIDs is not null then  \n" +
                "		SET @temp_Sproc_PurchaseOrderChangeHistory=CONCAT(@temp_Sproc_PurchaseOrderChangeHistory, \" OR (Tablename='PURCHASE_ORDER_DET' AND RefTransID IN (\",vPODetIDs,\"))\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_PurchaseOrderChangeHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_PurchaseOrderChangeHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 16-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5500,'2.00','V1','Bug 38730: Purchase order->PO change history pop-up : SQL Syntax error'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5500:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);  \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);  \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vUTCDateTime datetime;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() into vUTCDateTime;  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "     SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "							select  a.*  \n" +
                "							from  \n" +
                "							(SELECT 	        c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                            c.actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber ,  \n" +
                "                            min(kitreleasedate)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minKitReleaseDate,  \n" +
                "                             min(id)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minkitid  \n" +
                "					FROM     vu_release_plan_detail AS c where c.kitstatus = case when '\",v_ParentWHType,\"' ='M' then 'P' else 'R' end  \n" +
                "                      ) a where a.kitreleasedate = a.minKitReleaseDate  and a.id =a.minkitid \");  \n" +
                "  \n" +
                "  IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
                "				csd.binId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	binmst  \n" +
                "						WHERE 	isdeleted = 0  \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
                "					)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
                "				ka.refUIDId IN (  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock  \n" +
                "					WHERE 	isdeleted = 0  \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "				)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"  \n" +
                "			EXISTS (  \n" +
                "				SELECT 		1  \n" +
                "				FROM 		kit_allocation ka  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "							AND ka.status = 'A'  \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")  \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
                "	END IF;  \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (pIsCheckPRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"  \n" +
                "		SELECT	a.*,  \n" +
                "			(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore,  \n" +
                "            FUNC_MISMATCHITEMFORKIT(a.refSalesOrderDetID, IFNULL(a.subAssyID,a.refAssyId), 'M', NULL, NULL) AS mismatchItem  \n" +
                "		FROM	(  \n" +
                "			SELECT 	sd.id refSalesOrderDetID,  \n" +
                "					sd.kitNumber,  \n" +
                "					IFNULL(kad.partId, sd.partID) assyID,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
                "					(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
                "					sd.partID assyMainId,  \n" +
                "					c.mfgPN assyMainName,  \n" +
                "					c.PIDCode assyMainPIDCode,  \n" +
                "					kad.partId assySubId,  \n" +
                "					cs.mfgPN assySubName,  \n" +
                "					cs.PIDCode assySubPIDCode,  \n" +
                "					CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
                "					sd.kitNumber kitName,  \n" +
                "					s.id soId,  \n" +
                "					s.poNumber,  \n" +
                "					s.salesOrderNumber,  \n" +
                "					s.poDate,  \n" +
                "					sd.qty,  \n" +
                "					sd.kitQty,  \n" +
                "					kad.totalAssyBuildQty,  \n" +
                "					\", pDeptID ,\" AS deptID,  \n" +
                "					'\", v_ParentWHType ,\"' AS deptType,  \n" +
                "					fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
                "					IFNULL(b.uidCount, 0) uidCount,  \n" +
                "					IFNULL(b.binCount, 0) binCount,  \n" +
                "					ka.kitReleaseStatus,  \n" +
                "					ka.totalLines,  \n" +
                "					ka.shortageLines,  \n" +
                "					sd.isHotJob,  \n" +
                "					IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
                "					fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
                "					fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
                "					ka.kitPercentage,  \n" +
                "					fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  \n" +
                "					fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
                "					(  \n" +
                "						SELECT 	COUNT(1)  \n" +
                "						FROM 	vu_release_plan_detail  \n" +
                "						WHERE 	salesOrderDetID = sd.id  \n" +
                "								AND refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (kad.partId IS NULL OR sd.partID = kad.partId) THEN subAssyID IS NULL ELSE subAssyID = kad.partId END)  \n" +
                "					) totalKitPlan,  \n" +
                "					(  \n" +
                "						SELECT 	IFNULL(COUNT(1), 0)  \n" +
                "						FROM 	vu_release_plan_detail vr  \n" +
                "						WHERE 	vr.salesOrderDetID = sd.id  \n" +
                "								AND vr.refAssyId = sd.partID  \n" +
                "								AND (CASE WHEN (sd.partID IS NULL OR sd.partID = sd.partID) THEN vr.subAssyID IS NULL ELSE vr.subAssyID = sd.partID END)  \n" +
                "								AND vr.kitStatus = 'R'  \n" +
                "					) totalKitReleasePlan,  \n" +
                "					(  \n" +
                "						SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
                "						FROM 	holdunholdtrans h  \n" +
                "						WHERE 	h.refTransId = sd.id  \n" +
                "								AND h.refType = 'PO'  \n" +
                "								AND h.`status` = 'H'  \n" +
                "						ORDER BY h.id DESC  \n" +
                "						LIMIT 1  \n" +
                "					) poHalt,  \n" +
                "					(  \n" +
                "						SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KR'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) a  \n" +
                "								UNION  \n" +
                "								SELECT 	b.haltTooltip  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "										FROM 	holdunholdtrans h  \n" +
                "										WHERE 	h.refTransId = sd.id  \n" +
                "												AND h.refType = 'KA'  \n" +
                "												AND h.`status` = 'H'  \n" +
                "										ORDER BY h.id DESC  \n" +
                "										LIMIT 1  \n" +
                "								) b  \n" +
                "						) c  \n" +
                "					) kitHalt,  \n" +
                "					p.woID,  \n" +
                "					p.workorderNumber,  \n" +
                "					p.id AS id,  \n" +
                "					p.salesOrderDetID,  \n" +
                "					p.refAssyId,  \n" +
                "					p.subAssyID,  \n" +
                "					p.plannKitNumber,  \n" +
                "					p.poQty,  \n" +
                "					p.poDueDate,  \n" +
                "					p.mfrLeadTime,  \n" +
                "					p.materialDockDate,  \n" +
                "					p.kitReleaseQty,  \n" +
                "					p.kitReleaseDate,  \n" +
                "					(DATEDIFF(fun_ConvertUTCDatetimeToSpecificTimeZone('\",vUTCDateTime,\"','\",v_TimeZone,\"'), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
                "					p.feasibilityWithAllocatedQty,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
                "					p.releasedBy,  \n" +
                "					p.releaseTimeFeasibility,  \n" +
                "					p.kitStatus,  \n" +
                "					p.rushJob,  \n" +
                "					p.woStatusID,  \n" +
                "					p.refPlanId,  \n" +
                "					p.releasedNote,  \n" +
                "					p.releaseKitNumber,  \n" +
                "					p.kitReturnStatus,  \n" +
                "					fun_getKitAllocationPercentageForKitPlan(p.salesOrderDetID, IFNULL(p.subAssyID, p.refAssyId), p.kitReleaseQty) kitPlanPercentage,  \n" +
                "					fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,'\",vUTCDateTime,\"'), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0), FALSE) kitReleaseIndicator,  \n" +
                "					ka.allocationUMIDCount allocationUMIDCount  \n" +
                "			FROM 		salesorderdet sd  \n" +
                "			INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "			INNER JOIN	component c ON sd.partID = c.id  \n" +
                "			LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
                "			LEFT JOIN  	component cs ON kad.partId = cs.id  \n" +
                "			LEFT JOIN	(  \n" +
                "						SELECT 	a.refSalesOrderDetID,  \n" +
                "							a.assyID,  \n" +
                "							a.binID,  \n" +
                "							COUNT(1) binCount,  \n" +
                "							SUM(a.uidCount) uidCount,  \n" +
                "							SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
                "						FROM 	(  \n" +
                "								SELECT 		k.refSalesOrderDetID,  \n" +
                "										k.assyID,  \n" +
                "										csd.binID,  \n" +
                "										COUNT(1) uidCount,  \n" +
                "										(  \n" +
                "											SELECT IF( EXISTS(  \n" +
                "												SELECT 	binId  \n" +
                "												FROM 	component_sid_stock  \n" +
                "												WHERE 	binID = csd.binID  \n" +
                "													AND isdeleted = 0  \n" +
                "                                                    and isinstk  =1  \n" +
                "													AND id NOT IN (  \n" +
                "														SELECT 	refUIDId  \n" +
                "														FROM 	kit_allocation  \n" +
                "														WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
                "																AND assyID = k.assyID  \n" +
                "																AND `status` = 'A'  \n" +
                "													)  \n" +
                "											), 1, 0)  \n" +
                "										) mismatchUMIDBin  \n" +
                "									FROM 		kit_allocation k  \n" +
                "									INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "									INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "									INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "									WHERE		k.status = 'A'  \n" +
                "												AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
                "												AND	csd.isDeleted = 0  \n" +
                "												AND	b.isDeleted = 0  \n" +
                "												AND	w.isDeleted = 0  \n" +
                "									GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
                "							) AS a  \n" +
                "						GROUP BY  a.refSalesOrderDetID, a.assyID  \n" +
                "					) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(  \n" +
                "						SELECT 	k.refSalesOrderDetID,  \n" +
                "							k.assyID,  \n" +
                "							k.totalLines,  \n" +
                "							k.shortageLines,  \n" +
                "							k.kitAllocationPercentage kitPercentage,  \n" +
                "							fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.kitAllocationPercentage, FALSE) AS kitReleaseStatus,  \n" +
                "							(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	k.refSalesOrderDetID,  \n" +
                "									k.assyID,  \n" +
                "									COUNT(1) AS totalLines,  \n" +
                "									SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
                "									ROUND(IFNULL(AVG((CASE WHEN (k.allocationPer > 100) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END)), 0), 2) AS kitAllocationPercentage  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	refSalesOrderDetID,  \n" +
                "											assyID,  \n" +
                "											(  \n" +
                "												CASE  \n" +
                "													WHEN connecterTypeID = -2 THEN  \n" +
                "														((100 * IFNULL(allocatedpin,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0) * bomNumOfPosition))  \n" +
                "													ELSE  \n" +
                "														((100 * IFNULL(allocatedunit,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0)))  \n" +
                "												END  \n" +
                "											 ) AS allocationPer,  \n" +
                "											(CASE WHEN connecterTypeID = -2 THEN shortagePins ELSE shortage END) AS shortage  \n" +
                "										FROM 	vu_kit_allocation_detail  \n" +
                "									) k  \n" +
                "								GROUP BY k.refSalesOrderDetID, 	k.assyID  \n" +
                "							) k  \n" +
                "					) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
                "			LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
                "							AND p.refAssyId = sd.partID  \n" +
                "							AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
                "			WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
                "						AND 	s.isDeleted = 0  \n" +
                "						AND 	sd.isCancle != 1  \n" +
                "						AND 	(\", v_WhereClauseFilter ,\")  \n" +
                "						AND 	(\", v_WhereClause ,\")  \n" +
                "			GROUP BY 	sd.id, sd.partID, kad.partId  \n" +
                "		) AS a  \n" +
                "		WHERE 	(\", v_WhereKitFilterCondition ,\")  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 kitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 actualKitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5501,'2.00','V1',' Tune Procedure Sproc_retrive_kit_to_transfer - DP '," + userid + " , '" + requiredDet.ipAddress + "');"

            );
            break;
        case 5501:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-11-2021 *********************************** */
                "drop procedure if exists `Sproc_GetCheckPrintAndRemittanceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(  \n" +
                "	IN pPaymentID int  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		select pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,  \n" +
                "				pip.paymentAmount,  \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,  \n" +
                "				pip.payToAddress,  \n" +
                "				pip.billToName supplierName,  \n" +
                "                pip.billToAddress supplierAddress,  \n" +
                "                ca.email supplierEmail, ca.faxNumber supplierFaxNumber,  \n" +
                "                pip.bankAccountNo,  \n" +
                "                g.gencCategoryName paymentType  \n" +
                "		  from packingslip_invoice_payment pip  \n" +
                "          left join customer_addresses ca ON ca.customerId = pip.mfgcodeID and ca.isDeleted = 0 and ca.addressType = 'B' and ca.isDefault = 1  \n" +
                "          join genericcategory g ON g.categoryType = 'Payable Payment Method' and g.gencCategoryID = pip.paymentType  \n" +
                "		 where pip.isDeleted = 0  \n" +
                "			and pip.refPaymentMode = 'P'  \n" +
                "		   and pip.id = pPaymentID;  \n" +
                "  \n" +
                "		  SELECT pd.refPayementid id,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoNumber  \n" +
                "						ELSE  \n" +
                "							p.debitMemoNumber  \n" +
                "					END) invoiceNumber,  \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "				else  \n" +
                "					(SELECT 	ps.invoiceNumber  \n" +
                "					FROM 	packing_slip_material_receive ps  \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno  \n" +
                "							AND ps.isDeleted = 0  )  \n" +
                "				end  \n" +
                "				) refInvoiceNumber,  \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceDate  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoDate  \n" +
                "						ELSE  \n" +
                "							p.debitMemoDate  \n" +
                "					END) invoiceDate,  \n" +
                "  \n" +
                "				p.remark `description`,  \n" +
                "				/*(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,*/  \n" +
                "                pd.paymentAmount extendedPrice,  \n" +
                "				0 discount,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							'Invoice'  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							'Credit Memo'  \n" +
                "						ELSE  \n" +
                "							'Debit Memo'  \n" +
                "					END) receiptMemoType,  \n" +
                "                    p.poNumber  \n" +
                "			FROM packing_slip_material_receive p  \n" +
                "            join packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id  \n" +
                "			WHERE /*p.isDeleted =0  \n" +
                "			and*/ p.receiptType in ('I','C','D')  \n" +
                "            and exists (select 1 from packingslip_invoice_payment pip where pip.refPaymentMode = 'P' and pip.id = pd.refPayementid)  \n" +
                "			/*and p.`status` = 'P'*/  \n" +
                "			and pd.refPayementid = pPaymentID  \n" +
                "            order by invoiceDate, invoiceNumber;  \n" +
                "  \n" +
                "		SELECT concat(cua.street1,fun_getNewLineCharacter(),cua.city,', ',cua.state,' ',cua.postcode,fun_getNewLineCharacter(),c.countryName) AS address,  \n" +
                "				cua.email,cua.faxNumber,cu.contact,cua.contact AS phoneNo,  \n" +
                "				cu.email AS companyEmail,cu.primaryContactName AS companyContactName, (select `name` from company_info where isDeleted = 0 ) companyName  \n" +
                "		FROM customer_addresses cua  \n" +
                "		JOIN mfgcodemst cu ON cu.id = cua.customerId  \n" +
                "        join countrymst c ON c.countryID = cua.countryID  \n" +
                "		WHERE cua.addressType = 'B' AND cu.isCompany = 1 AND cua.isDefault = 1 AND cua.isDeleted = 0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5502,'2.00','V1', 'Revert Sproc_GetCheckPrintAndRemittanceReport (US 27878) - Bhavik '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5502:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP function IF EXISTS `fun_getKitReturnStatus`;  \n" +
                "CREATE FUNCTION `fun_getKitReturnStatus`(  \n" +
                "    pPendingReleaseCount INT,  \n" +
                "	pReleasedNotReturnedCount INT,  \n" +
                "	pReturnedCount INT,  \n" +
                "	pReadyToReturnCount INT  \n" +
                ") RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vKitReturnStatus VARCHAR(50);  \n" +
                "  \n" +
                "	IF (pPendingReleaseCount = 0 AND  pReleasedNotReturnedCount = 0 AND pReturnedCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Fully Returned';  \n" +
                "	ELSEIF (pReturnedCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Partially Returned';  \n" +
                "	ELSEIF (pReleasedNotReturnedCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Not Returned';  \n" +
                "	ELSEIF (pReadyToReturnCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Ready To Return';  \n" +
                "	ELSE  \n" +
                "		SET vKitReturnStatus = 'N/A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	RETURN vKitReturnStatus;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP function IF EXISTS `fun_getKitReleaseStatus`;  \n" +
                "CREATE FUNCTION `fun_getKitReleaseStatus`(  \n" +
                "	pKitAllocationPer DECIMAL(18,8),  \n" +
                "    pSOPlanTotalKitQty INT,  \n" +
                "    pSOPlanTotalPOQty INT,  \n" +
                "    pPOKitQty INT,  \n" +
                "    pPOQty INT,  \n" +
                "    pReleaseCount INT,  \n" +
                "    pPendingCount INT  \n" +
                ") RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vKitReleaseStatus VARCHAR(50);  \n" +
                "	SET vKitReleaseStatus = 'Not Released';  \n" +
                "  \n" +
                "    IF (ifnull(pReleaseCount,0) > 0 AND ifnull(pPendingCount,0) = 0 AND (ifnull(pSOPlanTotalKitQty,0) = ifnull(pPOKitQty,0) AND ifnull(pSOPlanTotalPOQty,0) = ifnull(pPOQty,0))) THEN  \n" +
                "		SET vKitReleaseStatus = 'Fully Released';  \n" +
                "	ELSEIF (ifnull(pReleaseCount,0) = 0 AND ifnull(pPendingCount,0) > 0) THEN  \n" +
                "		SET vKitReleaseStatus = 'Not Released';  \n" +
                "	ELSEIF (ifnull(pReleaseCount,0) = 0 AND (ifnull(pPendingCount,0) > 0 OR ifnull(pPendingCount,0) = 0) AND (pKitAllocationPer IS NOT NULL AND FLOOR(pKitAllocationPer) = 100)) THEN  \n" +
                "		SET vKitReleaseStatus = 'Ready To Release';  \n" +
                "	ELSEIF (ifnull(pReleaseCount,0) > 0 AND (ifnull(pPendingCount,0) > 0 OR (ifnull(pSOPlanTotalKitQty,0) <> ifnull(pPOKitQty,0) AND ifnull(pSOPlanTotalPOQty,0) <> ifnull(pPOQty,0)))) THEN  \n" +
                "		SET vKitReleaseStatus = 'Partially Released';  \n" +
                "	END IF;  \n" +
                "	REturn vKitReleaseStatus;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report`;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "        `a`.`releaseLevelComment` AS `releaseLevelComment`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                `sm`.`createdAt` AS `createdDate`,  \n" +
                "                `sm`.`updatedAt` AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                IFNULL(`sq`.`ShippedQty`, 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            ((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refSalesOrderID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refSalesOrderID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitReleaseSummaryAndStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleaseSummaryAndStatus`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pMainAssyID INT,  \n" +
                "	IN pIsConsolidated TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    SELECT  c.PartID,	c.releaseCount, 	c.kitReturnStatus,		c.salesOrderCompletedStatus,	c.shortageQty,		c.toBeRelease,		c.totalReleased,  \n" +
                "			FUN_GETKITRELEASESTATUS(allocPerWithSubAssy,totalReleaseQty,totalPOQty,assyKitQty,assyPOQty,releaseCount,pendingCount) releaseStatus  \n" +
                "	FROM  \n" +
                "		(SELECT vuss.PartID,  \n" +
                "                p.releaseCount,  \n" +
                "				p.pendingCount,  \n" +
                "				ka.allocPerWithSubAssy,  \n" +
                "				FUN_GETKITRETURNSTATUS(pendingReleaseCount, releasedNotReturnedCount, returnedCount, readyToreturnCount) kitReturnStatus,  \n" +
                "				IFNULL(`vuss`.`kitQty`, 0) * IFNULL(perAssyBuildQty, 0) AS assyKitQty,  \n" +
                "				IFNULL(`vuss`.`PO Qty`, 0) * IFNULL(perAssyBuildQty, 0) AS assyPOQty,  \n" +
                "				p.totalReleased,  \n" +
                "                p.totalReleaseQty,  \n" +
                "                p.totalPOQty,  \n" +
                "				IFNULL(p.totalReleaseQty, 0) - IFNULL(totalReleased, 0) AS toBeRelease,  \n" +
                "				IFNULL(p.totalReleaseQty, 0) - IFNULL(ka.totalBuildFesibility, 0) AS shortageQty,  \n" +
                "				vuss.`Status` salesOrderCompletedStatus  \n" +
                "		FROM  \n" +
                "			vu_salesorder_updatedlist_report vuss  \n" +
                "		JOIN (  \n" +
                "				SELECT  \n" +
                "					perAssyBuildQty, refSalesOrderDetID, partID AS refAssyId  \n" +
                "				FROM kit_allocation_assy_detail  \n" +
                "				WHERE refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "				AND partID = pAssyID AND isDeleted = 0  \n" +
                "				GROUP BY refSalesOrderDetID , partID  \n" +
                "			) AS a ON a.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "		LEFT JOIN (  \n" +
                "					SELECT  \n" +
                "							salesOrderDetID, refAssyId,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releaseCount,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN kitReleaseQty ELSE 0 END) totalReleased,  \n" +
                "							SUM(CASE WHEN kitStatus = 'P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "							SUM(kitReleaseQty) totalReleaseQty,  \n" +
                "							SUM(poQty) totalPOQty  \n" +
                "					FROM salesorder_plan_detailsmst  \n" +
                "					WHERE /*salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pMainAssyID  \n" +
                "							AND */(CASE WHEN (pIsConsolidated = 1 OR pAssyID = pMainAssyID) THEN subAssyID IS NULL ELSE subAssyID = pAssyID END)  \n" +
                "							AND isDeleted = 0  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p ON p.salesOrderDetID = `vuss`.`salesOrderDetailId` AND p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "						SELECT  \n" +
                "								salesOrderDetID, refAssyId,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "						FROM 	vu_release_plan_release_return_status_det  \n" +
                "						WHERE  /* salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pMainAssyID  \n" +
                "								AND */ (CASE WHEN (pIsConsolidated = 1) THEN 1 = 1 WHEN (pAssyID IS NOT NULL AND pAssyID != pMainAssyID) THEN subAssyID = pAssyID ELSE subAssyID IS NULL END)  \n" +
                "						GROUP BY salesOrderDetID , refAssyId  \n" +
                "					) AS vrr ON vrr.salesOrderDetID = vuss.salesOrderDetailId AND vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "						SELECT  k.refSalesOrderDetID,  mainAssy AS assyID,  k.totalBuildFesibility,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`  \n" +
                "						FROM (  \n" +
                "								SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(MIN(vk.allocatedpin/(vk.qpaWithDnp * vk.bomNumOfPosition)),0) ELSE IFNULL(MIN(vk.allocatedunit/vk.qpaWithDnp),0) END) AS totalBuildFesibility,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "								FROM  	`vu_kit_allocation_detail` vk  \n" +
                "								Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "							) `k`  \n" +
                "							GROUP BY k.refSalesOrderDetID, mainAssy  \n" +
                "			) AS ka ON ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` AND ka.assyID = `vuss`.`PartID`  \n" +
                "		WHERE vuss.SalesOrderDetailId = pRefSalesOrderDetID  \n" +
                "	) AS c;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetSalesorderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToreturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID  \n" +
                "					ORDER BY w.woID ASC ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetSalesorderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToreturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID  \n" +
                "					ORDER BY w.woID ASC ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_kit_plans`;  \n" +
                "CREATE VIEW `vu_kit_plans` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`id` AS `id`,  \n" +
                "        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "        `a`.`refAssyId` AS `refAssyId`,  \n" +
                "        `a`.`subAssyID` AS `subAssyID`,  \n" +
                "        `a`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "        `a`.`poQty` AS `poQty`,  \n" +
                "        `a`.`poDueDate` AS `poDueDate`,  \n" +
                "        `a`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "        `a`.`materialDockDate` AS `materialDockDate`,  \n" +
                "        `a`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "        `a`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "        `a`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "        `a`.`releasedBy` AS `releasedBy`,  \n" +
                "        `a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "        `a`.`kitStatus` AS `kitStatus`,  \n" +
                "        `a`.`woID` AS `woID`,  \n" +
                "        `a`.`refPlanId` AS `refPlanId`,  \n" +
                "        `a`.`releasedNote` AS `releasedNote`,  \n" +
                "        `a`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "        `a`.`kitReturnStatus` AS `kitReturnStatus`,  \n" +
                "        `a`.`kitReturnDate` AS `kitReturnDate`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `s`.`subAssyID` AS `subAssyID`,  \n" +
                "                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "                `s`.`poQty` AS `poQty`,  \n" +
                "                `s`.`poDueDate` AS `poDueDate`,  \n" +
                "                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
                "                `s`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "                `s`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "                `s`.`releasedBy` AS `releasedBy`,  \n" +
                "                `s`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "                `s`.`kitStatus` AS `kitStatus`,  \n" +
                "                `s`.`woID` AS `woID`,  \n" +
                "                `s`.`refPlanId` AS `refPlanId`,  \n" +
                "                `s`.`releasedNote` AS `releasedNote`,  \n" +
                "                `s`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "                `s`.`kitReturnStatus` AS `kitReturnStatus`,  \n" +
                "                `s`.`kitReturnDate` AS `kitReturnDate`  \n" +
                "        FROM  \n" +
                "            `salesorder_plan_detailsmst` `s`  \n" +
                "        WHERE  \n" +
                "            (`s`.`isDeleted` = 0) UNION ALL SELECT  \n" +
                "            `s`.`id` AS `id`,  \n" +
                "                `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                `kassy`.`partId` AS `subAssyID`,  \n" +
                "                `s`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "                (`kassy`.`perAssyBuildQty` * `s`.`poQty`) AS `poQty`,  \n" +
                "                `s`.`poDueDate` AS `poDueDate`,  \n" +
                "                `s`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "                `s`.`materialDockDate` AS `materialDockDate`,  \n" +
                "                (`kassy`.`perAssyBuildQty` * `s`.`kitReleaseQty`) AS `kitReleaseQty`,  \n" +
                "                `s`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`actualKitReleaseDate`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `actualKitReleaseDate`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedBy`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releasedBy`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseTimeFeasibility`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releaseTimeFeasibility`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitStatus`  \n" +
                "                    ELSE 'P'  \n" +
                "                END) AS `kitStatus`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`woID`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `woID`,  \n" +
                "                `s`.`refPlanId` AS `refPlanId`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releasedNote`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releasedNote`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`releaseKitNumber`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `releaseKitNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnStatus`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnStatus`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`kassy`.`partId` = `s`.`subAssyID`) THEN `s`.`kitReturnDate`  \n" +
                "                    ELSE NULL  \n" +
                "                END) AS `kitReturnDate`  \n" +
                "        FROM  \n" +
                "            (`kit_allocation_assy_detail` `kassy`  \n" +
                "        LEFT JOIN `salesorder_plan_detailsmst` `s` ON (((`s`.`salesOrderDetID` = `kassy`.`refSalesOrderDetID`)  \n" +
                "            AND (`s`.`subAssyID` IS NULL))))  \n" +
                "        WHERE  \n" +
                "            ((`kassy`.`isDeleted` = 0)  \n" +
                "                AND (`s`.`isDeleted` = 0)  \n" +
                "                AND (`kassy`.`bomAssyLevel` = 1)  \n" +
                "                AND EXISTS( SELECT  \n" +
                "                    'Y'  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sp`  \n" +
                "                WHERE  \n" +
                "                    ((`sp`.`isDeleted` = 0)  \n" +
                "                        AND (`sp`.`refPlanId` = `s`.`id`)  \n" +
                "                        AND (`kassy`.`partId` = `sp`.`subAssyID`)))  \n" +
                "                IS FALSE)) `a`  \n" +
                "    WHERE  \n" +
                "        ((`a`.`salesOrderDetID` IS NOT NULL)  \n" +
                "            AND (`a`.`refAssyId` IS NOT NULL))  \n" +
                "    ORDER BY `a`.`salesOrderDetID` , `a`.`refAssyId` , `a`.`subAssyID`;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP VIEW  IF EXISTS `vu_perjob_shortage`;  \n" +
                "CREATE VIEW `vu_perjob_shortage` AS  \n" +
                "    SELECT  \n" +
                "        `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "        `k`.`soNumber` AS `soNumber`,  \n" +
                "        `k`.`poNumber` AS `poNumber`,  \n" +
                "        `k`.`assyID` AS `assyID`,  \n" +
                "        `k`.`assyNickname` AS `assyNickname`,  \n" +
                "        `k`.`assyPIDCode` AS `assyPIDCode`,  \n" +
                "        (`k`.`kitAllocationTotalLine` - `k`.`notRequireKitAllocationTotalLine`) AS `totalLine`,  \n" +
                "        `k`.`shortageLine` AS `shortageLine`,  \n" +
                "        `k`.`kitAllocationPercentage` AS `kitAllocationPercentage`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "                `s`.`salesOrderNumber` AS `soNumber`,  \n" +
                "                `s`.`poNumber` AS `poNumber`,  \n" +
                "                `k`.`assyID` AS `assyID`,  \n" +
                "                `c`.`nickName` AS `assyNickname`,  \n" +
                "                `c`.`PIDCode` AS `assyPIDCode`,  \n" +
                "                COUNT(1) AS `kitAllocationTotalLine`,  \n" +
                "                SUM((CASE  \n" +
                "                    WHEN (`k`.`isNotRequiredKitAllocation` = 1) THEN 1  \n" +
                "                    ELSE 0  \n" +
                "                END)) AS `notRequireKitAllocationTotalLine`,  \n" +
                "                SUM((CASE  \n" +
                "                    WHEN (`k`.`shortage` > 0) THEN 1  \n" +
                "                    ELSE 0  \n" +
                "                END)) AS `shortageLine`,  \n" +
                "                ROUND(IFNULL(AVG((CASE  \n" +
                "                    WHEN (`k`.`allocationPer` > 100) THEN 100  \n" +
                "                    ELSE ROUND(IFNULL(`k`.`allocationPer`, 0), 2)  \n" +
                "                END)), 0), 2) AS `kitAllocationPercentage`  \n" +
                "        FROM  \n" +
                "            ((((SELECT  \n" +
                "            `vu_kit_allocation_detail`.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "                `vu_kit_allocation_detail`.`assyID` AS `assyID`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedpin`, 0)) / ((`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`, 0)) * `vu_kit_allocation_detail`.`bomNumOfPosition`))  \n" +
                "                    ELSE ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedunit`, 0)) / (`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`, 0)))  \n" +
                "                END) AS `allocationPer`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN `vu_kit_allocation_detail`.`shortagePins`  \n" +
                "                    ELSE `vu_kit_allocation_detail`.`shortage`  \n" +
                "                END) AS `shortage`,  \n" +
                "                `vu_kit_allocation_detail`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "        FROM  \n" +
                "            `vu_kit_allocation_detail`) `k`  \n" +
                "        JOIN `salesorderdet` `sd` ON (((`k`.`refSalesOrderDetID` = `sd`.`id`)  \n" +
                "            AND (`sd`.`partCategory` = 3))))  \n" +
                "        JOIN `salesordermst` `s` ON ((`sd`.`refSalesOrderID` = `s`.`id`)))  \n" +
                "        JOIN `component` `c` ON ((`k`.`assyID` = `c`.`id`)))  \n" +
                "        GROUP BY `k`.`refSalesOrderDetID`) `k`  \n" +
                "    ORDER BY `k`.`soNumber` , `k`.`poNumber` , `k`.`assyPIDCode`;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "DROP VIEW IF EXISTS `vu_perjob_shortage_with_sub_assembly`;  \n" +
                "CREATE VIEW `vu_perjob_shortage_with_sub_assembly` AS  \n" +
                "    SELECT  \n" +
                "        `y`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "        `y`.`soNumber` AS `soNumber`,  \n" +
                "        `y`.`poNumber` AS `poNumber`,  \n" +
                "        `y`.`assyID` AS `subAssyID`,  \n" +
                "        `y`.`assyNickname` AS `subAssyNickname`,  \n" +
                "        `y`.`assyPIDCode` AS `subAssyPIDCode`,  \n" +
                "        `y`.`mainAssyID` AS `assyID`,  \n" +
                "        (`y`.`kitAllocationTotalLine` - `y`.`notRequireKitAllocationTotalLine`) AS `totalLine`,  \n" +
                "        `y`.`shortageLine` AS `shortageLine`,  \n" +
                "        `y`.`kitAllocationPercentage` AS `kitAllocationPercentage`,  \n" +
                "        FUN_GETASSYNICKNAMEBYID(`y`.`mainAssyID`) AS `assyNickname`,  \n" +
                "        FUN_GETASSYPIDCODEBYID(`y`.`mainAssyID`) AS `assyPIDCode`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "                `k`.`soNumber` AS `soNumber`,  \n" +
                "                `k`.`poNumber` AS `poNumber`,  \n" +
                "                `k`.`assyID` AS `assyID`,  \n" +
                "                `k`.`assyNickname` AS `assyNickname`,  \n" +
                "                `k`.`assyPIDCode` AS `assyPIDCode`,  \n" +
                "                (SELECT  \n" +
                "                        `kit_allocation_assy_detail`.`partId`  \n" +
                "                    FROM  \n" +
                "                        `kit_allocation_assy_detail`  \n" +
                "                    WHERE  \n" +
                "                        ((`kit_allocation_assy_detail`.`refSalesOrderDetID` = `k`.`refSalesOrderDetID`)  \n" +
                "                            AND (`kit_allocation_assy_detail`.`bomAssyLevel` = 0)  \n" +
                "                            AND (`kit_allocation_assy_detail`.`deletedAt` IS NULL))  \n" +
                "                    LIMIT 1) AS `mainAssyID`,  \n" +
                "                `k`.`kitAllocationTotalLine` AS `kitAllocationTotalLine`,  \n" +
                "                `k`.`notRequireKitAllocationTotalLine` AS `notRequireKitAllocationTotalLine`,  \n" +
                "                `k`.`shortageLine` AS `shortageLine`,  \n" +
                "                `k`.`kitAllocationPercentage` AS `kitAllocationPercentage`  \n" +
                "        FROM  \n" +
                "            (SELECT  \n" +
                "            `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "                `s`.`salesOrderNumber` AS `soNumber`,  \n" +
                "                `s`.`poNumber` AS `poNumber`,  \n" +
                "                `k`.`assyID` AS `assyID`,  \n" +
                "                `c`.`nickName` AS `assyNickname`,  \n" +
                "                `c`.`PIDCode` AS `assyPIDCode`,  \n" +
                "                COUNT(1) AS `kitAllocationTotalLine`,  \n" +
                "                SUM((CASE  \n" +
                "                    WHEN (`k`.`isNotRequiredKitAllocation` = 1) THEN 1  \n" +
                "                    ELSE 0  \n" +
                "                END)) AS `notRequireKitAllocationTotalLine`,  \n" +
                "                SUM((CASE  \n" +
                "                    WHEN (`k`.`shortage` > 0) THEN 1  \n" +
                "                    ELSE 0  \n" +
                "                END)) AS `shortageLine`,  \n" +
                "                ROUND(IFNULL(AVG((CASE  \n" +
                "                    WHEN (`k`.`allocationPer` > 100) THEN 100  \n" +
                "                    ELSE ROUND(IFNULL(`k`.`allocationPer`, 0), 2)  \n" +
                "                END)), 0), 2) AS `kitAllocationPercentage`  \n" +
                "        FROM  \n" +
                "            ((((SELECT  \n" +
                "            `vu_kit_allocation_detail`.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "                `vu_kit_allocation_detail`.`assyID` AS `assyID`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedpin`, 0)) / ((`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`, 0)) * `vu_kit_allocation_detail`.`bomNumOfPosition`))  \n" +
                "                    ELSE ((100 * IFNULL(`vu_kit_allocation_detail`.`allocatedunit`, 0)) / (`vu_kit_allocation_detail`.`totalAssyBuildQty` * IFNULL(`vu_kit_allocation_detail`.`qpaWithDnp`, 0)))  \n" +
                "                END) AS `allocationPer`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`vu_kit_allocation_detail`.`connecterTypeID` = -(2)) THEN `vu_kit_allocation_detail`.`shortagePins`  \n" +
                "                    ELSE `vu_kit_allocation_detail`.`shortage`  \n" +
                "                END) AS `shortage`,  \n" +
                "                `vu_kit_allocation_detail`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "        FROM  \n" +
                "            `vu_kit_allocation_detail`) `k`  \n" +
                "        JOIN `salesorderdet` `sd` ON (((`k`.`refSalesOrderDetID` = `sd`.`id`)  \n" +
                "            AND (`sd`.`partCategory` = 3))))  \n" +
                "        JOIN `salesordermst` `s` ON ((`sd`.`refSalesOrderID` = `s`.`id`)))  \n" +
                "        JOIN `component` `c` ON ((`k`.`assyID` = `c`.`id`)))  \n" +
                "        GROUP BY `k`.`refSalesOrderDetID` , `k`.`assyID` , `s`.`salesOrderNumber` , `s`.`poNumber` , `c`.`nickName` , `c`.`PIDCode`) `k`  \n" +
                "        ORDER BY `k`.`soNumber` , `k`.`poNumber` , `k`.`assyPIDCode`) `y`;  \n" +
                /* **************************** New Script -> 17-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5503,'2.00','V1','User Story 38652: Performance Tuning of Sales order Detail / Kit List Detail List page. - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5503:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-11-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_rfq_error_code_category_mapping`;  \n" +
                "CREATE TRIGGER `Trg_AU_rfq_error_code_category_mapping` AFTER UPDATE ON `rfq_error_code_category_mapping` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pCategoryName TEXT;  \n" +
                "	IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN  \n" +
                "		IF NEW.categoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pCategoryName` FROM rfq_error_code_categorymst WHERE id = NEW.categoryID ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.errorCodeId AS CHAR), CONCAT('Transaction Settings: ', pCategoryName), CAST(CASE WHEN OLD.isDeleted=1 THEN 'No' ELSE 'Yes' END AS CHAR),CAST(CASE WHEN NEW.isDeleted=1 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-11-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_rfq_error_code_category_mapping`;  \n" +
                "CREATE TRIGGER `Trg_AI_rfq_error_code_category_mapping` AFTER INSERT ON `rfq_error_code_category_mapping` FOR EACH ROW  \n" +
                "BEGIN  \n" +
                "	DECLARE pCategoryName TEXT;  \n" +
                "		IF NEW.categoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pCategoryName` FROM rfq_error_code_categorymst WHERE id = NEW.categoryID ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.errorCodeId AS CHAR), CONCAT('Transaction Settings: ', pCategoryName),'No','Yes',fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-11-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_quotecharges_dynamic_fields_mst`;  \n" +
                "CREATE TRIGGER `Trg_AU_quotecharges_dynamic_fields_mst` AFTER UPDATE ON `quotecharges_dynamic_fields_mst` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "	IF IFNULL(OLD.fieldName ,0) != IFNULL(NEW.fieldName ,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Name',CAST(OLD.fieldName AS CHAR), CAST(NEW.fieldName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.dataType,0) != IFNULL(NEW.dataType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Data Type',CAST(CASE WHEN (OLD.dataType = 1) THEN 'EA' WHEN (OLD.dataType = 2) THEN 'OTC' ELSE '' END AS CHAR), CAST(CASE WHEN (OLD.dataType = 1) THEN 'EA' WHEN (OLD.dataType = 2) THEN 'OTC' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.costingType,0) != IFNULL(NEW.costingType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Costing Type',CAST(OLD.costingType AS CHAR), CAST(NEW.costingType AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.displayPercentage,0) != IFNULL(NEW.displayPercentage,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Display %',CAST(CASE WHEN (OLD.displayPercentage = 0) THEN 'No' WHEN (OLD.displayPercentage = 1) THEN 'Yes' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.displayPercentage = 0) THEN 'No' WHEN (NEW.displayPercentage = 1) THEN 'Yes' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.displayMargin,0) != IFNULL(NEW.displayMargin,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Display Margin',CAST(CASE WHEN (OLD.displayMargin = 0) THEN 'No' WHEN (OLD.displayMargin = 1) THEN 'Yes' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.displayMargin = 0) THEN 'No' WHEN (NEW.displayMargin = 1) THEN 'Yes' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.displayOrder,0) != IFNULL(NEW.displayOrder,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Display Order',CAST(OLD.displayOrder AS CHAR), CAST(NEW.displayOrder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDaysRequire,0) != IFNULL(NEW.isDaysRequire,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Days Require',CAST(CASE WHEN (OLD.isDaysRequire = 0) THEN 'No' WHEN (OLD.isDaysRequire = 1) THEN 'Yes' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.isDaysRequire = 0) THEN 'No' WHEN (NEW.isDaysRequire = 1) THEN 'Yes' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.defaultMarginValue,0) != IFNULL(NEW.defaultMarginValue,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Default Margin Value',CAST(OLD.defaultMarginValue AS CHAR), CAST(NEW.defaultMarginValue AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.marginApplicableType,0) != IFNULL(NEW.marginApplicableType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Margin Applicable Type',CAST(CASE WHEN (OLD.marginApplicableType = 1) THEN 'Markup $' WHEN (OLD.marginApplicableType = 2) THEN 'Markup %' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.marginApplicableType = 1) THEN 'Markup $' WHEN (NEW.marginApplicableType = 2) THEN 'Markup %' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.defaultuomValue,0) != IFNULL(NEW.defaultuomValue,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Default UOM Value',CAST(OLD.defaultuomValue AS CHAR), CAST(NEW.defaultuomValue AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.affectType,0) != IFNULL(NEW.affectType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Lead Time Selection Criteria',CAST(CASE WHEN (OLD.affectType  = 'L') THEN 'Labor' WHEN (OLD.affectType = 'M') THEN 'Material' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.affectType  = 'L') THEN 'Labor' WHEN (NEW.affectType = 'M') THEN 'Material' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.selectionType,0) != IFNULL(NEW.selectionType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Lead Time Affecting',CAST(CASE WHEN (OLD.selectionType  = 1) THEN 'Whichever is greater' WHEN (OLD.selectionType = 2) THEN 'Add to Lead Time' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.selectionType  = 1) THEN 'Whichever is greater' WHEN (NEW.selectionType = 2) THEN 'Add to Lead Time' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.toolingQty,0) != IFNULL(NEW.toolingQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Qty',CAST(OLD.toolingQty AS CHAR), CAST(NEW.toolingQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.toolingPrice,0) != IFNULL(NEW.toolingPrice,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Price(ea)',CAST(OLD.toolingPrice AS CHAR), CAST(NEW.toolingPrice AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.applyToAll,0) != IFNULL(NEW.applyToAll,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR), CONCAT('Apply To All ', CASE WHEN (NEW.quoteAttributeType  = 'R') THEN 'RFQ' WHEN (NEW.quoteAttributeType  = 'S') THEN 'Supplier' ELSE '' END),CAST(CASE WHEN (OLD.applyToAll  = 1) THEN 'Yes' WHEN (OLD.applyToAll = 0) THEN 'No' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.applyToAll  = 1) THEN 'Yes' WHEN (NEW.applyToAll = 0) THEN 'No' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCommission,0) != IFNULL(NEW.isCommission,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Commission',CAST(CASE WHEN (OLD.isCommission  = 1) THEN 'Yes' WHEN (OLD.isCommission = 0) THEN 'No' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.isCommission  = 1) THEN 'Yes' WHEN (NEW.isCommission = 0) THEN 'No' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isIncludeInOtherAttribute,0) != IFNULL(NEW.isIncludeInOtherAttribute,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Include Other Attribute In Calculation',CAST(CASE WHEN (OLD.isIncludeInOtherAttribute  = 1) THEN 'Yes' WHEN (OLD.isIncludeInOtherAttribute = 0) THEN 'No' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.isIncludeInOtherAttribute  = 1) THEN 'Yes' WHEN (NEW.isIncludeInOtherAttribute = 0) THEN 'No' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.quoteAttributeType,0) != IFNULL(NEW.quoteAttributeType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Quote Attribute Type',CAST(CASE WHEN (OLD.quoteAttributeType = 'R') THEN 'RFQ' WHEN (OLD.quoteAttributeType = 'S') THEN 'Supplier' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.quoteAttributeType = 'R') THEN 'RFQ' WHEN (NEW.quoteAttributeType = 'S') THEN 'Supplier' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.refAttributeID,0) != IFNULL(NEW.refAttributeID,0) THEN  \n" +
                "		IF OLD.refAttributeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`fieldName`, '') INTO `pOldValue` FROM quotecharges_dynamic_fields_mst WHERE id = OLD.refAttributeID ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.refAttributeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`fieldName`, '') INTO `pNewValue` FROM quotecharges_dynamic_fields_mst WHERE id = NEW.refAttributeID ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('QUOTECHARGES_DYNAMIC_FIELDS_MST',CAST(new.id AS CHAR),'Ref. Quote Attribute',CAST(pOldValue AS CHAR), CAST(pNewValue AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5504,'2.00','V1',' Bug 38528: Manage history for RFQ relevant masters bugs check the checklist-6 - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5504:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);  \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);  \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vUTCDateTime datetime;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() into vUTCDateTime;  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "     SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "							select  a.*  \n" +
                "							from  \n" +
                "							(SELECT 	        c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                            c.actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber ,  \n" +
                "                            min(kitreleasedate)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minKitReleaseDate,  \n" +
                "                             min(id)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minkitid  \n" +
                "					FROM     vu_release_plan_detail AS c where c.kitstatus = case when '\",v_ParentWHType,\"' ='M' then 'P' else 'R' end  \n" +
                "                      ) a where a.kitreleasedate = a.minKitReleaseDate  and a.id =a.minkitid \");  \n" +
                "  \n" +
                "  IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
                "				csd.binId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	binmst  \n" +
                "						WHERE 	isdeleted = 0  \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
                "					)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
                "				ka.refUIDId IN (  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock  \n" +
                "					WHERE 	isdeleted = 0  \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "				)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"  \n" +
                "			EXISTS (  \n" +
                "				SELECT 		1  \n" +
                "				FROM 		kit_allocation ka  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "							AND ka.status = 'A'  \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")  \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
                "	END IF;  \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (pIsCheckPRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"  \n" +
                "		SELECT k.* FROM  \n" +
                "			(SELECT	a.*,  \n" +
                "					(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore,  \n" +
                "					FUNC_MISMATCHITEMFORKIT(a.refSalesOrderDetID, IFNULL(a.subAssyID,a.refAssyId), 'M', NULL, NULL) AS mismatchItem,  \n" +
                "					fun_getKitReleaseStatus(a.kitPlanPercentage,totalKitReleaseQty,totalPOReleaseQty,a.assyKitQty,a.assyPOQty,a.totalKitReleasePlan,a.pendingCount) kitReleaseStatus  \n" +
                "				FROM	(  \n" +
                "					SELECT 	sd.id refSalesOrderDetID,  \n" +
                "							sd.kitNumber,  \n" +
                "							IFNULL(kad.partId, sd.partID) assyID,  \n" +
                "							(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
                "							(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
                "							sd.partID assyMainId,  \n" +
                "							c.mfgPN assyMainName,  \n" +
                "							c.PIDCode assyMainPIDCode,  \n" +
                "							kad.partId assySubId,  \n" +
                "							cs.mfgPN assySubName,  \n" +
                "							cs.PIDCode assySubPIDCode,  \n" +
                "							CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
                "							sd.kitNumber kitName,  \n" +
                "							s.id soId,  \n" +
                "							s.poNumber,  \n" +
                "							s.salesOrderNumber,  \n" +
                "							s.poDate,  \n" +
                "							sd.qty,  \n" +
                "							sd.kitQty,  \n" +
                "							kad.totalAssyBuildQty,  \n" +
                "							\", pDeptID ,\" AS deptID,  \n" +
                "							'\", v_ParentWHType ,\"' AS deptType,  \n" +
                "							fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
                "							IFNULL(b.uidCount, 0) uidCount,  \n" +
                "							IFNULL(b.binCount, 0) binCount,  \n" +
                "							ka.totalLines,  \n" +
                "							ka.shortageLines,  \n" +
                "							sd.isHotJob,  \n" +
                "							IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
                "							fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
                "							fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
                "							ka.kitPercentage,  \n" +
                "							fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  \n" +
                "							fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
                "							sp.totalKitPlan,  \n" +
                "							sp.pendingCount,  \n" +
                "							sp.totalKitReleasePlan,  \n" +
                "                            IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.qty,0) AS assyPOQty,  \n" +
                "							IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.kitQty,0) AS assyKitQty,  \n" +
                "							sp.totalKitReleaseQty,  \n" +
                "							sp.totalPOReleaseQty,  \n" +
                "							(  \n" +
                "								SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
                "								FROM 	holdunholdtrans h  \n" +
                "								WHERE 	h.refTransId = sd.id  \n" +
                "										AND h.refType = 'PO'  \n" +
                "										AND h.`status` = 'H'  \n" +
                "								ORDER BY h.id DESC  \n" +
                "								LIMIT 1  \n" +
                "							) poHalt,  \n" +
                "							(  \n" +
                "								SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	a.haltTooltip  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "												FROM 	holdunholdtrans h  \n" +
                "												WHERE 	h.refTransId = sd.id  \n" +
                "														AND h.refType = 'KR'  \n" +
                "														AND h.`status` = 'H'  \n" +
                "												ORDER BY h.id DESC  \n" +
                "												LIMIT 1  \n" +
                "										) a  \n" +
                "										UNION  \n" +
                "										SELECT 	b.haltTooltip  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "												FROM 	holdunholdtrans h  \n" +
                "												WHERE 	h.refTransId = sd.id  \n" +
                "														AND h.refType = 'KA'  \n" +
                "														AND h.`status` = 'H'  \n" +
                "												ORDER BY h.id DESC  \n" +
                "												LIMIT 1  \n" +
                "										) b  \n" +
                "								) c  \n" +
                "							) kitHalt,  \n" +
                "							p.woID,  \n" +
                "							p.workorderNumber,  \n" +
                "							p.id AS id,  \n" +
                "							p.salesOrderDetID,  \n" +
                "							p.refAssyId,  \n" +
                "							p.subAssyID,  \n" +
                "							p.plannKitNumber,  \n" +
                "							p.poQty,  \n" +
                "							p.poDueDate,  \n" +
                "							p.mfrLeadTime,  \n" +
                "							p.materialDockDate,  \n" +
                "							p.kitReleaseQty,  \n" +
                "							p.kitReleaseDate,  \n" +
                "							(DATEDIFF(fun_ConvertUTCDatetimeToSpecificTimeZone('\",vUTCDateTime,\"','\",v_TimeZone,\"'), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
                "							p.feasibilityWithAllocatedQty,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
                "							p.releasedBy,  \n" +
                "							p.releaseTimeFeasibility,  \n" +
                "							p.kitStatus,  \n" +
                "							p.rushJob,  \n" +
                "							p.woStatusID,  \n" +
                "							p.refPlanId,  \n" +
                "							p.releasedNote,  \n" +
                "							p.releaseKitNumber,  \n" +
                "							p.kitReturnStatus,  \n" +
                "							fun_getKitAllocationPercentageForKitPlan(p.salesOrderDetID, IFNULL(p.subAssyID, p.refAssyId), p.kitReleaseQty) kitPlanPercentage,  \n" +
                "							fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,'\",vUTCDateTime,\"'), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0), FALSE) kitReleaseIndicator,  \n" +
                "							ka.allocationUMIDCount allocationUMIDCount  \n" +
                "					FROM 		salesorderdet sd  \n" +
                "					INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "					INNER JOIN	component c ON sd.partID = c.id  \n" +
                "					LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
                "					LEFT JOIN  	component cs ON kad.partId = cs.id  \n" +
                "					LEFT JOIN (  \n" +
                "							SELECT  salesOrderDetID, refAssyId, subAssyID,  \n" +
                "									COUNT(1) totalKitPlan,  \n" +
                "									SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) totalKitReleasePlan,  \n" +
                "									SUM(CASE WHEN kitStatus = 'P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "									SUM(kitReleaseQty) totalKitReleaseQty,  \n" +
                "									SUM(poQty) totalPOReleaseQty  \n" +
                "									FROM salesorder_plan_detailsmst WHERE isDeleted = 0  \n" +
                "									GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "						) AS sp ON sp.salesOrderDetID =  sd.id  AND sp.refAssyId = sd.partID  AND (CASE WHEN kad.partId = sd.partID THEN sp.subAssyID IS NULL ELSE sp.subAssyID = kad.partId END)  \n" +
                "					LEFT JOIN	(  \n" +
                "								SELECT 	a.refSalesOrderDetID,  \n" +
                "									a.assyID,  \n" +
                "									a.binID,  \n" +
                "									COUNT(1) binCount,  \n" +
                "									SUM(a.uidCount) uidCount,  \n" +
                "									SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
                "								FROM 	(  \n" +
                "										SELECT 		k.refSalesOrderDetID,  \n" +
                "												k.assyID,  \n" +
                "												csd.binID,  \n" +
                "												COUNT(1) uidCount,  \n" +
                "												(  \n" +
                "													SELECT IF( EXISTS(  \n" +
                "														SELECT 	binId  \n" +
                "														FROM 	component_sid_stock  \n" +
                "														WHERE 	binID = csd.binID  \n" +
                "															AND isdeleted = 0  \n" +
                "															and isinstk  =1  \n" +
                "															AND id NOT IN (  \n" +
                "																SELECT 	refUIDId  \n" +
                "																FROM 	kit_allocation  \n" +
                "																WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
                "																		AND assyID = k.assyID  \n" +
                "																		AND `status` = 'A'  \n" +
                "															)  \n" +
                "													), 1, 0)  \n" +
                "												) mismatchUMIDBin  \n" +
                "											FROM 		kit_allocation k  \n" +
                "											INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "											INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "											INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "											WHERE		k.status = 'A'  \n" +
                "														AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
                "														AND	csd.isDeleted = 0  \n" +
                "														AND	b.isDeleted = 0  \n" +
                "														AND	w.isDeleted = 0  \n" +
                "											GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
                "									) AS a  \n" +
                "								GROUP BY  a.refSalesOrderDetID, a.assyID  \n" +
                "							) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	k.refSalesOrderDetID,  \n" +
                "									k.assyID,  \n" +
                "									k.totalLines,  \n" +
                "									k.shortageLines,  \n" +
                "									k.kitAllocationPercentage kitPercentage,  \n" +
                "									(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	k.refSalesOrderDetID,  \n" +
                "											k.assyID,  \n" +
                "											COUNT(1) AS totalLines,  \n" +
                "											SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
                "											ROUND(IFNULL(AVG((CASE WHEN (k.allocationPer > 100) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END)), 0), 2) AS kitAllocationPercentage  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	refSalesOrderDetID,  \n" +
                "													assyID,  \n" +
                "													(  \n" +
                "														CASE  \n" +
                "															WHEN connecterTypeID = -2 THEN  \n" +
                "																((100 * IFNULL(allocatedpin,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0) * bomNumOfPosition))  \n" +
                "															ELSE  \n" +
                "																((100 * IFNULL(allocatedunit,0)) / (totalAssyBuildQty * IFNULL(qpaWithDnp,0)))  \n" +
                "														END  \n" +
                "													 ) AS allocationPer,  \n" +
                "													(CASE WHEN connecterTypeID = -2 THEN shortagePins ELSE shortage END) AS shortage  \n" +
                "												FROM 	vu_kit_allocation_detail  \n" +
                "											) k  \n" +
                "										GROUP BY k.refSalesOrderDetID, 	k.assyID  \n" +
                "									) k  \n" +
                "							) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
                "					LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
                "									AND p.refAssyId = sd.partID  \n" +
                "									AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
                "					WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
                "								AND 	s.isDeleted = 0  \n" +
                "								AND 	sd.isCancle != 1  \n" +
                "								AND 	(\", v_WhereClauseFilter ,\")  \n" +
                "								AND 	(\", v_WhereClause ,\")  \n" +
                "					GROUP BY 	sd.id, sd.partID, kad.partId  \n" +
                "				) AS a  \n" +
                "		) AS k WHERE 	(\", v_WhereKitFilterCondition ,\")  \n" +
                "	\");  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 kitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 actualKitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5505,'2.00','V1','User Story 38248: Main branch - Kit Flow related Changes - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5505:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-11-2021 *********************************** */
                "UPDATE systemconfigrations SET description='All date and time display in selected timezone in entire application.' WHERE `key`='TimeZone';  \n" +
                /* **************************** Add Script Version -> 18-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5506,'2.00','V1',' Bug 38688: Data keys: Time Zone-> Spell mistake in description - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5506:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsMFG TINYINT,  \n" +
                "    IN pMfgCodeIDs LONGTEXT,  \n" +
                "    IN pMfgCodeIdsForSupplierParts LONGTEXT,  \n" +
                "    IN pPackagingIDs LONGTEXT,  \n" +
                "    IN pPackageIDs LONGTEXT,  \n" +
                "    IN pPartStatusIDs LONGTEXT,  \n" +
                "    IN pMountingTypeIDs LONGTEXT,  \n" +
                "    IN pExternalMountingTypeValues LONGTEXT,  \n" +
                "    IN pFunctionalTypeIDs LONGTEXT,  \n" +
                "    IN pExternalFunctionalTypeValues LONGTEXT,  \n" +
                "    IN pAttributesSearchHeader LONGTEXT,  \n" +
                "    IN pAttributesSearch LONGTEXT,  \n" +
                "    IN pPackagingAlias TEXT,  \n" +
                "    IN pAlternatePart TEXT,  \n" +
                "    IN pRoHSAlternatePart TEXT,  \n" +
                "    IN pPartUsedInAssembly TEXT,  \n" +
                "    IN pMultiplePartNumbers LONGTEXT,  \n" +
                "    IN pStockQuantity TEXT,  \n" +
                "    IN pPartTypeIDs LONGTEXT,  \n" +
                "    IN pCertificateStandardsIds LONGTEXT,  \n" +
                "    IN pStandardsClassIds LONGTEXT,  \n" +
                "    IN pAssemblyIds LONGTEXT,  \n" +
                "    IN pAssemblyTypeIds LONGTEXT,  \n" +
                "    IN pRohsIds LONGTEXT,  \n" +
                "    IN pExternalRoHSStatusListValues LONGTEXT,  \n" +
                "    IN pOperationalAttributeIds LONGTEXT,  \n" +
                "    IN pAcceptableShippingCountryIds LONGTEXT,  \n" +
                "    IN pComponentOrdering TEXT,  \n" +
                "    IN pComponentUsageCriteria TEXT,  \n" +
                "    IN pIsRefreshMasterFilters TINYINT,  \n" +
                "    IN pFromDate DATE,  \n" +
                "    IN pToDate DATE,  \n" +
                "    IN pIsReversal TINYINT,  \n" +
                "    IN pIsCPN TINYINT,  \n" +
                "    IN pIsCustom TINYINT,  \n" +
                "    IN pIsBOMActivityStarted TINYINT,  \n" +
                "    IN pIsEcoDfmColumnVisible TINYINT,  \n" +
                "    IN pIsSearchFromHeader TINYINT,  \n" +
                "    IN pIsExportControl TINYINT,  \n" +
                "    IN pObsoleteDate DATE,  \n" +
                "    IN pIsOperatingTemperatureBlank TINYINT,  \n" +
                "    IN pFromCreatedOnDate DATE,  \n" +
                "    IN pToCreatedOnDate DATE,  \n" +
                "    IN pIsIdenticalMfrPN TINYINT,  \n" +
                "    IN pIsProductionPNEmpty TINYINT,  \n" +
                "    IN pDisapprovedSupplierIds LONGTEXT,  \n" +
                "	IN pIsExcludeIncorrectPart TINYINT,  \n" +
                "    IN pMultiplePartFilterFieldName VARCHAR(50),  \n" +
                "    IN pMultiplePartByUploadFileDetail LONGTEXT,  \n" +
                "    IN pIsRestrictUSEwithpermission TINYINT,  \n" +
                "    IN pIsRestrictPackagingUseWithpermission TINYINT,  \n" +
                "    IN pIsRestrictUsePermanently TINYINT,  \n" +
                "    IN pIsRestrictPackagingUsePermanently TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE attributeSearchString LONGTEXT;  \n" +
                "    DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "    DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "    DECLARE vPartUsedInAssemblyExists VARCHAR(20);  \n" +
                "    DECLARE vPartUsedInAssemblyAndOR VARCHAR(20);  \n" +
                "  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentSession datetime;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT fun_DatetimetoUTCDateTime() INTO vCurrentSession;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  SET @SQLStatement1=CONCAT(\"  \n" +
                "	SELECT co.id,co.imageURL,co.mfgPN,co.mfgcodeID,co.mfgPNDescription,co.packageQty,co.ltbDate,co.RoHSStatusID,co.PIDCode  \n" +
                ",co.leadTime,co.noOfPosition,co.mountingTypeID,co.partPackage,co.deviceMarking,co.minimum,co.mult,co.uomText,co.rohsText,co.dataSheetLink  \n" +
                ",co.eolDate,co.value,co.tolerance,co.minOperatingTemp,co.maxOperatingTemp,co.weight,co.length,co.width,co.height,co.saftyStock  \n" +
                ",co.specialNote,co.heightText,co.partStatusText,co.feature,co.functionalCategoryText,co.supplier,co.mountingTypeText,co.maxPriceLimit  \n" +
                ",co.selfLifeDays,co.isCustom,co.connecterTypeID,co.connectorTypeText,co.maxQtyonHand,co.noOfRows,co.powerRating,co.pitch,co.pitchMating  \n" +
                ",co.scrapRatePercentagePerBuild,co.plannedOverRunPercentagePerBuild,co.nickName,co.restrictUSEwithpermission,co.operatingTemp  \n" +
                ",co.sizeDimension,co.plannedValuePerBuild,co.scrapValuePerBuild,co.restrictUsePermanently,co.eau,co.pcbPerArray,co.isCPN,co.partType,co.category  \n" +
                ",co.shelfListDaysThresholdPercentage,co.color,co.businessRisk,co.grossWeight,co.packagingWeight,co.restrictPackagingUsePermanently  \n" +
                ",co.restrictPackagingUseWithpermission,co.reversalDate,co.serialNumber,co.isActivityStart,co.activityStartBy,co.activityStartAt  \n" +
                ",co.systemGenerated,co.purchasingComment,co.detailDescription,co.documentPath,co.obsoleteDate,co.epicorType,co.partStatus,co.packagingID,co.functionalCategoryID,co.partPackageID,co.isWaterSoluble,co.isNoClean  \n" +
                ",co.mfrNameText,co.isHazmatMaterial,co.rfqNumber,co.salesacctId,co.purchaseacctId,co.umidSPQ,co.internalReference,  fun_GetFormattedMfgCode(mf.mfgCode, mf.mfgName, \", vMfgCodeFormat ,\") as mfgCode,  \n" +
                " mf.isCustOrDisty, mf.mfgName as manufacturerName, mf.displayOrder mfgDisplayOrder,  \n" +
                "		(case when co.isGoodPart!=2 and mf.mfgType = 'MFG' then 1 else 0 end) as isCopyPart,  \n" +
                "		gc.name AS partStatusValue,  \n" +
                "        gc.displayOrder parStatusDisplayOrder,  \n" +
                "		mf.mfgType, co.isReceiveBulkItem \");  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "			null AliasMFGPN,  \n" +
                "			null AliasMFGCode,  \n" +
                "			null AliasMFGCodeID,  \n" +
                "			null AliascompID,  \n" +
                "			null AliasMFGName,  \n" +
                "            null AliasMFGDisplayOrder\");  \n" +
                "    ELSE  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		/*(case when (mf.mfgType = 'DIST' and co.refSupplierMfgpnComponentID is not null) then (select MFGPN from component vu_co where vu_co.id = co.refSupplierMfgpnComponentID limit 1) else null end) AliasMFGPN,*/  \n" +
                "         vu_co.MFGPN AliasMFGPN,  \n" +
                "          fun_GetFormattedMfgCode(mfc.mfgCode, mfc.mfgName,\", vMfgCodeFormat ,\") as AliasMFGCode,  \n" +
                "        mfc.id AliasMFGCodeID,  \n" +
                "	    co.refSupplierMfgpnComponentID AliascompID,  \n" +
                "        mfc.mfgName as AliasMFGName,  \n" +
                "        mfc.displayOrder AliasMFGDisplayOrder \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		ro.name AS `rohsComplientConvertedValue`,  \n" +
                "        ro.displayOrder rohsDisplayOrder,  \n" +
                "		ro.rohsIcon AS `rohsIcon`,  \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 1) THEN 'Correct Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 2) THEN 'Incorrect Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 3) THEN 'TBD Part'  \n" +
                "					ELSE '' END) AS `isGoodPartValue`,  \n" +
                "		case when co.isCustom = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCustomValue,  \n" +
                "		case when co.isCPN = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCPNValue,  \n" +
                "		pt.partTypeName functionalCategoryName,  \n" +
                "        pt.displayOrder functionalCategoryDisplayOrder,  \n" +
                "		mt.name mountingTypeName,  \n" +
                "        mt.displayOrder mountingTypeDisplayOrder,  \n" +
                "		pc.categoryName,  \n" +
                "		rct.name connecterTypeName,  \n" +
                "		u.unitName,  \n" +
                "		CONCAT(cmsl.levelRating,' (', cmsl.time,')') mslName,  \n" +
                "		pck.name packagingName,  \n" +
                "        pck.displayOrder packagingDisplayOrder,  \n" +
                "			(CASE WHEN (`co`.`isReversal` = 1) THEN 'Yes'  \n" +
                "					ELSE 'No' END) AS `reversalPart`,  \n" +
                "			(CASE WHEN (`co`.`isEpoxyMount` = 1) THEN 'Yes'  \n" +
                "					ELSE 'No' END) AS `isEpoxyMount`,  \n" +
                "		ifnull(vucomstd.isExportControl, 'No') as isExportControl,  \n" +
                "        IFNULL(vuempcre.initialName,co.createdBy) as createdbyValue,  \n" +
                "		IFNULL(vuempupd.initialName ,co.updatedBy)as updatedbyValue,  \n" +
                "		rc.name as createdbyRoleValue,  \n" +
                "		ru.name as updatedbyRoleValue,  \n" +
                "        co.createdAt,  \n" +
                " 		co.updatedAt,  \n" +
                "        co.updatedAtApi,  \n" +
                "		(CASE WHEN (co.systemGenerated = 0) THEN 'No'  \n" +
                "		WHEN (co.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,  \n" +
                "        pct.name packageCaseTypeValue,  \n" +
                "        concat(pt.partTypeName,' - ',mt.name) groupName,  \n" +
                "		case when co.category = 3 then  \n" +
                "			fun_getSamplePicturesUploadCount(co.id)  \n" +
                "		end uploadedSamplePicturesCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.count  \n" +
                "		end assemblyCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			 vurline.lineCount  \n" +
                "		end bomLineCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.quoteProgress  \n" +
                "		end quoteProgress,  \n" +
                "		CASE when co.category = 3 then  \n" +
                "		 	vurfass.id  \n" +
                "		END rfqAssyID,  \n" +
                "		concat(usr.firstName, ' ', usr.lastName) activityStartedByUserName,  \n" +
                "		case when co.isActivityStart=true then  \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt,'\",vCurrentSession,\"')  \n" +
                "			else null end activityStartTime,  \n" +
                "		rat.name assemblyTypeName,  \n" +
                "		CASE when co.frequency = 1 then  \n" +
                "		 	'Every' when    co.frequency = 2 then  \n" +
                "		 	'First' when  co.frequency = 3 then  \n" +
                "		 	'Last' else ''  \n" +
                "		END frequencyName,  \n" +
                "        CASE WHEN co.isWaterSoluble = 0 THEN 'NO' ELSE 'YES' END isWaterSolubleConvertedValue ,  \n" +
                "        CASE WHEN co.isNoClean = 0 THEN 'NO' ELSE 'YES' END isNoCleanConvertedValue,  \n" +
                "        fun_getHazmateValue(co.isHazmatMaterial) as isHazmatMaterialValue,  \n" +
                "        CASE WHEN co.isReceiveBulkItem = 0 THEN 'NO' ELSE 'YES' END isReceiveBulkConvertedValue,  \n" +
                "        CONCAT('(',am.`acct_code`,') ',am.`acct_name`) AS SalesCOA,  \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS PurchaseCOA,  \n" +
                "        vucomstd.certificatelist\");  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') OR pComponentOrdering = 'STOCK' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentStock(co.id) partStock \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partStock \");  \n" +
                "	END IF;  \n" +
                "    IF pComponentOrdering = 'USAGE' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentUsage(co.id,'\",pFromDate,\"','\",pToDate,\"','\",pComponentUsageCriteria,\"') partUsage \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partUsage \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsEcoDfmColumnVisible = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , (select count(1)  \n" +
                "													  from eco_request ec  \n" +
                "													 where ec.isdeleted = 0  \n" +
                "													   and ec.finalstatus = 'P'  \n" +
                "													   and ec.fromPartID = co.id) activeEcoDfmCount \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null activeEcoDfmCount \");  \n" +
                "	END IF;  \n" +
                "	IF (pFromCreatedOnDate IS NOT NULL OR pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , CAST(fun_CovnertDateTimeByTimezoneValue(co.createdAt,'\",vTimeZone,\"') AS DATE) createdAtFilter \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , count(1) over(partition by co.mfgPN,mf.mfgType) identicalPNCount \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
                "	FROM component co  \n" +
                "		JOIN rfq_partcategory pc ON pc.id = co.partType  \n" +
                " 		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id  \n" +
                " 		JOIN component_partstatusmst gc ON gc.id = co.partStatus  \n" +
                " 		JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id  \n" +
                " 		JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID  \n" +
                " 		JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID  \n" +
                " 		LEFT JOIN rfq_connectertypemst rct ON rct.id = co.connecterTypeID  \n" +
                " 		JOIN uoms u ON u.id = co.uom  \n" +
                " 		LEFT JOIN component_mslmst cmsl ON cmsl.id = co.mslID  \n" +
                "		left join rfq_packagecasetypemst pct ON pct.id = co.partPackageID  \n" +
                "        LEFT JOIN users usr ON usr.id = co.activityStartBy  \n" +
                "        left join rfq_assy_typemst rat ON rat.id = co.assemblyType  \n" +
                " 		LEFT JOIN component_packagingmst pck ON pck.id = co.packagingID  \n" +
                "        LEFT JOIN acct_acctmst am ON am.acct_id = co.salesacctId  \n" +
                "        LEFT JOIN acct_acctmst aam ON aam.acct_id = co.purchaseacctId  \n" +
                "		left JOIN vu_component_standard vucomstd ON vucomstd.componentID = co.id  \n" +
                "        left JOIN vu_emp_detail vuempcre ON vuempcre.id = co.createdBy  \n" +
                "        left JOIN vu_emp_detail vuempupd ON vuempupd.id = co.updatedBy  \n" +
                "        left JOIN roles rc ON rc.id = co.createByRoleId  \n" +
                "        left JOIN roles ru ON ru.id = co.updateByRoleId  \n" +
                "        left join vu_rfq_assembly_detail vurfass on vurfass.partId = co.id  \n" +
                "        left join vu_rfq_lineitem_count vurline on vurline.partId = co.id\");  \n" +
                "    IF pIsMFG = FALSE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "			JOIN mfgcodemst mfc ON mfc.id = co.refMfgPNMfgCodeId  \n" +
                "            JOIN COMPONENT vu_co on vu_co.id = co.refSupplierMfgpnComponentID \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "    WHERE co.isdeleted = 0 \");  \n" +
                "  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''MFG'' ');  \n" +
                "    ELSE  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''DIST'' ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pMultiplePartFilterFieldName is not null AND pMultiplePartByUploadFileDetail IS NOT NULL AND pMultiplePartByUploadFileDetail != '')  \n" +
                "    THEN  \n" +
                "		if(pMultiplePartFilterFieldName = 'SystemID')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.serialNumber IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSEif(pMultiplePartFilterFieldName = 'PID Code')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.PIDCode IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgPN IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		IF pComponentOrdering = 'MFG' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"MFGCode asc, \" , pOrderBy);  \n" +
                "            END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'MFGPN' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"mfgPN asc, \" , pOrderBy);  \n" +
                "			END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'USAGE' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partUsage desc, \" , pOrderBy);  \n" +
                "		ELSEIF pComponentOrdering = 'STOCK' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partStock desc, \" , pOrderBy);  \n" +
                "		END IF;  \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgcodeID in (', pMfgCodeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMfgCodeIdsForSupplierParts IS NOT NULL AND pMfgCodeIdsForSupplierParts != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.refMfgPNMfgCodeId in (', pMfgCodeIdsForSupplierParts, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packagingID in (', pPackagingIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackageIDs IS NOT NULL AND pPackageIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partPackageID in (', pPackageIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partStatus in (', pPartStatusIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeID in (', pMountingTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalMountingTypeValues IS NOT NULL AND pExternalMountingTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeText in (', pExternalMountingTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryID in (', pFunctionalTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalFunctionalTypeValues IS NOT NULL AND pExternalFunctionalTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryText in (', pExternalFunctionalTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMultiplePartNumbers IS NOT NULL AND pMultiplePartNumbers != '') THEN  \n" +
                "		IF pIsMFG = TRUE THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "																)');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "																and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                and cc.mfgpn in (', pMultiplePartNumbers, '))  \n" +
                "                                                                OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "                                                                )');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "    IF (pPartTypeIDs IS NOT NULL AND pPartTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partType in (', pPartTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '' AND  \n" +
                "		pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' ) and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "	ELSEIF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' )) ');  \n" +
                "	ELSEIF (pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyIds IS NOT NULL AND pAssemblyIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and rl.partID in (', pAssemblyIds, '))) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyTypeIds IS NOT NULL AND pAssemblyTypeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.assemblyType in (', pAssemblyTypeIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pRohsIds IS NOT NULL AND pRohsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.RoHSStatusID in (', pRohsIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pExternalRoHSStatusListValues IS NOT NULL AND pExternalRoHSStatusListValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsText in (', pExternalRoHSStatusListValues, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsReversal = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isReversal = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsCPN = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isCPN = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsCustom = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isCustom = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsBOMActivityStarted = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isActivityStart = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsOperatingTemperatureBlank = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.operatingTemp is not null and co.operatingTemp != \"\" and (co.minOperatingTemp is null or co.maxOperatingTemp is null) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pObsoleteDate IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, \" AND co.obsoleteDate >= '\",pObsoleteDate,\"'\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsProductionPNEmpty = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.productionPN is null ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pToCreatedOnDate IS NOT NULL AND pFromCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND identicalPNCount > 1 ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pOperationalAttributeIds IS NOT NULL AND pOperationalAttributeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_dynamic_attribute_mapping_part cd  \n" +
                "													   where cd.mfgPNID=co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.attributeID in (',pOperationalAttributeIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pDisapprovedSupplierIds IS NOT NULL AND pDisapprovedSupplierIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_approved_supplier_mst cd  \n" +
                "													   where cd.partID = co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.supplierID in (',pDisapprovedSupplierIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAcceptableShippingCountryIds IS NOT NULL AND pAcceptableShippingCountryIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_acceptable_shipping_countries ca  \n" +
                "														  where ca.isdeleted = false  \n" +
                "															and ca.deletedat is null  \n" +
                "															and ca.refComponentID = co.id  \n" +
                "															and ca.countryID in (',pAcceptableShippingCountryIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pIsRestrictUSEwithpermission = TRUE OR pIsRestrictPackagingUseWithpermission = true OR pIsRestrictUsePermanently = true OR pIsRestrictPackagingUsePermanently = true)  \n" +
                "    THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (');  \n" +
                "        set @restricStatement = '';  \n" +
                "		IF pIsRestrictUSEwithpermission = TRUE THEN  \n" +
                "			SET @restricStatement =  ' co.restrictUSEwithpermission = true ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF pIsRestrictPackagingUseWithpermission = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUseWithpermission = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END),  ' co.restrictUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictPackagingUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "        SET @SQLStatement1 = CONCAT(@SQLStatement1, @restricStatement, ')');  \n" +
                "    END IF;  \n" +
                "	IF (pAttributesSearchHeader IS NOT NULL AND pAttributesSearchHeader != '') THEN  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.minOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.maxOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientValue like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfPosition like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfRows like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.length like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.width like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.height like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', pAttributesSearchHeader, '%'' )) ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc  \n" +
                "																			where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "                                                                            and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                            and cc.mfgPN like ''%', pAttributesSearchHeader, '%'' )  \n" +
                "														      OR exists (select 1 from component_otherpn cp where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.refSupplierMfgpnComponentID and cp.name like (''%', pAttributesSearchHeader, '%'' ))  \n" +
                "																		');  \n" +
                "          END IF;  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN  \n" +
                "		SET attributeSearchString = pAttributesSearch;  \n" +
                "       do_this:  \n" +
                "	  LOOP  \n" +
                "		SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "		SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, ',', 1);  \n" +
                "		SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "		SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+2), attributeSearchLength);  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND  isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.minOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.maxOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.temperatureCoefficientValue)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfPosition)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfRows)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.length)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.width)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.height)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ) ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' )');  \n" +
                "          /*IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID and cc.mfgPN like ''%', attributeSearchChip, '%'' )');  \n" +
                "          END IF;  */  \n" +
                "		IF attributeSearchString = NULL OR attributeSearchString = \"\" THEN  \n" +
                "		  LEAVE do_this;  \n" +
                "		END IF;  \n" +
                "	  END LOOP do_this;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pPackagingAlias IS NOT NULL AND pPackagingAlias != '') THEN  \n" +
                "		IF (pPackagingAlias = '1') THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is not null ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is null ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "		IF (pAlternatePart IS NOT NULL AND pAlternatePart != '') THEN  \n" +
                "			IF (pAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
                "			END IF;  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 1 and ca.isDeleted = 0) ');  \n" +
                "		END IF;  \n" +
                "		IF (pRoHSAlternatePart IS NOT NULL AND pRoHSAlternatePart != '') THEN  \n" +
                "			IF (pRoHSAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
                "			END IF;  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 6 and ca.isDeleted = 0) ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF (pPartUsedInAssembly IS NOT NULL AND pPartUsedInAssembly != '') THEN  \n" +
                "			SET vPartUsedInAssemblyExists = \" \";  \n" +
                "            SET vPartUsedInAssemblyAndOR = \" \";  \n" +
                "			IF (pPartUsedInAssembly = '1') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" OR \";  \n" +
                "			ELSEIF (pPartUsedInAssembly = '2') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" NOT \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" AND \";  \n" +
                "            END IF;  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, 'AND co.category = 2  \n" +
                "															AND ( ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and exists (select 1 from component c where c.id = rl.partid and c.partStatus = 1))) ');  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.partStock >= \", pStockQuantity);  \n" +
                "	END IF;  \n" +
                "   IF pIsExportControl = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,' ',' and c.isExportControl = \"Yes\" ');  \n" +
                "   END IF;  \n" +
                "	IF pIsExcludeIncorrectPart = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isGoodPart in (1,3) ');  \n" +
                "	END IF;  \n" +
                "    DROP temporary TABLE IF EXISTS tempComponentListData;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"create temporary table tempComponentListData  \n" +
                "    select count(1) over(partition by c.mfgType) as totalCount,c.*,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,  \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.updatedAtApi,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtApiValue  \n" +
                "									from ( \", @SQLStatement1,\" ) c  \n" +
                "		where \", pWhereClause , \" \", pOrderBy , rowNumWhere);  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  /* to get total count of rows */  \n" +
                "	-- SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where \", pWhereClause);  \n" +
                "    SET @SQLStatement2 = CONCAT(\" SELECT totalCount from tempComponentListData limit 1\");  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	/*PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" select * from tempComponentListData\");  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "	IF pIsRefreshMasterFilters = TRUE THEN  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT mfgCodeID as mfgcodeID, mfgCode, manufacturerName as mfgName, mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID  \n" +
                "										from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\"  \n" +
                "                                        group by mfgCodeID, mfgCode, manufacturerName , mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID\");  \n" +
                "		 PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" with cte as ( SELECT id from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\" )  \n" +
                "									select * from  \n" +
                "										(select case when stdc.classID is not null then  \n" +
                "													concat(cs.certificateStandardID,':',stdc.classID)  \n" +
                "													else cs.certificateStandardID end certificateStandardID,  \n" +
                "												case when stdc.classID is not null then  \n" +
                "													concat(cs.fullName,' ',stdc.classname)  \n" +
                "													else cs.fullName end fullName,  \n" +
                "												cs.displayOrder  \n" +
                "										  from certificate_standards cs  \n" +
                "										  join component_standard_details csd on csd.certificateStandardID = cs.certificateStandardID  \n" +
                "										  left join standard_class stdc on csd.ClassID = stdc.classID  \n" +
                "										where csd.isDeleted = 0 and csd.deletedAt is null and csd.componentID in (select id from cte)  \n" +
                "										) a group by certificateStandardID, fullName, displayOrder  \n" +
                "										order by displayOrder,fullName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" select distinct cm.countryID, cm.countryName  \n" +
                "					  from component_acceptable_shipping_countries casc  \n" +
                "					  join countrymst cm ON cm.countryid = casc.countryid  \n" +
                "					 where casc.isdeleted = false  \n" +
                "					   and casc.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "									where c.id = casc.refComponentID and \", pWhereClause,\" )  \n" +
                "                                    order by cm.countryName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "         /*SET @SQLStatement2 = CONCAT(\" select distinct cda.id, cda.attributeName  \n" +
                "					  from component_dynamic_attribute_mapping_part cdam  \n" +
                "					  join component_dynamic_attribute cda ON cda.id = cdam.attributeID  \n" +
                "					 where cdam.isdeleted = false  \n" +
                "					   and cdam.deletedat is null  \n" +
                "					   and cda.isdeleted = false  \n" +
                "					   and cda.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "                                     where c.id = cdam.mfgPNID and \", pWhereClause,\" )  \n" +
                "                                     order by cda.attributeName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "    END IF;  \n" +
                "  \n" +
                "		IF (pIsSearchFromHeader = TRUE) THEN  \n" +
                "			/*Fetch Functional Type and Mounting Type wise grouping*/  \n" +
                "			SET @SQLStatement2 = CONCAT(\" select concat(functionalCategoryName,' - ',mountingTypeName) groupName,  \n" +
                "											null groupNameText,  \n" +
                "											functionalCategoryID, mountingTypeID,  \n" +
                "											count(1) recCount  \n" +
                "											from ( \",@SQLStatement1,\" ) c where \", pWhereClause,  \n" +
                "										' group by functionalCategoryName,mountingTypeName,  \n" +
                "													functionalCategoryID, mountingTypeID  \n" +
                "											order by groupName, groupNameText, recCount desc');  \n" +
                "  \n" +
                "            PREPARE query3 FROM @SQLStatement2;  \n" +
                "			EXECUTE query3;  \n" +
                "			DEALLOCATE PREPARE query3;  \n" +
                "        END IF;  \n" +
                "END;  \n" +

                "update systemconfigrations set `values` = 1,description='Select following option for Display MFG Code Format (Display Code first, Only Name, Only Code, Code Last)' where `key` = 'MfgCodeNameFormat';  \n" +
                /* **************************** Add Script Version -> 18-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5507,'2.00','V1',' Bug 38685  - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5507:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-11-2021 *********************************** */
                "CREATE TABLE configuration (  \n" +
                "	`id` INT NOT NULL,  \n" +
                "	`configName` VARCHAR(100) NOT NULL,  \n" +
                "	`configCode` VARCHAR(50) NOT NULL,  \n" +
                "	`createdBy` VARCHAR(255) NOT NULL,  \n" +
                "	`createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "	 `updatedBy` VARCHAR(255) DEFAULT NULL,  \n" +
                "	 `updatedAt` DATETIME DEFAULT CURRENT_TIMESTAMP,  \n" +
                "	 `deletedBy` VARCHAR(255) DEFAULT NULL,  \n" +
                "	 `deletedAt` DATETIME DEFAULT NULL,  \n" +
                "	 `isDeleted` TINYINT NOT NULL DEFAULT 0,  \n" +
                "	 `createByRoleId` INT DEFAULT NULL,  \n" +
                "	 `updateByRoleId` INT DEFAULT NULL,  \n" +
                "	 `deleteByRoleId` INT DEFAULT NULL,  \n" +
                "      PRIMARY KEY (id)  \n" +
                ") ;  \n" +
                /* **************************** Add Script Version -> 18-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5508,'2.00','V1',' create new table configuration - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5508:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-11-2021 *********************************** */
                "INSERT INTO `configuration` (`id`, `configName`, `configCode`, `createdAt`, `createdBy`,  \n" +
                " `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                " VALUES (-1, 'UI Grid Preference', 'uiGridPreference', fun_DatetimetoUTCDateTime(), 1,  \n" +
                " fun_DatetimetoUTCDateTime(), 1, 1, 1) ;  \n" +
                "  \n" +
                "  \n" +
                " INSERT INTO `configuration` (`id`, `configName`, `configCode`, `createdAt`, `createdBy`,  \n" +
                " `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                " VALUES (-2, 'Customer Payment Default List Tab ID', 'defaultCustPaymentListTabID', fun_DatetimetoUTCDateTime(), 1,  \n" +
                " fun_DatetimetoUTCDateTime(), 1, 1, 1) ;  \n" +
                "  \n" +
                "  \n" +
                " INSERT INTO `configuration` (`id`, `configName`, `configCode`, `createdAt`, `createdBy`,  \n" +
                " `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                " VALUES (-3, 'Customer Applied Credit Memo Default List Tab ID', 'defaultCustAppliedCMListTabID', fun_DatetimetoUTCDateTime(), 1,  \n" +
                " fun_DatetimetoUTCDateTime(), 1, 1, 1) ;  \n" +
                "  \n" +
                "  \n" +
                " INSERT INTO `configuration` (`id`, `configName`, `configCode`, `createdAt`, `createdBy`,  \n" +
                " `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                " VALUES (-4, 'Customer Write Offs Default List Tab ID', 'defaultCustAppliedWOFFListTabID', fun_DatetimetoUTCDateTime(), 1,  \n" +
                " fun_DatetimetoUTCDateTime(), 1, 1, 1) ;  \n" +
                "  \n" +
                "  \n" +
                " INSERT INTO `configuration` (`id`, `configName`, `configCode`, `createdAt`, `createdBy`,  \n" +
                " `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                " VALUES (-5, 'Customer Refund Default List Tab ID', 'defaultCustRefundListTabID', fun_DatetimetoUTCDateTime(), 1,  \n" +
                " fun_DatetimetoUTCDateTime(), 1, 1, 1) ;  \n" +
                "  \n" +
                "  \n" +
                "  INSERT INTO `configuration` (`id`, `configName`, `configCode`, `createdAt`, `createdBy`,  \n" +
                " `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                " VALUES (-6, 'Customer Invoice Default List Tab ID', 'defaultCustInvoiceListTabID', fun_DatetimetoUTCDateTime(), 1,  \n" +
                " fun_DatetimetoUTCDateTime(), 1, 1, 1) ;  \n" +
                "  \n" +
                "  \n" +
                "  INSERT INTO `configuration` (`id`, `configName`, `configCode`, `createdAt`, `createdBy`,  \n" +
                " `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                " VALUES (-7, 'Customer Credit Note Default List Tab ID', 'defaultCustCreditNoteListTabID', fun_DatetimetoUTCDateTime(), 1,  \n" +
                " fun_DatetimetoUTCDateTime(), 1, 1, 1) ;  \n" +
                "  \n" +
                "  \n" +
                "   INSERT INTO `configuration` (`id`, `configName`, `configCode`, `createdAt`, `createdBy`,  \n" +
                " `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                " VALUES (-8, 'Customer Packing Slip Default List Tab ID', 'defaultCustPackingSlipListTabID', fun_DatetimetoUTCDateTime(), 1,  \n" +
                " fun_DatetimetoUTCDateTime(), 1, 1, 1) ;  \n" +
                "  \n" +
                "  \n" +
                "   INSERT INTO `configuration` (`id`, `configName`, `configCode`, `createdAt`, `createdBy`,  \n" +
                " `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                " VALUES (-9, 'Sales Order Default List Tab ID', 'defaultSalesOrderListTabID', fun_DatetimetoUTCDateTime(), 1,  \n" +
                " fun_DatetimetoUTCDateTime(), 1, 1, 1) ;  \n" +
                "  \n" +
                "  \n" +
                "   INSERT INTO `configuration` (`id`, `configName`, `configCode`, `createdAt`, `createdBy`,  \n" +
                " `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                " VALUES (-10, 'Purchase Order Default List Tab ID', 'defaultPurchaseOrderListTabID', fun_DatetimetoUTCDateTime(), 1,  \n" +
                " fun_DatetimetoUTCDateTime(), 1, 1, 1) ;  \n" +
                /* **************************** Add Script Version -> 18-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5509,'2.00','V1',' default entry in table configuration - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5509:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-11-2021 *********************************** */
                "ALTER TABLE `user_configuration`  \n" +
                "ADD COLUMN `configurationID` INT ;  \n" +
                "  \n" +
                "ALTER TABLE `user_configuration`  \n" +
                "ADD COLUMN `configurationValue` VARCHAR(10) ;  \n" +
                "  \n" +
                "ALTER TABLE user_configuration  \n" +
                "ADD CONSTRAINT FK_user_configuration_configurationID  \n" +
                "FOREIGN KEY (configurationID) REFERENCES configuration(id) ;  \n" +
                "  \n" +
                "  \n" +
                "ALTER TABLE user_configuration  \n" +
                "DROP FOREIGN KEY user_configuration_ibfk_1 ;  \n" +
                "  \n" +
                "ALTER TABLE user_configuration  \n" +
                "DROP INDEX userId ;  \n" +
                "  \n" +
                "ALTER TABLE user_configuration  \n" +
                "ADD CONSTRAINT FK_user_configuration_userId  \n" +
                "FOREIGN KEY (userId) REFERENCES users(id) ;  \n" +
                "  \n" +
                "ALTER TABLE user_configuration  \n" +
                "ADD COLUMN unqDate DATETIME DEFAULT '2001-01-01' ON UPDATE CURRENT_TIMESTAMP();  \n" +
                "  \n" +
                "ALTER TABLE `user_configuration`  \n" +
                "ADD UNIQUE `IDX_UNQ_user_configuration_userId_configurationID`(`userId`, `configurationID`, `isDeleted`, `unqDate`);  \n" +
                /* **************************** Add Script Version -> 18-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5510,'2.00','V1',' new field in table user_configuration - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5510:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_Uti_InsertUserConfigurationData` ;  \n" +
                "CREATE PROCEDURE `Sproc_Uti_InsertUserConfigurationData`()  \n" +
                "BEGIN  \n" +
                "		 INSERT INTO user_configuration (`userId`, `configurationID`, `configurationValue`,  \n" +
                "				`createdAt`, `createdBy`, `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                "		SELECT userId, -2, defaultCustPaymentListTabID,  \n" +
                "			fun_DatetimetoUTCDateTime(), createdBy, fun_DatetimetoUTCDateTime(), createdBy, createByRoleId, createByRoleId  \n" +
                "		FROM user_configuration uco  \n" +
                "		WHERE defaultCustPaymentListTabID IS NOT NULL  \n" +
                "		AND NOT EXISTS (SELECT 'Y' FROM user_configuration uci WHERE (uci.userId = uco.userId  \n" +
                "					AND uci.configurationID = -2) AND isDeleted = 0)  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "		 INSERT INTO user_configuration (`userId`, `configurationID`, `configurationValue`,  \n" +
                "				`createdAt`, `createdBy`, `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                "		SELECT userId, -3, defaultCustAppliedCMListTabID,  \n" +
                "			fun_DatetimetoUTCDateTime(), createdBy, fun_DatetimetoUTCDateTime(), createdBy, createByRoleId, createByRoleId  \n" +
                "		FROM user_configuration uco  \n" +
                "		WHERE defaultCustAppliedCMListTabID IS NOT NULL  \n" +
                "		AND NOT EXISTS (SELECT 'Y' FROM user_configuration uci WHERE (uci.userId = uco.userId  \n" +
                "					AND uci.configurationID = -3) AND isDeleted = 0)  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "		 INSERT INTO user_configuration (`userId`, `configurationID`, `configurationValue`,  \n" +
                "				`createdAt`, `createdBy`, `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                "		SELECT userId, -4, defaultCustAppliedWOFFListTabID,  \n" +
                "			fun_DatetimetoUTCDateTime(), createdBy, fun_DatetimetoUTCDateTime(), createdBy, createByRoleId, createByRoleId  \n" +
                "		FROM user_configuration uco  \n" +
                "		WHERE defaultCustAppliedWOFFListTabID IS NOT NULL  \n" +
                "		AND NOT EXISTS (SELECT 'Y' FROM user_configuration uci WHERE (uci.userId = uco.userId  \n" +
                "					AND uci.configurationID = -4) AND isDeleted = 0)  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "		 INSERT INTO user_configuration (`userId`, `configurationID`, `configurationValue`,  \n" +
                "				`createdAt`, `createdBy`, `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                "		SELECT userId, -5, defaultCustRefundListTabID,  \n" +
                "			fun_DatetimetoUTCDateTime(), createdBy, fun_DatetimetoUTCDateTime(), createdBy, createByRoleId, createByRoleId  \n" +
                "		FROM user_configuration uco  \n" +
                "		WHERE defaultCustRefundListTabID IS NOT NULL  \n" +
                "		AND NOT EXISTS (SELECT 'Y' FROM user_configuration uci WHERE (uci.userId = uco.userId  \n" +
                "					AND uci.configurationID = -5) AND isDeleted = 0)  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "		 INSERT INTO user_configuration (`userId`, `configurationID`, `configurationValue`,  \n" +
                "				`createdAt`, `createdBy`, `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                "		SELECT userId, -6, defaultCustInvoiceListTabID,  \n" +
                "			fun_DatetimetoUTCDateTime(), createdBy, fun_DatetimetoUTCDateTime(), createdBy, createByRoleId, createByRoleId  \n" +
                "		FROM user_configuration uco  \n" +
                "		WHERE defaultCustInvoiceListTabID IS NOT NULL  \n" +
                "		AND NOT EXISTS (SELECT 'Y' FROM user_configuration uci WHERE (uci.userId = uco.userId  \n" +
                "					AND uci.configurationID = -6) AND isDeleted = 0)  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "		 INSERT INTO user_configuration (`userId`, `configurationID`, `configurationValue`,  \n" +
                "				`createdAt`, `createdBy`, `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                "		SELECT userId, -7, defaultCustCreditNoteListTabID,  \n" +
                "			fun_DatetimetoUTCDateTime(), createdBy, fun_DatetimetoUTCDateTime(), createdBy, createByRoleId, createByRoleId  \n" +
                "		FROM user_configuration uco  \n" +
                "		WHERE defaultCustCreditNoteListTabID IS NOT NULL  \n" +
                "		AND NOT EXISTS (SELECT 'Y' FROM user_configuration uci WHERE (uci.userId = uco.userId  \n" +
                "					AND uci.configurationID = -7) AND isDeleted = 0)  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "		 INSERT INTO user_configuration (`userId`, `configurationID`, `configurationValue`,  \n" +
                "				`createdAt`, `createdBy`, `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                "		SELECT userId, -8, defaultCustPackingSlipListTabID,  \n" +
                "			fun_DatetimetoUTCDateTime(), createdBy, fun_DatetimetoUTCDateTime(), createdBy, createByRoleId, createByRoleId  \n" +
                "		FROM user_configuration uco  \n" +
                "		WHERE defaultCustPackingSlipListTabID IS NOT NULL  \n" +
                "		AND NOT EXISTS (SELECT 'Y' FROM user_configuration uci WHERE (uci.userId = uco.userId  \n" +
                "					AND uci.configurationID = -8) AND isDeleted = 0)  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "		 INSERT INTO user_configuration (`userId`, `configurationID`, `configurationValue`,  \n" +
                "				`createdAt`, `createdBy`, `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                "		SELECT usr.id, -9, defaultSalesOrderListTabID,  \n" +
                "			fun_DatetimetoUTCDateTime(), emp.createdBy, fun_DatetimetoUTCDateTime(), emp.createdBy, emp.createByRoleId, emp.createByRoleId  \n" +
                "		FROM employees emp  \n" +
                "			JOIN users usr ON emp.id = usr.employeeID AND usr.isDeleted = 0  \n" +
                "		WHERE defaultSalesOrderListTabID IS NOT NULL  \n" +
                "		AND NOT EXISTS (SELECT 'Y' FROM user_configuration uci WHERE (uci.userId = usr.id  \n" +
                "					AND uci.configurationID = -9) AND isDeleted = 0)  \n" +
                "		AND emp.isDeleted = 0 ;  \n" +
                "		 INSERT INTO user_configuration (`userId`, `configurationID`, `configurationValue`,  \n" +
                "				`createdAt`, `createdBy`, `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                "		SELECT usr.id, -10, defaultPurchaseDetailTabID,  \n" +
                "			fun_DatetimetoUTCDateTime(), emp.createdBy, fun_DatetimetoUTCDateTime(), emp.createdBy, emp.createByRoleId, emp.createByRoleId  \n" +
                "		FROM employees emp  \n" +
                "			JOIN users usr ON emp.id = usr.employeeID AND usr.isDeleted = 0  \n" +
                "		WHERE defaultPurchaseDetailTabID IS NOT NULL  \n" +
                "		AND NOT EXISTS (SELECT 'Y' FROM user_configuration uci WHERE (uci.userId = usr.id  \n" +
                "					AND uci.configurationID = -10) AND isDeleted = 0)  \n" +
                "		AND emp.isDeleted = 0 ;  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 18-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5511,'2.00','V1',' Sproc_Uti_InsertUserConfigurationData utility - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5511:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-11-2021 *********************************** */
                "UPDATE user_configuration  \n" +
                "SET configurationID = -1 , configurationValue = uiGridPreference  \n" +
                "WHERE uiGridPreference IS NOT NULL AND configurationValue IS NULL ;  \n" +
                /* **************************** New Script -> 18-11-2021 *********************************** */
                "CALL Sproc_Uti_InsertUserConfigurationData() ;  \n" +
                /* **************************** Add Script Version -> 18-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5512,'2.00','V1',' Update old records of user_configuration with new fields - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5512:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-11-2021 *********************************** */
                "ALTER TABLE user_configuration  \n" +
                "DROP COLUMN uiGridPreference,  \n" +
                "DROP COLUMN defaultCustInvoiceListTabID,  \n" +
                "DROP COLUMN defaultCustCreditNoteListTabID,  \n" +
                "DROP COLUMN defaultCustPackingSlipListTabID,  \n" +
                "DROP COLUMN defaultCustPaymentListTabID,  \n" +
                "DROP COLUMN defaultCustAppliedCMListTabID,  \n" +
                "DROP COLUMN defaultCustAppliedWOFFListTabID,  \n" +
                "DROP COLUMN defaultCustRefundListTabID ;  \n" +
                "  \n" +
                "ALTER TABLE employees  \n" +
                "DROP COLUMN defaultSalesOrderListTabID,  \n" +
                "DROP COLUMN defaultPurchaseDetailTabID ;  \n" +
                /* **************************** Add Script Version -> 18-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5513,'2.00','V1',' drop fields of user_configuration and employees table - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5513:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-11-2021 *********************************** */
                "ALTER TABLE purchase_order_mst  \n" +
                "	ADD COLUMN lockStatus VARCHAR(2) DEFAULT 'NA' COMMENT '(NA- not applicable, RL- ready to lock, LC-locked)',  \n" +
                "	ADD COLUMN lockedAt DATETIME,  \n" +
                "	ADD COLUMN lockedBy VARCHAR(255),  \n" +
                "	ADD COLUMN lockedByRoleId INT(11);  \n" +
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`, `createdBy`)  \n" +
                "	VALUES ('Allow to Lock/Unlock Purchase Order', 1, 0, fun_DatetimetoUTCDateTime(), 1);  \n" +
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`, `createdBy`)  \n" +
                "	VALUES ('Allow to Open Purchase Order Manually', 1, 0, fun_DatetimetoUTCDateTime(), 1);  \n" +
                /* **************************** Add Script Version -> 18-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5514,'2.00','V1',' User Story 37382: Purchase Order Improvement points Oct-2021 - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5514:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderSummaryDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderSummaryDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "	IN ppostatus VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(\"  \n" +
                "    SELECT (CASE WHEN(IFNULL((a.poCompletedLine * 100 / a.totalPOLines), 0)) > 100 THEN 100 ELSE IFNULL(round((a.poCompletedLine * 100 / a.totalPOLines), 2), 0) END) poCompletionPercentage, a.* FROM  \n" +
                "		( SELECT  pom.id,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.poDate,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				pom.termsID,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pom.status,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pom.serialNumber,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.carrierID,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				CASE WHEN pom.shippingInsurance=0 THEN 'No' ELSE 'Yes' END shippingInsuranceName,  \n" +
                "				pom.shippingInsurance,  \n" +
                "				pom.supplierAddress,  \n" +
                "				pom.shippingAddress,  \n" +
                "				pom.intermediateAddress,  \n" +
                "				CASE WHEN pom.isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPO,  \n" +
                "				pom.isBlanketPO,  \n" +
                "				m.mfgcode,  \n" +
                "				pom.poCompleteReason,  \n" +
                "				pom.poCompleteType,  \n" +
                "				pom.cancleReason,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				pom.poWorkingStatus,  \n" +
                "                pom.CancellationConfirmed,  \n" +
                "                CASE WHEN pom.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END CancellationConfirmedStatus,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='C') poCompletedLine,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='P') poPendingLine,  \n" +
                "				case when pom.poWorkingStatus='P' then 'In Progress' when  pom.poWorkingStatus='C' then 'Completed' else 'Canceled' end workingStatusName,  \n" +
                "				IFNULL(vgf.cnt, 0) poDocumentCount,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType!=4 and pod.refPurchaseOrderID=pom.id) totalItems,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType=4 and pod.refPurchaseOrderID=pom.id) totalOtherItems,  \n" +
                "				fun_getFOBById(pom.freeOnBoardId) freeOnBoard,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				(select sum((pod.qty * pod.price)+ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)) from purchase_order_det pod where pod.refPurchaseOrderID=pom.id and pod.isdeleted=0) totalAmount,  \n" +
                "				fun_getUserNameByID(pom.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pom.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pom.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pom.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "	            pom.isdeleted,  \n" +
                "                (SELECT COUNT(1) FROM purchase_order_det pod WHERE pod.isdeleted=0 and pod.refPurchaseOrderID=pom.id) totalPOLines,  \n" +
                "                (select id from packing_slip_material_receive where refPurchaseOrderID=pom.id and isdeleted=false order by receiptDate desc limit 1) packingSlipId,  \n" +
                "                ps.packingSlip,  \n" +
                "                ps.MaterialReceiptNumber,  \n" +
                "                pom.isCustConsigned,  \n" +
                "                CASE WHEN pom.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "                pom.customerID,  \n" +
                "                fun_GetFormattedMfgCode(pm.mfgcode, pm.mfgName, \",vMfgCodeFormat,\") customerName,  \n" +
                "                pom.isNonUMIDStock,  \n" +
                "                CASE WHEN pom.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                pom.lockStatus,  \n" +
                "				(case when pom.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "					when pom.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "					when pom.lockStatus = 'LC' then 'Locked'  \n" +
                "					else null end  \n" +
                "				) lockStatusValue,  \n" +
                "				fun_getUserNameByID(pom.lockedBy) lockByName,  \n" +
                "				fun_getRoleByID(pom.lockedByRoleId) lockedByRoleName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM purchase_order_mst pom JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0  \n" +
                "        LEFT JOIN LATERAL (SELECT id, refPurchaseOrderID FROM packing_slip_material_receive WHERE refPurchaseOrderID=pom.id AND isDeleted=0 LIMIT 1) AS psmr ON psmr.refPurchaseOrderID=pom.id  \n" +
                "		LEFT JOIN vu_genericfilescount vgf ON vgf.entityID = -20 AND vgf.refTransID = pom.id  \n" +
                "        LEFT JOIN mfgcodemst pm ON pm.id=pom.customerID and pm.isdeleted = 0  \n" +
                "         LEFT JOIN (select group_concat(distinct psmr.id, '@@@', psmr.packingSlipNumber order by psmr.packingSlipDate desc separator '\",v_GroupConcatSeparator,\"') as packingSlip,  \n" +
                "						group_concat(distinct psmr.packingSlipNumber order by psmr.packingSlipDate desc separator ', ') MaterialReceiptNumber,  \n" +
                "						psmr.refPurchaseOrderID  \n" +
                "                        from packing_slip_material_receive psmr  \n" +
                "						where psmr.receiptType='P' and psmr.isDeleted=false group by psmr.refPurchaseOrderID  \n" +
                "					) ps on ps.refPurchaseOrderID = pom.id ) a  \n" +
                "		WHERE a.isdeleted=0  \n" +
                "	\");  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and a.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and a.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (a.soNumber  like ''%',psearchposotext,'%'' OR a.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (a.soNumber  =''',psearchposotext,''' OR a.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate>=''',pfromDate,''' and a.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and FIND_IN_SET(a.poWorkingStatus,''', ppostatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' AND exists (select 1 from purchase_order_det pod where pod.refPurchaseOrderID = a.id and pod.isDeleted = 0 and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,')))');  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "    SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_UpdatePoWorkingLineStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_UpdatePoWorkingLineStatus`(  \n" +
                "	IN pPOID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vStatus VARCHAR(50);  \n" +
                "    DECLARE vPOTotalLinesWithOtherPart INT;  \n" +
                "	DECLARE vPOLines INT;  \n" +
                "  \n" +
                "    SELECT count(1) INTO vPOTotalLinesWithOtherPart FROM purchase_order_det WHERE refPurchaseOrderID=pPOID AND isDeleted=0;  \n" +
                "    SELECT count(1) INTO vPOLines FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID;  \n" +
                "  \n" +
                "    SELECT poLineWorkingStatus INTO vStatus FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID AND poLineWorkingStatus='P' LIMIT 1;  \n" +
                "	IF vPOTotalLinesWithOtherPart > 0 THEN -- check po have any lines  \n" +
                "		IF vPOLines IS NULL OR vPOLines=0 THEN  \n" +
                "			SET vStatus='P';  \n" +
                "		ELSE  \n" +
                "			SET vStatus=IFNULL(vStatus,'C');  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET vStatus='P';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vStatus='P') THEN  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=(case when poWorkingStatus='CA' then poWorkingStatus else vStatus end),lockStatus='NA',lockedAt=null,lockedBy=null,lockedByRoleId=null WHERE id=pPOID;  \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=(case when poWorkingStatus='CA' then poWorkingStatus else vStatus end),poCompleteType=IFNULL(poCompleteType,'Auto'),lockStatus='RL' WHERE id=pPOID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_updatePurchaseOrderStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_updatePurchaseOrderStatus`(  \n" +
                "	IN pPOID INT,  \n" +
                "	IN pupdatedBy VARCHAR(100),  \n" +
                "	IN pupdatedRoleID VARCHAR(100),  \n" +
                "	IN pcompleteReason VARCHAR(1000),  \n" +
                "	IN pcompleteType VARCHAR(20),  \n" +
                "	IN pcancellationReason VARCHAR(1000),  \n" +
                "	IN ptype VARCHAR(5),  \n" +
                "	IN pCancellationConfirmed TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	IF pcompleteReason IS NOT NULL THEN  \n" +
                "		IF ptype = 'C' THEN /* for complete po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='C',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,poCompleteReason=pcompleteReason,poCompleteType=pcompleteType,lockStatus='RL',updatedAt=fun_DatetimetoUTCDateTime() WHERE id=pPOID;  \n" +
                "			UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='C',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID,poLineCompleteReason=IFNULL(poLineCompleteReason,pcompleteReason),poLineCompleteType=IFNULL(poLineCompleteType,pcompleteType),updatedAt=fun_DatetimetoUTCDateTime() WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);  \n" +
                "		ELSEIF ptype = 'P' THEN /* for open po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='P',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,poCompleteReason=pcompleteReason,poCompleteType=pcompleteType,lockStatus='NA',updatedAt=fun_DatetimetoUTCDateTime() WHERE id=pPOID;  \n" +
                "			UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='P',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID,poLineCompleteReason=IFNULL(poLineCompleteReason,pcompleteReason),poLineCompleteType=IFNULL(poLineCompleteType,pcompleteType),updatedAt=fun_DatetimetoUTCDateTime() WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);  \n" +
                "		END IF;  \n" +
                "	ELSEIF pcancellationReason IS NOT NULL THEN  \n" +
                "		IF ptype = 'C' THEN /* for cancellation po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='CA',CancellationConfirmed=pCancellationConfirmed,updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,updatedAt=fun_DatetimetoUTCDateTime(),cancleReason=pcancellationReason,poCompleteType=pcompleteType WHERE id=pPOID;  \n" +
                "		ELSEIF ptype = 'R' THEN /* for revoke cancellation po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='P',CancellationConfirmed=0,updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,updatedAt=fun_DatetimetoUTCDateTime(),cancleReason=pcancellationReason,poCompleteType=pcompleteType WHERE id=pPOID;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "    IN ppolinestatus VARCHAR(10),  \n" +
                "	IN ppostatus VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN ponlyOtherPart boolean,  \n" +
                "    IN pwithoutOtherPart boolean,  \n" +
                "    IN pisonlyPendingLines boolean  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"  \n" +
                "		SELECT (CASE WHEN(IFNULL((a.totalReceivedQty * 100 / a.qty), 0)) > 100 THEN 100 ELSE IFNULL(round((a.totalReceivedQty * 100 / a.qty), 2), 0) END) poLineCompletionPercentage, a.* from  \n" +
                "		(SELECT  pod.id,  \n" +
                "				pom.id as refPurchaseOrderID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pod.mfgPartID,  \n" +
                "				pod.packagingID,  \n" +
                "				pod.supplierPartID,  \n" +
                "				pod.partDescription,  \n" +
                "				pod.pcbPerArray,  \n" +
                "				pod.rohsStatusID,  \n" +
                "				pod.internalRef,  \n" +
                "				pod.qty,  \n" +
                "				pod.price,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				(pod.qty * pod.price) extPrice,  \n" +
                "				pod.totalRelease,  \n" +
                "				pod.lineComment,  \n" +
                "				pod.lineID,  \n" +
                "				pod.supplierQuoteNumber,  \n" +
                "				pom.poDate,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				c.mfgPN,  \n" +
                "				c.pidCode,  \n" +
                "				c.unit,  \n" +
                "				c.iscustom,  \n" +
                "				c.partType,  \n" +
                "				rr.name AS rohsName,  \n" +
                "				rr.rohsIcon,  \n" +
                "				cp.name AS packagingName,  \n" +
                "				mc.mfgCode,  \n" +
                "				mc.mfgName,  \n" +
                "				mc.id As mfgcodeID,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.status,  \n" +
                "				pom.carrierID,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'C' else ifnull(vups.poLineWorkingStatus,'P') end poWorkingStatus,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Closed' else ifnull(vups.poLineWorkingDisplayStatus,'Open') end poLineWorkingDisplayStatus,  \n" +
                "                case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatusDisplayStatus,  \n" +
                "				vups.totalReceivedQty,  \n" +
                "				vups.totalPendingQty,  \n" +
                "				vups.poLineCompleteReason,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Auto' else  vups.poLineCompleteType end poCompleteType,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				sc.mfgPN supplierPN,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.termsID,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pod.internalLineComment,  \n" +
                "				m.mfgcode as supplierMfgName,  \n" +
                "				fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,  \n" +
                "				(SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,  \n" +
                "				(ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,  \n" +
                "				fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, \",vMfgCodeFormat,\") mfgcodeName,  \n" +
                "				fun_getUserNameByID(pod.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pod.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pod.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pod.updateByRoleId) updatedbyRole,  \n" +
                "				(select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,  \n" +
                "				(select pold.promisedShipDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) promisedShipDate,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, FALSE) packingSlipDate,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, TRUE) packingSlipId,  \n" +
                "                c.custAssyPN ,  \n" +
                "                ps.packingSlip,  \n" +
                "                pod.isdeleted,  \n" +
                "                vups.poLineWorkingStatus,  \n" +
                "                ps.MaterialReceiptNumber,  \n" +
                "                pod.isLineCustConsigned,  \n" +
                "                CASE WHEN pod.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "                pod.lineCustomerID,  \n" +
                "                fun_GetFormattedMfgCode(pm.mfgCode, pm.mfgName, \",vMfgCodeFormat,\") customerName,  \n" +
                "                m.mfgName as POSupplierName,  \n" +
                "                pod.isNonUMIDStock,  \n" +
                "                CASE WHEN pod.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                pom.lockStatus  \n" +
                "		FROM purchase_order_det pod  \n" +
                "		LEFT JOIN purchase_order_mst pom  ON pom.id=pod.refPurchaseOrderID and  pom.isdeleted=0  \n" +
                "		LEFT JOIN vu_purchaseorder_shipping_release vups on vups.refPurchaseOrderDetID= pod.id  \n" +
                "		LEFT JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN component c ON c.id=pod.mfgPartID  \n" +
                "		LEFT JOIN component sc on sc.id=pod.supplierPartID  \n" +
                "		LEFT JOIN mfgcodemst mc ON mc.id=c.mfgcodeID  \n" +
                "        LEFT JOIN mfgcodemst pm ON pm.id=pod.lineCustomerID  \n" +
                "		LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID  \n" +
                "		LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID  \n" +
                "        LEFT JOIN (select group_concat(distinct psmr.id, '@@@', psmr.packingSlipNumber order by psmr.packingSlipDate desc separator '\",v_GroupConcatSeparator,\"') as packingSlip,  \n" +
                "						group_concat(distinct psmr.packingSlipNumber order by psmr.packingSlipDate desc separator ', ') as MaterialReceiptNumber,  \n" +
                "                        psmr.refPurchaseOrderID, psmrd.refPurchaseOrderDetID  \n" +
                "                        from packing_slip_material_receive psmr  \n" +
                "							join packing_slip_material_receive_det psmrd  \n" +
                "								on psmrd.refPackingSlipMaterialRecID=psmr.id and psmrd.isDeleted=false  \n" +
                "						where psmr.receiptType='P' and psmr.isDeleted=false group by psmrd.refPurchaseOrderDetID  \n" +
                "					) ps on ps.refPurchaseOrderID = pom.id and ps.refPurchaseOrderDetID=pod.id ) a  \n" +
                "		WHERE a.isdeleted=0  \n" +
                "	\");  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  like ''%',psearchposotext,'%'' OR a.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  =''',psearchposotext,''' OR a.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate>=''',pfromDate,''' and a.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "    IF(ppolinestatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when a.partType=4 and a.poWorkingStatus=\"C\" then \"C\" else ifnull(a.poLineWorkingStatus,\"P\") end),''', ppolinestatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and FIND_IN_SET((case when a.poWorkingStatus=\"C\" then \"C\" when a.poWorkingStatus=\"CA\" then \"CA\" else \"P\" end),''', ppostatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.mfgPartID in (',ppartIds,') OR a.supplierPartID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "    IF(pwithoutOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType!=4');  \n" +
                "	END IF;  \n" +
                "    IF(ponlyOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType=4');  \n" +
                "	END IF;  \n" +
                "	IF(pisonlyPendingLines=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.poLineWorkingStatus=\"P\"');  \n" +
                "	END IF;  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5515,'2.00','V1',' User Story 37382: Purchase Order Improvement points Oct-2021 - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5515:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-11-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_mst`;  \n" +
                "CREATE TRIGGER `Trg_AU_purchase_order_mst` AFTER UPDATE ON `purchase_order_mst` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "    DECLARE vOldSupplier VARCHAR(100);  \n" +
                "    DECLARE vNewSupplier VARCHAR(100);  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO#',CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SO#',CAST(OLD.soNumber AS CHAR), CAST(new.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Date',CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SO Date',CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.supplierID,0) != IFNULL(NEW.supplierID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldSupplier FROM mfgcodemst WHERE id=OLD.supplierID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewSupplier FROM mfgcodemst WHERE id=NEW.supplierID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Supplier', CAST(vOldSupplier AS CHAR), CAST(vNewSupplier AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Terms', CAST(fun_getGenericCategoryCodeNameByID(OLD.termsID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.termsID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Revision', CAST(OLD.poRevision AS CHAR), CAST(new.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Internal Notes', CAST(OLD.shippingComment AS CHAR), CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.poComment ,0) != IFNULL(NEW.poComment ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Comment', CAST(OLD.poComment AS CHAR), CAST(new.poComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Status', CAST(CASE WHEN OLD.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), CAST(CASE WHEN NEW.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.carrierID ,0) != IFNULL(NEW.carrierID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber ,0) != IFNULL(NEW.carrierAccountNumber ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'DELETE', CAST(CASE WHEN OLD.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Blanket PO', CAST(CASE WHEN OLD.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Shipping with Insurance', CAST(CASE WHEN OLD.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.supplierAddress ,0) != IFNULL(NEW.supplierAddress ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Supplier Address', CAST(OLD.supplierAddress AS CHAR), CAST(NEW.supplierAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingAddress ,0) != IFNULL(NEW.shippingAddress ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Bill To / Ship To', CAST(OLD.shippingAddress AS CHAR), CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.intermediateAddress ,0) != IFNULL(NEW.intermediateAddress ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Mark For', CAST(OLD.intermediateAddress AS CHAR), CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.freeOnBoardID ,0) != IFNULL(NEW.freeOnBoardID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'FOB', CAST(fun_getFOBById(OLD.freeOnBoardID) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poWorkingStatus ,0) != IFNULL(NEW.poWorkingStatus ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Working Status', CAST(CASE WHEN IFNULL(OLD.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN OLD.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END  AS CHAR), CAST(CASE WHEN IFNULL(NEW.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN NEW.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.cancleReason ,0) != IFNULL(NEW.cancleReason ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Cancellation / Undo Reason', CAST(OLD.cancleReason AS CHAR), CAST(NEW.cancleReason AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CancellationConfirmed ,0) != IFNULL(NEW.CancellationConfirmed ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Cancellation Confirmed by Supplier',  CAST(CASE WHEN OLD.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.customerID, 0) != IFNULL(NEW.customerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.customerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.customerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lockStatus, 0) != IFNULL(NEW.lockStatus,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Lock Status',  CAST(CASE WHEN OLD.lockStatus='RL' THEN 'Ready To Lock' WHEN OLD.lockStatus='LC' THEN 'Locked' ELSE 'Not Applicable' END AS CHAR), CAST(CASE WHEN NEW.lockStatus='RL' THEN 'Ready To Lock' WHEN NEW.lockStatus='LC' THEN 'Locked' ELSE 'Not Applicable' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lockedBy, 0) != IFNULL(NEW.lockedBy,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Locked By',  CAST(fun_getUserNameByID(OLD.lockedBy) AS CHAR), CAST(fun_getUserNameByID(NEW.lockedBy) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.lockedAt, 0) != IFNULL(NEW.lockedAt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Locked Date',  CAST(fun_ApplyCommonDateTimeFormatByParaValue(OLD.lockedAt,vTimeZone,vDateTimeDisplayFormat) AS CHAR), CAST(fun_ApplyCommonDateTimeFormatByParaValue(NEW.lockedAt,vTimeZone,vDateTimeDisplayFormat) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.lockedByRoleId, 0) != IFNULL(NEW.lockedByRoleId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Locked By Role',  CAST(fun_getRoleByID(OLD.lockedByRoleId) AS CHAR), CAST(fun_getRoleByID(NEW.lockedByRoleId) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poCompleteReason, 0) != IFNULL(NEW.poCompleteReason, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Complete Reason', CAST(OLD.poCompleteReason AS CHAR), CAST(NEW.poCompleteReason AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5516,'2.00','V1',' User Story 37382: Purchase Order Improvement points Oct-2021 - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5516:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-11-2021 *********************************** */
                "ALTER TABLE `mfgcodealias` ADD COLUMN `mfgType` VARCHAR(5) NULL;  \n" +
                /* **************************** Add Script Version -> 19-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5517,'2.00','V1','User Story 38714: Add mfgType Column in mfgcodealias table and manage while inserting the record and create a unique constraint'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5517:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-11-2021 *********************************** */
                "ALTER TABLE `mfgcodealias` CHANGE COLUMN `mfgType` `mfgType` VARCHAR(5) NOT NULL;  \n" +
                /* **************************** Add Script Version -> 19-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5518,'2.00','V1','User Story 38714: Add mfgType Column in mfgcodealias table and manage while inserting the record and create a unique constraint'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5518:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-11-2021 *********************************** */
                "ALTER TABLE `mfgcodealias`  \n" +
                "DROP INDEX `unq_mfgcodealias`,  \n" +
                "ADD UNIQUE INDEX `unq_mfgcodealias` (`mfgType` ASC, `alias` ASC, `unqDate` ASC) VISIBLE;  \n" +
                /* **************************** Add Script Version -> 19-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5519,'2.00','V1','User Story 38714: Add mfgType Column in mfgcodealias table and manage while inserting the record and create a unique constraint'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5519:
            allDbChangesArray.push(
                /* **************************** New Script -> 19-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitReleasePlanDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleasePlanDetail`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pSubAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vSubAssyQPA DECIMAL(18,8);  \n" +
                "	DECLARE vMismatchItem DECIMAL(18,8);  \n" +
                "	DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);  \n" +
                "	DECLARE vCurrentDateTime DATETIME;  \n" +
                "    DECLARE vKitQty DECIMAL(18,8);  \n" +
                "	DECLARE vCustomerId INT;  \n" +
                "  \n" +
                "	SET vCurrentDateTime =  STR_TO_DATE(fun_ConvertUTCDateToDataKeyTimeZone(fun_DatetimetoUTCDateTime()),'%m/%d/%Y');  \n" +
                "  \n" +
                "    SELECT 		customerID  ,kitQty  \n" +
                "	INTO		vCustomerId ,vKitQty  \n" +
                "	FROM 		salesorderdet sd  \n" +
                "	INNER JOIN 	salesordermst s ON s.id = sd.refSalesOrderID  \n" +
                "	WHERE 		sd.id = pRefSalesOrderDetID;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempMountingTypeWiseKitDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempMountingTypeWiseKitDet  \n" +
                "	(  \n" +
                "		mountingTypeID INT(11),  \n" +
                "		mountingType VARCHAR(50),  \n" +
                "		connecterTypeID INT(11),  \n" +
                "		connecterType VARCHAR(50),  \n" +
                "		feasibilityWithAllocation DECIMAL(18,8),  \n" +
                "		shortageLine DECIMAL(18,8),  \n" +
                "		feasibilityWithAvailableAndAllocatedStock DECIMAL(18,8),  \n" +
                "		shortageWithAvailableQty DECIMAL(18,8),  \n" +
                "		shortageForInputQty DECIMAL(18,8),  \n" +
                "		releasedQty DECIMAL(18,8),  \n" +
                "		pendingQty DECIMAL(18,8),  \n" +
                "		releasePercentage DECIMAL(18,8),  \n" +
                "		totalLine INT  \n" +
                "	);  \n" +
                "  \n" +
                "	/* Get assembly parts detail from kit_allocation_lineitems and kit_allocation_lineitems_alternatepart table */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
                "	SELECT 	k.id,					kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
                "		kl.mountingTypeID, 			kl.connecterTypeID, 		kl.consolidatedMfgPNIDs, 		k.numOfPosition,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
                "					(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "				ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "			END  \n" +
                "		) AS kitQPAWithDNP,  \n" +
                "		kl.uomMismatchedStep,  \n" +
                "		k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
                "	FROM 	(  \n" +
                "			SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
                "					(  \n" +
                "						CASE 	WHEN MIN(c.mountingTypeID) = MAX(c.mountingTypeID) # Matched Mounting Type  \n" +
                "								THEN  MIN(c.mountingTypeID)  \n" +
                "							WHEN MIN(c.mountingTypeID) !=  MAX(c.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 # Mismatched with Approval Mounting Type  \n" +
                "								THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE NULL END))  \n" +
                "							ELSE  -1  \n" +
                "						END  \n" +
                "					) mountingTypeID,  \n" +
                "					IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,  \n" +
                "					GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,  \n" +
                "					MIN(kal.uomMismatchedStep) uomMismatchedStep    # Zero indicate to part value does not match with BOM UOM  \n" +
                "			FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
                "			JOIN 		component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "			LEFT JOIN 	component cp ON c.packaginggroupID = cp.packaginggroupID  AND cp.isDeleted = 0  \n" +
                "			WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
                "			AND 		kal.partID = IFNULL(pSubAssyID, pAssyID)  \n" +
                "			AND 		kal.isDeleted = 0  \n" +
                "			AND			c.isDeleted = 0  \n" +
                "			GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "	) AS kl  \n" +
                "	INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0;  \n" +
                "	/* Get available and allocated stock for selected assembly*/  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Stock_Det;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Stock_Det AS  \n" +
                "	SELECT  	r.consolidatedMfgPNIDs, 	r.id,  \n" +
                "			IFNULL(ks.allocatedUnit, 0) allocatedunit,  \n" +
                "			IFNULL(ks.allocatedPins,0) allocatedPin,  \n" +
                "			SUM(IFNULL(fun_convertUOM(v.uom, IFNULL(ks.allocatedUOM, r.uomID), IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)),0)) availableStock,  \n" +
                "			SUM((FLOOR(IFNULL(v.noOfPosition, 0)/IFNULL(r.numOfPosition, 0)) * IFNULL(r.numOfPosition, 0)) * IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)) availableStockInPin  \n" +
                "	FROM 		temp_Kit_Consolidate_Detail r  \n" +
                "	LEFT JOIN 	vu_kit_allocation_summary ks ON r.refsalesORderDetid = ks.refsalesOrderDetId  \n" +
                "                    AND ks.assyID =  pAssyID  \n" +
                "					AND FIND_IN_SET(ks.refBOMLineID, r.consolidatedLineItemIDs)  \n" +
                "	LEFT JOIN 	vu_deducted_allocation_available_Stock v ON FIND_IN_SET(v.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",consolidatedMfgPNIDs) ELSE consolidatedMfgPNIDs END))  \n" +
                "	WHERE 		r.isNotRequiredKitAllocation != 1  \n" +
                "	GROUP BY 	r.consolidatedMfgPNIDs, r.id;  \n" +
                "  \n" +
                "    /* Calculate kit line total & shortage & feasibility with allocation */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_calculateshortageLinperPlan;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_calculateshortageLinperPlan AS  \n" +
                "	SELECT 	a.salesorderPlanId,		a.salesOrderdetid,		a.kitreleaseQty,	a.refAssyId,	a.calculatedKitQty,  \n" +
                "			count(1) TotalLine ,  \n" +
                "			concat(FLOOR(sum(CASE WHEN (feasibilityWithAllocation - calculatedKitQty) >= 0 then 0 else 1 end) ), '/',   count(1)) shortageLines,  \n" +
                "			min(feasibilityWithAllocation) feasibilityWithAllocation  \n" +
                "	FROM  \n" +
                "	(  \n" +
                "			SELECT 	b.id salesorderPlanId,	r.id kitallocationlineitemid,	t.id,b.salesOrderdetid,  \n" +
                "					b.refAssyID,			b.SubAssyId,b.kitReleaseQty,	r.kitQPAWithDNP qpa,  \n" +
                "                    t.allocatedUnit,  		b.calculatedKitQty,				t.allocatedPin,  \n" +
                "                    t.availableStock,		t.availableStockInPin,          r.mountingTypeID,  \n" +
                "                    (CASE WHEN r.connecterTypeID = -2 THEN r.connecterTypeID ELSE NULL END) connecterTypeID,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
                "								(t.allocatedUnit/r.kitQPAWithDNP)  \n" +
                "							ELSE (IFNULL(t.allocatedPin, 0) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
                "						END  \n" +
                "					) feasibilityWithAllocation,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
                "								((t.availableStock + t.allocatedUnit)/r.kitQPAWithDNP)  \n" +
                "							ELSE ((IFNULL(t.allocatedPin, 0) + IFNULL(t.availableStockInPin, 0)) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
                "						END  \n" +
                "					) feasibilityWithAvailableAndAllocatedStock,  \n" +
                "					(CASE  \n" +
                "						WHEN r.uomMismatchedStep = 0 THEN 0  \n" +
                "						ELSE  \n" +
                "							CASE  \n" +
                "								WHEN r.connecterTypeID = -2 THEN  \n" +
                "									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty* IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0)) < 0)  \n" +
                "											THEN 0  \n" +
                "											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0))  \n" +
                "									END)  \n" +
                "								ELSE  \n" +
                "									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0)) < 0)  \n" +
                "											THEN 0  \n" +
                "											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0))  \n" +
                "									END)  \n" +
                "							END  \n" +
                "					END) shortagePerBuild  \n" +
                "			FROM  \n" +
                "				(  \n" +
                "					SELECT 	k.id,		kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
                "							kl.mountingTypeID, 						kl.connecterTypeID,  \n" +
                "                            kl.consolidatedMfgPNIDs, 				k.numOfPosition,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
                "										(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "									ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "								END  \n" +
                "							) AS kitQPAWithDNP,  \n" +
                "							kl.uomMismatchedStep,          k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
                "					FROM 	(  \n" +
                "								SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
                "											(  \n" +
                "												CASE 	WHEN MIN(c.mountingTypeID) = MAX(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "														THEN  MIN(c.mountingTypeID)  \n" +
                "													WHEN MIN(c.mountingTypeID) !=  MAX(c.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "														THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE NULL END))  \n" +
                "													ELSE  -1  \n" +
                "												END  \n" +
                "											) mountingTypeID,  \n" +
                "											IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,  \n" +
                "											GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,  \n" +
                "											MIN(kal.uomMismatchedStep) uomMismatchedStep    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "									FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
                "									JOIN 		component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "									LEFT JOIN 	component cp ON c.packaginggroupID = cp.packaginggroupID  AND cp.isDeleted = 0  \n" +
                "									WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
                "									AND 		kal.partID = IFNULL(pSubAssyID, pAssyID)  \n" +
                "									AND 		kal.isDeleted = 0  \n" +
                "									AND			c.isDeleted = 0  \n" +
                "									GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "							) AS kl  \n" +
                "							INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0  \n" +
                "				) r  \n" +
                "				INNER JOIN (  \n" +
                "							SELECT 	id,		salesOrderdetid,	refAssyID,	SubAssyId,	kitReleaseQty,  \n" +
                "									SUM(kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
                "							FROM salesorder_plan_detailsmst where salesorderdetid= pRefSalesOrderDetID  AND isDeleted = 0  \n" +
                "                            ) b  \n" +
                "				INNER JOIN 	temp_Kit_Stock_Det t ON r.id = t.id  \n" +
                "		) a  \n" +
                "		GROUP BY  salesorderPlanId,salesOrderdetid,kitreleaseQty,refAssyId,calculatedKitQty;  \n" +
                "  \n" +
                "	SELECT 	id,  \n" +
                "			plannKitNumber,  \n" +
                "			poQty,  \n" +
                "			poDueDate,  \n" +
                "			materialDockDate,  \n" +
                "			b.kitReleaseQty,  \n" +
                "			kitReleaseDate,  \n" +
                "			feasibilityWithAllocatedQty AS currentBuildFeasibility,  \n" +
                "			(CASE WHEN buildFeasibility > 0 THEN buildFeasibility ELSE 0 END) AS buildFeasibility,  \n" +
                "			(CASE WHEN (buildFeasibility > 0 AND buildFeasibility > b.kitReleaseQty) THEN 0 WHEN (buildFeasibility > 0) THEN (b.kitReleaseQty - buildFeasibility) ELSE b.kitReleaseQty END) AS Shortage,  \n" +
                "            c.shortageLines,  \n" +
                "			b.calculatedKitQty,  \n" +
                "			actualKitReleaseDate,  \n" +
                "			releaseTimeFeasibility,  \n" +
                "			releasedByName,  \n" +
                "			mfrLeadTime,  \n" +
                "			kitStatus,  \n" +
                "			RushJob,  \n" +
                "			FUNC_MISMATCHITEMFORKIT(b.salesOrderDetID, IFNULL(b.subAssyID,b.refAssyId), 'M', NULL, NULL) mismatchItem,  \n" +
                "			fun_getWorkorderNumberByID(woID) workorderNumber,  \n" +
                "			releasedNote,  \n" +
                "			releaseKitNumber,  \n" +
                "			subAssyReleaseCount,  \n" +
                "			subAssyReleasedCount,  \n" +
                "			woID,  \n" +
                "			kitReturnDate,  \n" +
                "			kitReturnStatus,  \n" +
                "			woStatusID,  \n" +
                "            woSubStatusID  \n" +
                "	FROM  \n" +
                "			(  \n" +
                "				SELECT *,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (calculatedKitQty >  feasibilityWithAllocatedQty) THEN  (kitReleaseQty - (calculatedKitQty - feasibilityWithAllocatedQty))  \n" +
                "							ELSE kitReleaseQty  \n" +
                "						END  \n" +
                "					) buildFeasibility  \n" +
                "				FROM	(  \n" +
                "						SELECT 	r.*,  \n" +
                "							SUM(r.kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
                "						FROM 	vu_release_plan_detail r  \n" +
                "						WHERE 	r.salesOrderDetID = pRefSalesOrderDetID  \n" +
                "								AND r.refAssyId = pAssyID  \n" +
                "								AND (  \n" +
                "				 					CASE  \n" +
                "										WHEN pSubAssyID IS NOT NULL THEN r.subAssyID = pSubAssyID  \n" +
                "										ELSE r.subAssyID IS NULL  \n" +
                "									END  \n" +
                "								)  \n" +
                "						ORDER BY r.salesOrderDetID, r.refAssyId, r.subAssyID, r.refPlanId DESC, r.id  \n" +
                "					)  \n" +
                "				AS a  \n" +
                "	 		)  \n" +
                "	AS b   inner join     temp_Kit_calculateshortageLinperPlan c on  b.id =  c.salesorderplanid  \n" +
                "	ORDER BY poDueDate, plannKitNumber ASC;  \n" +
                "  \n" +
                "	SELECT MIN(promisedShipDate) promisedShipDate FROM salesshippingmst WHERE  sDetID = pRefSalesOrderDetID and isdeleted = 0 ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 19-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5520,'2.00','V1','Bug 38869: Showing inconsecutively Kit Plan# on Release/Return pop-up - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5520:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetUserPageFeaturesDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUserPageFeaturesDetails`(  \n" +
                "	IN puserID INT(11),  \n" +
                "	IN proleID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "SET @SQL = CONCAT('select featureName from feature_mst  a  \n" +
                "where exists  \n" +
                "	(SELECT 1  \n" +
                "		FROM feature_user_mapping     b  \n" +
                "		WHERE b.featureid = a.featureid and  \n" +
                "			  b.userid=',puserID,'  AND  \n" +
                "              b.roleid=',proleID,'  AND  \n" +
                "              b.isdeleted=0 AND b.isActive=1 )  \n" +
                "		AND a.isdeleted =0 AND a.isActive=1');  \n" +
                "/*	SET @SQL = CONCAT('select featureName from feature_mst where featureID in  \n" +
                "	(SELECT featureID  \n" +
                "		FROM feature_user_mapping  \n" +
                "	WHERE userid=',puserID,' AND roleid=',proleID,' AND deletedAt IS NULL AND isActive=1 )  \n" +
                "	AND deletedAt IS NULL AND isActive=1');  \n" +
                "    */  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5521,'2.00','V1',' Tune SP Sproc_GetUserPageFeaturesDetails  - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5521:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-11-2021 *********************************** */
                "ALTER TABLE salesordermst ADD COLUMN blanketPOOption INT COMMENT '1-Use BPO# for all releases,2-Link BPO to Future PO(s),3-Use BPO# and Release#';  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "ALTER TABLE salesshippingmst ADD COLUMN refShippingLineID INT;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "ALTER TABLE salesshippingmst ADD poReleaseNumber VARCHAR(105);  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "ALTER TABLE customer_packingslip_det ADD COLUMN poReleaseNumber VARCHAR(105),ADD COLUMN refBlanketPONumber VARCHAR(100);  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5522,'2.00','V1',' Sales Order Maser table altered - CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5522:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesorderDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesorderDetails`(  \n" +
                "	IN psoposearch LONGTEXT,  \n" +
                "	IN salesorderID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "-- Blanket Po option blanketPOOption 2 for Link BPO to Future PO(s)  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "CREATE TEMPORARY TABLE IF NOT EXISTS   tempsalesorder AS  \n" +
                "       SELECT som.id FROM salesordermst som  \n" +
                "     WHERE som.id IN  \n" +
                "          (SELECT sd.refSalesOrderID FROM salesorderdet sd JOIN COMPONENT c ON c.id=sd.partID AND c.isdeleted=0 WHERE  \n" +
                "	       EXISTS (SELECT 1 FROM salesordermst sm WHERE  sm.id=sd.refSalesOrderID AND (sm.isBlanketPO=0 OR (sm.isBlanketPO=1 AND sm.blanketPOOption!=2)) AND sm.isdeleted=0 ) AND sd.isdeleted=0  \n" +
                "	       AND NOT EXISTS (SELECT 1 FROM customer_packingslip_det cpd  \n" +
                "							JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType='P'  \n" +
                "							WHERE cpd.refsalesorderDetid=sd.id AND cpd.remainingQty=0 AND cpd.isdeleted=0  \n" +
                "                       )) OR som.id=salesorderID;  \n" +
                "  \n" +
                " SET @pWhereClause=\"1=1\";  \n" +
                "  \n" +
                " SET @temp_Sproc_GetPendingSOPO=CONCAT(\"  \n" +
                "	select so.ID,CONCAT('(',m.mfgcode,')',' ',m.mfgName) customerName,  \n" +
                "		so.salesOrderNumber as `SO#`,so.poNumber as `PO#` , so.poRevision, so.customerID,so.billingAddressID,  \n" +
                "		so.termsID , so.shippingAddressID,  \n" +
                "		so.shippingMethodID,so.revision,so.shippingcomment,so.soDate, so.internalComment,  \n" +
                "		so.poDate,  \n" +
                "		(CASE WHEN so.freeOnBoardId IS NULL THEN m.freeOnBoardId ELSE so.freeOnBoardId END) freeOnBoardId ,  \n" +
                "		so.intermediateShipmentId,m.mfgcode,so.contactPersonID,  \n" +
                "		(CASE WHEN so.salesCommissionTo IS NULL THEN m.salesCommissionTo ELSE so.salesCommissionTo END) salesCommissionTo ,  \n" +
                "		concat('(',m.mfgcode,') ',m.mfgName, ' | ',so.salesOrderNumber,' | ',so.poNumber) pendingSOPO,  \n" +
                "		m.mfgName,  \n" +
                "		so.status,so.isLegacyPO,so.isRmaPO,so.isBlanketPO,so.blanketPOOption  \n" +
                "	from salesordermst so  \n" +
                "		join mfgcodemst m on m.id=so.customerID  \n" +
                "	where so.id in (select id from tempsalesorder) and so.isDeleted=0\");  \n" +
                "  \n" +
                "  IF(salesorderID IS NOT NULL)THEN  \n" +
                "  SET @temp_Sproc_GetPendingSOPO=CONCAT(@temp_Sproc_GetPendingSOPO,' and so.id=',salesorderID);  \n" +
                "  END IF;  \n" +
                "	IF(psoposearch IS NOT NULL)THEN  \n" +
                "	SET @pWhereClause=CONCAT(\"pendingSOPO like '%\",psoposearch,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"select * from ( \", @temp_Sproc_GetPendingSOPO,\" ) c  where \", @pWhereClause);  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getBlanketPOAssyList` ;  \n" +
                "CREATE PROCEDURE `Sproc_getBlanketPOAssyList`(  \n" +
                "pCustomerID INT,  \n" +
                "pPartID INT,  \n" +
                "pblanketPOID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	         SELECT  \n" +
                "	          c.mfgPN,  \n" +
                "		  c.PIDCode,  \n" +
                "		  c.id partID,  \n" +
                "		  sd.qty,  \n" +
                "		  IFNULL(bp.assignPOQty,0) assignPOQty,  \n" +
                "		  (sd.qty - IFNULL(bp. assignPOQty,0))AS pendingToAssign,  \n" +
                "		  sm.salesOrderNumber,  \n" +
                "		  sm.poNumber,  \n" +
                "		  sm.id AS soID,  \n" +
                "		  sm.poDate,  \n" +
                "		  sm.poRevision,  \n" +
                "		  sd.price,  \n" +
                "		  sm.poRevisionDate,  \n" +
                "		  sd. quotefrom,  \n" +
                "		  sd.refRFQQtyTurnTimeID,  \n" +
                "		  sd.refAssyQtyTurnTimeID,  \n" +
                "		  sd.refRFQGroupID,  \n" +
                "		   sd.id,  \n" +
                "		   sd.quoteNumber,  \n" +
                "		   sd.assyQtyTurnTimeText,  \n" +
                "		 CONCAT('(',mg.mfgcode,') ',c.mfgPN,' | ',sm.salesOrderNumber,' | ',sm.poNumber) blanketAssy  \n" +
                "	         FROM salesorderdet sd  \n" +
                "	         JOIN component c ON c.id=sd.partID AND c.isdeleted=0  \n" +
                "	         JOIN mfgcodemst mg ON mg.id=c.mfgcodeid AND mg.isdeleted=0  \n" +
                "	         JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isdeleted=0  \n" +
                "	         LEFT JOIN (  \n" +
                "	         SELECT  \n" +
                "			SUM(qty) AS assignPOQty,  \n" +
                "			sd.partID compID,sd.refBlanketPOID FROM salesorderdet sd JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isdeleted=0  \n" +
                "			WHERE sm.isBlanketPO=0 AND sd.refBlanketPOID IS NOT NULL AND sm.customerID=pCustomerID AND sd.partID=pPartID AND sd.isdeleted=0 GROUP BY sd.partID,sd.refBlanketPOID  \n" +
                "	         ) bp ON bp.refBlanketPOID=sd.id  \n" +
                "	         WHERE sm.customerID=pCustomerID AND sm.status=1 AND sd.partID=pPartID AND sm.blanketPOOption=2 AND sm.isBlanketPO=1 AND refSODetID IS NULL  \n" +
                "	                AND sd.isdeleted=0 AND (sd.id=IFNULL(pblanketPOID,0) OR (sd.qty - IFNULL(bp. assignPOQty,0))>0);  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveBlanketPOLinkFuturePOOption` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveBlanketPOLinkFuturePOOption`(  \n" +
                "		IN pSoDetID INT,  \n" +
                "		IN pBlanketPOID INT,  \n" +
                "		IN pUserID VARCHAR(10),  \n" +
                "		IN pUserRoleID VARCHAR(10)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "         CREATE TEMPORARY TABLE IF NOT EXISTS tempBlanketPOTbl AS  \n" +
                "         SELECT shippingID,sDetID,qty,unitMeaser,shippingDate,shippingMethodID,shippingAddressID,description,packingSlipNo,invoiceNo,releaseNotes,  \n" +
                "                 promisedShipDate,releaseNumber,requestedDockDate,carrierID,carrierAccountNumber,customerReleaseLine,revisedRequestedDockDate,  \n" +
                "                 revisedRequestedShipDate,revisedRequestedPromisedDate,isAgreeToShip,isdeleted  FROM salesshippingmst WHERE  sDetID=pSoDetID ;  \n" +
                "  \n" +
                "          CREATE TEMPORARY TABLE IF NOT EXISTS tempSalesShippingMst AS  \n" +
                "           SELECT ss.refShippingLineID FROM  salesshippingmst ss WHERE ss.sDetID=pBlanketPOID AND ss.isdeleted=0;  \n" +
                "  \n" +
                "         UPDATE salesshippingmst SET isdeleted=1,deletedAt=CURRENT_TIMESTAMP,deletedBy=pUserID,deleteByRoleId=pUserRoleID  \n" +
                "         WHERE refShippingLineID IN (SELECT shippingID FROM tempBlanketPOTbl WHERE isdeleted=1);  \n" +
                "  \n" +
                "         -- update blanket po sales order detail  \n" +
                "         UPDATE salesshippingmst  ss  \n" +
                "         JOIN tempBlanketPOTbl tp ON tp.shippingID=ss.refShippingLineID  \n" +
                "         SET  \n" +
                "           ss.qty=tp.qty,  \n" +
                "           ss.unitMeaser=tp.unitMeaser,  \n" +
                "           ss.shippingDate=tp.shippingDate,  \n" +
                "           ss.shippingMethodID=tp.shippingMethodID,  \n" +
                "           ss.shippingAddressID=tp.shippingAddressID,  \n" +
                "           ss.description=tp.description,  \n" +
                "           ss.packingSlipNo=tp.packingSlipNo,  \n" +
                "           ss.invoiceNo=tp.invoiceNo,  \n" +
                "           ss.releaseNotes=tp.releaseNotes,  \n" +
                "           ss.promisedShipDate=tp.promisedShipDate,  \n" +
                "           ss.releaseNumber=tp.releaseNumber,  \n" +
                "           ss.requestedDockDate=tp.requestedDockDate,  \n" +
                "           ss.carrierID=tp.carrierID,  \n" +
                "           ss.carrierAccountNumber=tp.carrierAccountNumber,  \n" +
                "           ss.customerReleaseLine=tp.customerReleaseLine,  \n" +
                "           ss.revisedRequestedDockDate=tp.revisedRequestedDockDate,  \n" +
                "           ss.revisedRequestedShipDate=tp.revisedRequestedShipDate,  \n" +
                "           ss.revisedRequestedPromisedDate=tp.revisedRequestedPromisedDate,  \n" +
                "           ss.isAgreeToShip=tp.isAgreeToShip,  \n" +
                "           ss.updatedBy=pUserID,  \n" +
                "           ss.updateByRoleId=pUserRoleID  \n" +
                "           WHERE ss.sDetID=pBlanketPOID;  \n" +
                "  \n" +
                "          -- insert into blanket po detail  \n" +
                "		  INSERT INTO salesshippingmst(sDetID,qty,unitMeaser,shippingDate,shippingMethodID,shippingAddressID,description,packingSlipNo,invoiceNo,releaseNotes,  \n" +
                "		  promisedShipDate,releaseNumber,requestedDockDate,carrierID,carrierAccountNumber,customerReleaseLine,revisedRequestedDockDate,  \n" +
                "		  revisedRequestedShipDate,revisedRequestedPromisedDate,isAgreeToShip,createdBy,createByRoleId,refShippingLineID)  \n" +
                "  \n" +
                "		  SELECT pBlanketPOID,qty,unitMeaser,shippingDate,shippingMethodID,shippingAddressID,description,packingSlipNo,invoiceNo,releaseNotes,  \n" +
                "		  promisedShipDate,releaseNumber,requestedDockDate,carrierID,carrierAccountNumber,customerReleaseLine,revisedRequestedDockDate,  \n" +
                "		  revisedRequestedShipDate,revisedRequestedPromisedDate,isAgreeToShip,pUserID,pUserRoleID,shippingID FROM tempBlanketPOTbl  \n" +
                "		  WHERE isdeleted=0 AND shippingID NOT IN (SELECT ss.refShippingLineID FROM  tempSalesShippingMst ss);  \n" +
                "  \n" +
                "		  DROP TEMPORARY TABLE IF EXISTS tempBlanketPOTbl;  \n" +
                "		  DROP TEMPORARY TABLE IF EXISTS tempSalesShippingMst;  \n" +
                "  \n" +
                "         -- insert sales order other expense for blanket PO  \n" +
                "         IF((SELECT COUNT(1) FROM salesorder_otherexpense_details WHERE refSalesOrderDetID=pSoDetID)=0) THEN  \n" +
                "		        INSERT INTO salesorder_otherexpense_details(refSalesOrderDetID,partID,qty,price,frequency,lineComment,lineInternalComment,createdBy,updatedBy,createByRoleId,updateByRoleId,frequencyType)  \n" +
                "			 SELECT  pSoDetID,partID,qty,price,frequency,lineComment,lineInternalComment,pUserID,pUserID,pUserRoleID,pUserRoleID,frequencyType FROM salesorder_otherexpense_details  \n" +
                "			 WHERE refSalesOrderDetID=pBlanketPOID AND isdeleted=0;  \n" +
                "  \n" +
                "			 -- update sales order release line  \n" +
                "				UPDATE salesorder_otherexpense_details sd SET sd.refReleaseLineID=(SELECT ss.shippingID FROM salesshippingmst ss WHERE ss.sDetID=sd.refSalesOrderDetID LIMIT 1)  \n" +
                "				WHERE sd.frequency=2 AND sd.refSalesOrderDetID IN (SELECT sdt.id FROM salesorderdet sdt WHERE sdt.refSalesOrderID=pSoDetID);  \n" +
                "  \n" +
                "         END IF;  \n" +
                "  \n" +
                "         SELECT refSalesOrderID INTO @refSalesOrderID FROM salesorderdet WHERE id=pSoDetID;  \n" +
                "         -- save mapping other charges data for same line  \n" +
                "         IF((SELECT COUNT(1) FROM salesorderdet WHERE refSODetID=pSoDetID)=0) THEN  \n" +
                "                              INSERT INTO salesorderdet(refSalesOrderID,qty,price,shippingQty,remark,createdBy,updatedBy,materialTentitiveDocDate,prcNumberofWeek,isHotJob,materialDueDate,  \n" +
                "				partID,isCancle,tentativeBuild,uom,lineID,createByRoleId,updateByRoleId,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,custPOLineNumber,partCategory,salesOrderDetStatus,  \n" +
                "				 isSkipKitCreation,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType,refSODetID)  \n" +
                "  \n" +
                "			 SELECT @refSalesOrderID,qty,price,shippingQty,remark,pUserID,pUserID,materialTentitiveDocDate,prcNumberofWeek,isHotJob,materialDueDate,  \n" +
                "			  partID,0,tentativeBuild,uom,lineID,pUserRoleID,pUserRoleID,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,custPOLineNumber,partCategory,1,  \n" +
                "			  isSkipKitCreation,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType,pSoDetID  \n" +
                "			  FROM salesorderdet WHERE refSODetID=pBlanketPOID AND isdeleted=0;  \n" +
                "  \n" +
                "			  -- update sales order release line  \n" +
                "				UPDATE salesorderdet sd SET sd.refSOReleaseLineID=(SELECT ss.shippingID FROM salesshippingmst ss WHERE ss.sDetID=sd.id LIMIT 1)  \n" +
                "				WHERE sd.frequency=2 AND sd.refSODetID=pSoDetID;  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesorderdet` ;  \n" +
                "CREATE TRIGGER `Trg_AU_salesorderdet` AFTER UPDATE ON `salesorderdet`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "    IF IFNULL(OLD.refSalesOrderID,0) != IFNULL(NEW.refSalesOrderID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'REFSALESORDERID',CAST(OLD.refSalesOrderID AS CHAR),  \n" +
                "       CAST(new.refSalesOrderID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QTY',CAST(OLD.qty AS CHAR),  \n" +
                "       CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "        IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PRICE',CAST(CAST(OLD.price AS DECIMAL(15,5)) AS CHAR),  \n" +
                "      CAST(CAST(new.price AS DECIMAL(15,5)) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mrpQty,0) != IFNULL(NEW.mrpQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MRPQTY',CAST(OLD.mrpQty AS CHAR),  \n" +
                "       CAST(new.mrpQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingQty,0) != IFNULL(NEW.shippingQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'SHIPPINGQTY',CAST(OLD.shippingQty AS CHAR),  \n" +
                "       CAST(new.shippingQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'REMARK',CAST(OLD.remark AS CHAR),  \n" +
                "       CAST(new.remark AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.internalComment,0) != IFNULL(NEW.internalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'LINECOMMENT',CAST(OLD.internalComment AS CHAR),  \n" +
                "       CAST(new.internalComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.materialTentitiveDocDate,0) != IFNULL(NEW.materialTentitiveDocDate,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MATERIALTENTITVEDOCDATE',CAST(OLD.materialTentitiveDocDate AS CHAR),  \n" +
                "       CAST(new.materialTentitiveDocDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.prcNumberofWeek,0) != IFNULL(NEW.prcNumberofWeek,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'prcNUMBEROFWEEK',CAST(OLD.prcNumberofWeek AS CHAR),  \n" +
                "       CAST(new.prcNumberofWeek AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isHotJob,0) != IFNULL(NEW.isHotJob,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISHOTJOB',CAST(OLD.isHotJob AS CHAR),  \n" +
                "       CAST(new.isHotJob AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.materialDueDate,0) != IFNULL(NEW.materialDueDate,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MATERIALDUEDATE',CAST(OLD.materialDueDate AS CHAR),  \n" +
                "       CAST(new.materialDueDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PARTID',CAST(OLD.partID AS CHAR),  \n" +
                "       CAST(new.partID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "      IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "	 INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISDELETED',CAST(OLD.isDeleted AS CHAR),  \n" +
                "       CAST(new.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.kitQty,0) != IFNULL(NEW.kitQty,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'KITQTY',CAST(OLD.kitQty AS CHAR),  \n" +
                "       CAST(new.kitQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(old.custPOLineNumber,\"\")!=IFNULL(NEW.custPOLineNumber,\"\")THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'CustPOLine',OLD.custPOLineNumber,  \n" +
                "       new.custPOLineNumber,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "  \n" +
                "       END IF;  \n" +
                "       IF IFNULL(old.salesOrderDetStatus,0)!=IFNULL(NEW.salesOrderDetStatus,0)THEN  \n" +
                "		   INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		   VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'Status',CASE  WHEN OLD.salesOrderDetStatus=1 THEN 'InProgress' WHEN OLD.salesOrderDetStatus=2 THEN 'Completed' ELSE '' END ,  \n" +
                "		   CASE WHEN NEW.salesOrderDetStatus=1 THEN 'InProgress' WHEN NEW.salesOrderDetStatus=2 THEN 'Completed' ELSE '' END,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "       END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isSkipKitCreation,0) != IFNULL(NEW.isSkipKitCreation,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISKIPKITCREATION',CASE WHEN OLD.isSkipKitCreation = 1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.isSkipKitCreation = 1 THEN 'Yes' ELSE 'No' END,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partDescription,0) != IFNULL(NEW.partDescription,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PARTDESCRIPTION',CAST(OLD.partDescription AS CHAR),  \n" +
                "       CAST(new.partDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.quoteNumber,0) != IFNULL(NEW.quoteNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QUOTENUMBER',CAST(OLD.quoteNumber AS CHAR),  \n" +
                "       CAST(new.quoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.frequency,0) != IFNULL(NEW.frequency,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'FREQUENCY',CAST(CASE WHEN OLD.frequency=1 THEN 'Every' WHEN OLD.frequency=2 THEN 'First' WHEN OLD.frequency=3 THEN 'Last' ELSE '' END  AS CHAR),  \n" +
                "       CAST(CASE WHEN new.frequency=1 THEN 'Every' WHEN new.frequency=2 THEN 'First' WHEN new.frequency=3 THEN 'Last' ELSE '' END  AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.originalPOQty,0) != IFNULL(NEW.originalPOQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ORGPOQTY',CAST(OLD.originalPOQty  AS CHAR),  \n" +
                "       CAST(NEW.originalPOQty  AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.quoteFrom,0) != IFNULL(NEW.quoteFrom,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QUOTEFROM',  \n" +
                "       CASE WHEN OLD.quoteFrom = 1 THEN 'From Quote'  \n" +
                "			WHEN OLD.quoteFrom = 2 THEN 'From Part Master'  \n" +
                "            WHEN OLD.quoteFrom = 3 THEN 'N/A'  \n" +
                "            ELSE '' END,  \n" +
                "		CASE WHEN new.quoteFrom = 1 THEN 'From Quote'  \n" +
                "			WHEN new.quoteFrom = 2 THEN 'From Part Master'  \n" +
                "            WHEN new.quoteFrom = 3 THEN 'N/A'  \n" +
                "            ELSE '' END,  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getSalesOrderReleaseLineDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderReleaseLineDetails`(  \n" +
                "IN pSalesOrderDetID  INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "          SELECT ss.shippingID,  \n" +
                "                 ss.qty,  \n" +
                "                 IFNULL(ss.unitMeaser,'EA') unitMeaser,  \n" +
                "                 ss.shippingDate,  \n" +
                "                 ss.shippingAddressID,  \n" +
                "                 ss.description,  \n" +
                "                 ss.priority,  \n" +
                "                 ss.packingSlipNo,  \n" +
                "                 ss.invoiceNo,  \n" +
                "                 ss.releaseNotes,  \n" +
                "                 ss.releaseNumber,  \n" +
                "                 ss.requestedDockDate,  \n" +
                "                 ss.carrierID,  \n" +
                "                 ss.carrierAccountNumber,  \n" +
                "                 ss.promisedShipDate,  \n" +
                "                 ss.shippingMethodID,  \n" +
                "                 ss.revisedRequestedDockDate,  \n" +
                "                 ss.revisedRequestedShipDate,  \n" +
                "                 ss.revisedRequestedPromisedDate,  \n" +
                "                 ss.isAgreeToShip,  \n" +
                "                 1 AS isShippingDateConfirm,  \n" +
                "                 1 AS isrequestedDockDateConfirm,  \n" +
                "                 1 AS promisedShipDateConfirm,  \n" +
                "                 1 AS isRevisedShippingDateConfirm,  \n" +
                "                 1 AS isrevisedRequestedDockDateConfirm,  \n" +
                "                 1 AS revisedPromisedShipDateConfirm,  \n" +
                "                 ss.customerReleaseLine,  \n" +
                "                 shp.shippedQty,  \n" +
                "                 ss.isReadyToShip,  \n" +
                "                 ss.poReleaseNumber  \n" +
                "                 FROM salesshippingmst ss  LEFT JOIN (  \n" +
                "                                      SELECT SUM(cpd.shipQty) shippedQty,cpd.shippingId FROM customer_packingslip_det cpd  \n" +
                "                                      JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID WHERE  cp.transType='P' AND cpd.isdeleted=0  \n" +
                "                                    GROUP BY cpd.shippingId ) AS shp  ON shp.shippingId=ss.shippingID  \n" +
                "                 WHERE ss.sDetID= pSalesOrderDetID AND ss.isdeleted=0;  \n" +
                "  \n" +
                "                 SELECT releaseLevelComment,partCategory FROM salesorderdet WHERE id=pSalesOrderDetID;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `TRG_AI_salesorderdet` ;  \n" +
                "CREATE TRIGGER `TRG_AI_salesorderdet` AFTER INSERT ON `salesorderdet`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	IF(NEW.refBlanketPOID IS NOT NULL)THEN  \n" +
                "  \n" +
                "		INSERT INTO salesorder_otherexpense_details(refSalesOrderDetID,partID,qty,price,frequency,lineComment,lineInternalComment,createdBy,updatedBy,frequencyType)  \n" +
                "		 SELECT NEW.id,partID,qty,price,frequency,lineComment,lineInternalComment,NEW.createdBy,NEW.createdBy,frequencyType FROM  \n" +
                "		 salesorder_otherexpense_details WHERE refSalesOrderDetID=NEW.refBlanketPOID AND isdeleted=0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerPackingShippingDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingShippingDetail`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefCustPackingSlipID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "  SET @tempQuerypackingSlip = CONCAT(\"SELECT cpd.id, cpd.refCustPackingSlipID,cpd.refSalesorderDetid,  \n" +
                "			cpd.partId , cpd.custPOLineID, cpd.assyDescription,  \n" +
                "			cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,cpd.shippingNotes,cpd.shippingId,  \n" +
                "			cpd.internalComment,  \n" +
                "			cpd.binID, cpd.whID,  \n" +
                "			ss.qty as releaseLineQty,  \n" +
                "			cpd.standrads,  \n" +
                "			ss.releaseNumber,  \n" +
                "			cpd.poReleaseNumber,  \n" +
                "			cpd.refBlanketPONumber,  \n" +
                "			fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "			fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(cpd.updateByRoleId) updatedbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			c.mfgpn,c.pidcode PIDCode,c.nickName,c.mfgpndescription,rr.name as rohsName,rr.rohsIcon, c.partType ,  \n" +
                "			fun_getUnitNameByID(c.uom) unitMeaser ,  \n" +
                "			cpd.reflineID as lineID ,  \n" +
                "			     fun_getMfgCodeAndNameByID(c.mfgcodeid) mfgName,  \n" +
                "			     c.mfgcodeid ,  \n" +
                "			cpd.lineID AS lineIDSequenceNum   ,  \n" +
                "			(SELECT GROUP_CONCAT(DISTINCT woNumber SEPARATOR ', ') FROM shippedassembly  \n" +
                "			   WHERE refCustPackingSlipDetID = cpd.id AND isDeleted = 0 AND shippedqty > 0) shippedFromWONumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(DISTINCT css.uid) FROM shippedassembly sa  \n" +
                "					JOIN component_sid_stock css ON sa.refsidid = css.id AND  css.isDeleted = 0  \n" +
                "			  WHERE sa.refCustPackingSlipDetID = cpd.id AND sa.isDeleted = 0 AND sa.shippedqty > 0) shippedFromUMIDs ,  \n" +
                "             cpd.refLineId soLineId ,  \n" +
                "             cpd.refCustPackingSlipDetID,  \n" +
                "             CASE WHEN c.partType = 4 THEN FALSE ELSE TRUE END materialType,  \n" +
                "             (select mfg.mfgType from mfgcodemst mfg where mfg.id = c.mfgcodeID and mfg.isDeleted = 0) mfgType,  \n" +
                "             cpd.componentStockType,  \n" +
                "             if(cp.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
                "             if(cp.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "             if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "             if(cp.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "             c.isCustom,c.isCPN,  \n" +
                "             if(cp.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
                "             (select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "						where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "							from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "            if(cp.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "            if(cp.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "            if(cp.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "			(case when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText  \n" +
                "		FROM `customer_packingslip_det` AS cpd  \n" +
                "			left join component c on c.id=cpd.partid  \n" +
                "			left join rfq_rohsmst rr on rr.id=c.rohsStatusID  \n" +
                "			left join salesshippingmst ss on ss.shippingID=cpd.shippingID and ss.isdeleted=0  \n" +
                "            left join salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "            left join customer_packingslip cp on cp.id  = cpd.refCustPackingSlipID and cp.isDeleted = 0  \n" +
                "		WHERE cpd.isDeleted=0 and cpd.refCustPackingSlipID=\",IFNULL(prefCustPackingSlipID,0));  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY lineIDSequenceNum ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "        /* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempQuerypackingSlip,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempQuerypackingSlip,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "			PREPARE query1 FROM @SQLStatement2;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerPackingSlipDetailPerLine` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDetailPerLine`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "                       cd.poRevision,  \n" +
                "		       ss.releaseNumber,  \n" +
                "		       ss.qty as releaseLineQty,  \n" +
                "		        cd.customerID,  \n" +
                "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cpd.internalComment,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "			 cpd.poReleaseNumber,  \n" +
                "			 cpd.refBlanketPONumber,  \n" +
                "            cpd.partId,  \n" +
                "            fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "            `cpd`.assyDescription,  \n" +
                "            fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "            c.mfgPN as assyName ,  \n" +
                "            c.PIDCode as assyId,  \n" +
                "            c.mfgCodeID,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "                fun_getMfgCodeAndNameByID(c.mfgCodeID) mfrName,  \n" +
                "                fun_getMfgCodeByID(cd.customerID) custCode,  \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "			cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
                "			cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,  \n" +
                "			case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "			fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "			concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "		(CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.createdAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.createdAt) END  createdAt,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.UpdatedAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.UpdatedAt) END  updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.lockedAt) lockedAt ,  \n" +
                "		if(cd.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
                "        if(cd.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
                "        if(cd.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "		if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "        if(cd.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "        if(cd.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "        if(cd.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "		if(cd.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "		(case when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText,  \n" +
                "        (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "        cd.revision,  \n" +
                "		(select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "			where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "			from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "		c.isCustom,   c.custAssyPN customPartNumber  ,        cpd.remainingQty  \n" +
                "		FROM customer_packingslip cd  \n" +
                "		JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0  \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0 and invoice.transType ='I'  \n" +
                "        LEFT JOIN salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "    IF (pfilterStatus = 0) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    ELSE  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgPartID IS NOT NULL)THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cpd.partId in ( ',pmfgPartID,')');  \n" +
                "  END IF;  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "	 SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetsalesOrderDetailStatus` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetsalesOrderDetailStatus`(  \n" +
                "	IN psalesorderDetID VARCHAR(10000),  \n" +
                "	IN preleaseLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vQtyRelease INT;  \n" +
                "	DECLARE vQtyWprkorder INT;  \n" +
                "	DECLARE vSalesOrderDetailIdOfRelease INT;  \n" +
                "	DECLARE vSalesOrderDetailIdOfWO INT;  \n" +
                "	SELECT 	IFNULL(SUM(kitReleaseQty),0), salesOrderDetID  \n" +
                "	INTO 	vQtyRelease, vSalesOrderDetailIdOfRelease  \n" +
                "	FROM 	salesorder_plan_detailsmst  \n" +
                "	WHERE 	FIND_IN_SET(salesOrderDetID, psalesorderDetID)  \n" +
                "			AND isdeleted = 0  \n" +
                "			AND kitStatus = 'R'  \n" +
                "	GROUP BY salesOrderDetID;  \n" +
                "  \n" +
                "	SELECT 	IFNULL(SUM(poQty),0), salesOrderDetailID  \n" +
                "	INTO 	vQtyWprkorder, vSalesOrderDetailIdOfWO  \n" +
                "	FROM 	workorder_salesorder_details  \n" +
                "	WHERE 	FIND_IN_SET(salesOrderDetailID, psalesorderDetID)  \n" +
                "			AND isdeleted = 0  \n" +
                "	GROUP BY salesOrderDetailID;  \n" +
                "  \n" +
                "	SELECT vQtyRelease, vSalesOrderDetailIdOfRelease, vQtyWprkorder, vSalesOrderDetailIdOfWO;  \n" +
                "  IF(preleaseLineId IS NULL) THEN  \n" +
                "	SELECT 	IFNULL(SUM(cpd.shipQty),0) shippedqty, cp.id, GROUP_CONCAT(DISTINCT(cp.packingSlipNumber)) packingSlipNumber, refSalesOrderID vSalesOrderDetailIdOfCustPS  \n" +
                "	FROM 	customer_packingslip_det cpd  \n" +
                "	JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "	WHERE FIND_IN_SET(cpd.refsalesorderdetid,psalesorderDetID) AND  cpd.isdeleted = 0  \n" +
                "		AND cp.transType = 'P';  \n" +
                "   ELSE  \n" +
                "    SELECT shippedQty AS shippedqty FROM   vu_shippingsummaryperReleasePlan WHERE shippingId=preleaseLineId;  \n" +
                "   END IF;  \n" +
                "  \n" +
                "  SELECT sm.salesOrderNumber,poNumber,sm.id soID FROM salesorderdet sd JOIN salesordermst sm ON sd.refSalesOrderID=sm.id AND sm.isdeleted=0  \n" +
                "  WHERE sd.refBlanketPOID=psalesorderDetID AND sd.isdeleted=0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getSalesOrderBPOValidationDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderBPOValidationDetails`(  \n" +
                "		IN psoID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "         SELECT cp.id,cp.packingSlipNumber FROM customer_packingslip cp WHERE cp.refSalesOrderID=psoID AND cp.isdeleted=0;  \n" +
                "  \n" +
                "  \n" +
                "         SELECT sd.id FROM salesorderdet sd WHERE sd.refBlanketPOID IN (SELECT id FROM salesorderdet sdd WHERE sdd.refSalesOrderID=psoID AND sdd.isdeleted=0);  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_customer_packingslip_det` ;  \n" +
                "CREATE TRIGGER `Trg_AU_customer_packingslip_det` AFTER UPDATE ON `customer_packingslip_det`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	DECLARE v_trasType VARCHAR(5);  \n" +
                "  DECLARE vNewQuoteFrom VARCHAR(30);  \n" +
                "    DECLARE vOldQuoteFrom VARCHAR(30);  \n" +
                "  DECLARE vBPOQty INT;  \n" +
                "	DECLARE vBPOTotalQty INT;  \n" +
                "  \n" +
                "	SELECT transType INTO v_trasType  \n" +
                "	FROM customer_packingslip  \n" +
                "	WHERE isDeleted = 0 AND id = NEW.refCustPackingSlipID ;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.custPOLineID,0) != IFNULL(NEW.custPOLineID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Cust PO Line#',CAST(OLD.custPOLineID AS CHAR),  \n" +
                "       CAST(new.custPOLineID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poQty,0) != IFNULL(NEW.poQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Original PO Line Order Qty',CAST(OLD.poQty AS CHAR),  \n" +
                "       CAST(new.poQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF IFNULL(OLD.shipQty,0) != IFNULL(NEW.shipQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),  \n" +
                "		(CASE WHEN v_trasType='P' THEN 'Shipment Qty' ELSE 'Qty' END),	CAST(OLD.shipQty AS CHAR),  \n" +
                "		CAST(new.shipQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.remainingQty,0) != IFNULL(NEW.remainingQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Remaining Qty',CAST(OLD.remainingQty AS CHAR),  \n" +
                "       CAST(new.remainingQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippedQty,0) != IFNULL(NEW.shippedQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Shipped To Date',CAST(OLD.shippedQty AS CHAR),  \n" +
                "       CAST(new.shippedQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.shippingNotes,0) != IFNULL(NEW.shippingNotes,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Line Shipping Comments',CAST(OLD.shippingNotes AS CHAR),  \n" +
                "       CAST(new.shippingNotes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalComment,0) != IFNULL(NEW.internalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Line Internal Notes',CAST(OLD.internalComment AS CHAR),  \n" +
                "       CAST(new.internalComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.standrads,0) != IFNULL(NEW.standrads,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Applicable Standards',CAST(OLD.standrads AS CHAR),  \n" +
                "       CAST(new.standrads AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.refChargesTypeID,0) != IFNULL(NEW.refChargesTypeID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Other Charges Type',fun_getGenericCategoryNameByID(OLD.refChargesTypeID),  \n" +
                "       fun_getGenericCategoryNameByID(NEW.refChargesTypeID),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.unitPrice,0) != IFNULL(NEW.unitPrice,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Unit Price ($)', CAST(OLD.unitPrice AS CHAR), CAST(NEW.unitPrice AS CHAR),  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "      IF IFNULL(OLD.assyDescription,0) != IFNULL(NEW.assyDescription,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Assy/PID Description',CAST(OLD.assyDescription AS CHAR),  \n" +
                "       CAST(NEW.assyDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Ext. Price ($)',  \n" +
                "		CASE WHEN v_trasType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(OLD.extendedPrice,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(OLD.extendedPrice,2) AS CHAR) END,  \n" +
                "		CASE WHEN v_trasType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(NEW.extendedPrice,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(NEW.extendedPrice,2) AS CHAR) END,  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.otherCharges,0) != IFNULL(NEW.otherCharges,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Total Other Charges Price ($)',CAST(FORMAT(OLD.otherCharges,2) AS CHAR),  \n" +
                "       CAST(FORMAT(new.otherCharges,2) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 IF IFNULL(OLD.reflineID,0) != IFNULL(NEW.reflineID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'SO Line#',CAST(OLD.reflineID AS CHAR),  \n" +
                "       CAST(NEW.reflineID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF(new.refsalesorderdetid IS NOT NULL)THEN  \n" +
                "	SELECT  SUM(cpd.shipQty) INTO @shipQty   FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
                "		WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.refsalesorderdetid AND cp.transType='P';  \n" +
                "  \n" +
                "	SELECT SUM(ss.qty),refBlanketPOID INTO @qty,@bpoID FROM salesorderdet ss WHERE ss.id=new.refsalesorderdetid AND ss.isdeleted=0 GROUP BY refBlanketPOID;  \n" +
                "  \n" +
                "		IF(IFNULL(@shipQty,0)>=IFNULL(@qty,0)) THEN  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=New.refsalesorderdetid;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE id=New.refsalesorderdetid;  \n" +
                "		END IF;  \n" +
                "		SELECT  qty INTO vBPOQty FROM  salesorderdet WHERE id=@bpoID;  \n" +
                "	        SELECT  SUM(qty) INTO vBPOTotalQty FROM  salesorderdet WHERE refBlanketPOID=@bpoID AND isdeleted=0;  \n" +
                "		IF((SELECT COUNT(1) FROM SalesOrderDet WHERE  refBlanketPOID=@bpoID AND isdeleted=0 AND salesOrderDetStatus=1 AND isCancle=0)=0 AND IFNULL(vBPOQty,0)>=IFNULL(vBPOTotalQty,0))THEN  \n" +
                "		        UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=@bpoID;  \n" +
                "		ELSE  \n" +
                "		      UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE id=@bpoID;  \n" +
                "		END IF;  \n" +
                "  END IF;  \n" +
                "  IF IFNULL(OLD.quoteNumber,0) != IFNULL(NEW.quoteNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote#',CAST(OLD.quoteNumber AS CHAR),  \n" +
                "	   CAST(NEW.quoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "   IF IFNULL(OLD.quoteFrom,0) != IFNULL(NEW.quoteFrom,0) THEN  \n" +
                "		SELECT (CASE WHEN OLD.quoteFrom = 1 THEN 'From RFQ' WHEN OLD.quoteFrom = 2 THEN 'From Part Master' WHEN OLD.quoteFrom = 3 THEN 'N/A' END ) INTO vOldQuoteFrom ;  \n" +
                "        SELECT (CASE WHEN NEW.quoteFrom = 1 THEN 'From RFQ' WHEN NEW.quoteFrom = 2 THEN 'From Part Master' WHEN NEW.quoteFrom = 3 THEN 'N/A' END ) INTO vNewQuoteFrom ;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote From',vOldQuoteFrom,  \n" +
                "	   vNewQuoteFrom,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.refRFQGroupID,0) != IFNULL(NEW.refRFQGroupID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',CAST(OLD.refRFQGroupID AS CHAR),  \n" +
                "	   CAST(NEW.refRFQGroupID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.refAssyQtyTurnTimeID,0) != IFNULL(NEW.refAssyQtyTurnTimeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',OLD.assyQtyTurnTimeText,  \n" +
                "	   NEW.assyQtyTurnTimeText,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "       IF IFNULL(OLD.refRFQQtyTurnTimeID,0) != IFNULL(NEW.refRFQQtyTurnTimeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',OLD.assyQtyTurnTimeText,  \n" +
                "	   NEW.assyQtyTurnTimeText,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Confirming Zero Value Line',(CASE WHEN OLD.isZeroValue =0 THEN 'False' ELSE 'True' END),  \n" +
                "	   (CASE WHEN NEW.isZeroValue =0 THEN 'False' ELSE 'True' END),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_customer_packingslip_det` ;  \n" +
                "CREATE TRIGGER `Trg_AI_customer_packingslip_det` AFTER INSERT ON `customer_packingslip_det`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTransType VARCHAR(5);  \n" +
                "	DECLARE vBPOQty INT;  \n" +
                "	DECLARE vBPOTotalQty INT;  \n" +
                "	SELECT transType INTO vTransType  \n" +
                "	FROM customer_packingslip  \n" +
                "	WHERE isDeleted = 0 AND id = NEW.refCustPackingSlipID;  \n" +
                "  \n" +
                "  IF(new.refsalesorderdetid IS NOT NULL AND vTransType='P')THEN  \n" +
                "	SELECT  SUM(cpd.shipQty) INTO @shipQty   FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
                "		WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.refsalesorderdetid AND cp.transType='P';  \n" +
                "  \n" +
                "	SELECT SUM(ss.qty),ss.refBlanketPOID INTO @qty,@bpoID FROM salesorderdet ss WHERE ss.id=new.refsalesorderdetid GROUP BY ss.refBlanketPOID;  \n" +
                "	SELECT  qty INTO vBPOQty FROM  salesorderdet WHERE id=@bpoID;  \n" +
                "	SELECT  SUM(qty) INTO vBPOTotalQty FROM  salesorderdet WHERE refBlanketPOID=@bpoID AND isdeleted=0;  \n" +
                "  \n" +
                "		IF(IFNULL(@shipQty,0)>=IFNULL(@qty,0)) THEN  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=New.refsalesorderdetid;  \n" +
                "		END IF;  \n" +
                "		IF((SELECT COUNT(1) FROM SalesOrderDet WHERE  refBlanketPOID=@bpoID AND isdeleted=0 AND salesOrderDetStatus=1 AND isCancle=0)=0 AND IFNULL(vBPOQty,0)>=IFNULL(vBPOTotalQty,0))THEN  \n" +
                "		        UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=@bpoID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesShippingDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(  \n" +
                "	IN psalesorderDetID INT ,  \n" +
                "	IN packingSlipID INT,  \n" +
                "	IN ppackingslipDetID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "      SELECT ss.shippingID,  \n" +
                "        ss.sDetId,  \n" +
                "		IFNULL(sd.custPOLineNumber ,1)  custPOLineNumber,  \n" +
                "        IFNULL(ss.releaseNumber,1) releaseNumber,  \n" +
                "        ss.qty,  \n" +
                "        ss.shippingDate,  \n" +
                "        (CASE WHEN ss.description IS NOT NULL THEN CONCAT_WS(',',ss.releaseNotes,  ss.description)  \n" +
                "			 ELSE ss.releaseNotes END ) releaseNotes,  \n" +
                "        sd.tentativeBuild,  \n" +
                "        sd.qty AS poQty,  \n" +
                "        sd.partID,  \n" +
                "        sd.price,  \n" +
                "        sd.lineID,  \n" +
                "        sd.internalComment,  \n" +
                "        sd.partDescription,  \n" +
                "        sd.remark,  \n" +
                "        c.iscustom,  \n" +
                "        smp.poNumber,  \n" +
                "        ss.poReleaseNumber,  \n" +
                "		c.mfgpn,  \n" +
                "		c.mfgpndescription,  \n" +
                "		c.pidcode,  \n" +
                "		fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "		c.nickName,  \n" +
                "		c.mfgcodeID,  \n" +
                "		sd.originalPOQty,  \n" +
                "		fun_getMfgCodeAndNameByID(c.mfgcodeID)mfgName,  \n" +
                "		(CASE WHEN ss.shippingMethodID IS NULL THEN som.shippingMethodID  \n" +
                "			ELSE ss.shippingMethodID END) shippingMethodID ,  \n" +
                "		(CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddressID  \n" +
                "			ELSE ss.shippingAddressID END) shippingAddressID ,  \n" +
                "		-- (CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddress END) shippingAddress ,  \n" +
                "		fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "		fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "		fun_getCertificationByPartID(sd.partID)standards,  \n" +
                "		CONCAT(IFNULL(ss.releaseNumber,1),' | ',ss.qty,' | ',DATE_FORMAT((CASE WHEN ss.isAgreeToShip=1 THEN IFNULL(ss.revisedRequestedShipDate,ss.revisedRequestedDockDate) ELSE IFNULL(ss.shippingDate,ss.requestedDockDate) END), '%m-%d-%y')) shipping,  \n" +
                "		(SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd WHERE refsalesorderdetid=ss.sDetId  \n" +
                "			AND cpd.refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE transType = 'P' AND isDeleted = 0)  \n" +
                "			AND cpd.isdeleted=0) shippedQty ,  \n" +
                "		(CASE WHEN ss.shippingMethodID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.shippingMethodID))  \n" +
                "				ELSE (fun_getGenericCategoryCodeNameByID(ss.shippingMethodID)) END) shippingMethodText,  \n" +
                "		c.partType,  \n" +
                "		(SELECT mfg.mfgType FROM mfgcodemst mfg WHERE mfg.id = c.mfgcodeid AND mfg.isDeleted = 0 ) mfgType,  \n" +
                "		sd.quoteNumber,sd.quoteFrom, sd.refAssyQtyTurnTimeID,  \n" +
                "        sd.refRFQGroupID,  \n" +
                "        sd.refRFQQtyTurnTimeID  ,  \n" +
                "		IFNULL(sd.assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ',  \n" +
                "											CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
                "												WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
                "												WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
                "										FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
                "										JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
                "										WHERE rfqAssyTurn.id = sd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
                "		c.category partCategory  \n" +
                "	FROM salesshippingmst ss  \n" +
                "	JOIN salesorderdet sd ON ss.sDetID=sd.id  \n" +
                "	JOIN salesordermst som ON som.id = sd.refSalesOrderID  \n" +
                "	JOIN COMPONENT c ON c.id=sd.partid  \n" +
                "	LEFT JOIN salesorderdet sdp ON sd.refBlanketPOID=sdp.id AND sdp.isdeleted=0  \n" +
                "	LEFT JOIN salesordermst smp ON smp.id=sdp.refSalesOrderID AND smp.isdeleted=0  \n" +
                "	WHERE sd.id=psalesorderDetID  \n" +
                "	AND  sd.isDeleted = 0 AND  \n" +
                "	(CASE WHEN ppackingslipDetID IS NULL THEN  \n" +
                "		ss.qty > (SELECT  IFNULL(SUM(cpd.shipqty),0) FROM customer_packingslip_det cpd WHERE cpd.shippingId=ss.shippingID  \n" +
                "			AND cpd.isdeleted=0 AND refCustPackingSlipID IN (  SELECT id FROM customer_packingslip WHERE transType=\"P\"))  \n" +
                "		ELSE  ss.qty=ss.qty  END)  \n" +
                "	AND ss.isdeleted=0  \n" +
                "	ORDER BY ss.releaseNumber,ss.shippingDate;  \n" +
                "  \n" +
                "-- all list of shipping line with other charges  \n" +
                "	SELECT NULL AS shippingID,  \n" +
                "			sDetId,  \n" +
                "			custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			releaseNotes,  \n" +
                "			tentativeBuild,  \n" +
                "			poQty,  \n" +
                "			partID,  \n" +
                "			price,  \n" +
                "			lineID,  \n" +
                "			partDescription,  \n" +
                "			mfgPN,  \n" +
                "			mfgPNDescription,  \n" +
                "			unitMeaser,  \n" +
                "			nickName,  \n" +
                "			pidcode,  \n" +
                "			NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			mfgcodeID,  \n" +
                "			mfgName,  \n" +
                "			rohsIcon,  \n" +
                "			rohsName,  \n" +
                "			rohsStatusID,  \n" +
                "			standards,  \n" +
                "			shippedQty   ,  \n" +
                "			remark,  \n" +
                "			internalcomment,  \n" +
                "			mfgPnwihLineId,  \n" +
                "			refSODetID,  \n" +
                "			refSOReleaseLineID,  \n" +
                "			frequency,  \n" +
                "			originalPOQty,  \n" +
                "			frequencyType,  \n" +
                "			poNumber  \n" +
                "    FROM (SELECT  \n" +
                "			NULL AS shippingID,  \n" +
                "			sd.id AS sDetId,  \n" +
                "			sd.custPOLineNumber custPOLineNumber,  \n" +
                "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			sd.qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			sd.remark releaseNotes,  \n" +
                "			sd.tentativeBuild,  \n" +
                "			sd.qty AS poQty,  \n" +
                "			sd.partID,  \n" +
                "			sd.price,  \n" +
                "			sd.lineID,  \n" +
                "			sd.partDescription,  \n" +
                "			c.mfgPN,  \n" +
                "			c.mfgPNDescription,  \n" +
                "			fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "			c.nickName,  \n" +
                "			c.pidcode,  \n" +
                "			sd.refSODetID,  \n" +
                "			sd.refSOReleaseLineID,  \n" +
                "			sd.frequency,  \n" +
                "			CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
                "			NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			c.mfgcodeID,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "			c.rohsStatusID,  \n" +
                "			sd.originalPOQty,  \n" +
                "			smp.poNumber,  \n" +
                "			fun_getCertificationByPartID(c.id)standards,  \n" +
                "			sd.frequencyType,  \n" +
                "			 (SELECT SUM(IFNULL(cpd.shipQty,0)) FROM customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
                "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0) shippedQty   ,  \n" +
                "			sd.remark,  \n" +
                "			sd.internalcomment  \n" +
                "		FROM salesorderdet sd  \n" +
                "		LEFT JOIN component c ON c.id=sd.partid  \n" +
                "		LEFT JOIN salesorderdet sdp ON sd.refBlanketPOID=sdp.id AND sdp.isdeleted=0  \n" +
                "	        LEFT JOIN salesordermst smp ON smp.id=sdp.refSalesOrderID AND smp.isdeleted=0  \n" +
                "		WHERE sd.refSODetID=psalesorderDetID  \n" +
                "		AND sd.isdeleted=0  \n" +
                "    ) a;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesshippingmst` ;  \n" +
                "CREATE TRIGGER `Trg_AU_salesshippingmst` AFTER UPDATE ON `salesshippingmst`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "   DECLARE vBPOQty INT;  \n" +
                "	DECLARE vBPOTotalQty INT;  \n" +
                "	SELECT  SUM(cpd.shipQty) INTO @shipQty   FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
                "		WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.sDetID AND cp.transType='P';  \n" +
                "  \n" +
                "	SELECT SUM(ss.qty) INTO @qty FROM salesshippingmst ss WHERE ss.sDetID=new.sDetID AND ss.isdeleted=0;  \n" +
                "	SELECT refBlanketPOID INTO @bpoID FROM salesorderdet  WHERE id=new.sDetID AND isdeleted=0;  \n" +
                "	SELECT  qty INTO vBPOQty FROM  salesorderdet WHERE id=@bpoID;  \n" +
                "	SELECT  SUM(qty) INTO vBPOTotalQty FROM  salesorderdet WHERE refBlanketPOID=@bpoID AND isdeleted=0;  \n" +
                "  \n" +
                "		IF(IFNULL(@shipQty,0)>=IFNULL(@qty,1)) THEN  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=New.sDetID;  \n" +
                "		ELSE  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE id=New.sDetID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF((SELECT COUNT(1) FROM SalesOrderDet WHERE  refBlanketPOID=@bpoID AND isdeleted=0 AND salesOrderDetStatus=1 AND isCancle=0)=0 AND IFNULL(vBPOQty,0)>=IFNULL(vBPOTotalQty,0))THEN  \n" +
                "		        UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=@bpoID;  \n" +
                "		ELSE  \n" +
                "		          UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE id=@bpoID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "          SELECT COUNT(1) INTO @shippingQty FROM    salesshippingmst WHERE sDetID=new.sDetID AND isdeleted=0;  \n" +
                "  \n" +
                "          UPDATE SalesOrderDet SET shippingQty=@shippingQty  WHERE id=new.sDetID;  \n" +
                "  \n" +
                "          SELECT COUNT(1) INTO @shippingQty FROM    salesshippingmst WHERE sDetID=@bpoID AND isdeleted=0;  \n" +
                "  \n" +
                "          UPDATE SalesOrderDet SET shippingQty=@shippingQty  WHERE id=@bpoID;  \n" +
                "  \n" +
                "          IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'RELEASEQTY',CAST(OLD.qty AS CHAR),  \n" +
                "		CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.shippingDate,0) != IFNULL(NEW.shippingDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDSHIPDATE',CAST(DATE_FORMAT(OLD.shippingDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.shippingDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.promisedShipDate,0) != IFNULL(NEW.promisedShipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'PROMISEDSHIPDATE',CAST(DATE_FORMAT(OLD.promisedShipDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.promisedShipDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.requestedDockDate,0) != IFNULL(NEW.requestedDockDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDDOCKDATE',CAST(DATE_FORMAT(OLD.requestedDockDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.requestedDockDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "	  IF IFNULL(OLD.isAgreeToShip,0) != IFNULL(NEW.isAgreeToShip,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'AGREETOSHIP',CAST(CASE WHEN OLD.isAgreeToShip=1 THEN 'YES' ELSE 'NO' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isAgreeToShip=1 THEN 'YES' ELSE 'NO' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "	  IF IFNULL(OLD.revisedRequestedDockDate,0) != IFNULL(NEW.revisedRequestedDockDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDREVISEDDOCKDATE',CAST(DATE_FORMAT(OLD.revisedRequestedDockDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.revisedRequestedDockDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.revisedRequestedShipDate,0) != IFNULL(NEW.revisedRequestedShipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDREVISEDSHIPDATE',CAST(DATE_FORMAT(OLD.revisedRequestedShipDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.revisedRequestedShipDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.revisedRequestedPromisedDate,0) != IFNULL(NEW.revisedRequestedPromisedDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REVISEDPROMISEDDATE',CAST(DATE_FORMAT(OLD.revisedRequestedPromisedDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.revisedRequestedPromisedDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'SHIPPINGMETHODID',CAST( fun_getGenericCategoryNameByID(OLD.shippingMethodID) AS CHAR),  \n" +
                "		CAST(fun_getGenericCategoryNameByID(NEW.shippingMethodID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'CARRIERID',CAST( fun_getGenericCategoryNameByID(OLD.carrierID) AS CHAR),  \n" +
                "		CAST(fun_getGenericCategoryNameByID(NEW.carrierID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'CARRIERACCOUNTNUMBER',CAST( OLD.carrierAccountNumber AS CHAR),  \n" +
                "		CAST(NEW.carrierAccountNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPendingSalesShippingDetForOtherCharges` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetForOtherCharges`(  \n" +
                "	IN psalesorderID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	SELECT NULL AS shippingID,  \n" +
                "		 sDetId,  \n" +
                "		custPOLineNumber,  \n" +
                "		-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "		NULL releaseNumber,  \n" +
                "		qty,  \n" +
                "		NULL shippingDate,  \n" +
                "		releaseNotes,  \n" +
                "		tentativeBuild,  \n" +
                "		poQty,  \n" +
                "		partID,  \n" +
                "		price,  \n" +
                "		lineID,  \n" +
                "		partDescription,  \n" +
                "		 mfgPN,  \n" +
                "		 mfgPNDescription,  \n" +
                "		 unitMeaser,  \n" +
                "		 nickName,  \n" +
                "         pidcode,  \n" +
                "		 NULL shippingMethodID,  \n" +
                "		NULL shippingAddressID,  \n" +
                "		mfgcodeID,  \n" +
                "		mfgName,  \n" +
                "		rohsIcon,  \n" +
                "		rohsName,  \n" +
                "        rohsStatusID,  \n" +
                "		standards,  \n" +
                "		shippedQty   ,  \n" +
                "        remark,  \n" +
                "        internalcomment,  \n" +
                "        mfgPnwihLineId,  \n" +
                "        poNumber  \n" +
                "    FROM (SELECT  \n" +
                "			NULL AS shippingID,  \n" +
                "			sd.id AS sDetId,  \n" +
                "			sd.custPOLineNumber custPOLineNumber,  \n" +
                "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			sd.qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			sd.remark releaseNotes,  \n" +
                "			sd.tentativeBuild,  \n" +
                "			sd.qty AS poQty,  \n" +
                "			sd.partID,  \n" +
                "			sd.price,  \n" +
                "			sd.lineID,  \n" +
                "			sd.partDescription,  \n" +
                "			 c.mfgPN,  \n" +
                "			 c.mfgPNDescription,  \n" +
                "			 fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "			 c.nickName,  \n" +
                "			 c.pidcode,  \n" +
                "			 smb.poNumber,  \n" +
                "             CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
                "			 NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			c.mfgcodeID,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "			c.rohsStatusID,  \n" +
                "			fun_getCertificationByPartID(c.id)standards,  \n" +
                "			 (SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
                "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0) shippedQty   ,  \n" +
                "				sd.remark,  \n" +
                "				sd.internalcomment  \n" +
                "		FROM salesorderdet sd  \n" +
                "		LEFT JOIN component c ON c.id=sd.partid  \n" +
                "		LEFT JOIN salesorderdet sdb ON sdb.id=sd.refBlanketPOID AND sdb.isdeleted=0  \n" +
                "		LEFT JOIN salesordermst smb ON smb.id=sd.refsalesOrderID  \n" +
                "		WHERE sd.refSalesOrderID = psalesorderID  \n" +
                "		AND sd.isdeleted=0  \n" +
                "		AND sd.isCancle=0  \n" +
                "		AND sd.partCategory = 2  \n" +
                "		AND sd.refSODetID IS NULL  \n" +
                "		AND c.partType  =4  \n" +
                "    ) a  WHERE a.poQty - IFNULL(a.shippedQty,0) > 0;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderReportDetails`(  \n" +
                "	IN pid INT(11)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		SELECT sm.salesOrderNumber,sm.poNumber,sm.poDate, sm.poRevision,sm.revision,  \n" +
                "		sm.soDate,  \n" +
                "		sm.status,  \n" +
                "		sm.serialNumber,  \n" +
                "		sm.shippingComment,  \n" +
                "		sm.isBlanketPO,  \n" +
                "		sm.blanketPOOption,  \n" +
                "		CASE WHEN sm.isBlanketPO=1 THEN 'Yes' ELSE 'No' END blanketPOText,  \n" +
                "		mfg.mfgName AS customer,  \n" +
                "		gctsm.gencCategoryName AS shippingMethod,  \n" +
                "		gctpm.gencCategoryName AS paymentMethod,  \n" +
                "		-- get intermediate shipment address  \n" +
                "		CASE  \n" +
                "        WHEN sm.intermediateShipmentId IS NOT NULL THEN  \n" +
                "	(  \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),  \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END),  \n" +
                "	IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),  \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),  \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))  \n" +
                "	FROM customer_addresses ca  \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "	WHERE ca.id = sm.intermediateShipmentId AND ca.isDeleted = 0  \n" +
                "	) END AS intermediateShippingAddress,  \n" +
                "  \n" +
                "        -- get shipping detils of customer  \n" +
                "        CASE  \n" +
                "        WHEN sm.shippingAddressID IS NOT NULL THEN  \n" +
                "	(  \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),  \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END),  \n" +
                "	IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),  \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),  \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))  \n" +
                "	FROM customer_addresses ca  \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "	WHERE ca.id = sm.shippingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'S'  \n" +
                "	) END AS shippingAddress,  \n" +
                "	-- get billing Address  \n" +
                "	CASE  \n" +
                "        WHEN sm.billingAddressID IS NOT NULL THEN  \n" +
                "	(  \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),  \n" +
                "	(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''),  \n" +
                "	(CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''),  \n" +
                "	(CASE WHEN ca.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',ca.email),''))  \n" +
                "	FROM customer_addresses ca  \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "	WHERE ca.id = sm.billingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'B'  \n" +
                "	)END AS billingAddress,fb.name AS fob,CONCAT(emp.firstName,' ',emp.lastName) AS salesCommissionPerson ,  \n" +
                "    '1.00' docNumber  \n" +
                "  \n" +
                "	FROM salesordermst sm  \n" +
                "	LEFT JOIN genericcategory gctsm ON (gctsm.gencCategoryID = sm.shippingMethodID AND gctsm.deletedAt IS NULL)  \n" +
                "	LEFT JOIN genericcategory gctpm ON (gctpm.gencCategoryID = sm.termsID AND gctpm.deletedAt IS NULL)  \n" +
                "	LEFT JOIN mfgcodemst mfg ON sm.customerID = mfg.id AND mfg.isDeleted = 0  \n" +
                "	LEFT JOIN freeonboardmst fb ON fb.id=sm.freeOnBoardId  \n" +
                "	LEFT JOIN employees emp ON emp.id=sm.salesCommissionTo  \n" +
                "	WHERE sm.deletedAt IS NULL AND sm.id=pid;-- (IFNULL(sm.status,0)=1 AND sm.id=pid);  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "SELECT  \n" +
                "    sd.lineID,  \n" +
                "    c.PIDCode,  \n" +
                "    sd.id AS sDetID,  \n" +
                "    (CONCAT(CASE  \n" +
                "        WHEN (c.partType = 4 OR c.iscustom=0) THEN c.mfgPN  \n" +
                "        ELSE c.custAssyPN  \n" +
                "    END)) mfgPN,  \n" +
                "    c.rev revision,  \n" +
                "    CONCAT(IFNULL(REPLACE(sd.partDescription,'  \n" +
                "','<br/>'), ''), '<br/>',  \n" +
                "            IFNULL(CONCAT(' ', ro.name), ''),  \n" +
                "            IFNULL(CONCAT(', ',  \n" +
                "                            fun_getCertificationByPartID(sd.partID)),  \n" +
                "                    ''),  \n" +
                "            IFNULL(CONCAT(', Quote#', CASE  \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber  \n" +
                "        ELSE sd.quoteNumber  \n" +
                "    END), ''),  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS description,  \n" +
                "    sd.qty,  \n" +
                "    sd.price,  \n" +
                "    sd.qty * sd.price AS extPrice,  \n" +
                "    sd.materialTentitiveDocDate,  \n" +
                "    CASE WHEN sd.materialTentitiveDocDate IS NOT NULL THEN DATE_FORMAT(sd.materialTentitiveDocDate, \"%Y\") ELSE '' END strmaterialTentitiveDocDate,  \n" +
                "    CASE  \n" +
                "        WHEN sd.partCategory = 2 THEN NULL  \n" +
                "        ELSE sd.shippingQty  \n" +
                "    END shippingQty,  \n" +
                "    ro.rohsIcon AS rohsIcon,  \n" +
                "    ro.name AS rohsStatus,  \n" +
                "   -- CONCAT(su.firstName, ' ', su.lastName) AS submittedBy,  \n" +
                "   fun_getUserNameByID(sm.updatedBy) AS submittedBy,  \n" +
                "    su.emailAddress,  \n" +
                "    sd.custPOLineNumber,  \n" +
                "    CASE  \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber  \n" +
                "        ELSE sd.quoteNumber  \n" +
                "    END quoteNumber,  \n" +
                "    sd.remark,  \n" +
                "    emp.phExtension,  \n" +
                "    fun_getUOMAbbreviationByID(sd.uom) unitMeaser ,  \n" +
                "    smb.poNumber AS blanketPONumber  \n" +
                "FROM  \n" +
                "    salesorderdet sd  \n" +
                "        JOIN  \n" +
                "    salesordermst sm ON (sd.refSalesOrderID = sm.id  \n" +
                "        AND sm.deletedAt IS NULL)  \n" +
                "        LEFT JOIN  \n" +
                "    salesorderdet sdb ON (sdb.id=sd.refBlanketPOID AND sdb.isdeleted=0)  \n" +
                "        LEFT JOIN  \n" +
                "     salesordermst smb ON (smb.id=sdb.refSalesOrderID AND smb.isdeleted=0)  \n" +
                "        JOIN  \n" +
                "    component c ON (c.id = sd.partID AND c.deletedAt IS NULL)  \n" +
                "        JOIN  \n" +
                "    rfq_rohsmst ro ON (c.RoHSStatusID = ro.id  \n" +
                "        AND ro.deletedAt IS NULL)  \n" +
                "        LEFT JOIN  \n" +
                "    users su ON su.id = sm.updatedBy  \n" +
                "        LEFT JOIN  \n" +
                "    employees emp ON emp.id = su.employeeID  \n" +
                "        LEFT JOIN  \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id  \n" +
                "        AND ra.partID = sd.partID  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id  \n" +
                "WHERE  \n" +
                "    (sm.isdeleted = 0 AND sd.isdeleted = 0)  \n" +
                "        AND sm.id = pid  \n" +
                "ORDER BY sd.partCategory DESC , sd.lineID ASC;  \n" +
                "  \n" +
                "	# get salesorder level total details  \n" +
                "    SELECT  \n" +
                "		IFNULL(SUM(sd.qty * sd.price),0) totalLinePrice,  \n" +
                "        IFNULL(SUM(IF(c.partType = 4,(sd.qty * sd.price), 0)),0) AS totalSOMiscPrice,  \n" +
                "        IFNULL(SUM(sod.totalLineMiscPrice),0) AS totalLineMiscPrice  \n" +
                "    FROM salesorderdet sd  \n" +
                "    LEFT JOIN (SELECT refSalesOrderDetID, SUM(sod.qty * sod.price) AS totalLineMiscPrice  \n" +
                "					FROM salesorder_otherexpense_details sod WHERE sod.isdeleted = 0  \n" +
                "			GROUP BY sod.refSalesOrderDetID) sod ON sod.refSalesOrderDetID = sd.id  \n" +
                "	INNER JOIN COMPONENT c ON c.id = sd.partId AND c.isDeleted = 0  \n" +
                "	WHERE sd.refsalesorderID=pid  AND sd.isdeleted =0 ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderShippingReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderShippingReportDetails`(  \n" +
                "	IN pSDetID INT(11)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	-- Get shiiping details  \n" +
                "	SELECT sh.sDetID AS sDetID,sh.shippingAddressID,  \n" +
                "	sh.qty,  \n" +
                "	CASE WHEN sh.isAgreeToShip=1 THEN sh.revisedRequestedShipDate ELSE sh.shippingDate END shippingDate,  \n" +
                "	gctsm.gencCategoryName AS shippingMethod,  \n" +
                "	CASE WHEN sh.isAgreeToShip=1 THEN sh.revisedRequestedPromisedDate ELSE sh.promisedShipDate END promisedShipDate,  \n" +
                "	sh.description,  \n" +
                "	sh.releaseNotes,  \n" +
                "	CASE WHEN sh.isAgreeToShip=1 THEN sh.revisedRequestedDockDate ELSE  sh.requestedDockDate END requestedDockDate,  \n" +
                "	IFNULL(fun_getUOMAbbreviationByID(sd.uom),'EA') uom,  \n" +
                "	sh.customerReleaseLine,  \n" +
                "	sh.poReleaseNumber,  \n" +
                "	 CASE  \n" +
                "        WHEN sh.shippingAddressID IS NOT NULL THEN  \n" +
                "	(  \n" +
                "	SELECT CONCAT(  \n" +
                "	(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "	FROM customer_addresses ca  \n" +
                "        JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "	WHERE ca.id = sh.shippingAddressID AND ca.isDeleted = 0 AND ca.addressType = 'S'  \n" +
                "	) END AS shippingAddress  \n" +
                "        FROM salesshippingmst sh  \n" +
                "        LEFT JOIN salesorderdet sd ON sd.id=sh.sDetID AND sd.isDeleted=0 AND sd.partCategory=3  \n" +
                "        LEFT JOIN genericcategory gctsm ON (gctsm.gencCategoryID = sh.shippingMethodID AND gctsm.deletedAt IS NULL)  \n" +
                "        WHERE sh.deletedAt IS NULL AND sh.sDetID = pSDetID ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPackingslipReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipReportDetails`(  \n" +
                "	IN cpid INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	SELECT  \n" +
                "    cp.id,  \n" +
                "    cp.status,  \n" +
                "    cp.packingSlipType,  \n" +
                "    cp.packingSlipNumber AS PackingSlip,  \n" +
                "    cp.packingSlipDate AS PackingSlipDate,  \n" +
                "    cp.poDate AS PODate,  \n" +
                "    cp.soNumber AS SalesOrderNumber,  \n" +
                "    cp.poNumber AS PONumber,  \n" +
                "    cp.packingSlipComment,  \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,  \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,  \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,  \n" +
                "    cp.soDate AS SODate,  \n" +
                "    cp.sorevision AS SORevision,  \n" +
                "	cp.billingAddress AS SoldToAddress,  \n" +
                "	cp.shippingAddress AS ShippingAddress,  \n" +
                "	cp.intermediateAddress AS IntermediateAddress,  \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo), '-') AS SalesOrderPersonName,  \n" +
                "	fun_getUserNameByID(cp.updatedBy) AS  preparedBy, us.emailAddress, emp.phExtension ,  \n" +
                "    cp.revision packingSlipVersion  ,  \n" +
                "    '1.00' docNumber ,  \n" +
                "    cp.systemID AS legalNumber,  \n" +
                "    sm.isBlanketPO,  \n" +
                "	CASE WHEN sm.isBlanketPO=1 THEN 'Yes' ELSE 'No' END blanketPOText  \n" +
                "FROM  \n" +
                "    customer_packingslip cp  \n" +
                "        LEFT JOIN  \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID  \n" +
                "        AND sm.isDeleted = 0  \n" +
                "        LEFT JOIN  \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId  \n" +
                "        AND gc.isDeleted = 0  \n" +
                "        AND gc.categoryType = 'Shipping Methods'  \n" +
                "        LEFT JOIN  \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = cp.termsID  \n" +
                "        AND gcc.isDeleted = 0  \n" +
                "        AND gcc.categoryType = 'Payment Terms'  \n" +
                "	LEFT JOIN users us ON us.id = cp.updatedBy  \n" +
                "	LEFT JOIN employees emp ON emp.id = us.employeeID  \n" +
                "WHERE  \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid  \n" +
                "LIMIT 1;  \n" +
                "  \n" +
                "SELECT  \n" +
                "	cpd.lineID AS PSLine,  \n" +
                "    cpd.id AS cpDetID,  \n" +
                "    ss.releaseNumber,  \n" +
                "    cpd.refCustPackingSlipID AS cpID,  \n" +
                "    cpd.partId,  \n" +
                "    IFNULL(cpd.shipQty,0) AS ShippedQty,  \n" +
                "    CASE WHEN c.partType = 4 THEN NULL ELSE  IFNULL(cpd.remainingQty,0) END AS RemainingQty,  \n" +
                "    cpd.custPOLineID AS POLine,  \n" +
                "    cpd.shippingNotes AS ShippingComment,  \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN  \n" +
                "		fun_getGenericCategoryNameByID(cpd.refChargesTypeID)  \n" +
                "		WHEN (c.iscustom = 1) THEN  \n" +
                "		c.custAssyPN  \n" +
                "		WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN  \n" +
                "		c.mfgPN  \n" +
                "		ELSE  \n" +
                "		''  \n" +
                "	END) AS PartNumber,  \n" +
                "	CASE WHEN c.partType = 4 THEN '' ELSE  FUN_GETUOMABBREVIATIONBYID(c.uom) END AS UOM,  \n" +
                "    IFNULL(c.rev, '') AS Revision,  \n" +
                "    c.partType,  \n" +
                "    CONCAT(IFNULL(REPLACE(cpd.assyDescription,'  \n" +
                "','<br/>'), ''), '<br/>',  \n" +
                "            IFNULL(CONCAT(' ', rr.name), ''),  \n" +
                "            IFNULL(CONCAT(', ',  \n" +
                "                            cpd.standrads),  \n" +
                "                    ''),  \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton,  \n" +
                "            CASE WHEN cpd.poReleaseNumber IS NOT NULL THEN CONCAT('PO Release#: ',cpd.poReleaseNumber)  WHEN  cpd.refBlanketPONumber IS NOT NULL THEN CONCAT('Ref. Blanket PO#: ',cpd.refBlanketPONumber)  \n" +
                "            ELSE '' END   refBlanketPONumber  \n" +
                "FROM  \n" +
                "    customer_packingslip_det cpd  \n" +
                "        LEFT JOIN  \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id  \n" +
                "        AND cp.isDeleted = 0  \n" +
                "        LEFT JOIN  \n" +
                "    component c ON c.id = cpd.partid  \n" +
                "        LEFT JOIN  \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID  \n" +
                "        AND sd.isDeleted = 0  \n" +
                "        LEFT JOIN  \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID  \n" +
                "    LEFT JOIN  \n" +
                "    salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id  \n" +
                "        AND ra.partID = cpd.partId  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id  \n" +
                "WHERE  \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid AND cpd.refChargesTypeID IS NULL GROUP BY  cpd.lineID;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5523,'2.00','V1',' User Story 31226: Implement Blanket PO Flow - CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5523:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-11-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report` ;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "        `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "        a.blanketPOOption,  \n" +
                "        a.blanketPOOptionText  \n" +
                "  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                `sm`.`createdAt` AS `createdDate`,  \n" +
                "                `sm`.`updatedAt` AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                IFNULL(`sq`.`ShippedQty`, 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "                sm.blanketPOOption,  \n" +
                "	        CASE WHEN sm.blanketPOOption=1 THEN 'Use Blanket PO# for All Releases' WHEN sm.blanketPOOption=2 THEN 'Link Blanket PO to Future PO(s)' WHEN sm.blanketPOOption=3 THEN 'Use Blanket PO# and Release#' ELSE '' END blanketPOOptionText  \n" +
                "        FROM  \n" +
                "            ((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refSalesOrderID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refSalesOrderID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pfilterPOStatus VARCHAR(20)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
                "       s.salesOrderNumber,  \n" +
                "       s.poNumber,  \n" +
                "       s.poDate,  \n" +
                "       s.customerID,  \n" +
                "       s.contactPersonID,  \n" +
                "       s.billingAddressID,  \n" +
                "       s.shippingAddressID,  \n" +
                "       s.shippingMethodID,  \n" +
                "       s.revision,  \n" +
                "       s.shippingComment,  \n" +
                "       s.termsID,  \n" +
                "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
                "       CASE WHEN s.blanketPOOption=1 THEN 'Use Blanket PO# for All Releases' WHEN s.blanketPOOption=2 THEN 'Link Blanket PO to Future PO(s)' WHEN s.blanketPOOption=3 THEN 'Use Blanket PO# and Release#' ELSE '' END blanketPOOptionText,  \n" +
                "       s.blanketPOOption,  \n" +
                "       s.status,  \n" +
                "       s.soDate,  \n" +
                "       s.revisionChangeNote,  \n" +
                "       s.salesCommissionTo,  \n" +
                "       s.intermediateShipmentId,  \n" +
                "       s.freeOnBoardId,  \n" +
                "       s.internalComment as internalCommentSo,  \n" +
                "       s.serialNumber,  \n" +
                "       s.carrierID,  \n" +
                "       s.carrierAccountNumber,  \n" +
                "       s.originalPODate,  \n" +
                "       s.isLegacyPO,  \n" +
                "       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
                "       s.isRmaPO,  \n" +
                "       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
                "       s.poRevision,  \n" +
                "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
                "       s.isBlanketPO,  \n" +
                "       CONCAT('(',mg.mfgCode,')',mg.mfgName) AS companyName,  \n" +
                "       mg.mfgName,  \n" +
                "       s.poRevisionDate,  \n" +
                "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
                "       fb.name freeOnBoardName,  \n" +
                "       fun_getTotalSOLines(s.id) AS totalSOLines,  \n" +
                "       fun_getTotalCompletedSOLines(s.id) AS totalCompletedSOLines,  \n" +
                "       fun_getSOCompletedPercentage(s.id) AS soCompletionPercentage,  \n" +
                "      fun_getSOCompletedSummaryStatus(s.id) AS salesOrderDetStatusConvertedValues,  \n" +
                "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
                "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
                "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
                "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
                "		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  \n" +
                "		       FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
                "			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
                "			WHERE s.isdeleted=0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "                IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "		END IF;  \n" +
                "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "		END IF;  \n" +
                "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "			IF(psearchposotype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "			IF(psearchextPricetype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "  \n" +
                "			 EXECUTE query2;  \n" +
                "			 DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "  \n" +
                "			 EXECUTE query1;  \n" +
                "		       DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				  vuss.blanketPOOption,  \n" +
                "                                vuss.blanketPOOptionText,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToreturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID  \n" +
                "					ORDER BY w.woID ASC ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5524,'2.00','V1',' User Story 31226: Implement Blanket PO Flow - CC  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5524:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-11-2021 *********************************** */
                "RENAME TABLE  `configuration` TO  `user_pref_configuration_mst`  ;  \n" +
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5525,'2.00','V1',' rename table - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5525:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAssignColorList`;  \n" +

                "CREATE PROCEDURE `Sproc_GetAssignColorList`(  \n" +
                "       pcartMfr VARCHAR(50)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		SELECT st.id,sc.ledColorValue,sc.id AS promptId,(CASE WHEN (st.messageType=102 OR st.messageType=103) THEN 1 ELSE 0 END) ispickallow,sc.ledColorCssClass,fun_getUserNameByID(st.createdBy) userName,fun_getUserNameByID(st.pickColorUserID) pickuserName ,st.transactionID,sc.ledColorName,  \n" +
                "		CASE WHEN st.messageType=101 THEN 'Check-In Request' WHEN st.messageType=102 THEN 'Search Part' WHEN st.messageType=103 THEN 'Search UMID'  \n" +
                "		ELSE 'Search Cart' END requestType,st.messageType,st.createdBy AS  userId, st.pickColorUserID AS pickUserID,  \n" +
                "		TIMESTAMPDIFF(SECOND, st.startDate,fun_DatetimetoUTCDateTime()) activityStartTime,st.requestMessage,  \n" +
                "		w.name warehouseName,w.uniqueCartID,fun_getWarehouseNameByID(w.parentWHID) parentWHName, fun_getWHPWHNameByUMID(st.reelBarCode,1) fromWareHouse,  \n" +
                "	     CASE WHEN st.messageType=101 THEN fun_getWHPWHNameByUMID(st.reelBarCode,0) ELSE fun_getWarehouseNameByID(st.refDepartmentID) END fromWareHouseParent  \n" +
                "		FROM smartcarttransaction st JOIN smartcartledcolormst sc  \n" +
                "		ON sc.id=st.smartCartLedColorID AND sc.isdeleted = 0 LEFT JOIN warehousemst w  \n" +
                "		ON w.id=st.towareHouseID AND w.isdeleted = 0  \n" +
                "		WHERE st.endDate IS NULL AND sc.cartMfr=pcartMfr  ORDER BY w.uniqueCartID ASC;  \n" +
                "  \n" +
                "  \n" +
                "		SELECT `values` FROM systemconfigrations WHERE `key`='SearchRequestTimeout';  \n" +
                "		SELECT `values` FROM systemconfigrations WHERE `key`='CheckinRequestTimeout';  \n" +
                "		SELECT `values` FROM systemconfigrations WHERE `key`='InoAutoServerHeartbeatStatus';  \n" +
                "  \n" +
                "      /* SELECT COUNT(1)unauthorizeCount,'Unauthorized Request' requestType,'Inovaxe' userName,1 isauthorizedRequest,  \n" +
                "       (SELECT ledColorCssClass FROM smartcartledcolormst WHERE isReservedColor=1 LIMIT 1) ledColorCssClass,  \n" +
                "        (SELECT ledColorName FROM smartcartledcolormst WHERE isReservedColor=1 LIMIT 1) ledColorName,  \n" +
                "        (SELECT id FROM smartcartledcolormst WHERE isReservedColor=1 LIMIT 1) promptId  \n" +
                "       FROM smartcarttransaction WHERE messagetype=1001  \n" +
                "       AND isClearRequest=0 AND deletedat IS NULL;  \n" +
                "       */  \n" +
                "        SELECT COUNT(1)unauthorizeCount,'Unauthorized Request' requestType,'Inovaxe' userName,1 isauthorizedRequest,  \n" +
                "      b.ledColorCssClass  ledColorCssClass,  \n" +
                "      b.ledColorName ledColorName,  \n" +
                "      b.id  promptId  \n" +
                "       FROM smartcarttransaction a  \n" +
                "		inner Join smartcartledcolormst  b  \n" +
                "       WHERE messagetype=1001         and isreservedcolor = 1  \n" +
                "       AND isClearRequest=0 AND a.isdeleted = 0 and b.isdeleted = 0;  \n" +
                "  \n" +
                "       SELECT COUNT(1) AS COUNT FROM warehousemst WHERE warehouseType='SMC' AND isCartOnline=0 AND isdeleted = 0;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 11-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5526,'2.00','V1',' Tune SP Sproc_GetAssignColorList - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5526:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-11-2021 *********************************** */
                "Drop procedure if exists `Sproc_GetCompanyReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCompanyReportDetails`()  \n" +
                "BEGIN  \n" +
                "	# Company detail for Report  \n" +
                "	SELECT CONCAT( IF(ci.legalName = '' OR ci.legalName is null,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'<br/>',  \n" +
                "    IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''), ', ',  \n" +
                "    IFNULL(c.countryName,''),'<br/>','Email: &nbsp;',IFNULL(ci.registeredEmail,''),'<br/>','Phone: ', IFNULL(ci.contactNumber,''),  \n" +
                "    '<br/>','Fax: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',IFNULL(ci.faxNumber,''))AS address,  \n" +
                "		ci.personName,ci.registeredEmail AS companyEmail,ci.faxNumber,ci.contactNumber AS contact,ci.phoneExt,ci.contactNumber AS phoneNo, ci.name AS  mfgName,'' AS headerName,'accounting@flextronassembly.com' AS billingEmail,  \n" +
                "		ci.ein, ci.remittanceAddress  \n" +
                "	FROM company_info ci  \n" +
                "	LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "	WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-11-2021 *********************************** */
                "Drop Procedure if Exists `Sproc_GetCheckPrintAndRemittanceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(  \n" +
                "	IN pPaymentID int  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		select pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,  \n" +
                "				pip.paymentAmount,  \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,  \n" +
                "				pip.payToAddress,  \n" +
                "				pip.billToName supplierName,  \n" +
                "                pip.billToAddress supplierAddress,  \n" +
                "                ca.email supplierEmail, ca.faxNumber supplierFaxNumber,  \n" +
                "                pip.bankAccountNo,  \n" +
                "                g.gencCategoryName paymentType  \n" +
                "		  from packingslip_invoice_payment pip  \n" +
                "          left join customer_addresses ca ON ca.customerId = pip.mfgcodeID and ca.isDeleted = 0 and ca.addressType = 'B' and ca.isDefault = 1  \n" +
                "          join genericcategory g ON g.categoryType = 'Payable Payment Method' and g.gencCategoryID = pip.paymentType  \n" +
                "		 where pip.isDeleted = 0  \n" +
                "			and pip.refPaymentMode = 'P'  \n" +
                "		   and pip.id = pPaymentID;  \n" +
                "  \n" +
                "		  SELECT pd.refPayementid id,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoNumber  \n" +
                "						ELSE  \n" +
                "							p.debitMemoNumber  \n" +
                "					END) invoiceNumber,  \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "				else  \n" +
                "					(SELECT 	ps.invoiceNumber  \n" +
                "					FROM 	packing_slip_material_receive ps  \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno  \n" +
                "							AND ps.isDeleted = 0  )  \n" +
                "				end  \n" +
                "				) refInvoiceNumber,  \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceDate  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoDate  \n" +
                "						ELSE  \n" +
                "							p.debitMemoDate  \n" +
                "					END) invoiceDate,  \n" +
                "  \n" +
                "				p.remark `description`,  \n" +
                "				/*(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,*/  \n" +
                "                pd.paymentAmount extendedPrice,  \n" +
                "				0 discount,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							'Invoice'  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							'Credit Memo'  \n" +
                "						ELSE  \n" +
                "							'Debit Memo'  \n" +
                "					END) receiptMemoType,  \n" +
                "                    p.poNumber  \n" +
                "			FROM packing_slip_material_receive p  \n" +
                "            join packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id  \n" +
                "			WHERE /*p.isDeleted =0  \n" +
                "			and*/ p.receiptType in ('I','C','D')  \n" +
                "            and exists (select 1 from packingslip_invoice_payment pip where pip.refPaymentMode = 'P' and pip.id = pd.refPayementid)  \n" +
                "			/*and p.`status` = 'P'*/  \n" +
                "			and pd.refPayementid = pPaymentID  \n" +
                "            order by invoiceDate, invoiceNumber;  \n" +
                "  \n" +
                "        	SELECT CONCAT('<b>',IF(ci.legalName = '' OR ci.legalName is null,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'</b><br/>',IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''),'<br/>',  \n" +
                "				IFNULL(c.countryName,''))AS address,  \n" +
                "				ci.personName as companyContactName,ci.registeredEmail as companyEmail,ci.faxNumber,ci.contactNumber as phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName,ci.registeredEmail as email  \n" +
                "			FROM company_info ci  \n" +
                "			LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "			WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-11-2021 *********************************** */
                "Drop Procedure if Exists `Sproc_GetCheckPrintAndRemittanceCustRefundReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceCustRefundReport`(  \n" +
                "	IN pPaymentID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		/* Refund master details */  \n" +
                "		SELECT pip.id, pip.accountReference,  \n" +
                "			pip.paymentDate, pip.paymentNumber,  \n" +
                "			pip.paymentAmount,  \n" +
                "			fun_NumberToWords(pip.paymentAmount) AS paymentAmountInWords,  \n" +
                "			pip.payToName ,   pip.payToAddress,  \n" +
                "			 pip.billToName AS customerName,  \n" +
                "			 pip.billToAddress AS customerAddress,  \n" +
                "			ca.email AS customerEmail, ca.faxNumber AS customerFaxNumber,  \n" +
                "			pip.bankAccountNo, pip.refGencTransModeID,  \n" +
                "			g.gencCategoryName AS paymentType ,  \n" +
                "			pip.remark  \n" +
                "		FROM packingslip_invoice_payment pip  \n" +
                "			LEFT JOIN customer_addresses ca ON ca.customerId = pip.mfgcodeID AND ca.isDeleted = 0 AND ca.addressType = 'B' AND ca.isDefault = 1  \n" +
                "			JOIN genericcategory g ON g.categoryType = 'Payable Payment Method' AND g.gencCategoryID = pip.paymentType  \n" +
                "		WHERE pip.id = pPaymentID  \n" +
                "		AND pip.refPaymentMode = 'CR'  \n" +
                "		AND pip.isDeleted = 0  ;  \n" +
                "  \n" +
                "		/* get refunded payment or refunded credit memo details */  \n" +
                "		SELECT  \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoNumber  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumber  \n" +
                "				ELSE NULL END) AS paymentCMNumber ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoDate  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentDate  \n" +
                "				ELSE NULL END) AS paymentCMDate ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.paymentAmount  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentAmount  \n" +
                "				ELSE NULL END) AS refundedAmountForPaymentCM ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.comment  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.comment  \n" +
                "				ELSE NULL END) AS commentForPaymentCM  \n" +
                "  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount, psipd.comment, psipt.paymentNumber, psipt.paymentDate  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0 AND psipt.isPaymentVoided = 0  \n" +
                "					WHERE psipd.refPayementid = pPaymentID  \n" +
                "					AND psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					 ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount ,psipd.comment, cps.creditMemoNumber, cps.creditMemoDate  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refPayementid = pPaymentID  \n" +
                "					AND psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		WHERE psip.id = pPaymentID  \n" +
                "		AND psip.refPaymentMode = 'CR'  \n" +
                "		AND psip.isDeleted = 0  ;  \n" +
                "		/* Default set company (isCompany = 1) address details  */  \n" +
                "			SELECT CONCAT('<b>', IF(ci.legalName = '' OR ci.legalName is null,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'</b><br/>',IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''),'<br/>',  \n" +
                "				IFNULL(c.countryName,''))AS address,  \n" +
                "				ci.personName as companyContactName,ci.registeredEmail as companyEmail,ci.faxNumber,ci.contactNumber as phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail as email  \n" +
                "			FROM company_info ci  \n" +
                "			LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "			WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-11-2021 *********************************** */
                "Drop Procedure if Exists `Sproc_GetLaborComparisonActualvsEstimatedReportDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetLaborComparisonActualvsEstimatedReportDetail`(  \n" +
                "IN pAssyID int(11),  \n" +
                "IN pEmployeeID int(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE tRfqAssyID int(1);  \n" +
                "select id into tRfqAssyID from rfq_assemblies where partid = pAssyID and isdeleted = 0 and status = 3  \n" +
                "order by quoteSubmitDate desc limit 1;  \n" +
                "if tRfqAssyID is null then  \n" +
                "select id into tRfqAssyID from rfq_assemblies where partid = pAssyID and isdeleted = 0 and status = 2 order by quoteSubmitDate desc limit 1;  \n" +
                "end if;  \n" +
                "		select fun_getAssyNameByID(partID) assembly, partID,  \n" +
                "        (case when mountingTypeID is not null then fun_getMountingTypeNameByID(mountingTypeID) else fun_getAssyNameByID(subAssyID) end) as mountingtype,  \n" +
                "		(case when mountingTypeID is not null then mountingTypeID else subAssyID end) as mountingTypeID,  \n" +
                "		CAST((perAssyPrice + overHeadAssyPrice) AS DECIMAL(12,5)) perAssyPrice ,  \n" +
                "        CAST(((perAssyPrice + overHeadAssyPrice) * requestQty) AS DECIMAL(12,2)) as totalCost,  \n" +
                "        0 costType,requestQty as Qty, subAssyID as sid  \n" +
                "		from rfq_assy_qtywise_bom_laborcosting_detail rbl  \n" +
                "		join rfq_assy_labor_bom_mountingtype_qpa_detail rlm on rlm.id = rfqAssyBOMMountingID  \n" +
                "		join rfq_assy_quantity raq on raq.id = rbl.rfqAssyQtyID and raq.isdeleted = 0  \n" +
                "		where rbl.isdeleted = 0 and partid = pAssyID  \n" +
                "		and rlm.rfqAssyID = tRfqAssyID  \n" +
                "		and rbl.rfqAssyQtyID = (case when (select count(1) from rfq_assy_quantity where rfqAssyID = tRfqAssyID and isDeleted = 0 and requestQty <= (select max(buildQty) from workorder where partID = pAssyID and isDeleted = 0)) > 0  \n" +
                "        then  \n" +
                "			(select id from rfq_assy_quantity where rfqAssyID = tRfqAssyID and isDeleted = 0 and requestQty <= (select max(buildQty) from workorder where partID = pAssyID and isDeleted = 0) order by requestQty desc limit 1)  \n" +
                "		else  \n" +
                "			(select id from rfq_assy_quantity where rfqAssyID = tRfqAssyID and isDeleted = 0 and requestQty >= (select max(buildQty) from workorder where partID = pAssyID and isDeleted = 0) order by requestQty asc limit 1)  \n" +
                "		end)  \n" +
                "		union  \n" +
                "		select fun_getWorkorderNumberByID(woId) assembly, woId,fun_getMountingTypeNameByID(mountingTypeID) as mountingtype,  \n" +
                "		mountingTypeID, sum(CAST(perAssytotalcost AS DECIMAL(12,5))) perAssytotalcostAS, sum(CAST((perAssytotalcost * woQty)AS DECIMAL(12,2))) totalcost,  \n" +
                "        1 costType, woQty as Qty,null as sid  \n" +
                "		from (  \n" +
                "		select wte.woid,wte.woOPID,wte.employeeID, woop.mountingTypeID,  \n" +
                "		wte.burdenRate,wte.paymentMode, (wo.buildQty) woQty,  \n" +
                "		(sum((case when wte.paymentMode = #'Exempt' then  \n" +
                "		'Non-exempt' then  \n" +
                "		((wte.burdenRate) * (((wte.productionTime)/60)/60))  \n" +
                "		else  \n" +
                "		((wte.burdenRate/(52*5*8))* (((wte.productionTime)/60)/60))  \n" +
                "		end))/wo.buildQty) perAssytotalcost,  \n" +
                "		((wte.productionTime)/60)/60 totalhr,  \n" +
                "		wte.productionTime,  \n" +
                "		wte.totalTime,  \n" +
                "		wte.woTransID,wt.issueQty,wtp.totalQty,wtp.passQty,wtp.reprocessQty,wtp.observedQty,wtp.reworkQty,wo.woID as parentWO  \n" +
                "		from workorder_trans_empinout wte  \n" +
                "		left join workorder wo on wo.woid = wte.woid and wo.isDeleted = 0  \n" +
                "		left join workorder_operation woop on woop.woopid = wte.woopid and woop.isDeleted = 0  \n" +
                "		join workorder_trans wt on wt.woTransID =  wte.woTransID and wt.isDeleted = 0  \n" +
                "		join workorder_trans_production wtp on wtp.woTransID = wt.woTransID and wtp.isDeleted = 0  \n" +
                "		where wo.partID = pAssyID  \n" +
                "		group by wte.woid,wte.employeeid,#wte.woopid  \n" +
                "		woop.mountingTypeID  \n" +
                "		union  \n" +
                "		select wte.woid,wte.woOPID,wte.employeeID, woop.mountingTypeID,  \n" +
                "		wte.burdenRate,wte.paymentMode, ((select buildQty from workorder where woid = wamd.parentWOID)*  \n" +
                "		(select qpa from kit_allocation_lineitems_alternatepart kala  \n" +
                "		left join kit_allocation_lineitems kal on kal.id = kala.refKitAllocationLineItemId and kal.isdeleted = 0  \n" +
                "		left join workorder woi on woi.partID = kala.partID  \n" +
                "		where kala.mfgPNID = wo.partID and  \n" +
                "		kala.refSalesOrderDetID in (select salesOrderDetailID from workorder_salesorder_details where woid = wamd.parentWOID and isdeleted = 0)  \n" +
                "		and kala.isDeleted = 0)) woQty,  \n" +
                "		(sum((case when wte.paymentMode = #'Exempt' then  \n" +
                "		'Non-exempt' then  \n" +
                "		(((wte.burdenRate) * (((wte.productionTime)/60)/60) ))  \n" +
                "		else  \n" +
                "		((wte.burdenRate/(52*5*8))* (((wte.productionTime)/60)/60))  \n" +
                "		end)))perAssytotalcost,  \n" +
                "		((wte.productionTime)/60)/60 totalhr,  \n" +
                "		wte.productionTime,  \n" +
                "		wte.totalTime,  \n" +
                "		wte.woTransID,wt.issueQty,wtp.totalQty,wtp.passQty,wtp.reprocessQty,wtp.observedQty,wtp.reworkQty,wo.woID as parentWO  \n" +
                "		from workorder_trans_empinout wte  \n" +
                "		left join workorder wo on wo.woid = wte.woid and wo.isDeleted = 0  \n" +
                "		left join workorder_operation woop on woop.woopid = wte.woopid and woop.isDeleted = 0  \n" +
                "		join workorder_trans wt on wt.woTransID =  wte.woTransID and wt.isDeleted = 0  \n" +
                "		join workorder_trans_production wtp on wtp.woTransID = wt.woTransID and wtp.isDeleted = 0  \n" +
                "		left join workorder_main_assembly_mapping_details wamd on wamd.refWOID = wo.woid and wamd.isDeleted = 0  \n" +
                "		where wamd.parentWOID in (select woid from workorder where partid = pAssyID and isdeleted = 0)  \n" +
                "		group by wte.woid,wte.employeeid,#wte.woopid  \n" +
                "		woop.mountingTypeID  \n" +
                "		)a  \n" +
                "        group by a.mountingTypeID,a.woid;  \n" +
                "  \n" +
                "		SELECT CONCAT(IFNULL(ci.street1, ', '),', ',IFNULL(ci.city,', '),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode,''))AS address,  \n" +
                "			fun_getUserNameByEmployeID(pEmployeeID) employeeName,  \n" +
                "			ci.personName as companyContactName,ci.registeredEmail as companyEmail,ci.faxNumber,ci.contactNumber as phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail as email  \n" +
                "		FROM company_info ci  \n" +
                "		LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "		WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-11-2021 *********************************** */
                "Drop Procedure if Exists `Sproc_GetManufacturerList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturerList`(  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pEmployeeID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "       DECLARE vTimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	(  \n" +
                "			SELECT 		mfgm.mfgCode,  \n" +
                "					mfgm.mfgName,  \n" +
                "                   	fun_ApplyCommonDateTimeFormatByParaValue(mfgm.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt ,  \n" +
                "					fun_getUserNameByID(mfgm.createdBy) createdBy,  \n" +
                "					mfgc.alias,  \n" +
                "                   	fun_ApplyCommonDateTimeFormatByParaValue(mfgc.createdAt,vTimeZone,vDateTimeDisplayFormat) aliasCreatedAt ,  \n" +
                "					fun_getUserNameByID(mfgc.createdBy) aliasCreatedBy  \n" +
                "			FROM 		mfgcodemst mfgm  \n" +
                "			 JOIN 	mfgcodealias mfgc ON mfgm.id = mfgc.mfgcodeID AND mfgc.isDeleted = 0  \n" +
                "			WHERE 		mfgm.isdeleted = 0  \n" +
                "						AND mfgm.mfgType='MFG'  \n" +
                "                        AND STR_TO_DATE(fun_ApplyCommonDateTimeFormatByParaValue(mfgc.createdAt,vTimeZone,vDateTimeDisplayFormat),vDateTimeDisplayFormat)  BETWEEN pFromDate AND pToDate  \n" +
                "	) a  \n" +
                "	ORDER BY aliasCreatedAt DESC;  \n" +
                "  \n" +
                "	SELECT CONCAT(IFNULL(ci.street1, ', '),', ',IFNULL(ci.city,', '),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode,''))AS address,  \n" +
                "		fun_getUserNameByEmployeID(pEmployeeID) employeeName,  \n" +
                "		ci.personName as companyContactName,ci.registeredEmail as companyEmail,ci.faxNumber,ci.contactNumber as phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail as email  \n" +
                "	FROM company_info ci  \n" +
                "	LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "	WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-11-2021 *********************************** */
                "Drop Procedure if Exists `Sproc_GetObsoletePartDetailReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetObsoletePartDetailReport`(  \n" +
                "	IN pCustomerID text(11),  \n" +
                "    IN pWhereClause TEXT,  \n" +
                "    IN pWithAlternateParts TINYINT(1),  \n" +
                "    In pAssyId text  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE SQLStatement TEXT;  \n" +
                "if pAssyId is null or pAssyId =\"\"  then  \n" +
                "	set @assyIdCondition = \"1 = 1\";  \n" +
                "else  \n" +
                "	set @assyIdCondition = concat(\" id in (\",pAssyId,\")\");  \n" +
                "end if;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "		SET SQLStatement  = CONCAT(\"  \n" +
                "		Create temporary table if not exists Results as  \n" +
                "		SELECT * FROM  \n" +
                "	(SELECT * FROM  \n" +
                "		(  \n" +
                "			 SELECT id , (select mfgName from mfgcodemst where id = mfgCodeId) Customer, mfgcodeID as customerID ,mfgPN as AssyPN,rev as AssyRev,RoHSStatusID FROM component  \n" +
                "			 WHERE \", @assyIdCondition,\" and category = 3 AND isdeleted = 0 and  \n" +
                "			 partStatus IN ( SELECT id FROM component_partstatusmst WHERE `name`='Active')  \n" +
                "		 ) a,  \n" +
                "		 (  \n" +
                "			 SELECT a.id as lineitemid,b.id as rfqalternatePartID,a.partID, trim(a.Lineid)+0 Lineid, a.CustPN CPN,a.CustomerRev CPNRev,a.QPA, (select mfgName from mfgcodemst where id = b.mfgCodeID) mfgName,  \n" +
                "			 b.mfgCode,b.mfgCodeID,b.MFgPN,b.mfgPNId,c.eolDate EOLDate,c.ltbdate LTBDate,  \n" +
                "			 (SELECT `name` FROM component_partstatusmst WHERE id=c.partStatus)PartStatus , c.rohsgroupID,  \n" +
                "			 c.price as TentativePrice, fun_getRoHSIconByPartID(b.mfgPNId) rohsImage,  \n" +
                "			 c.updatedAt as modifiedAt  \n" +
                "			 FROM rfq_lineitems a, rfq_lineitems_alternatepart b ,component c  \n" +
                "			 WHERE a.id = b.rfqlineitemsId AND b.mfgpnid =c.id AND a.isdeleted =0 AND b.isdeleted = 0  \n" +
                "             and not exists (select 1 from component_partstatusmst cp where cp.id = c.partStatus and cp.name='TBD')  \n" +
                "			 and (case when \",pWithAlternateParts,\" = 1 then  1=1 else ( exists (SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`!='Active' and deletedAT IS NULL  and id = c.partStatus))  \n" +
                "					end)  \n" +
                "			 AND a.partid IN  \n" +
                "			 (  \n" +
                "				SELECT id FROM component c WHERE c.category = 3 AND c.deletedAT IS NULL  \n" +
                "				AND exists  \n" +
                "				(  \n" +
                "					SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`='Active' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "				)  \n" +
                "			 )  \n" +
                "			 AND EXISTS  \n" +
                "			 (  \n" +
                "				SELECT rfqlineitemsid FROM rfq_lineitems_alternatepart dp  \n" +
                "				WHERE dp.rfqlineitemsid = a.id and dp.deletedAT IS NULL  \n" +
                "				AND EXISTS  \n" +
                "				(  \n" +
                "					SELECT 1 FROM component c WHERE c.id = dp.mfgPnID and c.deletedAT IS NULL AND exists  \n" +
                "					(  \n" +
                "						SELECT 1 FROM component_partstatusmst  \n" +
                "						WHERE `name` != 'Active' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "					)  \n" +
                "				)  \n" +
                "			  )  \n" +
                "		 ) b  \n" +
                "         WHERE a.id =b.partID  \n" +
                "         )t  \n" +
                "  \n" +
                "            where 1=1 \");  \n" +
                "		IF pCustomerID != '' THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(SQLStatement,' and customerID in (',pCustomerID,')');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = SQLStatement;  \n" +
                "		END IF;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	IF(pWhereClause != '') THEN  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from Results  where ', pWhereClause);  \n" +
                "	else  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from Results');  \n" +
                "	end if;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SELECT CONCAT(IFNULL(ci.street1, ', '),', ',IFNULL(ci.city,', '),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode,''))AS address,  \n" +
                "		ci.personName as companyContactName,ci.registeredEmail as companyEmail,ci.faxNumber,ci.contactNumber as phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail as email  \n" +
                "	FROM company_info ci  \n" +
                "	LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "	WHERE ci.isDeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-11-2021 *********************************** */
                "Drop Procedure if Exists `Sproc_GetObsoletePartDetailForCompanyReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetObsoletePartDetailForCompanyReport`(  \n" +
                "	IN pCustomerID text(11),  \n" +
                "    IN pWhereClause TEXT,  \n" +
                "    IN pWithAlternateParts TINYINT(1),  \n" +
                "    IN pFromDate DATE,  \n" +
                "    IN pToDate DATE  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE SQLStatement TEXT;  \n" +
                "		IF(pFromDate IS NULL OR pToDate IS NULL) THEN  \n" +
                "			SET @dateRangeStatement = ' 1=1 ';  \n" +
                "		ELSe  \n" +
                "            SET @dateRangeStatement = concat(\" c.obsoletedate between '\",pFromDate,\"' and '\",pToDate,\"' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS ObsoletePartsForCompany;  \n" +
                "		SET SQLStatement  = CONCAT(\"  \n" +
                "		Create temporary table if not exists ObsoletePartsForCompany as  \n" +
                "		SELECT * FROM  \n" +
                "		 (  \n" +
                "			 SELECT id, (select mfgName from mfgcodemst where id = mfgCodeId) Customer, mfgcodeID as customerID ,mfgPN as AssyPN,rev as AssyRev,RoHSStatusID FROM component  \n" +
                "			 WHERE category = 3 AND deletedAT IS NULL and  \n" +
                "			 partStatus IN ( SELECT id FROM component_partstatusmst WHERE `name`='Active')  \n" +
                "		 ) a,  \n" +
                "		 (  \n" +
                "			 SELECT a.partid, trim(a.Lineid)+0 Lineid, a.CustPN CPN,a.CustomerRev CPNRev,a.QPA, (select mfgName from mfgcodemst where id = b.mfgCodeID) mfgName,  \n" +
                "			 b.mfgCode,b.mfgCodeID,b.MFgPN,b.mfgPNId,c.eolDate EOLDate,c.ltbdate LTBDate,  \n" +
                "			 (SELECT `name` FROM component_partstatusmst WHERE id=c.partStatus)PartStatus ,  \n" +
                "			 c.price as TentativePrice, (select mfgName from mfgcodemst where id = (select mfgCodeID from component where id = ( SELECT componentID FROM component_alternatepn WHERE refComponentID = b.mfgPNid and isDeleted = 0 order by componentID asc LIMIT 1))) alternatePartMFG,  \n" +
                "			 (select mfgPN from component where id = (SELECT componentID FROM component_alternatepn WHERE refComponentID = b.mfgPNid and isDeleted = 0 order by componentID asc  LIMIT 1)) alternatePart,  \n" +
                "			 c.updatedAt as modifiedAt,  \n" +
                "             c.obsoleteDate  \n" +
                "			 FROM rfq_lineitems a, rfq_lineitems_alternatepart b ,component c  \n" +
                "			 WHERE a.id = b.rfqlineitemsId AND b.mfgpnid =c.id AND a.deletedAt IS NULL AND b.deletedAT IS NULL  \n" +
                "             and not exists (select 1 from component_partstatusmst cp where cp.id = c.partStatus and cp.name='TBD')  \n" +
                "			 and (case when \",pWithAlternateParts,\" = 1 then  1=1 else ( exists (SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`='Obsolete' and deletedAT IS NULL  and id = c.partStatus))  \n" +
                "					end)  \n" +
                "			 AND a.partid IN  \n" +
                "			 (  \n" +
                "				SELECT id FROM component c WHERE c.category = 3 AND c.deletedAT IS NULL  \n" +
                "				AND exists  \n" +
                "				(  \n" +
                "					SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`='Active' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "				)  \n" +
                "			 )  \n" +
                "			 AND EXISTS  \n" +
                "			 (  \n" +
                "				SELECT rfqlineitemsid FROM rfq_lineitems_alternatepart dp  \n" +
                "				WHERE dp.rfqlineitemsid = a.id and dp.deletedAT IS NULL  \n" +
                "				AND EXISTS  \n" +
                "				(  \n" +
                "					SELECT 1 FROM component c WHERE c.id = dp.mfgPnID and c.deletedAT IS NULL AND exists  \n" +
                "					(  \n" +
                "						SELECT 1 FROM component_partstatusmst  \n" +
                "						WHERE `name` = 'Obsolete' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "					)  \n" +
                "                    and \",@dateRangeStatement ,\"  \n" +
                "				)  \n" +
                "			  )  \n" +
                "		 ) b  \n" +
                "		 WHERE a.id =b.partid\");  \n" +
                "		IF pCustomerID != '' THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(SQLStatement,' and customerID in (',pCustomerID,')');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = SQLStatement;  \n" +
                "		END IF;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	IF(pWhereClause != '') THEN  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from ObsoletePartsForCompany  where ', pWhereClause);  \n" +
                "	else  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from ObsoletePartsForCompany');  \n" +
                "	end if;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  	SELECT CONCAT(IFNULL(ci.street1, ', '),', ',IFNULL(ci.city,', '),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode,''))AS address,  \n" +
                "		ci.personName as companyContactName,ci.registeredEmail as companyEmail,ci.faxNumber,ci.contactNumber as phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail as email  \n" +
                "	FROM company_info ci  \n" +
                "	LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "	WHERE ci.isDeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-11-2021 *********************************** */
                "Drop Procedure if Exists `Sproc_getPartnerPrtformanceReportDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_getPartnerPrtformanceReportDetail`(  \n" +
                "	IN pSupplierIDs LONGTEXT,  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN pEmployeeID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE SQLStatement TEXT;  \n" +
                "	IF(pSupplierIDs != '') THEN  \n" +
                "		SET @supplierID = CONCAT(\"a.mfgCodeID in (\",pSupplierIDs,\")\");  \n" +
                "	ELSE  \n" +
                "		SET @supplierID = \"1=1\";  \n" +
                "	END IF;  \n" +
                "	SET SQLStatement  = CONCAT(\"  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_getPartnerPrtformanceReportDetail as  \n" +
                "		SELECT 	ReceiptMonthYear,  \n" +
                "			Supplier,  \n" +
                "			SUM(NoOfReceivedLine) NoOfReceivedLine,  \n" +
                "			SUM(NoOfDisputeLine) NoOfDisputeLine,  \n" +
                "			ROUND((sum(NoOfDisputeLine)/sum(NoOfReceivedLine))*100,2) As LinewiseDisputeRatio,  \n" +
                "			#ROUND(((((sum(NoOfDisputeLine)/sum(NoOfReceivedLine))*100)/100)*50),2) As QualityGrade,  \n" +
                "			ROUND(50-Round(((((sum(NoOfDisputeLine)/sum(NoOfReceivedLine))*100)/100)*50),2),2) As QualityGrade,  \n" +
                "			SUM(TotalQtyReceived) TotalPartReceived,  \n" +
                "			0 as TotalOnTimePartReceived,  \n" +
                "			ROUND((0/sum(TotalQtyReceived))*100,2) PartsOnTimeRatio,  \n" +
                "			ROUND((((0/sum(TotalQtyReceived))*100/100)*50),2) as DiliveryGrade  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		DATE_FORMAT(receiptDate,'%Y%m')receiptmonth,  \n" +
                "						a.receiptDate As ReceiptDate,  \n" +
                "						fun_getMfgCodeByID(a.mfgCodeID) Supplier,  \n" +
                "						Date_format(a.receiptDate ,'%b %Y') As ReceiptMonthYear,  \n" +
                "						b.NumberofReceivedLine As NoOfReceivedLine,  \n" +
                "						b.DisputeLine As NoOfDisputeLine,  \n" +
                "						b.WaitingForInvoiceLine As NoOfLineWaitingForInvoice,  \n" +
                "						b.TotalReceivedQty As TotalQtyReceived,  \n" +
                "						b.DisputeLineQty As DisputeLineQty  \n" +
                "				FROM 		packing_slip_material_receive a  \n" +
                "				LEFT JOIN 	(  \n" +
                "								SELECT 		refPackingSlipMaterialRecID,  \n" +
                "										COUNT(1) NumberofReceivedLine,  \n" +
                "										SUM(  \n" +
                "											CASE  \n" +
                "												WHEN 	Status = 'A' AND RefCreditDebitInvoiceNo IS NOT NULL THEN  \n" +
                "													1  \n" +
                "												WHEN 	Status = 'D' THEN  \n" +
                "													1  \n" +
                "												ELSE 	0  \n" +
                "											END)  DisputeLine,  \n" +
                "										SUM(  \n" +
                "											CASE  \n" +
                "												WHEN 	Status ='P' THEN  \n" +
                "													1  \n" +
                "												ELSE 	0  \n" +
                "											END  \n" +
                "										) waitingForInvoiceLine,  \n" +
                "										SUM(receivedQty) TotalReceivedQty,  \n" +
                "										SUM(  \n" +
                "											CASE  \n" +
                "												WHEN Status = 'A' AND RefCreditDebitInvoiceNo IS NOT NULL THEN  \n" +
                "													receivedQty  \n" +
                "												WHEN Status = 'D' THEN  \n" +
                "													receivedQty  \n" +
                "												ELSE  \n" +
                "													0  \n" +
                "											END  \n" +
                "										)  DisputeLineQty  \n" +
                "								FROM 		packing_slip_material_receive_det  \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) b on a.id = b.refPackingSlipMaterialRecID  \n" +
                "				WHERE \",@supplierID,\"  \n" +
                "						AND  receiptType ='I'  \n" +
                "						AND a.receiptDate is not null  \n" +
                "						AND DATE(a.receiptDate)>=IFNULL(DATE('\",pfromDate,\"'),DATE(a.receiptDate))  \n" +
                "						AND DATE(a.receiptDate)<=IFNULL(DATE('\",ptoDate,\"'),DATE(a.receiptDate))  \n" +
                "						AND deletedAt IS NULL  \n" +
                "				ORDER BY 	a.receiptDate  \n" +
                "			) AS A  \n" +
                "		GROUP BY ReceiptMonthYear,Supplier  \n" +
                "		ORDER BY receiptmonth,Supplier  \n" +
                "	\");  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_getPartnerPrtformanceReportDetail;  \n" +
                "	SET @SQLStatement1 = SQLStatement;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT('SELECT * from temp_Sproc_getPartnerPrtformanceReportDetail');  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SELECT CONCAT(IFNULL(ci.street1, ', '),', ',IFNULL(ci.city,', '),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode,''))AS address,  \n" +
                "		fun_getUserNameByEmployeID(pEmployeeID) employeeName,  \n" +
                "		ci.personName as companyContactName,ci.registeredEmail as companyEmail,ci.faxNumber,ci.contactNumber as phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail as email  \n" +
                "	FROM company_info ci  \n" +
                "	LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "	WHERE ci.isDeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-11-2021 *********************************** */
                "Drop Procedure if Exists `Sproc_GetQuoteSummaryDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails`(  \n" +
                "	IN prfqAssyID INT,  \n" +
                "    IN pAssyQuoteSubmittedID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "  DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "		# select list for quote summary details of last submitted quote  \n" +
                "			SELECT unitPrice, qty, turnTime,priceGroup,  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN CEILING(7*(turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "            WHEN qo.turnType = 'D' THEN turntime  \n" +
                "            WHEN qo.turnType = 'W' THEN (turntime*7) END) turntimedays,  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN 'Business Days'  \n" +
                "            WHEN qo.turnType = 'D' THEN 'Week Days'  \n" +
                "            WHEN qo.turnType = 'W' THEN 'Week' END) turnType,  \n" +
                "            qo.excessMaterialCost, qo.extendedCost, (qo.nreCost + qo.toolingCost) nreCost ,(qo.nreDays + qo.toolingDays) nreDays, qo.nretoolingdescription,  \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime,  qo.allCost, qo.allDays  \n" +
                "			FROM rfq_assy_quote_submitted_assydetail qo  \n" +
                "			JOIN rfq_assemblies_quotation_submitted sb ON sb.id = qo.refSubmittedQuoteID  \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            ORDER BY qo.rfqPriceGroupId,qo.qty, qo.turnTime;  \n" +
                "  \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy  \n" +
                "			SELECT ra.id rfqAssyID, ra.partID, rf.id quoteID, part.PIDCode , part.isCustom , part.nickName, part.liveInternalVersion, part.mfgPNDescription, part.mfgPN, part.rev,part.assyCode,  \n" +
                "            part.custAssyPN, cu.mfgName,cu.mfgCode,rf.customerid,rqs.custBillingAddressID, IFNULL(rqs.custTermsID, cu.custTermsID) AS custTermsID, rqs.custShippingAddressID,  \n" +
                "            (CASE WHEN rqs.quoteNumber IS NOT NULL THEN IFNULL(rqs.BOMIssues,'')  \n" +
                "            WHEN rqs.quoteNumber IS NULL THEN IFNULL(fun_getQuoteSubjectToFollowing(ra.id),'') END) AS BOMIssues,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN  \n" +
                "                    (  \n" +
                "						SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)  \n" +
                "					)  \n" +
                "                    ELSE  \n" +
                "                    (  \n" +
                "                    	SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID  \n" +
                "                    )  \n" +
                "                    END  \n" +
                "				)  \n" +
                "			)paymentTerm,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN  \n" +
                "                    (  \n" +
                "						SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)  \n" +
                "					)  \n" +
                "                    ELSE  \n" +
                "                    (  \n" +
                "                    	SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID  \n" +
                "                    )  \n" +
                "                    END  \n" +
                "				)  \n" +
                "			)termDays,  \n" +
                "            rqs.bomInternalVersion, rqs.quoteSubmitDate, rqs.quoteNumber, rqs.id quoteSubmittedID, ra.assyNote,  \n" +
                "            fun_getTextAngularData(ra.additionalRequirement, vTextAngularKeyCode) additionalRequirement ,  \n" +
                "            rf.quoteNote, rt.name RFQType, jt.name JobType, rat.name AssyType,  \n" +
                "            fun_getTextAngularData(rqs.OtherNotes, vTextAngularKeyCode) OtherNotes,  \n" +
                "            ra.isSummaryComplete, ra.isReadyForPricing, CONCAT(su.firstName,' ',su.lastName) `submittedBy`, su.emailAddress,  \n" +
                "            ra.quoteFinalStatus, ra.isCustomPartDetShowInReport,  \n" +
                "            fun_getTextAngularData(rqs.promotions, vTextAngularKeyCode) promotions,  \n" +
                "            ra.assyNote,    part.RoHSStatusID, ro.name AS rohsComplientConvertedValue, ro.rohsIcon AS rohsIconPath,  \n" +
                "            ro.rohsIcon AS rohsIcon,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN  \n" +
                "					(  \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "						FROM customer_addresses ca  \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "						WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'B'  \n" +
                "					)  \n" +
                "					ELSE  \n" +
                "					(  \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "						FROM customer_addresses ca  \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "						WHERE id = rqs.custBillingAddressID  \n" +
                "					)  \n" +
                "					END  \n" +
                "				)  \n" +
                "			) billingAddress,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN  \n" +
                "						(  \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "							FROM customer_addresses ca  \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "							WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'S'  \n" +
                "						)  \n" +
                "					ELSE  \n" +
                "						(  \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "							FROM customer_addresses ca  \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "							WHERE id = rqs.custShippingAddressID  \n" +
                "						)  \n" +
                "					END  \n" +
                "                )  \n" +
                "			) shippingAddress,  \n" +
                "            (  \n" +
                "				(  \n" +
                "				CASE WHEN ra.isSummaryComplete = 1 THEN  \n" +
                "					(  \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards  \n" +
                "						FROM rfq_assy_standard_class_detail csd  \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0  \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0  \n" +
                "						WHERE csd.refSubmittedQuoteID = rqs.id  \n" +
                "					)  \n" +
                "					ELSE  \n" +
                "					(  \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards  \n" +
                "						FROM component_standard_details  csd  \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0  \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0  \n" +
                "						WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = ra.id)  \n" +
                "					)  \n" +
                "                END  \n" +
                "				)  \n" +
                "			) standards,  \n" +
                "            (  \n" +
                "				(  \n" +
                "				CASE WHEN ra.isSummaryComplete = 0 AND (SELECT MAX(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyId = ra.id) = rqs.id THEN  \n" +
                "					(  \n" +
                "						(SELECT GROUP_CONCAT(dataelement SEPARATOR '<br/>') dataelementdata FROM (  \n" +
                "						SELECT CONCAT((CASE WHEN subFormName ='' THEN '' ELSE CONCAT('<b>',subFormName,'</b><br/>') END), GROUP_CONCAT(dataelement SEPARATOR '<br/>')) dataelement  \n" +
                "						FROM (SELECT (CASE WHEN refSubFormTransID IS NOT NULL THEN fun_getDataElementSubFormNameByID(refSubFormTransID) ELSE '' END) subFormName,  \n" +
                "						CONCAT(fun_getDataElementNameByID(dataElementID),': ',`value`) dataelement  \n" +
                "						FROM dataelement_transactionvalues WHERE entityID = -12 AND isDeleted = 0 AND refTransID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = ra.id)  \n" +
                "						)dataelementForms  \n" +
                "						GROUP BY subFormName  \n" +
                "						)a)  \n" +
                "					)  \n" +
                "					ELSE  \n" +
                "					(  \n" +
                "						   rqs.RFQMISCData  \n" +
                "					)  \n" +
                "                END  \n" +
                "				)  \n" +
                "			) dataelementdata,  \n" +
                "            (SELECT COUNT(1) > 0 FROM rfq_assemblies_quotation_submitted WHERE id>rqs.id AND rfqAssyID = ra.id AND isDeleted = 0) isQuoteHistory,  \n" +
                "            (CASE WHEN ra.status = 1 THEN 'In Progress'  \n" +
                "			  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'  \n" +
                "			  WHEN ra.status = 3 THEN 'Won'  \n" +
                "			  WHEN ra.status = 4 THEN 'Lost'  \n" +
                "              WHEN ra.status = 5 THEN 'Canceled' END) `status` ,  \n" +
                "			ra.status rfq_statusID,  \n" +
                "            ra.winPrice, ra.isActivityStart,  \n" +
                "            TIMESTAMPDIFF(SECOND, ra.activityStartAt,fun_DatetimetoUTCDateTime()) activityStartAt, fun_getEmpployeeNameByUserID(ra.activityStartBy) userName,  \n" +
                "            ra.winQuantity,ra.activityStartBy,  \n" +
                "            fun_getTextAngularData(ra.reason,vTextAngularKeyCode) reason  \n" +
                "            FROM rfq_assemblies ra  \n" +
                "            JOIN rfq_assemblies_quotation_submitted rqs ON rqs.rfqAssyID = ra.id  \n" +
                "			JOIN rfqforms rf ON rf.id = ra.rfqrefID AND rf.isDeleted = 0  \n" +
                "            JOIN rfqtype rt ON rt.id = ra.rfqTypeID AND rt.isDeleted = 0  \n" +
                "            JOIN jobtype jt ON jt.id = ra.jobTypeID AND jt.isDeleted = 0  \n" +
                "            JOIN rfq_assy_typemst rat ON rat.id = ra.assemblyTypeID AND rat.isDeleted = 0  \n" +
                "			JOIN mfgcodemst cu ON cu.id = rf.customerid AND cu.isDeleted = 0  \n" +
                "			JOIN component part ON part.id = ra.partID AND part.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_rohsmst ro ON ro.id = part.RoHSStatusID  \n" +
                "            LEFT JOIN users su ON su.id = ra.quoteSubmittedBy  \n" +
                "			WHERE ra.id= prfqAssyID AND rqs.id = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "  \n" +
                "        # select list of submitted quote summary  \n" +
                "			SELECT bomInternalVersion,BOMIssues, bomLastVersion, createByRoleId, createdAt, createdBy, custBillingAddressID,  \n" +
                "			custShippingAddressID, custTermsID, deleteByRoleId, deletedAt, deletedBy, id, isDeleted, fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,  \n" +
                "			fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions, quoteDueDate, quoteInDate, quoteNumber, quoteSubmitDate,  \n" +
                "			rfqAssyID, RFQMISCData, updateByRoleId, updatedAt, updatedBy  \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND id = pAssyQuoteSubmittedID ;  \n" +
                "  \n" +
                "   # select list select terms and conditions of submitted quote summary  \n" +
                "			SELECT qst.*, ec.name ecoTypeName, CONCAT('<ul><li>', GROUP_CONCAT(CONCAT(ecv.name, (CASE WHEN qst.note IS NOT NULL THEN CONCAT(' <b>Note:</b>', qst.note) ELSE '' END)) SEPARATOR '</li><li>'),'</li></ul>') ecoTypeValues  \n" +
                "            FROM rfq_assy_quote_submitted_termsconditions qst  \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID  \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID  \n" +
                "            WHERE qst.isDeleted = 0  \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            GROUP BY ecv.ecoTypeCatID;  \n" +
                "  \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote  \n" +
                "			SELECT csd.id, csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className stdclass  \n" +
                "            FROM rfq_assy_standard_class_detail csd  \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0  \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0  \n" +
                "			WHERE csd.refSubmittedQuoteID = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "		# select letest submited quote summary detail  \n" +
                "			SELECT bomInternalVersion, BOMIssues, bomLastVersion, createByRoleId, createdAt, createdBy, custBillingAddressID, custShippingAddressID,  \n" +
                "            custTermsID, deleteByRoleId, deletedAt, deletedBy, id, isDeleted, fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,  \n" +
                "            fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions, quoteDueDate, quoteInDate, quoteNumber, quoteSubmitDate, rfqAssyID,  \n" +
                "            RFQMISCData, updateByRoleId, updatedAt, updatedBy  \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1;  \n" +
                "  \n" +
                "		#select list of Custom Part detail of assembly.  \n" +
                "  \n" +
                "			  SELECT *, (amount*requestedQty) AS extendedCost FROM (  \n" +
                "				SELECT prfqAssyID `rfqAssyID`,  com.mfgPn CustomPart,com.PIDCode,raqc.mfgPNID, com.custAssyPN,  \n" +
                "				qoa.id additi, qo.requestedQty, fun_getRoHSNameByID(com.RoHSStatusID) rohsName, fun_getRoHSIconByID(com.RoHSStatusID) rohsIcon,  \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,  \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,  \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime  \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa  \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'Material'  \n" +
                "				LEFT JOIN rfq_assy_quotations_customparts raqc ON raqc.rfqAssyQuoteID = qoa.rfqAssyQuoteID AND raqc.id = qoa.refCustomPartQuoteID AND qo.isDeleted = 0  \n" +
                "				LEFT JOIN component com ON com.id = raqc.mfgPNID  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID AND qoa.refCustomPartQuoteID IS NOT NULL  \n" +
                "				#HAVING amount>0  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime,qdf.displayOrder  \n" +
                "			) a  \n" +
                "			GROUP BY requestedQty, turnTime,fieldName,amount,days;  \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.  \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (  \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,  \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,  \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,  \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime  \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa  \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'NRE'  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "				HAVING amount>0  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime  \n" +
                "            ) a  \n" +
                "            GROUP BY fieldName,amount;  \n" +
                "  \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.  \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (  \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,  \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,  \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,  \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime  \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa  \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'TooLing'  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "				HAVING amount>0  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime  \n" +
                "            ) a  \n" +
                "            GROUP BY fieldName,amount,toolingQty;  \n" +
                "  \n" +
                "		# Company detail  \n" +
                "		SELECT CONCAT(IFNULL(ci.street1, ', '),', ',IFNULL(ci.city,', '),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode,''))AS address,  \n" +
                "			ci.personName as companyContactName,ci.registeredEmail as companyEmail,ci.faxNumber,ci.contactNumber as phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail as email  \n" +
                "		FROM company_info ci  \n" +
                "		LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "		WHERE ci.isDeleted=0;  \n" +
                "		# select list of price Group detail  \n" +
                "            SELECT rpg.id priceGroupID, rpg.name priceGroup, rpg.qty, rpg.rfqAssyID,  \n" +
                "			com.mfgPN, com.PIDCode, ro.name rohsName, ro.rohsIcon, ra.partID ,com.isCustom, com.custAssyPN  \n" +
                "			FROM rfq_assy_submitted_price_group_detail rpg  \n" +
                "			JOIN rfq_assemblies ra ON ra.id = rpg.rfqAssyID  \n" +
                "			JOIN component com ON com.id = ra.partID  \n" +
                "			JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID  \n" +
                "			WHERE rpg.refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            ORDER BY rpg.name;  \n" +
                "  \n" +
                "        # select list of price Group  \n" +
                "			SELECT DISTINCT `name` FROM rfq_assy_submitted_price_group_detail  \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            ORDER BY NAME;  \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary  \n" +
                "			SELECT qst.*, ec.name ecoTypeName, ecv.name ecoTypeValues FROM rfq_assy_quote_submitted_termsconditions qst  \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID  \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID  \n" +
                "            WHERE qst.isDeleted = 0  \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "  \n" +
                "		# total requote count  \n" +
                "			SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL AND isDeleted = 0;  \n" +
                "  \n" +
                "		#select list of standard certification detail of assembly for not submitted quote  \n" +
                "			SELECT csd.id, csd.certificateStandardID, csd.ClassID, cs.fullName standard,sc.className stdclass  \n" +
                "            FROM component_standard_details  csd  \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0  \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0  \n" +
                "			WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID);  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-11-2021 *********************************** */
                "Drop Procedure if Exists `Sproc_GetReversalPartDetailReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReversalPartDetailReport`(  \n" +
                "	IN pCustomerID text(11),  \n" +
                "    IN pWhereClause TEXT,  \n" +
                "    IN pWithAlternateParts TINYINT(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE SQLStatement TEXT;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "		SET SQLStatement  = CONCAT(\"  \n" +
                "		Create temporary table if not exists Results as  \n" +
                "		SELECT * FROM  \n" +
                "		 (  \n" +
                "			 SELECT id, (select mfgName from mfgcodemst where id = mfgCodeId) Customer, mfgcodeID as customerID ,mfgPN as AssyPN,rev as AssyRev,RoHSStatusID FROM component  \n" +
                "			 WHERE category = 3 AND deletedAT IS NULL and  \n" +
                "			 partStatus IN ( SELECT id FROM component_partstatusmst WHERE `name`='Active')  \n" +
                "		 ) a,  \n" +
                "		 (  \n" +
                "			 SELECT a.partid, trim(a.Lineid)+0 Lineid, a.CustPN CPN,a.CustomerRev CPNRev,a.QPA, (select mfgName from mfgcodemst where id = b.mfgCodeID) mfgName,  \n" +
                "					 b.mfgCode,b.mfgCodeID,b.MFgPN,b.mfgPNId,c.eolDate EOLDate,c.ltbdate LTBDate,  \n" +
                "					 (SELECT `name` FROM component_partstatusmst WHERE id=c.partStatus)PartStatus,  \n" +
                "					 c.price as TentativePrice, (select mfgName from mfgcodemst where id = (select mfgCodeID from component where id = ( SELECT componentID FROM component_alternatepn WHERE refComponentID = b.mfgPNid and isDeleted = 0 order by componentID asc LIMIT 1))) alternatePartMFG,  \n" +
                "					 (select mfgPN from component where id = (SELECT componentID FROM component_alternatepn WHERE refComponentID = b.mfgPNid and isDeleted = 0 order by componentID asc  LIMIT 1)) alternatePart,  \n" +
                "					 c.updatedAt as modifiedAt,  \n" +
                "					 c.reversalDate,  \n" +
                "					 c.isReversal  \n" +
                "			 FROM rfq_lineitems a, rfq_lineitems_alternatepart b ,component c  \n" +
                "			 WHERE a.id = b.rfqlineitemsId AND b.mfgpnid =c.id AND a.deletedAt IS NULL AND b.deletedAT IS NULL  \n" +
                "             and not exists (select 1 from component_partstatusmst cp where cp.id = c.partStatus and cp.name='TBD')  \n" +
                "			 and (case when \",pWithAlternateParts,\" = 1 then 1=1 else ( exists (SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`!='Active' and deletedAT IS NULL  and id = c.partStatus))  \n" +
                "					end)  \n" +
                "			 AND a.partid IN  \n" +
                "			 (  \n" +
                "				SELECT id FROM component c WHERE c.category = 3 AND c.deletedAT IS NULL  \n" +
                "				AND exists  \n" +
                "				(  \n" +
                "					SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`='Active' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "				)  \n" +
                "			 )  \n" +
                "			 AND EXISTS  \n" +
                "			 (  \n" +
                "				SELECT rfqlineitemsid FROM rfq_lineitems_alternatepart dp  \n" +
                "				WHERE dp.rfqlineitemsid = a.id and dp.deletedAT IS NULL  \n" +
                "				AND EXISTS  \n" +
                " 				(  \n" +
                " 					SELECT 1  \n" +
                "                      FROM component c  \n" +
                "					 WHERE c.id = dp.mfgPnID  \n" +
                "                       and c.deletedAT IS NULL  \n" +
                "                       and c.isReversal = true  \n" +
                "                       /*AND exists (  \n" +
                "								SELECT 1 FROM component_partstatusmst  \n" +
                "								WHERE `name` != 'Active' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "								)*/  \n" +
                " 				)  \n" +
                "			  )  \n" +
                "		 ) b  \n" +
                "		 WHERE a.id =b.partid\");  \n" +
                "  \n" +
                "		IF pCustomerID != '' THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(SQLStatement,' and customerID in (',pCustomerID,')');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = SQLStatement;  \n" +
                "		END IF;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	IF(pWhereClause != '') THEN  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from Results  where ', pWhereClause);  \n" +
                "	else  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from Results');  \n" +
                "	end if;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SELECT CONCAT(IFNULL(ci.street1, ', '),', ',IFNULL(ci.city,', '),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode,''))AS address,  \n" +
                "		ci.personName as companyContactName,ci.registeredEmail as companyEmail,ci.faxNumber,ci.contactNumber as phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail as email  \n" +
                "	FROM company_info ci  \n" +
                "	LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "	WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-11-2021 *********************************** */
                "Drop Procedure if Exists `Sproc_PackingslipAndInovoiceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_PackingslipAndInovoiceReport`(  \n" +
                "	IN pSupplierIDs LONGTEXT,  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN pEmployeeID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE SQLStatement TEXT;  \n" +
                "	DECLARE v_SupplierID LONGTEXT;  \n" +
                "	IF(pSupplierIDs != '') THEN  \n" +
                "		SET v_SupplierID = CONCAT(\"a.mfgCodeID in (\",pSupplierIDs,\")\");  \n" +
                "	ELSE  \n" +
                "		SET v_SupplierID = \"1=1\";  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	SET SQLStatement  = CONCAT(\"  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_PackingslipAndInovoiceReport AS  \n" +
                "		SELECT 	ReceiptMonthYear,  \n" +
                "			Supplier,  \n" +
                "			SUM(NoOfReceivedLine) NoOfReceivedLine,  \n" +
                "			SUM(NoOfDisputeLine) NoOfDisputeLine,  \n" +
                "			SUM(NoOfLineWaitingForInvoice) NoOfLineWaitingForInvoice,  \n" +
                "			-- SUM(LinewiseDisputeRatio) LinewiseDisputeRatio,  \n" +
                "			ROUND((sum(NoOfDisputeLine)/sum(NoOfReceivedLine))*100,2) As LinewiseDisputeRatio,  \n" +
                "			SUM(TotalQtyReceived) TotalQtyReceived,  \n" +
                "			SUM(DisputeLineQty) DisputeLineQty,  \n" +
                "			-- SUM(QtywiseDisputeRatio) QtywiseDisputeRatio  \n" +
                "			ROUND((sum(DisputeLineQty)/sum(TotalQtyReceived))*100,2) QtywiseDisputeRatio  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		a.receiptDate As ReceiptDate,  \n" +
                "						fun_getMfgCodeByID(a.mfgCodeID) Supplier,  \n" +
                "						Date_format(a.receiptDate ,'%M %Y') As ReceiptMonthYear,  \n" +
                "						b.NumberofReceivedLine As NoOfReceivedLine,  \n" +
                "						b.DisputeLine As NoOfDisputeLine,  \n" +
                "						b.WaitingForInvoiceLine As NoOfLineWaitingForInvoice,  \n" +
                "						-- Round((b.DisputeLine/b.NumberofReceivedLine)*100,2) As LinewiseDisputeRatio,  \n" +
                "						b.TotalReceivedQty As TotalQtyReceived,  \n" +
                "						b.DisputeLineQty As DisputeLineQty  \n" +
                "						-- Round((DisputeLineQty/TotalReceivedQty)*100,2) As QtywiseDisputeRatio  \n" +
                "				FROM 		packing_slip_material_receive a  \n" +
                "				LEFT JOIN 	(  \n" +
                "							SELECT 		refPackingSlipMaterialRecID, count(1) NumberofReceivedLine,  \n" +
                "									SUM(CASE  \n" +
                "										WHEN 	Status = 'A' and RefCreditDebitInvoiceNo is not null then  \n" +
                "											1  \n" +
                "										WHEN 	Status = 'D' then  \n" +
                "											1  \n" +
                "										ELSE  \n" +
                "											0  \n" +
                "									END)  DisputeLine,  \n" +
                "									SUM(CASE  \n" +
                "										WHEN 	Status ='P' then  \n" +
                "											1  \n" +
                "										ELSE 	0  \n" +
                "									END) waitingForInvoiceLine,  \n" +
                "									SUM(receivedQty) TotalReceivedQty,  \n" +
                "									SUM(CASE  \n" +
                "										WHEN 	Status = 'A' and RefCreditDebitInvoiceNo is not null then  \n" +
                "											receivedQty  \n" +
                "										WHEN 	Status = 'D' then  \n" +
                "											receivedQty  \n" +
                "										ELSE 	0  \n" +
                "									END)  DisputeLineQty  \n" +
                "							FROM 		packing_slip_material_receive_det  \n" +
                "							GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) b ON a.id = b.refPackingSlipMaterialRecID  \n" +
                "				WHERE 		\",v_SupplierID,\"  \n" +
                "							AND receiptType ='I'  \n" +
                "							AND a.receiptDate IS NOT NULL  \n" +
                "							-- AND CAST(a.receiptDate AS DATE) BETWEEN DATE(\", pfromDate ,\") AND DATE(\", ptoDate ,\")  \n" +
                "							AND DATE(a.receiptDate)>=IFNULL(DATE('\",pfromDate,\"'),DATE(a.receiptDate))  \n" +
                "							AND DATE(a.receiptDate)<=IFNULL(DATE('\",ptoDate,\"'),DATE(a.receiptDate))  \n" +
                "							AND deletedAt IS NULL  \n" +
                "				ORDER BY 	a.receiptDate  \n" +
                "			) AS A  \n" +
                "		GROUP BY 	ReceiptMonthYear,Supplier  \n" +
                "		ORDER BY 	ReceiptMonthYear,Supplier  \n" +
                "	\");  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_PackingslipAndInovoiceReport;  \n" +
                "	SET @SQLStatement1 = SQLStatement;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT('SELECT * FROM temp_Sproc_PackingslipAndInovoiceReport');  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SELECT CONCAT(IFNULL(ci.street1, ', '),', ',IFNULL(ci.city,', '),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode,''))AS address,  \n" +
                "		fun_getUserNameByEmployeID(pEmployeeID) employeeName,  \n" +
                "		ci.personName as companyContactName,ci.registeredEmail as companyEmail,ci.faxNumber,ci.contactNumber as phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail as email  \n" +
                "	FROM company_info ci  \n" +
                "	LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "	WHERE ci.isDeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-11-2021 *********************************** */
                /* **************************** Add Script Version -> 22-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5527,'2.00','V1',' User Story 27878: Global Changes: Business Name (Old: Company Name) - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5527:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_update_UMID_initial_count`;  \n" +
                "CREATE PROCEDURE `Sproc_update_UMID_initial_count`(  \n" +
                "	IN pId INT,  \n" +
                "	IN pOrgQty DECIMAL(18,8),  \n" +
                "	IN pOrgPkgUnit DECIMAL(18,8),  \n" +
                "	IN pUpdatedBy VARCHAR(255),  \n" +
                "	IN pInitialQtyChangeRemark VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vOrgInitialQty DECIMAL(18, 8);  \n" +
                "	DECLARE vQtyDifference DECIMAL(18,8);  \n" +
                "	DECLARE vBalanceQty DECIMAL(18,8);  \n" +
                "	DECLARE vIsQtyUpdate TINYINT(1);  \n" +
                "	DECLARE vInventoryType VARCHAR(2);  \n" +
                "    DECLARE v_ReceivedStatus VARCHAR(5);  \n" +
                "    DECLARE v_PackingSlipModeStatus VARCHAR(5);  \n" +
                "    DECLARE v_ErrorCode INT;  \n" +
                "    DECLARE v_PackingslipId INT;  \n" +
                "    DECLARE v_PackingSlipNumber VARCHAR(55);  \n" +
                "    DECLARE v_PackingSlipDetId INT;  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "        # get UMID detail before update qty and units to manage history  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS tempUMIDDetail;  \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS tempUMIDDetail AS  \n" +
                "		SELECT 	css.id, css.uid, css.refcompid, css.orgQty, css.orgPkgUnit, css.pkgQty, css.pkgUnit, css.fromBin, css.packaging,css.stockInventoryType, css.woNumber  \n" +
                "				FROM 	component_sid_stock css  \n" +
                "			WHERE 	css.id = pId  \n" +
                "			AND isDeleted = 0;  \n" +
                "  \n" +
                "        SELECT orgQty, stockInventoryType INTO vOrgInitialQty, vInventoryType FROM tempUMIDDetail;  \n" +
                "  \n" +
                "        # get Packing slip Mode status and packing slip line level status for selected umid  \n" +
                "        SELECT  psd.id, psd.receivedStatus, ps.packingSlipModeStatus, ps.id, ps.packingSlipNumber  \n" +
                "				INTO  v_PackingSlipDetId, v_ReceivedStatus, v_PackingSlipModeStatus, v_PackingslipId, v_PackingSlipNumber  \n" +
                "			FROM	packing_slip_material_receive_det  psd  \n" +
                "				INNER JOIN packing_slip_material_receive ps ON psd.refPackingSlipMaterialRecID = ps.id  AND ps.isDeleted = 0  \n" +
                "			AND  psd.id IN (  \n" +
                "				SELECT 	refPackingSlipDetailID  \n" +
                "				FROM  	component_sid_stock_packing_detail  \n" +
                "				WHERE 	refComponentSidStockID = pId  \n" +
                "						AND isDeleted = 0  \n" +
                "					);  \n" +
                "	# Check if UMID is for new stock Else for existing stock  \n" +
                "	IF (vInventoryType = 'NI') THEN  \n" +
                "		# If packing slip status is in draft mode then we have to restrict  \n" +
                "        IF(v_PackingSlipModeStatus = 'D') THEN  \n" +
                "		# Update packing slip detail if new orginial qty is less than previous original qty  \n" +
                "             SET v_ErrorCode = 1;  \n" +
                "             SELECT  \n" +
                "					t.id,  \n" +
                "					t.uid,  \n" +
                "					v_PackingslipId AS packingslipId,  \n" +
                "					v_PackingSlipNumber AS packingSlipNumber,  \n" +
                "                    v_ErrorCode AS errorCode  \n" +
                "			FROM 	tempUMIDDetail t  \n" +
                "			INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "			INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "            SET vIsQtyUpdate = 0;  \n" +
                "		ELSE  \n" +
                "			IF(pOrgQty < vOrgInitialQty) THEN  \n" +
                "				# if new original qty is less than previous qty then make UMID created flag to false  \n" +
                "				UPDATE 	packing_slip_material_receive_det  \n" +
                "				SET 	umidCreated = FALSE,  \n" +
                "						umidCreatedQty = (IFNULL(umidCreatedQty,0) - (vOrgInitialQty - pOrgQty))  \n" +
                "				WHERE   id IN (  \n" +
                "					SELECT 	refPackingSlipDetailID  \n" +
                "					FROM  	component_sid_stock_packing_detail  \n" +
                "					WHERE 	refComponentSidStockID = pId  \n" +
                "							AND isDeleted = 0  \n" +
                "						);  \n" +
                "  \n" +
                "				UPDATE 	component_sid_stock_packing_detail  \n" +
                "				SET 	packingSlipQty =  pOrgQty  \n" +
                "				WHERE   refComponentSidStockID = pId  AND isDeleted = 0 ;  \n" +
                "  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "  \n" +
                "			# Update packing slip detail if new orginial qty is more than previous original qty  \n" +
                "			ELSEIF(pOrgQty > vOrgInitialQty) THEN  \n" +
                "				SET vQtyDifference = (pOrgQty - vOrgInitialQty);  \n" +
                "				SELECT 	vu.BalanceQty INTO vBalanceQty  \n" +
                "				FROM 	vu_umid_creation_pending vu  \n" +
                "				WHERE 	vu.packingSlipDetID = v_PackingSlipDetId;  \n" +
                "  \n" +
                "				# If pending balance qty is more than new additional original qty then make UMID created flag to false  \n" +
                "				IF(vBalanceQty > vQtyDifference) THEN  \n" +
                "					UPDATE 	packing_slip_material_receive_det  \n" +
                "					SET 	umidCreated = FALSE,  \n" +
                "							umidCreatedQty = (IFNULL(umidCreatedQty,0) + IFNULL(vQtyDifference,0))  \n" +
                "					WHERE   id IN (  \n" +
                "						SELECT 	refPackingSlipDetailID  \n" +
                "						FROM  	component_sid_stock_packing_detail  \n" +
                "						WHERE 	refComponentSidStockID = pId  \n" +
                "								AND isDeleted = 0  \n" +
                "							);  \n" +
                "					UPDATE 	component_sid_stock_packing_detail  \n" +
                "					SET 	packingSlipQty =  pOrgQty  \n" +
                "					WHERE   refComponentSidStockID = pId  AND isDeleted = 0 ;  \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 1;  \n" +
                "				# If pending balance qty and new additional original qty are equal then make UMID created flag to true  \n" +
                "				ELSEIF(vBalanceQty = vQtyDifference) THEN  \n" +
                "					UPDATE 	packing_slip_material_receive_det  \n" +
                "					SET 	umidCreated = TRUE,  \n" +
                "							umidCreatedQty = (IFNULL(umidCreatedQty,0) + IFNULL(vQtyDifference,0))  \n" +
                "					WHERE   id IN (  \n" +
                "						SELECT 	refPackingSlipDetailID  \n" +
                "						FROM  	component_sid_stock_packing_detail  \n" +
                "						WHERE 	refComponentSidStockID = pId  \n" +
                "								AND isDeleted = 0  \n" +
                "							);  \n" +
                "					UPDATE 	component_sid_stock_packing_detail  \n" +
                "					SET 	packingSlipQty =  pOrgQty  \n" +
                "					WHERE   refComponentSidStockID = pId  AND isDeleted = 0 ;  \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 1;  \n" +
                "				# Else inform user that stock is not available to increase original qty  \n" +
                "				ELSE  \n" +
                "					SELECT 		b.name AS binName,  \n" +
                "							IF(vBalanceQty > 0 , vBalanceQty, vBalanceQty * -1) AS BalanceQty,  \n" +
                "							c.PIDCode,  \n" +
                "							pOrgQty newOrgQty  \n" +
                "					FROM 		tempUMIDDetail t  \n" +
                "					INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "					INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 0;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				SET vIsQtyUpdate = 0;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "    ELSEIF(vInventoryType = 'AI') THEN  \n" +
                "		IF(pOrgQty < vOrgInitialQty) THEN  \n" +
                "			SET vIsQtyUpdate = 1;  \n" +
                "		# Update packing slip detail if new orginial qty is more than previous original qty  \n" +
                "		ELSEIF(pOrgQty > vOrgInitialQty) THEN  \n" +
                "			SET vQtyDifference = (pOrgQty - vOrgInitialQty);  \n" +
                "			SELECT 	vu.availableQty INTO vBalanceQty  \n" +
                "			FROM 	vu_customer_packing_slip_qty vu  \n" +
                "			WHERE 	EXISTS (SELECT 1  \n" +
                "							FROM tempUMIDDetail t  \n" +
                "                            WHERE t.fromBin = vu.binID  \n" +
                "                            AND t.refcompid = vu.partID  \n" +
                "                            AND t.woNumber = vu.woNumber);  \n" +
                "  \n" +
                "			# If pending balance qty is more than new additional original qty then make UMID created flag to false  \n" +
                "			IF(vBalanceQty > vQtyDifference) THEN  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "			# If pending balance qty and new additional original qty are equal then make UMID created flag to true  \n" +
                "			ELSEIF(vBalanceQty = vQtyDifference) THEN  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "			# Else inform user that stock is not available to increase original qty  \n" +
                "			ELSE  \n" +
                "				SELECT 	 b.name AS binName,  \n" +
                "						vBalanceQty AS BalanceQty,  \n" +
                "						c.PIDCode,  \n" +
                "						pOrgQty newOrgQty  \n" +
                "				FROM 	tempUMIDDetail t  \n" +
                "				INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "				INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "				SET vIsQtyUpdate = 0;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "    ELSE  \n" +
                "		SET vIsQtyUpdate = 1;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(vIsQtyUpdate = 1) THEN  \n" +
                "		# update qty and count based on data  \n" +
                "		UPDATE 	component_sid_stock css, tempUMIDDetail t  \n" +
                "		SET 	css.pkgQty = (IFNULL(pOrgQty, 0) - IFNULL(t.orgQty, 0) + IFNULL(t.pkgQty, 0)),  \n" +
                "			css.pkgUnit = (IFNULL(pOrgPkgUnit, 0) - IFNULL(t.orgPkgUnit, 0) + IFNULL(t.pkgUnit, 0)),  \n" +
                "			css.orgQty = IFNULL(pOrgQty, 0), 		css.orgPkgUnit = IFNULL(pOrgPkgUnit, 0),  \n" +
                "			css.initialQtyChangeRemark = pInitialQtyChangeRemark,  \n" +
                "			css.updatedBy = pUpdatedBy,  \n" +
                "			css.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	css.id = t.id;  \n" +
                "  \n" +
                "		-- Insert log in UMID history page  \n" +
                "		INSERT INTO component_sid_stock_history  \n" +
                "		(  \n" +
                "			transType, 				actionPerformed, 		refUIDId, 	uid, 			refcompid,  \n" +
                "			binID, 					warehouseID, 			deptWHID, 	orgQty, 		orgUnit,  \n" +
                "			currentQty, 				currentUnit, 			uom, 		reason,  \n" +
                "			isDeleted, 				createdBy, 			createdAt,  \n" +
                "			updatedBy, 				updatedAt  \n" +
                "		)  \n" +
                "		SELECT  'Change Initial Qty.',  \n" +
                "			'Change Initial Qty',  \n" +
                "			css.id,  \n" +
                "			uid,  \n" +
                "			refcompid,  \n" +
                "			css.binID,  \n" +
                "			b.warehouseID,  \n" +
                "			w.parentWHID,  \n" +
                "			orgQty,  \n" +
                "			orgPkgUnit,  \n" +
                "			pkgQty,  \n" +
                "			pkgUnit,  \n" +
                "			uom,  \n" +
                "			pInitialQtyChangeRemark,  \n" +
                "			0,  \n" +
                "			pUpdatedBy,  \n" +
                "			fun_DatetimetoUTCDateTime(),  \n" +
                "			pUpdatedBy,  \n" +
                "			fun_DatetimetoUTCDateTime()  \n" +
                "		FROM 	component_sid_stock  css  \n" +
                "		JOIN 	binmst b ON css.binID = b.id  \n" +
                "		JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "		WHERE 	css.id = pId;  \n" +
                "  \n" +
                "		# Update allocated qty with return status  \n" +
                "		UPDATE 	kit_allocation k  \n" +
                "		SET	k.status = 'D',  \n" +
                "			k.updatedBy = pUpdatedBy,  \n" +
                "			k.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	k.refUIDId = pId  \n" +
                "				AND k.status = 'A';  \n" +
                "	END IF;  \n" +
                "	COMMIT;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5528,'2.00','V1','Bug 38903: [Main Branch] Created UMID Count must not be greater than Received/Pending Qty of the part - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5528:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2021 *********************************** */
                "Drop procedure if exists `Sproc_AddDuplicateOperation`;  \n" +
                "CREATE PROCEDURE `Sproc_AddDuplicateOperation`(  \n" +
                "	IN pfromOpID INT,  \n" +
                "	IN pisCheckUnique tinyint,  \n" +
                "	IN pIsCopyDoDont tinyint,  \n" +
                "	IN pIsCopyDocuments tinyint,  \n" +
                "	IN pIsCopyDataFields tinyint,  \n" +
                "	IN pIsCopyParts tinyint,  \n" +
                "	IN pIsCopyEquipments tinyint,  \n" +
                "	IN pIsCopyEmployees tinyint,  \n" +
                "	IN pIsCopyTemplates tinyint,  \n" +
                "    IN popName VARCHAR(255),  \n" +
                "	IN popNumber DECIMAL(7,3),  \n" +
                "    IN pcolorCode VARCHAR(100),  \n" +
                "	IN puserID VARCHAR(255),  \n" +
                "	IN puserRoleId INT,  \n" +
                "	IN popDescription longtext,  \n" +
                "    IN popWorkingCondition longtext,  \n" +
                "    IN popManagementInstruction longtext,  \n" +
                "    IN popDeferredInstruction longtext,  \n" +
                "    IN popDoes longtext,  \n" +
                "    IN popDonts longtext,  \n" +
                "	IN popOrder DECIMAL(7,3),  \n" +
                "	IN popStatus INT,  \n" +
                "	IN poperationTypeID INT,  \n" +
                "	IN pparentOPID INT,  \n" +
                "	IN pprocessTime INT,  \n" +
                "	IN psetupTime INT,  \n" +
                "	IN pperPieceTime INT,  \n" +
                "	IN pqtyControl tinyint,  \n" +
                "	IN ptabLimitAtTraveler INT,  \n" +
                "	IN pisTeamOperation tinyint,  \n" +
                "	IN pisIssueQty tinyint,  \n" +
                "	IN pisRework tinyint,  \n" +
                "	IN pisMoveToStock tinyint,  \n" +
                "	IN pmountingTypeID INT,  \n" +
                "	IN pisPlacementTracking tinyint,  \n" +
                "	IN pisLoopOperation tinyint,  \n" +
                "	IN pisAllowMissingPartQty tinyint,  \n" +
                "	IN pisAllowBypassQty tinyint,  \n" +
                "	IN pisEnablePreProgrammingPart tinyint,  \n" +
                "	IN pisWaterSoluble tinyint,  \n" +
                "	IN pisNoClean tinyint,  \n" +
                "	IN pisFluxNotApplicable tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    DECLARE vValidationPassed tinyint;  \n" +
                "	DECLARE vCount INT;  \n" +
                "    DECLARE vinsertedOPID INT;  \n" +
                "	DECLARE vUTCDateTime datetime;  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	START TRANSACTION;  \n" +
                "	IF (popNumber IS NULL OR popNumber = 0) THEN  \n" +
                "		SELECT 'EC01' errorCode;    /* Operation number must not blank. */  \n" +
                "	ELSEIF (popName IS NULL OR popName = '') THEN  \n" +
                "		SELECT 'EC02' errorCode;    /* Operation Name must not blank. */  \n" +
                "	END IF;  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "    IF pisCheckUnique THEN  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_operation_table AS (select opNumber,colorCode,isDeleted from operations  \n" +
                "			where opNumber = popNumber OR (pcolorCode IS NOT NULL AND pcolorCode <> '' AND colorCode = pcolorCode));  \n" +
                "		IF (EXISTS (SELECT 1 FROM temp_operation_table)) THEN  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			set vCount = 0;  \n" +
                "			select count(1),opNumber into vCount, @opNumber from temp_operation_table where isDeleted = 0;  \n" +
                "			IF vCount > 0 THEN  \n" +
                "				SELECT case when @opNumber = popNumber then 'Operation number' else 'Color Code' END as errorCode;  \n" +
                "			ELSE  \n" +
                "				SELECT 'EC03' errorCode;    /* Confirmation message for create new if found deleted record. */  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_operation_table;  \n" +
                "	ELSE  \n" +
                "		set vCount = 0;  \n" +
                "			select count(1),opNumber into vCount, @opNumber from operations  \n" +
                "				where (opNumber = popNumber OR (pcolorCode IS NOT NULL AND pcolorCode <> '' AND colorCode = pcolorCode)) AND isDeleted = 0;  \n" +
                "		IF vCount > 0 THEN  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			SELECT case when @opNumber = popNumber then 'Operation number' else 'Color Code' END as errorCode;  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF vValidationPassed = 1 then  \n" +
                "		SELECT fun_DatetimetoUTCDateTime() into vUTCDateTime;  \n" +
                "		IF pfromOpID > 0 THEN  \n" +
                "			# [S] - copy Operation Detail AND  Do/does  \n" +
                "			insert into operations (opName, opNumber,colorCode,opDescription,opDoes,opDonts, opOrder,opStatus,documentPath, operationTypeID,parentOPID,processTime,setupTime,perPieceTime,qtyControl,opWorkingCondition,opManagementInstruction,opDeferredInstruction,isTeamOperation,isIssueQty,isRework,  \n" +
                "						tabLimitAtTraveler,isMoveToStock,mountingTypeID,isPlacementTracking,isLoopOperation,isAllowMissingPartQty,isAllowBypassQty,isEnablePreProgrammingPart,isWaterSoluble,  \n" +
                "						isNoClean,isFluxNotApplicable,createdBy,createdAt, createByRoleId)  \n" +
                "				select popName, popNumber,pcolorCode, opDescription, case when pIsCopyDoDont then opDoes else NULL end , case when pIsCopyDoDont then opDonts else NULL end , popNumber, 0, documentPath, operationTypeID,parentOPID,processTime,setupTime,perPieceTime,qtyControl,opWorkingCondition,opManagementInstruction,opDeferredInstruction,isTeamOperation,isIssueQty,isRework,  \n" +
                "						tabLimitAtTraveler,isMoveToStock,mountingTypeID,isPlacementTracking,isLoopOperation,isAllowMissingPartQty,isAllowBypassQty,isEnablePreProgrammingPart,isWaterSoluble,  \n" +
                "						isNoClean,isFluxNotApplicable, pUserID, vUTCDateTime, pUserRoleId  \n" +
                "				from operations  \n" +
                "				where opID = pfromOpID and isDeleted = 0;  \n" +
                "			# [E] - copy Operation DetailAND  Do/does  \n" +
                "        ELSE  \n" +
                "			 # [E] - Insert Operation Detail(Add operation)  \n" +
                "			 insert into operations (opName, opNumber,colorCode,opDescription,opOrder, opStatus, operationTypeID,parentOPID,processTime,setupTime,perPieceTime,qtyControl,opWorkingCondition,opManagementInstruction,opDeferredInstruction,isTeamOperation,isIssueQty,isRework,  \n" +
                "						tabLimitAtTraveler,isMoveToStock,mountingTypeID,isPlacementTracking,isLoopOperation,isAllowMissingPartQty,isAllowBypassQty,isEnablePreProgrammingPart,isWaterSoluble,  \n" +
                "						isNoClean,isFluxNotApplicable,createdBy,createdAt, createByRoleId)  \n" +
                "					VALUES( popName, popNumber,pcolorCode, popDescription,popOrder, popStatus, poperationTypeID,pparentOPID,pprocessTime,psetupTime,pperPieceTime,pqtyControl,popWorkingCondition,popManagementInstruction,popDeferredInstruction,pisTeamOperation,pisIssueQty,pisRework,  \n" +
                "						ptabLimitAtTraveler,pisMoveToStock,pmountingTypeID,pisPlacementTracking,pisLoopOperation,pisAllowMissingPartQty,pisAllowBypassQty,pisEnablePreProgrammingPart,pisWaterSoluble,  \n" +
                "						pisNoClean,pisFluxNotApplicable, pUserID, vUTCDateTime, pUserRoleId );  \n" +
                "			# [E] - Insert Operation Detail(Add operation)  \n" +
                "		END IF;  \n" +
                "		SET vinsertedOPID = LAST_INSERT_ID();  \n" +
                "		SELECT op.opID AS opID, op.opNumber, op.documentPath FROM operations op WHERE op.opID = vinsertedOPID;  \n" +
                "		# [S] - copy Data Fields  \n" +
                "			IF pIsCopyDataFields THEN  \n" +
                "				insert into operation_dataelement (opID, dataElementID, displayOrder, description, createdBy,createdAt, createByRoleId)  \n" +
                "					select vinsertedOPID, dataElementID, displayOrder, description, pUserID, vUTCDateTime, pUserRoleId  \n" +
                "						from operation_dataelement  \n" +
                "						where opID = pfromOpID and isDeleted = false;  \n" +
                "            END IF;  \n" +
                "		# [E] - copy Data Fields  \n" +
                "		# [S] - copy Supplier,amterials & tools(parts)  \n" +
                "			IF pIsCopyParts THEN  \n" +
                "				insert into operation_part (opID, partID, createdBy,createdAt, createByRoleId)  \n" +
                "					select vinsertedOPID, partID, pUserID, vUTCDateTime, pUserRoleId  \n" +
                "						from operation_part  \n" +
                "						where opID = pfromOpID and isDeleted = false;  \n" +
                "            END IF;  \n" +
                "		# [E] - copy Supplier,amterials & tools(parts)  \n" +
                "		# [S] - copy Equipments  \n" +
                "			IF pIsCopyEquipments THEN  \n" +
                "				insert into operation_equipment (opID, eqpID, createdBy,createdAt, createByRoleId)  \n" +
                "					select vinsertedOPID, eqpID, pUserID, vUTCDateTime, pUserRoleId  \n" +
                "						from operation_equipment  \n" +
                "						where opID = pfromOpID and isDeleted = false;  \n" +
                "            END IF;  \n" +
                "		# [E] - copy Equipments  \n" +
                "		# [S] - copy Personnel  \n" +
                "			IF pIsCopyEmployees THEN  \n" +
                "				insert into operation_employee (opID, employeeID, createdBy,createdAt, createByRoleId)  \n" +
                "					select vinsertedOPID, employeeID, pUserID, vUTCDateTime, pUserRoleId  \n" +
                "						from operation_employee  \n" +
                "						where opID = pfromOpID and isDeleted = false;  \n" +
                "            END IF;  \n" +
                "		# [E] - copy Personnel  \n" +
                "		# [S] - copy Master template  \n" +
                "			IF pIsCopyTemplates THEN  \n" +
                "				insert into operation_master_templates (operationId, masterTemplateId,isActive, createdBy,createdAt, createByRoleId)  \n" +
                "					select vinsertedOPID, masterTemplateId,isActive, pUserID, vUTCDateTime, pUserRoleId  \n" +
                "						from operation_master_templates  \n" +
                "						where operationId = pfromOpID and isDeleted = false;  \n" +
                "            END IF;  \n" +
                "		# [E] - copy Master template  \n" +
                " 		# [S] - copy document_folder  \n" +
                "			IF pIsCopyDocuments then  \n" +
                "				INSERT INTO generic_folder  \n" +
                "						(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "						`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "				SELECT  a.gencFolderName, vinsertedOPID refTransID, '-1' , 'operations' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "						0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "						a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "				FROM generic_folder a  \n" +
                "				WHERE a.refTransID = pfromOpID  \n" +
                "				AND a.gencFileOwnerType = 'operations' AND entityID = -1 AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "				UPDATE generic_folder gf1,  \n" +
                "				(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "					FROM generic_folder a WHERE a.refTransID = vinsertedOPID  \n" +
                "					AND a.gencFileOwnerType = 'operations' AND entityID = -1 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "				) gf2  \n" +
                "				SET gf1.refParentId = gf2.gencFolderID  \n" +
                "				WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "				AND gf1.refTransID = vinsertedOPID  \n" +
                "				AND gf1.gencFileOwnerType = 'operations' AND entityID = -1 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "  \n" +
                "				INSERT INTO genericfiles  \n" +
                "					(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "					entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "					refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "				select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vinsertedOPID,  \n" +
                "					entityID,gencFileOwnerType,isActive,genFilePath,vUTCDateTime,pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "					pfromOpID,gencFileOwnerType,pUserRoleId  \n" +
                "				from genericfiles where refTransID = pfromOpID and entityID = -1 and isRecycle = 0 and isDeleted = 0;  \n" +
                "				UPDATE genericfiles gf1,  \n" +
                "				(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "					FROM generic_folder a WHERE a.refTransID = vinsertedOPID  \n" +
                "					AND a.gencFileOwnerType = 'operations' AND entityID = -1 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "				) gf2  \n" +
                "				SET gf1.refParentId = gf2.gencFolderID  \n" +
                "				WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "				AND gf1.refTransID = vinsertedOPID  \n" +
                "				AND gf1.gencFileOwnerType = 'operations' AND entityID = -1 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('operations',vinsertedOPID,true);  /* Get New Path and Update in Operation table.  */  \n" +
                "			END IF;  \n" +
                "		# [E] - copy generic_folder  \n" +
                "		COMMIT;  \n" +
                "	END if;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5529,'2.00','V1',' User Story 31359: Operation Template and Operation Master - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5529:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2021  ********************************** */
                "SELECT pageID INTO @pageID from page_detail WHERE pageName = 'Supplier Quote List';  \n" +
                "  \n" +
                "INSERT INTO page_detail (`pageName`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`,  \n" +
                "`iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`)  \n" +
                "VALUES ('Supplier Quote Detail', 'app.transaction.supplierquote.summary', '/summarylist','Supplier Quote Detail', @pageID , '0',  \n" +
                "'icon icon-note-text', '1', '1', '0', '0', 'Supplier Quote List', '0');  \n" +
                "  \n" +
                "INSERT INTO page_detail (`pageName`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`,  \n" +
                "`iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`)  \n" +
                "VALUES ('Supplier Quote Part Detail', 'app.transaction.supplierquote.detail', '/detaillist?quote','Supplier Quote Part Detail', @pageID , '0',  \n" +
                "'icon icon-note-text', '1', '1', '0', '0', 'Supplier Quote List', '0');  \n" +
                "  \n" +
                "CALL Sproc_giveRightToChildPage('Supplier Quote Detail');  \n" +
                "CALL Sproc_giveRightToChildPage('Supplier Quote Part Detail');  \n" +
                /* **************************** New Script -> 23-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5530,'2.00','V1','User Story 38497: Supplier Quote List page - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5530:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierQuote`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuote`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pIsSummary TINYINT,  \n" +
                "	IN pSupplierIds VARCHAR(16000),  \n" +
                "	IN pQuoteStatus VARCHAR(1000),  \n" +
                "	IN pSearchType VARCHAR(5),  \n" +
                "	IN pAdvanceSearchSQ VARCHAR(100),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN pPartIds VARCHAR(16000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_MfgNameFormat VARCHAR(100);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO v_MfgNameFormat;  \n" +
                "  \n" +
                "	IF (pIsSummary = FALSE) THEN  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "				SELECT  \n" +
                "					s.id,  \n" +
                "					spd.id AS supplierQuotePartDetID,  \n" +
                "					fun_GetFormattedMfgCode(cm.mfgCode, cm.mfgName, \",v_MfgNameFormat,\") mfgName,  \n" +
                "					cm.mfgCode,  \n" +
                "					s.supplierID,  \n" +
                "					spd.partID,  \n" +
                "					c.mfgPN AS mfgPN,  \n" +
                "					c.mfgcodeID,  \n" +
                "					sc.mfgPN AS supplierPN,  \n" +
                "					spd.supplierPartID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "					IF(spd.isActive = 0, 'Inactive', 'Active') AS isActiveConvertedValueDetail,  \n" +
                "					spd.isActive,  \n" +
                "					spd.scanLabel,  \n" +
                "                    IF(s.quoteStatus = 'D',true, false) AS isDisabledDelete,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricing,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledCopySupplierQuote,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricingHistory,  \n" +
                "                    IF(spd.id IS NULL, false, true) AS isRequirementReference,  \n" +
                "					c.isCustom,  \n" +
                "					sc.isCustom AS isCustomSupplier,  \n" +
                "					rhc.rohsIcon,  \n" +
                "					rhc.name rohsName,  \n" +
                "					rhsc.rohsIcon supplierRohsIcon,  \n" +
                "					rhsc.name supplierRohsName,  \n" +
                "					fun_getPartAttibutesBySupplierQuoteDetailID(spd.id) AS attributesList,  \n" +
                "					fun_getPartPricingCountBySupplierQuoteDetailID(spd.id) AS pricingCount,  \n" +
                "					fun_getUserNameByID(spd.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(spd.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(spd.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(spd.createByRoleId) createdByRole  \n" +
                "				FROM  supplier_quote_parts_det spd  \n" +
                "				LEFT JOIN supplier_quote_mst s ON spd.supplierQuoteMstID = s.id AND spd.isDeleted = 0  \n" +
                "				LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN rfq_rohsmst rhc ON c.id = rhc.id AND rhc.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND c.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "				LEFT JOIN rfq_rohsmst rhsc ON sc.id = rhsc.id AND rhsc.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst cm ON cm.id = c.mfgcodeID  AND cm.isDeleted = 0  \n" +
                "				WHERE s.isDeleted = 0 \");  \n" +
                "	 ELSE  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "			SELECT 	s.id,  \n" +
                "					s.supplierID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "                    IF(s.quoteStatus = 'D', true, false) AS isDisabledDelete,  \n" +
                "					fun_getAddressbyID(s.shippingAddressID) shipTo,  \n" +
                "					fun_getAddressbyID(s.billingAddressID) billTo,  \n" +
                "                    (SELECT COUNT(0) FROM supplier_quote_parts_det WHERE isDeleted = 0 AND supplierQuoteMstID = s.id) AS noOfSupplierPartLine,  \n" +
                "					fun_getUserNameByID(s.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(s.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(s.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(s.createByRoleId) createdByRole  \n" +
                "			FROM   supplier_quote_mst s  \n" +
                "			LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "			WHERE  s.isDeleted = 0  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSupplierIds IS NOT NULL OR pSupplierIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND supplierID in (\"',pSupplierIds,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pQuoteStatus IS NOT NULL OR pQuoteStatus != '') THEn  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND quoteStatus in (\"',pQuoteStatus,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pAdvanceSearchSQ IS NOT NULL OR pAdvanceSearchSQ != '') THEN  \n" +
                "		IF(pSearchType = 'E') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber = \"', pAdvanceSearchSQ , '\" ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber LIKE \"%', pAdvanceSearchSQ ,'%\" ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''' and quoteDate <= ''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate <= ''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPartIds IS NOT NULL OR pPartIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( supplierPartID in (\"',pPartIds,'\") OR partID in (\"',pPartIds,'\") )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuote,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuote,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "   PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5531,'2.00','V1','User Story 38497: Supplier Quote List page - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5531:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2021  ********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customer_packingslip` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customer_packingslip`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempcustomerPackingslip;  \n" +
                "	-- IF(IDs <> '') THEN  \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomerPackingslip as  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_invoice\" else \"\" end as msg FROM customer_packingslip  \n" +
                "			where id IN(',IDs,') and refCustInvoiceID is not null LIMIT 1)  \n" +
                "		');  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "		DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempcustomerPackingslip t)=0 THEN  \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "				SET @SQl2 = CONCAT('update customer_packingslip_otherexpense_details set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"  \n" +
                "				WHERE refCustomerPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,'))) AND isDeleted=0');  \n" +
                "				PREPARE stmt2 FROM @SQL2;  \n" +
                "				EXECUTE stmt2;  \n" +
                "				DEALLOCATE PREPARE stmt2;  \n" +
                "  \n" +
                "				SET @SQl3 = CONCAT('update customer_packingslip_commission_attribute set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"  \n" +
                "				WHERE refCustPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,'))) AND isDeleted=0');  \n" +
                "				PREPARE stmt3 FROM @SQL3;  \n" +
                "				EXECUTE stmt3;  \n" +
                "				DEALLOCATE PREPARE stmt3;  \n" +
                "  \n" +
                "			        SET @SQl6 = CONCAT('update customer_packing_slip_track_number set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCustPackingSlipID IN(',IDs,') and isDeleted=0');  \n" +
                "				PREPARE stmt6 FROM @SQl6;  \n" +
                "				EXECUTE stmt6;  \n" +
                "				DEALLOCATE PREPARE stmt6;  \n" +
                "  \n" +
                "				SET @SQL5 = CONCAT('UPDATE shippedassembly  \n" +
                "						SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"  \n" +
                "						WHERE refCustPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,'))) AND isDeleted=0');  \n" +
                "				PREPARE stmt5 FROM @SQL5;  \n" +
                "				EXECUTE stmt5;  \n" +
                "				DEALLOCATE PREPARE stmt5;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('UPDATE customer_packingslip_det  \n" +
                "						SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"  \n" +
                "						WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,')) AND isDeleted=0');  \n" +
                "				PREPARE stmt1 FROM @SQL1;  \n" +
                "				EXECUTE stmt1;  \n" +
                "				DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl4 = CONCAT('update customer_packingslip set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN (',IDs,') and isDeleted=0');  \n" +
                "				PREPARE stmt4 FROM @SQL4;  \n" +
                "				EXECUTE stmt4;  \n" +
                "				DEALLOCATE PREPARE stmt4;  \n" +
                "  \n" +
                "				SET @SQl7 = CONCAT('update salesorderdet sd set sd.salesOrderDetStatus = 1 , sd.completeStatusReason = \"\" where sd.id in (select refSalesorderDetid from customer_packingslip_det WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,'))) and sd.isDeleted=0');  \n" +
                "				PREPARE stmt7 FROM @SQl7;  \n" +
                "				EXECUTE stmt7;  \n" +
                "				DEALLOCATE PREPARE stmt7;  \n" +
                "				SELECT * FROM tempcustomerPackingslip WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "			COMMIT;  \n" +
                "			ELSE  \n" +
                "			      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomerPackingslip t;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "				FROM tempcustomerPackingslip t1  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "				ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempcustomerPackingslip;  \n" +
                "	-- ELSE  \n" +
                "		/* [S] - Add Time line log for delete sales order mst */  \n" +
                "	-- 	SET @SQl5 = CONCAT('update customer_packingslip set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in (', refrenceIDs ,') and deletedAt is NULL');  \n" +
                "	-- 	PREPARE stmt5 FROM @SQl5;  \n" +
                "	-- 	EXECUTE stmt5;  \n" +
                "	-- 	DEALLOCATE PREPARE  stmt5;  \n" +
                "	-- 	SELECT \"\" TotalCount ,\"\" AS Message FROM customer_packingslip WHERE id IN(refrenceIDs) AND deletedAt IS NULL LIMIT 1;  \n" +
                "	-- END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5532,'2.00','V1','Bug 38901: Sales Order status should be updated based on customer packing slip shipped qty at sales order page - VS'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5532:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2021  *********************************** */
                "DROP FUNCTION IF EXISTS fun_getPOTypeByID;  \n" +
                "CREATE FUNCTION `fun_getPOTypeByID`(  \n" +
                "pSOId INT  \n" +
                ") RETURNS varchar(200) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn VARCHAR(200);  \n" +
                "	SELECT (CASE WHEN isRmaPo THEN 'RMA'  \n" +
                "			WHEN  isBlanketPO THEN 'BLANKET'  \n" +
                "            WHEN isLegacyPO THEN 'LEGACY'  \n" +
                "            ELSE '' END) INTO vReturn  \n" +
                "	FROM salesordermst  \n" +
                "    WHERE isDeleted = 0  \n" +
                "    AND id = pSOId;  \n" +
                "RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-11-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5533,'2.00','V1',' fun_getPOTypeByID- Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5533:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetShippedPackingSlipDetailBySoDetID;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippedPackingSlipDetailBySoDetID`(  \n" +
                "	IN psalesorderDetID INT,  \n" +
                "	IN preleaseLineId INT,  \n" +
                "    IN pSalesOrderID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgNameFormat INT;  \n" +
                "  \n" +
                "    Select fun_getMFGCodeNameFormat() INTO vMfgNameFormat;  \n" +
                "  \n" +
                "    IF preleaseLineId IS NOT NULL THEN  \n" +
                "		SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID  ,  \n" +
                "				cpd.partId,co.mfgPN,co.PIDCodem,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "		WHERE   cpd.refsalesorderdetid= psalesorderDetID AND cpd.shippingId=preleaseLineId AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P';  \n" +
                "    ELSEIF pSalesOrderID IS NOT NULL AND psalesorderDetID IS NULL THEN  \n" +
                "		 SELECT  cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,  \n" +
                "				cp.refCustInvoiceID AS custID, 	SUM(cpd.shipQty) AS shipQty,  \n" +
                "                cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID, fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,  \n" +
                "                co.isCustom,co.custAssyPN,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "			FROM customer_packingslip cp  \n" +
                "            LEFT JOIN customer_packingslip_det cpd on cpd.refCustPackingSlipID = cp.id and cpd.isDeleted = 0  \n" +
                "            LEFT JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "            LEFT JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "			LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "			WHERE   cp.refSalesOrderID=pSalesOrderID  AND  cp.isdeleted = 0  \n" +
                "			AND     cp.transType = 'P'  \n" +
                "            group by cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID,  \n" +
                "					cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name`, rr.rohsIcon,co.isCustom,cpd.shippingNotes , cpd.internalComment;  \n" +
                "    ELSE  \n" +
                "        SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID,  \n" +
                "				cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,co.isCustom,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "		WHERE   cpd.refsalesorderdetid=psalesorderDetID  AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-11-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5534,'2.00','V1','Sproc_GetShippedPackingSlipDetailBySoDetID - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5534:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getSalesOrderListAgainstShipment;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderListAgainstShipment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pCustomerID INT,  \n" +
                "    IN pSearchText VARCHAR(1000) ,  \n" +
                "    IN pSoDetCompletedStatus TINYINT,  \n" +
                "    IN pAllowToUpdateComment TINYINT ,  \n" +
                "    IN pSortByColumn TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE headerWhereClause VARCHAR(3000);  \n" +
                "   -- DECLARE detailWhereClause VARCHAR(1000);  \n" +
                "	DECLARE vOrderBy VARCHAR(200);  \n" +
                "   	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pSortByColumn = 1 THEN  \n" +
                "		SET vOrderBy =' order by customerName ' ;  \n" +
                "    ELSEIF pSortByColumn = 2 THEN  \n" +
                "		SET vOrderBy =' order by poNumber ' ;  \n" +
                "    ELSE  \n" +
                "		SET vOrderBy =' order by soId Desc ' ;  \n" +
                "    END IF;  \n" +
                "    IF pCustomerID IS NOT NULL THEN  \n" +
                "		SET headerWhereClause = concat(\" (salesOrder.customerID=\",pCustomerID,\") \");  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = ' 1=1 ';  \n" +
                "    END IF;  \n" +
                "    /*IF pIncludeCompletedPO IS NOT NULL OR pIncludeCompletedPO  = 1 THEN  \n" +
                "  \n" +
                "    END IF;*/  \n" +
                "    IF pSearchText IS NOT NULL  THEN  \n" +
                "		SET headerWhereClause = CONCAT(headerWhereClause ,\" AND  (salesOrder.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.poNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.customerName like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.shippingComment like '%\",pSearchText,\"%' \",  \n" +
                "                                    CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR salesOrder.internalComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
                "                                    \" or salesOrder.soId in (select refSalesOrderID from salesorderdet  sodet  \n" +
                "														 join component comp on comp.id = sodet.partID and sodet.isDeleted = 0  \n" +
                "                                                         left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
                "																	from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sodet.id  and workOrderDet.partID = sodet.partId  \n" +
                "														 where sodet.isDeleted = 0	and (comp.PIDCode like '%\",pSearchText,\"%' OR comp.mfgPN like '%\",pSearchText,\"%'  \n" +
                "																OR comp.nickName like '%\",pSearchText,\"%' OR sodet.woComment like '%\",pSearchText,\"%'  \n" +
                "                                                                OR sodet.internalComment like '%\",pSearchText,\"%'\",  \n" +
                "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.remark like '%\",pSearchText,\"%'\") else '' END,  \n" +
                "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.releaseLevelComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
                "                                                                \" OR workOrderDet.woList like '\",pSearchText,\"%'  )	))\");  \n" +
                "  \n" +
                "    END IF;  \n" +
                "-- select headerWhereClause;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	SET @SQLStatement1 = concat(\"CREATE TEMPORARY TABLE temp_so_mst AS select soId, salesOrderNumber,  \n" +
                "						soDate, poNumber, poDate, poRevision, poRevisionDate,  \n" +
                "						sorevision, ifnull(shippingComment,'-') shippingComment, internalComment, isBlanketPO, isLegacyPO, isRmaPO,  \n" +
                "                        soStatus, soStatusText,  \n" +
                "						customerID, mfgCode, mfgName, customerName,  \n" +
                "                        lastCPSId,lastCPSNumber,lastCPSDate,ifnull(lastCPSComment,'-') lastCPSComment,CPSCount,  \n" +
                "                        shippingAddressID,defaultAddress, companyName,personName,division,street1,street2, street3,city, state,  \n" +
                "						postcode,countryName,email,contact,phExtension,faxCountryCode, faxNumber , workingStatus, poType  \n" +
                "    from (select som.id as soId, som.salesOrderNumber,  \n" +
                "            som.soDate, som.poNumber, som.poDate, som.poRevision, som.poRevisionDate,  \n" +
                "            som.revision as sorevision , som.shippingComment, som.internalComment,  \n" +
                "            som.isBlanketPO, som.isLegacyPO, som.isRmaPO, som.customerID,  \n" +
                "            som.status AS soStatus ,(case when som.`status` = 1 then 'Published' else 'Draft' end) soStatusText,  \n" +
                "            cust.mfgCode, cust.mfgName, fun_GetFormattedMfgCode(cust.mfgCode,cust.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
                "            LAST_VALUE(cps.id) over (partition by som.id) lastCPSId,  \n" +
                "            LAST_VALUE(cps.packingSlipNumber) over (partition by som.id) lastCPSNumber,  \n" +
                "            LAST_VALUE(cps.packingSlipDate) over (partition by som.id) lastCPSDate,  \n" +
                "			LAST_VALUE(cps.packingSlipComment) over (partition by som.id) lastCPSComment,  \n" +
                "            COUNT(cps.id) over (partition by som.id) CPSCount,  \n" +
                "            som.shippingAddressID,custAddr.isDefault as defaultAddress,  \n" +
                "            custAddr.companyName,custAddr.personName,custAddr.division,custAddr.street1,custAddr.street2, custAddr.street3,custAddr.city, custAddr.state,  \n" +
                "            custAddr.postcode,country.countryName,custAddr.email,custAddr.contact,custAddr.phExtension,  \n" +
                "            custAddr.faxCountryCode, custAddr.faxNumber ,  \n" +
                "            fun_GetSalesOrderHeaderWorkStatus(som.id) workingStatus,  \n" +
                "            fun_getPOTypeByID(som.id) poType  \n" +
                "	from salesordermst som  \n" +
                "    join mfgcodemst cust on cust.id = som.customerID and cust.isDeleted = 0  \n" +
                "    left join customer_addresses custAddr on  custAddr.customerId = som.customerID and custAddr.id = som.shippingAddressID and custAddr.isDeleted = 0  \n" +
                "    left join countrymst country on country.countryID = custAddr.countryID and country.isDeleted = 0  \n" +
                "    left join customer_packingslip cps  on cps.refSalesOrderID = som.id and cps.isDeleted = 0 and cps.transType = 'P'  \n" +
                "    where som.isDeleted = 0  \n" +
                "    ) salesOrder  \n" +
                "    where (salesOrder.workingStatus in (1,-1) OR  \n" +
                "			salesOrder.workingStatus = \",ifnull(pSoDetCompletedStatus,1),\")\",  \n" +
                "            \" and \", headerWhereClause,  \n" +
                "    \"  group by soId, salesOrderNumber,soDate, poNumber, poDate, poRevision, poRevisionDate, sorevision, shippingComment,  \n" +
                "		internalComment, isBlanketPO, isLegacyPO, isRmaPO, customerID, mfgCode, mfgName, customerName \" ,  \n" +
                "    vOrderBy , rowNumWhere) ;  \n" +
                "  \n" +
                "-- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, tbdComment, internalComment,  \n" +
                "				shippingComment, isCancle,partDescription,salesOrderDetStatus,custPOLineNumber,  \n" +
                "				PIDCode, mfgPN,mfgcodeID,mfrName, rohsName, rohsIcon,  nickName,  partType,  isCustom,custAssyPN,partSpecialNote,  \n" +
                "                po_TBDQty,ifnull(shippedQty,0) AS shippedQty , woComment  ,  \n" +
                "                cancelStatus, isHotJob,isDetHalt,  \n" +
                "                soWorkingStatus, materialTentitiveDocDate  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment as tbdComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                ifnull(sod.partDescription,'-') partDescription,  \n" +
                "                sod.salesOrderDetStatus,  \n" +
                "                sod.custPOLineNumber,  \n" +
                "				co.PIDCode,  \n" +
                "				co.mfgPN,  \n" +
                "                co.mfgcodeID,  \n" +
                "                fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName,  \n" +
                "				rohs.name AS rohsName,  \n" +
                "				rohs.rohsIcon,  \n" +
                "                co.nickName,  \n" +
                "                co.partType,  \n" +
                "                co.isCustom,  \n" +
                "                co.custAssyPN ,  \n" +
                "                co.specialNote partSpecialNote,  \n" +
                "				(sod.qty - soDetQty.relQty) po_TBDQty,  \n" +
                "                cpd.shippedQty,  \n" +
                "                ifnull(sod.woComment, workOrderDet.woList) woComment  ,  \n" +
                "                sod.isCancle cancelStatus,  \n" +
                "                sod.isHotJob,  \n" +
                "                (case when holdTrans.holdCnt > 0 then 1 else 0 end ) isDetHalt,  \n" +
                "                (CASE 	WHEN (sod.isCancle = 1) THEN 'Canceled'  \n" +
                "						WHEN (sod.`salesOrderDetStatus` = 1)   THEN 'In Progress'  \n" +
                "						ELSE 'Completed'  END) soWorkingStatus,  \n" +
                "                materialTentitiveDocDate  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "        left join (select sDetID, sum(qty) relQty from salesshippingmst where isDeleted = 0  group by sDetID) as soDetQty on  soDetQty.sDetID = sod.id  \n" +
                "        left join (select refSalesorderDetid , sum(cpd.shipQty) shippedQty  \n" +
                "					from customer_packingslip_det  cpd  \n" +
                "					join customer_packingslip cps on cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0  \n" +
                "                    where cpd.isDeleted = 0 and cps.transType='P' group by refSalesorderDetid) cpd on cpd.refSalesorderDetid = sod.id  \n" +
                "		left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
                "					from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sod.id  and workOrderDet.partID = sod.partId  \n" +
                "		left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "        left join mfgcodemst partMfg on partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
                "        left join (select refTransid ,count(1) holdCnt from holdunholdtrans where refType='PO' and isDeleted = 0 and endDate is NUll and `status` = 'H' group by refTransid) holdTrans  \n" +
                "			on holdTrans.refTransid = sod.id  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_rel_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID,releaseId, partID, lineID, custPOQty,  internalComment,  releaseLineComment,  \n" +
                "				shippingComment, isCancle, releaseNumber, promisedShipDate, soReleaseQty,  \n" +
                "                refCustPackingSlipID, packingSlipDate,packingSlipDetId,ifnull(shippedQty,0) AS shippedQty,  \n" +
                "                 cpsDetailCnt, cpsIndex ,isReadyToShip  ,cpsDetailShippedQty  ,  \n" +
                "                (case when  (soReleaseQty - cpsDetailShippedQty) <= 0 then 1 else 0 end) relCompletedStatus,  \n" +
                "                cpsSubStatus  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "                soship.releaseNotes releaseLineComment,  \n" +
                "				sod.isCancle,  \n" +
                "                soship.shippingID releaseId,  \n" +
                "				soship.releaseNumber,  \n" +
                "				soship.promisedShipDate,  \n" +
                "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
                "				cpd.refCustPackingSlipID,  \n" +
                "                cpd.id packingSlipDetId,  \n" +
                "				cpd.shipQty AS shippedQty,  \n" +
                "                cp.packingSlipDate ,  \n" +
                "                SUM(cpd.shipQty) over (partition by soship.shippingID,sod.id ) cpsDetailShippedQty,  \n" +
                "                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
                "                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex,  \n" +
                "                soship.isReadyToShip,  \n" +
                "                cp.subStatus AS cpsSubStatus  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
                "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
                "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
                "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	/*SET @SQLStatement1 = CONCAT (\"SELECT mst.* from temp_so_mst mst  \n" +
                "    LEFT JOIN temp_so_detail det  on det.refSalesOrderID = mst.soId  \n" +
                "    where det.woComment like '%\",pSearchText,\"%'\");  \n" +
                "-- select @SQLStatement1 ;  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  */  \n" +
                "	SELECT * from temp_so_mst;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT soDetail.* from temp_so_detail AS soDetail  \n" +
                "								left join temp_so_mst mst on mst.soId = soDetail.refSalesOrderID  \n" +
                "                                order by soDetail.salesOrderDetStatus, soDetail.soDetId\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " 	SELECT * from temp_so_rel_detail  \n" +
                "    order by relCompletedStatus , soDetId;  \n" +
                "  \n" +
                "	/*DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  */  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-11-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5535,'2.00','V1','Sproc_getSalesOrderListAgainstShipment - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5535:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-11-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetShippedPackingSlipDetailBySoDetID;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippedPackingSlipDetailBySoDetID`(  \n" +
                "	IN psalesorderDetID INT,  \n" +
                "	IN preleaseLineId INT,  \n" +
                "    IN pSalesOrderID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgNameFormat INT;  \n" +
                "  \n" +
                "    Select fun_getMFGCodeNameFormat() INTO vMfgNameFormat;  \n" +
                "  \n" +
                "    IF preleaseLineId IS NOT NULL THEN  \n" +
                "		SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID  ,  \n" +
                "				cpd.partId,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "		WHERE   cpd.refsalesorderdetid= psalesorderDetID AND cpd.shippingId=preleaseLineId AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P';  \n" +
                "    ELSEIF pSalesOrderID IS NOT NULL AND psalesorderDetID IS NULL THEN  \n" +
                "		 SELECT  cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,  \n" +
                "				cp.refCustInvoiceID AS custID, 	SUM(cpd.shipQty) AS shipQty,  \n" +
                "                cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID, fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,  \n" +
                "                co.isCustom,co.custAssyPN,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "			FROM customer_packingslip cp  \n" +
                "            LEFT JOIN customer_packingslip_det cpd on cpd.refCustPackingSlipID = cp.id and cpd.isDeleted = 0  \n" +
                "            LEFT JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "            LEFT JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "			LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "			WHERE   cp.refSalesOrderID=pSalesOrderID  AND  cp.isdeleted = 0  \n" +
                "			AND     cp.transType = 'P'  \n" +
                "            group by cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID,  \n" +
                "					cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name`, rr.rohsIcon,co.isCustom,cpd.shippingNotes , cpd.internalComment;  \n" +
                "    ELSE  \n" +
                "        SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID,  \n" +
                "				cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,co.isCustom,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "		WHERE   cpd.refsalesorderdetid=psalesorderDetID  AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-11-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5536,'2.00','V1','Sproc_GetShippedPackingSlipDetailBySoDetID - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5536:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-11-2021  *********************************** */
                "DROP FUNCTION IF EXISTS fun_getPOTypeByID;  \n" +
                "CREATE FUNCTION `fun_getPOTypeByID`(  \n" +
                "pSOId INT  \n" +
                ") RETURNS varchar(200) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn VARCHAR(200);  \n" +
                "	SELECT (CASE WHEN isRmaPo THEN 'RMA'  \n" +
                "			WHEN  isBlanketPO THEN 'Blanket'  \n" +
                "            WHEN isLegacyPO THEN 'LEGACY'  \n" +
                "            ELSE '' END) INTO vReturn  \n" +
                "	FROM salesordermst  \n" +
                "    WHERE isDeleted = 0  \n" +
                "    AND id = pSOId;  \n" +
                "RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-11-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5537,'2.00','V1','fun_getPOTypeByID - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5537:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2021  ********************************** */
                "INSERT INTO `user_pref_configuration_mst` (`id`, `configName`, `configCode`, `createdAt`, `createdBy`, `updatedAt`,`updatedBy`,`createByRoleId`,`updateByRoleId`)  \n" +
                "VALUES (-11, 'Supplier Quote List Tab ID', 'defaultSupplierQuoteListTabID', fun_DatetimetoUTCDateTime(), 1, fun_DatetimetoUTCDateTime(), 1, 1, 1);  \n" +
                /* **************************** New Script -> 23-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5538,'2.00','V1','Bug 38979: QA Testing findings for User Story 38497: Supplier Quote List page - Issue2 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5538:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-11-2021  ********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveDuplicateSalesOrder` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveDuplicateSalesOrder`(  \n" +
                "		IN pSOID INT,  \n" +
                "		IN pSONumber VARCHAR(100),  \n" +
                "		IN pPONumber VARCHAR(100),  \n" +
                "		IN pPODate DATE,  \n" +
                "		IN pSODate DATE,  \n" +
                "		IN puserID VARCHAR(10),  \n" +
                "		IN puserRoleID VARCHAR(10),  \n" +
                "		IN pSerialNumber VARCHAR(50),  \n" +
                "		IN pisKeepPO TINYINT,  \n" +
                "		IN ppoRevision VARCHAR(8),  \n" +
                "		IN ppoRevisionDate DATE  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		 DECLARE vNewSOID INT;  \n" +
                "		 DECLARE vIndex INT;  \n" +
                "		 DECLARE vcount INT;  \n" +
                "		 DECLARE vsalesIndex INT;  \n" +
                "		 DECLARE vsalescount INT;  \n" +
                "		 DECLARE vOldSalesOrderDetID INT;  \n" +
                "		 DECLARE vNewSalesOrderDetID INT;  \n" +
                "		 DECLARE vOldSalesCommissionID INT;  \n" +
                "		 DECLARE vNewSalesCommissionID INT;  \n" +
                "		 DECLARE vPartID INT;  \n" +
                "		 DECLARE vOldPODate DATE;  \n" +
                "  \n" +
                "		 -- get old po date  \n" +
                "		 SELECT poDate INTO vOldPODate FROM salesordermst WHERE id=pSOID;  \n" +
                "			-- insert sales order header detail  \n" +
                "		INSERT INTO salesordermst(salesOrderNumber,poNumber,poDate,customerID,contactPersonID,billingAddressID,shippingAddressID,shippingMethodID,revision,termsID,`status`,createdBy,  \n" +
                "		updatedBy,soDate,revisionChangeNote,documentPath,createByRoleId,updateByRoleId,salesCommissionTo,intermediateShipmentId,freeOnBoardId,internalComment,serialNumber,carrierID,carrierAccountNumber,  \n" +
                "		poRevision,isBlanketPO,isLegacyPO,isRmaPO,shippingComment,poRevisionDate)  \n" +
                "		SELECT pSONumber,pPONumber,pPODate,customerID,contactPersonID,billingAddressID,shippingAddressID,shippingMethodID,'00',termsID,0,puserID,  \n" +
                "		 puserID,pSODate,'',documentPath,puserRoleID,puserRoleID,salesCommissionTo,intermediateShipmentId,freeOnBoardId,internalComment,pSerialNumber,carrierID,carrierAccountNumber,  \n" +
                "		 ppoRevision,0,0,0,shippingComment,ppoRevisionDate FROM salesordermst WHERE id=pSOID;  \n" +
                "  \n" +
                "				SELECT LAST_INSERT_ID() INTO vNewSOID;  \n" +
                "  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempSalesOrder AS  \n" +
                "  \n" +
                "				SELECT sod.id,row_number() over (PARTITION BY sod.refsalesOrderID) rowNumber,sod.partID FROM salesorderdet sod  \n" +
                "					JOIN component c ON c.id = sod.partID AND c.partStatus != -3  \n" +
                "					WHERE sod.refsalesOrderID=pSOID AND sod.isdeleted=0 ORDER BY sod.partCategory DESC;  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO vcount FROM tempSalesOrder;  \n" +
                "  \n" +
                "				SET vIndex=1;  \n" +
                "  \n" +
                "			  WHILE(vIndex <= vcount) DO  \n" +
                "			   -- get old sales order detail id  \n" +
                "				SELECT id,partID INTO vOldSalesOrderDetID,vPartID FROM tempSalesOrder WHERE rowNumber=(vIndex);  \n" +
                "  \n" +
                "				-- insert new sales order detail  \n" +
                "	  IF(pisKeepPO=1)THEN  \n" +
                "				INSERT INTO salesorderdet(refSalesOrderID,qty,price,shippingQty,remark,createdBy,updatedBy,materialTentitiveDocDate,prcNumberofWeek,isHotJob,materialDueDate,  \n" +
                "				partID,isCancle,tentativeBuild,uom,lineID,createByRoleId,updateByRoleId,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,custPOLineNumber,partCategory,salesOrderDetStatus,  \n" +
                "				 isSkipKitCreation,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType)  \n" +
                "  \n" +
                "			 SELECT vNewSOID,qty,price,shippingQty,remark,puserID,puserID,DATE_ADD( pPODate, INTERVAL DATEDIFF(materialTentitiveDocDate, vOldPODate) DAY),prcNumberofWeek,isHotJob,DATE_ADD( pPODate, INTERVAL DATEDIFF(materialDueDate, vOldPODate) DAY),  \n" +
                "			  partID,0,tentativeBuild,uom,lineID,puserRoleID,puserRoleID,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,custPOLineNumber,partCategory,1,  \n" +
                "			  1,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType FROM salesorderdet WHERE id=vOldSalesOrderDetID;  \n" +
                "	  ELSE  \n" +
                "	  INSERT INTO salesorderdet(refSalesOrderID,qty,price,shippingQty,remark,createdBy,updatedBy,materialTentitiveDocDate,prcNumberofWeek,isHotJob,materialDueDate,  \n" +
                "				partID,isCancle,tentativeBuild,uom,lineID,createByRoleId,updateByRoleId,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,custPOLineNumber,partCategory,salesOrderDetStatus,  \n" +
                "				 isSkipKitCreation,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType)  \n" +
                "  \n" +
                "			 SELECT vNewSOID,sod.qty,sod.price,sod.shippingQty,  \n" +
                "			 (SELECT GROUP_CONCAT(im.requirement SEPARATOR '  \n" +
                "	')  FROM componenet_inspection_requirement_det cid  \n" +
                "			   JOIN inspection_mst im ON cid.inspectionRequirementId=im.id AND cid.isdeleted=0  \n" +
                "			   WHERE cid.partID=sod.partID AND im.requiementType='C' AND cid.category='S' AND im.isdeleted=0),puserID,puserID,DATE_ADD( pPODate, INTERVAL DATEDIFF(sod.materialTentitiveDocDate, vOldPODate) DAY),sod.prcNumberofWeek,sod.isHotJob,DATE_ADD( pPODate, INTERVAL DATEDIFF(sod.materialDueDate, vOldPODate) DAY),  \n" +
                "			   sod.partID,0,sod.tentativeBuild,sod.uom,sod.lineID,puserRoleID,puserRoleID,sod.refRFQGroupID,sod.refRFQQtyTurnTimeID,sod.salesCommissionTo,sod.custPOLineNumber,sod.partCategory,1,  \n" +
                "			   1,c.mfgPNDescription,sod.quoteNumber,(SELECT GROUP_CONCAT(arc.comment SEPARATOR '  \n" +
                "	')  FROM assembly_revision_comments arc  \n" +
                "			   WHERE arc.partID=sod.partID AND arc.isdeleted=0),sod.quoteFrom,sod.refAssyQtyTurnTimeID,sod.assyQtyTurnTimeText,sod.isCustomerConsign,sod.originalPOQty,sod.frequency,sod.frequencyType FROM salesorderdet sod JOIN component c ON c.id=sod.partID  \n" +
                "			 WHERE sod.id=vOldSalesOrderDetID;  \n" +
                "			 END IF;  \n" +
                "  \n" +
                "			 -- new purchase order detail id  \n" +
                "			 SELECT LAST_INSERT_ID() INTO vNewSalesOrderDetID;  \n" +
                "  \n" +
                "			  -- to save release details  \n" +
                "				  INSERT INTO salesshippingmst (sDetID,qty,unitMeaser,shippingDate,shippingMethodID,shippingAddressID,description,priority,createdBy,updatedBy,  \n" +
                "		 releaseNotes,promisedShipDate,createByRoleId,updateByRoleId,releaseNumber,requestedDockDate,carrierID,carrierAccountNumber,customerReleaseLine,  \n" +
                "		 revisedRequestedDockDate,revisedRequestedShipDate,revisedRequestedPromisedDate,isAgreeToShip)  \n" +
                "  \n" +
                "		SELECT vNewSalesOrderDetID,qty,unitMeaser,DATE_ADD( pPODate, INTERVAL DATEDIFF(shippingDate, vOldPODate) DAY),shippingMethodID,shippingAddressID,description,priority,puserID,puserID,  \n" +
                "		releaseNotes, DATE_ADD( pPODate, INTERVAL DATEDIFF(promisedShipDate, vOldPODate) DAY),puserRoleID,puserRoleID,releaseNumber,DATE_ADD( pPODate, INTERVAL DATEDIFF(requestedDockDate, vOldPODate) DAY),carrierID,carrierAccountNumber,customerReleaseLine,  \n" +
                "		  DATE_ADD( pPODate, INTERVAL DATEDIFF(revisedRequestedDockDate, vOldPODate) DAY),DATE_ADD( pPODate, INTERVAL DATEDIFF(revisedRequestedShipDate, vOldPODate) DAY),DATE_ADD( pPODate, INTERVAL DATEDIFF(revisedRequestedPromisedDate, vOldPODate) DAY),isAgreeToShip  \n" +
                "		FROM  \n" +
                "		salesshippingmst  \n" +
                "		WHERE sDetID= vOldSalesOrderDetID AND isdeleted=0;  \n" +
                "  \n" +
                "				-- insert other charges detail for new po date  \n" +
                "				 INSERT INTO salesorder_otherexpense_details(refSalesOrderDetID,partID,qty,price,frequency,lineComment,lineInternalComment,createdBy,updatedBy,createByRoleId,updateByRoleId,frequencyType)  \n" +
                "			 SELECT  vNewSalesOrderDetID,partID,qty,price,frequency,lineComment,lineInternalComment,puserID,puserID,puserRoleID,puserRoleID,frequencyType FROM salesorder_otherexpense_details  \n" +
                "			 WHERE refSalesOrderDetID=vOldSalesOrderDetID AND isdeleted=0;  \n" +
                "			            -- sales commission details  \n" +
                "			            CREATE TEMPORARY TABLE IF NOT EXISTS tempSalesCommissionDetails AS  \n" +
                "  \n" +
                "				SELECT id,row_number() over (PARTITION BY refSalesOrderDetID) rowNumber FROM salesorderdet_commission_attribute_mstdet  \n" +
                "					WHERE refSalesOrderDetID=vOldSalesOrderDetID AND isdeleted=0;  \n" +
                "  \n" +
                "				      SELECT COUNT(1) INTO vsalescount FROM tempSalesCommissionDetails;  \n" +
                "  \n" +
                "				      SET vsalesIndex=1;  \n" +
                "  \n" +
                "				      WHILE(vsalesIndex <= vsalescount) DO  \n" +
                "				      SELECT id INTO vOldSalesCommissionID FROM tempSalesCommissionDetails WHERE rowNumber=(vsalesIndex);  \n" +
                "  \n" +
                "				        INSERT INTO salesorderdet_commission_attribute_mstdet(refSalesOrderDetID,unitPrice,commissionPercentage,commissionValue,quoted_commissionPercentage,quoted_commissionValue,quoted_unitPrice,poQty,  \n" +
                "				        quotedQty,`type`,commissionCalculateFrom,refComponentSalesPriceBreakID,partID,salesCommissionNotes,createdBy,updatedBy,createByRoleId,updateByRoleId,rfqAssyID)  \n" +
                "  \n" +
                "				        SELECT vNewSalesOrderDetID,unitPrice,commissionPercentage,commissionValue,quoted_commissionPercentage,quoted_commissionValue,quoted_unitPrice,poQty,  \n" +
                "				        quotedQty,`type`,commissionCalculateFrom,refComponentSalesPriceBreakID,partID,salesCommissionNotes,puserID,puserID,puserRoleID,puserRoleID,rfqAssyID FROM salesorderdet_commission_attribute_mstdet  \n" +
                "				        WHERE id=vOldSalesCommissionID;  \n" +
                "  \n" +
                "				        SELECT LAST_INSERT_ID() INTO vNewSalesCommissionID;  \n" +
                "				        INSERT INTO salesorderdet_commission_attribute(refSalesorderdetID,refSalesCommissionID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,org_commissionPercentage,org_commissionValue,createdBy,updatedBy,  \n" +
                "				        createByRoleId,updateByRoleId,category,partID,refComponentSalesPriceBreakID,org_unitPrice)  \n" +
                "				        SELECT vNewSalesOrderDetID,vNewSalesCommissionID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,org_commissionPercentage,org_commissionValue,puserID,puserID,  \n" +
                "				        puserRoleID,puserRoleID,category,partID,refComponentSalesPriceBreakID,org_unitPrice FROM salesorderdet_commission_attribute  \n" +
                "				        WHERE refSalesCommissionID=vNewSalesCommissionID AND isdeleted=0;  \n" +
                "  \n" +
                "				      SET vsalesIndex  =vsalesIndex+1;  \n" +
                "				      END WHILE;  \n" +
                "                                  -- end sales commission  \n" +
                "				  SET vIndex  =vIndex+1;  \n" +
                "			  END WHILE;  \n" +
                "                       				-- update sales order detail for other charges  \n" +
                "                       		CREATE TEMPORARY TABLE IF NOT EXISTS tempOtherCharges AS  \n" +
                "                       		     SELECT sod.id AS sdetid,sod.refSODetID,sod.lineID FROM salesorderdet sod WHERE sod.refSalesOrderID=pSOID AND sod.isdeleted=0;  \n" +
                "  \n" +
                "                       		     -- update sales order detail for other charges  \n" +
                "                       		CREATE TEMPORARY TABLE IF NOT EXISTS tempNewOtherCharges AS  \n" +
                "                       		     SELECT sod.id AS sdetid,sod.refSODetID,sod.lineID FROM salesorderdet sod WHERE sod.refSalesOrderID=vNewSOID AND sod.isdeleted=0;  \n" +
                "  \n" +
                "                       		   CREATE TEMPORARY TABLE IF NOT EXISTS tempOtherChargesDet AS  \n" +
                "                       		   SELECT * FROM tempOtherCharges;  \n" +
                "  \n" +
                "				UPDATE salesorderdet AS sd ,tempOtherCharges AS b  \n" +
                "				SET sd.refSODetID=(SELECT tno.sdetid FROM tempNewOtherCharges tno WHERE tno.lineID IN (SELECT sdd.lineID FROM tempOtherChargesDet sdd WHERE sdd.sdetid=b.refSODetID))  \n" +
                "				WHERE sd.lineID=b.lineID AND sd.refSalesOrderID=vNewSOID AND sd.isdeleted=0;  \n" +
                "  \n" +
                "				-- update sales order release line  \n" +
                "				UPDATE salesorderdet sd SET sd.refSOReleaseLineID=(SELECT ss.shippingID FROM salesshippingmst ss WHERE ss.sDetID=sd.id LIMIT 1)  \n" +
                "				WHERE sd.frequency=2 AND sd.refSODetID IS NOT NULL AND sd.refSalesOrderID=vNewSOID;  \n" +
                "  \n" +
                "				-- update sales order release line  \n" +
                "				UPDATE salesorder_otherexpense_details sd SET sd.refReleaseLineID=(SELECT ss.shippingID FROM salesshippingmst ss WHERE ss.sDetID=sd.refSalesOrderDetID LIMIT 1)  \n" +
                "				WHERE sd.frequency=2 AND sd.refSalesOrderDetID IN (SELECT sdt.id FROM salesorderdet sdt WHERE sdt.refSalesOrderID=vNewSOID);  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempOtherCharges;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS  tempSalesCommissionDetails;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS   tempSalesOrder;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS  tempOtherChargesDet;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempNewOtherCharges;  \n" +
                "			  SELECT   vNewSOID;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 25-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5539,'2.00','V1','Alter procedure Sproc_SaveDuplicateSalesOrder-CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5539:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-11-2021 *********************************** */
                "CREATE TABLE mfgcode_standard (  \n" +
                "	`id` INT NOT NULL AUTO_INCREMENT,  \n" +
                "	`standardID` INT NOT NULL,  \n" +
                "	`refStandardClassId` INT,  \n" +
                "	`refMfgCodeID` INT NOT NULL,  \n" +
                "	`standardStatus` VARCHAR(5) NOT NULL DEFAULT 'NA',  \n" +
                "    `lastApprovalDate` DATE,  \n" +
                "    `expDate` DATE,  \n" +
                "    `createdBy` VARCHAR(255) NOT NULL,  \n" +
                "	`createdAt` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "	`updatedBy` VARCHAR(255) DEFAULT NULL,  \n" +
                "	`updatedAt` DATETIME DEFAULT CURRENT_TIMESTAMP,  \n" +
                "    `deletedAt` DATETIME DEFAULT NULL,  \n" +
                "	`deletedBy` VARCHAR(255) DEFAULT NULL,  \n" +
                "	`isDeleted` TINYINT NOT NULL DEFAULT 0,  \n" +
                "	`createByRoleId` INT DEFAULT NULL,  \n" +
                "	`updateByRoleId` INT DEFAULT NULL,  \n" +
                "	`deleteByRoleId` INT DEFAULT NULL,  \n" +
                "	PRIMARY KEY (id)  \n" +
                ") ;  \n" +
                /* **************************** New Script -> 26-11-2021 *********************************** */
                "ALTER TABLE `mfgcode_standard`  \n" +
                "ADD INDEX `FK_mfgcode_standard_mfgCodemst_id_idx` (`refMfgCodeID` ASC) VISIBLE;  \n" +
                /* **************************** New Script -> 26-11-2021 *********************************** */
                "ALTER TABLE `mfgcode_standard`  \n" +
                "ADD CONSTRAINT `FK_mfgcode_standard_mfgCodemst_id`  \n" +
                "  FOREIGN KEY (`refMfgCodeID`)  \n" +
                "  REFERENCES `mfgcodemst` (`id`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                /* **************************** Add Script Version -> 26-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5540,'2.00','V1',' User Story 37231: ADD NEW TAB called STANDARDS under Supplier master - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5540:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-11-2021 *********************************** */
                "SELECT pageID INTO @pageID FROM page_detail WHERE pageName = 'Manage Supplier';  \n" +
                "insert into page_detail (pageName, RO, RW, pageRoute, pageURL, menuName, parentPageID, hasChild, iconClass, isActive, createdBy, isDeleted, isDisplay, displayMenuName, isAllowAsHomePage,isPopup, isHideFromMenuList, isReadOnlyDeveloped)  \n" +
                "values ('Manage Supplier Standards', 0, 0, 'app.supplier.managesupplier.standards', '/standards/:customerType/:cid', 'Manage Supplier Standards', @pageID, 0, 't-icons-supplier add-icon', 1, 1, 0, 1, 'Supplier', 0, 0, 0, 0);  \n" +
                /* **************************** New Script -> 26-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllStandardsByMfgCodeID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllStandardsByMfgCodeID`(  \n" +
                "	IN pMfgCodeID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "    SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "    SELECT ms.id,  \n" +
                "		ms.standardID,  \n" +
                "		ms.refStandardClassId,  \n" +
                "        CASE WHEN ms.refStandardClassId IS NOT NULL THEN CONCAT(cs.fullName, ' | ', sc.className) ELSE cs.fullName END standardName,  \n" +
                "        ms.standardStatus,  \n" +
                "        CASE WHEN ms.standardStatus='CO' THEN 'Compliant' WHEN ms.standardStatus='CR' THEN 'Certified' ELSE 'N/A' END standardStatusName,  \n" +
                "        ms.lastApprovalDate,  \n" +
                "        ms.expDate,  \n" +
                "        fun_getUserNameByID(ms.createdBy) createdBy,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(ms.createdAt, vTimeZone, vDateTimeDisplayFormat) createdAt,  \n" +
                "        fun_getUserNameByID(ms.updatedBy) updatedBy,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(ms.updatedAt, vTimeZone, vDateTimeDisplayFormat) updatedAt,  \n" +
                "        fun_getRoleByID(ms.createByRoleId) createByRoleId,  \n" +
                "        fun_getRoleByID(ms.updateByRoleId) updateByRoleId  \n" +
                "	FROM mfgcode_standard ms  \n" +
                "		LEFT JOIN certificate_standards cs ON cs.certificateStandardID = ms.standardID  \n" +
                "		LEFT JOIN standard_class sc ON sc.classID = ms.refStandardClassId  \n" +
                "    WHERE ms.isDeleted=0 AND ms.refMfgCodeID = pMfgCodeID;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5541,'2.00','V1',' User Story 37231: ADD NEW TAB called STANDARDS under Supplier master - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5541:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_purchase_order_det`;  \n" +
                /* **************************** New Script -> 26-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(  \n" +
                "    IN tableName VARCHAR(255),  \n" +
                "    IN IDs LONGTEXT,  \n" +
                "    IN deletedBy INT,  \n" +
                "    IN entityID VARCHAR(255),  \n" +
                "    IN refrenceIDs LONGTEXT,  \n" +
                "    IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "IF tableName=\"employees\" THEN  \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"eco_type_category\" THEN  \n" +
                "     CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"eco_type_values\" THEN  \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customers\" THEN  \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"certificate_standards\" THEN  \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"department\" THEN  \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"genericcategory\" THEN  \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"equipment\" THEN  \n" +
                "    CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"master_templates\" THEN  \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"operations\" THEN  \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder\" THEN  \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"roles\" THEN  \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"standard_class\" THEN  \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"dataelement\" THEN  \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component\" THEN  \n" +
                "    CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_cluster\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_part\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_employee\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"entity\" THEN  \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"salesordermst\" THEN  \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"mfgcodemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN  \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"shippedassembly\" THEN  \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN  \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"br_label_template\" THEN  \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"measurement_types\" THEN  \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"uoms\" THEN  \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"jobtypes\" THEN  \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfqtype\" THEN  \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"reasonmst\" THEN  \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_sid_stock\" THEN  \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"chart_templatemst\" THEN  \n" +
                "    CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"shipping_requestdet\" THEN  \n" +
                "    CALL Sproc_checkDelete_shipping_requestdet(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"chart_rawdata_category\" THEN  \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_lineitems\" THEN  \n" +
                "      CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"requirement\" THEN  \n" +
                "    CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customer_addresses\" THEN  \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfqforms\" THEN  \n" +
                "    CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN  \n" +
                "    CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"who_bought_who\" THEN  \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_parttypemst\" THEN  \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN  \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN  \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN  \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"cost_category\" THEN  \n" +
                "    CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"chartypemst\" THEN  \n" +
                "    CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"countrymst\" THEN  \n" +
                "     CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"warehousemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"binmst\" THEN  \n" +
                "     CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rackmst\" THEN  \n" +
                "     CALL Sproc_checkDelete_rackmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_logicalgroup\" THEN  \n" +
                "     CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"packing_slip_material_receive\" THEN  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"packing_slip_material_receive_det\" THEN  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_det(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"packing_slip_material_receive_memo\" THEN  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_memo(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"packing_slip_track_number\" THEN  \n" +
                "     CALL Sproc_checkDelete_packing_slip_track_number(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"reserve_stock_request\" THEN  \n" +
                "       	 CALL Sproc_checkDelete_reserve_stock_request(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_packagingmst\" THEN  \n" +
                "     CALL Sproc_checkDelete_component_packagingmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_narrative_history\" THEN  \n" +
                "     CALL Sproc_checkDelete_workorder_trans_narrative_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"scannermst\" THEN  \n" +
                "     CALL Sproc_checkDelete_Scanner(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_alternatepn_validations\" THEN  \n" +
                "     CALL Sproc_checkDelete_Alias_Parts_Validation(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_equipment_feeder_details\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment_feeder_details(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_price_break_details\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_price_break_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"department_location\" THEN  \n" +
                "    CALL Sproc_checkDelete_department_location(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"purchase_parts_details\" THEN  \n" +
                "    CALL Sproc_checkDelete_purchase_parts_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_rohsmst\" THEN  \n" +
                "    CALL Sproc_checkDelete_rfq_rohsmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_partstatusmst\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_partstatusmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_umid_details\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_trans_umid_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"labor_cost_template\" THEN  \n" +
                "    CALL Sproc_checkDelete_labor_cost_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_packagecasetypemst\" THEN  \n" +
                "    CALL Sproc_checkDelete_rfq_packagecasetypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_dynamic_attribute\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_dynamic_attribute_mapping_part\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute_mapping_part(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"labeltemplatesmst\" THEN  \n" +
                "    CALL Sproc_checkDelete_labeltemplates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"reportmaster\" THEN  \n" +
                "    CALL Sproc_checkDelete_reportMaster(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"operating_temperature_conversion_mst\" THEN  \n" +
                "    CALL Sproc_checkDelete_operating_temperature_conversion_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"inspection_mst\" THEN  \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementMst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"inspection_template_mst\" THEN  \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementTemplate(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"componenet_inspection_requirement_det\" THEN  \n" +
                "    CALL Sproc_checkDelete_componenet_inspection_requirement_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"supplier_quote_mst\" THEN  \n" +
                "   CALL Sproc_checkDelete_supplier_quote(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"supplier_quote_parts_det\" THEN  \n" +
                "   CALL Sproc_checkDelete_supplier_quote_parts(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"calibration_details\" THEN  \n" +
                "   CALL Sproc_checkDelete_CalibrationDetails(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customer_packingslip\" THEN  \n" +
                "   CALL Sproc_checkDelete_customer_packingslip(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customer_packingslip_det\" THEN  \n" +
                "   CALL Sproc_checkDelete_customer_packingslip_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"supplier_attribute_template_mst\" THEN  \n" +
                "      CALL Sproc_checkDelete_supplier_attribute_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"freeonboardmst\" THEN  \n" +
                "   CALL Sproc_checkDelete_freeonboard(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"generic_file_extension\" THEN  \n" +
                "   CALL Sproc_checkDelete_genericFileExtension(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"assemblystock\" THEN  \n" +
                "   CALL Sproc_checkDelete_assemblystock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customer_invoice\" THEN  \n" +
                "   CALL Sproc_checkDelete_customer_invoice(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_boxserialno\" THEN  \n" +
                "   CALL Sproc_checkDelete_wo_box_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_boxserialno\" THEN  \n" +
                "   CALL Sproc_checkDelete_wo_trans_box_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"bank_mst\" THEN  \n" +
                "   CALL Sproc_checkDelete_bank(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"cameramst\" THEN  \n" +
                "   CALL Sproc_checkDelete_cameramst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"release_notes_detail\" THEN  \n" +
                "   CALL Sproc_checkDelete_releasenotes_detail(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"release_notes\" THEN  \n" +
                "   CALL Sproc_checkDelete_releasenotes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"purchase_order_mst\" THEN  \n" +
                "   CALL Sproc_checkDelete_purchase_order_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"acct_acctmst\" THEN  \n" +
                "    CALL Sproc_checkDelete_acct_acctmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"help_blog_det\" THEN  \n" +
                "   CALL Sproc_checkDelete_helpblog_detail(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"acct_classmst\" THEN  \n" +
                "	CALL Sproc_checkDelete_acct_classmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"mfgcodemst_comment_det\" THEN  \n" +
                "    CALL Sproc_checkDelete_mfgcodemst_comment_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"generic_transmode_mst\" THEN  \n" +
                "    CALL Sproc_checkDelete_generic_transmode_mst_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5542,'2.00','V1',' Bug 38981: PO list page : If we delete line from the PO list page then should ask for revision change message - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5542:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-11-2021 *********************************** */
                "Drop procedure if exists `Sproc_copyMasterTemplate`;  \n" +
                "CREATE PROCEDURE `Sproc_copyMasterTemplate`(  \n" +
                "	IN pcopyTemplate INT(11),  \n" +
                "	IN puserID INT,  \n" +
                "	IN pTemplateID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	INSERT INTO operation_master_templates (masterTemplateId,operationId,isActive,createdBy)  \n" +
                "		SELECT pTemplateID,omt.operationId,omt.isActive,puserID FROM operation_master_templates as omt  \n" +
                "			INNER JOIN operations as op on omt.operationId = op.opID and op.opStatus = 1  \n" +
                "		WHERE omt.masterTemplateId = pcopyTemplate AND omt.isdeleted=0 and op.isdeleted = 0;  \n" +
                "	SELECT pTemplateID;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5543,'2.00','V1',' Bug 38955: Operation Master and Operation Template issues. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5543:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierQuote`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuote`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pIsSummary TINYINT,  \n" +
                "	IN pSupplierIds VARCHAR(16000),  \n" +
                "	IN pQuoteStatus VARCHAR(1000),  \n" +
                "	IN pSearchType VARCHAR(5),  \n" +
                "	IN pAdvanceSearchSQ VARCHAR(100),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN pPartIds VARCHAR(16000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_MfgNameFormat VARCHAR(100);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO v_MfgNameFormat;  \n" +
                "  \n" +
                "	IF (pIsSummary = FALSE) THEN  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "				SELECT  \n" +
                "					s.id,  \n" +
                "					spd.id AS supplierQuotePartDetID,  \n" +
                "					fun_GetFormattedMfgCode(cm.mfgCode, cm.mfgName, \",v_MfgNameFormat,\") mfgName,  \n" +
                "					cm.mfgCode,  \n" +
                "					s.supplierID,  \n" +
                "					spd.partID,  \n" +
                "					c.mfgPN AS mfgPN,  \n" +
                "					c.mfgcodeID,  \n" +
                "					sc.mfgPN AS supplierPN,  \n" +
                "					spd.supplierPartID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "					IF(spd.isActive = 0, 'Inactive', 'Active') AS isActiveConvertedValueDetail,  \n" +
                "					spd.isActive,  \n" +
                "					spd.scanLabel,  \n" +
                "                    IF(s.quoteStatus = 'P',true, false) AS isDisabledDelete,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricing,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledCopySupplierQuote,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricingHistory,  \n" +
                "                    IF(spd.id IS NULL, false, true) AS isRequirementReference,  \n" +
                "					c.isCustom,  \n" +
                "					sc.isCustom AS isCustomSupplier,  \n" +
                "					rhc.rohsIcon,  \n" +
                "					rhc.name rohsName,  \n" +
                "					rhsc.rohsIcon supplierRohsIcon,  \n" +
                "					rhsc.name supplierRohsName,  \n" +
                "					fun_getPartAttibutesBySupplierQuoteDetailID(spd.id) AS attributesList,  \n" +
                "					fun_getPartPricingCountBySupplierQuoteDetailID(spd.id) AS pricingCount,  \n" +
                "					fun_getUserNameByID(spd.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(spd.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(spd.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(spd.createByRoleId) createdByRole  \n" +
                "				FROM  supplier_quote_parts_det spd  \n" +
                "				LEFT JOIN supplier_quote_mst s ON spd.supplierQuoteMstID = s.id AND spd.isDeleted = 0  \n" +
                "				LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN rfq_rohsmst rhc ON c.id = rhc.id AND rhc.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND c.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "				LEFT JOIN rfq_rohsmst rhsc ON sc.id = rhsc.id AND rhsc.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst cm ON cm.id = c.mfgcodeID  AND cm.isDeleted = 0  \n" +
                "				WHERE s.isDeleted = 0 \");  \n" +
                "	 ELSE  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "			SELECT 	s.id,  \n" +
                "					s.supplierID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "                    IF(s.quoteStatus = 'P', true, false) AS isDisabledDelete,  \n" +
                "					fun_getAddressbyID(s.shippingAddressID) shipTo,  \n" +
                "					fun_getAddressbyID(s.billingAddressID) billTo,  \n" +
                "                    (SELECT COUNT(0) FROM supplier_quote_parts_det WHERE isDeleted = 0 AND supplierQuoteMstID = s.id) AS noOfSupplierPartLine,  \n" +
                "					fun_getUserNameByID(s.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(s.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(s.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(s.createByRoleId) createdByRole  \n" +
                "			FROM   supplier_quote_mst s  \n" +
                "			LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "			WHERE  s.isDeleted = 0  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSupplierIds IS NOT NULL OR pSupplierIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND supplierID in (\"',pSupplierIds,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pQuoteStatus IS NOT NULL OR pQuoteStatus != '') THEn  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND quoteStatus in (\"',pQuoteStatus,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pAdvanceSearchSQ IS NOT NULL OR pAdvanceSearchSQ != '') THEN  \n" +
                "		IF(pSearchType = 'E') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber = \"', pAdvanceSearchSQ , '\" ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber LIKE \"%', pAdvanceSearchSQ ,'%\" ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''' and quoteDate <= ''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate <= ''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPartIds IS NOT NULL OR pPartIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( supplierPartID in (\"',pPartIds,'\") OR partID in (\"',pPartIds,'\") )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuote,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuote,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "   PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5544,'2.00','V1','Bug 38979: QA Testing findings for User Story 38497: Supplier Quote List page - Issue2 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5544:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllocatedKitForUMID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllocatedKitForUMID`(  \n" +
                "	pUMIDId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	Select  \n" +
                "		ka.id,					ka.refSalesOrderDetID,		s.salesOrderNumber,  \n" +
                "		s.poNumber,             sd.materialTentitiveDocDate,  \n" +
                "		ka.assyID,				assy.nickname,				assy.PIDCode assyPIDCode,  \n" +
                "		CONCAT(s.poNumber, ', ', s.salesOrderNumber, ', ', assy.PIDCode, ', ', sd.qty) kitName,  \n" +
                "		ka.allocatedQty,		ka.allocatedUnit,  \n" +
                "        ka.allocatedUOMID, 		fun_getUnitNameByID(ka.allocatedUOMID) allocatedUOM,  \n" +
                "        u.measurementTypeID as uomClassID,  \n" +
                "		FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(rp.kitReleaseDate) kitReleaseDate,  \n" +
                "        rp.promiseShipDate,  \n" +
                "        fun_getKitReleaseStatus(ka.refSalesOrderDetID, NULL, ka.assyID, k.allocPerWithSubAssy, false) AS kitReleaseStatus  \n" +
                "	From (  \n" +
                "			SELECT 	k.id,			k.refSalesOrderDetID, k.assyID,  \n" +
                "					SUM(k.allocatedQty) allocatedQty,		SUM(k.allocatedUnit) allocatedUnit,  \n" +
                "					k.allocatedUOM allocatedUOMID  \n" +
                "			FROM 	kit_allocation k  \n" +
                "			WHERE 	k.id = k.id  \n" +
                "			AND 	k.refUIDId = pUMIDId  \n" +
                "			AND 	k.status = 'A'  \n" +
                "			GROUP BY k.id, k.refSalesOrderDetID, k.assyID, k.allocatedUOM  \n" +
                "		) ka  \n" +
                "	INNER JOIN 	salesorderdet sd ON ka.refSalesOrderDetID = sd.id  AND sd.partCategory = 3  \n" +
                "	INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "	INNER JOIN	component assy ON ka.assyID = assy.id  \n" +
                "	INNER JOIN 	uoms u ON u.id = ka.allocatedUOMID  \n" +
                "	LEFT JOIN (  \n" +
                "				SELECT 	k.refSalesorderdetid, k.assyID,  \n" +
                "						ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS allocPerWithSubAssy  \n" +
                "				FROM  \n" +
                "					(SELECT  vk.qpaWithDnp,   vk.refSalesorderdetid, vk.assyID,  \n" +
                "							vk.isNotRequiredKitAllocation AS isNotRequiredKitAllocation ,  \n" +
                "							IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.allocatedpin, 0) ELSE IFNULL(vk.allocatedunit, 0) END)) / (vk.totalAssyBuildQty * IFNULL(vk.qpaWithDnp, 0))), 0) AS allocationPer  \n" +
                "									FROM  		vu_kit_allocation_detail vk  \n" +
                "									INNER JOIN	salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    	vk.isNotRequiredKitAllocation != 1  \n" +
                "									GROUP BY 	vk.refSalesorderdetid, vk.assyID  \n" +
                "					) as k  \n" +
                "			) k ON ka.refSalesOrderDetID = k.refSalesorderdetid AND ka.assyID = k.assyID  \n" +
                "	LEFT JOIN (  \n" +
                "		SELECT 	salesOrderDetID,  \n" +
                "				(CASE WHEN subAssyID IS NOT NULL THEN subAssyID ELSE refAssyId END) assyID,  \n" +
                "				min(actualKitReleaseDate) kitReleaseDate,  \n" +
                "				MIN(poDueDate) promiseShipDate  \n" +
                "		FROM 	vu_kit_plans  \n" +
                "		GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "	) rp ON ka.refSalesOrderDetID = rp.salesOrderDetID AND ka.assyID = rp.assyID  \n" +
                "	ORDER BY (rp.kitReleaseDate IS NULL),  rp.kitReleaseDate ASC, ka.id ASC;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5545,'2.00','V1','Bug 39041: An error generated while open split UMID popup at UMID management screen - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5545:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-11-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllocatedKitForUMID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllocatedKitForUMID`(  \n" +
                "	pUMIDId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	Select  \n" +
                "		ka.id,					ka.refSalesOrderDetID,		s.salesOrderNumber,  \n" +
                "		s.poNumber,             sd.materialTentitiveDocDate,  \n" +
                "		ka.assyID,				assy.nickname,				assy.PIDCode assyPIDCode,  \n" +
                "		CONCAT(s.poNumber, ', ', s.salesOrderNumber, ', ', assy.PIDCode, ', ', sd.qty) kitName,  \n" +
                "		ka.allocatedQty,		ka.allocatedUnit,  \n" +
                "        ka.allocatedUOMID, 		fun_getUnitNameByID(ka.allocatedUOMID) allocatedUOM,  \n" +
                "        u.measurementTypeID as uomClassID,  \n" +
                "		FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(rp.kitReleaseDate) kitReleaseDate,  \n" +
                "        rp.promiseShipDate,  \n" +
                "        fun_getKitReleaseStatus(k.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,sd.kitQty, sd.qty, p.releaseCount, p.pendingCount) as kitReleaseStatus  \n" +
                "	From (  \n" +
                "			SELECT 	k.id,			k.refSalesOrderDetID, k.assyID,  \n" +
                "					SUM(k.allocatedQty) allocatedQty,		SUM(k.allocatedUnit) allocatedUnit,  \n" +
                "					k.allocatedUOM allocatedUOMID  \n" +
                "			FROM 	kit_allocation k  \n" +
                "			WHERE 	k.id = k.id  \n" +
                "			AND 	k.refUIDId = pUMIDId  \n" +
                "			AND 	k.status = 'A'  \n" +
                "			GROUP BY k.id, k.refSalesOrderDetID, k.assyID, k.allocatedUOM  \n" +
                "		) ka  \n" +
                "	INNER JOIN 	salesorderdet sd ON ka.refSalesOrderDetID = sd.id  AND sd.partCategory = 3  \n" +
                "	INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "	INNER JOIN	component assy ON ka.assyID = assy.id  \n" +
                "	INNER JOIN 	uoms u ON u.id = ka.allocatedUOMID  \n" +
                "    LEFT JOIN (  \n" +
                "					SELECT 	salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "							SUM(CASE WHEN  kitStatus = 'R' THEN 1 ELSE 0 END) releaseCount,  \n" +
                "							SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "							SUM(kitReleaseQty) totalKitQty,	SUM(poQty) totalPOQty  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p ON ka.refSalesOrderDetID = p.salesOrderDetID AND ka.assyID = p.refAssyId  \n" +
                "	LEFT JOIN (  \n" +
                "				SELECT 	k.refSalesorderdetid, k.assyID,  \n" +
                "						ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS allocPerWithSubAssy  \n" +
                "				FROM  \n" +
                "					(SELECT  vk.qpaWithDnp,   vk.refSalesorderdetid, vk.assyID,  \n" +
                "							vk.isNotRequiredKitAllocation AS isNotRequiredKitAllocation ,  \n" +
                "							IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.allocatedpin, 0) ELSE IFNULL(vk.allocatedunit, 0) END)) / (vk.totalAssyBuildQty * IFNULL(vk.qpaWithDnp, 0))), 0) AS allocationPer  \n" +
                "									FROM  		vu_kit_allocation_detail vk  \n" +
                "									INNER JOIN	salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    	vk.isNotRequiredKitAllocation != 1  \n" +
                "									GROUP BY 	vk.refSalesorderdetid, vk.assyID  \n" +
                "					) as k  \n" +
                "			) k ON ka.refSalesOrderDetID = k.refSalesorderdetid AND ka.assyID = k.assyID  \n" +
                "	LEFT JOIN (  \n" +
                "		SELECT 	salesOrderDetID,  \n" +
                "				(CASE WHEN subAssyID IS NOT NULL THEN subAssyID ELSE refAssyId END) assyID,  \n" +
                "				min(actualKitReleaseDate) kitReleaseDate,  \n" +
                "				MIN(poDueDate) promiseShipDate  \n" +
                "		FROM 	vu_kit_plans  \n" +
                "		GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "	) rp ON ka.refSalesOrderDetID = rp.salesOrderDetID AND ka.assyID = rp.assyID  \n" +
                "	ORDER BY (rp.kitReleaseDate IS NULL),  rp.kitReleaseDate ASC, ka.id ASC;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-11-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5546,'2.00','V1','Bug 39041: An error generated while open split UMID popup at UMID management screen - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5546:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-11-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSOPIDList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSOPIDList`(  \n" +
                "	IN pCustomerID INT(11),  \n" +
                "	IN pPartID INT(11)  ,  \n" +
                "	IN psubAssyID INT(11) ,  \n" +
                "    IN pSearchObj VARCHAR(500),  \n" +
                "    IN pSalesOrderDetID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE mfgCodeID INT(11);  \n" +
                "	DECLARE whereClause VARCHAR(2000);  \n" +
                "	DECLARE partStatusID INT(11);  \n" +
                "    DECLARE mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into mfgNameFormat;  \n" +
                "	SELECT cp.id INTO partStatusID FROM component_partstatusmst cp WHERE cp.name= \"Obsolete\";  \n" +
                "	SET whereClause = \" a.partCategory = 3 \";  \n" +
                "  \n" +
                "	-- fca then default get all assy  \n" +
                "	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany=1)>0 THEN  \n" +
                "		SET pCustomerID=NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND (a.mfgcodeID in ( select buyTo from acquireCustomers) or a.mfgcodeid in  \n" +
                "		(select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and smm.isCustMapping=0 and  smm.supplierID=\",pCustomerID,\")) and  \n" +
                "		(a.customerID=\",pCustomerID,\" or a.customerID in (select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and smm.isCustMapping=0 and  smm.supplierID=\",pCustomerID,\")  \n" +
                "		)\");  \n" +
                "		-- SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", pCustomerID);  \n" +
                "	END IF;  \n" +
                "  -- Added to search  Sales order number  \n" +
                "    IF pSearchObj IS NOT NULL THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) like '%\",pSearchObj,\"%'\");  \n" +
                "    END IF;  \n" +
                "    IF pSalesOrderDetID IS NOT NULL THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND a.id = \",pSalesOrderDetID);  \n" +
                "    END IF;  \n" +
                "	IF(pPartID IS NOT NULL) THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND a.partID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\",pPartID,\") \");  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
                "		c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
                "		c.partStatus, c.isGoodPart,  \n" +
                "		ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName,sm.customerID,  \n" +
                "        fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
                "		CASE WHEN sd.partID = \",pPartID,\" THEN 1 ELSE 2 END AS AssyType,  \n" +
                "		(SELECT  perAssyBuildQty  \n" +
                "			FROM 	kit_allocation_assy_detail  \n" +
                "			WHERE 	refSalesorderdetid = sd.id  \n" +
                "		AND 	partId = \",pPartID,\"  \n" +
                "			AND 	isDeleted = 0) AS qpaa,  \n" +
                "		CASE c.partStatus WHEN \", partStatusID, \" THEN FALSE ELSE TRUE END AS isActive,  \n" +
                "        sd.partCategory,  \n" +
                "        astk.initialStockCount  \n" +
                "		FROM salesorderdet sd  \n" +
                "		LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.deletedAt IS NULL)  \n" +
                "		LEFT JOIN vu_salesorder_updatedlist_report vsur ON (sd.id = vsur.SalesOrderDetailId)  \n" +
                "		LEFT JOIN component c ON (c.id = sd.partID AND c.isDeleted = 0)  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.deletedAt IS NULL)  \n" +
                "		LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "		LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
                "		WHERE IFNULL(sd.isCancle,0)=0 AND sd.isDeleted = 0 AND IFNULL(sm.status,0)=1  \n" +
                "		AND sd.salesOrderDetStatus = 1 \",' order by c.PIDCode');  \n" +
                "	        -- SELECT @SQLStatement2;  \n" +
                "  \n" +
                "        SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
                "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
                "		-- 	 SELECT @SQLStatement2;  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
                "			c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
                "			ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName, sm.customerID,  \n" +
                "            fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
                "			1 AssyType,  \n" +
                "			(SELECT  perAssyBuildQty  \n" +
                "				FROM 	kit_allocation_assy_detail  \n" +
                "				WHERE 	refSalesorderdetid = sd.id  \n" +
                "			AND 	partId = sd.partID  \n" +
                "				AND 	isDeleted = 0) AS qpaa,  \n" +
                "			CASE c.partStatus  \n" +
                "			WHEN \", partStatusID, \" THEN FALSE  \n" +
                "			ELSE TRUE  \n" +
                "			END AS isActive ,  \n" +
                "            sd.partCategory , c.partStatus , astk.initialStockCount  \n" +
                "			FROM salesorderdet sd  \n" +
                "			LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.deletedAt IS NULL)  \n" +
                "			LEFT JOIN vu_salesorder_updatedlist_report vsur ON (sd.id = vsur.SalesOrderDetailId)  \n" +
                "			LEFT JOIN component c ON (c.id = sd.partID AND c.deletedAt IS NULL)  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.deletedAt IS NULL)  \n" +
                "			LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
                "			WHERE IFNULL(sd.isCancle,0)=0 AND sd.deletedAt IS NULL AND IFNULL(sm.status,0)=1 AND sd.partCategory=3  \n" +
                "				AND sd.salesOrderDetStatus = 1  \",' order by c.PIDCode');  \n" +
                "			SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
                "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
                "			-- SELECT @SQLStatement2;  \n" +
                "	END IF;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-11-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5547,'2.00','V1','Sproc_GetSOPIDList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5547:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_generateDefaultBaseUOM` ;  \n" +
                "CREATE PROCEDURE `Sproc_generateDefaultBaseUOM`(  \n" +
                "	IN pID INT,  \n" +
                "	IN pMeasurementTypeID INT,  \n" +
                "	IN pUserID VARCHAR(10),  \n" +
                "	IN pUserRoleId VARCHAR(10)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "           DECLARE vOldBaseUnit FLOAT;  \n" +
                "	   DECLARE vNewOperator VARCHAR(20);  \n" +
                "	   DECLARE vNewBaseUnit FLOAT;  \n" +
                "	   DECLARE vNewBaseValue FLOAT;  \n" +
                "	   DECLARE vcount INT;  \n" +
                "	   DECLARE vIndex INT;  \n" +
                "  \n" +
                "	      SELECT orgBaseUnitValue INTO vOldBaseUnit FROM uoms WHERE measurementTypeID=pMeasurementTypeID AND baseUnitID=0 AND isdeleted=0;  \n" +
                "  \n" +
                "	      SELECT orgBaseUnitValue,operator INTO vNewBaseUnit,vNewOperator FROM uoms WHERE measurementTypeID=pMeasurementTypeID AND id=pID;  \n" +
                "  \n" +
                "	      SET vNewBaseValue= CASE WHEN vNewOperator='Divide' THEN (vOldBaseUnit/vNewBaseUnit) ELSE (vOldBaseUnit * vNewBaseUnit) END;  \n" +
                "  \n" +
                "	      CREATE TEMPORARY TABLE IF NOT EXISTS tempdefaultUOMs AS  \n" +
                "	       SELECT id,operator,orgBaseUnitValue,row_number() over (PARTITION BY measurementTypeID) rowNumber FROM uoms WHERE measurementTypeID=pMeasurementTypeID AND isdeleted=0 AND id!=pID AND id!=0;  \n" +
                "  \n" +
                "	      SELECT COUNT(1) INTO vcount FROM tempdefaultUOMs;  \n" +
                "	          SET vIndex=1;  \n" +
                "  \n" +
                "			  WHILE(vIndex <= vcount) DO  \n" +
                "  \n" +
                "			  SELECT id,operator,orgBaseUnitValue INTO @id,@operator,@orgBaseUnitValue FROM tempdefaultUOMs WHERE rowNumber=vIndex;  \n" +
                "			  SET @calValue=CASE WHEN @operator='Divide' THEN (vOldBaseUnit/@orgBaseUnitValue) ELSE (vOldBaseUnit * @orgBaseUnitValue) END;  \n" +
                "			  SET @newVal=CASE WHEN @calValue < vNewBaseValue THEN (vNewBaseValue/@calValue) WHEN @calValue > vNewBaseValue THEN (@calValue/vNewBaseValue) ELSE 1 END;  \n" +
                "			  SET @newType=CASE WHEN @calValue < vNewBaseValue THEN 'Divide'  ELSE 'Multiply' END;  \n" +
                "			  SET @newBaseConvert=CASE WHEN @newType='Divide' THEN ((1 * @newVal * 10) / 10) ELSE ((1 * 10) / (@newVal * 10)) END;  \n" +
                "  \n" +
                "			  UPDATE uoms SET  \n" +
                "				orgBaseUnitValue=@newVal,  \n" +
                "				operator=@newType,  \n" +
                "				baseUnitID=pID,  \n" +
                "				baseUnitConvertValue=@newBaseConvert,  \n" +
                "				updatedBy=pUserID,  \n" +
                "				updateByRoleId=pUserRoleId  \n" +
                "				WHERE id=@id AND isdeleted=0;  \n" +
                "  \n" +
                "			  SET vIndex  =vIndex+1;  \n" +
                "		          END WHILE;  \n" +
                "  \n" +
                "	      UPDATE uoms SET  \n" +
                "	      orgBaseUnitValue=1,  \n" +
                "	      operator='Multiply',  \n" +
                "	      baseUnitID=0,  \n" +
                "	      baseUnitConvertValue=1,  \n" +
                "	      updatedBy=pUserID,  \n" +
                "	      updateByRoleId=pUserRoleId  \n" +
                "	      WHERE measurementTypeID=pMeasurementTypeID AND id=pID AND isdeleted=0;  \n" +
                "  \n" +
                "	      DROP TEMPORARY TABLE IF EXISTS tempdefaultUOMs;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-11-2021 *********************************** */
                "INSERT INTO feature_mst(featureName,isactive,createdBy,updatedBy)VALUES('Allow to Change Base UOM',1,1,1);  \n" +
                /* **************************** Add Script Version -> 27-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5548,'2.00','V1',' Alter procedure Sproc_generateDefaultBaseUOM-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5548:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "    IN ppolinestatus VARCHAR(10),  \n" +
                "	IN ppostatus VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN ponlyOtherPart boolean,  \n" +
                "    IN pwithoutOtherPart boolean,  \n" +
                "    IN pisonlyPendingLines boolean  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"  \n" +
                "		SELECT (CASE WHEN(IFNULL((a.totalReceivedQty * 100 / a.qty), 0)) > 100 THEN 100 ELSE IFNULL(round((a.totalReceivedQty * 100 / a.qty), 2), 0) END) poLineCompletionPercentage, a.* from  \n" +
                "		(SELECT  pod.id,  \n" +
                "				pom.id as refPurchaseOrderID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pod.mfgPartID,  \n" +
                "				pod.packagingID,  \n" +
                "				pod.supplierPartID,  \n" +
                "				pod.partDescription,  \n" +
                "				pod.pcbPerArray,  \n" +
                "				pod.rohsStatusID,  \n" +
                "				pod.internalRef,  \n" +
                "				pod.qty,  \n" +
                "				pod.price,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				(pod.qty * pod.price) extPrice,  \n" +
                "				pod.totalRelease,  \n" +
                "				pod.lineComment,  \n" +
                "				pod.lineID,  \n" +
                "				pod.supplierQuoteNumber,  \n" +
                "				pom.poDate,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				c.mfgPN,  \n" +
                "				c.pidCode,  \n" +
                "				c.unit,  \n" +
                "				c.iscustom,  \n" +
                "				c.partType,  \n" +
                "				rr.name AS rohsName,  \n" +
                "				rr.rohsIcon,  \n" +
                "				cp.name AS packagingName,  \n" +
                "				mc.mfgCode,  \n" +
                "				mc.mfgName,  \n" +
                "				mc.id As mfgcodeID,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.status,  \n" +
                "				pom.carrierID,  \n" +
                "				pom.poWorkingStatus,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Closed' else IFNULL(vups.poLineWorkingDisplayStatus,'Open') end poLineWorkingDisplayStatus,  \n" +
                "                case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatusDisplayStatus,  \n" +
                "				vups.totalReceivedQty,  \n" +
                "				vups.totalPendingQty,  \n" +
                "				vups.poLineCompleteReason,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Auto' else  vups.poLineCompleteType end poCompleteType,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				sc.mfgPN supplierPN,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.termsID,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pod.internalLineComment,  \n" +
                "				m.mfgcode as supplierMfgName,  \n" +
                "				fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,  \n" +
                "				(SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,  \n" +
                "				(ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,  \n" +
                "				fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, \",vMfgCodeFormat,\") mfgcodeName,  \n" +
                "				fun_getUserNameByID(pod.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pod.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pod.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pod.updateByRoleId) updatedbyRole,  \n" +
                "				(select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,  \n" +
                "				(select pold.promisedShipDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) promisedShipDate,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, FALSE) packingSlipDate,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, TRUE) packingSlipId,  \n" +
                "                c.custAssyPN ,  \n" +
                "                ps.packingSlip,  \n" +
                "                pod.isdeleted,  \n" +
                "                case when c.partType=4 and pom.poWorkingStatus='C' then 'C' else IFNULL(vups.poLineWorkingStatus,'P') end poLineWorkingStatus,  \n" +
                "                ps.MaterialReceiptNumber,  \n" +
                "                pod.isLineCustConsigned,  \n" +
                "                CASE WHEN pod.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "                pod.lineCustomerID,  \n" +
                "                fun_GetFormattedMfgCode(pm.mfgCode, pm.mfgName, \",vMfgCodeFormat,\") customerName,  \n" +
                "                m.mfgName as POSupplierName,  \n" +
                "                pod.isNonUMIDStock,  \n" +
                "                CASE WHEN pod.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                pom.lockStatus  \n" +
                "		FROM purchase_order_det pod  \n" +
                "		LEFT JOIN purchase_order_mst pom  ON pom.id=pod.refPurchaseOrderID and  pom.isdeleted=0  \n" +
                "		LEFT JOIN vu_purchaseorder_shipping_release vups on vups.refPurchaseOrderDetID= pod.id  \n" +
                "		LEFT JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN component c ON c.id=pod.mfgPartID  \n" +
                "		LEFT JOIN component sc on sc.id=pod.supplierPartID  \n" +
                "		LEFT JOIN mfgcodemst mc ON mc.id=c.mfgcodeID  \n" +
                "        LEFT JOIN mfgcodemst pm ON pm.id=pod.lineCustomerID  \n" +
                "		LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID  \n" +
                "		LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID  \n" +
                "        LEFT JOIN (select group_concat(distinct psmr.id, '@@@', psmr.packingSlipNumber order by psmr.packingSlipDate desc separator '\",v_GroupConcatSeparator,\"') as packingSlip,  \n" +
                "						group_concat(distinct psmr.packingSlipNumber order by psmr.packingSlipDate desc separator ', ') as MaterialReceiptNumber,  \n" +
                "                        psmr.refPurchaseOrderID, psmrd.refPurchaseOrderDetID  \n" +
                "                        from packing_slip_material_receive psmr  \n" +
                "							join packing_slip_material_receive_det psmrd  \n" +
                "								on psmrd.refPackingSlipMaterialRecID=psmr.id and psmrd.isDeleted=false  \n" +
                "						where psmr.receiptType='P' and psmr.isDeleted=false group by psmrd.refPurchaseOrderDetID  \n" +
                "					) ps on ps.refPurchaseOrderID = pom.id and ps.refPurchaseOrderDetID=pod.id ) a  \n" +
                "		WHERE a.isdeleted=0  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  like ''%',psearchposotext,'%'' OR a.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  =''',psearchposotext,''' OR a.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate>=''',pfromDate,''' and a.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "    IF(ppolinestatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" and a.poLineWorkingStatus IN (\", ppolinestatus ,\")\");  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" and a.poWorkingStatus IN (\", ppostatus ,\")\");  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.mfgPartID in (',ppartIds,') OR a.supplierPartID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "    IF(pwithoutOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType!=4');  \n" +
                "	END IF;  \n" +
                "    IF(ponlyOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType=4');  \n" +
                "	END IF;  \n" +
                "	IF(pisonlyPendingLines=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.poLineWorkingStatus=\"P\"');  \n" +
                "	END IF;  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5549,'2.00','V1',' Bug 38872: QA Testing findings for User Story 37382: Purchase Order Improvement points Oct-2021 - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5549:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerPackingSlipDeatils` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "        SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "		cd.subStatus,  \n" +
                "		cd.sorevision,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "                fun_getMfgCodeByID(cd.customerID) custCode,  \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "            case when sm.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
                "            sm.isBlanketPO,  \n" +
                "cd.id AS customerslipId,  \n" +
                "case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "  fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "   concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "     (CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         fun_getUserNameByID(cd.updatedBy) updatedby,  \n" +
                "         fun_getUserNameByID(cd.createdBy) createdby,  \n" +
                "         fun_getRoleByID(cd.createByRoleId) createdbyRole,  \n" +
                "         fun_getRoleByID(cd.updateByRoleId) updatedbyRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdAt,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS lockedAt,  \n" +
                "         cpTrack.cpTrackNumber,  \n" +
                "         ifnull(cpTrack.cpTrackNumberCount,0) cpTrackNumberCount,  \n" +
                "         (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "                        cd.revision ,  \n" +
                "           ifnull(packingdtl.packingSlipCnt,0)  packingSlipCnt  \n" +
                "		FROM customer_packingslip cd  \n" +
                "		LEFT JOIN salesordermst sm on sm.id=cd.refSalesOrderID and sm.isdeleted=0  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0  \n" +
                "		LEFT JOIN (  \n" +
                "		SELECT COUNT(cpTrack.trackNumber) cpTrackNumberCount,GROUP_CONCAT(cpTrack.trackNumber SEPARATOR ', ') cpTrackNumber,cpTrack.refCustPackingSlipID FROM customer_packing_slip_track_number cpTrack WHERE  cpTrack.isDeleted = 0 GROUP BY cpTrack.refCustPackingSlipID  \n" +
                "		) cpTrack on cpTrack.refCustPackingSlipID=cd.id  \n" +
                "		left join ( select count(1) packingSlipCnt,packingdtl.refCustPackingSlipID from customer_packingslip_det packingdtl where packingdtl.isDeleted = 0 GRoup by packingdtl.refCustPackingSlipID  \n" +
                "		) packingdtl on packingdtl.refCustPackingSlipID=cd.id  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "	 IF (pfilterStatus = 0) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    ELSE  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  \n" +
                "   IF pmfgPartID IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails= CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' AND cd.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pmfgPartID , ')) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "  SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerPackingSlipDetailPerLine` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDetailPerLine`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "        SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "                       cd.poRevision,  \n" +
                "		       ss.releaseNumber,  \n" +
                "		       ss.qty as releaseLineQty,  \n" +
                "		        cd.customerID,  \n" +
                "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cpd.internalComment,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "			 cpd.poReleaseNumber,  \n" +
                "			 cpd.refBlanketPONumber,  \n" +
                "            cpd.partId,  \n" +
                "            fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "            `cpd`.assyDescription,  \n" +
                "            fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "            c.mfgPN as assyName ,  \n" +
                "            c.PIDCode as assyId,  \n" +
                "            c.mfgCodeID,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "                fun_getMfgCodeAndNameByID(c.mfgCodeID) mfrName,  \n" +
                "                fun_getMfgCodeByID(cd.customerID) custCode,  \n" +
                "                 case when sm.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
                "            sm.isBlanketPO,  \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "			cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
                "			cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,  \n" +
                "			case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "			fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "			concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "		(CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  createdAt,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt ,  \n" +
                "		if(cd.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
                "        if(cd.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
                "        if(cd.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "		if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "        if(cd.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "        if(cd.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "        if(cd.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "		if(cd.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "		(case when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText,  \n" +
                "        (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "        cd.revision,  \n" +
                "		(select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "			where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "			from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "		c.isCustom,   c.custAssyPN customPartNumber  ,        cpd.remainingQty  \n" +
                "		FROM customer_packingslip cd  \n" +
                "		JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0  \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0 and invoice.transType ='I'  \n" +
                "                LEFT JOIN salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "                LEFT JOIN salesordermst sm on sm.id = sod.refSalesOrderID and sm.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "    IF (pfilterStatus = 0) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    ELSE  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgPartID IS NOT NULL)THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cpd.partId in ( ',pmfgPartID,')');  \n" +
                "  END IF;  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "	 SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5550,'2.00','V1','Alter procedure Sproc_RetrieveCustomerPackingSlipDeatils -CC'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5550:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_salesordermst` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_salesordermst`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "	-- delete sales order master if reference ID is not null  \n" +
                "	-- refernece ID is equal to salesOrderDetID  \n" +
                "	IF(IDs <> '') THEN  \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_salesorder_details\" else \"\" end as msg FROM workorder_salesorder_details WHERE isDeleted=0 AND salesOrderDetailID IN(',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE type=\"OS\" and isDeleted = 0 AND refSalesOrderDetID IN(',IDs,') LIMIT 1)  \n" +
                "			  UNION ALL  \n" +
                "			 (select count(1) cnt, CASE when count(1)>0 then \"salesordermst\" else \"\" end as msg FROM salesorderdet where isDeleted=0 AND refSODetID IN(',IDs,') LIMIT 1)  \n" +
                "			 UNION ALL  \n" +
                "			 (select count(1) cnt, CASE when count(1)>0 then \"salesordermst\" else \"\" end as msg FROM salesorderdet where isDeleted=0  AND refBlanketPOID IN(',IDs,') LIMIT 1)  \n" +
                "		');  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "		DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempSalesOrderMst t)=0 THEN  \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('  \n" +
                "					UPDATE 	kit_allocation ka  \n" +
                "					SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "						ka.returnUnit = ka.allocatedUnit,  \n" +
                "						ka.returnUOM = ka.allocatedUOM,  \n" +
                "						ka.returnDate = \"', fun_DatetimetoUTCDateTime() ,'\",  \n" +
                "						ka.updatedBy = ', deletedBy ,',  \n" +
                "						ka.updateByRoleId = ', pRoleID ,',  \n" +
                "						ka.`status` = \"D\",  \n" +
                "						ka.remark = \"Auto Deallocated from ReCalculation\"  \n" +
                "					WHERE 	ka.refSalesOrderDetID IN (', IDs ,')  \n" +
                "							AND ka.`status` = \"A\"  \n" +
                "				');  \n" +
                "				PREPARE stmt1 FROM @SQL1;  \n" +
                "				EXECUTE stmt1;  \n" +
                "				DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl2 = CONCAT('  \n" +
                "					UPDATE 	salesorder_plan_detailsmst  \n" +
                "					SET 	isDeleted = ', 1 ,',  \n" +
                "						deletedAt = \"', fun_DatetimetoUTCDateTime() ,'\",  \n" +
                "						deletedBy = ', deletedBy ,'  \n" +
                "					WHERE 	salesOrderDetID IN (', IDs ,')  \n" +
                "							AND isDeleted = 0  \n" +
                "				');  \n" +
                "				PREPARE stmt2 FROM @SQL2;  \n" +
                "				EXECUTE stmt2;  \n" +
                "				DEALLOCATE PREPARE stmt2;  \n" +
                "  \n" +
                "				SET @SQl3 = CONCAT('update salesshippingmst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where sDetID  IN(',IDs,') and deletedAt is NULL');  \n" +
                "				PREPARE stmt3 FROM @SQL3;  \n" +
                "				EXECUTE stmt3;  \n" +
                "				DEALLOCATE PREPARE stmt3;  \n" +
                "  \n" +
                "				SET @SQl4 = CONCAT('update salesorderdet set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where (id IN(',IDs,')) and deletedAt is NULL');  \n" +
                "				PREPARE stmt4 FROM @SQL4;  \n" +
                "				EXECUTE stmt4;  \n" +
                "				DEALLOCATE PREPARE stmt4;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				/* [S] - Add Time line log for delete sales order mst */  \n" +
                "				SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber  \n" +
                "					FROM salesordermst  \n" +
                "				WHERE FIND_IN_SET(id,refrenceIDs);  \n" +
                "  \n" +
                "				SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");  \n" +
                "				SET @lvEventDescription = CONCAT(\"Sales order(s) '\",@lvSalesOrderNumber,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");  \n" +
                "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,refrenceIDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */  \n" +
                "				/* [E] - Add Time line log for delete sales order mst */  \n" +
                "  \n" +
                "				SELECT * FROM tempSalesOrderMst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "			COMMIT;  \n" +
                "			ELSE  \n" +
                "			      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempSalesOrderMst t;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "				FROM tempSalesOrderMst t1  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "				ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE tempSalesOrderMst;  \n" +
                "	ELSE  \n" +
                "		/* [S] - Add Time line log for delete sales order mst */  \n" +
                "		SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber  \n" +
                "			FROM salesordermst  \n" +
                "		WHERE FIND_IN_SET(id,refrenceIDs);  \n" +
                "  \n" +
                "		SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");  \n" +
                "		SET @lvEventDescription = CONCAT(\"Sales order(s) '\",@lvSalesOrderNumber,\"' deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");  \n" +
                "		CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,refrenceIDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */  \n" +
                "		/* [E] - Add Time line log for delete sales order mst */  \n" +
                "		-- Added for sales order master record delete  \n" +
                "		SET @SQl5 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in (', refrenceIDs ,') and deletedAt is NULL');  \n" +
                "		PREPARE stmt5 FROM @SQl5;  \n" +
                "		EXECUTE stmt5;  \n" +
                "		SELECT \"\" TotalCount ,\"\" AS Message FROM salesordermst WHERE id IN(refrenceIDs) AND deletedAt IS NULL LIMIT 1;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_removeBlanketPOLinkFuturePOOption` ;  \n" +
                "CREATE PROCEDURE `Sproc_removeBlanketPOLinkFuturePOOption`(  \n" +
                "		IN pSoDetID INT,  \n" +
                "		IN pBlanketPOID INT,  \n" +
                "		IN pisBPORemove TINYINT,  \n" +
                "		IN pUserID VARCHAR(10),  \n" +
                "		IN pUserRoleID VARCHAR(10)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "                IF(pisBPORemove=1)THEN  \n" +
                "  \n" +
                "                 CREATE TEMPORARY TABLE IF NOT EXISTS tempBlanketPOTbl AS  \n" +
                "                  SELECT shippingID FROM salesshippingmst WHERE  sDetID=pSoDetID ;  \n" +
                "  \n" +
                "                    UPDATE salesshippingmst  \n" +
                "                   SET isdeleted=1,  \n" +
                "                   deletedAt=CURRENT_TIMESTAMP,  \n" +
                "                   deletedBy=pUserID,  \n" +
                "                   deleteByRoleId=pUserRoleID  \n" +
                "                   WHERE refShippingLineID IN (SELECT shippingID FROM tempBlanketPOTbl) AND sDetID=pBlanketPOID;  \n" +
                "  \n" +
                "                DROP TEMPORARY TABLE IF EXISTS tempBlanketPOTbl;  \n" +
                "                END IF;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 29-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveBlanketPOLinkFuturePOOption` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveBlanketPOLinkFuturePOOption`(  \n" +
                "		IN pSoDetID INT,  \n" +
                "		IN pBlanketPOID INT,  \n" +
                "		IN pUserID VARCHAR(10),  \n" +
                "		IN pUserRoleID VARCHAR(10)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "         CREATE TEMPORARY TABLE IF NOT EXISTS tempBlanketPOTbl AS  \n" +
                "         SELECT shippingID,sDetID,qty,unitMeaser,shippingDate,shippingMethodID,shippingAddressID,description,packingSlipNo,invoiceNo,releaseNotes,  \n" +
                "                 promisedShipDate,releaseNumber,requestedDockDate,carrierID,carrierAccountNumber,customerReleaseLine,revisedRequestedDockDate,  \n" +
                "                 revisedRequestedShipDate,revisedRequestedPromisedDate,isAgreeToShip,isdeleted  FROM salesshippingmst WHERE  sDetID=pSoDetID ;  \n" +
                "  \n" +
                "                 UPDATE salesshippingmst  \n" +
                "                  SET isdeleted=1,  \n" +
                "                  deletedAt=CURRENT_TIMESTAMP,  \n" +
                "                  deletedBy=pUserID,  \n" +
                "                  deleteByRoleId=pUserRoleID  \n" +
                "         WHERE refShippingLineID IN (SELECT shippingID FROM tempBlanketPOTbl WHERE isdeleted=1) AND sDetID=pBlanketPOID;  \n" +
                "  \n" +
                "          CREATE TEMPORARY TABLE IF NOT EXISTS tempSalesShippingMst AS  \n" +
                "           SELECT ss.refShippingLineID FROM  salesshippingmst ss WHERE ss.sDetID=pBlanketPOID AND ss.isdeleted=0;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "         -- update blanket po sales order detail  \n" +
                "         UPDATE salesshippingmst  ss  \n" +
                "         JOIN tempBlanketPOTbl tp ON tp.shippingID=ss.refShippingLineID  \n" +
                "         SET  \n" +
                "           ss.qty=tp.qty,  \n" +
                "           ss.unitMeaser=tp.unitMeaser,  \n" +
                "           ss.shippingDate=tp.shippingDate,  \n" +
                "           ss.shippingMethodID=tp.shippingMethodID,  \n" +
                "           ss.shippingAddressID=tp.shippingAddressID,  \n" +
                "           ss.description=tp.description,  \n" +
                "           ss.packingSlipNo=tp.packingSlipNo,  \n" +
                "           ss.invoiceNo=tp.invoiceNo,  \n" +
                "           ss.releaseNotes=tp.releaseNotes,  \n" +
                "           ss.promisedShipDate=tp.promisedShipDate,  \n" +
                "           ss.releaseNumber=tp.releaseNumber,  \n" +
                "           ss.requestedDockDate=tp.requestedDockDate,  \n" +
                "           ss.carrierID=tp.carrierID,  \n" +
                "           ss.carrierAccountNumber=tp.carrierAccountNumber,  \n" +
                "           ss.customerReleaseLine=tp.customerReleaseLine,  \n" +
                "           ss.revisedRequestedDockDate=tp.revisedRequestedDockDate,  \n" +
                "           ss.revisedRequestedShipDate=tp.revisedRequestedShipDate,  \n" +
                "           ss.revisedRequestedPromisedDate=tp.revisedRequestedPromisedDate,  \n" +
                "           ss.isAgreeToShip=tp.isAgreeToShip,  \n" +
                "           ss.updatedBy=pUserID,  \n" +
                "           ss.updateByRoleId=pUserRoleID  \n" +
                "           WHERE ss.sDetID=pBlanketPOID AND ss.refShippingLineID=tp.shippingID;  \n" +
                "  \n" +
                "          -- insert into blanket po detail  \n" +
                "		  INSERT INTO salesshippingmst(sDetID,qty,unitMeaser,shippingDate,shippingMethodID,shippingAddressID,description,packingSlipNo,invoiceNo,releaseNotes,  \n" +
                "		  promisedShipDate,releaseNumber,requestedDockDate,carrierID,carrierAccountNumber,customerReleaseLine,revisedRequestedDockDate,  \n" +
                "		  revisedRequestedShipDate,revisedRequestedPromisedDate,isAgreeToShip,createdBy,createByRoleId,refShippingLineID)  \n" +
                "  \n" +
                "		  SELECT pBlanketPOID,qty,unitMeaser,shippingDate,shippingMethodID,shippingAddressID,description,packingSlipNo,invoiceNo,releaseNotes,  \n" +
                "		  promisedShipDate,(SELECT MAX(ss.releaseNumber)+1 FROM salesshippingmst ss WHERE ss.sDetID=pBlanketPOID AND ss.isdeleted=0),requestedDockDate,carrierID,carrierAccountNumber,(SELECT COUNT(1)+1 FROM salesshippingmst ss WHERE ss.sDetID=pBlanketPOID AND ss.isdeleted=0),revisedRequestedDockDate,  \n" +
                "		  revisedRequestedShipDate,revisedRequestedPromisedDate,isAgreeToShip,pUserID,pUserRoleID,shippingID FROM tempBlanketPOTbl  \n" +
                "		  WHERE isdeleted=0 AND shippingID NOT IN (SELECT ss.refShippingLineID FROM  tempSalesShippingMst ss);  \n" +
                "  \n" +
                "		  DROP TEMPORARY TABLE IF EXISTS tempBlanketPOTbl;  \n" +
                "		  DROP TEMPORARY TABLE IF EXISTS tempSalesShippingMst;  \n" +
                "  \n" +
                "         -- insert sales order other expense for blanket PO  \n" +
                "         IF((SELECT COUNT(1) FROM salesorder_otherexpense_details WHERE refSalesOrderDetID=pSoDetID)=0) THEN  \n" +
                "		        INSERT INTO salesorder_otherexpense_details(refSalesOrderDetID,partID,qty,price,frequency,lineComment,lineInternalComment,createdBy,updatedBy,createByRoleId,updateByRoleId,frequencyType)  \n" +
                "			 SELECT  pSoDetID,partID,qty,price,frequency,lineComment,lineInternalComment,pUserID,pUserID,pUserRoleID,pUserRoleID,frequencyType FROM salesorder_otherexpense_details  \n" +
                "			 WHERE refSalesOrderDetID=pBlanketPOID AND isdeleted=0;  \n" +
                "  \n" +
                "			 -- update sales order release line  \n" +
                "				UPDATE salesorder_otherexpense_details sd SET sd.refReleaseLineID=(SELECT ss.shippingID FROM salesshippingmst ss WHERE ss.sDetID=sd.refSalesOrderDetID LIMIT 1)  \n" +
                "				WHERE sd.frequency=2 AND sd.refSalesOrderDetID IN (SELECT sdt.id FROM salesorderdet sdt WHERE sdt.refSalesOrderID=pSoDetID);  \n" +
                "  \n" +
                "         END IF;  \n" +
                "  \n" +
                "         SELECT refSalesOrderID INTO @refSalesOrderID FROM salesorderdet WHERE id=pSoDetID;  \n" +
                "         -- save mapping other charges data for same line  \n" +
                "         IF((SELECT COUNT(1) FROM salesorderdet WHERE refSODetID=pSoDetID)=0) THEN  \n" +
                "                              INSERT INTO salesorderdet(refSalesOrderID,qty,price,shippingQty,remark,createdBy,updatedBy,materialTentitiveDocDate,prcNumberofWeek,isHotJob,materialDueDate,  \n" +
                "				partID,isCancle,tentativeBuild,uom,lineID,createByRoleId,updateByRoleId,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,custPOLineNumber,partCategory,salesOrderDetStatus,  \n" +
                "				 isSkipKitCreation,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType,refSODetID)  \n" +
                "  \n" +
                "			 SELECT @refSalesOrderID,qty,price,shippingQty,remark,pUserID,pUserID,materialTentitiveDocDate,prcNumberofWeek,isHotJob,materialDueDate,  \n" +
                "			  partID,0,tentativeBuild,uom,(SELECT MAX(sd.lineID)+1 FROM salesorderdet sd WHERE sd.refSalesOrderID=@refSalesOrderID AND sd.isdeleted=0)lineID,pUserRoleID,pUserRoleID,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,(SELECT COUNT(1)+1 FROM salesorderdet sd WHERE sd.refSalesOrderID=@refSalesOrderID AND sd.isdeleted=0),partCategory,1,  \n" +
                "			  isSkipKitCreation,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType,pSoDetID  \n" +
                "			  FROM salesorderdet WHERE refSODetID=pBlanketPOID AND isdeleted=0;  \n" +
                "  \n" +
                "			  -- update sales order release line  \n" +
                "				UPDATE salesorderdet sd SET sd.refSOReleaseLineID=(SELECT ss.shippingID FROM salesshippingmst ss WHERE ss.sDetID=sd.id LIMIT 1)  \n" +
                "				WHERE sd.frequency=2 AND sd.refSODetID=pSoDetID;  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 29-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5551,'2.00','V1',' Alter Procedure Sproc_checkDelete_salesordermst-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5551:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-11-2021 *********************************** */
                "ALTER TABLE `packing_slip_material_receive_det`  \n" +
                "CHANGE COLUMN `umidCreatedQty` `umidCreatedQty` DECIMAL(18,8) NOT NULL DEFAULT 0;  \n" +
                "ALTER TABLE `packing_slip_material_receive_det`  \n" +
                "ADD COLUMN `rmaCreatedQty` DECIMAL(18,8) NOT NULL DEFAULT 0 AFTER `umidCreatedQty`;  \n" +
                "ALTER TABLE packing_slip_material_receive_Det  \n" +
                "ADD CONSTRAINT CHK_unidCreatedQty CHECK ((umidCreatedQty+rmaCreatedQty) <= receivedQty);  \n" +
                /* **************************** Add Script Version -> 29-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5552,'2.00','V1','User Story 38690: Change in Material received flow for performance improvement - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5552:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-11-2021 *********************************** */
                "drop view if exists vu_umid_creation_pending;  \n" +
                "CREATE VIEW `vu_umid_creation_pending` AS  \n" +
                "select `p`.`id` AS `packingSlipID`,  \n" +
                "		`p`.`packingSlipNumber` AS `packingSlipNumber`,  \n" +
                "        `p`.`isNonUMIDStock` AS `isPackingSlipNonUMIDStock`,  \n" +
                "        `psd`.`id` AS `packingSlipDetID`,  \n" +
                "		`psd`.`packingSlipSerialNumber` AS `packingSlipSerialNumber`,  \n" +
                "		`psd`.`packagingID` AS `packagingID`,  \n" +
                "		`psd`.`binID` AS `BinID`,  \n" +
                "		`psd`.`warehouseID` AS `warehouseID`,  \n" +
                "		`psd`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "		`psd`.`partID` AS `PartId`,  \n" +
                "		`psd`.`nickname` AS `nickname`,  \n" +
                "		`psd`.`receivedQty` AS `InQty`,  \n" +
                "		`psd`.`umidCreatedQty` AS `UMIDCreatedQty`,  \n" +
                "		`psd`.`rmaCreatedQty` AS `returnQty`,  \n" +
                "        ifnull(`psd`.`receivedQty`,0) - ifnull(`psd`.`umidCreatedQty`,0) - ifnull(`psd`.`rmaCreatedQty`,0) AS `BalanceQty`,  \n" +
                "		`psd`.`receivedStatus` AS `receivedStatus`,  \n" +
                "		`psd`.`isNonUMIDStock` AS `isNonUMIDStock`  \n" +
                "   from `packing_slip_material_receive` `p`  \n" +
                "   join `packing_slip_material_receive_det` `psd` ON `p`.`id` = `psd`.`refPackingSlipMaterialRecID`  \n" +
                "  where `p`.`receiptType` = 'P'  \n" +
                "    and `p`.`isDeleted` = 0  \n" +
                "	and `psd`.`umidCreated` = 0  \n" +
                "    and `psd`.`binID` is not null  \n" +
                "	and `psd`.`isDeleted` = 0;  \n" +
                /* **************************** Add Script Version -> 29-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5553,'2.00','V1','User Story 38690: Change in Material received flow for performance improvement - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5553:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-11-2021 *********************************** */
                "drop procedure if exists `Sproc_update_UMID_initial_count`;  \n" +
                "CREATE PROCEDURE `Sproc_update_UMID_initial_count`(  \n" +
                "	IN pId INT,  \n" +
                "	IN pOrgQty DECIMAL(18,8),  \n" +
                "	IN pOrgPkgUnit DECIMAL(18,8),  \n" +
                "	IN pUpdatedBy VARCHAR(255),  \n" +
                "	IN pInitialQtyChangeRemark VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vOrgInitialQty DECIMAL(18, 8);  \n" +
                "	DECLARE vQtyDifference DECIMAL(18,8);  \n" +
                "	DECLARE vBalanceQty DECIMAL(18,8);  \n" +
                "	DECLARE vIsQtyUpdate TINYINT;  \n" +
                "	DECLARE vInventoryType VARCHAR(2);  \n" +
                "    DECLARE v_ReceivedStatus VARCHAR(5);  \n" +
                "    DECLARE v_PackingSlipModeStatus VARCHAR(5);  \n" +
                "    DECLARE v_ErrorCode INT;  \n" +
                "    DECLARE v_PackingslipId INT;  \n" +
                "    DECLARE v_PackingSlipNumber VARCHAR(55);  \n" +
                "    DECLARE v_PackingSlipDetId INT;  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "        # get UMID detail before update qty and units to manage history  \n" +
                "          DROP TEMPORARY TABLE IF EXISTS tempUMIDDetail;  \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS tempUMIDDetail AS  \n" +
                "		SELECT css.id, css.uid, css.refcompid, css.orgQty, css.orgPkgUnit, css.pkgQty, css.pkgUnit, css.fromBin, css.packaging, css.stockInventoryType, css.woNumber  \n" +
                "		  FROM component_sid_stock css  \n" +
                "		 WHERE css.id = pId  \n" +
                "		   AND isDeleted = 0;  \n" +
                "  \n" +
                "        SELECT orgQty, stockInventoryType INTO vOrgInitialQty, vInventoryType FROM tempUMIDDetail;  \n" +
                "  \n" +
                "        # get Packing slip Mode status and packing slip line level status for selected umid  \n" +
                "        SELECT  psd.id, psd.receivedStatus, ps.packingSlipModeStatus, ps.id, ps.packingSlipNumber  \n" +
                "				INTO  v_PackingSlipDetId, v_ReceivedStatus, v_PackingSlipModeStatus, v_PackingslipId, v_PackingSlipNumber  \n" +
                "			FROM	packing_slip_material_receive_det  psd  \n" +
                "				INNER JOIN packing_slip_material_receive ps ON psd.refPackingSlipMaterialRecID = ps.id  AND ps.isDeleted = 0  \n" +
                "			AND  psd.id IN (  \n" +
                "				SELECT 	refPackingSlipDetailID  \n" +
                "				FROM  	component_sid_stock_packing_detail  \n" +
                "				WHERE 	refComponentSidStockID = pId  \n" +
                "						AND isDeleted = 0  \n" +
                "					);  \n" +
                "	# Check if UMID is for new stock Else for existing stock  \n" +
                "	IF (vInventoryType = 'NI') THEN  \n" +
                "		# If packing slip status is in draft mode then we have to restrict  \n" +
                "        IF(v_PackingSlipModeStatus = 'D') THEN  \n" +
                "		# Update packing slip detail if new orginial qty is less than previous original qty  \n" +
                "             SET v_ErrorCode = 1;  \n" +
                "             SELECT  \n" +
                "					t.id,  \n" +
                "					t.uid,  \n" +
                "					v_PackingslipId AS packingslipId,  \n" +
                "					v_PackingSlipNumber AS packingSlipNumber,  \n" +
                "                    v_ErrorCode AS errorCode  \n" +
                "			FROM 	tempUMIDDetail t  \n" +
                "			INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "			INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "            SET vIsQtyUpdate = 0;  \n" +
                "		ELSE  \n" +
                "			IF(pOrgQty < vOrgInitialQty) THEN  \n" +
                "				# if new original qty is less than previous qty then make UMID created flag to false  \n" +
                "				UPDATE 	packing_slip_material_receive_det  \n" +
                "				SET 	umidCreated = ((IFNULL(umidCreatedQty,0) + IFNULL(rmaCreatedQty,0) - (vOrgInitialQty - pOrgQty))=receivedQty),  \n" +
                "						umidCreatedQty = (IFNULL(umidCreatedQty,0) - (vOrgInitialQty - pOrgQty))  \n" +
                "				WHERE   id IN (  \n" +
                "					SELECT 	refPackingSlipDetailID  \n" +
                "					FROM  	component_sid_stock_packing_detail  \n" +
                "					WHERE 	refComponentSidStockID = pId  \n" +
                "							AND isDeleted = 0  \n" +
                "						);  \n" +
                "  \n" +
                "				UPDATE 	component_sid_stock_packing_detail  \n" +
                "				SET 	packingSlipQty =  pOrgQty  \n" +
                "				WHERE   refComponentSidStockID = pId  AND isDeleted = 0 ;  \n" +
                "  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "  \n" +
                "			# Update packing slip detail if new orginial qty is more than previous original qty  \n" +
                "			ELSEIF(pOrgQty > vOrgInitialQty) THEN  \n" +
                "				SET vQtyDifference = (pOrgQty - vOrgInitialQty);  \n" +
                "				SELECT 	vu.BalanceQty INTO vBalanceQty  \n" +
                "				FROM 	vu_umid_creation_pending vu  \n" +
                "				WHERE 	vu.packingSlipDetID = v_PackingSlipDetId;  \n" +
                "  \n" +
                "				# If pending balance qty is more than new additional original qty then make UMID created flag to false  \n" +
                "				IF(vBalanceQty > vQtyDifference) THEN  \n" +
                "					UPDATE 	packing_slip_material_receive_det  \n" +
                "					SET 	umidCreated = ((IFNULL(umidCreatedQty,0)+IFNULL(rmaCreatedQty,0) + IFNULL(vQtyDifference,0))=receivedQty),  \n" +
                "							umidCreatedQty = (IFNULL(umidCreatedQty,0) + IFNULL(vQtyDifference,0))  \n" +
                "					WHERE   id IN (  \n" +
                "						SELECT 	refPackingSlipDetailID  \n" +
                "						FROM  	component_sid_stock_packing_detail  \n" +
                "						WHERE 	refComponentSidStockID = pId  \n" +
                "								AND isDeleted = 0  \n" +
                "							);  \n" +
                "					UPDATE 	component_sid_stock_packing_detail  \n" +
                "					SET 	packingSlipQty =  pOrgQty  \n" +
                "					WHERE   refComponentSidStockID = pId  AND isDeleted = 0 ;  \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 1;  \n" +
                "				# If pending balance qty and new additional original qty are equal then make UMID created flag to true  \n" +
                "				ELSEIF(vBalanceQty = vQtyDifference) THEN  \n" +
                "					UPDATE 	packing_slip_material_receive_det  \n" +
                "					SET 	umidCreated = ((IFNULL(umidCreatedQty,0) + IFNULL(rmaCreatedQty,0) + IFNULL(vQtyDifference,0))=receivedQty),  \n" +
                "							umidCreatedQty = (IFNULL(umidCreatedQty,0) + IFNULL(vQtyDifference,0))  \n" +
                "					WHERE   id IN (  \n" +
                "						SELECT 	refPackingSlipDetailID  \n" +
                "						FROM  	component_sid_stock_packing_detail  \n" +
                "						WHERE 	refComponentSidStockID = pId  \n" +
                "								AND isDeleted = 0  \n" +
                "							);  \n" +
                "					UPDATE 	component_sid_stock_packing_detail  \n" +
                "					SET 	packingSlipQty =  pOrgQty  \n" +
                "					WHERE   refComponentSidStockID = pId  AND isDeleted = 0 ;  \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 1;  \n" +
                "				# Else inform user that stock is not available to increase original qty  \n" +
                "				ELSE  \n" +
                "					SELECT 		b.name AS binName,  \n" +
                "							IF(vBalanceQty > 0 , vBalanceQty, vBalanceQty * -1) AS BalanceQty,  \n" +
                "							c.PIDCode,  \n" +
                "							pOrgQty newOrgQty  \n" +
                "					FROM 		tempUMIDDetail t  \n" +
                "					INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "					INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "					SET vIsQtyUpdate = 0;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				SET vIsQtyUpdate = 0;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "    ELSEIF(vInventoryType = 'AI') THEN  \n" +
                "		IF(pOrgQty < vOrgInitialQty) THEN  \n" +
                "			SET vIsQtyUpdate = 1;  \n" +
                "		# Update packing slip detail if new orginial qty is more than previous original qty  \n" +
                "		ELSEIF(pOrgQty > vOrgInitialQty) THEN  \n" +
                "			SET vQtyDifference = (pOrgQty - vOrgInitialQty);  \n" +
                "			SELECT 	vu.availableQty INTO vBalanceQty  \n" +
                "			FROM 	vu_customer_packing_slip_qty vu  \n" +
                "			WHERE 	EXISTS (SELECT 1  \n" +
                "							FROM tempUMIDDetail t  \n" +
                "                            WHERE t.fromBin = vu.binID  \n" +
                "                            AND t.refcompid = vu.partID  \n" +
                "                            AND t.woNumber = vu.woNumber);  \n" +
                "  \n" +
                "			# If pending balance qty is more than new additional original qty then make UMID created flag to false  \n" +
                "			IF(vBalanceQty > vQtyDifference) THEN  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "			# If pending balance qty and new additional original qty are equal then make UMID created flag to true  \n" +
                "			ELSEIF(vBalanceQty = vQtyDifference) THEN  \n" +
                "				SET vIsQtyUpdate = 1;  \n" +
                "			# Else inform user that stock is not available to increase original qty  \n" +
                "			ELSE  \n" +
                "				SELECT 	 b.name AS binName,  \n" +
                "						vBalanceQty AS BalanceQty,  \n" +
                "						c.PIDCode,  \n" +
                "						pOrgQty newOrgQty  \n" +
                "				FROM 	tempUMIDDetail t  \n" +
                "				INNER JOIN 	component c ON t.refcompid = c.id  \n" +
                "				INNER JOIN 	binmst b ON t.fromBin = b.id;  \n" +
                "  \n" +
                "				SET vIsQtyUpdate = 0;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "    ELSE  \n" +
                "		SET vIsQtyUpdate = 1;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(vIsQtyUpdate = 1) THEN  \n" +
                "		# update qty and count based on data  \n" +
                "		UPDATE 	component_sid_stock css, tempUMIDDetail t  \n" +
                "		SET 	css.pkgQty = (IFNULL(pOrgQty, 0) - IFNULL(t.orgQty, 0) + IFNULL(t.pkgQty, 0)),  \n" +
                "			css.pkgUnit = (IFNULL(pOrgPkgUnit, 0) - IFNULL(t.orgPkgUnit, 0) + IFNULL(t.pkgUnit, 0)),  \n" +
                "			css.orgQty = IFNULL(pOrgQty, 0), 		css.orgPkgUnit = IFNULL(pOrgPkgUnit, 0),  \n" +
                "			css.initialQtyChangeRemark = pInitialQtyChangeRemark,  \n" +
                "			css.updatedBy = pUpdatedBy,  \n" +
                "			css.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	css.id = t.id;  \n" +
                "  \n" +
                "		-- Insert log in UMID history page  \n" +
                "		INSERT INTO component_sid_stock_history  \n" +
                "		(  \n" +
                "			transType, 				actionPerformed, 		refUIDId, 	uid, 			refcompid,  \n" +
                "			binID, 					warehouseID, 			deptWHID, 	orgQty, 		orgUnit,  \n" +
                "			currentQty, 				currentUnit, 			uom, 		reason,  \n" +
                "			isDeleted, 				createdBy, 			createdAt,  \n" +
                "			updatedBy, 				updatedAt  \n" +
                "		)  \n" +
                "		SELECT  'Change Initial Qty.',  \n" +
                "			'Change Initial Qty',  \n" +
                "			css.id,  \n" +
                "			uid,  \n" +
                "			refcompid,  \n" +
                "			css.binID,  \n" +
                "			b.warehouseID,  \n" +
                "			w.parentWHID,  \n" +
                "			orgQty,  \n" +
                "			orgPkgUnit,  \n" +
                "			pkgQty,  \n" +
                "			pkgUnit,  \n" +
                "			uom,  \n" +
                "			pInitialQtyChangeRemark,  \n" +
                "			0,  \n" +
                "			pUpdatedBy,  \n" +
                "			fun_DatetimetoUTCDateTime(),  \n" +
                "			pUpdatedBy,  \n" +
                "			fun_DatetimetoUTCDateTime()  \n" +
                "		FROM 	component_sid_stock  css  \n" +
                "		JOIN 	binmst b ON css.binID = b.id  \n" +
                "		JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "		WHERE 	css.id = pId;  \n" +
                "  \n" +
                "		# Update allocated qty with return status  \n" +
                "		UPDATE 	kit_allocation k  \n" +
                "		SET	k.status = 'D',  \n" +
                "			k.updatedBy = pUpdatedBy,  \n" +
                "			k.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	k.refUIDId = pId  \n" +
                "				AND k.status = 'A';  \n" +
                "	END IF;  \n" +
                "	COMMIT;  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_SaveInvoiceAndInvoiceLineDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_SaveInvoiceAndInvoiceLineDetail`(  \n" +
                "	IN pInvoiceDetail JSON,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pSystemId VARCHAR(20),  \n" +
                "	IN pUserId VARCHAR(50),  \n" +
                "	IN pUserRoleId VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountOfInvoiceDetail INT;  \n" +
                "	DECLARE v_CountOfInvoiceLineDetail INT;  \n" +
                "    DECLARE v_CountOfRMA INT;  \n" +
                "	DECLARE v_IdOfInvoice INT;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Detail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Invoice_Detail AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pInvoiceDetail,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				poNumber VARCHAR(50) PATH \"$.poNumber\",  \n" +
                "				poDate DATE PATH \"$.poDate\",  \n" +
                "				mfgCodeID INT PATH \"$.mfgCodeID\",  \n" +
                "				supplierSONumber VARCHAR(50) PATH \"$.supplierSONumber\",  \n" +
                "                soDate DATE PATH \"$.soDate\",  \n" +
                "				packingSlipNumber VARCHAR(50) PATH \"$.packingSlipNumber\",  \n" +
                "				packingSlipDate DATE PATH \"$.packingSlipDate\",  \n" +
                "				invoiceNumber VARCHAR(50) PATH \"$.invoiceNumber\",  \n" +
                "				invoiceDate DATE PATH \"$.invoiceDate\",  \n" +
                "				creditMemoNumber VARCHAR(50) PATH \"$.creditMemoNumber\",  \n" +
                "				creditMemoDate DATE PATH \"$.creditMemoDate\",  \n" +
                "				debitMemoNumber VARCHAR(50) PATH \"$.debitMemoNumber\",  \n" +
                "				debitMemoDate DATE PATH \"$.debitMemoDate\",  \n" +
                "				receiptDate DATE PATH \"$.receiptDate\",  \n" +
                "				receiptType VARCHAR(1) PATH \"$.receiptType\",  \n" +
                "				`status` VARCHAR(5) PATH \"$.status\",  \n" +
                "				applyDate DATE PATH \"$.applyDate\",  \n" +
                "				invoiceTotalDue DECIMAL(18,8) PATH \"$.invoiceTotalDue\",  \n" +
                "				isTariffInvoice TINYINT PATH \"$.isTariffInvoice\",  \n" +
                "				refPackingSlipId INT PATH \"$.refPackingSlipId\",  \n" +
                "				paymentTermsID INT PATH \"$.paymentTermsID\",  \n" +
                "				termsDays INT PATH \"$.termsDays\",  \n" +
                "				creditMemoType VARCHAR(5) PATH \"$.creditMemoType\",  \n" +
                "                invoiceRequireManagementApproval INT PATH \"$.invoiceRequireManagementApproval\",  \n" +
                "                internalRemark  VARCHAR(1000) PATH \"$.internalRemark\",  \n" +
                "                remark  VARCHAR(1000) PATH \"$.remark\",  \n" +
                "                refSupplierCreditMemoNumber  VARCHAR(50) PATH \"$.refSupplierCreditMemoNumber\",  \n" +
                "                refPurchaseOrderID INT PATH \"$.refPurchaseOrderID\"  \n" +
                "			)  \n" +
                "		) AS Invoice_Detail_JT;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Line_Detail;  \n" +
                "		CREATE TEMPORARY TABLE temp_Invoice_Line_Detail  \n" +
                "		(  \n" +
                "			packingSlipSerialNumber VARCHAR(50),  \n" +
                "			nickname VARCHAR(50),  \n" +
                "			partID INT,  \n" +
                "			refSupplierPartId INT,  \n" +
                "			scanLabel VARCHAR(1000),  \n" +
                "			receivedQty DECIMAL(18,8),  \n" +
                "			packingSlipQty DECIMAL(18,8),  \n" +
                "			binID INT,  \n" +
                "			warehouseID INT,  \n" +
                "			parentWarehouseID INT,  \n" +
                "			invoicePrice DECIMAL(18,8),  \n" +
                "			purchasePrice DECIMAL(18,8),  \n" +
                "			disputedPrice DECIMAL(18,8),  \n" +
                "			approveNote VARCHAR(1000),  \n" +
                "			otherCharges INT,  \n" +
                "			`status` VARCHAR(1),  \n" +
                "			extendedPrice DECIMAL(18,8),  \n" +
                "			refCreditDebitInvoiceNo INT,  \n" +
                "			difference DECIMAL(18,8),  \n" +
                "			umidCreated TINYINT,  \n" +
                "			poReleaseNumber VARCHAR(1000),  \n" +
                "			packagingID INT,  \n" +
                "			receivedStatus VARCHAR(2),  \n" +
                "			remark LONGTEXT  \n" +
                "		);  \n" +
                "  \n" +
                "		INSERT INTO temp_Invoice_Line_Detail (  \n" +
                "			packingSlipSerialNumber,  \n" +
                "			nickname,  \n" +
                "			partID,  \n" +
                "			refSupplierPartId,  \n" +
                "			scanLabel,  \n" +
                "			receivedQty,  \n" +
                "			packingSlipQty,  \n" +
                "			binID,  \n" +
                "			warehouseID,  \n" +
                "			parentWarehouseID,  \n" +
                "			invoicePrice,  \n" +
                "			disputedPrice,  \n" +
                "			approveNote,  \n" +
                "			otherCharges,  \n" +
                "			`status`,  \n" +
                "			extendedPrice,  \n" +
                "			refCreditDebitInvoiceNo,  \n" +
                "			difference,  \n" +
                "			umidCreated,  \n" +
                "			poReleaseNumber,  \n" +
                "			packagingID,  \n" +
                "			receivedStatus,  \n" +
                "			remark  \n" +
                "		)  \n" +
                "		SELECT  packingSlipSerialNumber,  \n" +
                "			nickname,  \n" +
                "			partID,  \n" +
                "			refSupplierPartId,  \n" +
                "			scanLabel,  \n" +
                "			receivedQty,  \n" +
                "			packingSlipQty,  \n" +
                "			binID,  \n" +
                "			warehouseID,  \n" +
                "			parentWarehouseID,  \n" +
                "			invoicePrice,  \n" +
                "			disputedPrice,  \n" +
                "			approveNote,  \n" +
                "			otherCharges,  \n" +
                "			`status`,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN (packingSlipQty IS NOT NULL AND invoicePrice IS NOT NULL) THEN  \n" +
                "						(packingSlipQty * invoicePrice)  \n" +
                "					ELSE  \n" +
                "						NULL  \n" +
                "				END  \n" +
                "			),  \n" +
                "			refCreditDebitInvoiceNo,  \n" +
                "			difference,  \n" +
                "			umidCreated,  \n" +
                "			poReleaseNumber,  \n" +
                "			packagingID,  \n" +
                "			receivedStatus,  \n" +
                "			remark  \n" +
                "		FROM 	packing_slip_material_receive_det  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "				AND refPackingSlipMaterialRecID = pPackingSlipId;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_CountOfInvoiceDetail FROM temp_Invoice_Detail;  \n" +
                "  \n" +
                "			IF (v_CountOfInvoiceDetail > 0) THEN  \n" +
                "				INSERT INTO packing_slip_material_receive (systemId, poNumber, poDate, mfgCodeID, supplierSONumber, soDate, packingSlipNumber, packingSlipDate, invoiceNumber, invoiceDate,  \n" +
                "							creditMemoNumber, creditMemoDate, debitMemoNumber, debitMemoDate, receiptDate, receiptType, `status`, applyDate, invoiceTotalDue, isTariffInvoice,  \n" +
                "							creditMemoType, createdBy, updatedBy, createByRoleId, updateByRoleId, paymentTermsID,termsDays, invoiceRequireManagementApproval,  \n" +
                "                            internalRemark, remark, invoiceApprovalStatus, refSupplierCreditMemoNumber, refPurchaseOrderID)  \n" +
                "				SELECT 	pSystemId,  \n" +
                "					(CASE WHEN (poNumber IS NULL OR poNumber = \"\") THEN NULL ELSE poNumber END),  \n" +
                "					(CASE WHEN (poDate IS NULL OR poDate = \"0000-00-00\") THEN NULL ELSE poDate END),  \n" +
                "					mfgCodeID,  \n" +
                "					(CASE WHEN (supplierSONumber IS NULL OR supplierSONumber = \"\") THEN NULL ELSE supplierSONumber END),  \n" +
                "                    (CASE WHEN (soDate IS NULL OR soDate = \"0000-00-00\") THEN NULL ELSE soDate END),  \n" +
                "					packingSlipNumber, packingSlipDate,  \n" +
                "					(CASE WHEN (invoiceNumber IS NULL OR invoiceNumber = \"\") THEN NULL ELSE invoiceNumber END),  \n" +
                "					(CASE WHEN (invoiceDate IS NULL OR invoiceDate = \"0000-00-00\") THEN NULL ELSE invoiceDate END),  \n" +
                "					(CASE WHEN (creditMemoNumber IS NULL OR creditMemoNumber = \"\") THEN NULL ELSE creditMemoNumber END),  \n" +
                "					(CASE WHEN (creditMemoDate IS NULL OR creditMemoDate = \"0000-00-00\") THEN NULL ELSE creditMemoDate END),  \n" +
                "					(CASE WHEN (debitMemoNumber IS NULL OR debitMemoNumber = \"\") THEN NULL ELSE debitMemoNumber END),  \n" +
                "					(CASE WHEN (debitMemoDate IS NULL OR debitMemoDate = \"0000-00-00\") THEN NULL ELSE debitMemoDate END),  \n" +
                "					receiptDate, receiptType,  \n" +
                "					`status`, -- (case when invoiceRequireManagementApproval = 0 then `status` else 'I' end), /*status*/  \n" +
                "					applyDate, invoiceTotalDue, isTariffInvoice,  \n" +
                "					(CASE WHEN creditMemoType IS NULL OR creditMemoType = \"\" THEN NULL ELSE creditMemoType END),  \n" +
                "					pUserId, pUserId, pUserRoleId, pUserRoleId, paymentTermsID, termsDays, invoiceRequireManagementApproval,  \n" +
                "                    internalRemark,  \n" +
                "                    remark,  \n" +
                "					(CASE WHEN invoiceRequireManagementApproval = 0 THEN 3 ELSE 2 END) /*invoiceApprovalStatus*/,  \n" +
                "                    (CASE WHEN (refSupplierCreditMemoNumber IS NULL OR refSupplierCreditMemoNumber = \"\") THEN NULL ELSE refSupplierCreditMemoNumber END) /*refSupplierCreditMemoNumber*/,  \n" +
                "                    (CASE WHEN (refPurchaseOrderID IS NULL OR refPurchaseOrderID = 0) THEN NULL ELSE refPurchaseOrderID END)  \n" +
                "				FROM 	temp_Invoice_Detail;  \n" +
                "  \n" +
                "				SELECT LAST_INSERT_ID() INTO v_IdOfInvoice;  \n" +
                "  \n" +
                "				UPDATE 	packing_slip_material_receive  \n" +
                "				SET 	refPackingSlipNumberForInvoice = v_IdOfInvoice,  \n" +
                "					`status` = (CASE WHEN receiptType = 'P' THEN 'IR' WHEN receiptType = 'R' THEN 'CR' ELSE NULL END)  \n" +
                "				WHERE	id = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1)  \n" +
                "						AND isDeleted = 0;  \n" +
                "  \n" +
                "				select count(1) into v_CountOfRMA  \n" +
                "                  from packing_slip_material_receive_det d  \n" +
                "				 where exists (select 1 from packing_slip_material_receive p where p.id = d.refPackingSlipMaterialRecID and p.receiptType = 'R' and p.isDeleted = 0)  \n" +
                "					and d.refPackingSlipIdForRma = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1) /*packing slip id*/  \n" +
                "                    and d.isDeleted = 0  \n" +
                "					and d.refPackingSlipForRma is null/*manual packing slip*/  \n" +
                "					and d.refInvoiceIdForRma is null /* invoice id */;  \n" +
                "                 IF v_CountOfRMA != 0 THEN  \n" +
                "					/*update invoice id in RMA packing slip which is created before creating invoice*/  \n" +
                "                    update packing_slip_material_receive_det d  \n" +
                "						set d.refInvoiceIdForRma = v_IdOfInvoice  \n" +
                "					 where exists (select 1 from packing_slip_material_receive p where p.id = d.refPackingSlipMaterialRecID and p.receiptType = 'R' and p.isDeleted = 0)  \n" +
                "						and d.refPackingSlipIdForRma = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1) /*packing slip id*/  \n" +
                "						and d.isDeleted = 0  \n" +
                "						and d.refPackingSlipForRma is null/*manual packing slip*/  \n" +
                "						and d.refInvoiceIdForRma is null /* invoice id */;  \n" +
                "				 END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_CountOfInvoiceLineDetail FROM temp_Invoice_Line_Detail;  \n" +
                "			IF (v_CountOfInvoiceLineDetail > 0) THEN  \n" +
                "				INSERT INTO packing_slip_material_receive_det (refPackingSlipMaterialRecID, packingSlipSerialNumber, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, purchasePrice, disputedPrice, otherCharges, `status`, extendedPrice, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, createdBy, updatedBy, createByRoleId, updateByRoleId, umidcreated)  \n" +
                "				SELECT 	v_IdOfInvoice, packingSlipSerialNumber,  \n" +
                "					nickname,  \n" +
                "					(CASE WHEN ( partID > 0) THEN  partID ELSE NULL END),  \n" +
                "					(CASE WHEN ( refSupplierPartId > 0) THEN  refSupplierPartId ELSE NULL END),  \n" +
                "					scanLabel,  \n" +
                "					receivedQty,  \n" +
                "					packingSlipQty,  \n" +
                "					(CASE WHEN ( binID > 0) THEN  binID ELSE NULL END),  \n" +
                "					(CASE WHEN ( warehouseID > 0) THEN  warehouseID ELSE NULL END),  \n" +
                "					(CASE WHEN ( parentWarehouseID < 0) THEN  parentWarehouseID ELSE NULL END),  \n" +
                "					invoicePrice,  \n" +
                "					purchasePrice,  \n" +
                "					disputedPrice,  \n" +
                "					otherCharges,  \n" +
                "					`status`,  \n" +
                "					extendedPrice,  \n" +
                "					(CASE WHEN ( refCreditDebitInvoiceNo > 0) THEN  refCreditDebitInvoiceNo ELSE NULL END),  \n" +
                "					difference,  \n" +
                "					umidCreated,  \n" +
                "					poReleaseNumber,  \n" +
                "					(CASE WHEN ( packagingID > 0) THEN  packagingID ELSE NULL END),  \n" +
                "					receivedStatus,  \n" +
                "					remark,  \n" +
                "					pUserId,  \n" +
                "					pUserId,  \n" +
                "					pUserRoleId,  \n" +
                "					pUserRoleId,  \n" +
                "                    true umidcreated  \n" +
                "				FROM 	temp_Invoice_Line_Detail;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "	SELECT v_IdOfInvoice AS PackingSlipId;  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_CheckAndReGetPackingSlipLineDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_CheckAndReGetPackingSlipLineDetail`(  \n" +
                "	IN pInvoiceId INT,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pAction VARCHAR(50),  \n" +
                "	IN pUserId VARCHAR(50),  \n" +
                "	IN pUserRoleId VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_InsertCount INT;  \n" +
                "	DECLARE v_DeleteCount INT;  \n" +
                "	DECLARE v_UpdateCount INT;  \n" +
                "	DECLARE v_TotalDetailCount INT;  \n" +
                "	DECLARE v_PendingCount INT;  \n" +
                "	DECLARE v_DisapproveCount INT;  \n" +
                "	DECLARE v_ApproveCount INT;  \n" +
                "	DECLARE v_DetailLineStatus VARCHAR(5);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_ReGet_Validation_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_ReGet_Validation_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		NoOfLineInsert INT,  \n" +
                "		NoOfLineDelete INT,  \n" +
                "		NoOfLineUpdate INT  \n" +
                "	);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Insert_Packing_Slip_Record;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Insert_Packing_Slip_Record AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	packing_slip_material_receive_det  \n" +
                "	WHERE 	refPackingSlipMaterialRecID = pPackingSlipId  \n" +
                "			AND deletedAt IS NULL  \n" +
                "			AND packingSlipSerialNumber < 1000  \n" +
                "			AND packingSlipSerialNumber NOT IN (  \n" +
                "				SELECT 	packingSlipSerialNumber  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE 	refPackingSlipMaterialRecID = pInvoiceId  \n" +
                "						AND packingSlipSerialNumber < 1000  \n" +
                "						AND deletedAt IS NULL  \n" +
                "			);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Delete_Packing_Slip_Record;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Delete_Packing_Slip_Record AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	packing_slip_material_receive_det  \n" +
                "	WHERE 	refPackingSlipMaterialRecID = pInvoiceId  \n" +
                "			AND deletedAt IS NULL  \n" +
                "			AND packingSlipSerialNumber < 1000  \n" +
                "			AND packingSlipSerialNumber NOT IN (  \n" +
                "				SELECT 	packingSlipSerialNumber  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE 	refPackingSlipMaterialRecID = pPackingSlipId  \n" +
                "						AND packingSlipSerialNumber < 1000  \n" +
                "						AND deletedAt IS NULL  \n" +
                "			);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Update_Packing_Slip_Record;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Update_Packing_Slip_Record AS  \n" +
                "	SELECT 		ps.id packingSlipId,  \n" +
                "			si.id invoiceId,  \n" +
                "			ps.packingSlipSerialNumber,  \n" +
                "			si.packingSlipSerialNumber invoicePackingSlipSerialNumber,  \n" +
                "			si.orderedQty,  \n" +
                "			si.orderedQty invoiceOrderedQty,  \n" +
                "			ps.receivedQty,  \n" +
                "			si.receivedQty invoiceReceivedQty,  \n" +
                "			ps.packingSlipQty,  \n" +
                "			si.packingSlipQty invoicePackingSlipQty,  \n" +
                "			si.invoicePrice,  \n" +
                "			ps.packagingID,  \n" +
                "			si.packagingID invoicePackagingID,  \n" +
                "			ps.nickname,  \n" +
                "			si.nickname invoiceNickname,  \n" +
                "			ps.receivedStatus,  \n" +
                "			si.receivedStatus invoiceReceivedStatus,  \n" +
                "			ps.remark,  \n" +
                "			si.remark invoiceRemark,  \n" +
                "			(CASE WHEN ps.packingSlipSerialNumber != si.packingSlipSerialNumber THEN 1 ELSE 0 END) isSerialNumberUpdate,  \n" +
                "			(CASE WHEN ps.orderedQty != si.orderedQty THEN 1 ELSE 0 END) isOrderedQtyUpdate,  \n" +
                "			(CASE WHEN ps.receivedQty != si.receivedQty THEN 1 ELSE 0 END) isReceivedQtyUpdate,  \n" +
                "			(CASE WHEN ps.packingSlipQty != si.packingSlipQty THEN 1 ELSE 0 END) isPackingSlipQtyUpdate,  \n" +
                "			(CASE WHEN ps.packagingID != si.packagingID THEN 1 ELSE 0 END) isPackagingIDUpdate,  \n" +
                "			(CASE WHEN ps.nickname != si.nickname THEN 1 ELSE 0 END) isNicknameUpdate,  \n" +
                "			(CASE WHEN ps.receivedStatus != si.receivedStatus THEN 1 ELSE 0 END) isReceivedStatusUpdate,  \n" +
                "			(CASE WHEN ps.remark != si.remark THEN 1 ELSE 0 END) isRemarkUpdate  \n" +
                "	FROM 		packing_slip_material_receive_det ps  \n" +
                "	INNER JOIN 	packing_slip_material_receive_det si ON si.packingSlipSerialNumber = ps.packingSlipSerialNumber AND si.deletedAt IS NULL AND si.packingSlipSerialNumber < 1000  \n" +
                "	WHERE 		ps.refPackingSlipMaterialRecID = pPackingSlipId AND si.refPackingSlipMaterialRecID = pInvoiceId  \n" +
                "				AND ps.deletedAt IS NULL;  \n" +
                "  \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_InsertCount FROM temp_Insert_Packing_Slip_Record;  \n" +
                "	SELECT 	COUNT(1) INTO v_DeleteCount FROM temp_Delete_Packing_Slip_Record;  \n" +
                "  \n" +
                "	IF ((SELECT receiptType FROM packing_slip_material_receive WHERE id = pPackingSlipId AND isDeleted = 0) = 'R') THEN  \n" +
                "		SET v_UpdateCount = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT 	COUNT(1) INTO v_UpdateCount  \n" +
                "		FROM 	temp_Update_Packing_Slip_Record  \n" +
                "		WHERE 	(  \n" +
                "				isSerialNumberUpdate = 1 OR  \n" +
                "				isOrderedQtyUpdate = 1 OR  \n" +
                "				isReceivedQtyUpdate = 1 OR  \n" +
                "				isPackingSlipQtyUpdate = 1 OR  \n" +
                "				isPackagingIDUpdate = 1 OR  \n" +
                "				isNicknameUpdate = 1 OR  \n" +
                "				isReceivedStatusUpdate = 1 OR  \n" +
                "				isRemarkUpdate = 1  \n" +
                "			);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(v_InsertCount, 0) = 0 AND IFNULL(v_DeleteCount, 0) = 0 AND IFNULL(v_UpdateCount, 0) = 0) THEN  \n" +
                "		INSERT INTO temp_ReGet_Validation_Error (IsSuccess, NoOfLineInsert, NoOfLineDelete, NoOfLineUpdate) VALUES(TRUE, 0, 0, 0);  \n" +
                "	ELSE  \n" +
                "		IF (pAction = 'GetNotification') THEN  \n" +
                "			INSERT INTO temp_ReGet_Validation_Error (IsSuccess, NoOfLineInsert, NoOfLineDelete, NoOfLineUpdate) VALUES(FALSE, v_InsertCount, v_DeleteCount, v_UpdateCount);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(v_InsertCount, 0) > 0) THEN  \n" +
                "		IF (pAction = 'ReGet') THEN  \n" +
                "			INSERT INTO packing_slip_material_receive_det (refPackingSlipMaterialRecID, packingSlipSerialNumber, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, disputedPrice, otherCharges, extendedPrice, `status`, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, createdBy, updatedBy, createByRoleId, updateByRoleId, umidcreated)  \n" +
                "			SELECT 	pInvoiceId, packingSlipSerialNumber, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, disputedPrice, otherCharges,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN invoicePrice IS NOT NULL AND packingSlipQty IS NOT NULL THEN  \n" +
                "							invoicePrice * packingSlipQty  \n" +
                "						ELSE NULL  \n" +
                "					END  \n" +
                "				),  \n" +
                "				`status`, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, pUserId, pUserId, pUserRoleId, pUserRoleId,  \n" +
                "                true umidcreated  \n" +
                "			FROM 	temp_Insert_Packing_Slip_Record;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_TotalDetailCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId;  \n" +
                "			SELECT COUNT(1) INTO v_PendingCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'P';  \n" +
                "			SELECT COUNT(1) INTO v_DisapproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'D';  \n" +
                "			SELECT COUNT(1) INTO v_ApproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'A';  \n" +
                "  \n" +
                "			IF (v_DisapproveCount > 0) THEN  \n" +
                "				SET v_DetailLineStatus = 'I';  \n" +
                "			ELSEIF (v_PendingCount > 0) THEN  \n" +
                "				SET v_DetailLineStatus = 'W';  \n" +
                "			ELSEIF (v_ApproveCount > 0 AND v_ApproveCount = v_TotalDetailCount) THEN  \n" +
                "				SET v_DetailLineStatus = 'A';  \n" +
                "			ELSE  \n" +
                "				SET v_DetailLineStatus = 'W';  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			UPDATE 	packing_slip_material_receive  \n" +
                "			SET 	`status` = v_DetailLineStatus  \n" +
                "			WHERE 	receiptType = 'I'  \n" +
                "					AND deletedAt IS NULL  \n" +
                "					AND id = pInvoiceId;  \n" +
                "  \n" +
                "			/*UPDATE 	packing_slip_material_receive  \n" +
                "			SET 	`status` = 'W'  \n" +
                "			WHERE 	receiptType = 'I'  \n" +
                "					AND deletedAt IS NULL  \n" +
                "					AND id = pInvoiceId; */  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(v_DeleteCount, 0) > 0) THEN  \n" +
                "		IF (pAction = 'ReGet') THEN  \n" +
                "			UPDATE 	packing_slip_material_receive_det  \n" +
                "			SET 	updatedBy = pUserID, deletedBy = pUserID, deletedAt = fun_DatetimetoUTCDateTime(), isDeleted = 1  \n" +
                "			WHERE 	refPackingSlipMaterialRecID = pInvoiceId  \n" +
                "					AND deletedAt IS NULL  \n" +
                "					AND packingSlipSerialNumber IN (  \n" +
                "						SELECT packingSlipSerialNumber FROM temp_Delete_Packing_Slip_Record  \n" +
                "					);  \n" +
                "			SELECT COUNT(1) INTO v_TotalDetailCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId;  \n" +
                "			SELECT COUNT(1) INTO v_PendingCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'P';  \n" +
                "			SELECT COUNT(1) INTO v_DisapproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'D';  \n" +
                "			SELECT COUNT(1) INTO v_ApproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'A';  \n" +
                "  \n" +
                "			IF (v_DisapproveCount > 0) THEN  \n" +
                "				SET v_DetailLineStatus = 'I';  \n" +
                "			ELSEIF (v_PendingCount > 0) THEN  \n" +
                "				SET v_DetailLineStatus = 'W';  \n" +
                "			ELSEIF (v_ApproveCount > 0 AND v_ApproveCount = v_TotalDetailCount) THEN  \n" +
                "				SET v_DetailLineStatus = 'A';  \n" +
                "			ELSE  \n" +
                "				SET v_DetailLineStatus = 'W';  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			UPDATE 	packing_slip_material_receive  \n" +
                "			SET 	`status` = v_DetailLineStatus  \n" +
                "			WHERE 	receiptType = 'I'  \n" +
                "					AND deletedAt IS NULL  \n" +
                "					AND id = pInvoiceId;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(v_UpdateCount, 0) > 0) THEN  \n" +
                "		IF (pAction = 'ReGet') THEN  \n" +
                "			UPDATE 	packing_slip_material_receive_det ps, packing_slip_material_receive_det si  \n" +
                "			SET 	si.packingSlipSerialNumber = ps.packingSlipSerialNumber,  \n" +
                "				si.nickname = ps.nickname,  \n" +
                "				si.partID = ps.partID,  \n" +
                "				si.refSupplierPartId = ps.refSupplierPartId,  \n" +
                "				si.scanLabel = ps.scanLabel,  \n" +
                "				si.orderedQty = ps.orderedQty,  \n" +
                "				si.receivedQty = ps.receivedQty,  \n" +
                "				si.packingSlipQty = ps.packingSlipQty,  \n" +
                "				si.binID = ps.binID,  \n" +
                "				si.warehouseID = ps.warehouseID,  \n" +
                "				si.parentWarehouseID = ps.parentWarehouseID,  \n" +
                "				si.invoicePrice = ps.invoicePrice,  \n" +
                "				si.umidCreated = ps.umidCreated,  \n" +
                "				si.poReleaseNumber = ps.poReleaseNumber,  \n" +
                "				si.packagingID = ps.packagingID,  \n" +
                "				si.receivedStatus = ps.receivedStatus,  \n" +
                "				si.remark = ps.remark  \n" +
                "			WHERE 	ps.refPackingSlipMaterialRecID = pPackingSlipId  \n" +
                "					AND si.refPackingSlipMaterialRecID = pInvoiceId  \n" +
                "					AND si.packingSlipSerialNumber = ps.packingSlipSerialNumber  \n" +
                "					AND ps.deletedAt IS NULL  \n" +
                "					AND si.deletedAt IS NULL;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pAction = 'GetNotification') THEN  \n" +
                "		SELECT IsSuccess, NoOfLineInsert, NoOfLineDelete, NoOfLineUpdate FROM temp_ReGet_Validation_Error;  \n" +
                "	ELSEIF (pAction = 'ReGet') THEN  \n" +
                "		INSERT INTO temp_ReGet_Validation_Error (IsSuccess, NoOfLineInsert, NoOfLineDelete, NoOfLineUpdate) VALUES(TRUE, 0, 0, 0);  \n" +
                "		SELECT IsSuccess, NoOfLineInsert, NoOfLineDelete FROM temp_ReGet_Validation_Error;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5554,'2.00','V1','User Story 38690: Change in Material received flow for performance improvement - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5554:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-11-2021 *********************************** */
                "drop procedure if exists `Sproc_SavePackingSlipMaterialReceiveDetStock`;  \n" +
                "CREATE PROCEDURE `Sproc_SavePackingSlipMaterialReceiveDetStock`(  \n" +
                "	IN pRMAStockList JSON,  \n" +
                "	IN pUserID VARCHAR(50),  \n" +
                "	IN pUserRoleID VARCHAR(50)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE v_TotalRMAStock INT;  \n" +
                "    DECLARE v_stockId INT;  \n" +
                "	DECLARE v_TransactionAction VARCHAR(10);  \n" +
                "	DECLARE v_RefRMAId INT;  \n" +
                "	DECLARE v_RefRMADetailId INT;  \n" +
                "	DECLARE v_Type VARCHAR(5);  \n" +
                "	DECLARE v_RefSidId INT;  \n" +
                "	DECLARE v_RefPackingSlipId INT;  \n" +
                "	DECLARE v_RefPackingSlipDetId INT;  \n" +
                "	DECLARE v_PartId INT;  \n" +
                "	DECLARE v_PackagingId INT;  \n" +
                "	DECLARE v_BinId INT;  \n" +
                "    DECLARE v_OLDRMAStock DECIMAL(18,8);  \n" +
                "	DECLARE v_Qty DECIMAL(18,8);  \n" +
                "    DECLARE v_availableQtyAtRMA DECIMAL(18,8);  \n" +
                "    DECLARE v_availableUnitAtRMA DECIMAL(18,8);  \n" +
                "	DECLARE v_TransferBinId INT;  \n" +
                "	DECLARE v_TransferWarehouseId INT;  \n" +
                "	DECLARE v_TransferParentWarehouseId INT;  \n" +
                "	DECLARE v_QtyOfLastConsume DECIMAL(18,8);  \n" +
                "    DECLARE v_UnitsOfLastConsume DECIMAL(18,8);  \n" +
                "    DECLARE v_ErorrCode VARCHAR(100) default null;  \n" +
                "    DECLARE v_CurrentStockQty DECIMAL(18,8);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_RMAStockList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_RMAStockList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pRMAStockList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`stockId` INT PATH \"$.stockId\",  \n" +
                "				`transactionAction` VARCHAR(10) PATH \"$.transactionAction\",  \n" +
                "				`refRMAId` INT PATH \"$.refRMAId\",  \n" +
                "				`refRMADetailId` INT PATH \"$.refRMADetailId\",  \n" +
                "				`type` VARCHAR(5) PATH \"$.type\",  \n" +
                "				`refSidId` INT PATH \"$.refSidId\",  \n" +
                "				`refPackingSlipId` INT PATH \"$.refPackingSlipId\",  \n" +
                "				`refPackingSlipDetId` INT PATH \"$.refPackingSlipDetId\",  \n" +
                "				`partId` INT PATH \"$.partId\",  \n" +
                "				`packagingId` INT PATH \"$.packagingId\",  \n" +
                "				`binId` VARCHAR(20) PATH \"$.binId\",  \n" +
                "				`qty` DECIMAL(18,8) PATH \"$.qty\",  \n" +
                "                `availableQtyAtRMA` DECIMAL(18,8) PATH \"$.availableQtyAtRMA\",  \n" +
                "                `availableUnitAtRMA` DECIMAL(18,8) PATH \"$.availableUnitAtRMA\",  \n" +
                "				`transferBinId` INT path \"$.transferBinId\",  \n" +
                "				`transferWarehouseId` INT path \"$.transferWarehouseId\",  \n" +
                "				`transferParentWarehouseId` INT path \"$.transferParentWarehouseId\"  \n" +
                "			)  \n" +
                "		) AS RMAStockList_JT;  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_TotalRMAStock FROM temp_RMAStockList;  \n" +
                "		SET i = 0;  \n" +
                "		temp_RMAStockListLabel: WHILE i < v_TotalRMAStock DO  \n" +
                "  \n" +
                "            if v_ErorrCode is null or v_ErorrCode = '' then  \n" +
                "  \n" +
                "				SET v_stockId = NULL;  \n" +
                "                SET v_OLDRMAStock = NULL;  \n" +
                "				SET v_TransactionAction = NULL;  \n" +
                "				SET v_RefRMAId = NULL;  \n" +
                "				SET v_RefRMADetailId = NULL;  \n" +
                "				SET v_Type = NULL;  \n" +
                "				SET v_RefSidId = NULL;  \n" +
                "				SET v_RefPackingSlipId = NULL;  \n" +
                "				SET v_RefPackingSlipDetId = NULL;  \n" +
                "				SET v_PartId = NULL;  \n" +
                "				SET v_PackagingId = NULL;  \n" +
                "				SET v_BinId = NULL;  \n" +
                "				SET v_Qty = NULL;  \n" +
                "                SET v_availableQtyAtRMA = NULL;  \n" +
                "                SET v_availableUnitAtRMA = NULL;  \n" +
                "				SET v_QtyOfLastConsume = NULL;  \n" +
                "                SET v_UnitsOfLastConsume = NULL;  \n" +
                "  \n" +
                "				SELECT 	stockId, transactionAction, refRMAId, refRMADetailId, `type`, refSidId, refPackingSlipId, refPackingSlipDetId, partId, packagingId, binId, qty, transferBinId, transferWarehouseId, transferParentWarehouseId, availableQtyAtRMA, availableUnitAtRMA  \n" +
                "				INTO 	v_stockId, v_TransactionAction, v_RefRMAId, v_RefRMADetailId, v_Type, v_RefSidId, v_RefPackingSlipId, v_RefPackingSlipDetId, v_PartId, v_PackagingId, v_BinId, v_Qty, v_TransferBinId, v_TransferWarehouseId, v_TransferParentWarehouseId, v_availableQtyAtRMA, v_availableUnitAtRMA  \n" +
                "				FROM 	temp_RMAStockList  \n" +
                "				LIMIT 	i, 1;  \n" +
                "				IF (v_TransactionAction = 'Add') THEN  \n" +
                "					if v_RefSidId is null then /*non UMID stock*/  \n" +
                "						/*fetching non UMID stock*/  \n" +
                "						SELECT SUM(IFNULL(vu.BalanceQty,0))  \n" +
                "                          into v_CurrentStockQty  \n" +
                "							FROM vu_umid_creation_pending vu  \n" +
                "							WHERE vu.packagingID = v_PackagingId  \n" +
                "							  AND vu.partID = v_PartId  \n" +
                "							  and vu.BinID = v_BinId;  \n" +
                "                    else /*UMID stock*/  \n" +
                "						/*Fetching UMID current stock*/  \n" +
                "                        select availableQty into v_CurrentStockQty  \n" +
                "                          from (SELECT c.pkgQty availableQty  \n" +
                "								  FROM component_sid_stock c  \n" +
                "								 INNER JOIN packing_slip_material_receive_det_stock cp ON cp.refSidId = c.id  \n" +
                "								 WHERE c.id = v_RefSidId  \n" +
                "								   and c.refcompid = v_PartId  \n" +
                "								   AND cp.type = 'U'  \n" +
                "								   AND cp.isDeleted = 0  \n" +
                "								   AND c.isDeleted = 0  \n" +
                "								UNION  \n" +
                "								SELECT c.pkgQty availableQty  \n" +
                "								  FROM component_sid_stock c  \n" +
                "								 INNER JOIN component_sid_stock_packing_detail cp ON cp.refComponentSidStockID = c.id  \n" +
                "								 WHERE c.pkgQty > 0  \n" +
                "								   and c.id = v_RefSidId  \n" +
                "								   and c.refcompid = v_PartId  \n" +
                "								   AND cp.isDeleted = 0  \n" +
                "								   AND c.isDeleted = 0) a;  \n" +
                "                    end if;  \n" +
                "  \n" +
                "                    if (case when v_Type = 'U' then v_availableQtyAtRMA else v_Qty end) > v_CurrentStockQty then  \n" +
                "						set v_ErorrCode = 'AVAILABLE_STOCK_ISSUE';  \n" +
                "					else  \n" +
                "						INSERT INTO packing_slip_material_receive_det_stock (refRMAId, refRMADetailId, `type`, refSidId, refPackingSlipId, refPackingSlipDetId, partId, packagingId, binId, qty, createdBy, createByRoleId, updatedBy, updateByRoleId, availableQtyAtRMA, availableUnitAtRMA)  \n" +
                "						VALUES (v_RefRMAId, v_RefRMADetailId, v_Type, v_RefSidId, v_RefPackingSlipId, v_RefPackingSlipDetId, v_PartId, v_PackagingId, v_BinId, v_Qty, pUserID, pUserRoleID, pUserID, pUserRoleID, v_availableQtyAtRMA, v_availableUnitAtRMA);  \n" +
                "  \n" +
                "                        IF (v_RefSidId IS NOT NULL) THEN /*umid stock*/  \n" +
                "							INSERT INTO component_sid_stock_history  \n" +
                "								(transType, 	actionPerformed, 	refUIDId, 	uid, 	refcompid, 	binID,  \n" +
                "                                warehouseID, 	deptWHID,  \n" +
                "								orgQty, 	orgUnit,  \n" +
                "                                currentQty, 	currentUnit, 		uom, 		consumedQty, 		consumedUnit,  \n" +
                "								refTrans, 	refTransID, 		refTransTable,	createdBy, 		updatedBy,	createByRoleId,		updateByRoleId)  \n" +
                "							SELECT 	'Supplier RMA - Returned', 	'UMID Zero Out',	c.id,		c.uid,		c.refcompid,		-1,  \n" +
                "									-3,				fun_getDepartmentIDByBinID(-1),  \n" +
                "                                    c.orgQty,	c.orgPkgUnit,  \n" +
                "									case when v_Type = 'U' then (c.pkgQty - v_availableQtyAtRMA) else (c.pkgQty - v_Qty) end,  \n" +
                "                                    case when v_Type = 'U' then (c.pkgUnit - v_availableUnitAtRMA) else (c.pkgUnit - (v_Qty * com.unit)) end,  \n" +
                "                                    c.uom,		v_Qty,			(v_Qty * com.unit),  \n" +
                "									fun_getRMANumberById(v_RefRMAId),					v_RefRMAId,	'packing_slip_material_receive',  \n" +
                "									pUserID,			pUserID,				pUserRoleID,	pUserRoleID  \n" +
                "							FROM 		component_sid_stock c  \n" +
                "							INNER JOIN 	component com ON com.id = c.refcompid  \n" +
                "							WHERE 		c.id =  v_RefSidId  \n" +
                "										AND c.isDeleted = 0  \n" +
                "										AND com.isDeleted = 0;  \n" +
                "  \n" +
                "							UPDATE 		component_sid_stock c  \n" +
                "							INNER JOIN 	component com ON com.id = c.refcompid  \n" +
                "								SET c.pkgQty = case when v_Type = 'U' then (c.pkgQty - v_availableQtyAtRMA) else (c.pkgQty - v_Qty) end,  \n" +
                "									c.pkgUnit = case when v_Type = 'U' then (c.pkgUnit - v_availableUnitAtRMA) else (c.pkgUnit - (v_Qty * com.unit)) end,  \n" +
                "                                    c.isinStk = false  \n" +
                "							WHERE	c.id = v_RefSidId AND c.isDeleted = 0;  \n" +
                "						else /*non-umid stock*/  \n" +
                "                            UPDATE 	packing_slip_material_receive_det  \n" +
                "							SET 	umidCreated = ((IFNULL(umidCreatedQty,0) + IFNULL(rmaCreatedQty,0) + v_Qty)=receivedQty),  \n" +
                "									rmaCreatedQty = (IFNULL(rmaCreatedQty,0) + v_Qty)  \n" +
                "							WHERE   id = v_RefPackingSlipDetId;  \n" +
                "						END IF;  \n" +
                "                    end if;  \n" +
                "				ELSEIF (v_TransactionAction = 'Edit' AND v_Type = 'PU') THEN  \n" +
                "						/*fetching non UMID stock*/  \n" +
                "						select sum(stockQty) into v_CurrentStockQty  \n" +
                "						from  \n" +
                "							(SELECT SUM(IFNULL(vu.BalanceQty,0)) stockQty  \n" +
                "								FROM vu_umid_creation_pending vu  \n" +
                "								WHERE vu.packagingID = v_PackagingId  \n" +
                "								  AND vu.partID = v_PartId  \n" +
                "								  and vu.BinID = v_BinId  \n" +
                "								union all  \n" +
                "								select qty stockQty  \n" +
                "								from packing_slip_material_receive_det_stock  \n" +
                "							   where id = v_stockId  \n" +
                "								 and isDeleted = 0) a;  \n" +
                "						if v_Qty > v_CurrentStockQty then  \n" +
                "							set v_ErorrCode = 'AVAILABLE_STOCK_ISSUE';  \n" +
                "						else  \n" +
                "							select qty into v_OLDRMAStock  \n" +
                "                              from packing_slip_material_receive_det_stock  \n" +
                "							 WHERE id = v_stockId AND isDeleted = 0;  \n" +
                "  \n" +
                "                            UPDATE packing_slip_material_receive_det_stock  \n" +
                "							   SET qty = v_Qty,  \n" +
                "									updatedBy = pUserID,  \n" +
                "									updateByRoleId = pUserRoleID,  \n" +
                "									updatedAt = CURRENT_TIMESTAMP  \n" +
                "							 WHERE id = v_stockId AND isDeleted = 0;  \n" +
                "  \n" +
                "                             UPDATE 	packing_slip_material_receive_det  \n" +
                "								SET 	umidCreated = ((IFNULL(umidCreatedQty,0) + IFNULL(rmaCreatedQty,0) - IFNULL(v_OLDRMAStock,0) + IFNULL(v_Qty,0))=receivedQty),  \n" +
                "										rmaCreatedQty = (IFNULL(rmaCreatedQty,0) - IFNULL(v_OLDRMAStock,0) + IFNULL(v_Qty,0))  \n" +
                "								WHERE   id = v_RefPackingSlipDetId;  \n" +
                "                        end if;  \n" +
                "				ELSEIF (v_TransactionAction = 'Delete') THEN  \n" +
                "					IF v_Type = 'PU' then  \n" +
                "						select qty into v_OLDRMAStock  \n" +
                "						  from packing_slip_material_receive_det_stock  \n" +
                "						 WHERE id = v_stockId AND isDeleted = 0;  \n" +
                "  \n" +
                "						 UPDATE 	packing_slip_material_receive_det  \n" +
                "							SET 	umidCreated = ((IFNULL(umidCreatedQty,0) + IFNULL(rmaCreatedQty,0) - IFNULL(v_OLDRMAStock,0))=receivedQty),  \n" +
                "									rmaCreatedQty = (IFNULL(rmaCreatedQty,0) - IFNULL(v_OLDRMAStock,0))  \n" +
                "							WHERE   id = v_RefPackingSlipDetId;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive_det_stock  \n" +
                "					SET 	isDeleted = 1,  \n" +
                "							deletedBy = pUserID,  \n" +
                "							deleteByRoleId = pUserRoleID,  \n" +
                "							deletedAt = CURRENT_TIMESTAMP  \n" +
                "					WHERE 	id = v_stockId AND isDeleted = 0;  \n" +
                "  \n" +
                "					IF (v_Type = 'U' AND v_TransferBinId IS NOT NULL) THEN  \n" +
                "						SELECT ifnull(availableQtyAtRMA,0), ifnull(availableUnitAtRMA,0)  \n" +
                "						  INTO v_QtyOfLastConsume, v_UnitsOfLastConsume  \n" +
                "                          FROM packing_slip_material_receive_det_stock WHERE id = v_stockId;  \n" +
                "  \n" +
                "						INSERT INTO component_sid_stock_history  \n" +
                "							(transType, 	actionPerformed,  \n" +
                "                            refUIDId, 	uid, 	refcompid, 	binID, 		warehouseID, 		deptWHID,  \n" +
                "							orgQty, 	orgUnit, 		currentQty, 	currentUnit,		uom,  \n" +
                "                            consumedQty,  \n" +
                "                            consumedUnit,  \n" +
                "							refTrans, 	refTransID, 		refTransTable,	createdBy, 		updatedBy,	createByRoleId,		updateByRoleId)  \n" +
                "						SELECT 	'Supplier RMA - Corrected', 	'UMID Count Material (Adjust Material: Add/Append Count)',  \n" +
                "								c.id,		c.uid,		c.refcompid, 	v_TransferBinId,	v_TransferWarehouseId,		v_TransferParentWarehouseId,  \n" +
                "								c.orgQty,	c.orgPkgUnit,	v_QtyOfLastConsume,		v_UnitsOfLastConsume,	c.uom,  \n" +
                "                                (IFNULL(c.orgQty,0) - v_QtyOfLastConsume),  \n" +
                "                                (IFNULL(c.orgPkgUnit,0) - v_UnitsOfLastConsume),  \n" +
                "								fun_getRMANumberById(v_RefRMAId),  \n" +
                "								v_RefRMAId,		'packing_slip_material_receive',  \n" +
                "								pUserID,		pUserID,  \n" +
                "								pUserRoleID,		pUserRoleID  \n" +
                "						FROM 	component_sid_stock c  \n" +
                "						WHERE 	c.id =  v_RefSidId  \n" +
                "						AND 	c.isDeleted = 0;  \n" +
                "  \n" +
                "						UPDATE 		component_sid_stock c  \n" +
                "							SET		c.pkgQty = v_QtyOfLastConsume,  \n" +
                "									c.pkgUnit = v_UnitsOfLastConsume,  \n" +
                "									c.binID = v_TransferBinId  \n" +
                "							WHERE  	c.id = v_RefSidId AND c.isDeleted = 0;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "             end if;  \n" +
                "  \n" +
                "			SET i = i + 1;  \n" +
                "		END WHILE temp_RMAStockListLabel;  \n" +
                "  \n" +
                "		SELECT ifnull(v_ErorrCode,'1') AS 'spStatus';  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_RMAStockList;  \n" +
                "  \n" +
                "    END;  \n" +
                "drop procedure if exists `Sproc_RetrivePackingSlipMaterialReceiveDetStock`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveDetStock`(  \n" +
                "	IN pRMADetailLineId INT,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pPackingSlipDetailId INT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pPackagingId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "			SELECT 	MAX(pds.id) stockId,  \n" +
                "					'PU' AS `type`,  \n" +
                "					'Pending UMID' AS `typeValue`,  \n" +
                "					NULL umidId,  \n" +
                "					NULL umid,  \n" +
                "					vu.PartId partId,  \n" +
                "					vu.packagingID packagingId,  \n" +
                "					NULL receiveMaterialType,  \n" +
                "					vu.inQty receivedQty,  \n" +
                "                    vu.balanceQty availableQty,  \n" +
                "					IFNULL(pds.qty,0) shipmentQty,  \n" +
                "					vu.BinID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(vu.BinID) parentWarehouseName,  \n" +
                "					0 availableQtyAtRMA,  \n" +
                "					0 availableUnitAtRMA,  \n" +
                "					vu.receivedStatus,  \n" +
                "					vu.packingSlipSerialNumber  \n" +
                "			FROM 		vu_umid_creation_pending vu  \n" +
                "			LEFT JOIN 	packing_slip_material_receive_det_stock pds ON pd.refPackingSlipMaterialRecID = pds.refPackingSlipId  \n" +
                "								AND pds.refPackingSlipId = vu.packingSlipID  \n" +
                "								AND pds.packagingId = vu.packagingID  \n" +
                "								AND pds.partId = vu.PartId  \n" +
                "								AND pds.isDeleted = 0  \n" +
                "								AND pds.type = 'PU'  \n" +
                "								AND (CASE WHEN pRMADetailLineId IS NOT NULL THEN pds.refRMADetailId = pRMADetailLineId ELSE pds.refRMADetailId IS NULL END)  \n" +
                "			LEFT JOIN 	binmst b ON b.id = vu.BinID  \n" +
                "			WHERE 		vu.packingSlipID = pPackingSlipId  \n" +
                "						AND vu.packagingID = pPackagingId  \n" +
                "						AND vu.partID = pPartId  \n" +
                "                        and vu.balanceQty > 0  \n" +
                "                        and vu.isDeleted = 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "						AND (CASE WHEN pPackingSlipDetailId IS NOT NULL THEN vu.packingSlipDetID = pPackingSlipDetailId ELSE 1 = 1 END)  \n" +
                "			GROUP BY vu.PartId, vu.packagingID, vu.inQty, vu.balanceQty, IFNULL(pds.qty,0), vu.BinID, b.name, b.WarehouseID, vu.receivedStatus, vu.packingSlipSerialNumber  \n" +
                "			having vu.balanceQty > 0 or MAX(pds.id) is not null  \n" +
                "			UNION  ALL  \n" +
                "	SELECT a.* FROM (  \n" +
                "			SELECT 		cp.id stockId,  \n" +
                "					cp.type AS `type`,  \n" +
                "					'UMID' AS `typeValue`,  \n" +
                "					c.id umidId,  \n" +
                "					c.uid umid,  \n" +
                "					c.refcompid partId,  \n" +
                "					c.packaging packagingId,  \n" +
                "					c.receiveMaterialType,  \n" +
                "					pd.receivedQty receivedQty,  \n" +
                "					c.pkgQty availableQty,  \n" +
                "					cp.qty shipmentQty,  \n" +
                "					c.binID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "					cp.availableQtyAtRMA,  \n" +
                "					cp.availableUnitAtRMA,  \n" +
                "					pd.receivedStatus,  \n" +
                "					pd.packingSlipSerialNumber  \n" +
                "			FROM 		packing_slip_material_receive_det_stock cp  \n" +
                "			INNER JOIN 	component_sid_stock c ON c.id = cp.refSidId  \n" +
                "			INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetId  \n" +
                "			INNER JOIN 	binmst b ON b.id = c.binId  \n" +
                "			WHERE 		cp.refPackingSlipDetId = pPackingSlipDetailId AND cp.refRMADetailid = pRMADetailLineId  \n" +
                "						AND cp.type = 'U'  \n" +
                "						AND cp.isDeleted = 0  \n" +
                "						AND c.isDeleted = 0  \n" +
                "						AND pd.isDeleted = 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "			GROUP BY cp.refSidId  \n" +
                "			UNION  ALL  \n" +
                "			SELECT 		NULL stockId,  \n" +
                "					'U' AS `type`,  \n" +
                "					'UMID' AS `typeValue`,  \n" +
                "					c.id umidId,  \n" +
                "					c.uid umid,  \n" +
                "					c.refcompid partId,  \n" +
                "					c.packaging packagingId,  \n" +
                "					c.receiveMaterialType,  \n" +
                "					pd.receivedQty receivedQty,  \n" +
                "					c.pkgQty availableQty,  \n" +
                "					0 shipmentQty,  \n" +
                "					c.binID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "					c.pkgQty availableQtyAtRMA,  \n" +
                "					c.pkgUnit availableUnitAtRMA,  \n" +
                "					pd.receivedStatus,  \n" +
                "					pd.packingSlipSerialNumber  \n" +
                "			FROM 		component_sid_stock_packing_detail cp  \n" +
                "			INNER JOIN 	component_sid_stock c ON c.id = cp.refComponentSidStockID  \n" +
                "			INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetailID  \n" +
                "			INNER JOIN 	binmst b ON b.id = c.binID  \n" +
                "			WHERE 		c.pkgQty > 0  \n" +
                "						AND cp.refPackingSlipDetailID = pPackingSlipDetailId  \n" +
                "						AND cp.isDeleted = 0  \n" +
                "						AND c.isDeleted = 0  \n" +
                "						AND pd.isDeleted = 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "			GROUP BY cp.refComponentSidStockID  \n" +
                "		) as a GROUP BY umidId;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5555,'2.00','V1','User Story 38690: Change in Material received flow for performance improvement - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5555:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-11-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesshippingmst` ;  \n" +
                "CREATE TRIGGER `Trg_AU_salesshippingmst` AFTER UPDATE ON `salesshippingmst`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "   DECLARE vBPOQty INT;  \n" +
                "	DECLARE vBPOTotalQty INT;  \n" +
                "	SELECT  SUM(cpd.shipQty) INTO @shipQty   FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
                "		WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.sDetID AND cp.transType='P';  \n" +
                "  \n" +
                "	SELECT SUM(ss.qty) INTO @qty FROM salesshippingmst ss WHERE ss.sDetID=new.sDetID AND ss.isdeleted=0;  \n" +
                "	SELECT refBlanketPOID INTO @bpoID FROM salesorderdet  WHERE id=new.sDetID AND isdeleted=0;  \n" +
                "	SELECT  qty INTO vBPOQty FROM  salesorderdet WHERE id=@bpoID;  \n" +
                "	SELECT  SUM(qty) INTO vBPOTotalQty FROM  salesorderdet WHERE refBlanketPOID=@bpoID AND isdeleted=0;  \n" +
                "  \n" +
                "		IF(IFNULL(@shipQty,0)>=IFNULL(@qty,1)) THEN  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=New.sDetID;  \n" +
                "		ELSE  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE id=New.sDetID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF((SELECT COUNT(1) FROM SalesOrderDet WHERE  refBlanketPOID=@bpoID AND isdeleted=0 AND salesOrderDetStatus=1 AND isCancle=0)=0 AND IFNULL(vBPOQty,0)>=IFNULL(vBPOTotalQty,0))THEN  \n" +
                "		        UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE (id=@bpoID OR  refSODetID=@bpoID);  \n" +
                "		ELSE  \n" +
                "		          UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE (id=@bpoID OR  refSODetID=@bpoID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "          SELECT COUNT(1) INTO @shippingQty FROM    salesshippingmst WHERE sDetID=new.sDetID AND isdeleted=0;  \n" +
                "  \n" +
                "          UPDATE SalesOrderDet SET shippingQty=@shippingQty  WHERE id=new.sDetID;  \n" +
                "  \n" +
                "          SELECT COUNT(1) INTO @shippingQty FROM    salesshippingmst WHERE sDetID=@bpoID AND isdeleted=0;  \n" +
                "  \n" +
                "          UPDATE SalesOrderDet SET shippingQty=@shippingQty  WHERE id=@bpoID;  \n" +
                "  \n" +
                "          IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'RELEASEQTY',CAST(OLD.qty AS CHAR),  \n" +
                "		CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.shippingDate,0) != IFNULL(NEW.shippingDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDSHIPDATE',CAST(DATE_FORMAT(OLD.shippingDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.shippingDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.promisedShipDate,0) != IFNULL(NEW.promisedShipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'PROMISEDSHIPDATE',CAST(DATE_FORMAT(OLD.promisedShipDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.promisedShipDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.requestedDockDate,0) != IFNULL(NEW.requestedDockDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDDOCKDATE',CAST(DATE_FORMAT(OLD.requestedDockDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.requestedDockDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "	  IF IFNULL(OLD.isAgreeToShip,0) != IFNULL(NEW.isAgreeToShip,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'AGREETOSHIP',CAST(CASE WHEN OLD.isAgreeToShip=1 THEN 'YES' ELSE 'NO' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isAgreeToShip=1 THEN 'YES' ELSE 'NO' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "	  IF IFNULL(OLD.revisedRequestedDockDate,0) != IFNULL(NEW.revisedRequestedDockDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDREVISEDDOCKDATE',CAST(DATE_FORMAT(OLD.revisedRequestedDockDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.revisedRequestedDockDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.revisedRequestedShipDate,0) != IFNULL(NEW.revisedRequestedShipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDREVISEDSHIPDATE',CAST(DATE_FORMAT(OLD.revisedRequestedShipDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.revisedRequestedShipDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.revisedRequestedPromisedDate,0) != IFNULL(NEW.revisedRequestedPromisedDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REVISEDPROMISEDDATE',CAST(DATE_FORMAT(OLD.revisedRequestedPromisedDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.revisedRequestedPromisedDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'SHIPPINGMETHODID',CAST( fun_getGenericCategoryNameByID(OLD.shippingMethodID) AS CHAR),  \n" +
                "		CAST(fun_getGenericCategoryNameByID(NEW.shippingMethodID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'CARRIERID',CAST( fun_getGenericCategoryNameByID(OLD.carrierID) AS CHAR),  \n" +
                "		CAST(fun_getGenericCategoryNameByID(NEW.carrierID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'CARRIERACCOUNTNUMBER',CAST( OLD.carrierAccountNumber AS CHAR),  \n" +
                "		CAST(NEW.carrierAccountNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-11-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_customer_packingslip_det` ;  \n" +
                "CREATE TRIGGER `Trg_AU_customer_packingslip_det` AFTER UPDATE ON `customer_packingslip_det`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	DECLARE v_trasType VARCHAR(5);  \n" +
                "  DECLARE vNewQuoteFrom VARCHAR(30);  \n" +
                "    DECLARE vOldQuoteFrom VARCHAR(30);  \n" +
                "  DECLARE vBPOQty INT;  \n" +
                "	DECLARE vBPOTotalQty INT;  \n" +
                "  \n" +
                "	SELECT transType INTO v_trasType  \n" +
                "	FROM customer_packingslip  \n" +
                "	WHERE isDeleted = 0 AND id = NEW.refCustPackingSlipID ;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.custPOLineID,0) != IFNULL(NEW.custPOLineID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Cust PO Line#',CAST(OLD.custPOLineID AS CHAR),  \n" +
                "       CAST(new.custPOLineID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poQty,0) != IFNULL(NEW.poQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Original PO Line Order Qty',CAST(OLD.poQty AS CHAR),  \n" +
                "       CAST(new.poQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF IFNULL(OLD.shipQty,0) != IFNULL(NEW.shipQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),  \n" +
                "		(CASE WHEN v_trasType='P' THEN 'Shipment Qty' ELSE 'Qty' END),	CAST(OLD.shipQty AS CHAR),  \n" +
                "		CAST(new.shipQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.remainingQty,0) != IFNULL(NEW.remainingQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Remaining Qty',CAST(OLD.remainingQty AS CHAR),  \n" +
                "       CAST(new.remainingQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippedQty,0) != IFNULL(NEW.shippedQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Shipped To Date',CAST(OLD.shippedQty AS CHAR),  \n" +
                "       CAST(new.shippedQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.shippingNotes,0) != IFNULL(NEW.shippingNotes,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Line Shipping Comments',CAST(OLD.shippingNotes AS CHAR),  \n" +
                "       CAST(new.shippingNotes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalComment,0) != IFNULL(NEW.internalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Line Internal Notes',CAST(OLD.internalComment AS CHAR),  \n" +
                "       CAST(new.internalComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.standrads,0) != IFNULL(NEW.standrads,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Applicable Standards',CAST(OLD.standrads AS CHAR),  \n" +
                "       CAST(new.standrads AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.refChargesTypeID,0) != IFNULL(NEW.refChargesTypeID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Other Charges Type',fun_getGenericCategoryNameByID(OLD.refChargesTypeID),  \n" +
                "       fun_getGenericCategoryNameByID(NEW.refChargesTypeID),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.unitPrice,0) != IFNULL(NEW.unitPrice,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Unit Price ($)', CAST(OLD.unitPrice AS CHAR), CAST(NEW.unitPrice AS CHAR),  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "      IF IFNULL(OLD.assyDescription,0) != IFNULL(NEW.assyDescription,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Assy/PID Description',CAST(OLD.assyDescription AS CHAR),  \n" +
                "       CAST(NEW.assyDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Ext. Price ($)',  \n" +
                "		CASE WHEN v_trasType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(OLD.extendedPrice,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(OLD.extendedPrice,2) AS CHAR) END,  \n" +
                "		CASE WHEN v_trasType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(NEW.extendedPrice,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(NEW.extendedPrice,2) AS CHAR) END,  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.otherCharges,0) != IFNULL(NEW.otherCharges,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Total Other Charges Price ($)',CAST(FORMAT(OLD.otherCharges,2) AS CHAR),  \n" +
                "       CAST(FORMAT(new.otherCharges,2) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 IF IFNULL(OLD.reflineID,0) != IFNULL(NEW.reflineID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'SO Line#',CAST(OLD.reflineID AS CHAR),  \n" +
                "       CAST(NEW.reflineID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF(new.refsalesorderdetid IS NOT NULL)THEN  \n" +
                "	SELECT  SUM(cpd.shipQty) INTO @shipQty   FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
                "		WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.refsalesorderdetid AND cp.transType='P';  \n" +
                "  \n" +
                "	SELECT SUM(ss.qty),refBlanketPOID INTO @qty,@bpoID FROM salesorderdet ss WHERE ss.id=new.refsalesorderdetid AND ss.isdeleted=0 GROUP BY refBlanketPOID;  \n" +
                "  \n" +
                "		IF(IFNULL(@shipQty,0)>=IFNULL(@qty,0)) THEN  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=New.refsalesorderdetid;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE id=New.refsalesorderdetid;  \n" +
                "		END IF;  \n" +
                "		SELECT  qty INTO vBPOQty FROM  salesorderdet WHERE id=@bpoID;  \n" +
                "	        SELECT  SUM(qty) INTO vBPOTotalQty FROM  salesorderdet WHERE refBlanketPOID=@bpoID AND isdeleted=0;  \n" +
                "		IF((SELECT COUNT(1) FROM SalesOrderDet WHERE  refBlanketPOID=@bpoID AND isdeleted=0 AND salesOrderDetStatus=1 AND isCancle=0)=0 AND IFNULL(vBPOQty,0)>=IFNULL(vBPOTotalQty,0))THEN  \n" +
                "		        UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE (id=@bpoID OR refSODetID=@bpoID);  \n" +
                "		ELSE  \n" +
                "		      UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE (id=@bpoID OR refSODetID=@bpoID);  \n" +
                "		END IF;  \n" +
                "  END IF;  \n" +
                "  IF IFNULL(OLD.quoteNumber,0) != IFNULL(NEW.quoteNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote#',CAST(OLD.quoteNumber AS CHAR),  \n" +
                "	   CAST(NEW.quoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "   IF IFNULL(OLD.quoteFrom,0) != IFNULL(NEW.quoteFrom,0) THEN  \n" +
                "		SELECT (CASE WHEN OLD.quoteFrom = 1 THEN 'From RFQ' WHEN OLD.quoteFrom = 2 THEN 'From Part Master' WHEN OLD.quoteFrom = 3 THEN 'N/A' END ) INTO vOldQuoteFrom ;  \n" +
                "        SELECT (CASE WHEN NEW.quoteFrom = 1 THEN 'From RFQ' WHEN NEW.quoteFrom = 2 THEN 'From Part Master' WHEN NEW.quoteFrom = 3 THEN 'N/A' END ) INTO vNewQuoteFrom ;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote From',vOldQuoteFrom,  \n" +
                "	   vNewQuoteFrom,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.refRFQGroupID,0) != IFNULL(NEW.refRFQGroupID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',CAST(OLD.refRFQGroupID AS CHAR),  \n" +
                "	   CAST(NEW.refRFQGroupID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.refAssyQtyTurnTimeID,0) != IFNULL(NEW.refAssyQtyTurnTimeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',OLD.assyQtyTurnTimeText,  \n" +
                "	   NEW.assyQtyTurnTimeText,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "       IF IFNULL(OLD.refRFQQtyTurnTimeID,0) != IFNULL(NEW.refRFQQtyTurnTimeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',OLD.assyQtyTurnTimeText,  \n" +
                "	   NEW.assyQtyTurnTimeText,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Confirming Zero Value Line',(CASE WHEN OLD.isZeroValue =0 THEN 'False' ELSE 'True' END),  \n" +
                "	   (CASE WHEN NEW.isZeroValue =0 THEN 'False' ELSE 'True' END),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   END;  \n" +
                /* **************************** Add Script Version -> 30-11-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_customer_packingslip_det` ;  \n" +
                "CREATE TRIGGER `Trg_AI_customer_packingslip_det` AFTER INSERT ON `customer_packingslip_det`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTransType VARCHAR(5);  \n" +
                "	DECLARE vBPOQty INT;  \n" +
                "	DECLARE vBPOTotalQty INT;  \n" +
                "	SELECT transType INTO vTransType  \n" +
                "	FROM customer_packingslip  \n" +
                "	WHERE isDeleted = 0 AND id = NEW.refCustPackingSlipID;  \n" +
                "  \n" +
                "  IF(new.refsalesorderdetid IS NOT NULL AND vTransType='P')THEN  \n" +
                "	SELECT  SUM(cpd.shipQty) INTO @shipQty   FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
                "		WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.refsalesorderdetid AND cp.transType='P';  \n" +
                "  \n" +
                "	SELECT SUM(ss.qty),ss.refBlanketPOID INTO @qty,@bpoID FROM salesorderdet ss WHERE ss.id=new.refsalesorderdetid GROUP BY ss.refBlanketPOID;  \n" +
                "	SELECT  qty INTO vBPOQty FROM  salesorderdet WHERE id=@bpoID;  \n" +
                "	SELECT  SUM(qty) INTO vBPOTotalQty FROM  salesorderdet WHERE refBlanketPOID=@bpoID AND isdeleted=0;  \n" +
                "  \n" +
                "		IF(IFNULL(@shipQty,0)>=IFNULL(@qty,0)) THEN  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=New.refsalesorderdetid;  \n" +
                "		END IF;  \n" +
                "		IF((SELECT COUNT(1) FROM SalesOrderDet WHERE  refBlanketPOID=@bpoID AND isdeleted=0 AND salesOrderDetStatus=1 AND isCancle=0)=0 AND IFNULL(vBPOQty,0)>=IFNULL(vBPOTotalQty,0))THEN  \n" +
                "		        UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE (id=@bpoID OR refSODetID=@bpoID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 30-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WO.totalWO,0)) AS pendingWOCreation, WO.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WO ON (`vuss`.`Sales Order` = WO.salesOrderNumber AND `vuss`.`Po Number` = WO.poNumber AND `vuss`.`Assy ID` = WO.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				  vuss.blanketPOOption,  \n" +
                "                                vuss.blanketPOOptionText,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToreturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND (internalPO = 1 or vuss.blanketPOOption=2) THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID  \n" +
                "					ORDER BY w.woID ASC ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-11-2021 *********************************** */

                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5556,'2.00','V1',' Trigger Trg_AU_salesshippingmst-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5556:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WODet.totalWO,0)) AS pendingWOCreation, WODet.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wo.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wo  \n" +
                "				LEFT JOIN 	component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				GROUP BY 	salesOrderNumber, poNumber, PIDCode, mfgPN, nickName  \n" +
                "			) AS WODet ON (`vuss`.`Sales Order` = WODet.salesOrderNumber AND `vuss`.`Po Number` = WODet.poNumber AND `vuss`.`Assy ID` = WODet.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				  vuss.blanketPOOption,  \n" +
                "                                vuss.blanketPOOptionText,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToreturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND (internalPO = 1 or vuss.blanketPOOption=2) THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID  \n" +
                "					ORDER BY w.woID ASC ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "        END IF;  \n" +
                "        IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5557,'2.00','V1',' Alter procedure Sproc_GetSalesorderList-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5557:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-11-2021 *********************************** */
                "ALTER TABLE purchase_order_mst ADD COLUMN isAskForVersionConfirmation TINYINT DEFAULT 0;  \n" +
                /* **************************** Add Script Version -> 30-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5558,'2.00','V1',' Bug 38907: Purchase order: Parallel testing findings on PO - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5558:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-11-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF OLD.receiptType = \"P\" AND OLD.refPurchaseOrderID IS NULL AND NEW.isCustConsigned != OLD.isCustConsigned THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isLineCustConsigned=NEW.isCustConsigned, LineCustomerID=NULL WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF OLD.receiptType = \"P\" AND NEW.isNonUMIDStock != OLD.isNonUMIDStock THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isNonUMIDStock=NEW.isNonUMIDStock WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		CASE  \n" +
                "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
                "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
                "			ELSE 'PO Date'  \n" +
                "		END ,  \n" +
                "		CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Date', CAST(OLD.packingSlipDate AS CHAR), CAST(new.packingSlipDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(new.invoiceDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(new.creditMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(new.debitMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(new.receiptDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
                "				ELSE 'Supplier Invoice Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
                "				ELSE 'Supplier Invoice Posting Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(new.applyDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
                "				ELSE 'Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
                "				ELSE 'PS Internal Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Ship To', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			case when OLD.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "            case when new.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CustomerID, 0) != IFNULL(NEW.CustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.CustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.CustomerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 30-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5559,'2.00','V1',' Bug 38907: Purchase order: Parallel testing findings on PO - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5559:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_purchase_order_mst`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_purchase_order_mst`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "	IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS temppurchaseordermst AS  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"Material_Receive_Detail\" ELSE \"\" END AS msg FROM packing_slip_material_receive WHERE deletedAt IS NULL AND isdeleted=0 AND refPurChaseOrderID IN(',IDs,') LIMIT 1)');  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "	IF (countList=FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM temppurchaseordermst t)=0 THEN  \n" +
                "			SET @SQlStament1 = CONCAT('SELECT GROUP_CONCAT(id) INTO @purchaseOrderDetIds FROM purchase_order_det WHERE refPurchaseOrderID IN(',IDs,') AND isDeleted=0');  \n" +
                "			PREPARE stmt1 FROM @SQlStament1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "            SET @SQlStament2 = CONCAT('UPDATE purchase_order_line_requirement_det SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',  \n" +
                "				deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE refpurchaseOrderDetID IN(',@purchaseOrderDetIds,') AND isDeleted=0');  \n" +
                "			PREPARE stmt2 FROM @SQlStament2;  \n" +
                "			EXECUTE stmt2;  \n" +
                "            SET @SQlStament3 = CONCAT('UPDATE purchase_order_line_release_det SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',  \n" +
                "				deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE refpurchaseOrderDetID IN(',@purchaseOrderDetIds,') AND isDeleted=0');  \n" +
                "			PREPARE stmt3 FROM @SQlStament3;  \n" +
                "			EXECUTE stmt3;  \n" +
                "  \n" +
                "			SET @SQlStament4 = CONCAT('UPDATE purchase_order_line_othercharges SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',  \n" +
                "				deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE refpurchaseOrderDetID IN(',@purchaseOrderDetIds,') AND isDeleted=0');  \n" +
                "			PREPARE stmt4 FROM @SQlStament4;  \n" +
                "			EXECUTE stmt4;  \n" +
                "  \n" +
                "			SET @SQlStament5 = CONCAT('UPDATE purchase_order_det SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',  \n" +
                "				deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE refPurchaseOrderID IN(',IDs,') AND isDeleted=0');  \n" +
                "			PREPARE stmt5 FROM @SQlStament5;  \n" +
                "			EXECUTE stmt5;  \n" +
                "			SET @SQlStament6 = CONCAT('UPDATE purchase_order_mst SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',  \n" +
                "				deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE id IN(',IDs,') AND isDeleted=0');  \n" +
                "			PREPARE stmt6 FROM @SQlStament6;  \n" +
                "			EXECUTE stmt6;  \n" +
                "			SET @SQlStament7= CONCAT('UPDATE genericfiles SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',  \n" +
                "				deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE entityid=-20 AND refTransID IN(',IDs,') AND isDeleted=0');  \n" +
                "			PREPARE stmt7 FROM @SQlStament7;  \n" +
                "			EXECUTE stmt7;  \n" +
                "			SELECT * FROM temppurchaseordermst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM temppurchaseordermst t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg FROM temppurchaseordermst t1  \n" +
                "			INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "		WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\" ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE temppurchaseordermst;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5560,'2.00','V1',' Bug 38907: Purchase order: Parallel testing findings on PO - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5560:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_UpdatePoWorkingLineStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_UpdatePoWorkingLineStatus`(  \n" +
                "	IN pPOID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vStatus VARCHAR(50);  \n" +
                "    DECLARE vPOTotalLinesWithOtherPart INT;  \n" +
                "	DECLARE vPOLines INT;  \n" +
                "	DECLARE vIsManualCompleted INT;  \n" +
                "  \n" +
                "    SELECT count(1) INTO vPOTotalLinesWithOtherPart FROM purchase_order_det WHERE refPurchaseOrderID=pPOID AND isDeleted=0;  \n" +
                "    SELECT count(1) INTO vPOLines FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID;  \n" +
                "    SELECT count(1) INTO vIsManualCompleted FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID AND poLineCompleteType='Manual';  \n" +
                "  \n" +
                "    SELECT poLineWorkingStatus INTO vStatus FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID AND poLineWorkingStatus='P' LIMIT 1;  \n" +
                "	IF vPOTotalLinesWithOtherPart > 0 THEN -- check po have any lines  \n" +
                "		IF vPOLines IS NULL OR vPOLines=0 THEN  \n" +
                "			SET vStatus='P';  \n" +
                "		ELSE  \n" +
                "			SET vStatus=IFNULL(vStatus,'C');  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET vStatus='P';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vStatus='P') THEN  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=(case when poWorkingStatus='CA' then poWorkingStatus else vStatus end),lockStatus='NA',lockedAt=null,lockedBy=null,lockedByRoleId=null WHERE id=pPOID;  \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=(case when poWorkingStatus='CA' then poWorkingStatus else vStatus end),poCompleteType=(case when vIsManualCompleted > 0 then 'Manual' else 'Auto' end),lockStatus='RL' WHERE id=pPOID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5561,'2.00','V1',' Bug 39087: PO: Open Purchase order button should be enable if PO is manually completed from update po page Line level - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5561:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_RetrivePackingSlipMaterialReceiveDetStock`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveDetStock`(  \n" +
                "	IN pRMADetailLineId INT,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pPackingSlipDetailId INT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pPackagingId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "			SELECT 	MAX(pds.id) stockId,  \n" +
                "					'PU' AS `type`,  \n" +
                "					'Pending UMID' AS `typeValue`,  \n" +
                "					NULL umidId,  \n" +
                "					NULL umid,  \n" +
                "					vu.PartId partId,  \n" +
                "					vu.packagingID packagingId,  \n" +
                "					NULL receiveMaterialType,  \n" +
                "					vu.inQty receivedQty,  \n" +
                "                    vu.balanceQty availableQty,  \n" +
                "					IFNULL(pds.qty,0) shipmentQty,  \n" +
                "					vu.BinID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(vu.BinID) parentWarehouseName,  \n" +
                "					0 availableQtyAtRMA,  \n" +
                "					0 availableUnitAtRMA,  \n" +
                "					vu.receivedStatus,  \n" +
                "					vu.packingSlipSerialNumber  \n" +
                "			FROM 		vu_umid_creation_pending vu  \n" +
                "			LEFT JOIN 	packing_slip_material_receive_det_stock pds ON pd.refPackingSlipMaterialRecID = pds.refPackingSlipId  \n" +
                "								AND pds.refPackingSlipId = vu.packingSlipID  \n" +
                "								AND pds.packagingId = vu.packagingID  \n" +
                "								AND pds.partId = vu.PartId  \n" +
                "								AND pds.isDeleted = 0  \n" +
                "								AND pds.type = 'PU'  \n" +
                "								AND (CASE WHEN pRMADetailLineId IS NOT NULL THEN pds.refRMADetailId = pRMADetailLineId ELSE pds.refRMADetailId IS NULL END)  \n" +
                "			LEFT JOIN 	binmst b ON b.id = vu.BinID  \n" +
                "			WHERE 		vu.packingSlipID = pPackingSlipId  \n" +
                "						AND vu.packagingID = pPackagingId  \n" +
                "						AND vu.partID = pPartId  \n" +
                "                        and vu.balanceQty > 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "						AND (CASE WHEN pPackingSlipDetailId IS NOT NULL THEN vu.packingSlipDetID = pPackingSlipDetailId ELSE 1 = 1 END)  \n" +
                "			GROUP BY vu.PartId, vu.packagingID, vu.inQty, vu.balanceQty, IFNULL(pds.qty,0), vu.BinID, b.name, b.WarehouseID, vu.receivedStatus, vu.packingSlipSerialNumber  \n" +
                "			having vu.balanceQty > 0 or MAX(pds.id) is not null  \n" +
                "			UNION  ALL  \n" +
                "	SELECT a.* FROM (  \n" +
                "			SELECT 		cp.id stockId,  \n" +
                "					cp.type AS `type`,  \n" +
                "					'UMID' AS `typeValue`,  \n" +
                "					c.id umidId,  \n" +
                "					c.uid umid,  \n" +
                "					c.refcompid partId,  \n" +
                "					c.packaging packagingId,  \n" +
                "					c.receiveMaterialType,  \n" +
                "					pd.receivedQty receivedQty,  \n" +
                "					c.pkgQty availableQty,  \n" +
                "					cp.qty shipmentQty,  \n" +
                "					c.binID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "					cp.availableQtyAtRMA,  \n" +
                "					cp.availableUnitAtRMA,  \n" +
                "					pd.receivedStatus,  \n" +
                "					pd.packingSlipSerialNumber  \n" +
                "			FROM 		packing_slip_material_receive_det_stock cp  \n" +
                "			INNER JOIN 	component_sid_stock c ON c.id = cp.refSidId  \n" +
                "			INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetId  \n" +
                "			INNER JOIN 	binmst b ON b.id = c.binId  \n" +
                "			WHERE 		cp.refPackingSlipDetId = pPackingSlipDetailId AND cp.refRMADetailid = pRMADetailLineId  \n" +
                "						AND cp.type = 'U'  \n" +
                "						AND cp.isDeleted = 0  \n" +
                "						AND c.isDeleted = 0  \n" +
                "						AND pd.isDeleted = 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "			GROUP BY cp.refSidId  \n" +
                "			UNION  ALL  \n" +
                "			SELECT 		NULL stockId,  \n" +
                "					'U' AS `type`,  \n" +
                "					'UMID' AS `typeValue`,  \n" +
                "					c.id umidId,  \n" +
                "					c.uid umid,  \n" +
                "					c.refcompid partId,  \n" +
                "					c.packaging packagingId,  \n" +
                "					c.receiveMaterialType,  \n" +
                "					pd.receivedQty receivedQty,  \n" +
                "					c.pkgQty availableQty,  \n" +
                "					0 shipmentQty,  \n" +
                "					c.binID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "					c.pkgQty availableQtyAtRMA,  \n" +
                "					c.pkgUnit availableUnitAtRMA,  \n" +
                "					pd.receivedStatus,  \n" +
                "					pd.packingSlipSerialNumber  \n" +
                "			FROM 		component_sid_stock_packing_detail cp  \n" +
                "			INNER JOIN 	component_sid_stock c ON c.id = cp.refComponentSidStockID  \n" +
                "			INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetailID  \n" +
                "			INNER JOIN 	binmst b ON b.id = c.binID  \n" +
                "			WHERE 		c.pkgQty > 0  \n" +
                "						AND cp.refPackingSlipDetailID = pPackingSlipDetailId  \n" +
                "						AND cp.isDeleted = 0  \n" +
                "						AND c.isDeleted = 0  \n" +
                "						AND pd.isDeleted = 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "			GROUP BY cp.refComponentSidStockID  \n" +
                "		) as a GROUP BY umidId;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5562,'2.00','V1','Bug 39147: QA Testing Bugs for User Story 38690: Change in Material received flow for performance improvement. - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5562:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_RetrivePackingSlipMaterialReceiveDetStock`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveDetStock`(  \n" +
                "	IN pRMADetailLineId INT,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pPackingSlipDetailId INT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pPackagingId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "			SELECT 	MAX(pds.id) stockId,  \n" +
                "					'PU' AS `type`,  \n" +
                "					'Pending UMID' AS `typeValue`,  \n" +
                "					NULL umidId,  \n" +
                "					NULL umid,  \n" +
                "					vu.PartId partId,  \n" +
                "					vu.packagingID packagingId,  \n" +
                "					NULL receiveMaterialType,  \n" +
                "					vu.inQty receivedQty,  \n" +
                "                    vu.balanceQty availableQty,  \n" +
                "					IFNULL(pds.qty,0) shipmentQty,  \n" +
                "					vu.BinID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(vu.BinID) parentWarehouseName,  \n" +
                "					0 availableQtyAtRMA,  \n" +
                "					0 availableUnitAtRMA,  \n" +
                "					vu.receivedStatus,  \n" +
                "					vu.packingSlipSerialNumber  \n" +
                "			FROM 		vu_umid_creation_pending vu  \n" +
                "			LEFT JOIN 	packing_slip_material_receive_det_stock pds ON pds.refPackingSlipId = vu.packingSlipID  \n" +
                "								AND pds.packagingId = vu.packagingID  \n" +
                "								AND pds.partId = vu.PartId  \n" +
                "								AND pds.isDeleted = 0  \n" +
                "								AND pds.type = 'PU'  \n" +
                "								AND (CASE WHEN pRMADetailLineId IS NOT NULL THEN pds.refRMADetailId = pRMADetailLineId ELSE pds.refRMADetailId IS NULL END)  \n" +
                "			LEFT JOIN 	binmst b ON b.id = vu.BinID  \n" +
                "			WHERE 		vu.packingSlipID = pPackingSlipId  \n" +
                "						AND vu.packagingID = pPackagingId  \n" +
                "						AND vu.partID = pPartId  \n" +
                "                        and vu.balanceQty > 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "						AND (CASE WHEN pPackingSlipDetailId IS NOT NULL THEN vu.packingSlipDetID = pPackingSlipDetailId ELSE 1 = 1 END)  \n" +
                "			GROUP BY vu.PartId, vu.packagingID, vu.inQty, vu.balanceQty, IFNULL(pds.qty,0), vu.BinID, b.name, b.WarehouseID, vu.receivedStatus, vu.packingSlipSerialNumber  \n" +
                "			having vu.balanceQty > 0 or MAX(pds.id) is not null  \n" +
                "			UNION  ALL  \n" +
                "	SELECT a.* FROM (  \n" +
                "			SELECT 		cp.id stockId,  \n" +
                "					cp.type AS `type`,  \n" +
                "					'UMID' AS `typeValue`,  \n" +
                "					c.id umidId,  \n" +
                "					c.uid umid,  \n" +
                "					c.refcompid partId,  \n" +
                "					c.packaging packagingId,  \n" +
                "					c.receiveMaterialType,  \n" +
                "					pd.receivedQty receivedQty,  \n" +
                "					c.pkgQty availableQty,  \n" +
                "					cp.qty shipmentQty,  \n" +
                "					c.binID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "					cp.availableQtyAtRMA,  \n" +
                "					cp.availableUnitAtRMA,  \n" +
                "					pd.receivedStatus,  \n" +
                "					pd.packingSlipSerialNumber  \n" +
                "			FROM 		packing_slip_material_receive_det_stock cp  \n" +
                "			INNER JOIN 	component_sid_stock c ON c.id = cp.refSidId  \n" +
                "			INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetId  \n" +
                "			INNER JOIN 	binmst b ON b.id = c.binId  \n" +
                "			WHERE 		cp.refPackingSlipDetId = pPackingSlipDetailId AND cp.refRMADetailid = pRMADetailLineId  \n" +
                "						AND cp.type = 'U'  \n" +
                "						AND cp.isDeleted = 0  \n" +
                "						AND c.isDeleted = 0  \n" +
                "						AND pd.isDeleted = 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "			GROUP BY cp.refSidId  \n" +
                "			UNION  ALL  \n" +
                "			SELECT 		NULL stockId,  \n" +
                "					'U' AS `type`,  \n" +
                "					'UMID' AS `typeValue`,  \n" +
                "					c.id umidId,  \n" +
                "					c.uid umid,  \n" +
                "					c.refcompid partId,  \n" +
                "					c.packaging packagingId,  \n" +
                "					c.receiveMaterialType,  \n" +
                "					pd.receivedQty receivedQty,  \n" +
                "					c.pkgQty availableQty,  \n" +
                "					0 shipmentQty,  \n" +
                "					c.binID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "					c.pkgQty availableQtyAtRMA,  \n" +
                "					c.pkgUnit availableUnitAtRMA,  \n" +
                "					pd.receivedStatus,  \n" +
                "					pd.packingSlipSerialNumber  \n" +
                "			FROM 		component_sid_stock_packing_detail cp  \n" +
                "			INNER JOIN 	component_sid_stock c ON c.id = cp.refComponentSidStockID  \n" +
                "			INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetailID  \n" +
                "			INNER JOIN 	binmst b ON b.id = c.binID  \n" +
                "			WHERE 		c.pkgQty > 0  \n" +
                "						AND cp.refPackingSlipDetailID = pPackingSlipDetailId  \n" +
                "						AND cp.isDeleted = 0  \n" +
                "						AND c.isDeleted = 0  \n" +
                "						AND pd.isDeleted = 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "			GROUP BY cp.refComponentSidStockID  \n" +
                "		) as a GROUP BY umidId;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5563,'2.00','V1','Bug 39147: QA Testing Bugs for User Story 38690: Change in Material received flow for performance improvement. - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5563:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-12-2021 *********************************** */
                "update table_mapping_details set display_page_name='Part Comments (Internal Notes)' where tabel_name='componenet_inspection_requirement_det';  \n" +
                /* **************************** Add Script Version -> 01-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5564,'2.00','V1',' User Story 37249: Part Comment tab changes - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5564:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-12-2021 *********************************** */
                "drop procedure if exists `Sproc_RetrivePackingSlipMaterialReceiveDetStock`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveDetStock`(  \n" +
                "	IN pRMADetailLineId INT,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pPackingSlipDetailId INT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pPackagingId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "			SELECT 	MAX(pds.id) stockId,  \n" +
                "					'PU' AS `type`,  \n" +
                "					'Pending UMID' AS `typeValue`,  \n" +
                "					NULL umidId,  \n" +
                "					NULL umid,  \n" +
                "					vu.PartId partId,  \n" +
                "					vu.packagingID packagingId,  \n" +
                "					NULL receiveMaterialType,  \n" +
                "					vu.inQty receivedQty,  \n" +
                "                    vu.balanceQty availableQty,  \n" +
                "					IFNULL(pds.qty,0) shipmentQty,  \n" +
                "					vu.BinID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(vu.BinID) parentWarehouseName,  \n" +
                "					0 availableQtyAtRMA,  \n" +
                "					0 availableUnitAtRMA,  \n" +
                "					vu.receivedStatus,  \n" +
                "					vu.packingSlipSerialNumber  \n" +
                "			FROM 		vu_umid_creation_pending vu  \n" +
                "			LEFT JOIN 	packing_slip_material_receive_det_stock pds ON pds.refPackingSlipId = vu.packingSlipID  \n" +
                "								AND pds.packagingId = vu.packagingID  \n" +
                "								AND pds.partId = vu.PartId  \n" +
                "								AND pds.isDeleted = 0  \n" +
                "								AND pds.type = 'PU'  \n" +
                "								AND (CASE WHEN pRMADetailLineId IS NOT NULL THEN pds.refRMADetailId = pRMADetailLineId ELSE pds.refRMADetailId IS NULL END)  \n" +
                "			LEFT JOIN 	binmst b ON b.id = vu.BinID  \n" +
                "			WHERE 		vu.packingSlipID = pPackingSlipId  \n" +
                "						AND vu.packagingID = pPackagingId  \n" +
                "						AND vu.partID = pPartId  \n" +
                "                        and vu.balanceQty > 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "						AND (CASE WHEN pPackingSlipDetailId IS NOT NULL THEN vu.packingSlipDetID = pPackingSlipDetailId ELSE 1 = 1 END)  \n" +
                "			GROUP BY vu.PartId, vu.packagingID, vu.inQty, vu.balanceQty, IFNULL(pds.qty,0), vu.BinID, b.name, b.WarehouseID, vu.receivedStatus, vu.packingSlipSerialNumber  \n" +
                "			having sum(vu.balanceQty) > 0 or MAX(pds.id) is not null  \n" +
                "			UNION  ALL  \n" +
                "	SELECT a.* FROM (  \n" +
                "			SELECT 		cp.id stockId,  \n" +
                "					cp.type AS `type`,  \n" +
                "					'UMID' AS `typeValue`,  \n" +
                "					c.id umidId,  \n" +
                "					c.uid umid,  \n" +
                "					c.refcompid partId,  \n" +
                "					c.packaging packagingId,  \n" +
                "					c.receiveMaterialType,  \n" +
                "					pd.receivedQty receivedQty,  \n" +
                "					c.pkgQty availableQty,  \n" +
                "					cp.qty shipmentQty,  \n" +
                "					c.binID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "					cp.availableQtyAtRMA,  \n" +
                "					cp.availableUnitAtRMA,  \n" +
                "					pd.receivedStatus,  \n" +
                "					pd.packingSlipSerialNumber  \n" +
                "			FROM 		packing_slip_material_receive_det_stock cp  \n" +
                "			INNER JOIN 	component_sid_stock c ON c.id = cp.refSidId  \n" +
                "			INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetId  \n" +
                "			INNER JOIN 	binmst b ON b.id = c.binId  \n" +
                "			WHERE 		cp.refPackingSlipDetId = pPackingSlipDetailId AND cp.refRMADetailid = pRMADetailLineId  \n" +
                "						AND cp.type = 'U'  \n" +
                "						AND cp.isDeleted = 0  \n" +
                "						AND c.isDeleted = 0  \n" +
                "						AND pd.isDeleted = 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "			GROUP BY cp.refSidId  \n" +
                "			UNION  ALL  \n" +
                "			SELECT 		NULL stockId,  \n" +
                "					'U' AS `type`,  \n" +
                "					'UMID' AS `typeValue`,  \n" +
                "					c.id umidId,  \n" +
                "					c.uid umid,  \n" +
                "					c.refcompid partId,  \n" +
                "					c.packaging packagingId,  \n" +
                "					c.receiveMaterialType,  \n" +
                "					pd.receivedQty receivedQty,  \n" +
                "					c.pkgQty availableQty,  \n" +
                "					0 shipmentQty,  \n" +
                "					c.binID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "					c.pkgQty availableQtyAtRMA,  \n" +
                "					c.pkgUnit availableUnitAtRMA,  \n" +
                "					pd.receivedStatus,  \n" +
                "					pd.packingSlipSerialNumber  \n" +
                "			FROM 		component_sid_stock_packing_detail cp  \n" +
                "			INNER JOIN 	component_sid_stock c ON c.id = cp.refComponentSidStockID  \n" +
                "			INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetailID  \n" +
                "			INNER JOIN 	binmst b ON b.id = c.binID  \n" +
                "			WHERE 		c.pkgQty > 0  \n" +
                "						AND cp.refPackingSlipDetailID = pPackingSlipDetailId  \n" +
                "						AND cp.isDeleted = 0  \n" +
                "						AND c.isDeleted = 0  \n" +
                "						AND pd.isDeleted = 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "			GROUP BY cp.refComponentSidStockID  \n" +
                "		) as a GROUP BY umidId;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5565,'2.00','V1','Bug 39147: QA Testing Bugs for User Story 38690: Change in Material received flow for performance improvement. - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5565:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-12-2021 *********************************** */
                "ALTER TABLE `jobtype`  \n" +
                "CHANGE COLUMN `description` `description` VARCHAR(1000) NULL;  \n" +
                /* **************************** New Script -> 01-12-2021 *********************************** */
                "ALTER TABLE `rfqtype`  \n" +
                "CHANGE COLUMN `description` `description` VARCHAR(1000) NULL;  \n" +
                /* **************************** New Script -> 01-12-2021 *********************************** */
                "ALTER TABLE `requirement`  \n" +
                "CHANGE COLUMN `description` `description` VARCHAR(1000) NULL;  \n" +
                /* **************************** New Script -> 01-12-2021 *********************************** */
                "ALTER TABLE `rfq_lineitems_errorcode`  \n" +
                "CHANGE COLUMN `description` `description` VARCHAR(1000) NULL;  \n" +
                /* **************************** Add Script Version -> 01-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5566,'2.00','V1',' RFQ related Pages Global Points(Bug: 39021, 39022, 39029, 39032, 39020, 39023) - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5566:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_jobtype`;  \n" +
                "CREATE TRIGGER `Trg_AU_jobtype` AFTER UPDATE ON `jobtype` FOR EACH ROW BEGIN  \n" +
                "	IF IFNULL(OLD.name,0) != IFNULL(NEW.name,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('JOBTYPE',CAST(new.id AS CHAR),'Job Type',CAST(OLD.name AS CHAR), CAST(NEW.name AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.description,0) != IFNULL(NEW.description,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType)  \n" +
                "        VALUES('JOBTYPE',CAST(new.id AS CHAR),'Description',CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'text');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shortname,0) != IFNULL(NEW.shortname,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('JOBTYPE',CAST(new.id AS CHAR),'Short Name',CAST(OLD.shortname AS CHAR), CAST(NEW.shortname AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('JOBTYPE',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Disable' ELSE 'Enable' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Disable' ELSE 'Enable' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.termsandcondition,0) != IFNULL(NEW.termsandcondition,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType)  \n" +
                "        VALUES('JOBTYPE',CAST(new.id AS CHAR),'Notes',CAST(OLD.termsandcondition AS CHAR), CAST(NEW.termsandcondition AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'longtext');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isLaborCosting,0) != IFNULL(NEW.isLaborCosting,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('JOBTYPE',CAST(new.id AS CHAR),'Labor Costing',CAST(CASE WHEN OLD.isLaborCosting=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isLaborCosting=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isMaterialCosting,0) != IFNULL(NEW.isMaterialCosting,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('JOBTYPE',CAST(new.id AS CHAR),'Material Costing',CAST(CASE WHEN OLD.isMaterialCosting=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isMaterialCosting=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_rfqtype`;  \n" +
                "CREATE TRIGGER `Trg_AU_rfqtype` AFTER UPDATE ON `rfqtype` FOR EACH ROW BEGIN  \n" +
                "	IF IFNULL(OLD.name,0) != IFNULL(NEW.name,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQTYPE',CAST(new.id AS CHAR),'RFQ Type',CAST(OLD.name AS CHAR), CAST(NEW.name AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.description,0) != IFNULL(NEW.description,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType)  \n" +
                "        VALUES('RFQTYPE',CAST(new.id AS CHAR),'Description',CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'text');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQTYPE',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Disable' ELSE 'Enable' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Disable' ELSE 'Enable' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.termsandcondition,0) != IFNULL(NEW.termsandcondition,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType)  \n" +
                "        VALUES('RFQTYPE',CAST(new.id AS CHAR),'Notes',CAST(OLD.termsandcondition AS CHAR), CAST(NEW.termsandcondition AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'longtext');  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_requirement`;  \n" +
                "CREATE TRIGGER `Trg_AU_requirement` AFTER UPDATE ON `requirement` FOR EACH ROW BEGIN  \n" +
                "	IF IFNULL(OLD.name,0) != IFNULL(NEW.name,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('REQUIREMENT',CAST(new.id AS CHAR),'Name',CAST(OLD.name AS CHAR), CAST(NEW.name AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.description,0) != IFNULL(NEW.description,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType)  \n" +
                "        VALUES('REQUIREMENT',CAST(new.id AS CHAR),'Description',CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'text');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('REQUIREMENT',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Disable' ELSE 'Enable' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Disable' ELSE 'Enable' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.category,0) != IFNULL(NEW.category,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('REQUIREMENT',CAST(new.id AS CHAR),'Category',CAST(CASE WHEN (OLD.category = 1) THEN 'Customer Quote Requirement' WHEN (OLD.category = 2) THEN 'Assembly Requirement' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.category = 1) THEN 'Customer Quote Requirement' WHEN (NEW.category = 2) THEN 'Assembly Requirement' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_rfq_lineitems_errorcode`;  \n" +
                "CREATE TRIGGER `Trg_AU_rfq_lineitems_errorcode` AFTER UPDATE ON `rfq_lineitems_errorcode` FOR EACH ROW BEGIN  \n" +
                "	IF IFNULL(OLD.errorColor ,0) != IFNULL(NEW.errorColor ,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Error Color',CAST(OLD.errorColor AS CHAR), CAST(NEW.errorColor AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.description,0) != IFNULL(NEW.description,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Description',CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'text');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.errorCode,0) != IFNULL(NEW.errorCode,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Error Code',CAST(OLD.errorCode AS CHAR), CAST(NEW.errorCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.systemVariable,0) != IFNULL(NEW.systemVariable,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'System Variable',CAST(OLD.systemVariable AS CHAR), CAST(NEW.systemVariable AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.displayName,0) != IFNULL(NEW.displayName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Display Name',CAST(OLD.displayName AS CHAR), CAST(NEW.displayName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.org_description,0) != IFNULL(NEW.org_description,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Default Description',CAST(OLD.org_description AS CHAR), CAST(NEW.org_description AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.narrative,0) != IFNULL(NEW.narrative,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Narrative',CAST(OLD.narrative AS CHAR), CAST(NEW.narrative AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'longtext');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isExternalIssue,0) != IFNULL(NEW.isExternalIssue,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'External Issue',CAST(CASE WHEN (OLD.isExternalIssue = 0) THEN 'No' WHEN (OLD.isExternalIssue = 1) THEN 'Yes' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.isExternalIssue = 0) THEN 'No' WHEN (NEW.isExternalIssue = 1) THEN 'Yes' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.displayOrder,0) != IFNULL(NEW.displayOrder,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Priority',CAST(OLD.displayOrder AS CHAR), CAST(NEW.displayOrder AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isResearchStatus,0) != IFNULL(NEW.isResearchStatus,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Include In R&D Activity',CAST(CASE WHEN (OLD.isResearchStatus = 0) THEN 'No' WHEN (OLD.isResearchStatus = 1) THEN 'Yes' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.isResearchStatus = 0) THEN 'No' WHEN (NEW.isResearchStatus = 1) THEN 'Yes' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isAllowToEngrApproved,0) != IFNULL(NEW.isAllowToEngrApproved,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Allow Part to Engr. Approved',CAST(CASE WHEN (OLD.isAllowToEngrApproved = 0) THEN 'No'  \n" +
                "		WHEN (OLD.isAllowToEngrApproved = 1) THEN 'Yes' WHEN (OLD.isAllowToEngrApproved = 2) THEN 'N/A (Not Applicable)' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.isAllowToEngrApproved = 0) THEN 'No' WHEN (NEW.isAllowToEngrApproved = 1) THEN 'Yes' WHEN (NEW.isAllowToEngrApproved = 2) THEN 'N/A (Not Applicable)' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isAssemblyLevelError,0) != IFNULL(NEW.isAssemblyLevelError,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('RFQ_LINEITEMS_ERRORCODE',CAST(new.id AS CHAR),'Allow Part to Engr. Approved',CAST(CASE WHEN (OLD.isAssemblyLevelError = 0) THEN 'Line Level' WHEN (OLD.isAssemblyLevelError = 1) THEN 'Assembly Level' ELSE '' END AS CHAR), CAST(CASE WHEN (NEW.isAssemblyLevelError = 0) THEN 'Line Level' WHEN (NEW.isAssemblyLevelError = 1) THEN 'Assembly Level' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5567,'2.00','V1',' RFQ related Pages Global Points(Bug: 39021, 39022, 39029, 39032, 39020, 39023) - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5567:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-11-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetUnitOfMeasurement` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetUnitOfMeasurement`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pMeasurementTypeId INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @tempUOMQuery=CONCAT(\"create temporary table if not exists  tempunitMeasermentType as  \n" +
                "		select id,refTableName,refId,alias,isdeleted from component_fields_genericalias_mst where deletedAt is NULL\");  \n" +
                "  \n" +
                "		        PREPARE queryuom FROM @tempUOMQuery;  \n" +
                "			EXECUTE queryuom;  \n" +
                "			DEALLOCATE PREPARE queryuom;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetUnitOfMeasurement = CONCAT(\"SELECT um.id, um.unitName, um.abbreviation, CONCAT('1 ', um.abbreviation) AS 1UOM,  \n" +
                "     um.ord AS displayOrder, um.defaultUOM, um.operator,  \n" +
                " 	um.orgBaseUnitValue AS unitConvertValue,  \n" +
                " 	 um.baseUnitConvertValue,  \n" +
                " 	( SELECT GROUP_CONCAT(concat(alias,'@@@', ifnull((select GROUP_CONCAT(m.mfgCode SEPARATOR '#$#') AS mfgCodelist  \n" +
                "			  from component_attributes_source_mapping c1  \n" +
                "				join mfgcodemst m on m.id = c1.mfgCodeID  \n" +
                "				where c1.refAliasID = cfg.id  \n" +
                "				 ),''))  SEPARATOR '##') AS aliaslist  \n" +
                "						  FROM tempunitMeasermentType cfg WHERE IFNULL(cfg.isdeleted,0) = 0  \n" +
                "						  AND  cfg.refTableName ='Uoms'  \n" +
                "          AND cfg.refId=`um`.`id` ) AS aliaslist  ,  \n" +
                "  \n" +
                "	(CASE WHEN (`um`.`defaultUOM` = 1) THEN 'Yes' ELSE 'No' END) AS defaultUOMConvertedValue,  \n" +
                " 	(CASE WHEN (`um`.`isFormula` = 0) THEN 'No'  \n" +
                " 		WHEN (`um`.`isFormula` = 1) THEN 'Yes' ELSE '' END) AS `isFormulaConvertedValue`,  \n" +
                "	um.isFormula,  \n" +
                "	um.description,  \n" +
                " 	(CASE WHEN (`um`.`isSystemDefault` = 0) THEN 'No'  \n" +
                " 		WHEN (`um`.`isSystemDefault` = 1) THEN 'Yes' ELSE '' END) AS `isSystemDefaultConvertedValue`,  \n" +
                "	um.isSystemDefault, um.measurementTypeID,  \n" +
                "    u.unitName baseunit,  \n" +
                "    um.baseUnitID,  \n" +
                "    case when um.baseUnitID=0 then 'Yes' else 'No' end baseUOM,  \n" +
                "    fun_getBaseUnit(um.measurementTypeID, TRUE) AS baseUnitValue,  \n" +
                "    fun_getUserNameByID(um.updatedBy) updatedby,  \n" +
                "	fun_getUserNameByID(um.createdBy) createdby,  \n" +
                "	fun_getRoleByID(um.createByRoleId) createdbyRole,  \n" +
                "	fun_getRoleByID(um.updateByRoleId) updatedbyRole,  \n" +
                "	fun_ApplyCommonDateTimeFormatByParaValue(um.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "	fun_ApplyCommonDateTimeFormatByParaValue(um.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "	FROM uoms um LEFT JOIN uoms u ON u.id = um.baseUnitID AND u.isdeleted = 0  \n" +
                "	LEFT JOIN measurement_types  mt ON mt.id = um.measurementTypeID AND mt.isdeleted = 0  \n" +
                "	WHERE um.measurementTypeID = \",pMeasurementTypeId,\" AND um.isdeleted = 0\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY displayOrder IS NULL, displayOrder ASC ,unitName ASC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetUnitOfMeasurement,\" ) c where \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetUnitOfMeasurement,\" ) c  \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "        PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 11-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5568,'2.00','V1',' Alter procedure Sproc_GetUnitOfMeasurement-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5568:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-11-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveComponentAlternetPart`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveComponentAlternetPart`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pType INT,  \n" +
                "	IN pComponentID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	        DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	        SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	        SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET @temp_Sproc_RetrieveComponentAlternetPart = CONCAT(\"SELECT  \n" +
                "        c.ID,						c.mfgPN AS `mfgPN`,							c.mfgcodeID,											m.mfgCode AS `mfgCode`,  \n" +
                "		m.mfgType,					c.operatingTemp AS `operatingTemp`,			c.minOperatingTemp AS `minOperatingTemp`,				c.maxOperatingTemp AS `maxOperatingTemp`,  \n" +
                "        c.tolerance AS `tolerance`,	c.voltage AS `voltage`,c.value AS `value`,	c.partPackage AS `partPackage`,							c.powerRating AS `powerRating`,  \n" +
                "        c.weight AS `weight`,		c.feature AS `feature`,						c.functionalCategoryText AS `functionalTypeExternal`,	functional.partTypeName AS `functionalTypeInternal`,  \n" +
                "        c.mountingTypeText AS `mountingTypeExternal`,							mounting.name AS `mountingTypeInternal`,				ro.rohsIcon,ro.name rohsName,  \n" +
                "        c.connecterTypeID,			cast(NULL as char(50)) connecterTypeInternal,	c.connectorTypeText,  								c.noOfPosition,  \n" +
                "        c.noOfPositionText,	        c.noOfRows,									c.noOfRowsText,											c.pitch,  \n" +
                "        c.pitchMating,				c.sizeDimension,								(CASE WHEN (c.isEpoxyMount = 1) THEN 'Yes' ELSE 'No' END) AS isEpoxyMount,  \n" +
                "        c.length,		            c.width,	c.heightText,						c.height, 												c.color,  \n" +
                "        c.temperatureCoefficient,	c.temperatureCoefficientValue,					c.temperatureCoefficientUnit,  \n" +
                "        fun_getUserNameByID(a.updatedBy) updatedby,								fun_getUserNameByID(a.createdBy) createdby, 			fun_getRoleByID(a.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(a.updateByRoleId) updatedbyRole,    					fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(a.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "        FROM component_alternatepn a  \n" +
                "        JOIN component c ON a.ComponentID = c.ID  \n" +
                "        JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
                "        LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "        LEFT OUTER JOIN rfq_parttypemst functional ON functional.id = c.functionalCategoryID  \n" +
                "        LEFT OUTER JOIN rfq_mountingtypemst mounting ON mounting.id = c.mountingTypeID  \n" +
                "        WHERE a.refComponentID = \",pComponentID,\" AND a.Type = \", pType,\" AND a.isDeleted = 0\");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY mfgPN ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveComponentAlternetPart,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveComponentAlternetPart,\" ) c  \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasPartsSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasPartsSearch`(  \n" +
                "	IN pGoodPart VARCHAR(100),  \n" +
                "	IN pSearch VARCHAR(500),  \n" +
                "	IN pId INT,  \n" +
                "	IN pMfgType VARCHAR(50),  \n" +
                "	IN pMfgCodeId INT,  \n" +
                "	IN pMountingType VARCHAR(50),  \n" +
                "	IN pMountingTypeId INT,  \n" +
                "	IN pCategoryID INT,  \n" +
                "	IN pRohsMainCategoryID INT,  \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
                "	IN pstrictCustomPart TINYINT,  \n" +
                "    IN pAlternatePartFilter TINYINT,  \n" +
                "    IN pPackagingAliasFilter TINYINT,  \n" +
                "    IN pRoHReplacementPartFilter TINYINT,  \n" +
                "    IN pDriveToolsPartFilter TINYINT,  \n" +
                "    IN pProcessMaterialPartFilter TINYINT,  \n" +
                "    IN pRequireMatingPartFilter TINYINT,  \n" +
                "    IN pPickupPadPartFilter TINYINT,  \n" +
                "    IN pRequireFunctionalPartFilter TINYINT,  \n" +
                "	IN pCurrentPartId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vRohsMainCategoryID INT;  \n" +
                "	DECLARE vPackaginggroupID INT;  \n" +
                "	SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
                "	/*===>this logic is added to compare invert rohs category*/  \n" +
                "	IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
                "		IF pRohsMainCategoryID = -1 THEN  \n" +
                "			SET vRohsMainCategoryID = -2;  \n" +
                "		ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
                "			SET vRohsMainCategoryID = -1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	/*<===this logic is added to compare invert rohs category*/  \n" +
                "	IF(pCurrentPartId is not null)  \n" +
                "	THEN  \n" +
                "		select packaginggroupID INTO vPackaginggroupID from component where id = pCurrentPartId;  \n" +
                "	END IF;  \n" +
                "	select *  \n" +
                "		from  \n" +
                "		(  \n" +
                "			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,					c.mfgPN orgMfgPN,			c.packaginggroupID,					c.PIDCode,  \n" +
                "					c.isGoodPart,				c.RoHSStatusID,						c.mfgcodeID,						m.mfgType,  \n" +
                "					c.category,					c.functionalCategoryID,				c.mountingTypeID,  					c.connecterTypeID  \n" +
                "			from component c  \n" +
                "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID  \n" +
                "            JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND  mt.name = IFNULL(pMountingType, mt.name)  \n" +
                "			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                "            AND 	c.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "            AND     (CASE WHEN pCurrentPartId is not null THEN c.id != pCurrentPartId  ELSE 1 = 1 END)  \n" +
                "		 	AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "			AND 	(CASE WHEN pstrictCustomPart = 0 THEN c.iscustom = 0 ELSE 1 = 1 END)  \n" +
                "            and 	(CASE WHEN pPackagingAliasFilter = 1 THEN  (not exists (select 1 from component_packagingalias cp where cp.componentID = c.id and cp.aliasgroupID = vPackaginggroupID and cp.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pAlternatePartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 1 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pPickupPadPartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 2 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pRequireFunctionalPartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 4 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pProcessMaterialPartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 5 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pRoHReplacementPartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 6 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pDriveToolsPartFilter = 1 THEN  (not exists (select 1 from component_drivetools cd where cd.isDeleted = 0 and cd.componentID = c.id and cd.refComponentID = pCurrentPartId )) ELSE 1= 1 END)  \n" +
                "            and ((pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND  \n" +
                "					(  \n" +
                "						c.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
                "						EXISTS( SELECT  1  \n" +
                "								FROM 	component_otherpn opn  \n" +
                "								WHERE 	opn.refcomponentid = c.id  \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
                "					)  \n" +
                "				) )  \n" +
                "		) AS a  \n" +
                "		/*WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND  \n" +
                "					(  \n" +
                "						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
                "						EXISTS( SELECT  1  \n" +
                "								FROM 	component_otherpn opn  \n" +
                "								WHERE 	opn.refcomponentid = a.id  \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
                "					)  \n" +
                "				)  \n" +
                "			)  */  \n" +
                "		ORDER BY mfgPN;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_CheckPackagingAlias_Validation`;  \n" +
                "CREATE PROCEDURE `Sproc_CheckPackagingAlias_Validation`(  \n" +
                "	IN pToPartID   INT,  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pTypeID INT,  \n" +
                "    INOUT pMissMatchField  longtext)  \n" +
                "BEGIN  \n" +
                "	DECLARE v_FunctionalCategoryID int;  \n" +
                "    DECLARE v_ValidationCount int;  \n" +
                "    DECLARE v_CountryValidationCount int;  \n" +
                "    DECLARE v_fieldNameToValidate  varchar(100);  \n" +
                "	DECLARE v_fieldDataType  varchar(100);  \n" +
                "	DECLARE v_matchCriteria  varchar(10);  \n" +
                "	DECLARE v_nullValueIsValid  tinyint;  \n" +
                "	DECLARE v_fieldTitle  varchar(100);  \n" +
                "    DECLARE v_IndexNo INT DEFAULT 0;  \n" +
                "  \n" +
                "    INSERT INTO  tempFromComponentDetail  \n" +
                "    select * from component where id = pFromPartID;  \n" +
                "  \n" +
                "	INSERT INTO  tempToComponentDetail  \n" +
                "    select * from component where id = pToPartID;  \n" +
                "    set v_FunctionalCategoryID = (select functionalCategoryID from tempFromComponentDetail limit 1);  \n" +
                "  \n" +
                "    SELECT functionalCategoryID INTO v_FunctionalCategoryID FROM tempFromComponentDetail  limit 1;  \n" +
                "  \n" +
                "	INSERT INTO tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where type = pTypeID and refRfqPartTypeId =v_FunctionalCategoryID and isDeleted = 0;  \n" +
                "  \n" +
                "    SELECT count(1) INTO v_ValidationCount FROM tempComponentAlternateValidationDetail;  \n" +
                "	SET v_IndexNo = 0;  \n" +
                "    SET pMissMatchField = (SELECT (CASE WHEN pMissMatchField is null THEN '' ELSE pMissMatchField END));  \n" +
                "  \n" +
                "	IF(pTypeID = 2)		-- Apply 'Acceptable Shipping Countries' Validation for (Type = 2) Packaging Alias Part  (TFS - 31463)  \n" +
                "    THEN  \n" +
                "		select sum(a.countryCount) into v_CountryValidationCount from (  \n" +
                "		select count(1) as countryCount from component_acceptable_shipping_countries a where  refComponentID = pToPartID and isDeleted = 0 and  not exists  \n" +
                "			(select * from component_acceptable_shipping_countries where refComponentID = pFromPartID  and countryID = a.countryID and isDeleted = 0)  \n" +
                "		union all  \n" +
                "		select count(1) as countryCount from component_acceptable_shipping_countries a where  refComponentID = pFromPartID and isDeleted = 0 and  not exists  \n" +
                "			(select * from component_acceptable_shipping_countries where refComponentID = pToPartID and countryID = a.countryID and isDeleted = 0)) as a;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(v_CountryValidationCount  > 0)  \n" +
                "    THEN  \n" +
                "		set pMissMatchField = 'Acceptable Shipping Countries';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  	IF(v_ValidationCount > 0)  \n" +
                "    THEN  \n" +
                "        WHILE v_IndexNo < v_ValidationCount DO  \n" +
                "			set v_fieldNameToValidate = null;  \n" +
                "			set v_fieldDataType = null;  \n" +
                "			set v_matchCriteria = null;  \n" +
                "			set v_nullValueIsValid  = null;  \n" +
                "			set v_fieldTitle = null;  \n" +
                "            set @FromPartValue = null;  \n" +
                "            set @ToPartValue = null;  \n" +
                "            set @IsMatchCriteria = false;  \n" +
                "  \n" +
                "			SELECT fieldNameToValidate,fieldDataType,matchCriteria,nullValueIsValid,fieldTitle  \n" +
                "				INTO v_fieldNameToValidate,v_fieldDataType,v_matchCriteria,v_nullValueIsValid,v_fieldTitle  \n" +
                "			FROM tempComponentAlternateValidationDetail LIMIT v_IndexNo,1;  \n" +
                "            set @SQLAssignValueStatement1 = CONCAT('SELECT a.', v_fieldNameToValidate, ' INTO @FromPartValue from tempFromComponentDetail a;');  \n" +
                "  \n" +
                "            set @SQLAssignValueStatement2 = CONCAT('SELECT a.', v_fieldNameToValidate, ' INTO @ToPartValue from tempToComponentDetail a;');  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLAssignValueStatement1;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "            PREPARE query2 FROM @SQLAssignValueStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "            IF(v_nullValueIsValid = 1 and (@FromPartValue is null or @FromPartValue = '') and (@ToPartValue is null OR @ToPartValue = ''))  \n" +
                "            THEN  \n" +
                "                set @FromPartValue = '';  \n" +
                "                set @ToPartValue = '';  \n" +
                "			ELSE  \n" +
                "                iF(v_fieldDataType = 'string')  \n" +
                "                THEN  \n" +
                "					set v_matchCriteria = (select CASE WHEN (v_matchCriteria = '==') THEN ' = ' ELSE  \n" +
                "											(CASE WHEN (v_matchCriteria = '!==') THEN ' != ' ELSE v_matchCriteria END) END);  \n" +
                "  \n" +
                "                    set @FromPartValue = (select CASE WHEN (@FromPartValue is null or @FromPartValue = '' )THEN \"''\" ELSE concat(\"'\", CAST(@FromPartValue as CHAR), \"'\") END);  \n" +
                "  \n" +
                "                    set @ToPartValue = (select CASE WHEN (@ToPartValue  is null or @ToPartValue  = '' ) THEN \"''\" ELSE concat(\"'\", CAST(@ToPartValue  as CHAR), \"'\") END);  \n" +
                "  \n" +
                "					set @SQLValidateStatement1 = CONCAT('select (CASE WHEN(',@FromPartValue ,' ', v_matchCriteria , ' ' ,@ToPartValue,') THEN 1 ELSE 0 END) INTO @IsMatchCriteria;');  \n" +
                "  \n" +
                "					PREPARE query1 FROM @SQLValidateStatement1;  \n" +
                "					EXECUTE query1;  \n" +
                "					DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "                    IF(@IsMatchCriteria = 0)  \n" +
                "                    THEN  \n" +
                "						set pMissMatchField = (select (CASE WHEN (pMissMatchField = '') THEN v_fieldTitle ELSE CONCAT(pMissMatchField, \", \", v_fieldTitle) END));  \n" +
                "                    END IF;  \n" +
                "                ELSEIF(v_fieldDataType = 'number')  \n" +
                "                THEN  \n" +
                "					set v_matchCriteria = (select CASE WHEN (v_matchCriteria = '==') THEN ' = ' ELSE  \n" +
                "											(CASE WHEN (v_matchCriteria = '!==') THEN ' != ' ELSE v_matchCriteria END) END);  \n" +
                "  \n" +
                "                    set @FromPartValue = (select CASE WHEN (@FromPartValue is null or @FromPartValue = '' ) THEN CAST(0 as DECIMAl(18,8)) ELSE CAST(@FromPartValue as DECIMAl(18,8)) END);  \n" +
                "                    set @ToPartValue = (select CASE WHEN (@ToPartValue  is null or @ToPartValue  = '' ) THEN CAST(0 as DECIMAl(18,8)) ELSE CAST(@ToPartValue as DECIMAl(18,8)) END);  \n" +
                "  \n" +
                "                    set @SQLValidateStatement1 = CONCAT('select (CASE WHEN(',@FromPartValue ,' ', v_matchCriteria , ' ' ,@ToPartValue,') THEN 1 ELSE 0 END) INTO @IsMatchCriteria;');  \n" +
                "                    PREPARE query1 FROM @SQLValidateStatement1;  \n" +
                "					EXECUTE query1;  \n" +
                "					DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "                    IF(@IsMatchCriteria = 0)  \n" +
                "                    THEN  \n" +
                "						set pMissMatchField = (select (CASE WHEN (pMissMatchField = '') THEN v_fieldTitle ELSE CONCAT(pMissMatchField, \", \", v_fieldTitle) END));  \n" +
                "                    END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			SET v_IndexNo = v_IndexNo + 1;  \n" +
                "		END WHILE;  \n" +
                "        set pMissMatchField = (select (CASE WHEN pMissMatchField is null THEN '' ELSE pMissMatchField END));  \n" +
                "    END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetMisMatchFieldList_of_AlternateAliasValidation`;  \n" +
                "DROP procedure IF EXISTS `Sproc_GetMisMatchFieldList_of_PackagingAliasValidation`;  \n" +
                "CREATE PROCEDURE `Sproc_GetMisMatchFieldList_of_AlternateAliasValidation`(  \n" +
                "	IN pToPartID   INT,  \n" +
                "	IN pFromPartIDs VARCHAR(500),  \n" +
                "    In pTypeID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMisMatchFields longtext;  \n" +
                "    DECLARE vIndexNo INT DEFAULT 0;  \n" +
                "    DECLARE vFromPartId INT;  \n" +
                "    DECLARE vPartIDCount INT DEFAULT 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempMisMatchPartList;  \n" +
                "	CREATE TEMPORARY TABLE tempMisMatchPartList(partId int, misMatchFields TEXT);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS partText;  \n" +
                "	CREATE TEMPORARY TABLE partText(txt TEXT );  \n" +
                "	INSERT INTO partText VALUES(pFromPartIDs);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS partIdList;  \n" +
                "	CREATE TEMPORARY TABLE partIdList(partId int);  \n" +
                "	SET @SQL = CONCAT(\"insert into partIdList (partId) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM partText ), \",\", \"'),('\"),\"');\");  \n" +
                "	PREPARE stmt1 FROM @SQL;  \n" +
                "	EXECUTE stmt1;  \n" +
                "  \n" +
                "    SELECT COUNT(*) FROM partIdList INTO vPartIDCount;  \n" +
                "	SET vIndexNo = 0;  \n" +
                "  \n" +
                "    WHILE vIndexNo < vPartIDCount DO  \n" +
                "		SET vFromPartId = NULL;  \n" +
                "		set vMisMatchFields  = '';  \n" +
                "        delete from  tempFromComponentDetail;  \n" +
                "		delete from  tempToComponentDetail;  \n" +
                "		delete from tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "		SELECT partId INTO vFromPartId FROM partIdList LIMIT vIndexNo,1;  \n" +
                "  \n" +
                "		CALL  Sproc_CheckPackagingAlias_Validation(pToPartID,vFromPartId, pTypeID, vMisMatchFields);  \n" +
                "		IF(vMisMatchFields != '')  \n" +
                "        THEN  \n" +
                "			INSERT INTO tempMisMatchPartList VALUES(vFromPartId, vMisMatchFields);  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		SET vIndexNo = vIndexNo + 1;  \n" +
                "	END WHILE;  \n" +
                "  \n" +
                "    select * from tempMisMatchPartList;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetComponentFunctionalTestingEquipmentSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentFunctionalTestingEquipmentSearch`(  \n" +
                "IN pSearch VARCHAR(100),  \n" +
                "IN pCurrentPartId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                " SELECT * FROM  \n" +
                "    (select e.eqpID, e.assetName  \n" +
                " 	   from equipment e  \n" +
                "	  where e.isDeleted = 0  \n" +
                "        -- and not exists (select 1 from component_functionaltestingequipment cf where cf.refComponentID != pCurrentPartId and cf.isDeleted = 0)  \n" +
                "	    and e.equipmentAs = 'E'  \n" +
                "	) AS a  \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR (pSearch IS NOT NULL AND assetName LIKE CONCAT('%', pSearch , '%')));  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_CopyPartDetailOnCopyAndDuplicatePart`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyPartDetailOnCopyAndDuplicatePart`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pToPartID INT,  \n" +
                "    IN pUserID Int,  \n" +
                "	IN pIsCPN tinyint,  \n" +
                "    IN pToPartIsCPN tinyint,  \n" +
                "    IN pFromPartCategory tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                "    INOUT pMissMatchField  longtext,  \n" +
                "    INOUT vMessage longtext  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vValidationPassed tinyint;  \n" +
                "	IF(pIsPackagingAliasPart)  \n" +
                "	THEN  \n" +
                "		set pMissMatchField  = '';  \n" +
                "		CALL  Sproc_CheckPackagingAlias_Validation(pToPartID,pFromPartID, 2, pMissMatchField);  -- Type - 2(Packaging Alias)  \n" +
                "		set vValidationPassed = (select CASE WHEN (pMissMatchField  != '') THEN 0 ELSE 1 END);  \n" +
                "	END IF;  \n" +
                "	IF(vValidationPassed = 0)  \n" +
                "	THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "        set vMessage = 'PACKAGING_ALIAS_PART_VALIDATION_FAILED';  \n" +
                "		-- select 'PACKAGING_ALIAS_PART_VALIDATION_FAILED' as message, vMisMatchFields as misMatchFields;  \n" +
                "	ELSE  \n" +
                "  \n" +
                "        set @FromPackagingAliasID = (select packaginggroupID from component where id = pFromPartID);  \n" +
                "		set @ToPackagingAliasID = (select packaginggroupID from component where id = pToPartID);  \n" +
                "		if (pIsPackagingAliasPart = 1 and ((@FromPackagingAliasID is not null and @ToPackagingAliasID is not null)  \n" +
                "				OR (@FromPackagingAliasID is null and @ToPackagingAliasID is null)))  \n" +
                "		THEN  \n" +
                "			call Sproc_GenerateIncrementalNumber('PackagingGroupID', true);  \n" +
                "			select systemID, message into @newPackagingGroupID, vMessage from temp_serialNumber;  \n" +
                "			set vValidationPassed = (select CASE WHEN (vMessage is not null and vMessage != '') THEN 0 ELSE 1 END);  \n" +
                "		end if;  \n" +
                "		IF(vValidationPassed = 0)  \n" +
                "		THEN  \n" +
                "			set vMessage = 'PACKAGING_GROUP_TYPE_NOT_EXISTS';  \n" +
                "		ELSE  \n" +
                "			if pIsStandards then  \n" +
                "				INSERT INTO `component_standard_details`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`certificateStandardID`,`ClassID`)  \n" +
                "				select pToPartID `componentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`certificateStandardID`,`ClassID`  \n" +
                "				from component_standard_details cs where componentID = pFromPartID and isDeleted = 0 and DeletedAt is null  \n" +
                "				and not exists (select 1 from component_standard_details csd  \n" +
                "				where componentID = pToPartID and isDeleted = 0 and deletedat is null and certificateStandardID = cs.certificateStandardID and ifnull(ClassID,-100) = ifnull(cs.ClassID,-100));  \n" +
                "			end if;  \n" +
                "			if pIsRequiredMountingType then  \n" +
                "				INSERT INTO `component_requiremountingtype`  \n" +
                "				(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "				SELECT `partTypeID`, current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "				FROM `component_requiremountingtype` cm where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "				and not exists (select 1 from component_requiremountingtype  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and partTypeID = cm.partTypeID);  \n" +
                "			end if;  \n" +
                "			if pIsRequiredFunctionalType then  \n" +
                "				INSERT INTO `component_requirefunctionaltype`  \n" +
                "				(`partTypeID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "				SELECT `partTypeID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "				FROM `component_requirefunctionaltype` cf where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "				and not exists (select 1 from component_requirefunctionaltype  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and partTypeID = cf.partTypeID);  \n" +
                "			end if;  \n" +
                "			if (pIsPackagingAliasPart = 1 and pFromPartCategory != 3 and (pIsCPN = 0 and pToPartIsCPN = 0)) then  \n" +
                "					if @FromPackagingAliasID is not null and @ToPackagingAliasID is not null then  \n" +
                "						# update alias group id as new packaging alias group id in packaging alias table  \n" +
                "						update component_packagingalias set aliasgroupID = @newPackagingGroupID where aliasgroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where packaginggroupID in (@FromPackagingAliasID,@ToPackagingAliasID);  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is null then  \n" +
                "						# Insert data in packaging alias table for ToPartID  & FromPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@newPackagingGroupID, pToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "						# update packaging alias group id as new packaging alias group id in component table for ToPartId and FromPartId  \n" +
                "						update component set packaginggroupID = @newPackagingGroupID where  id IN (pFromPartID,pToPartID);  \n" +
                "					elseif @FromPackagingAliasID is not null and @ToPackagingAliasID is null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@FromPackagingAliasID, pToPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  ToPartID  \n" +
                "						update component set packaginggroupID = @FromPackagingAliasID where id = pToPartID;  \n" +
                "					elseif @FromPackagingAliasID is null and @ToPackagingAliasID is not null then  \n" +
                "					# Insert data in packaging alias table for ToPartID  \n" +
                "						INSERT INTO `component_packagingalias`  \n" +
                "						(`aliasgroupID`,`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`)  \n" +
                "						values  \n" +
                "						(@ToPackagingAliasID, pFromPartID,current_timestamp() ,pUserID ,current_timestamp() ,pUserID);  \n" +
                "					# Update data for packaging alias group id for  FromPartID  \n" +
                "						update component set packaginggroupID = @ToPackagingAliasID where id = pFromPartID;  \n" +
                "					end if;  \n" +
                "			end if;  \n" +
                "			if pIsOtherPartName then  \n" +
                "						INSERT INTO `component_otherpn`  \n" +
                "						(`name`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "						SELECT `name`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "						FROM `component_otherpn` con where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "						and not exists (select 1 from component_otherpn  \n" +
                "						where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `name` = con.`name`);  \n" +
                "			end if;  \n" +
                "			If (pIsAlternatePart = 1 and (pIsCPN = 0 and pToPartIsCPN = 0))then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 1 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 1);  \n" +
                "			end if;  \n" +
                "			if (pIsRoHSReplacementPart = 1 and (pIsCPN = 0 and pToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 6 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 6);  \n" +
                "			end if;  \n" +
                "			if (pIsDriveTool = 1 and (pIsCPN = 0 and pToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_drivetools`  \n" +
                "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "				SELECT pToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`, current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "				FROM `component_drivetools` cdt where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_drivetools  \n" +
                "				where refComponentID = pToPartID and componentID != pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cdt.`componentID`);  \n" +
                "			end if;  \n" +
                "			if (pIsProcessMaterial = 1 and (pIsCPN = 0 and pToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_processmaterial`  \n" +
                "				(`refComponentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`componentID`)  \n" +
                "				SELECT pToPartID `refComponentID`,current_timestamp() `createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`,`componentID`  \n" +
                "				FROM `component_processmaterial` cpm  where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_processmaterial  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cpm.`componentID`);  \n" +
                "			end if;  \n" +
                "			if (pIsRequiredMattingParts = 1 and (pIsCPN = 0 and pToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 5 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 5);  \n" +
                "			end if;  \n" +
                "			if (pIsPickupPad = 1 and (pIsCPN = 0 and pToPartIsCPN = 0)) then  \n" +
                "			INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 2 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 2);  \n" +
                "			end if;  \n" +
                "			if (pIsFunctionalTesingTool = 1 and (pIsCPN = 0 and pToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_alternatepn`  \n" +
                "				(`componentID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`,`Type`)  \n" +
                "				SELECT `componentID`,current_timestamp() `createdAt`, pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`,`Type`  \n" +
                "				FROM `component_alternatepn` cap where refComponentID = pFromPartID and `Type` = 4 and isDeleted = 0 and deletedAt is null and componentID != pToPartID  \n" +
                "				and not exists (select 1 from component_alternatepn  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `componentID` = cap.`componentID` and `Type` = 4);  \n" +
                "			end if;  \n" +
                "			if (pIsFinctionalRestingEquipment = 1 and (pIsCPN = 0 and pToPartIsCPN = 0)) then  \n" +
                "				INSERT INTO `component_functionaltestingequipment`  \n" +
                "				(`eqpID`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "				SELECT `eqpID`,current_timestamp()`createdAt`,pUserID `createdBy`,current_timestamp() `updatedAt`,pUserID `updatedBy`, pToPartID `refComponentID`  \n" +
                "				FROM `component_functionaltestingequipment` cfte where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null  \n" +
                "				and not exists (select 1 from component_functionaltestingequipment  \n" +
                "				where refComponentID = pToPartID and isDeleted = 0 and deletedat is null and `eqpID` = cfte.`eqpID`);  \n" +
                "			end if;  \n" +
                "		end if;  \n" +
                "    END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetComponentWithPackaginaAlias`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentWithPackaginaAlias`(  \n" +
                "	IN Ids varchar(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS partText;  \n" +
                "	CREATE TEMPORARY TABLE partText(txt TEXT );  \n" +
                "	INSERT INTO partText VALUES(Ids);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS partIdList;  \n" +
                "	CREATE TEMPORARY TABLE partIdList(partId int);  \n" +
                "	SET @SQL = CONCAT(\"insert into partIdList (partId) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM partText ), \",\", \"'),('\"),\"');\");  \n" +
                "	PREPARE stmt1 FROM @SQL;  \n" +
                "	EXECUTE stmt1;  \n" +
                "  \n" +
                "	SELECT  \n" +
                "		c.id,    c.PIDCode,    c.mfgPN,    c.mfgcodeID,    c.mountingTypeID,    c.functionalCategoryID,    c.partPackageID,    c.connecterTypeID,    c.RoHSStatusID,    c.packaginggroupID,    c.isCustom,  \n" +
                "		mfc.mfgCode AS mfgCode,  mfc.mfgName,  \n" +
                "		packageAliasPart.componentID, 	cpa.PIDCode AS packgingPIDCode,    cpa.mfgPN AS packgingmfgPN,    cpa.mfgcodeID AS packgingmfgcodeID,    cpa.mountingTypeID AS packgingmountingTypeID,    cpa.functionalCategoryID AS packgingfunctionalCategoryID,    cpa.partPackageID AS packgingpartPackageID,  \n" +
                "		cpa.connecterTypeID AS packgingconnecterTypeID,    cpa.RoHSStatusID AS packgingRoHSStatusID,    cpa.packaginggroupID AS packgingpackaginggroupID,    cpa.isCustom AS packgingisCustom,  \n" +
                "		cpamfc.mfgCode AS packgingMfcmfgCode,        cpamfc.mfgName AS packgingMfcmfgName,  \n" +
                "		rohs.name AS rohName,  \n" +
                "		rohs.rohsIcon AS rohsIcon,  \n" +
                "		rohs.refMainCategoryID AS rohsRefMainCategoryID,  \n" +
                "		pt.partTypeName AS functionalTypeName,  \n" +
                "		pt.isTemperatureSensitive AS isTemperatureSensitive,  \n" +
                "		pc.name AS packageCaseName,  \n" +
                "		mt.name AS mountingTypeName,  \n" +
                "		ct.name AS connectorTypename  \n" +
                "	FROM  \n" +
                "		component AS c  \n" +
                "			LEFT OUTER JOIN    mfgCodemst AS mfc ON c.mfgcodeID = mfc.id            AND mfc.isDeleted = FALSE  \n" +
                "			LEFT OUTER JOIN    component_packagingalias AS packageAliasPart ON packageAliasPart.aliasgroupID = c.packaginggroupID and     packageAliasPart.componentID != c.id AND packageAliasPart.isDeleted = FALSE  \n" +
                "			LEFT OUTER JOIN    component AS cpa ON cpa.id = packageAliasPart.componentID  AND packageAliasPart.isDeleted = FALSE  \n" +
                "			LEFT OUTER JOIN    mfgCodemst AS cpamfc ON cpa.mfgcodeID = cpamfc.id         AND cpamfc.isDeleted = FALSE  \n" +
                "			LEFT OUTER JOIN    rfq_rohsmst AS rohs ON c.RoHSStatusID = rohs.id        AND rohs.isDeleted = FALSE  \n" +
                "			LEFT OUTER JOIN    rfq_parttypemst AS pt ON c.functionalCategoryID = pt .id             AND pt .isDeleted = FALSE  \n" +
                "			LEFT OUTER JOIN    rfq_packagecasetypemst AS pc ON c.partPackageID = pc.id       AND pc.isDeleted = FALSE  \n" +
                "			LEFT OUTER JOIN    rfq_mountingtypemst AS mt ON c.mountingTypeID = mt.id            AND mt.isDeleted = FALSE  \n" +
                "			LEFT OUTER JOIN    rfq_connectertypemst AS ct ON c.connecterTypeID = ct.id          AND ct.isDeleted = FALSE  \n" +
                "	WHERE  \n" +
                "		((c.id IN (select partId from partIdList)  \n" +
                "			AND c.isDeleted = FALSE));  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_RetrievePackagingParts`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePackagingParts`(  \n" +
                "	IN pPageIndex INT(11),  \n" +
                "	IN pRecordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pComponentID int(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "	SELECT packaginggroupID INTO @packagingGroupID FROM component WHERE id = pComponentID;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packagingPartResults AS  \n" +
                "    SELECT 	c.ID,  \n" +
                "			c.mfgcodeID,				m.mfgCode, m.mfgType,				c.mfgPN,  \n" +
                "            c.RoHSStatusID,				rohs.rohsIcon, 				rohs.name rohsName,  \n" +
                "            c.functionalCategoryID,		pt.partTypeName functionalTypeInternal,	c.functionalCategoryText functionalTypeExternal,  \n" +
                "			c.mountingTypeID,			mt.name mountingTypeInternal,	c.mountingTypeText mountingTypeExternal,  \n" +
                "            c.operatingTemp,			c.minOperatingTemp,								c.maxOperatingTemp,  \n" +
                "            c.connecterTypeID,			cast(NULL as char(50)) connecterTypeInternal,	c.connectorTypeText,  \n" +
                "            c.noOfPositionText,	        c.noOfRows,		c.pitch,				c.pitchMating,  \n" +
                "            c.sizeDimension,			c.length,		c.width,  \n" +
                "            c.heightText,				c.height,  \n" +
                "            c.temperatureCoefficient,	c.temperatureCoefficientValue,					c.temperatureCoefficientUnit,  \n" +
                "           	c.tolerance,				c.voltage,		c.value,				c.partPackage,  \n" +
                "            c.powerRating,				c.weight,		c.feature,				c.color  ,  \n" +
                "            (CASE WHEN (c.isEpoxyMount = 1) THEN 'Yes' ELSE 'No' END) AS isEpoxyMount  \n" +
                "    FROM 	component c  \n" +
                "    join  component_packagingalias cp  on c.id = cp.componentID  \n" +
                "    join  mfgcodemst m on c.mfgcodeID = m.id  \n" +
                "    left join rfq_mountingtypemst mt on c.mountingTypeID = mt.id  \n" +
                "    left join rfq_parttypemst pt on c.functionalCategoryID = pt.id  \n" +
                "    left join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "	WHERE  	c.isDeleted = 0  \n" +
                "    AND		cp.componentID != pComponentID  \n" +
                "    AND		cp.aliasgroupID = @packagingGroupID  \n" +
                "    AND 	cp.isDeleted = 0;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY id\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM packagingPartResults where \", pWhereClause );  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM packagingPartResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE packagingPartResults;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_RetrieveComponentProcessMatrial`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveComponentProcessMatrial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pComponentID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	        DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	        SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	        SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET @temp_Sproc_RetrieveComponentAlternetPart = CONCAT(\"  \n" +
                " SELECT  \n" +
                "        c.ID,						c.mfgPN AS `mfgPN`,							c.mfgcodeID,											m.mfgCode AS `mfgCode`,  \n" +
                "		m.mfgType,					c.operatingTemp AS `operatingTemp`,			c.minOperatingTemp AS `minOperatingTemp`,				c.maxOperatingTemp AS `maxOperatingTemp`,  \n" +
                "        c.tolerance AS `tolerance`,	c.voltage AS `voltage`,c.value AS `value`,	c.partPackage AS `partPackage`,							c.powerRating AS `powerRating`,  \n" +
                "        c.weight AS `weight`,		c.feature AS `feature`,						c.functionalCategoryText AS `functionalTypeExternal`,	functional.partTypeName AS `functionalTypeInternal`,  \n" +
                "        c.mountingTypeText AS `mountingTypeExternal`,							mounting.name AS `mountingTypeInternal`,				ro.rohsIcon,ro.name rohsName,  \n" +
                "        c.connecterTypeID,			cast(NULL as char(50)) connecterTypeInternal,	c.connectorTypeText,  								c.noOfPosition,  \n" +
                "        c.noOfPositionText,	        c.noOfRows,									c.noOfRowsText,											c.pitch,  \n" +
                "        c.pitchMating, 							            c.sizeDimension,	(CASE WHEN (c.isEpoxyMount = 1) THEN 'Yes' ELSE 'No' END) AS isEpoxyMount,  \n" +
                "        c.temperatureCoefficient,	c.temperatureCoefficientValue,					c.temperatureCoefficientUnit,  \n" +
                "        c.length,		            c.width,	c.heightText,						c.height, 												c.color,  \n" +
                "        fun_getUserNameByID(a.updatedBy) updatedby,								fun_getUserNameByID(a.createdBy) createdby, 			fun_getRoleByID(a.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(a.updateByRoleId) updatedbyRole,    					fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'US/Central', '%m/%d/%y %h:%i %p') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(a.UpdatedAt,'US/Central', '%m/%d/%y %h:%i %p') updatedAt  \n" +
                "        FROM component_processmaterial a  \n" +
                "        JOIN component c ON a.ComponentID = c.ID  \n" +
                "        JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
                "        LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "        LEFT OUTER JOIN rfq_parttypemst functional ON functional.id = c.functionalCategoryID  \n" +
                "        LEFT OUTER JOIN rfq_mountingtypemst mounting ON mounting.id = c.mountingTypeID  \n" +
                "        WHERE a.refComponentID = \",pComponentID,\" AND a.isDeleted = 0\");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY mfgPN ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveComponentAlternetPart,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveComponentAlternetPart,\" ) c  \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +

                "DROP procedure IF EXISTS `Sproc_RetrieveFunctionaltestingEquipment`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveFunctionaltestingEquipment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pComponentID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	        DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	        SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	        SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET @temp_Sproc_RetrieveComponentAlternetPart = CONCAT(\"SELECT  \n" +
                "				id,    refComponentID,   e.eqpID ,    assetName,    eqpMake,    eqpModel,    eqpYear  \n" +
                "			FROM  \n" +
                "				component_functionaltestingequipment as cfte  \n" +
                "				LEFT OUTER JOIN  equipment AS e ON cfte.eqpID = e.eqpID	AND e.isDeleted = FALSE  \n" +
                "			WHERE  \n" +
                "				(cfte.isDeleted = FALSE  AND cfte.refComponentID = \",pComponentID, \")\");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY assetName ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveComponentAlternetPart,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveComponentAlternetPart,\" ) c  \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 11-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5569,'2.00','V1',' User Story 37916: Part master > ALT & ALIAS Tab - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5569:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierQuotePartList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuotePartList`(  \n" +
                "	IN pPageIndex INT(11),  \n" +
                "	IN pRecordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pSupplierQuoteMstID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET @temp_Sproc_RetrieveSupplierQuotePartList=CONCAT(\"  \n" +
                "		SELECT  \n" +
                "        sqpd.id,  \n" +
                "        sqpd.partID,  \n" +
                "        sqpd.supplierPartID,  \n" +
                "        sqpd.supplierQuoteMstID,  \n" +
                "        c.custAssyPN,  \n" +
                "        c.mfgPN AS mfgPN,  \n" +
                "        c.mfgcodeID,  \n" +
                "        sqm.supplierID,  \n" +
                "        sqm.quoteStatus,  \n" +
                "        sqpd.scanLabel,  \n" +
                "        fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "		fun_getMfgNameByID(sqm.supplierID) supplier,  \n" +
                "        fun_getMfgCodeByID(c.mfgcodeID) mfgCode,  \n" +
                "        fun_getMfgCodeByID(sc.mfgcodeID) supplierCode,  \n" +
                "        sc.mfgPN AS supplierPN,  \n" +
                "        sqpd.isActive,  \n" +
                "        (  \n" +
                "				CASE  \n" +
                "					WHEN (`sqpd`.`isActive` = 0) THEN 'Inactive'  \n" +
                "					WHEN (`sqpd`.`isActive` = 1) THEN 'Active'  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS `isActiveConvertedValue`,  \n" +
                "        c.isCustom,  \n" +
                "        sc.isCustom AS isCustomSupplier,  \n" +
                "		fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
                "        fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "        fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon,  \n" +
                "        fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "        fun_getPartAttibutesBySupplierQuoteDetailID(sqpd.id) AS attributesList,  \n" +
                "        fun_getPartPricingCountBySupplierQuoteDetailID(sqpd.id) AS pricingCount,  \n" +
                "        fun_getUserNameByID(sqpd.createdBy) createdby,  \n" +
                "		fun_getUserNameByID(sqpd.updatedBy) updatedby,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(sqpd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(sqpd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "        fun_getRoleByID(sqpd.updateByRoleId) updatedbyRole  \n" +
                "    FROM		supplier_quote_parts_det sqpd  \n" +
                "	LEFT JOIN 	supplier_quote_mst sqm ON sqpd.supplierQuoteMstID = sqm.id AND sqm.deletedAt IS NULL  \n" +
                "	LEFT JOIN 	component c ON sqpd.partID = c.id AND c.deletedAt IS NULL  \n" +
                "	LEFT JOIN	component sc ON sqpd.supplierPartID = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "	WHERE   sqpd.supplierQuoteMstID = \",pSupplierQuoteMstID,\"  \n" +
                "	AND 	sqpd.deletedAt IS NULL  \n" +
                "    \");  \n" +
                "  \n" +
                "  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    /* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuotePartList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuotePartList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 02-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierQuote`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuote`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pIsSummary TINYINT,  \n" +
                "	IN pSupplierIds VARCHAR(16000),  \n" +
                "	IN pQuoteStatus VARCHAR(1000),  \n" +
                "	IN pSearchType VARCHAR(5),  \n" +
                "	IN pAdvanceSearchSQ VARCHAR(100),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN pPartIds VARCHAR(16000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_MfgNameFormat VARCHAR(100);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO v_MfgNameFormat;  \n" +
                "  \n" +
                "	IF (pIsSummary = FALSE) THEN  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "				SELECT  \n" +
                "					s.id,  \n" +
                "					spd.id AS supplierQuotePartDetID,  \n" +
                "					fun_GetFormattedMfgCode(cm.mfgCode, cm.mfgName, \",v_MfgNameFormat,\") mfgName,  \n" +
                "					cm.mfgCode,  \n" +
                "					s.supplierID,  \n" +
                "					spd.partID,  \n" +
                "                    c.custAssyPN,  \n" +
                "					c.mfgPN AS mfgPN,  \n" +
                "					c.mfgcodeID,  \n" +
                "					sc.mfgPN AS supplierPN,  \n" +
                "					spd.supplierPartID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "					IF(spd.isActive = 0, 'Inactive', 'Active') AS isActiveConvertedValueDetail,  \n" +
                "					spd.isActive,  \n" +
                "					spd.scanLabel,  \n" +
                "                    IF(s.quoteStatus = 'P',true, false) AS isDisabledDelete,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricing,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledCopySupplierQuote,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricingHistory,  \n" +
                "                    IF(spd.id IS NULL, false, true) AS isRequirementReference,  \n" +
                "					c.isCustom,  \n" +
                "					sc.isCustom AS isCustomSupplier,  \n" +
                "					rhc.rohsIcon,  \n" +
                "					rhc.name rohsName,  \n" +
                "					rhsc.rohsIcon supplierRohsIcon,  \n" +
                "					rhsc.name supplierRohsName,  \n" +
                "					fun_getPartAttibutesBySupplierQuoteDetailID(spd.id) AS attributesList,  \n" +
                "					fun_getPartPricingCountBySupplierQuoteDetailID(spd.id) AS pricingCount,  \n" +
                "					fun_getUserNameByID(spd.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(spd.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(spd.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(spd.createByRoleId) createdByRole  \n" +
                "				FROM  supplier_quote_parts_det spd  \n" +
                "				LEFT JOIN supplier_quote_mst s ON spd.supplierQuoteMstID = s.id AND spd.isDeleted = 0  \n" +
                "				LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN rfq_rohsmst rhc ON c.id = rhc.id AND rhc.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND c.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "				LEFT JOIN rfq_rohsmst rhsc ON sc.id = rhsc.id AND rhsc.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst cm ON cm.id = c.mfgcodeID  AND cm.isDeleted = 0  \n" +
                "				WHERE s.isDeleted = 0 \");  \n" +
                "	 ELSE  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "			SELECT 	s.id,  \n" +
                "					s.supplierID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "                    IF(s.quoteStatus = 'P', true, false) AS isDisabledDelete,  \n" +
                "					fun_getAddressbyID(s.shippingAddressID) shipTo,  \n" +
                "					fun_getAddressbyID(s.billingAddressID) billTo,  \n" +
                "                    (SELECT COUNT(0) FROM supplier_quote_parts_det WHERE isDeleted = 0 AND supplierQuoteMstID = s.id) AS noOfSupplierPartLine,  \n" +
                "					fun_getUserNameByID(s.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(s.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(s.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(s.createByRoleId) createdByRole  \n" +
                "			FROM   supplier_quote_mst s  \n" +
                "			LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "			WHERE  s.isDeleted = 0  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSupplierIds IS NOT NULL OR pSupplierIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND supplierID in (\"',pSupplierIds,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pQuoteStatus IS NOT NULL OR pQuoteStatus != '') THEn  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND quoteStatus in (\"',pQuoteStatus,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pAdvanceSearchSQ IS NOT NULL OR pAdvanceSearchSQ != '') THEN  \n" +
                "		IF(pSearchType = 'E') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber = \"', pAdvanceSearchSQ , '\" ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber LIKE \"%', pAdvanceSearchSQ ,'%\" ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''' and quoteDate <= ''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate <= ''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPartIds IS NOT NULL OR pPartIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( supplierPartID in (\"',pPartIds,'\") OR partID in (\"',pPartIds,'\") )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuote,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuote,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "   PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 02-12-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5570,'2.00','V1','Bug 39133: Supplier Quote list : Attributes are not visible in grid of listing page, Copy Part# icon is missing for custom parts - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5570:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021 *********************************** */
                "drop view if exists vu_umid_creation_pending;  \n" +
                "CREATE VIEW `vu_umid_creation_pending` AS  \n" +
                "select `p`.`id` AS `packingSlipID`,  \n" +
                "		`p`.`packingSlipNumber` AS `packingSlipNumber`,  \n" +
                "        `p`.`isNonUMIDStock` AS `isPackingSlipNonUMIDStock`,  \n" +
                "        `psd`.`id` AS `packingSlipDetID`,  \n" +
                "		`psd`.`packingSlipSerialNumber` AS `packingSlipSerialNumber`,  \n" +
                "		`psd`.`packagingID` AS `packagingID`,  \n" +
                "		`psd`.`binID` AS `BinID`,  \n" +
                "		`psd`.`warehouseID` AS `warehouseID`,  \n" +
                "		`psd`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "		`psd`.`partID` AS `PartId`,  \n" +
                "		`psd`.`nickname` AS `nickname`,  \n" +
                "		`psd`.`receivedQty` AS `InQty`,  \n" +
                "		`psd`.`umidCreatedQty` AS `UMIDCreatedQty`,  \n" +
                "		`psd`.`rmaCreatedQty` AS `returnQty`,  \n" +
                "        ifnull(`psd`.`receivedQty`,0) - ifnull(`psd`.`umidCreatedQty`,0) - ifnull(`psd`.`rmaCreatedQty`,0) AS `BalanceQty`,  \n" +
                "		`psd`.`receivedStatus` AS `receivedStatus`,  \n" +
                "		`psd`.`isNonUMIDStock` AS `isNonUMIDStock`  \n" +
                "   from `packing_slip_material_receive` `p`  \n" +
                "   join `packing_slip_material_receive_det` `psd` ON `p`.`id` = `psd`.`refPackingSlipMaterialRecID`  \n" +
                "  where `p`.`receiptType` = 'P'  \n" +
                "    and `p`.`isDeleted` = 0  \n" +
                "	/*and `psd`.`umidCreated` = 0*/  \n" +
                "    and `psd`.`binID` is not null  \n" +
                "	and `psd`.`isDeleted` = 0  \n" +
                "    and `psd`.`isNonUMIDStock` = 0;  \n" +
                "drop procedure if exists `Sproc_RetrivePackingSlipMaterialReceiveDetStock`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveDetStock`(  \n" +
                "	IN pRMADetailLineId INT,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pPackingSlipDetailId INT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pPackagingId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "			SELECT 	MAX(pds.id) stockId,  \n" +
                "					'PU' AS `type`,  \n" +
                "					'Pending UMID' AS `typeValue`,  \n" +
                "					NULL umidId,  \n" +
                "					NULL umid,  \n" +
                "					vu.PartId partId,  \n" +
                "					vu.packagingID packagingId,  \n" +
                "					NULL receiveMaterialType,  \n" +
                "					vu.inQty receivedQty,  \n" +
                "                    vu.balanceQty availableQty,  \n" +
                "					IFNULL(pds.qty,0) shipmentQty,  \n" +
                "					vu.BinID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(vu.BinID) parentWarehouseName,  \n" +
                "					0 availableQtyAtRMA,  \n" +
                "					0 availableUnitAtRMA,  \n" +
                "					vu.receivedStatus,  \n" +
                "					vu.packingSlipSerialNumber  \n" +
                "			FROM 		vu_umid_creation_pending vu  \n" +
                "			LEFT JOIN 	packing_slip_material_receive_det_stock pds ON pds.refPackingSlipId = vu.packingSlipID  \n" +
                "								AND pds.packagingId = vu.packagingID  \n" +
                "								AND pds.partId = vu.PartId  \n" +
                "								AND pds.isDeleted = 0  \n" +
                "								AND pds.type = 'PU'  \n" +
                "								AND (CASE WHEN pRMADetailLineId IS NOT NULL THEN pds.refRMADetailId = pRMADetailLineId ELSE pds.refRMADetailId IS NULL END)  \n" +
                "			LEFT JOIN 	binmst b ON b.id = vu.BinID  \n" +
                "			WHERE 		vu.packingSlipID = pPackingSlipId  \n" +
                "						AND vu.packagingID = pPackagingId  \n" +
                "						AND vu.partID = pPartId  \n" +
                "                        AND b.isDeleted = 0  \n" +
                "						AND (CASE WHEN pPackingSlipDetailId IS NOT NULL THEN vu.packingSlipDetID = pPackingSlipDetailId ELSE 1 = 1 END)  \n" +
                "			GROUP BY vu.PartId, vu.packagingID, vu.inQty, vu.balanceQty, IFNULL(pds.qty,0), vu.BinID, b.name, b.WarehouseID, vu.receivedStatus, vu.packingSlipSerialNumber  \n" +
                "			having sum(vu.balanceQty) > 0 or MAX(pds.id) is not null  \n" +
                "			UNION  ALL  \n" +
                "	SELECT a.* FROM (  \n" +
                "			SELECT 		cp.id stockId,  \n" +
                "					cp.type AS `type`,  \n" +
                "					'UMID' AS `typeValue`,  \n" +
                "					c.id umidId,  \n" +
                "					c.uid umid,  \n" +
                "					c.refcompid partId,  \n" +
                "					c.packaging packagingId,  \n" +
                "					c.receiveMaterialType,  \n" +
                "					pd.receivedQty receivedQty,  \n" +
                "					c.pkgQty availableQty,  \n" +
                "					cp.qty shipmentQty,  \n" +
                "					c.binID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "					cp.availableQtyAtRMA,  \n" +
                "					cp.availableUnitAtRMA,  \n" +
                "					pd.receivedStatus,  \n" +
                "					pd.packingSlipSerialNumber  \n" +
                "			FROM 		packing_slip_material_receive_det_stock cp  \n" +
                "			INNER JOIN 	component_sid_stock c ON c.id = cp.refSidId  \n" +
                "			INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetId  \n" +
                "			INNER JOIN 	binmst b ON b.id = c.binId  \n" +
                "			WHERE 		cp.refPackingSlipDetId = pPackingSlipDetailId AND cp.refRMADetailid = pRMADetailLineId  \n" +
                "						AND cp.type = 'U'  \n" +
                "						AND cp.isDeleted = 0  \n" +
                "						AND c.isDeleted = 0  \n" +
                "						AND pd.isDeleted = 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "			GROUP BY cp.refSidId  \n" +
                "			UNION  ALL  \n" +
                "			SELECT 		NULL stockId,  \n" +
                "					'U' AS `type`,  \n" +
                "					'UMID' AS `typeValue`,  \n" +
                "					c.id umidId,  \n" +
                "					c.uid umid,  \n" +
                "					c.refcompid partId,  \n" +
                "					c.packaging packagingId,  \n" +
                "					c.receiveMaterialType,  \n" +
                "					pd.receivedQty receivedQty,  \n" +
                "					c.pkgQty availableQty,  \n" +
                "					0 shipmentQty,  \n" +
                "					c.binID binId,  \n" +
                "					b.name binName,  \n" +
                "					b.WarehouseID,  \n" +
                "					fun_getWarehouseNameByID(b.WarehouseID) warehouseName,  \n" +
                "					fun_getDepartmentNameByBinID(b.id) parentWarehouseName,  \n" +
                "					c.pkgQty availableQtyAtRMA,  \n" +
                "					c.pkgUnit availableUnitAtRMA,  \n" +
                "					pd.receivedStatus,  \n" +
                "					pd.packingSlipSerialNumber  \n" +
                "			FROM 		component_sid_stock_packing_detail cp  \n" +
                "			INNER JOIN 	component_sid_stock c ON c.id = cp.refComponentSidStockID  \n" +
                "			INNER JOIN 	packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetailID  \n" +
                "			INNER JOIN 	binmst b ON b.id = c.binID  \n" +
                "			WHERE 		c.pkgQty > 0  \n" +
                "						AND cp.refPackingSlipDetailID = pPackingSlipDetailId  \n" +
                "						AND cp.isDeleted = 0  \n" +
                "						AND c.isDeleted = 0  \n" +
                "						AND pd.isDeleted = 0  \n" +
                "						AND b.isDeleted = 0  \n" +
                "			GROUP BY cp.refComponentSidStockID  \n" +
                "		) as a GROUP BY umidId;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5571,'2.00','V1','Bug 39182: Not showing any data which on RMA Stock pop-up in case of Edit record in Supplier RMA - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5571:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-11-2021 *********************************** */
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`, `createdBy`, `updatedAt`,`createByRoleId`,`updateByRoleId`)  \n" +
                "VALUES ('Add Alias Part', 1, 0, CURRENT_TIMESTAMP(), 1, CURRENT_TIMESTAMP(), 1, 1);  \n" +
                /* **************************** Add Script Version -> 11-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5572,'2.00','V1',' Sample entry - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5572:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-12-2021 *********************************** */
                "ALTER TABLE `mfgcode_standard`  \n" +
                "ADD COLUMN `cerificateNumber` VARCHAR(50) NULL AFTER `standardStatus`;  \n" +
                /* **************************** Add Script Version -> 03-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5573,'2.00','V1',' Task 39165: New Standard tab related changes - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5573:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllStandardsByMfgCodeID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllStandardsByMfgCodeID`(  \n" +
                "	IN pMfgCodeID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "    SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "    SELECT ms.id,  \n" +
                "		ms.standardID,  \n" +
                "		ms.refStandardClassId,  \n" +
                "        CASE WHEN ms.refStandardClassId IS NOT NULL THEN CONCAT(cs.fullName, ' | ', sc.className) ELSE cs.fullName END standardName,  \n" +
                "        ms.standardStatus,  \n" +
                "        CASE WHEN ms.standardStatus='CO' THEN 'Compliant' WHEN ms.standardStatus='CR' THEN 'Certified' ELSE 'N/A' END standardStatusName,  \n" +
                "        ms.cerificateNumber,  \n" +
                "        ms.lastApprovalDate,  \n" +
                "        ms.expDate,  \n" +
                "        fun_getUserNameByID(ms.createdBy) createdBy,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(ms.createdAt, vTimeZone, vDateTimeDisplayFormat) createdAt,  \n" +
                "        fun_getUserNameByID(ms.updatedBy) updatedBy,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(ms.updatedAt, vTimeZone, vDateTimeDisplayFormat) updatedAt,  \n" +
                "        fun_getRoleByID(ms.createByRoleId) createByRoleId,  \n" +
                "        fun_getRoleByID(ms.updateByRoleId) updateByRoleId  \n" +
                "	FROM mfgcode_standard ms  \n" +
                "		LEFT JOIN certificate_standards cs ON cs.certificateStandardID = ms.standardID  \n" +
                "		LEFT JOIN standard_class sc ON sc.classID = ms.refStandardClassId  \n" +
                "    WHERE ms.isDeleted=0 AND ms.refMfgCodeID = pMfgCodeID;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5574,'2.00','V1',' Task 39165: New Standard tab related changes - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5574:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-12-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetFilterLaborCostSearchList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetFilterLaborCostSearchList`(  \n" +
                "	IN searchString VARCHAR(1000),  \n" +
                "	IN plborID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pWhereClause VARCHAR(16383);  \n" +
                "         SET pWhereClause = '1=1' ;  \n" +
                "  \n" +
                "	SET @Sproc_GetFilterLaborCostSearchList = CONCAT(\"  \n" +
                "		SELECT lct.templateName,lct.id,case when lct.pricetype=1 then 'QPA Price Matrix Template' else 'Line Overhead Price' end priceTypeName,  \n" +
                "CONCAT('(',case when lct.pricetype=1 then 'QPA Price Matrix Template' else 'Line Overhead Price' end,')',' ',lct.templateName) templateCostName  \n" +
                "FROM labor_cost_template lct WHERE lct.isdeleted=0  \n" +
                "	\");  \n" +
                "	IF(plborID IS NOT NULL)THEN  \n" +
                "	SET @Sproc_GetFilterLaborCostSearchList=CONCAT(@Sproc_GetFilterLaborCostSearchList,' and id=',plborID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF(searchString IS NOT NULL AND searchString != '')THEN  \n" +
                "		SET pWhereClause = CONCAT('( templateCostName like ''%', searchString, '%'')') ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @Sproc_GetFilterLaborCostSearchList,\" ) c  where \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-12-2021 *********************************** */
                "UPDATE page_detail SET pageRoute='app.laborcosttemplate.managelaborcosttemplate' WHERE pagename='Manage Labor Cost Template';  \n" +
                /* **************************** New Script -> 03-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5575,'2.00','V1',' Alter procedure Sproc_GetFilterLaborCostSearchList-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5575:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP VIEW IF EXISTS vu_salesorder_shipped_report;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyCode` AS `Company Code`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`kitNumber` AS `kitNumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`isLegacyPOText` AS `IsLegacyPOText`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`isRmaPOText` AS `isRmaPOText`,  \n" +
                "        `a`.`specialNote` AS `AssySpecialNote`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
                "                (SELECT  \n" +
                "                        1  \n" +
                "                    FROM  \n" +
                "                        `workorder_salesorder_details` `x`  \n" +
                "                    WHERE  \n" +
                "                        ((`x`.`salesOrderDetailID` = `a`.`id`)  \n" +
                "                            AND (`x`.`isDeleted` = 0))  \n" +
                "                    LIMIT 1) AS `wosalesOrderDetail`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `cu`.`mfgCode` AS `companyCode`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitNumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                (SELECT  \n" +
                "                        MIN(`ssm`.`shippingDate`)  \n" +
                "                    FROM  \n" +
                "                        `salesshippingmst` `ssm`  \n" +
                "                    WHERE  \n" +
                "                        ((`ssm`.`sDetID` = `a`.`id`)  \n" +
                "                            AND (`ssm`.`isDeleted` = 0))) AS `shippingDate`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                (SELECT  \n" +
                "                        IFNULL(SUM(`shippedassembly`.`shippedqty`), 0)  \n" +
                "                    FROM  \n" +
                "                        `shippedassembly`  \n" +
                "                    WHERE  \n" +
                "                        ((`shippedassembly`.`partID` = `a`.`partID`)  \n" +
                "                            AND (`shippedassembly`.`isDeleted` = 0)  \n" +
                "                            AND `shippedassembly`.`shippingId` IN (SELECT  \n" +
                "                                `salesshippingmst`.`shippingID`  \n" +
                "                            FROM  \n" +
                "                                `salesshippingmst`  \n" +
                "                            WHERE  \n" +
                "                                ((`salesshippingmst`.`sDetID` = `a`.`id`)  \n" +
                "                                    AND (IFNULL(`salesshippingmst`.`isDeleted`, 0) = 0))))) AS `ShippedQty`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                FUN_GETINTTOTEXT(`sm`.`isLegacyPO`) AS `isLegacyPOText`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                FUN_GETINTTOTEXT(`sm`.`isRmaPO`) AS `isRmaPOText`,  \n" +
                "                `co`.`specialNote` AS `specialNote`  \n" +
                "        FROM  \n" +
                "            ((((((`salesorderdet` `a`  \n" +
                "        JOIN `salesordermst` `sm` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (IFNULL(`sm`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (IFNULL(`cu`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON (((`a`.`partID` = `co`.`id`)  \n" +
                "            AND (IFNULL(`co`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (IFNULL(`roh`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (IFNULL(`cc`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (IFNULL(`gc`.`isDeleted`, 0) = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`a`.`isDeleted` = 0)  \n" +
                "                AND (`a`.`partCategory` = 3))) `a`;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5576,'2.00','V1','vu_salesorder_shipped_report - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5576:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP FUNCTION IF EXISTS fun_getPOTypeByID;  \n" +
                "CREATE FUNCTION `fun_getPOTypeByID`(  \n" +
                "pSOId INT  \n" +
                ") RETURNS varchar(200) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn VARCHAR(200);  \n" +
                "	SELECT (CASE WHEN isRmaPo THEN 'RMA'  \n" +
                "			WHEN  isBlanketPO THEN 'Blanket'  \n" +
                "            WHEN isLegacyPO THEN 'LEGACY'  \n" +
                "            ELSE '' END) INTO vReturn  \n" +
                "	FROM salesordermst  \n" +
                "    WHERE isDeleted = 0  \n" +
                "    AND id = pSOId;  \n" +
                "RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5577,'2.00','V1','fun_getPOTypeByID - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5577:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssemblyPOStockDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyPOStockDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartID INT ,  \n" +
                "    IN pIsShowAllPO tinyint)  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE paymentCMJoin VARCHAR(1000);  \n" +
                "    DECLARE whereClause1 VARCHAR(500);  \n" +
                "	SET whereClause1 = \"where 1=1\";  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "    IF pPartID IS NOT NULL THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND PartID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\", pPartID, \")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF !pIsShowAllPO THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND a.status in ('In Progress')\");  \n" +
                "	ELSE  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND a.status in ('Completed','In Progress')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_GetAssemblyPOStockDetails = CONCAT(\"  \n" +
                "	select a.salesOrderDetailId,  \n" +
                "		a.soID,  \n" +
                "		a.poNumber,  \n" +
                "		a.poDate,  \n" +
                "		a.soNumber,  \n" +
                "		a.PartID,  \n" +
                "		(CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END) AS poQty,  \n" +
                "		a.shippedQty,  a.status , a.lineID , a.custPOLineNumber ,  \n" +
                "		(CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN (a.poQty - a.shippedQty) ELSE ((a.qpa * a.poQty) - a.shippedQty) END) AS backOrderQty,  \n" +
                "		(CASE WHEN (a.shippedQty - (CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END)) > 0 THEN  \n" +
                "					(a.shippedQty - (CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END))  \n" +
                "			ELSE 0 END) AS excessShipQty,  \n" +
                "		a.buildQty,  \n" +
                "        a.woCount ,a.isLegacyPO,a.IsLegacyPOText ,  \n" +
                "        a.POType  \n" +
                "        from (SELECT  \n" +
                "				vu_ssr.`SalesOrderDetailId` salesOrderDetailId,  \n" +
                "				vu_ssr.`Sales Order ID` soID,  \n" +
                "				vu_ssr.`Po Number` poNumber,  \n" +
                "				vu_ssr.`Po Date` poDate,  \n" +
                "				vu_ssr.`Sales Order` soNumber,  \n" +
                "				vu_ssr.`PO Qty` poQty,  \n" +
                "				vu_ssr.`Shipped Qty` shippedQty,  \n" +
                "				vu_ssr.`Balanced Due Qty` backOrderQty,  \n" +
                "				vu_ssr.`PartID` PartID,  \n" +
                "				ka.perAssyBuildQty AS    qpa,  \n" +
                "                vu_ssr.`Status` status,  \n" +
                "				vu_ssr.`lineID` lineID,  \n" +
                "                vu_ssr.`custPOLineNumber` custPOLineNumber ,  \n" +
                "				IFNULL((SELECT IFNULL(SUM(wsd.poQty),0)  \n" +
                "                FROM workorder_salesorder_details wsd  \n" +
                "					WHERE wsd.salesOrderDetailID=vu_ssr.salesOrderDetailId AND wsd.isdeleted=0  \n" +
                "					AND wsd.parentPartID = \", pPartID,\"),0) buildQty ,  \n" +
                "                 (select count(vwss.woNumber) from  vu_workorder_summary_stk vwss  \n" +
                "                JOIN vu_workorder_sopoNumber_details vwsd ON vwsd.woID =  ifnull(vwss.woID,vwss.woNumber) and vwsd.partID = vwss.partID  \n" +
                "                LEFT JOIN workorder wo on ifnull(wo.terminateWOID,wo.woID) = vwss.woID  \n" +
                "                where FIND_IN_SET (vu_ssr.`Po Number`,vwsd.poNumber) AND   FIND_IN_SET (vu_ssr.`Sales Order`,vwsd.salesOrderNumber)  \n" +
                "                and vwss.partID = \",pPartID , \"  \n" +
                "                and (CASE WHEN vwss.woid IS NULL THEN ((vwss.readytoShipQty + vwss.shippedQty + vwss.stockAdjustmentQty) - (vwss.shippedQty)) ELSE ((vwss.buildQty) - (vwss.scrapQty + vwss.shippedQty + vwss.readytoShipQty)) END) >  0)   woCount  ,  \n" +
                "				vu_ssr.isLegacyPO,vu_ssr.IsLegacyPOText  ,  \n" +
                "                fun_getPOTypeByID(vu_ssr.`Sales Order ID`) POType  \n" +
                "	FROM vu_salesorder_shipped_report vu_ssr LEFT JOIN kit_allocation_assy_detail ka ON ka.refSalesorderdetid=vu_ssr.`SalesOrderDetailId`  \n" +
                "	AND ka.partId=\", pPartID,\" AND ka.isDeleted=0 ) a \", whereClause1);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY c.salesOrderDetailId ASC\");  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyPOStockDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	-- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyPOStockDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "   -- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5578,'2.00','V1','Sproc_GetAssemblyPOStockDetails - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5578:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssyCompListForCustomerPackingSlipMISC;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyCompListForCustomerPackingSlipMISC`(  \n" +
                "	IN pCustomerID INT,  \n" +
                "	IN pSearch VARCHAR(300),  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pisFromSO TINYINT  ,  \n" +
                "    IN pSalesOrderID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	/*NOTE:	pSalesOrderID is used for  RMA SO  for fetching part of original Q2C SO      */  \n" +
                "	DECLARE v_respOfGetAcquiredMFRListFn INT;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "    select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Customers;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Customers (  \n" +
                "		customerID INT  \n" +
                "    );  \n" +
                "    /* If Selected customer's isComapny true then make it null as in case of company we have to fetch all customer's assembly*/  \n" +
                "    IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany = 1) > 0 THEN  \n" +
                "		SET pCustomerID = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* IF customer selected and is comapny is not true then we have select customer based on acquire, and supplier mapping*/  \n" +
                "    IF 	pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID) INTO v_respOfGetAcquiredMFRListFn;  \n" +
                "  \n" +
                "        INSERT INTO temp_Customers  \n" +
                "		SELECT buyTo AS customerID  \n" +
                "		FROM acquireCustomers;  \n" +
                "  \n" +
                "        INSERT INTO temp_Customers  \n" +
                "        SELECT smm.refMfgCodeMstID AS customerID  \n" +
                "		FROM supplier_mapping_mst smm  \n" +
                "		WHERE smm.supplierID = pCustomerID  \n" +
                "        AND smm.isDeleted = 0  \n" +
                "        AND smm.isCustMapping=0;  \n" +
                "	END IF;  \n" +
                "	IF pSalesOrderID IS NULL THEN  \n" +
                "			/* Select assembly, sales kit, custom part and cpn part of selected customer and all the off the self MFR parts*/  \n" +
                "			SELECT *  \n" +
                "			FROM (  \n" +
                "				SELECT 	co.id,            	co.mfgPN,				co.PIDCode,			co.mfgPNDescription AS description,  \n" +
                "						co.rev,				co.nickName,			co.partType,		u.unitName,				u.id unitID,  \n" +
                "						ro.rohsIcon,		ro.name AS rohsName,	CONCAT('(', mfg.mfgcode, ')', ' ', co.mfgPN) combinemfgPN,  \n" +
                "						co.mfgcodeID,		 cst.co_standards as standards,  \n" +
                "                        fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgCodeFormat) mfgName,  \n" +
                "						mfg.mfgType,		co.category,            co.iscustom,		co.isCPN,  \n" +
                "						cst.componentStandardList,					co.rfqOnly,			co.partStatus  \n" +
                "				FROM 	component co  \n" +
                "				INNER JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id  AND mfg.isDeleted = 0  \n" +
                "				INNER JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "				INNER JOIN uoms u ON co.uom = u.id AND u.isDeleted = 0  \n" +
                "				LEFT JOIN (  \n" +
                "					SELECT 	csd.componentID,  \n" +
                "							GROUP_CONCAT(cs.fullName) componentStandardList,  \n" +
                "							GROUP_CONCAT(CASE WHEN csd.classID IS NULL  \n" +
                "													THEN cs.fullName  \n" +
                "												ELSE  \n" +
                "													(SELECT GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))  \n" +
                "													FROM standard_class s  \n" +
                "													WHERE s.classID = csd.classID AND isDeleted = 0)  \n" +
                "										END  \n" +
                "										ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC  \n" +
                "										SEPARATOR ', ') co_standards  \n" +
                "					FROM component_standard_details csd  \n" +
                "					INNER JOIN certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID AND cs.isDeleted = 0  \n" +
                "					WHERE csd.isDeleted = 0  \n" +
                "					GROUP BY csd.componentID  \n" +
                "				) cst ON co.id = cst.componentID  \n" +
                "				WHERE co.id > 0  \n" +
                "				AND  co.mfgType = 'MFG'  \n" +
                "				AND (CASE WHEN (co.iscustom = 1 AND pCustomerID IS NOT NULL)  \n" +
                "								THEN (EXISTS (SELECT 1 FROM temp_Customers ta WHERE ta.customerID = co.mfgCodeID))  \n" +
                "							  ELSE 1 = 1  END)  \n" +
                "				AND co.id = IFNULL(pPartID, co.id)  \n" +
                "				AND co.partstatus!=(CASE WHEN pisFromSO=1 THEN -3 ELSE 0 END)  \n" +
                "				AND co.isDeleted = 0  \n" +
                "				AND co.isGoodPart = 1  \n" +
                "				AND co.partType != 4  \n" +
                "			) AS co  \n" +
                "			WHERE (CASE WHEN pSearch IS NOT NULL  \n" +
                "						THEN (co.PIDCode LIKE CONCAT('%',pSearch,'%') OR co.combinemfgPN LIKE CONCAT('%',pSearch,'%'))  \n" +
                "						ELSE 1 = 1  \n" +
                "				END);  \n" +
                "    ELSE  \n" +
                "			/* Select assembly, sales kit, custom part and cpn part of selected customer and all the off the self MFR parts*/  \n" +
                "			SELECT *  \n" +
                "			FROM (  \n" +
                "				SELECT 	co.id,            	co.mfgPN,				co.PIDCode,			co.mfgPNDescription AS description,  \n" +
                "						co.rev,				co.nickName,			co.partType,		u.unitName,				u.id unitID,  \n" +
                "						ro.rohsIcon,		ro.name AS rohsName,	CONCAT('(', mfg.mfgcode, ')', ' ', co.mfgPN) combinemfgPN,  \n" +
                "						co.mfgcodeID,		 cst.co_standards as standards,  \n" +
                "                        fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgCodeFormat) mfgName,  \n" +
                "						mfg.mfgType,		co.category,            co.iscustom,		co.isCPN,  \n" +
                "						cst.componentStandardList,					co.rfqOnly,			co.partStatus  ,sod.custPOLineNumber  \n" +
                "				FROM 	component co  \n" +
                "				INNER JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id  AND mfg.isDeleted = 0  \n" +
                "				INNER JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "				INNER JOIN uoms u ON co.uom = u.id AND u.isDeleted = 0  \n" +
                "				LEFT JOIN (  \n" +
                "					SELECT 	csd.componentID,  \n" +
                "							GROUP_CONCAT(cs.fullName) componentStandardList,  \n" +
                "							GROUP_CONCAT(CASE WHEN csd.classID IS NULL  \n" +
                "													THEN cs.fullName  \n" +
                "												ELSE  \n" +
                "													(SELECT GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))  \n" +
                "													FROM standard_class s  \n" +
                "													WHERE s.classID = csd.classID AND isDeleted = 0)  \n" +
                "										END  \n" +
                "										ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC  \n" +
                "										SEPARATOR ', ') co_standards  \n" +
                "					FROM component_standard_details csd  \n" +
                "					INNER JOIN certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID AND cs.isDeleted = 0  \n" +
                "					WHERE csd.isDeleted = 0  \n" +
                "					GROUP BY csd.componentID  \n" +
                "				) cst ON co.id = cst.componentID  \n" +
                "				JOIN salesorderdet sod ON sod.partID = co.id and sod.isDeleted = 0  \n" +
                "				WHERE co.mfgType = 'MFG'  \n" +
                "				AND co.id = IFNULL(pPartID, co.id)  \n" +
                "				AND co.partstatus!= -3  \n" +
                "				AND co.isDeleted = 0  \n" +
                "                and sod.refSalesOrderId = pSalesOrderID  \n" +
                "			) AS co  ;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5579,'2.00','V1','Sproc_GetAssyCompListForCustomerPackingSlipMISC - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5579:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetail`(  \n" +
                "	IN invoiceID INT      ,  \n" +
                "    IN pTransType VARCHAR(5)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	                 SELECT inv.id,   inv.transType,  \n" +
                "						inv.packingSlipNumber,inv.packingSlipDate,  \n" +
                "                        -- (SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = inv.id AND packing.isDeleted = 0) packingSlipID,  \n" +
                "                        cps.id packingSlipID,  \n" +
                "						inv.refSalesOrderId  ,  \n" +
                "                        inv.systemID,  \n" +
                "						fun_getMfgCodeAndNameByID(inv.customerID) customerName,  \n" +
                "                        fun_getMfgNameByID(inv.customerID) customerNameOnly,  \n" +
                "                        inv.customerID,inv.poNumber,inv.poDate, inv.poRevision,  \n" +
                "						inv.soNumber,inv.soDate,  \n" +
                "                        inv.packingSlipType,inv.`status`,  \n" +
                "                        fun_getGenericCategoryCodeNameByID(inv.shippingMethodId) shippingMethod,inv.shippingMethodId,  \n" +
                "						inv.shipToId,inv.contactPersonId,inv.intermediateShipmentId, inv.billToId,  \n" +
                "						inv.invoiceNumber,inv.invoiceDate,  \n" +
                "                        inv.headerComment  ,   inv.packingSlipComment,  \n" +
                "						inv.freeOnBoardId,inv.salesCommissionTo,  \n" +
                "						CONCAT('(',fun_getEmployeeInitialNameByEmpID(inv.salesCommissionTo),') ',fun_getEmployeeNameByEmpID(inv.salesCommissionTo) ) salesCommName,  \n" +
                "						fun_getFOBById(inv.freeOnBoardId) FOBName,  \n" +
                "						fun_getGenericCategoryNameByID(inv.termsId) terms, inv.termsId,  \n" +
                "                        inv.intermediateShipmentId ,  \n" +
                "						inv.billingAddress,  \n" +
                "						inv.shippingAddress,  \n" +
                "						inv.intermediateAddress,  \n" +
                "                        inv.isLocked,  \n" +
                "                        inv.subStatus,  \n" +
                "                        inv.paymentStatus,  \n" +
                "                        inv.packingSlipType,  \n" +
                "                        fun_getUserNameByID(inv.lockedBy) lockedBy ,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,vTimeZone,vDateTimeDisplayFormat) lockedAt,  \n" +
                "                        inv.creditMemoNumber, inv.creditMemoDate, inv.isMarkForRefund , inv.agreedRefundAmt ,  \n" +
                "						inv.refDebitMemoNumber, inv.refDebitMemoDate,   inv.rmaNumber,  \n" +
                "                        (CASE WHEN inv.packingSlipType = 1 THEN 'MISC' WHEN inv.packingSlipType = 2 THEN 'PO/SO' END) packingSlipTypeText,  \n" +
                "                        (CASE WHEN inv.packingSlipType = 1 OR inv.packingSlipType = 2  THEN 'Invoice' WHEN inv.packingSlipType = 3 THEN 'MISC Invoice' ELSE null END) invoiceTypeText,  \n" +
                "                        inv.isZeroValue,  \n" +
                "                        inv.revision,  \n" +
                "                        cps.subStatus packingSlipSubStatus,  \n" +
                "                        (CASE WHEN cps.subStatus = 5 AND (inv.subStatus = 4 OR inv.subStatus = 5) THEN CONCAT( fun_getCustomerInvoiceSubStatusName(cps.subStatus, 'P'),' - ', fun_getCustomerInvoiceSubStatusName(inv.subStatus, 'I'))  \n" +
                "						ELSE '' END) materialStatus ,  \n" +
                "                        inv.isAlreadyPublished ,  \n" +
                "			fun_getMfgCodeByID(inv.customerID) customerCodeOnly,  \n" +
                "			cps.revision packingSlipVersion,  \n" +
                "			(CASE WHEN inv.transType = 'I' THEN get_totalCustomerInvoiceReceivedAmountById(inv.id)  \n" +
                "					WHEN inv.transType='C' THEN fun_getTotalCustomerCreditMemoAppliedAmountById(inv.id)  \n" +
                "			ELSE NULL END) receivedAmount,  \n" +
                "			(SELECT psip.id FROM packingslip_invoice_payment psip WHERE psip.refCustCreditMemoID=invoiceID AND psip.refPaymentMode = 'CA'  \n" +
                "								AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0) custPaymentMstID,  \n" +
                "			(CASE WHEN inv.transType = 'C' THEN  \n" +
                "					(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = inv.id  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0)  \n" +
                "				ELSE NULL END) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "			(CASE WHEN inv.transType = 'I' THEN  fun_getPaymentStatusByCustPackingSlipSubStatus(inv.subStatus,inv.transType,inv.paymentStatus,'CODE')  \n" +
                "				END) AS paymentStatusCode,  \n" +
                "			inv.refundStatus,  \n" +
                "			(CASE WHEN inv.transType = 'C' THEN fun_getCustCreditMemoRefundStatusTextByValue(inv.refundStatus)  \n" +
                "				ELSE NULL END) AS creditMemoRefundStatusText ,  \n" +
                "				sm.isRmaPO,  \n" +
                "				sm.isLegacyPO,  \n" +
                "			fun_getUserNameByID(inv.updatedBy) updatedByInitial,  \n" +
                "			fun_getEmployeeIDByUserID(inv.updatedBy) updatedByEmp,  \n" +
                "			fun_getUserNameByID(inv.createdBy) createdByInitial,  \n" +
                "			fun_getEmployeeIDByUserID(inv.createdBy) createdByEmp,  \n" +
                "			inv.isAskForVersionConfirmation,  \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,  \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt  ,  \n" +
                "                        fun_getPOTypeByID(inv.refSalesOrderId) poType  \n" +
                "		FROM customer_packingslip inv  \n" +
                "                 LEFT JOIN customer_packingslip cps ON cps.refCustInvoiceID = inv.id AND cps.isDeleted = 0  AND cps.transType = 'P'  \n" +
                "                 LEFT JOIN salesordermst sm ON sm.id=cps.refSalesOrderId AND sm.isdeleted=0  \n" +
                "                 WHERE inv.id = invoiceID  \n" +
                "                 AND inv.transType = pTransType  \n" +
                "                 AND inv.isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "				 SELECT cpd.refSalesorderDetid,  \n" +
                "					cpd.id,  \n" +
                "                    cpd.refCustPackingSlipID,  \n" +
                "					cpd.custPOLineID,  \n" +
                "					cpd.reflineID AS packingSlipSerialNumber,  \n" +
                "                    cpd.lineID,  \n" +
                "                    co.PIDCode,  \n" +
                "                    co.mfgcodeID,  \n" +
                "                    ss.releaseNumber,  \n" +
                "                    fun_getMfgCodeAndNameByID(co.mfgcodeID) mfgName,  \n" +
                "					co.mfgpn,  \n" +
                "                    fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "					fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "                    cpd.partId,  \n" +
                "                    cpd.refChargesTypeID,  \n" +
                "					#(select c.partType from component c where c.isDeleted = 0 and c.id = partId) partType,  \n" +
                "					cpd.shipQty,cpd.unitPrice,cpd.extendedPrice,  \n" +
                "                    fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,  \n" +
                "                    #(IFNULL(shipQty,0)*IFNULL(unitPrice,0)) extPrice,  \n" +
                "                    CASE WHEN co.partType = 4 THEN FALSE ELSE TRUE END materialType,  \n" +
                "                    othercharges AS lineOtherCharges,  \n" +
                "                    (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,  \n" +
                "					cpd.shippingNotes,  \n" +
                "                    cpd.internalComment,  \n" +
                "                    cpd.assyDescription,  \n" +
                "					fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "					fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "					fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(cpd.updateByRoleId) updatedbyRole ,  \n" +
                "                    fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(cpd.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt ,  \n" +
                "                    (SELECT sod.quoteNumber FROM  salesorderdet sod WHERE sod.id = refSalesorderDetid AND sod.isDeleted = 0) quoteNumber,  \n" +
                "                    co.partType,  \n" +
                "                    vu.packingLineID,  \n" +
                "                    (CASE WHEN vu.packingDetID IS NOT NULL THEN 1 ELSE 0 END) isFromPackingSlip,  \n" +
                "                    co.isCustom, co.isCPN , co.nickName ,  \n" +
                "                    (SELECT GROUP_CONCAT(cert.fullName)FROM  certificate_standards cert  \n" +
                "						WHERE cert.certificateStandardID IN (SELECT compstd.certificateStandardID  \n" +
                "							FROM component_standard_details compstd WHERE compstd.componentID = co.id AND compstd.isDeleted= 0) )componentStandardList,  \n" +
                "					quoteFrom,refAssyQtyTurnTimeID,quoteNumber,refRFQGroupID,refRFQQtyTurnTimeID,  \n" +
                "                    (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,  \n" +
                "                    IFNULL(assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
                "				JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
                "                    WHERE rfqAssyTurn.id = cpd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
                "                    cpd.isZeroValue,  \n" +
                "                    fun_getIntToText(cpd.isZeroValue) isZeroValueConverted  \n" +
                "				 FROM customer_packingslip_det cpd  \n" +
                "                 LEFT JOIN COMPONENT co ON co.id = cpd.partId AND co.isDeleted = 0  \n" +
                "                 LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0  \n" +
                "                 LEFT JOIN vu_inv_ps_so_line_detail vu ON vu.invDetId= cpd.id AND vu.invoiceId = cpd.refCustPackingSlipId  \n" +
                "                 WHERE cpd.refCustPackingSlipID = invoiceID AND cpd.isdeleted=0  \n" +
                "                 ORDER BY cpd.lineID ASC;  \n" +
                "  \n" +
                "                 SELECT cpOther.id,  \n" +
                "						cpOther.refCustomerPackingSlipDetID,  \n" +
                "						cpOther.partID,  \n" +
                "						fun_getMFGPNByID(cpOther.partID) mfgPN,  \n" +
                "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,  \n" +
                "                        cpOther.qty,  \n" +
                "                        cpOther.price,  \n" +
                "                        cpOther.lineComment,  \n" +
                "                         cpOther.lineInternalComment,  \n" +
                "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,  \n" +
                "                        cpOther.frequency ,  \n" +
                "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'  \n" +
                "								WHEN (cpOther.frequency = 2) THEN 'First'  \n" +
                "								WHEN (cpOther.frequency = 3) THEN  'Last'  \n" +
                "								ELSE ''  \n" +
                "						END) AS frequencyName,  \n" +
                "			cpOther.frequencyType,  \n" +
                "			  (CASE  	WHEN (cpOther.frequencyType = 1) THEN 'Release'  \n" +
                "								WHEN (cpOther.frequencyType = 2) THEN 'Shipment'  \n" +
                "								ELSE ''  \n" +
                "						END) AS frequencyTypeName  \n" +
                "                 FROM  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "                   customer_packingslip_otherexpense_details cpOther  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cpOther.refCustomerPackingSlipDetId AND cpd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cpOther.isdeleted=0;  \n" +
                "  \n" +
                "                  --  Tracking Number  \n" +
                "                SELECT id,trackNumber  \n" +
                "                FROM customer_packing_slip_track_number  \n" +
                "                WHERE refCustPackingSlipID = invoiceID  \n" +
                "                AND isDeleted = 0;  \n" +
                "  \n" +
                "                -- sales commission attribute  \n" +
                "                SELECT cca.id,  \n" +
                "		    cca.refCustPackingSlipDetID,  \n" +
                "                    cca.unitPrice,  \n" +
                "                    cca.commissionPercentage,  \n" +
                "                    cca.commissionValue,  \n" +
                "                    cca.quoted_commissionPercentage,  \n" +
                "                    cca.quoted_commissionValue,  \n" +
                "                    cca.poQty,  \n" +
                "                    cca.partId,  \n" +
                "                    cca.quotedQty,  \n" +
                "                    cca.type,  \n" +
                "                    cca.rfqAssyID,  \n" +
                "                    cca.commissionCalculateFrom,  \n" +
                "                    cca.salesCommissionNotes,  \n" +
                "                    cca.refComponentSalesPriceBreakID,  \n" +
                "                    cca.quoted_unitPrice  \n" +
                "				FROM customer_packingslip_commission_attribute_mstdet cca  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cca.isdeleted=0;  \n" +
                "                 -- sales commission child attribute  \n" +
                "                SELECT cca.id,  \n" +
                "		    cca.refCustPackingSlipDetID,  \n" +
                "		    cca.refcustInvoiceCommissionID,  \n" +
                "                    cca.unitPrice,  \n" +
                "                    cca.refQuoteAttributeId,  \n" +
                "                    cca.commissionPercentage,  \n" +
                "                    cca.commissionValue,  \n" +
                "                    cca.org_commissionPercentage,  \n" +
                "                    cca.org_commissionValue,  \n" +
                "                    cca.category,  \n" +
                "                    cca.partId,  \n" +
                "                    cca.refComponentSalesPriceBreakID,  \n" +
                "                    cca.org_unitPrice,  \n" +
                "                    (cca.commissionValue * cpd.shipQty) extendedCommissionValue,  \n" +
                "                    (cca.org_commissionValue * cpd.shipQty) extendedOrgCommissionValue,  \n" +
                "                    IFNULL(qd.fieldName,'Sales Commission') fieldName  \n" +
                "				FROM customer_packingslip_commission_attribute cca  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "                 LEFT JOIN quotecharges_dynamic_fields_mst qd ON cca.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cca.isdeleted=0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5580,'2.00','V1','Sproc_GetCustomerInvoiceDetail - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5580:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP VIEW IF EXISTS vu_salesorder_updatedlist_report;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`rmaNumber` AS `rmaNumber`,  \n" +
                "        `a`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "        `a`.`debitedByCustText` AS `debitedByCustText`,  \n" +
                "        `a`.`rmaOrgPONumber` AS `rmaOrgPONumber`,  \n" +
                "        `a`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "        `a`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "        `a`.`reworkReqText` AS `reworkReqText`,  \n" +
                "        `a`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "        `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "        `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                `sm`.`rmaNumber` AS `rmaNumber`,  \n" +
                "                `sm`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isDebitedByCustomer` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `debitedByCustText`,  \n" +
                "                `sm`.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "                `sm`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "                `sm`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isReworkRequired` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `reworkReqText`,  \n" +
                "                `sm`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                `sm`.`createdAt` AS `createdDate`,  \n" +
                "                `sm`.`updatedAt` AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                IFNULL(`sq`.`ShippedQty`, 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            ((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refSalesOrderID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refSalesOrderID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5581,'2.00','V1','vu_salesorder_updatedlist_report - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5581:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP VIEW IF EXISTS vu_workorder_salesorder_details;  \n" +
                "CREATE VIEW `vu_workorder_salesorder_details` AS  \n" +
                "    SELECT  \n" +
                "        `wosodet`.`woID` AS `woID`,  \n" +
                "        SUM(`wosodet`.`poQty`) AS `totalPOQty`,  \n" +
                "        GROUP_CONCAT(`wosodet`.`poQty`  \n" +
                "            SEPARATOR ',') AS `POQtyValues`,  \n" +
                "        SUM(`sodet`.`mrpQty`) AS `totalMRPQty`,  \n" +
                "        MAX(`sodet`.`isHotJob`) AS `isHotJob`,  \n" +
                "        GROUP_CONCAT(`sodet`.`mrpQty`  \n" +
                "            SEPARATOR ',') AS `MRPQtyValues`,  \n" +
                "        GROUP_CONCAT(`som`.`poNumber`  \n" +
                "            SEPARATOR ', ') AS `poNumber`,  \n" +
                "        GROUP_CONCAT(`som`.`salesOrderNumber`  \n" +
                "            SEPARATOR ', ') AS `salesOrderNumber`,  \n" +
                "        GROUP_CONCAT(`sodet`.`lineID`  \n" +
                "            SEPARATOR ',') AS `lineID`,  \n" +
                "        GROUP_CONCAT(`som`.`id`  \n" +
                "            SEPARATOR ',') AS `salesOrderMstIDs`,  \n" +
                "        GROUP_CONCAT(`sodet`.`qty`  \n" +
                "            SEPARATOR ',') AS `SOPOQtyValues`,  \n" +
                "        GROUP_CONCAT(`sodet`.`partDescription`  \n" +
                "            SEPARATOR ',') AS `partDescription`,  \n" +
                "        GROUP_CONCAT(FUN_GETPOTYPEBYID(`som`.`id`)  \n" +
                "            SEPARATOR ',') AS `soType`  \n" +
                "    FROM  \n" +
                "        ((`workorder_salesorder_details` `wosodet`  \n" +
                "        LEFT JOIN `salesorderdet` `sodet` ON (((`wosodet`.`salesOrderDetailID` = `sodet`.`id`)  \n" +
                "            AND (`sodet`.`deletedAt` IS NULL))))  \n" +
                "        LEFT JOIN `salesordermst` `som` ON (((`sodet`.`refSalesOrderID` = `som`.`id`)  \n" +
                "            AND (`som`.`deletedAt` IS NULL))))  \n" +
                "    WHERE  \n" +
                "        ((`wosodet`.`deletedAt` IS NULL)  \n" +
                "            AND (IFNULL(`wosodet`.`isDeleted`, 0) = 0))  \n" +
                "    GROUP BY `wosodet`.`woID`;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5582,'2.00','V1','vu_workorder_salesorder_details - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5582:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getCustomerSalesOrderDetail;  \n" +
                "CREATE PROCEDURE `Sproc_getCustomerSalesOrderDetail`(  \n" +
                "	IN pCustomerId INT,  \n" +
                "    IN pCurrSOId INT,  \n" +
                "    IN pSearchPO VARCHAR(100),  \n" +
                "    IN pSOId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	IF pCustomerId IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(\"Select salesOrderNumber,PONumber ,  \n" +
                "										id AS soId,  \n" +
                "                                        som.contactPersonID,  \n" +
                "                                        som.billingAddressID,  \n" +
                "                                        som.shippingAddressID,  \n" +
                "                                        som.shippingMethodID,  \n" +
                "                                        som.intermediateShipmentId,  \n" +
                "										som.termsID,  \n" +
                "                                        som.salesCommissionTo,  \n" +
                "                                        som.freeOnBoardId,  \n" +
                "                                        som.carrierID,  \n" +
                "                                        som.carrierAccountNumber,  \n" +
                "                                        som.internalComment,  \n" +
                "                                        som.shippingComment  \n" +
                "									 From  salesordermst som  \n" +
                "                                     where som.isDeleted = 0  \n" +
                "                                     and som.status = 1  \n" +
                "                                     and som.customerID = \", pCustomerId ,  \n" +
                "                                     \" and som.id <> \" , ifNull(pCurrSOId,0),  \n" +
                "                                     \" and (som.poNumber like '%\",pSearchPO, \"%' OR  \n" +
                "											som.salesOrderNumber like '%\",pSearchPO, \"%')\");  \n" +
                "		IF pSOId IS NOT NULL THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1 , \" and som.id = \" , pSOId );  \n" +
                "        END IF;  \n" +
                "		PREPARE mainQuery FROM @SQLStatement1;  \n" +
                "		EXECUTE mainQuery;  \n" +
                "		DEALLOCATE PREPARE mainQuery;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5583,'2.00','V1','Sproc_getCustomerSalesOrderDetail - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5583:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP  PROCEDURE IF EXISTS Sproc_GetPendingSalesorderDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesorderDetails`(  \n" +
                "	IN psoposearch LONGTEXT,  \n" +
                "	IN salesorderID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "	-- Blanket Po option blanketPOOption 2 for Link BPO to Future PO(s)  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS   tempsalesorder AS  \n" +
                "		   SELECT som.id FROM salesordermst som  \n" +
                "		 WHERE som.id IN  \n" +
                "			  (SELECT sd.refSalesOrderID FROM salesorderdet sd JOIN COMPONENT c ON c.id=sd.partID AND c.isdeleted=0 WHERE  \n" +
                "			   EXISTS (SELECT 1 FROM salesordermst sm WHERE  sm.id=sd.refSalesOrderID AND (sm.isBlanketPO=0 OR (sm.isBlanketPO=1 AND sm.blanketPOOption!=2)) AND sm.isdeleted=0 )  \n" +
                "						AND sd.isdeleted=0  \n" +
                "						AND NOT EXISTS (SELECT 1 FROM customer_packingslip_det cpd  \n" +
                "								JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType='P'  \n" +
                "								WHERE cpd.refsalesorderDetid=sd.id AND cpd.remainingQty=0 AND cpd.isdeleted=0  \n" +
                "						   )) OR som.id=salesorderID;  \n" +
                "  \n" +
                " SET @pWhereClause=\"1=1\";  \n" +
                "  \n" +
                " SET @temp_Sproc_GetPendingSOPO=CONCAT(\"  \n" +
                "	select so.ID,CONCAT('(',m.mfgcode,')',' ',m.mfgName) customerName,  \n" +
                "		so.salesOrderNumber as `SO#`,so.poNumber as `PO#` , so.poRevision, so.customerID,so.billingAddressID,  \n" +
                "		so.termsID , so.shippingAddressID,  \n" +
                "		so.shippingMethodID,so.revision,so.shippingcomment,so.soDate, so.internalComment,  \n" +
                "		so.poDate,  \n" +
                "		(CASE WHEN so.freeOnBoardId IS NULL THEN m.freeOnBoardId ELSE so.freeOnBoardId END) freeOnBoardId ,  \n" +
                "		so.intermediateShipmentId,m.mfgcode,so.contactPersonID,  \n" +
                "		(CASE WHEN so.salesCommissionTo IS NULL THEN m.salesCommissionTo ELSE so.salesCommissionTo END) salesCommissionTo ,  \n" +
                "		concat(fun_GetFormattedMfgCode(m.mfgcode,m.mfgName,\",vMfgCodeFormat,\"), ' | ',so.salesOrderNumber,' | ',so.poNumber) pendingSOPO,  \n" +
                "		m.mfgName,  \n" +
                "		so.status,so.isLegacyPO,so.isRmaPO,so.isBlanketPO,so.blanketPOOption  \n" +
                "	from salesordermst so  \n" +
                "		join mfgcodemst m on m.id=so.customerID  \n" +
                "	where so.id in (select id from tempsalesorder) and so.isDeleted=0\");  \n" +
                "  \n" +
                "  IF(salesorderID IS NOT NULL)THEN  \n" +
                "  SET @temp_Sproc_GetPendingSOPO=CONCAT(@temp_Sproc_GetPendingSOPO,' and so.id=',salesorderID);  \n" +
                "  END IF;  \n" +
                "	IF(psoposearch IS NOT NULL)THEN  \n" +
                "	SET @pWhereClause=CONCAT(\"pendingSOPO like '%\",psoposearch,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"select * from ( \", @temp_Sproc_GetPendingSOPO,\" ) c  where \", @pWhereClause);  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5584,'2.00','V1','Sproc_GetPendingSalesorderDetails - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5584:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetsalesOrderDetailStatus;  \n" +
                "CREATE PROCEDURE `Sproc_GetsalesOrderDetailStatus`(  \n" +
                "	IN psalesorderDetID VARCHAR(10000),  \n" +
                "	IN preleaseLineId INT,  \n" +
                "    IN pSalesOrderId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vQtyRelease INT;  \n" +
                "	DECLARE vQtyWprkorder INT;  \n" +
                "	DECLARE vSalesOrderDetailIdOfRelease INT;  \n" +
                "	DECLARE vSalesOrderDetailIdOfWO INT;  \n" +
                "    DECLARE vTransactionCnt INT DEFAULT 0;  \n" +
                "    IF pSalesOrderId IS NULL THEN  \n" +
                "		SELECT 	IFNULL(SUM(kitReleaseQty),0), salesOrderDetID  \n" +
                "		INTO 	vQtyRelease, vSalesOrderDetailIdOfRelease  \n" +
                "		FROM 	salesorder_plan_detailsmst  \n" +
                "		WHERE 	FIND_IN_SET(salesOrderDetID, psalesorderDetID)  \n" +
                "				AND isdeleted = 0  \n" +
                "				AND kitStatus = 'R'  \n" +
                "		GROUP BY salesOrderDetID;  \n" +
                "  \n" +
                "		SELECT 	IFNULL(SUM(poQty),0), salesOrderDetailID  \n" +
                "		INTO 	vQtyWprkorder, vSalesOrderDetailIdOfWO  \n" +
                "		FROM 	workorder_salesorder_details  \n" +
                "		WHERE 	FIND_IN_SET(salesOrderDetailID, psalesorderDetID)  \n" +
                "				AND isdeleted = 0  \n" +
                "		GROUP BY salesOrderDetailID;  \n" +
                "  \n" +
                "		SELECT vQtyRelease, vSalesOrderDetailIdOfRelease, vQtyWprkorder, vSalesOrderDetailIdOfWO;  \n" +
                "	  IF(preleaseLineId IS NULL) THEN  \n" +
                "		SELECT 	IFNULL(SUM(cpd.shipQty),0) shippedqty, cp.id, GROUP_CONCAT(DISTINCT(cp.packingSlipNumber)) packingSlipNumber, refSalesOrderID vSalesOrderDetailIdOfCustPS  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		WHERE FIND_IN_SET(cpd.refsalesorderdetid,psalesorderDetID) AND  cpd.isdeleted = 0  \n" +
                "			AND cp.transType = 'P';  \n" +
                "	   ELSE  \n" +
                "		SELECT shippedQty AS shippedqty FROM   vu_shippingsummaryperReleasePlan WHERE shippingId=preleaseLineId;  \n" +
                "	   END IF;  \n" +
                "	ELSE  \n" +
                "			SELECT 	vTransactionCnt + count(1)  \n" +
                "			INTO 	vTransactionCnt  \n" +
                "			FROM 	salesorder_plan_detailsmst    spd  \n" +
                "            JOIN 	salesorderdet sod ON sod.id = spd.salesOrderDetID and sod.isDeleted = 0  \n" +
                "			WHERE spd.isDeleted = 0  \n" +
                "			AND spd.kitStatus = 'R'  \n" +
                "            and sod.refSalesOrderID = pSalesOrderId ;  \n" +
                "  \n" +
                "            SELECT  vTransactionCnt + count(1)  \n" +
                "			INTO 	vTransactionCnt  \n" +
                "			FROM 	workorder_salesorder_details  wsd  \n" +
                "             JOIN 	salesorderdet sod ON sod.id = wsd.salesOrderDetailID and sod.isDeleted = 0  \n" +
                "			WHERE 	sod.refSalesOrderID = pSalesOrderId  \n" +
                "			AND wsd.isdeleted = 0    ;  \n" +
                "  \n" +
                "            SELECT 	vTransactionCnt + count(1)  \n" +
                "            INTO 	vTransactionCnt  \n" +
                "			FROM 	customer_packingslip cp  \n" +
                "			JOIN 	salesordermst som ON som.id = cp.refSalesOrderID AND som.isdeleted = 0  \n" +
                "			WHERE 	cp.isDeleted = 0  \n" +
                "			AND cp.refSalesOrderID = pSalesOrderId ;  \n" +
                "  \n" +
                "			Select 	ifnull(vTransactionCnt,0) transCnt;  \n" +
                "    END IF;  \n" +
                "	SELECT sd.id FROM salesorderdet sd  \n" +
                "    WHERE sd.refBlanketPOID IN (SELECT id FROM salesorderdet sdd  \n" +
                "							WHERE sdd.refSalesOrderID=psoID AND sdd.isdeleted=0);  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5585,'2.00','V1','Sproc_GetsalesOrderDetailStatus - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5585:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesOrderForElastic;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderForElastic`(  \n" +
                "    IN pId INT,  \n" +
                "    IN pFromdate DATE,  \n" +
                "    IN pTodate DATE,  \n" +
                "    IN pRequiredCount TINYINT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			COUNT(1) totalCount  \n" +
                "		FROM  \n" +
                "			salesordermst AS som  \n" +
                "				INNER JOIN  \n" +
                "			mfgCodemst AS cust ON som.customerID = cust.id  \n" +
                "				AND (cust.deletedAt IS NULL)  \n" +
                "				LEFT JOIN  \n" +
                "			freeonboardmst AS fob ON som.freeOnBoardId = fob.id  \n" +
                "				AND (fob.isDeleted = FALSE)  \n" +
                "			       LEFT JOIN  \n" +
                "			genericcategory cm ON cm.gencCategoryID=som.carrierID AND cm.isdeleted=0  \n" +
                "			LEFT JOIN  \n" +
                "			genericcategory tm ON tm.gencCategoryID=som.termsID AND tm.isdeleted=0  \n" +
                "			LEFT JOIN  \n" +
                "			genericcategory sm ON tm.gencCategoryID=som.shippingMethodID AND tm.isdeleted=0  \n" +
                "		WHERE som.isDeleted = FALSE;  \n" +
                "    ELSE  \n" +
                "		SELECT  \n" +
                "			som.id,  \n" +
                "			som.salesOrderNumber,  \n" +
                "			som.poNumber,  \n" +
                "			som.poDate,  \n" +
                "			som.soDate,  \n" +
                "			som.customerID,  \n" +
                "			som.freeOnBoardId,  \n" +
                "			cust.mfgCode,  \n" +
                "			cust.isCustOrDisty,  \n" +
                "			cust.mfgType,  \n" +
                "			cust.mfgName,  \n" +
                "			fob.name AS fobName,  \n" +
                "			som.shippingMethodID,  \n" +
                "			som.revision,  \n" +
                "			som.termsID,  \n" +
                "			CASE WHEN som.status=1 THEN 'Published' ELSE 'Draft' END statusText,  \n" +
                "			som.revisionChangeNote,  \n" +
                "			som.salesCommissionTo,  \n" +
                "			som.serialNumber,  \n" +
                "			som.carrierID,  \n" +
                "			som.carrierAccountNumber,  \n" +
                "                        som.poRevision,  \n" +
                "                        CASE WHEN som.isBlanketPO=1 THEN 'Yes' ELSE 'No' END blanketPO,  \n" +
                "                        CASE WHEN som.isLegacyPO=1 THEN 'Yes' ELSE 'No' END legacyPO,  \n" +
                "                        CASE WHEN som.isRmaPO=1 THEN 'Yes' ELSE 'No' END rmaPO,  \n" +
                "                        cm.gencCategoryName AS carrierName,  \n" +
                "                        cm.genccategoryCode AS carrierCode,  \n" +
                "                        tm.gencCategoryName AS termsCode,  \n" +
                "                        tm.genccategoryCode AS termsName,  \n" +
                "                        sm.gencCategoryName AS shippingMethodName,  \n" +
                "                        som.isdeleted,  \n" +
                "                        som.rmaNumber AS rmaNumber,  \n" +
                "                        CASE WHEN som.isDebitedByCustomer =1 THEN 'Yes' ELSE 'No' END AS isDebitedByCustomer,  \n" +
                "                        som.orgPONumber AS orgPONumber,  \n" +
                "                        CASE WHEN som.isReworkRequired =1 THEN 'Yes' ELSE 'No' END isReworkRequired,  \n" +
                "                        som.reworkPONumber  \n" +
                "		FROM  \n" +
                "			salesordermst AS som  \n" +
                "				INNER JOIN  \n" +
                "			mfgCodemst AS cust ON som.customerID = cust.id  \n" +
                "				AND (cust.deletedAt IS NULL)  \n" +
                "				LEFT JOIN  \n" +
                "			freeonboardmst AS fob ON som.freeOnBoardId = fob.id  \n" +
                "				AND (fob.isDeleted = FALSE)  \n" +
                "			       LEFT JOIN  \n" +
                "			genericcategory cm ON cm.gencCategoryID=som.carrierID AND cm.isdeleted=0  \n" +
                "			LEFT JOIN  \n" +
                "			genericcategory tm ON tm.gencCategoryID=som.termsID AND tm.isdeleted=0  \n" +
                "			LEFT JOIN  \n" +
                "			genericcategory sm ON sm.gencCategoryID=som.shippingMethodID AND sm.isdeleted=0  \n" +
                "		WHERE  \n" +
                "			som.id = IFNULL(pId,som.id)  AND  \n" +
                "			(CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(som.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "							OR (DATE(fun_CovnertDateTimeByTimezoneValue(som.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5586,'2.00','V1','Sproc_GetSalesOrderForElastic - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5586:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesorderList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				vuss.blanketPOOption,  \n" +
                "				vuss.blanketPOOptionText,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToreturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount ,  \n" +
                "				vuss.rmaNumber,vuss.isDebitedByCustomer, vuss.debitedByCustText,  \n" +
                "				vuss.rmaOrgPONumber,vuss.orgSalesOrderID,vuss.isReworkRequired,  \n" +
                "				vuss.reworkReqText, vuss.reworkPONumber,vuss.custOrgPOLineNumber \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID  \n" +
                "					ORDER BY w.woID ASC ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'' OR rmaNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''' OR rmaNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "    IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsRmaPO = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isRmaPO = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5587,'2.00','V1','Sproc_GetSalesorderList - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5587:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesOrderSummaryList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pfilterPOStatus VARCHAR(20)  ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "    IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
                "       s.salesOrderNumber,  \n" +
                "       s.poNumber,  \n" +
                "       s.poDate,  \n" +
                "       s.customerID,  \n" +
                "       s.contactPersonID,  \n" +
                "       s.billingAddressID,  \n" +
                "       s.shippingAddressID,  \n" +
                "       s.shippingMethodID,  \n" +
                "       s.revision,  \n" +
                "       s.shippingComment,  \n" +
                "       s.termsID,  \n" +
                "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
                "       CASE WHEN s.blanketPOOption=1 THEN 'Use Blanket PO# for All Releases' WHEN s.blanketPOOption=2 THEN 'Link Blanket PO to Future PO(s)' WHEN s.blanketPOOption=3 THEN 'Use Blanket PO# and Release#' ELSE '' END blanketPOOptionText,  \n" +
                "       s.blanketPOOption,  \n" +
                "       s.status,  \n" +
                "       s.soDate,  \n" +
                "       s.revisionChangeNote,  \n" +
                "       s.salesCommissionTo,  \n" +
                "       s.intermediateShipmentId,  \n" +
                "       s.freeOnBoardId,  \n" +
                "       s.internalComment as internalCommentSo,  \n" +
                "       s.serialNumber,  \n" +
                "       s.carrierID,  \n" +
                "       s.carrierAccountNumber,  \n" +
                "       s.originalPODate,  \n" +
                "       s.isLegacyPO,  \n" +
                "       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
                "       s.isRmaPO,  \n" +
                "       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
                "       s.poRevision,  \n" +
                "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
                "       s.isBlanketPO,  \n" +
                "       CONCAT('(',mg.mfgCode,')',mg.mfgName) AS companyName,  \n" +
                "       mg.mfgName,  \n" +
                "       s.poRevisionDate,  \n" +
                "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
                "       fb.name freeOnBoardName,  \n" +
                "       s.`rmaNumber` AS `rmaNumber`,  \n" +
                "	   s.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "	   (CASE WHEN (s.`isDebitedByCustomer` = 1) THEN 'Yes' ELSE 'No' END) AS `debitedByCustText`,  \n" +
                "       s.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "       s.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "		s.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "       (CASE  WHEN (s.`isReworkRequired` = 1) THEN 'Yes'  ELSE 'No'  END) AS `reworkReqText`,  \n" +
                "	   s.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "      ifnull(sodCnt.totalLineCount,0)  totalSOLines,  \n" +
                "       ifnull(sodCnt.completedLineCount,0) totalCompletedSOLines,  \n" +
                "       (case when sodCnt.totalLineCount is null then 0 else  (sodCnt.completedLineCount * 100/sodCnt.totalLineCount) end)soCompletionPercentage,  \n" +
                "      (case when sodCnt.canceledLineCount = ifnull(sodCnt.totalLineCount,0) then 'Canceled'  \n" +
                "			when (sodCnt.canceledLineCount + sodCnt.completedLineCount) = ifnull(sodCnt.totalLineCount,0)  then 'Completed'  \n" +
                "            else 'In Progress' end) salesOrderDetStatusConvertedValues,  \n" +
                "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
                "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
                "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
                "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
                "		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  \n" +
                "		       FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
                "			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
                "    LEFT JOIN ( select sod.refSalesOrderID as soId ,  \n" +
                "							sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
                "							count(1) totalLineCount,  \n" +
                "                            sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
                "                            From salesorderdet sod where sod.isDeleted = 0  \n" +
                "                            Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = s.id  \n" +
                "			WHERE s.isdeleted=0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "                IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "		END IF;  \n" +
                "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "		END IF;  \n" +
                "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "			IF(psearchposotype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "			IF(psearchextPricetype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "  \n" +
                "			 EXECUTE query2;  \n" +
                "			 DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "  \n" +
                "			 EXECUTE query1;  \n" +
                "		       DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5588,'2.00','V1','Sproc_GetSalesOrderSummaryList - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5588:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetShippedPackingSlipDetailBySoDetID;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippedPackingSlipDetailBySoDetID`(  \n" +
                "	IN psalesorderDetID INT,  \n" +
                "	IN preleaseLineId INT,  \n" +
                "    IN pSalesOrderID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgNameFormat INT;  \n" +
                "  \n" +
                "    Select fun_getMFGCodeNameFormat() INTO vMfgNameFormat;  \n" +
                "  \n" +
                "    IF preleaseLineId IS NOT NULL THEN  \n" +
                "		SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID  ,  \n" +
                "				cpd.partId,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "		WHERE   cpd.refsalesorderdetid= psalesorderDetID AND cpd.shippingId=preleaseLineId AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P';  \n" +
                "    ELSEIF pSalesOrderID IS NOT NULL AND psalesorderDetID IS NULL THEN  \n" +
                "		 SELECT  cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,  \n" +
                "				cp.refCustInvoiceID AS custID, 	SUM(cpd.shipQty) AS shipQty,  \n" +
                "                cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID, fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,  \n" +
                "                co.isCustom,co.custAssyPN,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "			FROM customer_packingslip cp  \n" +
                "            LEFT JOIN customer_packingslip_det cpd on cpd.refCustPackingSlipID = cp.id and cpd.isDeleted = 0  \n" +
                "            LEFT JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "            LEFT JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "			LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "			WHERE   cp.refSalesOrderID=pSalesOrderID  AND  cp.isdeleted = 0  \n" +
                "			AND     cp.transType = 'P'  \n" +
                "            group by cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID,  \n" +
                "					cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name`, rr.rohsIcon,co.isCustom,cpd.shippingNotes , cpd.internalComment;  \n" +
                "    ELSE  \n" +
                "        SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS custID,  \n" +
                "				cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgNameFormat) mfrName,co.isCustom,  \n" +
                "                cpd.shippingNotes , cpd.internalComment  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "		WHERE   cpd.refsalesorderdetid=psalesorderDetID  AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5589,'2.00','V1','Sproc_GetShippedPackingSlipDetailBySoDetID- US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5589:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSOPIDList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSOPIDList`(  \n" +
                "	IN pCustomerID INT(11),  \n" +
                "	IN pPartID INT(11)  ,  \n" +
                "	IN psubAssyID INT(11) ,  \n" +
                "    IN pSearchObj VARCHAR(500),  \n" +
                "    IN pSalesOrderDetID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE mfgCodeID INT(11);  \n" +
                "	DECLARE whereClause VARCHAR(2000);  \n" +
                "	DECLARE partStatusID INT(11);  \n" +
                "    DECLARE mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into mfgNameFormat;  \n" +
                "	SELECT cp.id INTO partStatusID FROM component_partstatusmst cp WHERE cp.name= \"Obsolete\";  \n" +
                "	SET whereClause = \" a.partCategory = 3 \";  \n" +
                "  \n" +
                "	-- fca then default get all assy  \n" +
                "	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany=1)>0 THEN  \n" +
                "		SET pCustomerID=NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND (a.mfgcodeID in ( select buyTo from acquireCustomers) or a.mfgcodeid in  \n" +
                "		(select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and smm.isCustMapping=0 and  smm.supplierID=\",pCustomerID,\")) and  \n" +
                "		(a.customerID=\",pCustomerID,\" or a.customerID in (select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and smm.isCustMapping=0 and  smm.supplierID=\",pCustomerID,\")  \n" +
                "		)\");  \n" +
                "		-- SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", pCustomerID);  \n" +
                "	END IF;  \n" +
                "  -- Added to search  Sales order number  \n" +
                "    IF pSearchObj IS NOT NULL THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) like '%\",pSearchObj,\"%'\");  \n" +
                "    END IF;  \n" +
                "    IF pSalesOrderDetID IS NOT NULL THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND a.id = \",pSalesOrderDetID);  \n" +
                "    END IF;  \n" +
                "	IF(pPartID IS NOT NULL) THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND a.partID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\",pPartID,\") \");  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
                "		c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
                "		c.partStatus, c.isGoodPart,  \n" +
                "		ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName,sm.customerID,  \n" +
                "        fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
                "		CASE WHEN sd.partID = \",pPartID,\" THEN 1 ELSE 2 END AS AssyType,  \n" +
                "		(SELECT  perAssyBuildQty  \n" +
                "			FROM 	kit_allocation_assy_detail  \n" +
                "			WHERE 	refSalesorderdetid = sd.id  \n" +
                "		AND 	partId = \",pPartID,\"  \n" +
                "			AND 	isDeleted = 0) AS qpaa,  \n" +
                "		CASE c.partStatus WHEN \", partStatusID, \" THEN FALSE ELSE TRUE END AS isActive,  \n" +
                "        sd.partCategory,  \n" +
                "        astk.initialStockCount  ,  \n" +
                "        fun_getPOTypeByID(sm.id) POType  \n" +
                "		FROM salesorderdet sd  \n" +
                "		LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.deletedAt IS NULL)  \n" +
                "		LEFT JOIN vu_salesorder_updatedlist_report vsur ON (sd.id = vsur.SalesOrderDetailId)  \n" +
                "		LEFT JOIN component c ON (c.id = sd.partID AND c.isDeleted = 0)  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.deletedAt IS NULL)  \n" +
                "		LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "		LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
                "		WHERE IFNULL(sd.isCancle,0)=0 AND sd.isDeleted = 0 AND IFNULL(sm.status,0)=1  \n" +
                "		AND sd.salesOrderDetStatus = 1 \",' order by c.PIDCode');  \n" +
                "	        -- SELECT @SQLStatement2;  \n" +
                "  \n" +
                "        SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
                "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
                "		-- 	 SELECT @SQLStatement2;  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
                "			c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
                "			ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName, sm.customerID,  \n" +
                "            fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
                "			1 AssyType,  \n" +
                "			(SELECT  perAssyBuildQty  \n" +
                "				FROM 	kit_allocation_assy_detail  \n" +
                "				WHERE 	refSalesorderdetid = sd.id  \n" +
                "			AND 	partId = sd.partID  \n" +
                "				AND 	isDeleted = 0) AS qpaa,  \n" +
                "			CASE c.partStatus  \n" +
                "			WHEN \", partStatusID, \" THEN FALSE  \n" +
                "			ELSE TRUE  \n" +
                "			END AS isActive ,  \n" +
                "            sd.partCategory , c.partStatus , astk.initialStockCount ,  \n" +
                "			fun_getPOTypeByID(sm.id) POType  \n" +
                "			FROM salesorderdet sd  \n" +
                "			LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.deletedAt IS NULL)  \n" +
                "			LEFT JOIN vu_salesorder_updatedlist_report vsur ON (sd.id = vsur.SalesOrderDetailId)  \n" +
                "			LEFT JOIN component c ON (c.id = sd.partID AND c.deletedAt IS NULL)  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.deletedAt IS NULL)  \n" +
                "			LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
                "			WHERE IFNULL(sd.isCancle,0)=0 AND sd.deletedAt IS NULL AND IFNULL(sm.status,0)=1 AND sd.partCategory=3  \n" +
                "				AND sd.salesOrderDetStatus = 1  \",' order by c.PIDCode');  \n" +
                "			SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,(case when a.POType <> '' then ' | ' else '' end), a.poType, ' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
                "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
                "			-- SELECT @SQLStatement2;  \n" +
                "	END IF;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5590,'2.00','V1','Sproc_GetSOPIDList - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5590:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetWOHeaderDisplayDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(  \n" +
                "	IN pwoID INT(11),  \n" +
                "	IN pwoOPID INT(11),  \n" +
                "	IN pwoTransID INT(11),  \n" +
                "	IN pWaterSolubleCleanType VARCHAR(5),  \n" +
                "	IN pNoCleanCleanType VARCHAR(5),  \n" +
                "	IN pwoAssyID INT(11) ,  \n" +
                "	IN pemployeeIDOfWOOP INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgNameFormat INT;  \n" +
                "    select fun_getMFGCodeNameFormat() into vMfgNameFormat;  \n" +
                "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN  \n" +
                "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`, `wo`.`woStatus`, `wo`.`woSubStatus`,  \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`, `wo`.`woVersion`,  \n" +
                "			`wo`.`isOperationTrackBySerialNo`,  \n" +
                "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,  \n" +
                "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,  \n" +
                "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,  \n" +
                "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount,  \n" +
                "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,  \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`, `wo`.`isFluxNotApplicable`, `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`, `wo`.`isRevisedWO`,  \n" +
                "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout  \n" +
                "				WHERE woTransEmpinout.deletedAt IS NULL  \n" +
                "				AND woTransEmpinout.woID=pwoID  \n" +
                "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,  \n" +
                "			`wocerti`.woAllStandardsWithClass , `wo`.createdAt,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isWaterSoluble = 1) isWatersolubleOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isFluxNotApplicable = 1) isFluxNotAppOpNumbers ,  \n" +
                "			`ca`.`PIDCode` ,  ifnull(`vusalesorderdet`.`partDescription`,  `ca`.`mfgPNDescription`) AS partDescription,  \n" +
                "			`ca`.`liveVersion` AS liveVersion,  \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`, `ca`.`RoHSStatusID` ,  \n" +
                "			`ca`.specialNote, ca.totalSolderPoints, `ca`.isCustom ,  \n" +
                "			`ro`.`rohsIcon`,`ro`.`name` AS `rohsName`,  \n" +
                "            `ca`.`isFluxNotApplicable` AS `assyFluxNotApplicable`,  \n" +
                "            `ca`.`isNoClean` AS `assyNoClean`,  \n" +
                "            `ca`.`isWaterSoluble` AS `assyWaterSoluble`,  \n" +
                "            `mf`.mfgType,  \n" +
                "            fun_getSamplePicturesUploadCount(`ca`.id) sampleImageCnt,  \n" +
                "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,  \n" +
                "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
                "   			 CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
                "             CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
                "             CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.soType ELSE parentSaleDtl.soType END soType,  \n" +
                "             vusalesorderdet.lineID,  \n" +
                "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues,  \n" +
                "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL  \n" +
                "					THEN `wo`.isHotJob  \n" +
                "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,  \n" +
                "   			 (CASE WHEN `ca`.totalSolderPoints IS NOT NULL  \n" +
                "					THEN fun_calculateDPMOForWO(`wo`.woID)  \n" +
                "				ELSE NULL END) AS DPMO,  \n" +
                "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID  \n" +
                "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details  \n" +
                "				WHERE refWOID = pwoID)  \n" +
                "			) AS parentWorkorders  ,  \n" +
                "			wo.terminateWOID refWOId,  \n" +
                "			fun_getWorkorderNumberWithRevByID(wo.terminateWOID) refWONumber,  \n" +
                "            fun_getOperationNameByWOOPID(wo.terminateWOOPID) terminatedFromOp ,  \n" +
                "            wo.customerID,  \n" +
                "            fun_GetFormattedMfgCode(mf.mfgCode,mf.mfgName,vMfgNameFormat)  formattedCustomerName  \n" +
                "		FROM workorder AS `wo`  \n" +
                "		LEFT OUTER JOIN  \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName,' ' ,  \n" +
                "				CASE WHEN a.classIDs IS NULL THEN ''  \n" +
                "					ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END  \n" +
                "				ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass  \n" +
                "			FROM `workorder_certification` a  \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID  \n" +
                "			) AS `wocerti`  \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`  \n" +
                "		LEFT OUTER JOIN `component` AS `ca`  \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "		AND `ro`.`deletedAt` IS NULL  \n" +
                "		LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID  \n" +
                "        LEFT OUTER JOIN mfgCodeMst mf ON ca.mfgcodeID = mf.id  \n" +
                "        LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID  \n" +
                "		GROUP BY `wo`.`woID` ;  \n" +
                "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN  \n" +
                "		SELECT  \n" +
                "			`wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,`wo`.`woStatus`, `wo`.`woSubStatus`, `wo`.`isRevisedWO`,  \n" +
                "			`wo`.`isOperationTrackBySerialNo`,  \n" +
                "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,  \n" +
                "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,  \n" +
                "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,  \n" +
                "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout  \n" +
                "				WHERE woTransEmpinout.deletedAt IS NULL  \n" +
                "				AND woTransEmpinout.woID=pwoID  \n" +
                "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,  \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`,`wo`.`woVersion`,  \n" +
                "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount,  \n" +
                "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,  \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble` ,`wo`.`isFluxNotApplicable` , `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`,  \n" +
                "			 `wocerti`.woAllStandardsWithClass , `wo`.createdAt,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isWaterSoluble = 1) isWatersolubleOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woID = `wo`.woID AND isFluxNotApplicable = 1) isFluxNotAppOpNumbers,  \n" +
                "			`woop`.opName , `woop`.opNumber, `woop`.opVersion, `woop`.opStatus,  `woop`.`opID`,  \n" +
                "			`woop`.isTeamOperation , `woop`.isRework, `woop`.isIssueQty,  \n" +
                "			`woop`.qtyControl , `woop`.isStopOperation, `woop`.isPreProgrammingComponent, `woop`.isMoveToStock,  \n" +
                "			`woop`.isPlacementTracking,  \n" +
                "			`woop`.isLoopOperation,  \n" +
                "			`woop`.isAllowFinalSerialMapping,  \n" +
                "			`woop`.isTrackBySerialNo,  `woop`.isEnablePreProgrammingPart ,  \n" +
                "			`woop`.colorCode,  \n" +
                "            `woop`.`isFluxNotApplicable` AS `opFluxNotApplicable`,  \n" +
                "            `woop`.`isNoClean` AS `opNoClean`,  \n" +
                "            `woop`.`isWaterSoluble` AS `opWaterSoluble`,  \n" +
                "			`ca`.`PIDCode`,  ifnull(`vusalesorderdet`.`partDescription`,  `ca`.`mfgPNDescription`) AS partDescription,  \n" +
                "			`ca`.`liveVersion` AS liveVersion,  \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`,   `ca`.specialNote ,  \n" +
                "			`ca`.`RoHSStatusID`, `ca`.isCustom ,  \n" +
                "            `ca`.`isFluxNotApplicable` AS `assyFluxNotApplicable`,  \n" +
                "            `ca`.`isNoClean` AS `assyNoClean`,  \n" +
                "            `ca`.`isWaterSoluble` AS `assyWaterSoluble`,  \n" +
                "			`ro`.`rohsIcon`, ca.totalSolderPoints,`ro`.`name` AS `rohsName`,  \n" +
                "            `mf`.mfgType,  \n" +
                "            fun_getSamplePicturesUploadCount(`ca`.id) sampleImageCnt,  \n" +
                "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,/*wo-so-po-qty*/  \n" +
                "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
                "   			 CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
                "             CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
                "             vusalesorderdet.lineID,  \n" +
                "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues, /*so-po-qty*/  \n" +
                "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL  \n" +
                "					THEN `wo`.isHotJob  \n" +
                "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,  \n" +
                "			 (SELECT wc.isParellelOperation FROM workorder_cluster wc  \n" +
                "				WHERE wc.clusterID  \n" +
                "					IN (SELECT clusterID FROM workorder_operation_cluster woc  \n" +
                "						WHERE woc.woopid=pwoOPID AND `woc`.`deletedAt` IS NULL)  \n" +
                "				 AND wc.deletedAt IS NULL AND wc.woID = pwoID  \n" +
                "			) isParellelOperation,  \n" +
                "			(CASE WHEN `ca`.totalSolderPoints IS NOT NULL  \n" +
                "					THEN fun_calculateDPMOForWO(`wo`.woID)  \n" +
                "				ELSE NULL END) AS DPMO,  \n" +
                "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID  \n" +
                "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details  \n" +
                "				WHERE refWOID = pwoID)  \n" +
                "			) AS parentWorkorders  ,  \n" +
                "            wo.terminateWOID refWOId,  \n" +
                "			fun_getWorkorderNumberWithRevByID(wo.terminateWOID) refWONumber,  \n" +
                "            fun_getOperationNameByWOOPID(wo.terminateWOOPID) terminatedFromOp,  \n" +
                "            fun_getRequireMachineVerificationLogicalValue(woop.woOPID,wo.partID) requireMachineVerification ,  \n" +
                "            wo.customerID,  \n" +
                "            fun_GetFormattedMfgCode(mf.mfgCode,mf.mfgName,vMfgNameFormat)  formattedCustomerName  \n" +
                "		FROM workorder AS `wo`  \n" +
                "		LEFT OUTER JOIN  \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' , CASE WHEN a.classIDs IS NULL THEN ''  \n" +
                "							ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END  \n" +
                "							ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass  \n" +
                "			FROM `workorder_certification` a  \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
                "			 WHERE a.deletedAt IS NULL AND a.woID = pwoID  \n" +
                "			) AS `wocerti`  \n" +
                "		ON `wo`.`woID` = `wocerti`.`woID`  \n" +
                "		LEFT OUTER JOIN `workorder_operation` AS `woop`  \n" +
                "		ON `wo`.`woID` = `woop`.`woID` AND `woop`.`deletedAt` IS NULL AND `woop`.`woOPID` = pwoOPID  \n" +
                "		LEFT OUTER JOIN `component` AS `ca`  \n" +
                "		ON `wo`.`partID` = `ca`.`id` AND `ca`.`deletedAt` IS NULL  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "		AND `ro`.`deletedAt` IS NULL  \n" +
                "		LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID  \n" +
                "        LEFT OUTER JOIN mfgCodeMst mf  ON ca.mfgcodeID = mf.id  \n" +
                "        LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
                "		WHERE `wo`.`deletedAt` IS NULL AND `wo`.`woID` = pwoID  \n" +
                "		GROUP BY `wo`.`woID` ;  \n" +
                "	END IF ;  \n" +
                "  \n" +
                "	/********************************* 2.current data ****************************************************/  \n" +
                "	CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, NULL);  \n" +
                "	/********************************* 2.current data ****************************************************/  \n" +
                "  \n" +
                "	-- IF(IFNULL(pwoTransID,0) > 0) THEN  \n" +
                "		/********************************** 3.current data ***************************************************/  \n" +
                "		CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, pwoTransID);  \n" +
                "		/********************************** 3.current data ***************************************************/  \n" +
                "        -- END IF;  \n" +
                "  \n" +
                "	# last ECO request data  \n" +
                "        SELECT * FROM eco_request WHERE requestType = 1 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;  \n" +
                "        # last DFM request data  \n" +
                "        SELECT * FROM eco_request WHERE requestType = 2 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;  \n" +
                "  \n" +
                "        # is export controlled assembly  \n" +
                "        SELECT (CASE WHEN  \n" +
                "	(SELECT COUNT(1) FROM certificate_standards  \n" +
                "	WHERE deletedAt IS NULL  \n" +
                "	AND isExportControlled = 1  \n" +
                "	AND certificateStandardID IN (	SELECT certificateStandardID FROM component_standard_details  \n" +
                "					WHERE deletedAt IS NULL  \n" +
                "					AND componentID IN (  \n" +
                "								SELECT DISTINCT mfgPNID AS partMasterID FROM rfq_lineitems_alternatepart  \n" +
                "								WHERE deletedAt IS NULL  \n" +
                "								AND partID IN (SELECT prPerPartID FROM part_sub_assy_relationship  \n" +
                "										WHERE deletedAt IS NULL AND partID = pwoAssyID)  \n" +
                "								UNION  \n" +
                "								SELECT DISTINCT partID AS partMasterID FROM workorder_operation_part  \n" +
                "								WHERE deletedAt IS NULL AND woID = pwoID  \n" +
                "								UNION  \n" +
                "								SELECT DISTINCT pwoAssyID AS partMasterID  \n" +
                "							   )  \n" +
                "					) > 0) THEN 1  \n" +
                "		ELSE 0 END) AS isExportControlledAssembly  ;  \n" +
                "  \n" +
                "  \n" +
                "	#  7. get wo op empl wise total time consumption details  \n" +
                "	# include both setup and production activity  \n" +
                "	CALL Sproc_GetWOOPEmpWiseTotTimeConsumptionDet(pWOOPID, pemployeeIDOfWOOP);  \n" +
                "  END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5591,'2.00','V1','Sproc_GetWOHeaderDisplayDetails - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5591:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDeatils;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "        SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "		cd.subStatus,  \n" +
                "		cd.sorevision,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "                fun_getMfgCodeByID(cd.customerID) custCode,  \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "            case when sm.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
                "            sm.isBlanketPO,  \n" +
                "cd.id AS customerslipId,  \n" +
                "case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "  fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "   concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "     (CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         fun_getUserNameByID(cd.updatedBy) updatedby,  \n" +
                "         fun_getUserNameByID(cd.createdBy) createdby,  \n" +
                "         fun_getRoleByID(cd.createByRoleId) createdbyRole,  \n" +
                "         fun_getRoleByID(cd.updateByRoleId) updatedbyRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdAt,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS lockedAt,  \n" +
                "         cpTrack.cpTrackNumber,  \n" +
                "         ifnull(cpTrack.cpTrackNumberCount,0) cpTrackNumberCount,  \n" +
                "         (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "                        cd.revision ,  \n" +
                "           ifnull(packingdtl.packingSlipCnt,0)  packingSlipCnt,  \n" +
                "           sm.rmaNumber,sm.isRmaPO,  \n" +
                "           (CASE when sm.isRmaPO = 1 then 'YES' when sm.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "           (CASE when sm.isRmaPO = 1 then 'Yes' when sm.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp  \n" +
                "		FROM customer_packingslip cd  \n" +
                "		LEFT JOIN salesordermst sm on sm.id=cd.refSalesOrderID and sm.isdeleted=0  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0  \n" +
                "		LEFT JOIN (  \n" +
                "		SELECT COUNT(cpTrack.trackNumber) cpTrackNumberCount,GROUP_CONCAT(cpTrack.trackNumber SEPARATOR ', ') cpTrackNumber,cpTrack.refCustPackingSlipID FROM customer_packing_slip_track_number cpTrack WHERE  cpTrack.isDeleted = 0 GROUP BY cpTrack.refCustPackingSlipID  \n" +
                "		) cpTrack on cpTrack.refCustPackingSlipID=cd.id  \n" +
                "		left join ( select count(1) packingSlipCnt,packingdtl.refCustPackingSlipID from customer_packingslip_det packingdtl where packingdtl.isDeleted = 0 GRoup by packingdtl.refCustPackingSlipID  \n" +
                "		) packingdtl on packingdtl.refCustPackingSlipID=cd.id  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "	 IF (pfilterStatus = 0) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    ELSE  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  \n" +
                "   IF pmfgPartID IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails= CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' AND cd.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pmfgPartID , ')) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "		padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,'''  or som.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "        SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "		padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%''  or som.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "  SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5592,'2.00','V1','Sproc_RetrieveCustomerPackingSlipDeatils - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5592:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDetailPerLine;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDetailPerLine`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       ss.releaseNumber,  \n" +
                "		       ss.qty as releaseLineQty,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cpd.internalComment,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "            cpd.partId,  \n" +
                "            fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "            `cpd`.assyDescription,  \n" +
                "            fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "            c.mfgPN as assyName ,  \n" +
                "            c.PIDCode as assyId,  \n" +
                "            c.mfgCodeID,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "                fun_getMfgCodeAndNameByID(c.mfgCodeID) mfrName,  \n" +
                "                fun_getMfgCodeByID(cd.customerID) custCode,  \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "			cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
                "			cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,  \n" +
                "			case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "			fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "			concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "		(CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.createdAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.createdAt) END  createdAt,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.UpdatedAt) ELSE fun_ConvertUTCDatetimeToDataKeyTimeZone(cpd.UpdatedAt) END  updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ConvertUTCDatetimeToDataKeyTimeZone(cd.lockedAt) lockedAt ,  \n" +
                "		if(cd.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
                "        if(cd.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
                "        if(cd.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "		if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "        if(cd.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "        if(cd.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "        if(cd.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "		if(cd.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "		(case when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText,  \n" +
                "        (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "        cd.revision,  \n" +
                "		(select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "			where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "			from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "		c.isCustom,   c.custAssyPN customPartNumber  ,        cpd.remainingQty ,  \n" +
                "			som.rmaNumber,som.isRmaPO,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'YES' when som.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'Yes' when som.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp  \n" +
                "		FROM customer_packingslip cd  \n" +
                "		JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0  \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0 and invoice.transType ='I'  \n" +
                "        LEFT JOIN salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "        LEFT JOIN salesordermst som on som.id = cd.refSalesOrderID and som.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "    if (pfilterStatus = '0') then  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    else  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    end if;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgPartID IS NOT NULL)THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cpd.partId in ( ',pmfgPartID,')');  \n" +
                "  END IF;  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or som.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'' or som.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "	 SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                " -- select   @temp_Sproc_RetrieveCustomerPackingSlipDetails ,pWhereClause ;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5593,'2.00','V1','Sproc_RetrieveCustomerPackingSlipDetailPerLine - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5593:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_salesordermst;  \n" +
                "CREATE TRIGGER `Trg_AU_salesordermst` AFTER UPDATE ON `salesordermst` FOR EACH ROW BEGIN  \n" +
                "    IF IFNULL(OLD.salesOrderNumber,0) != IFNULL(NEW.salesOrderNumber,0) THEN  \n" +
                "       UPDATE customer_packingslip SET soNumber=NEW.salesOrderNumber,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SALESORDERNUMBER',CAST(OLD.salesOrderNumber AS CHAR),  \n" +
                "       CAST(new.salesOrderNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "    UPDATE customer_packingslip SET poNumber=NEW.poNumber,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'PONUMBER',CAST(OLD.poNumber AS CHAR),  \n" +
                "       CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "    UPDATE customer_packingslip SET poDate=NEW.poDate,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'PODATE',CAST(OLD.poDate AS CHAR),  \n" +
                "       CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.customerID,0) != IFNULL(NEW.customerID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'CUSTOMERID', CAST(OLD.customerID AS CHAR),  \n" +
                "       CAST(new.customerID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'CONTACTPERSONID', CAST(OLD.contactPersonID AS CHAR),  \n" +
                "       CAST(new.contactPersonID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.billingAddressID,0) != IFNULL(NEW.billingAddressID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'BILLINGADDRESSID', CAST(OLD.billingAddressID AS CHAR),  \n" +
                "       CAST(new.billingAddressID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingAddressID ,0) != IFNULL(NEW.shippingAddressID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGADDRESSID', CAST(OLD.shippingAddressID AS CHAR),  \n" +
                "       CAST(new.shippingAddressID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingMethodID ,0) != IFNULL(NEW.shippingMethodID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGMETHODID', CAST(OLD.shippingMethodID AS CHAR),  \n" +
                "       CAST(new.shippingMethodID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REVISION', CAST(OLD.revision AS CHAR),  \n" +
                "       CAST(new.revision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGCOMMENT', CAST(OLD.shippingComment AS CHAR),  \n" +
                "       CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "     IF IFNULL(OLD.internalComment ,0) != IFNULL(NEW.internalComment ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'INTERNALCOMMENT', CAST(OLD.internalComment AS CHAR),  \n" +
                "       CAST(new.internalComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.termsID ,0) != IFNULL(NEW.termsID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'TERMSID', CAST(OLD.termsID AS CHAR),  \n" +
                "       CAST(new.termsID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'STATUS', CAST(OLD.status AS CHAR),  \n" +
                "       CAST(new.status AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.soDate ,0) != IFNULL(NEW.soDate ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SODATE', CAST(OLD.soDate AS CHAR),  \n" +
                "       CAST(new.soDate AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.revisionChangeNote ,0) != IFNULL(NEW.revisionChangeNote ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REVISIONCHANGENOTE', CAST(OLD.revisionChangeNote AS CHAR),  \n" +
                "       CAST(new.revisionChangeNote AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'BLANKETPO', CASE WHEN old.isBlanketPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "      CASE WHEN new.isBlanketPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'POREVISION', CAST(OLD.poRevision AS CHAR),  \n" +
                "      CAST(NEW.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'', CAST(OLD.isDeleted AS CHAR),  \n" +
                "       CAST(new.isDeleted AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isRmaPO ,0) != IFNULL(NEW.isRmaPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'RMAPO', CASE WHEN old.isRmaPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.isRmaPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isLegacyPO ,0) != IFNULL(NEW.isLegacyPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'LEGACYPO', CASE WHEN old.isLegacyPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.isLegacyPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.originalPODate ,0) != IFNULL(NEW.originalPODate ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'ORGPODATE', CAST(DATE_FORMAT(OLD.originalPODate, \"%m/%d/%Y\") AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(new.originalPODate, \"%m/%d/%Y\") AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.rmaNumber ,0) != IFNULL(NEW.rmaNumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'RMANUMBER', CAST(OLD.rmaNumber AS CHAR),  \n" +
                "       CAST(new.rmaNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isDebitedByCustomer ,0) != IFNULL(NEW.isDebitedByCustomer ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'DEBITBYCUST', CASE WHEN OLD.isDebitedByCustomer=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "        CASE WHEN new.isDebitedByCustomer=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.orgPONumber ,0) != IFNULL(NEW.orgPONumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'ORGPONUMBER', CAST(OLD.orgPONumber AS CHAR),  \n" +
                "       CAST(new.orgPONumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isReworkRequired ,0) != IFNULL(NEW.isReworkRequired ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REWORKREQ', CASE WHEN OLD.isReworkRequired=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "        CASE WHEN new.isReworkRequired=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.reworkPONumber ,0) != IFNULL(NEW.reworkPONumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REWORKPONUMBER', CAST(OLD.reworkPONumber AS CHAR),  \n" +
                "       CAST(new.reworkPONumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5594,'2.00','V1','Trg_AU_salesordermst - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5594:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-12-2021  *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_salesorderdet;  \n" +
                "CREATE TRIGGER `Trg_AU_salesorderdet` AFTER UPDATE ON `salesorderdet` FOR EACH ROW BEGIN  \n" +
                "    IF IFNULL(OLD.refSalesOrderID,0) != IFNULL(NEW.refSalesOrderID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'REFSALESORDERID',CAST(OLD.refSalesOrderID AS CHAR),  \n" +
                "       CAST(new.refSalesOrderID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QTY',CAST(OLD.qty AS CHAR),  \n" +
                "       CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "        IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PRICE',CAST(CAST(OLD.price AS DECIMAL(15,5)) AS CHAR),  \n" +
                "      CAST(CAST(new.price AS DECIMAL(15,5)) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mrpQty,0) != IFNULL(NEW.mrpQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MRPQTY',CAST(OLD.mrpQty AS CHAR),  \n" +
                "       CAST(new.mrpQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingQty,0) != IFNULL(NEW.shippingQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'SHIPPINGQTY',CAST(OLD.shippingQty AS CHAR),  \n" +
                "       CAST(new.shippingQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'REMARK',CAST(OLD.remark AS CHAR),  \n" +
                "       CAST(new.remark AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.internalComment,0) != IFNULL(NEW.internalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'LINECOMMENT',CAST(OLD.internalComment AS CHAR),  \n" +
                "       CAST(new.internalComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.materialTentitiveDocDate,0) != IFNULL(NEW.materialTentitiveDocDate,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MATERIALTENTITVEDOCDATE',CAST(OLD.materialTentitiveDocDate AS CHAR),  \n" +
                "       CAST(new.materialTentitiveDocDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.prcNumberofWeek,0) != IFNULL(NEW.prcNumberofWeek,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'prcNUMBEROFWEEK',CAST(OLD.prcNumberofWeek AS CHAR),  \n" +
                "       CAST(new.prcNumberofWeek AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isHotJob,0) != IFNULL(NEW.isHotJob,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISHOTJOB',CAST(OLD.isHotJob AS CHAR),  \n" +
                "       CAST(new.isHotJob AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.materialDueDate,0) != IFNULL(NEW.materialDueDate,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MATERIALDUEDATE',CAST(OLD.materialDueDate AS CHAR),  \n" +
                "       CAST(new.materialDueDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PARTID',CAST(OLD.partID AS CHAR),  \n" +
                "       CAST(new.partID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "      IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "	 INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISDELETED',CAST(OLD.isDeleted AS CHAR),  \n" +
                "       CAST(new.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.kitQty,0) != IFNULL(NEW.kitQty,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'KITQTY',CAST(OLD.kitQty AS CHAR),  \n" +
                "       CAST(new.kitQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(old.custPOLineNumber,\"\")!=IFNULL(NEW.custPOLineNumber,\"\")THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'CustPOLine',OLD.custPOLineNumber,  \n" +
                "       new.custPOLineNumber,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "  \n" +
                "       END IF;  \n" +
                "       IF IFNULL(old.salesOrderDetStatus,0)!=IFNULL(NEW.salesOrderDetStatus,0)THEN  \n" +
                "		   INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		   VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'Status',CASE  WHEN OLD.salesOrderDetStatus=1 THEN 'InProgress' WHEN OLD.salesOrderDetStatus=2 THEN 'Completed' ELSE '' END ,  \n" +
                "		   CASE WHEN NEW.salesOrderDetStatus=1 THEN 'InProgress' WHEN NEW.salesOrderDetStatus=2 THEN 'Completed' ELSE '' END,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "       END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isSkipKitCreation,0) != IFNULL(NEW.isSkipKitCreation,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISKIPKITCREATION',CASE WHEN OLD.isSkipKitCreation = 1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.isSkipKitCreation = 1 THEN 'Yes' ELSE 'No' END,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partDescription,0) != IFNULL(NEW.partDescription,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PARTDESCRIPTION',CAST(OLD.partDescription AS CHAR),  \n" +
                "       CAST(new.partDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.quoteNumber,0) != IFNULL(NEW.quoteNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QUOTENUMBER',CAST(OLD.quoteNumber AS CHAR),  \n" +
                "       CAST(new.quoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.frequency,0) != IFNULL(NEW.frequency,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'FREQUENCY',CAST(CASE WHEN OLD.frequency=1 THEN 'Every' WHEN OLD.frequency=2 THEN 'First' WHEN OLD.frequency=3 THEN 'Last' ELSE '' END  AS CHAR),  \n" +
                "       CAST(CASE WHEN new.frequency=1 THEN 'Every' WHEN new.frequency=2 THEN 'First' WHEN new.frequency=3 THEN 'Last' ELSE '' END  AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.originalPOQty,0) != IFNULL(NEW.originalPOQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ORGPOQTY',CAST(OLD.originalPOQty  AS CHAR),  \n" +
                "       CAST(NEW.originalPOQty  AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.quoteFrom,0) != IFNULL(NEW.quoteFrom,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QUOTEFROM',  \n" +
                "       CASE WHEN OLD.quoteFrom = 1 THEN 'From Quote'  \n" +
                "			WHEN OLD.quoteFrom = 2 THEN 'From Part Master'  \n" +
                "            WHEN OLD.quoteFrom = 3 THEN 'N/A'  \n" +
                "            ELSE '' END,  \n" +
                "		CASE WHEN new.quoteFrom = 1 THEN 'From Quote'  \n" +
                "			WHEN new.quoteFrom = 2 THEN 'From Part Master'  \n" +
                "            WHEN new.quoteFrom = 3 THEN 'N/A'  \n" +
                "            ELSE '' END,  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "   IF IFNULL(OLD.custOrgPOLineNumber,0) != IFNULL(NEW.custOrgPOLineNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'CUSTORGPOLINENUMBER',CAST(OLD.custOrgPOLineNumber AS CHAR),  \n" +
                "       CAST(new.custOrgPOLineNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5595,'2.00','V1','Trg_AU_salesorderdet - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5595:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP VIEW IF EXISTS vu_salesorder_updatedlist_report;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`rmaNumber` AS `rmaNumber`,  \n" +
                "        `a`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "        `a`.`debitedByCustText` AS `debitedByCustText`,  \n" +
                "        `a`.`rmaOrgPONumber` AS `rmaOrgPONumber`,  \n" +
                "        `a`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "        `a`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "        `a`.`reworkReqText` AS `reworkReqText`,  \n" +
                "        `a`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "        `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "        `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "        `a`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "        `a`.`blanketPOOptionText` AS `blanketPOOptionText`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                `sm`.`rmaNumber` AS `rmaNumber`,  \n" +
                "                `sm`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isDebitedByCustomer` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `debitedByCustText`,  \n" +
                "                `sm`.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "                `sm`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "                `sm`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isReworkRequired` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `reworkReqText`,  \n" +
                "                `sm`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                `sm`.`createdAt` AS `createdDate`,  \n" +
                "                `sm`.`updatedAt` AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                IFNULL(`sq`.`ShippedQty`, 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "                `sm`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 1) THEN 'Use Blanket PO# for All Releases'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN 'Link Blanket PO to Future PO(s)'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 3) THEN 'Use Blanket PO# and Release#'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `blanketPOOptionText`  \n" +
                "        FROM  \n" +
                "            ((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refSalesOrderID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refSalesOrderID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** Add Script Version -> 06-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5596,'2.00','V1','vu_salesorder_updatedlist_report - US#37924: RMA PO - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5596:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-11-2021 *********************************** */
                "DROP VIEW IF EXISTS vu_sub_assembly_count;  \n" +
                "CREATE VIEW `vu_sub_assembly_count`  \n" +
                " AS  \n" +
                " select row_number() OVER (PARTITION BY `a`.`partID` ORDER BY `a`.`partID` desc )  AS `id`,count(1) AS `subAssemblyCount`,  \n" +
                " `a`.`partID` AS `partID` from `part_sub_assy_relationship` `a` where (`a`.`partID` <> `a`.`prPerPartID`) group by `a`.`partID`;  \n" +

                "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pNewEpicorType varchar(50),  \n" +
                "    IN pNewAssemblyType INT,  \n" +
                "    IN pNewMfgcodeID INT,  \n" +
                "    IN pNewCustAssyPN varchar(500),  \n" +
                "    IN pNewPartRev varchar(50),  \n" +
                "    IN pNewMfgPN varchar(100),  \n" +
                "    IN pNewAssyCode varchar(50),  \n" +
                "    IN pNewNickName varchar(50),  \n" +
                "    IN pNewPIDCode varchar(109),  \n" +
                "    IN pIsCPN tinyint,  \n" +
                "    IN pIsCustom tinyInt,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pUserRoleId Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                "    IN pIsBOM tinyint,  \n" +
                "    IN pIsFluxType tinyInt,  \n" +
                "    IN pIsComments tinyInt,  \n" +
                "    IN pIsCopyImages tinyInt,  \n" +
                "    IN pIsCopyDatasheet tinyInt,  \n" +
                "    IN pIsCopyDocument tinyInt,  \n" +
                "    IN pIsOperationalAttirbutes tinyInt,  \n" +
                "    IN pIsAcceptableShippinCountry tinyInt,  \n" +
                "    IN pIsTrackSNumber tinyInt,  \n" +
                "    IN pMfgPNDescription varchar(2000),  \n" +
                "    IN pDetailDescription varchar(2000),  \n" +
                "    IN pInternalReference varchar(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vIsCPN tinyint;  \n" +
                "DECLARE vCount INT;  \n" +
                "DECLARE vToPartID INT;  \n" +
                "DECLARE vUserRoleId INT;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vSerialNumber varchar(20);  \n" +
                "DECLARE vMessage varchar(200);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  	set vCount = 0;  \n" +
                "    select co.category, m.mfgType, count(co.id), co.isCPN  \n" +
                "      into vFromPartCategory, vFromMfgType, vCount, vIsCPN  \n" +
                "	  from component co  \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
                "	 where co.id = pFromPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "	if vCount = 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "		select 'PART_NOT_FOUND' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
                "		set pIsAttribute = 1;  \n" +
                "        set pIsAdditionalAttibute = 1;  \n" +
                "    end if;  \n" +
                "  \n" +
                "	set vCount = 0;  \n" +
                "    if (vFromPartCategory = 3) then # check category  \n" +
                "	   select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "          and co.category = 3  \n" +
                "		  and co.custAssyPN = pNewCustAssyPN  \n" +
                "		  and co.rev = pNewPartRev  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "		if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "            select 'DUPLICATE_REV' as message;  \n" +
                "        end if;  \n" +
                "  \n" +
                "         set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName != pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN = pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		  if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "				where co.nickName != pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN = pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null ;  \n" +
                "				 -- limit 1;  \n" +
                "		  end if;  \n" +
                "  \n" +
                "		set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName = pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN != pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null;  \n" +
                "		 if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'DUPLICATE_NICKNAME' as message,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "				where co.nickName = pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN != pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null  ;  \n" +
                "-- 				  limit 1;  \n" +
                "		  end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "		  and co.mfgPN = pNewMfgPN  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "	 if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_MFGPN' as message;  \n" +
                "     end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.PIDCode = pNewPIDCode  \n" +
                "		  and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null;  \n" +
                "    if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_PID' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
                "		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
                "													'MPNSystemID'  \n" +
                "												else 'SPNSystemID' end,  \n" +
                "											 true);  \n" +
                "		  select systemID, message into vSerialNumber, vMessage  \n" +
                "		  from temp_serialNumber;  \n" +
                "        if vMessage is not null and vMessage != '' then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			select vMessage as message;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
                "		-- START TRANSACTION;  \n" +
                "		insert into component(  \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,  \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                functionalCategoryID,  \n" +
                "                mountingTypeID,  \n" +
                "                functionalCategoryText,                mountingTypeText,                operatingTemp,				minOperatingTemp,				maxOperatingTemp,  \n" +
                "				temperatureCoefficient,				temperatureCoefficientValue,				temperatureCoefficientUnit,				connecterTypeID,  \n" +
                "				connectorTypeText,				noOfPositionText,				noOfPosition,				noOfRowsText,				noOfRows,  \n" +
                "				pitch,				pitchMating,				sizeDimension,				length,				width,				heightText,				height,  \n" +
                "				partStatus, partStatusText, leadTime, serialNumber, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
                "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference, mfgType, isEpoxyMount,  \n" +
                "                scrapValuePerBuild,				scrapRatePercentagePerBuild,				plannedValuePerBuild,				plannedOverRunPercentagePerBuild,				selfLifeDays,  \n" +
                "				shelfLifeAcceptanceDays,				shelfListDaysThresholdPercentage,				maxShelfLifeAcceptanceDays,				maxShelfListDaysThresholdPercentage,  \n" +
                "				shelfLifeDateType,				maxPriceLimit,				maxQtyonHand,				saftyStock,				eau,				businessRisk,				programingRequired,  \n" +
                "                restrictUSEwithpermission,                bomLock,                restrictUsePermanently,  \n" +
                "                tolerance,				voltage,				value,				partPackage,				powerRating,  \n" +
                "				weight,				feature,				color,  \n" +
                "                deviceMarking,				packagingID,  \n" +
                "				minimum,				mult,				packageQty,				umidSPQ,                uomText,  \n" +
                "                pcbPerArray,                IsReceiveBulkItem)  \n" +
                "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				pMfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                functionalCategoryID,  \n" +
                "                mountingTypeID,  \n" +
                "                /* Copy in case Attribute  checked*/  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  functionalCategoryText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  mountingTypeText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  operatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  minOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  maxOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficient ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientValue ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientUnit ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  connecterTypeID ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  connectorTypeText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfPositionText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfPosition ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfRowsText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfRows ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitch ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitchMating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  sizeDimension ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  length ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  width ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  heightText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  height ELSE null END),  \n" +
                "  \n" +
                "				partStatus, partStatusText, leadTime, vSerialNumber/*serialNumber*/, RoHSStatusID,  \n" +
                "				rohsText, rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isFluxNotApplicable ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isWaterSoluble ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsFluxType = 1) THEN  isNoClean ELSE 0 END),  \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
                "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1  and pIsCPN = 0) THEN requiredTestTime ELSE null END),  \n" +
                "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsDriveTool = 1 and pIsCPN = 0) THEN driverToolRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredMattingParts = 1  and pIsCPN = 0) THEN matingPartRquired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsPickupPad = 1  and pIsCPN = 0) THEN pickupPadRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1  and pIsCPN = 0) THEN functionalTestingRequired ELSE 0 END),  \n" +
                "                pInternalReference,  \n" +
                "                mfgType,isEpoxyMount,  \n" +
                "  \n" +
                "                /* Copy in case Settings checked*/  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapRatePercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedOverRunPercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  selfLifeDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeDateType ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxPriceLimit ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxQtyonHand ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  saftyStock ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  eau ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  businessRisk ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  programingRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUSEwithpermission ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  bomLock ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUsePermanently ELSE 0 END),  \n" +
                "  \n" +
                "                /* Copy in case Additional Attribute checked*/  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  tolerance ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  voltage ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  `value` ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  partPackage ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  powerRating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  weight ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  feature ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  color ELSE null END),  \n" +
                "  \n" +
                "                /* Copy in case Packaging Detail checked*/  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  deviceMarking ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packagingID ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  minimum ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  mult ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packageQty ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  umidSPQ ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  uomText ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  pcbPerArray ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  IsReceiveBulkItem ELSE null END)  \n" +
                "		 from component  \n" +
                "		where id = pFromPartID;  \n" +
                "		set vToPartID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF(vValidationPassed = 1)  \n" +
                "		THEN  \n" +
                "			 set vMessage = '';  \n" +
                "			 CALL Sproc_CopyPartDetailOnCopyAndDuplicatePart(pFromPartID,vToPartID,pUserID,vIsCPN,pIsCPN,vFromPartCategory,pIsStandards,pIsRequiredFunctionalType,pIsRequiredMountingType,pIsPackagingAliasPart,pIsOtherPartName  \n" +
                "				,pIsAlternatePart,pIsRoHSReplacementPart,pIsDriveTool,pIsProcessMaterial,pIsRequiredMattingParts,pIsPickupPad,pIsFunctionalTesingTool,pIsFinctionalRestingEquipment, vMisMatchFields, vMessage);  \n" +
                "  \n" +
                "            IF(vMessage != '')  \n" +
                "			THEN  \n" +
                "				select vMessage as message,vMisMatchFields as misMatchFields;  \n" +
                "			ELSE  \n" +
                "				IF pIsSettings then  \n" +
                "					INSERT INTO `component_temperature_sensitive_data`  \n" +
                "					(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				IF pIsAcceptableShippinCountry then  \n" +
                "					INSERT INTO component_acceptable_shipping_countries  \n" +
                "						(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "						component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				if (vFromPartCategory = 3) then  \n" +
                "					if pIsBOM then  \n" +
                "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
                "					end if;  \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
                "				end if;  \n" +
                "				if(pIsComments = 1) THEN  \n" +
                "						INSERT INTO componenet_inspection_requirement_det  \n" +
                "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                "						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                "						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                "						INSERT INTO assembly_revision_comments  \n" +
                "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
                "						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
                "							partID = pFromPartID;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
                "				IF pIsCopyImages  then  \n" +
                "					insert into component_images  \n" +
                "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
                "					 from component_images  \n" +
                "					where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDatasheet  then  \n" +
                "					insert into component_datasheets  \n" +
                "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
                "					from component_datasheets  \n" +
                "						where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsOperationalAttirbutes  then  \n" +
                "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
                "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDocument then  \n" +
                "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
                "					INSERT INTO generic_folder  \n" +
                "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					FROM generic_folder a  \n" +
                "					WHERE a.refTransID = pFromPartID  \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE generic_folder gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
                "  \n" +
                "					INSERT INTO genericfiles  \n" +
                "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE genericfiles gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
                "				IF(@documentPathOfFromPart is null)  \n" +
                "				THEN  \n" +
                "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
                "				END IF;  \n" +
                "				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	end if;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsMFG TINYINT,  \n" +
                "    IN pMfgCodeIDs LONGTEXT,  \n" +
                "    IN pMfgCodeIdsForSupplierParts LONGTEXT,  \n" +
                "    IN pPackagingIDs LONGTEXT,  \n" +
                "    IN pPackageIDs LONGTEXT,  \n" +
                "    IN pPartStatusIDs LONGTEXT,  \n" +
                "    IN pMountingTypeIDs LONGTEXT,  \n" +
                "    IN pExternalMountingTypeValues LONGTEXT,  \n" +
                "    IN pFunctionalTypeIDs LONGTEXT,  \n" +
                "    IN pExternalFunctionalTypeValues LONGTEXT,  \n" +
                "    IN pAttributesSearchHeader LONGTEXT,  \n" +
                "    IN pAttributesSearch LONGTEXT,  \n" +
                "    IN pPackagingAlias TEXT,  \n" +
                "    IN pAlternatePart TEXT,  \n" +
                "    IN pRoHSAlternatePart TEXT,  \n" +
                "    IN pPartUsedInAssembly TEXT,  \n" +
                "    IN pMultiplePartNumbers LONGTEXT,  \n" +
                "    IN pStockQuantity TEXT,  \n" +
                "    IN pPartTypeIDs LONGTEXT,  \n" +
                "    IN pCertificateStandardsIds LONGTEXT,  \n" +
                "    IN pStandardsClassIds LONGTEXT,  \n" +
                "    IN pAssemblyIds LONGTEXT,  \n" +
                "    IN pAssemblyTypeIds LONGTEXT,  \n" +
                "    IN pRohsIds LONGTEXT,  \n" +
                "    IN pExternalRoHSStatusListValues LONGTEXT,  \n" +
                "    IN pOperationalAttributeIds LONGTEXT,  \n" +
                "    IN pAcceptableShippingCountryIds LONGTEXT,  \n" +
                "    IN pComponentOrdering TEXT,  \n" +
                "    IN pComponentUsageCriteria TEXT,  \n" +
                "    IN pIsRefreshMasterFilters TINYINT,  \n" +
                "    IN pFromDate DATE,  \n" +
                "    IN pToDate DATE,  \n" +
                "    IN pIsReversal TINYINT,  \n" +
                "    IN pIsCPN TINYINT,  \n" +
                "    IN pIsCustom TINYINT,  \n" +
                "    IN pIsBOMActivityStarted TINYINT,  \n" +
                "    IN pIsEcoDfmColumnVisible TINYINT,  \n" +
                "    IN pIsSearchFromHeader TINYINT,  \n" +
                "    IN pIsExportControl TINYINT,  \n" +
                "    IN pObsoleteDate DATE,  \n" +
                "    IN pIsOperatingTemperatureBlank TINYINT,  \n" +
                "    IN pFromCreatedOnDate DATE,  \n" +
                "    IN pToCreatedOnDate DATE,  \n" +
                "    IN pIsIdenticalMfrPN TINYINT,  \n" +
                "    IN pIsProductionPNEmpty TINYINT,  \n" +
                "    IN pDisapprovedSupplierIds LONGTEXT,  \n" +
                "	IN pIsExcludeIncorrectPart TINYINT,  \n" +
                "    IN pMultiplePartFilterFieldName VARCHAR(50),  \n" +
                "    IN pMultiplePartByUploadFileDetail LONGTEXT,  \n" +
                "    IN pIsRestrictUSEwithpermission TINYINT,  \n" +
                "    IN pIsRestrictPackagingUseWithpermission TINYINT,  \n" +
                "    IN pIsRestrictUsePermanently TINYINT,  \n" +
                "    IN pIsRestrictPackagingUsePermanently TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE attributeSearchString LONGTEXT;  \n" +
                "    DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "    DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "    DECLARE vPartUsedInAssemblyExists VARCHAR(20);  \n" +
                "    DECLARE vPartUsedInAssemblyAndOR VARCHAR(20);  \n" +
                "  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentSession datetime;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT fun_DatetimetoUTCDateTime() INTO vCurrentSession;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  SET @SQLStatement1=CONCAT(\"  \n" +
                "	SELECT co.id,co.imageURL,co.mfgPN,co.mfgcodeID,co.mfgPNDescription,co.packageQty,co.ltbDate,co.RoHSStatusID,co.PIDCode  \n" +
                ",co.leadTime,co.noOfPosition,co.mountingTypeID,co.partPackage,co.deviceMarking,co.minimum,co.mult,co.uomText,co.rohsText,co.dataSheetLink  \n" +
                ",co.eolDate,co.value,co.tolerance,co.minOperatingTemp,co.maxOperatingTemp,co.weight,co.length,co.width,co.height,co.saftyStock  \n" +
                ",co.specialNote,co.heightText,co.partStatusText,co.feature,co.functionalCategoryText,co.supplier,co.mountingTypeText,co.maxPriceLimit  \n" +
                ",co.selfLifeDays,co.isCustom,co.connecterTypeID,co.connectorTypeText,co.maxQtyonHand,co.noOfRows,co.powerRating,co.pitch,co.pitchMating  \n" +
                ",co.scrapRatePercentagePerBuild,co.plannedOverRunPercentagePerBuild,co.nickName,co.restrictUSEwithpermission,co.operatingTemp  \n" +
                ",co.sizeDimension,co.plannedValuePerBuild,co.scrapValuePerBuild,co.restrictUsePermanently,co.eau,co.pcbPerArray,co.isCPN,co.partType,co.category  \n" +
                ",co.shelfListDaysThresholdPercentage,co.color,co.businessRisk,co.grossWeight,co.packagingWeight,co.restrictPackagingUsePermanently  \n" +
                ",co.restrictPackagingUseWithpermission,co.reversalDate,co.serialNumber,co.isActivityStart,co.activityStartBy,co.activityStartAt  \n" +
                ",co.systemGenerated,co.purchasingComment,co.detailDescription,co.documentPath,co.obsoleteDate,co.epicorType,co.partStatus,co.packagingID,co.functionalCategoryID,co.partPackageID,co.isWaterSoluble,co.isNoClean  \n" +
                ",co.mfrNameText,co.isHazmatMaterial,co.rfqNumber,co.salesacctId,co.purchaseacctId,co.umidSPQ,co.internalReference,  fun_GetFormattedMfgCode(mf.mfgCode, mf.mfgName, \", vMfgCodeFormat ,\") as mfgCode,  \n" +
                " mf.isCustOrDisty, mf.mfgName as manufacturerName, mf.displayOrder mfgDisplayOrder,  \n" +
                "		(case when co.isGoodPart!=2 and mf.mfgType = 'MFG' then 1 else 0 end) as isCopyPart,  \n" +
                "		gc.name AS partStatusValue,  \n" +
                "        gc.displayOrder parStatusDisplayOrder,  \n" +
                "		mf.mfgType, co.isReceiveBulkItem \");  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "			null AliasMFGPN,  \n" +
                "			null AliasMFGCode,  \n" +
                "			null AliasMFGCodeID,  \n" +
                "			null AliascompID,  \n" +
                "			null AliasMFGName,  \n" +
                "            null AliasMFGDisplayOrder\");  \n" +
                "    ELSE  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		/*(case when (mf.mfgType = 'DIST' and co.refSupplierMfgpnComponentID is not null) then (select MFGPN from component vu_co where vu_co.id = co.refSupplierMfgpnComponentID limit 1) else null end) AliasMFGPN,*/  \n" +
                "         vu_co.MFGPN AliasMFGPN,  \n" +
                "          fun_GetFormattedMfgCode(mfc.mfgCode, mfc.mfgName,\", vMfgCodeFormat ,\") as AliasMFGCode,  \n" +
                "        mfc.id AliasMFGCodeID,  \n" +
                "	    co.refSupplierMfgpnComponentID AliascompID,  \n" +
                "        mfc.mfgName as AliasMFGName,  \n" +
                "        mfc.displayOrder AliasMFGDisplayOrder \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		ro.name AS `rohsComplientConvertedValue`,  \n" +
                "        ro.displayOrder rohsDisplayOrder,  \n" +
                "		ro.rohsIcon AS `rohsIcon`,  \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 1) THEN 'Correct Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 2) THEN 'Incorrect Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 3) THEN 'TBD Part'  \n" +
                "					ELSE '' END) AS `isGoodPartValue`,  \n" +
                "		case when co.isCustom = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCustomValue,  \n" +
                "		case when co.isCPN = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCPNValue,  \n" +
                "		pt.partTypeName functionalCategoryName,  \n" +
                "        pt.displayOrder functionalCategoryDisplayOrder,  \n" +
                "		mt.name mountingTypeName,  \n" +
                "        mt.displayOrder mountingTypeDisplayOrder,  \n" +
                "		pc.categoryName,  \n" +
                "		rct.name connecterTypeName,  \n" +
                "		u.unitName,  \n" +
                "		CONCAT(cmsl.levelRating,' (', cmsl.time,')') mslName,  \n" +
                "		pck.name packagingName,  \n" +
                "        pck.displayOrder packagingDisplayOrder,  \n" +
                "			(CASE WHEN (`co`.`isReversal` = 1) THEN 'Yes'  \n" +
                "					ELSE 'No' END) AS `reversalPart`,  \n" +
                "			(CASE WHEN (`co`.`isEpoxyMount` = 1) THEN 'Yes'  \n" +
                "					ELSE 'No' END) AS `isEpoxyMount`,  \n" +
                "		ifnull(vucomstd.isExportControl, 'No') as isExportControl,  \n" +
                "        IFNULL(vuempcre.initialName,co.createdBy) as createdbyValue,  \n" +
                "		IFNULL(vuempupd.initialName ,co.updatedBy)as updatedbyValue,  \n" +
                "		rc.name as createdbyRoleValue,  \n" +
                "		ru.name as updatedbyRoleValue,  \n" +
                "        co.createdAt,  \n" +
                " 		co.updatedAt,  \n" +
                "        co.updatedAtApi,  \n" +
                "		(CASE WHEN (co.systemGenerated = 0) THEN 'No'  \n" +
                "		WHEN (co.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,  \n" +
                "        pct.name packageCaseTypeValue,  \n" +
                "        concat(pt.partTypeName,' - ',mt.name) groupName,  \n" +
                "		case when co.category = 3 then  \n" +
                "			fun_getSamplePicturesUploadCount(co.id)  \n" +
                "		end uploadedSamplePicturesCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.count  \n" +
                "		end assemblyCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			 vurline.lineCount  \n" +
                "		end bomLineCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.quoteProgress  \n" +
                "		end quoteProgress,  \n" +
                "		CASE when co.category = 3 then  \n" +
                "		 	vurfass.id  \n" +
                "		END rfqAssyID,  \n" +
                "		concat(usr.firstName, ' ', usr.lastName) activityStartedByUserName,  \n" +
                "		case when co.isActivityStart=true then  \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt,'\",vCurrentSession,\"')  \n" +
                "			else null end activityStartTime,  \n" +
                "		rat.name assemblyTypeName,  \n" +
                "		CASE when co.frequency = 1 then  \n" +
                "		 	'Every' when    co.frequency = 2 then  \n" +
                "		 	'First' when  co.frequency = 3 then  \n" +
                "		 	'Last' else ''  \n" +
                "		END frequencyName,  \n" +
                "        CASE WHEN co.isWaterSoluble = 0 THEN 'NO' ELSE 'YES' END isWaterSolubleConvertedValue ,  \n" +
                "        CASE WHEN co.isNoClean = 0 THEN 'NO' ELSE 'YES' END isNoCleanConvertedValue,  \n" +
                "        fun_getHazmateValue(co.isHazmatMaterial) as isHazmatMaterialValue,  \n" +
                "        CASE WHEN co.isReceiveBulkItem = 0 THEN 'NO' ELSE 'YES' END isReceiveBulkConvertedValue,  \n" +
                "        CONCAT('(',am.`acct_code`,') ',am.`acct_name`) AS SalesCOA,  \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS PurchaseCOA,  \n" +
                "        vucomstd.certificatelist,  \n" +
                "        vusac.subAssemblyCount\");  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') OR pComponentOrdering = 'STOCK' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentStock(co.id) partStock \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partStock \");  \n" +
                "	END IF;  \n" +
                "    IF pComponentOrdering = 'USAGE' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentUsage(co.id,'\",pFromDate,\"','\",pToDate,\"','\",pComponentUsageCriteria,\"') partUsage \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partUsage \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsEcoDfmColumnVisible = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , (select count(1)  \n" +
                "													  from eco_request ec  \n" +
                "													 where ec.isdeleted = 0  \n" +
                "													   and ec.finalstatus = 'P'  \n" +
                "													   and ec.fromPartID = co.id) activeEcoDfmCount \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null activeEcoDfmCount \");  \n" +
                "	END IF;  \n" +
                "	IF (pFromCreatedOnDate IS NOT NULL OR pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , CAST(fun_CovnertDateTimeByTimezoneValue(co.createdAt,'\",vTimeZone,\"') AS DATE) createdAtFilter \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , count(1) over(partition by co.mfgPN,mf.mfgType) identicalPNCount \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
                "	FROM component co  \n" +
                "		JOIN rfq_partcategory pc ON pc.id = co.partType  \n" +
                " 		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id  \n" +
                " 		JOIN component_partstatusmst gc ON gc.id = co.partStatus  \n" +
                " 		JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id  \n" +
                " 		JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID  \n" +
                " 		JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID  \n" +
                " 		LEFT JOIN rfq_connectertypemst rct ON rct.id = co.connecterTypeID  \n" +
                " 		JOIN uoms u ON u.id = co.uom  \n" +
                " 		LEFT JOIN component_mslmst cmsl ON cmsl.id = co.mslID  \n" +
                "		left join rfq_packagecasetypemst pct ON pct.id = co.partPackageID  \n" +
                "        LEFT JOIN users usr ON usr.id = co.activityStartBy  \n" +
                "        left join rfq_assy_typemst rat ON rat.id = co.assemblyType  \n" +
                " 		LEFT JOIN component_packagingmst pck ON pck.id = co.packagingID  \n" +
                "        LEFT JOIN acct_acctmst am ON am.acct_id = co.salesacctId  \n" +
                "        LEFT JOIN acct_acctmst aam ON aam.acct_id = co.purchaseacctId  \n" +
                "		left JOIN vu_component_standard vucomstd ON vucomstd.componentID = co.id  \n" +
                "        left JOIN vu_emp_detail vuempcre ON vuempcre.id = co.createdBy  \n" +
                "        left JOIN vu_emp_detail vuempupd ON vuempupd.id = co.updatedBy  \n" +
                "        left JOIN roles rc ON rc.id = co.createByRoleId  \n" +
                "        left JOIN roles ru ON ru.id = co.updateByRoleId  \n" +
                "        left join vu_rfq_assembly_detail vurfass on vurfass.partId = co.id  \n" +
                "        left join vu_rfq_lineitem_count vurline on vurline.partId = co.id  \n" +
                "        left join vu_sub_assembly_count vusac on vusac.partId = co.id\");  \n" +
                "    IF pIsMFG = FALSE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "			JOIN mfgcodemst mfc ON mfc.id = co.refMfgPNMfgCodeId  \n" +
                "            JOIN COMPONENT vu_co on vu_co.id = co.refSupplierMfgpnComponentID \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "    WHERE co.isdeleted = 0 \");  \n" +
                "  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''MFG'' ');  \n" +
                "    ELSE  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''DIST'' ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pMultiplePartFilterFieldName is not null AND pMultiplePartByUploadFileDetail IS NOT NULL AND pMultiplePartByUploadFileDetail != '')  \n" +
                "    THEN  \n" +
                "		if(pMultiplePartFilterFieldName = 'SystemID')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.serialNumber IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSEif(pMultiplePartFilterFieldName = 'PID Code')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.PIDCode IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgPN IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		IF pComponentOrdering = 'MFG' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"MFGCode asc, \" , pOrderBy);  \n" +
                "            END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'MFGPN' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"mfgPN asc, \" , pOrderBy);  \n" +
                "			END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'USAGE' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partUsage desc, \" , pOrderBy);  \n" +
                "		ELSEIF pComponentOrdering = 'STOCK' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partStock desc, \" , pOrderBy);  \n" +
                "		END IF;  \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgcodeID in (', pMfgCodeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMfgCodeIdsForSupplierParts IS NOT NULL AND pMfgCodeIdsForSupplierParts != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.refMfgPNMfgCodeId in (', pMfgCodeIdsForSupplierParts, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packagingID in (', pPackagingIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackageIDs IS NOT NULL AND pPackageIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partPackageID in (', pPackageIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partStatus in (', pPartStatusIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeID in (', pMountingTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalMountingTypeValues IS NOT NULL AND pExternalMountingTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeText in (', pExternalMountingTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryID in (', pFunctionalTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalFunctionalTypeValues IS NOT NULL AND pExternalFunctionalTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryText in (', pExternalFunctionalTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMultiplePartNumbers IS NOT NULL AND pMultiplePartNumbers != '') THEN  \n" +
                "		IF pIsMFG = TRUE THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "																)');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "																and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                and cc.mfgpn in (', pMultiplePartNumbers, '))  \n" +
                "                                                                OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "                                                                )');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "    IF (pPartTypeIDs IS NOT NULL AND pPartTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partType in (', pPartTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '' AND  \n" +
                "		pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' ) and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "	ELSEIF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' )) ');  \n" +
                "	ELSEIF (pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyIds IS NOT NULL AND pAssemblyIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and rl.partID in (', pAssemblyIds, '))) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyTypeIds IS NOT NULL AND pAssemblyTypeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.assemblyType in (', pAssemblyTypeIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pRohsIds IS NOT NULL AND pRohsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.RoHSStatusID in (', pRohsIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pExternalRoHSStatusListValues IS NOT NULL AND pExternalRoHSStatusListValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsText in (', pExternalRoHSStatusListValues, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsReversal = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isReversal = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsCPN = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isCPN = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsCustom = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isCustom = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsBOMActivityStarted = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isActivityStart = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsOperatingTemperatureBlank = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.operatingTemp is not null and co.operatingTemp != \"\" and (co.minOperatingTemp is null or co.maxOperatingTemp is null) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pObsoleteDate IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, \" AND co.obsoleteDate >= '\",pObsoleteDate,\"'\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsProductionPNEmpty = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.productionPN is null ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pToCreatedOnDate IS NOT NULL AND pFromCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND identicalPNCount > 1 ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pOperationalAttributeIds IS NOT NULL AND pOperationalAttributeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_dynamic_attribute_mapping_part cd  \n" +
                "													   where cd.mfgPNID=co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.attributeID in (',pOperationalAttributeIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pDisapprovedSupplierIds IS NOT NULL AND pDisapprovedSupplierIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_approved_supplier_mst cd  \n" +
                "													   where cd.partID = co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.supplierID in (',pDisapprovedSupplierIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAcceptableShippingCountryIds IS NOT NULL AND pAcceptableShippingCountryIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_acceptable_shipping_countries ca  \n" +
                "														  where ca.isdeleted = false  \n" +
                "															and ca.deletedat is null  \n" +
                "															and ca.refComponentID = co.id  \n" +
                "															and ca.countryID in (',pAcceptableShippingCountryIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pIsRestrictUSEwithpermission = TRUE OR pIsRestrictPackagingUseWithpermission = true OR pIsRestrictUsePermanently = true OR pIsRestrictPackagingUsePermanently = true)  \n" +
                "    THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (');  \n" +
                "        set @restricStatement = '';  \n" +
                "		IF pIsRestrictUSEwithpermission = TRUE THEN  \n" +
                "			SET @restricStatement =  ' co.restrictUSEwithpermission = true ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF pIsRestrictPackagingUseWithpermission = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUseWithpermission = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END),  ' co.restrictUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictPackagingUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "        SET @SQLStatement1 = CONCAT(@SQLStatement1, @restricStatement, ')');  \n" +
                "    END IF;  \n" +
                "	IF (pAttributesSearchHeader IS NOT NULL AND pAttributesSearchHeader != '') THEN  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.minOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.maxOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientValue like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfPosition like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfRows like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.length like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.width like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.height like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', pAttributesSearchHeader, '%'' )) ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc  \n" +
                "																			where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "                                                                            and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                            and cc.mfgPN like ''%', pAttributesSearchHeader, '%'' )  \n" +
                "														      OR exists (select 1 from component_otherpn cp where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.refSupplierMfgpnComponentID and cp.name like (''%', pAttributesSearchHeader, '%'' ))  \n" +
                "																		');  \n" +
                "          END IF;  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN  \n" +
                "		SET attributeSearchString = pAttributesSearch;  \n" +
                "       do_this:  \n" +
                "	  LOOP  \n" +
                "		SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "		SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, ',', 1);  \n" +
                "		SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "		SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+2), attributeSearchLength);  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND  isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.minOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.maxOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.temperatureCoefficientValue)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfPosition)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfRows)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.length)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.width)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.height)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ) ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' )');  \n" +
                "          /*IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID and cc.mfgPN like ''%', attributeSearchChip, '%'' )');  \n" +
                "          END IF;  */  \n" +
                "		IF attributeSearchString = NULL OR attributeSearchString = \"\" THEN  \n" +
                "		  LEAVE do_this;  \n" +
                "		END IF;  \n" +
                "	  END LOOP do_this;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pPackagingAlias IS NOT NULL AND pPackagingAlias != '') THEN  \n" +
                "		IF (pPackagingAlias = '1') THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is not null ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is null ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "		IF (pAlternatePart IS NOT NULL AND pAlternatePart != '') THEN  \n" +
                "			IF (pAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
                "			END IF;  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 1 and ca.isDeleted = 0) ');  \n" +
                "		END IF;  \n" +
                "		IF (pRoHSAlternatePart IS NOT NULL AND pRoHSAlternatePart != '') THEN  \n" +
                "			IF (pRoHSAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
                "			END IF;  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 6 and ca.isDeleted = 0) ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF (pPartUsedInAssembly IS NOT NULL AND pPartUsedInAssembly != '') THEN  \n" +
                "			SET vPartUsedInAssemblyExists = \" \";  \n" +
                "            SET vPartUsedInAssemblyAndOR = \" \";  \n" +
                "			IF (pPartUsedInAssembly = '1') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" OR \";  \n" +
                "			ELSEIF (pPartUsedInAssembly = '2') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" NOT \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" AND \";  \n" +
                "            END IF;  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, 'AND co.category = 2  \n" +
                "															AND ( ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and exists (select 1 from component c where c.id = rl.partid and c.partStatus = 1))) ');  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.partStock >= \", pStockQuantity);  \n" +
                "	END IF;  \n" +
                "   IF pIsExportControl = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,' ',' and c.isExportControl = \"Yes\" ');  \n" +
                "   END IF;  \n" +
                "	IF pIsExcludeIncorrectPart = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isGoodPart in (1,3) ');  \n" +
                "	END IF;  \n" +
                "    DROP temporary TABLE IF EXISTS tempComponentListData;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"create temporary table tempComponentListData  \n" +
                "    select count(1) over(partition by c.mfgType) as totalCount,c.*,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,  \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.updatedAtApi,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtApiValue  \n" +
                "									from ( \", @SQLStatement1,\" ) c  \n" +
                "		where \", pWhereClause , \" \", pOrderBy , rowNumWhere);  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  /* to get total count of rows */  \n" +
                "	-- SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where \", pWhereClause);  \n" +
                "    SET @SQLStatement2 = CONCAT(\" SELECT totalCount from tempComponentListData limit 1\");  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	/*PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" select * from tempComponentListData\");  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "	IF pIsRefreshMasterFilters = TRUE THEN  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT mfgCodeID as mfgcodeID, mfgCode, manufacturerName as mfgName, mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID  \n" +
                "										from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\"  \n" +
                "                                        group by mfgCodeID, mfgCode, manufacturerName , mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID\");  \n" +
                "		 PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" with cte as ( SELECT id from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\" )  \n" +
                "									select * from  \n" +
                "										(select case when stdc.classID is not null then  \n" +
                "													concat(cs.certificateStandardID,':',stdc.classID)  \n" +
                "													else cs.certificateStandardID end certificateStandardID,  \n" +
                "												case when stdc.classID is not null then  \n" +
                "													concat(cs.fullName,' ',stdc.classname)  \n" +
                "													else cs.fullName end fullName,  \n" +
                "												cs.displayOrder  \n" +
                "										  from certificate_standards cs  \n" +
                "										  join component_standard_details csd on csd.certificateStandardID = cs.certificateStandardID  \n" +
                "										  left join standard_class stdc on csd.ClassID = stdc.classID  \n" +
                "										where csd.isDeleted = 0 and csd.deletedAt is null and csd.componentID in (select id from cte)  \n" +
                "										) a group by certificateStandardID, fullName, displayOrder  \n" +
                "										order by displayOrder,fullName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" select distinct cm.countryID, cm.countryName  \n" +
                "					  from component_acceptable_shipping_countries casc  \n" +
                "					  join countrymst cm ON cm.countryid = casc.countryid  \n" +
                "					 where casc.isdeleted = false  \n" +
                "					   and casc.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "									where c.id = casc.refComponentID and \", pWhereClause,\" )  \n" +
                "                                    order by cm.countryName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "         /*SET @SQLStatement2 = CONCAT(\" select distinct cda.id, cda.attributeName  \n" +
                "					  from component_dynamic_attribute_mapping_part cdam  \n" +
                "					  join component_dynamic_attribute cda ON cda.id = cdam.attributeID  \n" +
                "					 where cdam.isdeleted = false  \n" +
                "					   and cdam.deletedat is null  \n" +
                "					   and cda.isdeleted = false  \n" +
                "					   and cda.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "                                     where c.id = cdam.mfgPNID and \", pWhereClause,\" )  \n" +
                "                                     order by cda.attributeName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "    END IF;  \n" +
                "  \n" +
                "		IF (pIsSearchFromHeader = TRUE) THEN  \n" +
                "			/*Fetch Functional Type and Mounting Type wise grouping*/  \n" +
                "			SET @SQLStatement2 = CONCAT(\" select concat(functionalCategoryName,' - ',mountingTypeName) groupName,  \n" +
                "											null groupNameText,  \n" +
                "											functionalCategoryID, mountingTypeID,  \n" +
                "											count(1) recCount  \n" +
                "											from ( \",@SQLStatement1,\" ) c where \", pWhereClause,  \n" +
                "										' group by functionalCategoryName,mountingTypeName,  \n" +
                "													functionalCategoryID, mountingTypeID  \n" +
                "											order by groupName, groupNameText, recCount desc');  \n" +
                "  \n" +
                "            PREPARE query3 FROM @SQLStatement2;  \n" +
                "			EXECUTE query3;  \n" +
                "			DEALLOCATE PREPARE query3;  \n" +
                "        END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-11-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5597,'2.00','V1',' User Story 39209: Improvement Point for create duplicate part & Detail Tab full Delete Part - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5597:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021 *********************************** */
                "ALTER TABLE `customer_addresses`  \n" +
                "ADD COLUMN `latitude` DECIMAL(10,8) NULL,  \n" +
                "ADD COLUMN `longitude` DECIMAL(11,8) NULL;  \n" +
                /* **************************** Add Script Version -> 06-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5598,'2.00','V1',' User Story 38293: Customer / Supplier Geographical View in Stimulsoft - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5598:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021 *********************************** */
                "INSERT INTO `reportmaster`  \n" +
                "(`reportName`, `rdlcReportFileName`, `reportTitle`, `reportViewType`, `createdBy`,`createByRoleId`, `isCSVReport`, `isEndUserReport`, `fileName`, `status`, `reportVersion`, `reportGenerationType`, `isDefaultReport`) VALUES  \n" +
                "('Geographical Address View', 'Geographical Address View', 'Geographical Address View', '0','1', '1', '0', '0', 'GeographicalAddressView', 'P', '1', '4', '0');  \n" +
                "/**/  \n" +
                "INSERT INTO `report_parameter_setting_mapping` (`reportParamName`, `dbColumnName`, `displayName`, `type`, `options`, `isDisplay`, `isDeleted`, `createdBy`,`createdAt`, `createByRoleId`) VALUES ('Para_MFGType', 'mfgType', 'MFG Type', 'R', '{\\\"1\\\":{ \\\"Key\\\":\\\"Customer\\\", \\\"Value\\\":\\\"CUST\\\"},\\\"2\\\":{ \\\"Key\\\":\\\"Supplier\\\", \\\"Value\\\":\\\"DIST\\\"}}', '1', '0', '1',fun_DatetimetoUTCDateTime(), '1');  \n" +
                "INSERT INTO `report_parameter_setting_mapping` (`reportParamName`, `dbColumnName`, `displayName`, `isDisplay`, `isDeleted`, `createdBy`,`createdAt`, `createByRoleId`,`type`,`options`) VALUES ('Para_AddressType', 'addressType', 'Address Type', '1', '0', '1',fun_DatetimetoUTCDateTime(), '1', 'DD','{\\\"1\\\":{ \\\"Key\\\":\\\"Billing Address\\\", \\\"Value\\\":\\\"B\\\"},\\\"2\\\":{ \\\"Key\\\":\\\"Shipping Address\\\", \\\"Value\\\":\\\"S\\\"},\\\"3\\\":{ \\\"Key\\\":\\\"Intermediate Address\\\", \\\"Value\\\":\\\"I\\\"},\\\"4\\\":{ \\\"Key\\\":\\\"Pay To Information\\\", \\\"Value\\\":\\\"P\\\"},\\\"5\\\":{ \\\"Key\\\":\\\"RMA Shipping Address\\\", \\\"Value\\\":\\\"R\\\"}}');  \n" +
                "INSERT INTO `report_parameter_setting_mapping` (`reportParamName`, `dbColumnName`, `displayName`, `type`, `isDisplay`, `createdBy`,`createdAt`, `createByRoleId`) VALUES ('Para_isDefaultAddress', 'isDefaultAddress', 'Is Default Address', 'C', '1','1',fun_DatetimetoUTCDateTime(), '1');  \n" +
                "/**/  \n" +
                "select id into @reportId from reportmaster where reportName = 'Geographical Address View';  \n" +
                "select id into @mfgTypeId from report_parameter_setting_mapping where dbColumnName = 'mfgType';  \n" +
                "select id into @addressTypeId from report_parameter_setting_mapping where dbColumnName = 'addressType';  \n" +
                "select id into @isDefaultAddressId from report_parameter_setting_mapping where dbColumnName = 'isDefaultAddress';  \n" +
                "INSERT INTO `reportmasterparameter` (`reportId`, `parmeterMappingid`, `createdBy`, `createdAt`, `createByRoleId`) VALUES (@reportId, @mfgTypeId, '1', fun_DatetimetoUTCDateTime(), '1');  \n" +
                "INSERT INTO `reportmasterparameter` (`reportId`, `parmeterMappingid`, `createdBy`, `createdAt`, `createByRoleId`) VALUES (@reportId, @addressTypeId, '1', fun_DatetimetoUTCDateTime(), '1');  \n" +
                "INSERT INTO `reportmasterparameter` (`reportId`, `parmeterMappingid`, `createdBy`, `createdAt`, `createByRoleId`) VALUES (@reportId, @isDefaultAddressId, '1', fun_DatetimetoUTCDateTime(), '1');  \n" +
                /* **************************** Add Script Version -> 06-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5599,'2.00','V1',' User Story 38293: Customer / Supplier Geographical View in Stimulsoft - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5599:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_getCustomerSupplierGeographicalLocationReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_getCustomerSupplierGeographicalLocationReportDetails`(  \n" +
                "	IN pEntityType varchar(5),  \n" +
                "	IN pAddressType varchar(5),  \n" +
                "	IN pisDefaultAddress tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vWhereClause VARCHAR(16383);  \n" +
                "    SET vWhereClause = ' 1=1 ';  \n" +
                "	IF(pEntityType IS NOT NULL) THEN  \n" +
                "		IF pEntityType = 'CUST' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cu.mfgType = 'MFG' AND cu.isCustOrDisty = 1 \");  \n" +
                "		ELSEIF pEntityType = 'DIST' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cu.mfgType = 'DIST' \");  \n" +
                "		ELSE  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND 1=1 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAddressType IS NOT NULL) THEN  \n" +
                "		IF pAddressType = 'B' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'B' \");  \n" +
                "		ELSEIF pAddressType = 'S' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'S' \");  \n" +
                "		ELSEIF pAddressType = 'I' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'I' \");  \n" +
                "		ELSEIF pAddressType = 'P' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'P' \");  \n" +
                "		ELSEIF pAddressType = 'R' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'R' \");  \n" +
                "		ELSE  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND 1=1 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pisDefaultAddress = 1 THEN  \n" +
                "		SET vWhereClause = CONCAT(vWhereClause, ' AND cua.isDefault = 1 ');  \n" +
                "    ELSE  \n" +
                "		SET vWhereClause = CONCAT(vWhereClause, ' AND 1=1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    # need to  change in email only set first email from mfgcodemst.  \n" +
                "	SET @tempQuery = CONCAT(\"SELECT DISTINCT CONCAT( IF(cu.legalName = '' OR cu.legalName is null,'' ,CONCAT(cu.legalName, ' d/b/a, ')), IFNULL(cu.mfgName, ''), ' Address: ',IFNULL(cua.street1, ''), ' ',IFNULL(cua.city, ''),', ',IFNULL(cua.state, ''),' ',IFNULL(cua.postcode, ''), ',', IFNULL(c.countryName,''), ' ' ,IFNULL(CONCAT('Email:',SUBSTRING_INDEX(cu.email, \',\', 1)),''), IFNULL(CONCAT(' Phone: ',cu.contact),''), IFNULL(CONCAT('Fax: ',cu.faxNumber),''))AS Address, CONCAT(cua.Latitude ,' ',  cua.longitude) AS Location , cu.mfgCode as Code, cu.mfgName as Name, (case WHEN cu.mfgType = 'MFG' then 'Customer' WHEN cu.mfgType = 'DIST' then 'Supplier' else '' END) as Type, (case WHEN cua.isDefault = 1 then 'Yes' else 'No' END) as DefaultAddress,  \n" +
                "    (case WHEN cua.addressType = 'B' then 'Billing Address' WHEN cua.addressType = 'S' then 'Shipping Address'  WHEN cua.addressType = 'I' then 'Intermediate Address' WHEN cua.addressType = 'P' then 'Pay To Information' WHEN cua.addressType = 'R' then 'RMA Shipping Address' else '' END) as AddressType  \n" +
                "        FROM customer_addresses cua  \n" +
                "				JOIN mfgcodemst cu ON cu.id = cua.customerId  \n" +
                "				LEFT JOIN countrymst c ON cua.countryID=c.countryID  \n" +
                "				WHERE (cua.latitude is not null And cua.longitude is not null) and\", vWhereClause ,\";\");  \n" +
                "  \n" +
                "	PREPARE query1 FROM @tempQuery;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5600,'2.00','V1',' User Story 38293: Customer / Supplier Geographical View in Stimulsoft - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5600:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoiceDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pFilterStatus LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pPoNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearchPO TINYINT,  \n" +
                "	IN pMfgCodeIds LONGTEXT ,  \n" +
                "	IN pPaymentTermsIds LONGTEXT ,  \n" +
                "	IN pPartId VARCHAR(5000) ,  \n" +
                "	IN pTransType VARCHAR(5) ,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
                "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
                "	IN pZeroAmountFilter TINYINT,  \n" +
                "	IN pCreditMemoRefundStatusFilter VARCHAR(100)      ,  \n" +
                "	IN pMarkedForRefund TINYINT  \n" +
                "	-- IN pChequeNumber  VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET v_appliedCMPDJoin = '';  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN  \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
                "	ELSE  \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount ,  \n" +
                "						NULL as totRefundIssuedAgainstCreditMemo , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"  \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,  \n" +
                "        cp.invoiceNumber,cp.invoiceDate, cp.revision,  \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
                "        cp.soNumber,cp.soDate,  \n" +
                "		cp.sorevision,  \n" +
                "        cp.refSalesOrderID,  \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,  \n" +
                "        cp.refCustInvoiceID,  \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "		 cp.status,  \n" +
                "         cp.subStatus,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
                "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
                "			ELSE '' END) AS creditAppliedStatus ,  \n" +
                "		  cp.paymentStatus,  \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
                "		  ifnull(cp.totalAmount,0) totalAmount,  \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,  \n" +
                "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,  \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,  \n" +
                "		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\", vMfgCodeFormat,\") as customerName,  \n" +
                "		 m.mfgcode as customerCode,  \n" +
                "         cp.customerID,  \n" +
                "         cp.createdBy as createdById,  \n" +
                "		\",v_receivedAmtSF,\"  \n" +
                "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,  \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,  \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,  \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,  \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,  \n" +
                "         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,  \n" +
                "         cp.termsDays termDays,  \n" +
                "         cp.freeOnBoardName,  \n" +
                "         cp.isLocked,  \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
                "         packingSlip.id packingSlipId,  \n" +
                "         (select group_concat(paymentNumber)  \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,  \n" +
                "		 (select COUNT(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) cpTrackNumberCount,  \n" +
                "         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
                "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,  \n" +
                "         (SELECT `paymentDate` FROM packingslip_invoice_payment_det pipd  \n" +
                "					JOIN packingslip_invoice_payment pip ON pipd.`refPayementid` = pip.id  \n" +
                "		WHERE pipd.`refCustPackingslipInvoiceID` = cp.id AND pip.refPaymentMode = 'R' AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "		AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0 ORDER BY pipd.id DESC LIMIT 1) AS lastRcvdPaymentDate  \n" +
                "  \n" +
                "	 FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID  \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
                "		\" , v_appliedCMPDJoin ,\"  \n" +
                "	WHERE  cp.isDeleted=0  \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.termsId in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPartId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN  \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');  \n" +
                "	# END IF;  \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) END) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) END) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
                "		IF pIsExactSearchPO = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
                "                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
                "                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
                "	IF pFromDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pToDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- filter zero amount invoice  \n" +
                "	IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefund = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "		 round((c.totalAmount),2) totalAmount,  \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,  \n" +
                "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0) + IFNULL(c.totRefundIssuedAgainstCreditMemo,0) ),2)  \n" +
                "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,  \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
                "						else '' end) materialStatus from ( \",  \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	--  select @SQLStatement2	;  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustAgedReceivablesRangeDet` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustAgedReceivablesRangeDet`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pAgedReceivablesDueAsOfDate DATE ,  \n" +
                "	IN pDueDate DATE ,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT  ,  \n" +
                "	IN pIsIncludeZeroValueInvoices TINYINT ,  \n" +
                "	IN pCustomerID VARCHAR(10000) ,  \n" +
                "	IN pAgedRecvAmtWithIn VARCHAR(20),  \n" +
                "	IN pIsAllCustAllInvOnly TINYINT,  \n" +
                "	IN pIsAllCustAllUninvOnly TINYINT,  \n" +
                "	IN pIsAllCustAllDraftCMOnly TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE vDueDate DATE;  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);  \n" +
                "	DECLARE vAgedAmtWithIn VARCHAR(1000);  \n" +
                "	-- DECLARE vSumOfAgedAmtWithIn VARCHAR(1000);  \n" +
                "	DECLARE vWCCustIDForInv VARCHAR(10000);  \n" +
                "	DECLARE vWCCustIDForPMT VARCHAR(10000);  \n" +
                "	DECLARE vWCAllCustAllInv VARCHAR(100);  \n" +
                "	DECLARE vAgedAmtWithInCondition VARCHAR(1000);  \n" +
                "  \n" +
                "	SET vAgedAmtWithIn = \" \";  \n" +
                "	-- SET vSumOfAgedAmtWithIn = \" \";  \n" +
                "	SET vWCCustIDForInv = \" \";  \n" +
                "	SET vWCCustIDForPMT = \" \";  \n" +
                "	SET vWCAllCustAllInv = \" \";  \n" +
                "	SET vAgedAmtWithInCondition = '';  \n" +
                "	/* cps.subStatus 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "	IF (pTermsAndAboveDays IS NOT NULL) THEN  \n" +
                "		SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;  \n" +
                "		SET vDueDate = DATE_ADD(currDateWithAppliedTimeZone, INTERVAL IFNULL(pTermsAndAboveDays,0) DAY);  \n" +
                "	ELSE  \n" +
                "		SET vDueDate = DATE_ADD(pDueDate, INTERVAL IFNULL(pAdditionalDays,0) DAY);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pAgedRecvAmtWithIn IS NOT NULL AND pAgedRecvAmtWithIn != '') THEN  \n" +
                "		IF (pAgedRecvAmtWithIn = 'TotPastDue') THEN  \n" +
                "			-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.totalDueAmount) totalAmountOfAgedDueReceivable , ') ;  \n" +
                "			SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount` , ') ;  \n" +
                "			SET vAgedAmtWithInCondition = CONCAT( ' AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) ');  \n" +
                "		ELSEIF (pAgedRecvAmtWithIn = 'CurrAmtWithinTerms') THEN  \n" +
                "			-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.currentAmount) totalAmountWithinTerms , ') ;  \n" +
                "			SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount` , ') ;  \n" +
                "			SET vAgedAmtWithInCondition = CONCAT( ' AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) ');  \n" +
                "		ELSEIF (pAgedRecvAmtWithIn = '0-30') THEN  \n" +
                "			-- set vSumOfAgedAmtWithIn = concat( ' SUM(temp_aged_details.agedAmountAs0To30) agedAmountAs0To30 , ') ;  \n" +
                "			SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 30)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs0To30` , ') ;  \n" +
                "			SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 30)) ');  \n" +
                "		ELSEIF (pAgedRecvAmtWithIn = '31-60') THEN  \n" +
                "			-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs31To60) agedAmountAs31To60 , ') ;  \n" +
                "			SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 31) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 60)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs31To60` , ') ;  \n" +
                "			SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 31) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 60)) ' );  \n" +
                "		ELSEIF (pAgedRecvAmtWithIn = '61-90') THEN  \n" +
                "			-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs61To90) agedAmountAs61To90 , ') ;  \n" +
                "			SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 61) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 90)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs61To90` , ') ;  \n" +
                "			SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 61) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 90)) ' );  \n" +
                "		ELSEIF (pAgedRecvAmtWithIn = '91-120') THEN  \n" +
                "			-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs91To120) agedAmountAs91To120 , ') ;  \n" +
                "			SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 91) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 120)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs91To120` , ') ;  \n" +
                "			SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 91) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 120)) ' );  \n" +
                "		ELSEIF (pAgedRecvAmtWithIn = '120+') THEN  \n" +
                "			-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs121more) agedAmountAs121More , ') ;  \n" +
                "			SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 121) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs121more` , ') ;  \n" +
                "			SET vAgedAmtWithInCondition = CONCAT( ' AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 121) ' );  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pCustomerID IS NOT NULL AND pCustomerID != '') THEN  \n" +
                "		SET vWCCustIDForInv = CONCAT(' AND `a`.`customerID` IN (',pCustomerID,') ');  \n" +
                "		SET vWCCustIDForPMT = CONCAT(' AND `a`.`mfgcodeID` IN (',pCustomerID,') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsAllCustAllInvOnly = 1) THEN  \n" +
                "		SET vWCAllCustAllInv = CONCAT(' WHERE `cid`.`invoiceCount` = 1 ');  \n" +
                "	ELSEIF (pIsAllCustAllUninvOnly = 1) THEN  \n" +
                "		SET vWCAllCustAllInv = CONCAT(' WHERE `cid`.`unInvoiceCount` = 1 ');  \n" +
                "	ELSEIF (pIsAllCustAllDraftCMOnly = 1) THEN  \n" +
                "		SET vWCAllCustAllInv = CONCAT(' WHERE `cid`.`dratftCreditMemoCount` = 1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_balanceDue = CONCAT(\"  \n" +
                "	SELECT  temp_aged_details.*,  \n" +
                "		fun_getMfgCodeAndNameByID(temp_aged_details.customerID) AS customerCodeName  \n" +
                "  \n" +
                "	 FROM (  \n" +
                "			SELECT  \n" +
                "				  `cid`.`customerID`                  AS `customerID`,  \n" +
                "				  `cid`.`transMstID` 		      AS `transMstID`,  \n" +
                "				  `cid`.`transNumber` 		      AS `transNumber` ,  \n" +
                "				  `cid`.`transType`		      AS  `transType` ,  \n" +
                "				  `cid`.`transTypeText` 	      AS `transTypeText` ,  \n" +
                "				  SUM(`cid`.`invoiceCount`)           AS `invoiceCount`,  \n" +
                "				  SUM(`cid`.`unInvoiceCount`)         AS `unInvoiceCount`,  \n" +
                "				  SUM(`cid`.`dratftCreditMemoCount`)  AS `dratftCreditMemoCount`,  \n" +
                "				  `cid`.`DocDate`                     AS `DocDate`,  \n" +
                "				  `cid`.`termsDays`                   AS `termsDays`,  \n" +
                "				  (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) AS `DueDaysDiff`,  \n" +
                "				  -- (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount`,  \n" +
                "				  -- (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount`,  \n" +
                "				  \",vAgedAmtWithIn,\"  \n" +
                "				  (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) AS `totalOutstandingAmount`,  \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`))  AS `totalCreditMemoAmount`,  \n" +
                "				  SUM(`cid`.`totalUnappliedAmount`)   AS `totalUnappliedAmount`,  \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`) + SUM(`cid`.`totalUnappliedAmount`)) AS `totalCreditAmount`,  \n" +
                "				  SUM(`cid`.`totalInvoicedAmount`)    AS `totalCustomerInvoicedAmount`,  \n" +
                "				  SUM(`cid`.`totalDraftAmount`)       AS `totalDraftAmount`,  \n" +
                "				  SUM(`cid`.`totalRecievedAmount`)    AS `totalRecievedAmount`,  \n" +
                "				  (CASE WHEN ((SUM(`cid`.`totalInvoicedAmount`) <> 0) AND (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`)) = 0) THEN 1 ELSE 0 END) paidInvoiceCount  \n" +
                "			FROM  \n" +
                "				(  \n" +
                "					SELECT  \n" +
                "						 `a`.`customerID`                     AS `customerID`,  \n" +
                "						 `a`.termsDays			      AS `termsDays`,  \n" +
                "						 `a`.`id`                             AS `transMstID`,  \n" +
                "						 IF((`a`.`transType` = 'I'), `a`.`invoiceNumber`, `a`.`creditMemoNumber`) AS `transNumber`,  \n" +
                "						 `a`.`transType`		      AS `transType` ,  \n" +
                "						IF((`a`.`transType` = 'I'), 'Customer Invoice', 'Customer Credit Memo') AS `transTypeText`,  \n" +
                "						IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),1,0) AS `invoiceCount`,  \n" +
                "						IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),1,0) AS `unInvoiceCount`,  \n" +
                "						IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '1')),1,0) AS `dratftCreditMemoCount`,  \n" +
                "						IF((`a`.`transType` = 'I'),`a`.`invoiceDate`,`a`.`creditMemoDate`) AS `DocDate`,  \n" +
                "						IFNULL(b.totalCustomerInvoiceReceivedAmount,0)  AS `totalRecievedAmount`,  \n" +
                "						0                                    AS `totalUnappliedAmount`,  \n" +
                "						IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '2')),(IFNULL(`a`.`totalAmount`,0) + (IFNULL(c.totalCreditMemoAppliedAmount,0) + IFNULL(d.totRefundIssuedAgainstCreditMemo,0))),0) AS `totalUnappliedCreditMemoAmount`,  \n" +
                "						IFNULL(c.totalCreditMemoAppliedAmount, 0) AS totalCreditMemoAppliedAmount,  \n" +
                "						IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalInvoicedAmount`,  \n" +
                "						-- IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalDraftAmount`  \n" +
                "						(CASE WHEN `a`.`transType` = 'I' AND (`a`.`subStatus` = '1' OR `a`.`subStatus` > '3') THEN IFNULL(`a`.`totalAmount`,0)  \n" +
                "							WHEN `a`.`transType` = 'C' AND `a`.`subStatus` = '1' THEN IFNULL(`a`.`totalAmount`,0)  \n" +
                "							ELSE 0 END) AS totalDraftAmount  \n" +
                "					FROM `customer_packingslip` `a`  \n" +
                "							LEFT JOIN 	(SELECT     `b`.`refCustPackingslipInvoiceID`     					AS `refCustPackingslipInvoiceID`,  \n" +
                "											      SUM(IF(a.refPaymentMode='R',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalRecievedAmount`,  \n" +
                "											      0									  	AS `totalCreditMemoAppliedAmount`,  \n" +
                "												SUM(IFNULL(`b`.`paymentAmount`,0))    					AS `totalCustomerInvoiceReceivedAmount`  \n" +
                "											    FROM (`packingslip_invoice_payment` `a`  \n" +
                "											       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "												 ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "											    WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "												   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "												   AND (`a`.`refPaymentMode` IN ('R','CA','WOFF')))  \n" +
                "											    GROUP BY `b`.`refCustPackingslipInvoiceID` ) b  \n" +
                "											ON a.id = b.refCustPackingslipInvoiceID  \n" +
                "  \n" +
                "							LEFT JOIN 	(  \n" +
                "										SELECT  \n" +
                "												a.`refCustCreditMemoID` AS refCustCreditMemoID,  \n" +
                "												SUM(IF(a.refPaymentMode='CA',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalCreditMemoAppliedAmount`  \n" +
                "										FROM `packingslip_invoice_payment` `a`  \n" +
                "											       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "												 ON (`b`.`refPayementid` = `a`.`id`)  \n" +
                "											    WHERE (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "												   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "												   AND (`a`.`refPaymentMode` IN ('R','CA'))  \n" +
                "											    GROUP BY `a`.`refCustCreditMemoID`  \n" +
                "											    ) c  ON a.id = c.refCustCreditMemoID  \n" +
                "							LEFT JOIN (  \n" +
                "										SELECT SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo , refRefundCustCreditMemoID  \n" +
                "											FROM packingslip_invoice_payment_det  \n" +
                "											WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "											GROUP BY refRefundCustCreditMemoID  \n" +
                "										) d  ON a.id = d.refRefundCustCreditMemoID  \n" +
                "					WHERE ( (`a`.`transType` IN('I','C'))  \n" +
                "					\",vWCCustIDForInv,\"  \n" +
                "					AND  (a.paymentStatus <> 'RE')  \n" +
                "					-- AND  (IFNULL(a.totalAmount,0) != 0)  \n" +
                "					AND (CASE WHEN \",pIsIncludeZeroValueInvoices,\" = 0 AND a.transType = 'I' THEN IFNULL(a.totalAmount,0) > 0 ELSE 1=1 END)  \n" +
                "					AND (`a`.`isDeleted` = 0))  \n" +
                "  \n" +
                "				UNION  \n" +
                "  \n" +
                "					SELECT  \n" +
                "						`a`.`mfgcodeID`                       					AS `customerID`,  \n" +
                "						NULL									AS `termsDays`,  \n" +
                "						`a`.`id`								AS `transMstID`,  \n" +
                "						`a`.`paymentNumber`							AS `transNumber` ,  \n" +
                "						'R'		  	    						AS `transType` ,  \n" +
                "						'Customer Payment' 							AS `transTypeText`,  \n" +
                "						0                                     					AS `invoiceCount`,  \n" +
                "						0                                     					AS `unInvoiceCount`,  \n" +
                "						0                                     					AS `dratftCreditMemoCount`,  \n" +
                "						`a`.`paymentDate`                     					AS `DocDate`,  \n" +
                "						0  									AS `totalRecievedAmount`,  \n" +
                "						((IFNULL(`a`.`paymentAmount`,0) - (SUM(IFNULL(`b`.`paymentAmount`,0)) + IFNULL(c.totRefundIssuedOfPayment,0))) * -(1)) 	AS `totalUnappliedAmount`,  \n" +
                "						0                                     					AS `totalUnappliedCreditMemoAmount`,  \n" +
                "						0									AS `totalCreditMemoAppliedAmount`,  \n" +
                "						0                                     					AS `totalInvoicedAmount`,  \n" +
                "						0                                     					AS `totalDraftAmount`  \n" +
                "						FROM (`packingslip_invoice_payment` `a`  \n" +
                "							LEFT JOIN `packingslip_invoice_payment_det` `b` ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "							LEFT JOIN (  \n" +
                "									SELECT SUM(paymentAmount) AS totRefundIssuedOfPayment , refRefundPaymentID  \n" +
                "									FROM packingslip_invoice_payment_det  \n" +
                "									WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "									GROUP BY refRefundPaymentID  \n" +
                "								     ) c  ON a.id = c.refRefundPaymentID  \n" +
                "						WHERE ( (`a`.`refPaymentMode` = 'R')  \n" +
                "						\",vWCCustIDForPMT,\"  \n" +
                "						AND (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "						AND (`a`.`isPaymentVoided` = 0) )  \n" +
                "						GROUP BY `a`.`mfgcodeID`, a.id  ,`a`.`paymentDate`,`a`.`paymentAmount` , `a`.`paymentNumber`  \n" +
                "						HAVING  ((IFNULL(`a`.`paymentAmount`,0) - SUM(IFNULL(`b`.`paymentAmount`,0))) * -(1))  != 0  \n" +
                "				) AS  cid  \n" +
                "  \n" +
                "			\",vWCAllCustAllInv,\"  \n" +
                "			GROUP BY `cid`.`customerID`,`cid`.`transMstID`, `cid`.`transNumber` ,  \n" +
                "				`cid`.`DocDate`, `cid`.`termsDays` ,  `cid`.`transType` , `cid`.`transTypeText` ,  \n" +
                "				(TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY)))  \n" +
                "			HAVING (CASE WHEN `cid`.`transType` = 'C' AND \",pIsAllCustAllDraftCMOnly,\" != 1 THEN SUM(`cid`.`totalUnappliedCreditMemoAmount`) != 0  \n" +
                "						\",vAgedAmtWithInCondition,\"  \n" +
                "					WHEN `cid`.`transType` = 'I' AND \",pIsAllCustAllUninvOnly,\" != 1 THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) != 0)  \n" +
                "						\",vAgedAmtWithInCondition,\"  \n" +
                "					WHEN `cid`.`transType` = 'R' THEN SUM(`cid`.`totalUnappliedAmount`) != 0  \n" +
                "				ELSE 1=1 END)  \n" +
                "  \n" +
                "  \n" +
                "                   ) AS temp_aged_details  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	\");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY transTypeText asc, customerCodeName asc \") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_balanceDue ,\" ) c where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*  \n" +
                "			FROM 	(\", @temp_balanceDue ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "	-- SELECT @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5601,'2.00','V1',' Aged Receivable SPs - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5601:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_LockUnlockCustPaymentTransaction` ;  \n" +
                "CREATE PROCEDURE `Sproc_LockUnlockCustPaymentTransaction`(  \n" +
                "	IN pIsLockTransaction TINYINT,  \n" +
                "	IN pCustInvoicePaymentList JSON,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN isViewToBeLockUnlockRecords TINYINT,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_cntOfAlreadyVoidedPMT INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedPMT INT;  \n" +
                "	DECLARE totRefundPMTMasterIDs INT;  \n" +
                "	DECLARE mlc INT DEFAULT 0;  \n" +
                "	DECLARE totCustInvPayments INT;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE v_cntOfUnLockPMT INT;  \n" +
                "	DECLARE v_oldLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_newLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_oldLockStatusInv INT;  \n" +
                "	DECLARE v_newLockStatusInv INT;  \n" +
                "	DECLARE v_newLockedAt DATETIME;  \n" +
                "	DECLARE v_newLockedBy VARCHAR(20);  \n" +
                "	DECLARE v_newLockedByRoleId INT;  \n" +
                "	DECLARE v_CurrRefGencTransModeID INT;  \n" +
                "	DECLARE v_cntOfNotAllowedToLockRecord INT;  \n" +
                "  \n" +
                "	SET v_cntOfNotAllowedToLockRecord = 0;  \n" +
                "  \n" +
                "  \n" +
                "	 /* RL - Ready to lock, LC - locked */  \n" +
                "	IF (pIsLockTransaction = 1) THEN  \n" +
                "		/* lock transaction action */  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SET v_oldLockStatusPMT = 'RL';  \n" +
                "		ELSE  \n" +
                "			SET v_oldLockStatusPMT = NULL;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_newLockStatusPMT = 'LC';  \n" +
                "		SET v_oldLockStatusInv = 0;  \n" +
                "		SET v_newLockStatusInv = 1;  \n" +
                "		SET v_newLockedAt = fun_DatetimetoUTCDateTime();  \n" +
                "		SET v_newLockedBy = pUserID;  \n" +
                "		SET v_newLockedByRoleId = pUserRoleID;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		/* unlock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = 'LC';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SET v_newLockStatusPMT = 'RL';  \n" +
                "		ELSE  \n" +
                "			SET v_newLockStatusPMT = NULL;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_oldLockStatusInv = 1;  \n" +
                "		SET v_newLockStatusInv = 0;  \n" +
                "		SET v_newLockedAt = NULL;  \n" +
                "		SET v_newLockedBy = NULL;  \n" +
                "		SET v_newLockedByRoleId = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* temporary table for display to be lock/unlock records */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
                "	CREATE TEMPORARY TABLE tt_DB_ToBeLockUnlockInvCMPMTList(  \n" +
                "		tblMstID INT NOT NULL,  \n" +
                "		invCMPMTNumber VARCHAR(150),  \n" +
                "		invCMPMTDate DATE,  \n" +
                "		entityShortCode VARCHAR(10),  \n" +
                "		entityNameForChange VARCHAR(150)  \n" +
                "	);  \n" +
                "  \n" +
                "	/* get/map all Customer invoice Payment List send from UI */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_UI_CustInvoicePaymentList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_UI_CustInvoicePaymentList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pCustInvoicePaymentList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`invPaymentMstID` INT PATH \"$.invPaymentMstID\"  \n" +
                "			)  \n" +
                "		) AS CustInvoicePaymentList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "	/* check if any voided payment there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyVoidedPMT  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "	AND isPaymentVoided = 1  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	/* check if any locked/unlocked payment there */  \n" +
                "	SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedPMT  \n" +
                "	FROM packingslip_invoice_payment  \n" +
                "	WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "	AND lockStatus = v_newLockStatusPMT  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	/* when customer refund then check all records valid or not - to display list */  \n" +
                "	IF (pRefPaymentMode = 'CR' AND pIsLockTransaction = 1) THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tt_CustRefundValidatedList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tt_CustRefundValidatedList AS  \n" +
                "			SELECT pip.id AS custRefundMstID, pip.paymentNumber , pip.systemId , pip.subStatus ,  \n" +
                "				`fun_getCustRefundSubStatusNameByID`(pip.subStatus) AS refundSubStatusName ,  \n" +
                "				(CASE WHEN pip.refGencTransModeID = -6 THEN COUNT(pipd.refRefundCustCreditMemoID)  \n" +
                "					WHEN refGencTransModeID = -9 THEN COUNT(pipd.refRefundPaymentID)  \n" +
                "				    ELSE NULL END) detItemCount,  \n" +
                "				(CASE WHEN pip.refGencTransModeID = -6 THEN  \n" +
                "						(SELECT COUNT(1) FROM customer_packingslip WHERE FIND_IN_SET(id, (GROUP_CONCAT(pipd.refRefundCustCreditMemoID))) AND isLocked != 1)  \n" +
                "					WHEN refGencTransModeID = -9 THEN  \n" +
                "						(SELECT COUNT(1) FROM packingslip_invoice_payment WHERE FIND_IN_SET(id, (GROUP_CONCAT(pipd.refRefundPaymentID))) AND lockStatus != 'LC')  \n" +
                "					ELSE NULL END) detItemNotLockedCount  \n" +
                "			FROM packingslip_invoice_payment pip  \n" +
                "				LEFT JOIN packingslip_invoice_payment_det pipd ON pip.id = pipd.refPayementid AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "			WHERE pip.id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "			AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "			 GROUP BY pip.id , pip.paymentNumber , pip.systemId , pip.subStatus ,  \n" +
                "			 	`fun_getCustRefundSubStatusNameByID`(pip.subStatus) , pip.refGencTransModeID  \n" +
                "			;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_cntOfNotAllowedToLockRecord  \n" +
                "			FROM tt_CustRefundValidatedList  \n" +
                "			WHERE ((detItemNotLockedCount > 0) OR (subStatus != 4))  \n" +
                "			;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT = 0 AND v_cntOfAlreadyLockedUnlockedPMT = 0 AND v_cntOfNotAllowedToLockRecord = 0) THEN  \n" +
                "  \n" +
                "		IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "			/* get list of all payments transaction to be locked/unlocked - selected from UI */  \n" +
                "			INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "			SELECT id, paymentNumber, paymentDate, pRefPaymentMode,  \n" +
                "				(CASE WHEN pRefPaymentMode = 'R' THEN  'Customer Payment' WHEN pRefPaymentMode = 'WOFF' THEN 'Customer Write Off'  \n" +
                "					WHEN pRefPaymentMode = 'CR' THEN 'Customer Refund' END) AS entityNameForChange  \n" +
                "			FROM packingslip_invoice_payment  \n" +
                "			WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "			-- AND lockStatus = v_oldLockStatusPMT  \n" +
                "			AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "			AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "			;  \n" +
                "		ELSE  \n" +
                "			/* update all payments transaction to locked/unlocked - selected from UI */  \n" +
                "			UPDATE packingslip_invoice_payment  \n" +
                "			SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "			    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "			    updateByRoleId = pUserRoleID , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "			    updatedBy = pUserID  \n" +
                "			WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList)  \n" +
                "			-- AND lockStatus = v_oldLockStatusPMT  \n" +
                "			AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "			AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "			;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "				IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "					/* get all payment dependent write off if any */  \n" +
                "					INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "					SELECT refPaymentID, paymentNumber, paymentDate, 'WOFF', 'Customer Write Off'  \n" +
                "					FROM packingslip_invoice_payment  \n" +
                "					WHERE refPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "					AND refPaymentMode = 'WOFF'  \n" +
                "					AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
                "							ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					;  \n" +
                "  \n" +
                "				ELSE  \n" +
                "					/* update all payment dependent write off if any. we are maintaining lockStatus NA,RL for payment only  \n" +
                "					 not for write off, refund, applied CM so condition accordingly */  \n" +
                "					UPDATE packingslip_invoice_payment  \n" +
                "					SET lockStatus = (CASE WHEN pIsLockTransaction = 1 THEN v_newLockStatusPMT ELSE NULL END)  \n" +
                "							 , lockedAt = v_newLockedAt ,  \n" +
                "					    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "					    updateByRoleId = pUserRoleID , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    updatedBy = pUserID  \n" +
                "					WHERE refPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "					AND refPaymentMode = 'WOFF'  \n" +
                "					AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
                "							ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "					;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R','CR')) THEN  \n" +
                "			/* payment lock/unlock - If payment dependent Refund then Lock/Unlock (Check for all payment must be lock)  \n" +
                "			    OR direct customer refund Lock/Unlock case */  \n" +
                "  \n" +
                "			IF (pRefPaymentMode = 'R') THEN  \n" +
                "				SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			ELSEIF(pRefPaymentMode = 'CR') THEN  \n" +
                "				/* when refund then no need of loop to get refRefundIDs. we already have selected refund list  \n" +
                "					so set 1 as default to start outer loop*/  \n" +
                "				SELECT 1 INTO totCustInvPayments ;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			/* outer loop of main payment - lock/unlock transaction entity */  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				/* get refund payment master ids from selected payment */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tt_refundPMTMasterIDs ;  \n" +
                "				IF (pRefPaymentMode = 'R') THEN  \n" +
                "					CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "						SELECT pipd.refPayementid  \n" +
                "						FROM packingslip_invoice_payment_det pipd  \n" +
                "							JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id  \n" +
                "									AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "						WHERE pipd.refRefundPaymentID = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "						AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "						GROUP BY pipd.refPayementid ;  \n" +
                "				ELSEIF(pRefPaymentMode = 'CR') THEN  \n" +
                "					CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "						SELECT invPaymentMstID AS refPayementid , pip.refGencTransModeID  \n" +
                "						FROM tt_UI_CustInvoicePaymentList tuip  \n" +
                "							JOIN packingslip_invoice_payment pip ON tuip.invPaymentMstID = pip.id  \n" +
                "								AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "  \n" +
                "						;  \n" +
                "  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO totRefundPMTMasterIDs FROM tt_refundPMTMasterIDs ;  \n" +
                "  \n" +
                "				IF (totRefundPMTMasterIDs > 0) THEN  \n" +
                "  \n" +
                "					SET i=0;  \n" +
                "  \n" +
                "					/* first inner loop of refund payment master list */  \n" +
                "					WHILE i < totRefundPMTMasterIDs DO  \n" +
                "  \n" +
                "						SET v_cntOfUnLockPMT = NULL;  \n" +
                "  \n" +
                "						IF (pIsLockTransaction = 1) THEN  \n" +
                "  \n" +
                "							IF (pRefPaymentMode = 'CR') THEN  \n" +
                "								SELECT refGencTransModeID INTO v_CurrRefGencTransModeID  \n" +
                "								FROM tt_refundPMTMasterIDs LIMIT i,1 ;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							IF (pRefPaymentMode = 'R' OR (pRefPaymentMode = 'CR' AND v_CurrRefGencTransModeID = -9)) THEN  \n" +
                "								/* check all payments contain in refund transaction that all locked or not */  \n" +
                "								SELECT COUNT(1) INTO v_cntOfUnLockPMT  \n" +
                "								FROM packingslip_invoice_payment  \n" +
                "								WHERE id IN (	SELECT refRefundPaymentID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "										AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										AND (CASE WHEN isViewToBeLockUnlockRecords = 1  \n" +
                "											THEN refRefundPaymentID != (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "											ELSE 1=1 END)  \n" +
                "										)  \n" +
                "								AND lockStatus != 'LC' ;  \n" +
                "  \n" +
                "							ELSEIF (pRefPaymentMode = 'CR' AND v_CurrRefGencTransModeID = -6) THEN  \n" +
                "								/* check all credit memo contain in refund transaction that all locked or not */  \n" +
                "								SELECT COUNT(1) INTO v_cntOfUnLockPMT  \n" +
                "								FROM customer_packingslip  \n" +
                "								WHERE id IN (	SELECT refRefundCustCreditMemoID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "										AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										)  \n" +
                "								AND isLocked != 1 ;  \n" +
                "							ELSE  \n" +
                "								/* in case of Transaction Mode other than over payment then no need to check any one unlock case */  \n" +
                "								SET v_cntOfUnLockPMT = 0;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "						ELSE  \n" +
                "							/* in unlock case no need to check all payment locked or not. just make unlock refund */  \n" +
                "							SET v_cntOfUnLockPMT = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "  \n" +
                "						IF (v_cntOfUnLockPMT IS NOT NULL AND v_cntOfUnLockPMT = 0) THEN  \n" +
                "							IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "								/* for lock payment case need to display refund records too */  \n" +
                "								IF (pRefPaymentMode = 'R') THEN  \n" +
                "									/* get refund transaction to be lock/unlock */  \n" +
                "									INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "									SELECT id, paymentNumber, paymentDate, 'CR', 'Customer Refund'  \n" +
                "									FROM packingslip_invoice_payment  \n" +
                "									WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "									AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
                "										ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "									AND refPaymentMode = 'CR'  \n" +
                "									AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "									AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "									;  \n" +
                "								END IF;  \n" +
                "							ELSE  \n" +
                "								/* update refund transaction to locked/unlocked */  \n" +
                "								UPDATE packingslip_invoice_payment  \n" +
                "								SET lockStatus = (CASE WHEN pIsLockTransaction = 1 THEN v_newLockStatusPMT ELSE NULL END) ,  \n" +
                "								  lockedAt = v_newLockedAt ,  \n" +
                "								    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "								    updateByRoleId = pUserRoleID , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "								     updatedBy = pUserID  \n" +
                "								WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "								AND (CASE WHEN pIsLockTransaction = 1 THEN lockStatus IS NULL  \n" +
                "									ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "								AND refPaymentMode = 'CR'  \n" +
                "								AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "								;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET i = i + 1;  \n" +
                "					END WHILE;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF (pRefPaymentMode IN ('R','WOFF')) THEN  \n" +
                "			/* update all fully payment received invoice to locked status */  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO totCustInvPayments FROM tt_UI_CustInvoicePaymentList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "			WHILE mlc < totCustInvPayments DO  \n" +
                "  \n" +
                "				/* IF (pRefPaymentMode = 'R' OR (pRefPaymentMode = 'WOFF' AND pIsLockTransaction = 0)) THEN  */  \n" +
                "  \n" +
                "				IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "					INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "					SELECT cps.id, cps.invoiceNumber, cps.invoiceDate, 'I', 'Customer Invoice'  \n" +
                "					FROM customer_packingslip cps  \n" +
                "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							 AND pipd.refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "							 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInv  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "				ELSE  \n" +
                "					UPDATE customer_packingslip cps  \n" +
                "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							 AND pipd.refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "							 AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "					SET cps.isLocked = v_newLockStatusInv , cps.lockedAt = v_newLockedAt ,  \n" +
                "					    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
                "					    cps.updateByRoleId = pUserRoleID , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    cps.updatedBy = pUserID  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInv  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				/* ELSEIF (pRefPaymentMode = 'WOFF' AND pIsLockTransaction = 1) THEN  \n" +
                "					UPDATE customer_packingslip cps  \n" +
                "						 JOIN (SELECT refCustPackingslipInvoiceID ,  \n" +
                "								MIN(CASE WHEN lockStatus = 'LC' THEN 1 ELSE 0 END) AS isInvLockAllowed  \n" +
                "							FROM (  \n" +
                "								SELECT pip.id AS custPaymentMstID, pip.lockStatus, pip.refPaymentMode,  \n" +
                "									pipd.id AS custPaymentDetMstID, pipd.refCustPackingslipInvoiceID  \n" +
                "								FROM packingslip_invoice_payment_det pipd  \n" +
                "									JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0  \n" +
                "								WHERE pipd.refCustPackingslipInvoiceID IN ( SELECT refCustPackingslipInvoiceID  \n" +
                "														FROM packingslip_invoice_payment_det  \n" +
                "														WHERE refPayementid = (SELECT invPaymentMstID FROM tt_UI_CustInvoicePaymentList LIMIT mlc,1)  \n" +
                "														AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "														)  \n" +
                "								AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "								) AS tiila  \n" +
                "							 GROUP BY refCustPackingslipInvoiceID  \n" +
                "							) AS toila  \n" +
                "							ON cps.id = toila.refCustPackingslipInvoiceID AND toila.isInvLockAllowed = 1  \n" +
                "  \n" +
                "					SET cps.isLocked = v_newLockStatusInv , cps.lockedAt = v_newLockedAt ,  \n" +
                "					    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
                "					    cps.updateByRoleId = v_newLockedByRoleId , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    cps.updatedBy = v_newLockedBy  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInv  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "  \n" +
                "				END IF;  */  \n" +
                "  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* if no temp table tt_CustRefundValidatedList created then create it with no records */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_CustRefundValidatedList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF ( (v_cntOfAlreadyVoidedPMT > 0) OR (v_cntOfAlreadyLockedUnlockedPMT > 0) OR (v_cntOfNotAllowedToLockRecord > 0)  \n" +
                "		OR (isViewToBeLockUnlockRecords = 1) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - is Payment Already Voided */  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyVoided ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyVoided ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[2] - is Payment Already locked */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* resp[3] - get is Any Not Allowed To Lock Record found */  \n" +
                "	 IF (v_cntOfNotAllowedToLockRecord > 0) THEN  \n" +
                "		SELECT 1 AS isAnyNotAllowedToLockRecord ;  \n" +
                "	 ELSE  \n" +
                "		SELECT 0 AS isAnyNotAllowedToLockRecord ;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	 /* resp[4] - get all validateed refund record list */  \n" +
                "	 SELECT * FROM tt_CustRefundValidatedList ;  \n" +
                "  \n" +
                "	 /* Resp[5] - view to be lock/unlock record list */  \n" +
                "	SELECT * FROM tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
                "  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_LockUnlockCustInvCMTransaction` ;  \n" +
                "CREATE PROCEDURE `Sproc_LockUnlockCustInvCMTransaction`(  \n" +
                "	IN pIsLockTransaction TINYINT,  \n" +
                "	IN pCustInvCMList JSON,  \n" +
                "	IN pTransType VARCHAR(10),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN isViewToBeLockUnlockRecords TINYINT,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_oldLockStatusInvCM INT;  \n" +
                "	DECLARE v_newLockStatusInvCM INT;  \n" +
                "	DECLARE v_newLockedAt DATETIME;  \n" +
                "	DECLARE v_newLockedBy VARCHAR(20);  \n" +
                "	DECLARE v_newLockedByRoleId INT;  \n" +
                "	DECLARE v_cntOfInvCMWhichNotFullyApplied INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedInvCM INT;  \n" +
                "	DECLARE v_oldLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE v_newLockStatusPMT VARCHAR(5);  \n" +
                "	DECLARE mlc INT DEFAULT 0;  \n" +
                "	DECLARE totCustInvCM INT;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE totRefundPMTMasterIDs INT;  \n" +
                "	DECLARE v_cntOfUnLockCM INT;  \n" +
                "	DECLARE v_cntOfAlreadyVoidedPMT INT;  \n" +
                "	DECLARE v_cntOfAlreadyLockedUnlockedPMT INT;  \n" +
                "  \n" +
                "	SET v_cntOfInvCMWhichNotFullyApplied = 0;  \n" +
                "	SET v_cntOfAlreadyLockedUnlockedInvCM  = 0;  \n" +
                "	SET v_cntOfAlreadyVoidedPMT = 0;  \n" +
                "	SET v_cntOfAlreadyLockedUnlockedPMT = 0;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
                "	CREATE TEMPORARY TABLE tt_DB_ToBeLockUnlockInvCMPMTList(  \n" +
                "		tblMstID INT NOT NULL,  \n" +
                "		invCMPMTNumber VARCHAR(150),  \n" +
                "		invCMPMTDate DATE,  \n" +
                "		entityShortCode VARCHAR(10),  \n" +
                "		entityNameForChange VARCHAR(150)  \n" +
                "	);  \n" +
                "  \n" +
                "  \n" +
                "	 /* RL - Ready to lock, LC - locked */  \n" +
                "	IF (pIsLockTransaction = 1) THEN  \n" +
                "		/* lock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = NULL;  \n" +
                "		SET v_newLockStatusPMT = 'LC';  \n" +
                "		SET v_oldLockStatusInvCM = 0;  \n" +
                "		SET v_newLockStatusInvCM = 1;  \n" +
                "		SET v_newLockedAt = fun_DatetimetoUTCDateTime();  \n" +
                "		SET v_newLockedBy = pUserID;  \n" +
                "		SET v_newLockedByRoleId = pUserRoleID;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "		/* unlock transaction action */  \n" +
                "		SET v_oldLockStatusPMT = 'LC';  \n" +
                "		SET v_newLockStatusPMT = NULL;  \n" +
                "		SET v_oldLockStatusInvCM = 1;  \n" +
                "		SET v_newLockStatusInvCM = 0;  \n" +
                "		SET v_newLockedAt = NULL;  \n" +
                "		SET v_newLockedBy = NULL;  \n" +
                "		SET v_newLockedByRoleId = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* get/map all Customer invoice/credit memo List send from UI */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tt_UI_CustInvCMList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tt_UI_CustInvCMList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pCustInvCMList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`invCMMstID` INT PATH \"$.invCMMstID\" ,  \n" +
                "				`invPaymentMstID` INT PATH \"$.invPaymentMstID\"  \n" +
                "			)  \n" +
                "		) AS CustInvCMList_JT ;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pTransType IN ('C','I')) THEN  \n" +
                "  \n" +
                "		/* check if any locked/unlocked invoice/CM there */  \n" +
                "		SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedInvCM  \n" +
                "		FROM customer_packingslip  \n" +
                "		WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "		AND isLocked = v_newLockStatusInvCM  \n" +
                "		AND transType = pTransType  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "		/* check if any voided payment there */  \n" +
                "		SELECT COUNT(1) INTO v_cntOfAlreadyVoidedPMT  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvCMList)  \n" +
                "		AND isPaymentVoided = 1  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "		/* check if any locked/unlocked payment there */  \n" +
                "		SELECT COUNT(1) INTO v_cntOfAlreadyLockedUnlockedPMT  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id IN (SELECT invPaymentMstID FROM tt_UI_CustInvCMList)  \n" +
                "		AND lockStatus = v_newLockStatusPMT  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/*IF (pTransType = 'C' OR pRefPaymentMode = 'CA') THEN  */  \n" +
                "		IF (pIsLockTransaction = 1) THEN  \n" +
                "			/* get list of invoice/CM whose status not in RE,NP - then not allowed to lock  \n" +
                "				RE-Fully Received/Full Credit Applied , NP-No Pending Credit */  \n" +
                "			SELECT COUNT(1) INTO v_cntOfInvCMWhichNotFullyApplied  \n" +
                "			FROM customer_packingslip  \n" +
                "			WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "			AND paymentStatus NOT IN ('RE','NP')  \n" +
                "			AND transType = (CASE WHEN pRefPaymentMode = 'CA' THEN 'C' ELSE pTransType END)  \n" +
                "			AND isDeleted = 0 ;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "			SET v_cntOfInvCMWhichNotFullyApplied = 0;  \n" +
                "		END IF;  \n" +
                "	/*END IF;  */  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedInvCM = 0 AND v_cntOfInvCMWhichNotFullyApplied = 0  \n" +
                "		AND v_cntOfAlreadyVoidedPMT = 0 AND v_cntOfAlreadyLockedUnlockedPMT = 0) THEN  \n" +
                "  \n" +
                "		IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "			/* get all invoice/CM transaction to locked/unlocked */  \n" +
                "			INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "			SELECT id,  \n" +
                "				(CASE WHEN pTransType = 'I' THEN invoiceNumber  \n" +
                "					WHEN pTransType = 'C' OR pRefPaymentMode = 'CA' THEN creditMemoNumber ELSE NULL END) AS invCMPMTNumber,  \n" +
                "				(CASE WHEN pTransType = 'I' THEN invoiceDate  \n" +
                "					WHEN pTransType = 'C' OR pRefPaymentMode = 'CA' THEN creditMemoDate ELSE NULL END) AS invCMPMTDate,  \n" +
                "				(CASE WHEN pTransType = 'I' THEN 'I'  \n" +
                "					WHEN pTransType = 'C' OR pRefPaymentMode = 'CA' THEN 'C' ELSE NULL END) AS entityShortCode,  \n" +
                "				(CASE WHEN pTransType = 'I' THEN 'Customer Invoice'  \n" +
                "					WHEN pTransType = 'C' OR pRefPaymentMode = 'CA' THEN 'Customer Credit Memo' ELSE NULL END) AS entityNameForChange  \n" +
                "			FROM customer_packingslip  \n" +
                "			WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "			AND transType = (CASE WHEN pRefPaymentMode = 'CA' THEN 'C' ELSE pTransType END)  \n" +
                "			AND isLocked = v_oldLockStatusInvCM  \n" +
                "			AND paymentStatus IN ('RE','NP')  \n" +
                "			AND isDeleted = 0  \n" +
                "			;  \n" +
                "		ELSE  \n" +
                "			/* update all invoice/CM transaction to locked/unlocked */  \n" +
                "			UPDATE customer_packingslip  \n" +
                "			SET isLocked = v_newLockStatusInvCM , lockedAt = v_newLockedAt ,  \n" +
                "			    lockedBy = v_newLockedBy , lockedByRole = v_newLockedByRoleId ,  \n" +
                "			    updateByRoleId = pUserRoleID , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "			    updatedBy = pUserID  \n" +
                "			WHERE id IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "			AND transType = (CASE WHEN pRefPaymentMode = 'CA' THEN 'C' ELSE pTransType END)  \n" +
                "			AND isLocked = v_oldLockStatusInvCM  \n" +
                "			AND paymentStatus IN ('RE','NP')  \n" +
                "			AND isDeleted = 0  \n" +
                "			;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pTransType = 'C' OR pRefPaymentMode = 'CA') THEN  \n" +
                "  \n" +
                "			IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "				/* get all applied CM transaction to locked/unlocked */  \n" +
                "				INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "				SELECT refCustCreditMemoID, paymentNumber, NULL, 'CA', 'Applied Customer Credit Memo'  \n" +
                "				FROM packingslip_invoice_payment  \n" +
                "				WHERE refCustCreditMemoID IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "				AND refPaymentMode = 'CA'  \n" +
                "				AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "				;  \n" +
                "			ELSE  \n" +
                "				/* update all applied CM transaction to locked/unlocked */  \n" +
                "				UPDATE packingslip_invoice_payment  \n" +
                "				SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "				    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "				    updateByRoleId = pUserRoleID , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "				    updatedBy = pUserID  \n" +
                "				WHERE refCustCreditMemoID IN (SELECT invCMMstID FROM tt_UI_CustInvCMList)  \n" +
                "				AND refPaymentMode = 'CA'  \n" +
                "				AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "					ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "				;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* credit memo lock/unlock - If credit memo dependent Refund then Lock/Unlock (Check for all credit memo must be lock) */  \n" +
                "			SELECT COUNT(1) INTO totCustInvCM FROM tt_UI_CustInvCMList ;  \n" +
                "			SET mlc=0;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			/* outer loop of main CM list - lock/unlock transaction entity */  \n" +
                "			WHILE mlc < totCustInvCM DO  \n" +
                "  \n" +
                "				/* get refund payment master ids from selected payment */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tt_refundPMTMasterIDs ;  \n" +
                "				CREATE TEMPORARY TABLE tt_refundPMTMasterIDs AS  \n" +
                "					SELECT pipd.refPayementid  \n" +
                "					FROM packingslip_invoice_payment_det pipd  \n" +
                "						JOIN packingslip_invoice_payment pip ON pipd.refPayementid = pip.id  \n" +
                "								AND pip.isDeleted = 0 AND pip.isPaymentVoided = 0  \n" +
                "					WHERE pipd.refRefundCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "					AND pipd.isDeleted = 0 AND pipd.isPaymentVoided = 0  \n" +
                "					GROUP BY pipd.refPayementid ;  \n" +
                "  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO totRefundPMTMasterIDs FROM tt_refundPMTMasterIDs ;  \n" +
                "  \n" +
                "				IF (totRefundPMTMasterIDs > 0) THEN  \n" +
                "  \n" +
                "					SET i=0;  \n" +
                "  \n" +
                "					/* first inner loop of refund payment master list */  \n" +
                "					WHILE i < totRefundPMTMasterIDs DO  \n" +
                "  \n" +
                "						SET v_cntOfUnLockCM = NULL;  \n" +
                "  \n" +
                "						IF (pIsLockTransaction = 1) THEN  \n" +
                "							/* check all credit memo contain in refund transaction that all locked or not  \n" +
                "							  when view only that time no need to check current CM locked or not  \n" +
                "							  as we do actual lock above when doing lock only not while view only */  \n" +
                "							SELECT COUNT(1) INTO v_cntOfUnLockCM  \n" +
                "							FROM customer_packingslip  \n" +
                "							WHERE id IN (	SELECT refRefundCustCreditMemoID  \n" +
                "									FROM packingslip_invoice_payment_det  \n" +
                "									WHERE refPayementid = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "									AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "									AND (CASE WHEN isViewToBeLockUnlockRecords = 1  \n" +
                "											THEN refRefundCustCreditMemoID != (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "										ELSE 1=1 END)  \n" +
                "									)  \n" +
                "							AND isLocked != 1 ;  \n" +
                "  \n" +
                "						ELSE  \n" +
                "							/* in unlock case no need to check all credit memo locked or not. just make unlock refund */  \n" +
                "							SET v_cntOfUnLockCM = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "  \n" +
                "						IF (v_cntOfUnLockCM IS NOT NULL AND v_cntOfUnLockCM = 0) THEN  \n" +
                "  \n" +
                "							IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "  \n" +
                "								/* get to be lock refund transaction */  \n" +
                "								INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "								SELECT id, paymentNumber, paymentDate, 'CR', 'Customer Refund'  \n" +
                "								FROM packingslip_invoice_payment  \n" +
                "								WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "								AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "									ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "								AND refPaymentMode = 'CR'  \n" +
                "								AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "								;  \n" +
                "  \n" +
                "							ELSE  \n" +
                "								/* update refund transaction to locked */  \n" +
                "								UPDATE packingslip_invoice_payment  \n" +
                "								SET lockStatus = v_newLockStatusPMT , lockedAt = v_newLockedAt ,  \n" +
                "								    lockedBy = v_newLockedBy , lockedByRoleId = v_newLockedByRoleId ,  \n" +
                "								    updateByRoleId = pUserRoleID , updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "								     updatedBy = pUserID  \n" +
                "								WHERE id = (SELECT refPayementid FROM tt_refundPMTMasterIDs LIMIT i,1)  \n" +
                "								AND (CASE WHEN v_oldLockStatusPMT IS NULL THEN lockStatus IS NULL  \n" +
                "									ELSE lockStatus = v_oldLockStatusPMT END)  \n" +
                "								AND refPaymentMode = 'CR'  \n" +
                "								AND (CASE WHEN pIsLockTransaction = 1 THEN subStatus = 4 ELSE 1=1 END) /* 4 - published status */  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "								;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET i = i + 1;  \n" +
                "					END WHILE;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				IF (isViewToBeLockUnlockRecords = 1) THEN  \n" +
                "					/* get to be lock all invoice which contain in applied CM with fully received */  \n" +
                "					INSERT INTO tt_DB_ToBeLockUnlockInvCMPMTList (tblMstID, invCMPMTNumber, invCMPMTDate, entityShortCode, entityNameForChange)  \n" +
                "					SELECT cps.id, cps.invoiceNumber, cps.invoiceDate, 'I', 'Customer Invoice'  \n" +
                "					FROM customer_packingslip cps  \n" +
                "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							AND pipd.refPayementid = (SELECT id FROM packingslip_invoice_payment  \n" +
                "											WHERE refCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "											AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "										   )  \n" +
                "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInvCM  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "				ELSE  \n" +
                "					/* lock all invoice which contain in applied CM with fully received */  \n" +
                "					UPDATE customer_packingslip cps  \n" +
                "						JOIN packingslip_invoice_payment_det pipd ON cps.id = pipd.refCustPackingslipInvoiceID  \n" +
                "							AND pipd.refPayementid = (SELECT id FROM packingslip_invoice_payment  \n" +
                "											WHERE refCustCreditMemoID = (SELECT invCMMstID FROM tt_UI_CustInvCMList LIMIT mlc,1)  \n" +
                "											AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "										   )  \n" +
                "							AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "					SET cps.isLocked = v_newLockStatusInvCM , cps.lockedAt = v_newLockedAt ,  \n" +
                "					    cps.lockedBy = v_newLockedBy , cps.lockedByRole = v_newLockedByRoleId ,  \n" +
                "					    cps.updateByRoleId = pUserRoleID , cps.updatedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "					    cps.updatedBy = pUserID  \n" +
                "					WHERE cps.paymentStatus = 'RE'  \n" +
                "					AND cps.subStatus IN (2,3)   #2-Invoiced,3-Corrected and Invoiced  \n" +
                "					AND cps.isLocked = v_oldLockStatusInvCM  \n" +
                "					AND cps.isDeleted = 0  \n" +
                "					;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET mlc = mlc + 1;  \n" +
                "			END WHILE;  \n" +
                "  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF ( (v_cntOfAlreadyLockedUnlockedInvCM > 0) OR (v_cntOfInvCMWhichNotFullyApplied > 0)  \n" +
                "		OR (v_cntOfAlreadyVoidedPMT > 0) OR (v_cntOfAlreadyLockedUnlockedPMT > 0) OR (isViewToBeLockUnlockRecords = 1) ) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[1] - is any CM which not fully used */  \n" +
                "	IF (v_cntOfInvCMWhichNotFullyApplied > 0) THEN  \n" +
                "		SELECT 1 AS isAnyInvCMWhichNotFullyApplied ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isAnyInvCMWhichNotFullyApplied ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[2] - is Inv/CM Already locked */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedInvCM > 0) THEN  \n" +
                "		SELECT 1 AS isSomeInvCMAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomeInvCMAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[3] - is Payment Already Voided - applied CM */  \n" +
                "	IF (v_cntOfAlreadyVoidedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyVoided ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyVoided ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[4] - is Payment Already locked - applied CM */  \n" +
                "	IF (v_cntOfAlreadyLockedUnlockedPMT > 0) THEN  \n" +
                "		SELECT 1 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isSomePMTAlreadyLockedUnlocked ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[5] - view to be lock/unlock record list */  \n" +
                "	SELECT * FROM tt_DB_ToBeLockUnlockInvCMPMTList;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CustomerPackingSlipChangeHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_CustomerPackingSlipChangeHistory`(  \n" +
                "	IN pcustomerslipID INT,  \n" +
                "	IN pcustomerslipDetId INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vCustPSDetIdWhrClause VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_data_of_cust_packing_slip_det;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_data_of_cust_packing_slip_det AS  \n" +
                "		SELECT id, lineID  \n" +
                "		FROM customer_packingslip_det  \n" +
                "		WHERE refCustPackingSlipID = pcustomerslipID  \n" +
                "		AND CASE WHEN (pcustomerslipDetId IS NOT NULL AND pcustomerslipDetId != '')  \n" +
                "				THEN id = pcustomerslipDetId  \n" +
                "			ELSE 1=1 END;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_data_of_cust_packing_slip_track_number;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_data_of_cust_packing_slip_track_number AS  \n" +
                "		SELECT id  \n" +
                "		FROM customer_packing_slip_track_number  \n" +
                "		WHERE refCustPackingSlipID = pcustomerslipID;  \n" +
                "  \n" +
                "  \n" +
                "         IF(pcustomerslipDetId IS NOT NULL AND pcustomerslipDetId != '') THEN  \n" +
                "		SET vCustPSDetIdWhrClause = CONCAT(\" AND cpd.id = \",pcustomerslipDetId,\" \");  \n" +
                "	 ELSE  \n" +
                "		SET vCustPSDetIdWhrClause = \" \";  \n" +
                "         END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_CustomerPackingSlipChangeHistory = CONCAT(\"  \n" +
                "		SELECT da.ID,da.Tablename,da.RefTransID,da.Colname,da.Oldval,da.Newval,  \n" +
                "			lineID AS lineNoSequence, da.valueDataType ,  \n" +
                "			fun_getUserNameByID(da.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(da.createdBy) createdby,  \n" +
                "			fun_getRoleByID(da.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(da.updateByRoleId) updatedbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(da.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(da.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "		FROM dataentrychange_auditlog da  \n" +
                "			LEFT JOIN customer_packingslip_det cpd ON da.RefTransID = cpd.id  \n" +
                "								AND da.Tablename = 'CUSTOMER_PACKINGSLIP_DET' \",vCustPSDetIdWhrClause,\"  \n" +
                "		WHERE (da.RefTransID=\",pcustomerslipID,\" AND da.Tablename='CUSTOMER_PACKINGSLIP')  \n" +
                "			OR  \n" +
                "			(EXISTS (  \n" +
                "				SELECT 	1  \n" +
                "				FROM 	temp_data_of_cust_packing_slip_det tdpcd  \n" +
                "				WHERE 	tdpcd.id = da.RefTransID  \n" +
                "				)  \n" +
                "				AND da.Tablename = 'CUSTOMER_PACKINGSLIP_DET'  \n" +
                "			)  \n" +
                "			OR  \n" +
                "			(EXISTS (  \n" +
                "				SELECT 	1  \n" +
                "				FROM 	temp_data_of_cust_packing_slip_track_number tdcpstn  \n" +
                "				WHERE 	tdcpstn.id = da.RefTransID  \n" +
                "				)  \n" +
                "				AND da.Tablename = 'CUSTOMER_PACKING_SLIP_TRACK_NUMBER'  \n" +
                "			)  \n" +
                "         \");  \n" +
                "  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_CustomerPackingSlipChangeHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_CustomerPackingSlipChangeHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_data_of_cust_packing_slip_det;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Packingslip_Invoice_Payment_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_History` AFTER UPDATE ON `packingslip_invoice_payment`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment\";  \n" +
                "	DECLARE vOldval LONGTEXT DEFAULT '';  \n" +
                "	DECLARE vNewval LONGTEXT DEFAULT '';  \n" +
                "	DECLARE vLockUnlockFieldPTText VARCHAR(50) DEFAULT 'Locked' ;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentNumber, \"\") != IFNULL(NEW.paymentNumber, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Transaction#\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off#\"  \n" +
                "						ELSE \"Payment# or Check#\" END),			OLD.paymentNumber,  \n" +
                "					NEW.paymentNumber,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'paymentNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentDate, \"\") != IFNULL(NEW.paymentDate, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Date\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Date\"  \n" +
                "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Date\"  \n" +
                "						ELSE \"Payment Date\" END), 					OLD.paymentDate,  \n" +
                "					NEW.paymentDate,				OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'paymentDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\")  THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Amount ($)\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Amount ($)\"  \n" +
                "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Amount ($)\"  \n" +
                "					   ELSE \"Payment Amount ($)\" END),  						OLD.paymentAmount,  \n" +
                "					NEW.paymentAmount,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,		'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentType, \"\") != IFNULL(NEW.paymentType, \"\") THEN  \n" +
                "		SELECT IFNULL(gencCategoryName, '') INTO vOldval  \n" +
                "		  FROM genericcategory  \n" +
                "		 WHERE gencCategoryID = OLD.paymentType  \n" +
                "		 LIMIT 1;  \n" +
                "  \n" +
                "		SELECT IFNULL(gencCategoryName, '') INTO vNewval  \n" +
                "		  FROM genericcategory  \n" +
                "		 WHERE gencCategoryID = NEW.paymentType  \n" +
                "		 LIMIT 1;  \n" +
                "  \n" +
                "         INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Payment Method\",								vOldval,  \n" +
                "					vNewval,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.accountReference, \"\") != IFNULL(NEW.accountReference, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 		(vTableName,								NEW.id,  \n" +
                "					\"Account Reference\",							OLD.accountReference,  \n" +
                "					NEW.accountReference,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'accountReference'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankAccountNo, \"\") != IFNULL(NEW.bankAccountNo, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					(CASE WHEN old.refPaymentMode = \"CR\" THEN \"Refund To (Bank Account Code)\"  \n" +
                "						ELSE \"Bank Account Code\" END),						OLD.bankAccountNo,  \n" +
                "					NEW.bankAccountNo,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'bankAccountNo'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankName, \"\") != IFNULL(NEW.bankName, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,									NEW.id,  \n" +
                "					\"Bank Name\",								OLD.bankName,  \n" +
                "					NEW.bankName,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'bankName'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark, \"\") != IFNULL(NEW.remark, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Comments\",									OLD.remark,  \n" +
                "					NEW.remark,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'remark'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.agreedRefundAmt, \"\") != IFNULL(NEW.agreedRefundAmt, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,									NEW.id,  \n" +
                "					\"Agreed Refund Amount ($)\",						OLD.agreedRefundAmt,  \n" +
                "					NEW.agreedRefundAmt,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isMarkForRefund, \"\") != IFNULL(NEW.isMarkForRefund, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "			 VALUES 	(vTableName,								NEW.id,  \n" +
                "					\"Mark for Refund\",								(CASE WHEN OLD.isMarkForRefund =0 THEN 'False' ELSE 'True' END),  \n" +
                "					(CASE WHEN NEW.isMarkForRefund =0 THEN 'False' ELSE 'True' END),		OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isDeleted, \"\") != IFNULL(NEW.isDeleted, \"\") THEN  \n" +
                "		IF NEW.isDeleted = TRUE THEN  \n" +
                "			SET vNewval = 'Deleted';  \n" +
                "		ELSEIF NEW.isDeleted = FALSE THEN  \n" +
                "			SET vNewval = 'Restored';  \n" +
                "		ELSE  \n" +
                "			SET vNewval = 'Unknown action on delete';  \n" +
                "        END IF;  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "                    Colname,									Oldval,  \n" +
                "                    Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,								NEW.id,  \n" +
                "                    vNewval,									NULL,  \n" +
                "                    OLD.paymentNumber,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") THEN  \n" +
                "		SET vOldval = CASE WHEN OLD.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
                "				END;  \n" +
                "		SET vNewval = CASE WHEN NEW.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
                "				END;  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,								NEW.id,  \n" +
                "					(CASE WHEN old.refPaymentMode = \"CA\" OR old.refPaymentMode = \"WOFF\"  \n" +
                "						OR old.refPaymentMode = \"CR\" THEN \"Voided Status\"  \n" +
                "						ELSE \"Payment Status\" END), 			vOldval,  \n" +
                "					vNewval,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
                "  \n" +
                "  \n" +
                "		IF (IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") AND NEW.isPaymentVoided = TRUE) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "							(tableName,									refPaymentID,  \n" +
                "							Colname,									Oldval,  \n" +
                "							Newval,										createdAt,  \n" +
                "							createdBy,									createByRoleId,  \n" +
                "							updatedAt,									updatedBy,  \n" +
                "							updateByRoleId,								valueDataType)  \n" +
                "				  VALUES 	(vTableName,									NEW.id,  \n" +
                "							\"Voided Date\",									'',  \n" +
                "							NEW.UpdatedAt,  								OLD.updatedAt,  \n" +
                "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "							NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                            fun_getDataTypeBasedOnTableAndColumnName(vTableName,'UpdatedAt'));  \n" +
                "  \n" +
                "  \n" +
                "			  INSERT INTO supplier_invoice_payment_history  \n" +
                "							(tableName,									refPaymentID,  \n" +
                "							Colname,									Oldval,  \n" +
                "							Newval,										createdAt,  \n" +
                "							createdBy,									createByRoleId,  \n" +
                "							updatedAt,									updatedBy,  \n" +
                "							updateByRoleId,								valueDataType)  \n" +
                "				  VALUES 	(vTableName,									NEW.id,  \n" +
                "							\"Voided By\",									'',  \n" +
                "							fun_getUserNameByID(NEW.updatedBy),				OLD.updatedAt,  \n" +
                "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "							NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "		  END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.voidPaymentReason, \"\") != IFNULL(NEW.voidPaymentReason, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Void Reason\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Void Reason\"  \n" +
                "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Void Refund Reason\"  \n" +
                "						ELSE \"Void Payment Reason\" END),					OLD.voidPaymentReason,  \n" +
                "					NEW.voidPaymentReason,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'voidPaymentReason'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refVoidedPaymentNumber, \"\") != IFNULL(NEW.refVoidedPaymentNumber, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Ref Voided Payment# Or Check#\",						OLD.refVoidedPaymentNumber,  \n" +
                "					NEW.refVoidedPaymentNumber,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'refVoidedPaymentNumber'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockStatus, \"\") != IFNULL(NEW.lockStatus, \"\") THEN  \n" +
                "  \n" +
                "	IF (OLD.lockStatus = 'LC') THEN  \n" +
                "		SET vLockUnlockFieldPTText = \"Unlocked\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,									valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				 \"Lock Status\",									(CASE WHEN OLD.lockStatus = 'NA' THEN 'Not Applicable'   WHEN OLD.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "																WHEN OLD.lockStatus = 'LC' THEN 'Locked' ELSE '' END),  \n" +
                "				(CASE WHEN NEW.lockStatus = 'NA' THEN 'Not Applicable'  \n" +
                "						WHEN NEW.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "						WHEN NEW.lockStatus = 'LC' THEN 'Locked' ELSE '' END),			OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,						'varchar');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedAt, \"\") != IFNULL(NEW.lockedAt, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,									valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					CONCAT(vLockUnlockFieldPTText, \" Date\"),					'',  \n" +
                "					(CASE WHEN OLD.lockStatus = 'LC' THEN fun_DatetimetoUTCDateTime()  \n" +
                "						ELSE NEW.lockedAt END), 						OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'lockedAt'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedBy, \"\") != IFNULL(NEW.lockedBy, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,									valueDataType)  \n" +
                "		  VALUES 		(vTableName,									NEW.id,  \n" +
                "					CONCAT(vLockUnlockFieldPTText, \" By\"),					'',  \n" +
                "					(CASE WHEN OLD.lockStatus = 'LC' THEN fun_getUserNameByID(NEW.updatedBy)  \n" +
                "						ELSE fun_getUserNameByID(NEW.lockedBy) END),				OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,					'varchar');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "		IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
                "			IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vOldval  \n" +
                "				FROM mfgcodemst  \n" +
                "				WHERE id =OLD.mfgcodeID  \n" +
                "				ORDER BY id DESC LIMIT 1;  \n" +
                "			END IF;  \n" +
                "			IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vNewval  \n" +
                "				FROM mfgcodemst  \n" +
                "				WHERE id =NEW.mfgcodeID  \n" +
                "				ORDER BY id DESC LIMIT 1;  \n" +
                "			END IF;  \n" +
                "			  INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,								NEW.id,  \n" +
                "						\"Supplier\",									vOldval,  \n" +
                "						vNewval,									OLD.updatedAt,  \n" +
                "						OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToName, \"\") != IFNULL(NEW.payToName, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Pay To name\",									OLD.payToName,  \n" +
                "						NEW.payToName,									OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'payToName'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToAddress, \"\") != IFNULL(NEW.payToAddress, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Pay To Address\",									OLD.payToAddress,  \n" +
                "						NEW.payToAddress,								OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'payToAddress'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToName, \"\") != IFNULL(NEW.billToName, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Bill To Name\",									OLD.billToName,  \n" +
                "						NEW.billToName,									OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'billToName'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToAddress, \"\") != IFNULL(NEW.billToAddress, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Bill To Address\",								OLD.billToAddress,  \n" +
                "						NEW.billToAddress,								OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'billToAddress'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode IN ('R','RR') THEN  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.depositBatchNumber, \"\") != IFNULL(NEW.depositBatchNumber, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,						refPaymentID,  \n" +
                "						Colname,						Oldval,  \n" +
                "						Newval,							createdAt,  \n" +
                "						createdBy,						createByRoleId,  \n" +
                "						updatedAt,						updatedBy,  \n" +
                "						updateByRoleId,					valueDataType)  \n" +
                "			  VALUES 	(vTableName,							NEW.id,  \n" +
                "					\"Deposit Batch#\",						OLD.depositBatchNumber,  \n" +
                "					NEW.depositBatchNumber,						OLD.updatedAt,  \n" +
                "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'depositBatchNumber'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode IN ('RR','CR') THEN  \n" +
                "		IF IFNULL(OLD.offsetAmount,0) != IFNULL(NEW.offsetAmount,0) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "			VALUES 	(vTableName,										NEW.id,  \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'RR' THEN \"Offset Refund Amount ($)\"  \n" +
                "						WHEN NEW.refPaymentMode = 'CR' THEN \"Offset Amount ($)\"  \n" +
                "						ELSE '' END),								OLD.offsetAmount,  \n" +
                "					NEW.offsetAmount,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    'amount');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,								NEW.id,  \n" +
                "					\"COA\",  \n" +
                "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = OLD.acctId),  \n" +
                "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = NEW.acctId),  \n" +
                "					OLD.updatedAt,   							OLD.updatedBy,  \n" +
                "					OLD.updateByRoleId,							fun_DatetimetoUTCDateTime(), /*updatedAt*/  \n" +
                "					NEW.updatedBy, /*updatedBy*/				NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    'varchar');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode = 'CR' THEN  \n" +
                "		IF IFNULL(OLD.subStatus, \"\") != IFNULL(NEW.subStatus, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,							refPaymentID,  \n" +
                "					Colname,							Oldval,  \n" +
                "					Newval,								createdAt,  \n" +
                "					createdBy,							createByRoleId,  \n" +
                "					updatedAt,							updatedBy,  \n" +
                "					updateByRoleId,						valueDataType)  \n" +
                "			  VALUES 	(vTableName,							NEW.id,  \n" +
                "					\"Refund Status\",						fun_getCustRefundSubStatusNameByID(OLD.subStatus),  \n" +
                "					fun_getCustRefundSubStatusNameByID(NEW.subStatus),		OLD.updatedAt,  \n" +
                "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,	'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(OLD.isMarkAsPaid, \"\") != IFNULL(NEW.isMarkAsPaid, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,							refPaymentID,  \n" +
                "					Colname,							Oldval,  \n" +
                "					Newval,								createdAt,  \n" +
                "					createdBy,							createByRoleId,  \n" +
                "					updatedAt,							updatedBy,  \n" +
                "					updateByRoleId,						valueDataType)  \n" +
                "			  VALUES 	(vTableName,								NEW.id,  \n" +
                "					\"Mark As Paid\",									fun_getIntToText(OLD.isMarkAsPaid),  \n" +
                "					fun_getIntToText(NEW.isMarkAsPaid),				OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_customer_packingslip` ;  \n" +
                "CREATE TRIGGER `Trg_AU_customer_packingslip` AFTER UPDATE ON `customer_packingslip`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTransTypeText VARCHAR(20);  \n" +
                "	SET vTransTypeText= IF(NEW.transType='I','Invoice','Credit Memo');  \n" +
                "  \n" +
                "    IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO#',CAST(OLD.soNumber AS CHAR),  \n" +
                "       CAST(NEW.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO#',CAST(OLD.poNumber AS CHAR),  \n" +
                "       CAST(NEW.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO Date',CAST(DATE_FORMAT(OLD.poDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.poDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Date', CAST(DATE_FORMAT(OLD.soDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.soDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Contact Person',(SELECT CONCAT(firstName,' ',lastName) FROM customer_contactperson WHERE personId=OLD.contactPersonId),  \n" +
                "      (SELECT CONCAT(firstName,' ',lastName) FROM customer_contactperson WHERE personId=NEW.contactPersonId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipComment,0) != IFNULL(NEW.packingSlipComment,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Shipping Comments', OLD.packingSlipComment,  \n" +
                "       NEW.packingSlipComment, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.substatus ,0) != IFNULL(NEW.substatus ,0) THEN  \n" +
                "	IF(NEW.transType='P')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft'WHEN OLD.substatus=2 THEN 'Ready To Ship'WHEN OLD.substatus=3 THEN 'Waiting For Shipping Label'WHEN OLD.substatus=4 THEN 'Waiting For Pickup' WHEN OLD.substatus= 6 THEN 'Published' WHEN OLD.substatus= 5 THEN 'Shipped'  ELSE '' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Draft'WHEN NEW.substatus=2 THEN 'Ready To Ship'WHEN NEW.substatus=3 THEN 'Waiting For Shipping Label'WHEN NEW.substatus=4 THEN 'Waiting For Pickup' ELSE 'Shipped' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	ELSEIF (NEW.transType='I')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Shipped - Not Invoiced' WHEN OLD.substatus=2 THEN 'Invoiced' WHEN Old.subStatus=3 THEN 'Corrected and Invoiced'  WHEN Old.subStatus=4 THEN 'Draft' WHEN Old.subStatus=5 THEN 'Published' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Shipped - Not Invoiced' WHEN NEW.substatus=2 THEN 'Invoiced' WHEN NEW.subStatus=3 THEN 'Corrected and Invoiced'  WHEN NEW.subStatus=4 THEN 'Draft' WHEN NEW.subStatus=5 THEN 'Published' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	ELSEIF (NEW.transType='C')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft' WHEN OLD.substatus=2 THEN 'Published' ELSE '' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Draft' WHEN NEW.substatus=2 THEN 'Published' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippingMethodId ,0) != IFNULL(NEW.shippingMethodId ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Shipping Method', fun_getGenericCategoryNameByID(OLD.shippingMethodId),  \n" +
                "       fun_getGenericCategoryNameByID(NEW.shippingMethodId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.sorevision ,0) != IFNULL(NEW.sorevision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Version', CAST(OLD.sorevision AS CHAR),  \n" +
                "       CAST(NEW.sorevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.freeOnBoardId ,0) != IFNULL(NEW.freeOnBoardId ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'FOB',(SELECT `name` FROM freeonboardmst WHERE id=OLD.freeOnBoardId) ,  \n" +
                "     (SELECT `name` FROM freeonboardmst WHERE id=NEW.freeOnBoardId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.invoiceNumber ,0) != IFNULL(NEW.invoiceNumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice#',CAST(OLD.invoiceNumber AS CHAR) ,  \n" +
                "     CAST(NEW.invoiceNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.invoiceDate ,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice Date',CAST(DATE_FORMAT(OLD.invoiceDate, '%m/%d/%y') AS CHAR) ,  \n" +
                "     CAST(DATE_FORMAT(NEW.invoiceDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.headerComment ,0) != IFNULL(NEW.headerComment,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Internal Notes',CAST(OLD.headerComment AS CHAR),  \n" +
                "     CAST(NEW.headerComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip Date',CAST(DATE_FORMAT(OLD.packingSlipDate, '%m/%d/%y') AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.packingSlipDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip#',CAST(OLD.packingSlipNumber AS CHAR),  \n" +
                "		CAST(NEW.packingSlipNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Terms',  \n" +
                "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
                "			FROM genericcategory  WHERE gencCategoryID = OLD.termsID) ,  \n" +
                "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
                "			FROM genericcategory  WHERE gencCategoryID = NEW.termsID) ,  \n" +
                "	fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Sales Commission To',  \n" +
                "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = OLD.salesCommissionTo),  \n" +
                "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = NEW.salesCommissionTo),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.totalAmount ,0) != IFNULL(NEW.totalAmount ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Total Amount ($)',  \n" +
                "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(OLD.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(OLD.totalAmount,2) AS CHAR) END,  \n" +
                "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(NEW.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(NEW.totalAmount,2) AS CHAR) END,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isLocked,0) != IFNULL(NEW.isLocked,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Locked',(CASE WHEN OLD.isLocked=0 THEN 'No' WHEN OLD.isLocked=1 THEN 'Yes' ELSE '' END),  \n" +
                "      (CASE WHEN NEW.isLocked=0 THEN 'No' WHEN NEW.isLocked=1 THEN 'Yes' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedAt ,0) != IFNULL(NEW.lockedAt ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked Date' ELSE 'Locked Date' END),'',  \n" +
                "		(CASE WHEN OLD.isLocked = 1 THEN fun_DatetimetoUTCDateTime() ELSE NEW.lockedAt END),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName(\"CUSTOMER_PACKINGSLIP\",'lockedAt'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedBy ,0) != IFNULL(NEW.lockedBy ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked By' ELSE 'Locked By' END),'',  \n" +
                "		(CASE WHEN OLD.isLocked = 1 THEN fun_getUserNameByID(NEW.updatedBy) ELSE fun_getUserNameByID(NEW.lockedBy) END) ,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "   IF IFNULL(OLD.billingAddress ,0) != IFNULL(NEW.billingAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Bill To',CAST(OLD.billingAddress AS CHAR),  \n" +
                "		CAST(NEW.billingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippingAddress ,0) != IFNULL(NEW.shippingAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ship To',CAST(OLD.shippingAddress AS CHAR),  \n" +
                "		CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.intermediateAddress ,0) != IFNULL(NEW.intermediateAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Mark For',CAST(OLD.intermediateAddress AS CHAR) ,  \n" +
                "		CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.creditMemoNumber ,0) != IFNULL(NEW.creditMemoNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Number',CAST(OLD.creditMemoNumber AS CHAR),  \n" +
                "		CAST(NEW.creditMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Date',CAST(DATE_FORMAT(OLD.creditMemoDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.creditMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refDebitMemoNumber ,0) != IFNULL(NEW.refDebitMemoNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo#',CAST(OLD.refDebitMemoNumber AS CHAR) ,  \n" +
                "		CAST(NEW.refDebitMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refDebitMemoDate,0) != IFNULL(NEW.refDebitMemoDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo Date',CAST(DATE_FORMAT(OLD.refDebitMemoDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.refDebitMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaNumber ,0) != IFNULL(NEW.rmaNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'RMA#',CAST(OLD.rmaNumber AS CHAR) ,  \n" +
                "		CAST(NEW.rmaNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "   IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Revision',OLD.revision  ,  \n" +
                "		NEW.revision , fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),CONCAT('Confirming Zero Value',vTransTypeText),(CASE WHEN OLD.isZeroValue =0 THEN 'False' ELSE 'True' END),  \n" +
                "	   (CASE WHEN NEW.isZeroValue =0 THEN 'False' ELSE 'True' END),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.poRevision,0) != IFNULL(NEW.poRevision,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'PO Revision',OLD.poRevision,NEW.poRevision,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isMarkForRefund,0) != IFNULL(NEW.isMarkForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Mark For Refund',OLD.isMarkForRefund,NEW.isMarkForRefund,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.agreedRefundAmt,0) != IFNULL(NEW.agreedRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Agreed Refund Amt',OLD.agreedRefundAmt,NEW.agreedRefundAmt,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "   END;  \n" +
                /* **************************** Add Script Version -> 06-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5602,'2.00','V1',' lock/unlock payment transaction SPs - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5602:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_InvoicePaymentVoidAndReIssue` ;  \n" +
                "CREATE PROCEDURE `Sproc_InvoicePaymentVoidAndReIssue`(  \n" +
                "	IN pSystemId VARCHAR(20),  \n" +
                "	IN pRefVoidPaymentId INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pRemark VARCHAR(255),  \n" +
                "	IN pPayToName VARCHAR(255),  \n" +
                "	IN pPayToAddress VARCHAR(255),  \n" +
                "	IN pVoidPaymentReason VARCHAR(255),  \n" +
                "	IN pRefPaymentModeOfInvPayment VARCHAR(2),  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vCount INT;  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE vNewPaymentID INT;  \n" +
                "	DECLARE vOldPaymentOrCheckNo VARCHAR(50);  \n" +
                "	DECLARE vPMTLockStatus VARCHAR(5) DEFAULT NULL;  \n" +
                "	DECLARE vPMTRefundStatus VARCHAR(5) DEFAULT NULL;  \n" +
                "  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "  \n" +
                "	/* pRefPaymentModeOfInvPayment >> P-Payable   R-Receivable */  \n" +
                "	SELECT 	COUNT(1)   INTO 	vCount  \n" +
                "	FROM 	packingslip_invoice_payment  \n" +
                "	WHERE 	id = pRefVoidPaymentId  \n" +
                "	AND isPaymentVoided = 0  \n" +
                "	AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'P') THEN  \n" +
                "		/*check duplicate check number validation*/  \n" +
                "		SELECT 	COUNT(1)  INTO 	vCountExistsCheckNo  \n" +
                "		FROM 	packingslip_invoice_payment  \n" +
                "		WHERE 	isdeleted = 0  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND bankAccountMasID = pBankAccountMasID  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "	 ELSEIF (pRefPaymentModeOfInvPayment = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check duplicate check number if confirmation not taken */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	 IF (pRefPaymentModeOfInvPayment = 'R') THEN  \n" +
                "		/* if Receivable payment and already locked/refunded payment then not allowed to void and rereceive */  \n" +
                "		SELECT lockStatus, refundStatus INTO vPMTLockStatus, vPMTRefundStatus  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id = pRefVoidPaymentId  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
                "		AND isPaymentVoided = 0 AND isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (vCount = 1 AND vCountExistsCheckNo = 0 AND vPMTLockStatus != 'LC' AND vPMTRefundStatus != 'PR' AND vPMTRefundStatus != 'FR') THEN  \n" +
                "  \n" +
                "		UPDATE 	packingslip_invoice_payment  \n" +
                "		SET 	voidPaymentReason = pVoidPaymentReason,  \n" +
                "			isPaymentVoided = 1,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pRoleID,  \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	id = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment transaction*/  \n" +
                "		INSERT INTO packingslip_invoice_payment  \n" +
                "				(systemId, mfgcodeID, paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID,  \n" +
                "				bankAccountNo, bankName, payToName, payToAddress, remark, createdBy, createByRoleId,  \n" +
                "				updatedBy, updateByRoleId, refVoidedPaymentNumber, refVoidedPaymentId, refPaymentMode,  \n" +
                "				billToName, billToAddress, isZeroPayment, depositBatchNumber,  \n" +
                "				lockStatus, refundStatus)  \n" +
                "		SELECT 	pSystemId, mfgcodeID, pPaymentNumber, pPaymentDate, paymentAmount, pPaymentType, pAccountReference, pBankAccountMasID,  \n" +
                "				pBankAccountNo, pBankName, pPayToName, pPayToAddress, pRemark, pUserID, pRoleID,  \n" +
                "				pUserID, pRoleID, paymentNumber, id, refPaymentMode,  \n" +
                "				billToName, billToAddress, isZeroPayment, pDepositBatchNumber,  \n" +
                "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN  (CASE WHEN lockStatus = 'LC' THEN 'RL' ELSE lockStatus END)  \n" +
                "					WHEN pRefPaymentModeOfInvPayment = 'P' THEN 'RL'  \n" +
                "					ELSE NULL END),  \n" +
                "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN 'NA' ELSE NULL END)  \n" +
                "		FROM 	packingslip_invoice_payment  \n" +
                "		WHERE 	id = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "  \n" +
                "		SET vNewPaymentID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		/*update payment void flag in detail table*/  \n" +
                "		UPDATE 	packingslip_invoice_payment_det  \n" +
                "		SET 	isPaymentVoided = 1,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pRoleID,  \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment detail transaction*/  \n" +
                "		INSERT INTO packingslip_invoice_payment_det  \n" +
                "				(refPayementid, refPackingslipInvoiceID, createdBy, createByRoleId, updatedBy, updateByRoleId, paymentAmount,  \n" +
                "				isPaymentVoided, refCustPackingslipInvoiceID)  \n" +
                "		SELECT 	vNewPaymentID, refPackingslipInvoiceID, pUserID, pRoleID,  \n" +
                "			pUserID, pRoleID, paymentAmount,  \n" +
                "			FALSE, refCustPackingslipInvoiceID  \n" +
                "		FROM 	packingslip_invoice_payment_det  \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT vNewPaymentID refPayementid;  \n" +
                "	ELSE  \n" +
                "		IF vCountExistsCheckNo != 0 THEN  \n" +
                "			SELECT 'DUPLICATE_CHECKNO' AS message;  \n" +
                "		ELSEIF vCount = 0 THEN  \n" +
                "			IF (pRefPaymentModeOfInvPayment = 'R' AND (SELECT COUNT(1) FROM packingslip_invoice_payment WHERE id = pRefVoidPaymentId  \n" +
                "									AND isPaymentVoided = 1  AND refPaymentMode = pRefPaymentModeOfInvPayment) > 0) THEN  \n" +
                "				SELECT 'ALREADY_VOIDED' AS message;  \n" +
                "			ELSE  \n" +
                "				SELECT 'NOT_FOUND' AS message;  \n" +
                "			END IF;  \n" +
                "		ELSEIF vPMTLockStatus = 'LC' THEN  \n" +
                "			SELECT 'ALREADY_LOCKED' AS message;  \n" +
                "		ELSEIF (pRefPaymentModeOfInvPayment = 'R' AND (vPMTRefundStatus = 'PR' OR vPMTRefundStatus = 'FR')) THEN  \n" +
                "			SELECT 'ALREADY_PMT_REFUNDED' AS message;  \n" +
                "		ELSE  \n" +
                "			SELECT 'NOT_FOUND' AS message;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5603,'2.00','V1',' Sproc_InvoicePaymentVoidAndReIssue SP - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5603:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveReleaseLineFromPO`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveReleaseLineFromPO`(  \n" +
                "	IN pRefPOId INT,  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pMFGPN VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vMfgCodeFormat INT;  \n" +
                "SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "SELECT 	polrd.id,						polrd.qty poReleaseLineQty,			polrd.releaseNumber,  \n" +
                "		polrd.shippingDate,				polrd.promisedShipDate,  \n" +
                "		polrd.poLineWorkingStatus,		pod.id refPurchaseOrderDetID,		pod.lineID,  \n" +
                "		pod.qty poLineQty,  \n" +
                "        (case when polrd.id is null then c.packagingID else pod.packagingID end) packagingID,  \n" +
                "        pod.internalRef,                cpm.name packagingName,  \n" +
                "        mfgcod.mfgCode mfgCode,         c.mfgcodeID,                        c.mfgPN,    c.PIDCode,  \n" +
                "        c.RoHSStatusID,                 fun_GetFormattedMfgCode(mfgcod.mfgCode, mfgcod.mfgName, vMfgCodeFormat) mfgName,  \n" +
                "        fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,      					fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "		c.id partId,				polrd.receivedQty,    					pod.partDescription,  \n" +
                "         pod.lineComment,               pod.internalLineComment,            cs.mfgcodeID supplierId,  \n" +
                "        supCode.mfgCode supplierCode,   fun_GetFormattedMfgCode(supCode.mfgCode, supCode.mfgName, vMfgCodeFormat) supplierName,  \n" +
                "        cs.mfgpn supplierPN,            cs.id supplierPNId,                 c.packageQty spq,  \n" +
                "        c.unit,							c.uom,								c.uomText,  \n" +
                "		c.partType,  \n" +
                "        (case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSID,  \n" +
                "        fun_getRoHSNameByID(case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSName,  \n" +
                "        c.isCustom,		 c.custAssyPN,				cs.isCustom AS isCustomSupplier,	c.umidSPQ, pom.poWorkingStatus,  \n" +
                "        SUM(polrd.receivedQty) OVER(PARTITION BY pod.lineID) totalReceivedQty, pod.isLineCustConsigned, pod.lineCustomerID,  \n" +
                "        pod.isNonUMIDStock,  \n" +
                "        CASE WHEN pod.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "        CASE WHEN pod.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "        fun_GetFormattedMfgCode(pm.mfgCode, pm.mfgName, vMfgCodeFormat) customerName  \n" +
                "    FROM purchase_order_det AS pod  \n" +
                "    INNER JOIN purchase_order_mst AS pom ON pod.refPurchaseOrderID = pom.id AND pom.isDeleted=0  \n" +
                "	INNER JOIN component AS c ON  c.id = pod.mfgPartID AND c.id = IFNULL(pPartID, c.id) AND c.mfgpn = IFNULL(pMFGPN, c.mfgPN) AND c.isDeleted = 0  \n" +
                "	INNER JOIN mfgcodemst mfgcod ON mfgcod.id = c.mfgcodeID AND mfgcod.isDeleted = 0  \n" +
                "	LEFT JOIN purchase_order_line_release_det AS polrd ON  pod.id = polrd.refPurchaseOrderDetID AND polrd.isDeleted = 0  \n" +
                "	LEFT JOIN component_packagingmst AS cpm ON pod.packagingID = cpm.id AND cpm.isDeleted = 0  \n" +
                "	LEFT JOIN component cs ON cs.id = pod.supplierPartID AND cs.isDeleted = 0  \n" +
                "    LEFT JOIN mfgcodemst supCode ON supCode.id = cs.mfgcodeID OR supCode.id = cs.mfgcodeID AND supCode.isDeleted = 0  \n" +
                "    LEFT JOIN mfgcodemst pm ON pm.id=pod.lineCustomerID  \n" +
                "	WHERE pod.refPurchaseOrderID = pRefPOid  \n" +
                "    AND pod.isDeleted = 0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5604,'2.00','V1',' Bug 39157: QA Testing findings for User Story 38868: Implement auto-select line level option based on Header level in Purchase Order and Material Receipt - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5604:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF OLD.receiptType = \"P\" AND OLD.refPurchaseOrderID IS NULL AND NEW.isCustConsigned != OLD.isCustConsigned THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isLineCustConsigned=NEW.isCustConsigned, LineCustomerID=NEW.CustomerID WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF OLD.receiptType = \"P\" AND NEW.isNonUMIDStock != OLD.isNonUMIDStock THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isNonUMIDStock=NEW.isNonUMIDStock WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		CASE  \n" +
                "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
                "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
                "			ELSE 'PO Date'  \n" +
                "		END ,  \n" +
                "		CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Date', CAST(OLD.packingSlipDate AS CHAR), CAST(new.packingSlipDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(new.invoiceDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(new.creditMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(new.debitMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(new.receiptDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
                "				ELSE 'Supplier Invoice Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
                "				ELSE 'Supplier Invoice Posting Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(new.applyDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
                "				ELSE 'Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
                "				ELSE 'PS Internal Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Ship To', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			case when OLD.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "            case when new.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CustomerID, 0) != IFNULL(NEW.CustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.CustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.CustomerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5605,'2.00','V1',' Bug 39157: QA Testing findings for User Story 38868: Implement auto-select line level option based on Header level in Purchase Order and Material Receipt - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5605:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021 *********************************** */
                "update feature_mst set featureName = 'Allow to Add Alias Part' where featureName = 'Add Alias Part';  \n" +
                /* **************************** Add Script Version -> 06-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5606,'2.00','V1',' Bug 39188: QA Testing Bugs for User Story 37916: Part master > ALT & ALIAS Tab - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5606:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "ALTER TABLE assembly_trans_history DROP FOREIGN KEY FK_assembly_trans_history_partID;  \n" +
                "ALTER TABLE `assembly_trans_history` DROP INDEX `FK_assembly_trans_history_partID`;  \n" +
                "ALTER TABLE assembly_trans_history RENAME COLUMN partID TO refTransID;  \n" +
                "ALTER TABLE assembly_trans_history ADD COLUMN transactionType VARCHAR(100) NOT NULL AFTER refTransID;  \n" +
                "ALTER TABLE assembly_trans_history ADD COLUMN activityType VARCHAR(100) NOT NULL AFTER transactionType;  \n" +
                "ALTER TABLE assembly_trans_history ADD COLUMN burdenRate DECIMAL(13,3) AFTER totalTime;  \n" +
                "ALTER TABLE assembly_trans_history ADD COLUMN paymentMode VARCHAR(10) AFTER burdenRate;  \n" +
                "ALTER TABLE assembly_trans_history ADD COLUMN remark VARCHAR(10) AFTER paymentMode;  \n" +
                /* **************************** Add Script Version -> 06-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5607,'2.00','V1',' Bug 39188: QA Testing Bugs for User Story 37916: Part master > ALT & ALIAS Tab - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5607:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "INSERT INTO assembly_trans_history  \n" +
                "        (refTransID, transactionType, activityType, checkinTime, checkoutTime, userID, totalTime, burdenRate, paymentMode,  \n" +
                "    remark, isDeleted, createdAt, createdBy, updatedAt, updatedBy, deletedAt, deletedBy, createByRoleId, updateByRoleId, deleteByRoleId  \n" +
                "        )  \n" +
                "SELECT rfqAssyID, 'C', 'P', checkinTime, checkoutTime, userID, totalTime, NULL, NULL,  \n" +
                "           NULL, isDeleted, createdAt, createdBy, updatedAt, updatedBy, deletedAt, deletedBy, createByRoleId, updateByRoleId, deleteByRoleId  \n" +
                "FROM rfq_assembly_trans_history  \n" +
                "ORDER BY id ASC;  \n" +
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5608,'2.00','V1','User Story 35099: Kit Activity Tracking - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5608:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_saveStartStopActivity`;  \n" +
                "CREATE PROCEDURE `Sproc_saveStartStopActivity`(  \n" +
                "	IN pRefTransID INT,  \n" +
                "	IN pUserId INT,  \n" +
                "	IN pIsActivityStart TINYINT,  \n" +
                "    IN pTransactionType VARCHAR(100),  \n" +
                "    IN pActivityType VARCHAR(100),  \n" +
                "    IN pRemark LONGTEXT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_UpdatedUserID INT;  \n" +
                "	DECLARE v_CurrentTime DATETIME;  \n" +
                "    DECLARE v_BurdenRate DECIMAL(13,3);  \n" +
                "    DECLARE v_PaymentMode VARCHAR(10);  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() INTO v_CurrentTime;  \n" +
                "    SELECT em.burdenRate, em.paymentMode INTO v_BurdenRate, v_PaymentMode  \n" +
                "		FROM users u JOIN employees em ON em.id = u.employeeID  \n" +
                "        WHERE u.id = pUserId;  \n" +
                "  \n" +
                "   IF(pTransactionType = 'B') THEN  \n" +
                "		IF(SELECT COUNT(1) FROM Component WHERE id = pRefTransID AND isActivityStart = 1 > 0) THEN  \n" +
                "			SELECT activityStartBy INTO v_UpdatedUserID FROM Component WHERE id = pRefTransID AND isActivityStart = 1;  \n" +
                "		END IF;  \n" +
                "	ELSEIF(pTransactionType = 'C') THEN  \n" +
                "		IF( SELECT COUNT(1) FROM rfq_assemblies WHERE id = pRefTransID AND isActivityStart = 1 > 0) THEN  \n" +
                "		SELECT activityStartBy INTO v_UpdatedUserID FROM rfq_assemblies WHERE id = pRefTransID AND isActivityStart = 1;  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "	IF v_UpdatedUserID IS NULL THEN  \n" +
                "		SET v_UpdatedUserID = pUserId;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsActivityStart THEN  \n" +
                "		IF(pTransactionType = 'B') THEN  \n" +
                "			UPDATE Component SET  \n" +
                "				isActivityStart = pIsActivityStart,  \n" +
                "				activityStartBy = pUserId,  \n" +
                "				activityStartAt = v_CurrentTime  \n" +
                "			WHERE id = pRefTransID;  \n" +
                "		ELSEIF(pTransactionType = 'C') THEN  \n" +
                "			UPDATE rfq_assemblies SET  \n" +
                "				isActivityStart = pIsActivityStart,  \n" +
                "				activityStartBy = pUserId,  \n" +
                "				activityStartAt = v_CurrentTime  \n" +
                "			WHERE id = pRefTransID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		INSERT INTO assembly_trans_history (`refTransID`, `transactionType`, `activityType`, `checkinTime`, `userID`, `burdenRate`, `paymentMode`, `remark`, `createdBy`)  \n" +
                "        VALUES(pRefTransID, pTransactionType, pActivityType, v_CurrentTime, pUserId, v_BurdenRate, v_PaymentMode, pRemark, pUserId);  \n" +
                "	ELSE  \n" +
                "		IF(pTransactionType = 'B') THEN  \n" +
                "			UPDATE Component SET  \n" +
                "				isActivityStart = pIsActivityStart,  \n" +
                "				activityStartBy = pUserId,  \n" +
                "				activityStopAt = v_CurrentTime  \n" +
                "			WHERE id = pRefTransID;  \n" +
                "		ELSEIF(pTransactionType = 'C') THEN  \n" +
                "			UPDATE rfq_assemblies SET  \n" +
                "				isActivityStart = pIsActivityStart,  \n" +
                "				activityStartBy = pUserId,  \n" +
                "				activityStopAt = v_CurrentTime,  \n" +
                "				activityStartAt = null  \n" +
                "		WHERE id = pRefTransID;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "		SELECT a.id, a.checkinTime INTO @pid, @pcheckinTime FROM assembly_trans_history a WHERE a.refTransID = pRefTransID AND a.isDeleted = FALSE ORDER BY id DESC LIMIT 1;  \n" +
                "		UPDATE assembly_trans_history SET  \n" +
                "			checkoutTime = v_CurrentTime,  \n" +
                "			totalTime = TIMESTAMPDIFF(SECOND, @pcheckinTime, v_CurrentTime),  \n" +
                "			updatedBy = pUserId,  \n" +
                "			updatedAt = v_CurrentTime,  \n" +
                "            remark = pRemark  \n" +
                "			 WHERE id = @pid;  \n" +
                "	END IF;  \n" +
                "	COMMIT;  \n" +
                "	SELECT 	v_UpdatedUserID,  \n" +
                "			(case when pIsActivityStart = 1 then v_CurrentTime else null end) activityStartAt,  \n" +
                "			(case when pIsActivityStart = 0 then v_CurrentTime else null end) activityStopAt;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveActivityTrackingHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveActivityTrackingHistory`(  \n" +
                "	IN pRefTransID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "SELECT 	a.refTransID,  \n" +
                "		a.transactionType,  \n" +
                "		(CASE  WHEN (a.transactionType = 'B') THEN  'BOM'  \n" +
                "				WHEN (a.transactionType = 'C') THEN  'Costing'  \n" +
                "				WHEN (a.transactionType = 'K') THEN  'Kit'  \n" +
                "			ELSE  ''  END ) AS transactionTypeConvertedValue,  \n" +
                "		a.activityType,  \n" +
                "		IF(a.activityType = 'P', 'Production','Setup') AS activityTypeConvertedValue,  \n" +
                "		a.checkinTime,  \n" +
                "		a.checkoutTime,  \n" +
                "		a.totalTime,  \n" +
                "        a.burdenRate,  \n" +
                "        a.paymentMode,  \n" +
                "        a.remark,  \n" +
                "		u.username AS userName,  \n" +
                "		stru.username AS startUserName,  \n" +
                "		stpu.username AS stopUserName,  \n" +
                "		(SELECT IFNULL(changeVersion, '-') FROM rfq_assembly_history WHERE refTransID = a.refTransID AND updatedAt <= a.checkinTime ORDER BY updatedAt DESC LIMIT 1) AS checkinInternalVersion,  \n" +
                "		(SELECT IFNULL(changeVersion, '-') FROM rfq_assembly_history WHERE refTransID = a.refTransID AND updatedAt <= a.checkoutTime ORDER BY updatedAt DESC LIMIT 1) AS checkoutInternalVersion  \n" +
                "	FROM assembly_trans_history AS a  \n" +
                "	LEFT OUTER JOIN users AS u ON a.userID = u.id AND u.isDeleted = 0  \n" +
                "	LEFT OUTER JOIN users AS stru ON a.createdBy = stru.id AND stru.isDeleted = 0  \n" +
                "	LEFT OUTER JOIN users AS stpu ON a.updatedBy = stpu.id AND stpu.isDeleted = 0  \n" +
                "	WHERE (a.isDeleted = 0 AND  \n" +
                "	(a.refTransID = pRefTransID AND a.checkOutTime IS NOT NULL));  \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveActivityManualEntryList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveActivityManualEntryList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pTransType VARCHAR(200),  \n" +
                "    IN pActivityType VARCHAR(200),  \n" +
                "    IN pEmployeeIds VARCHAR(16000),  \n" +
                "    IN pAssyIds VARCHAR(16000)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255);  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SET @temp_Sproc_RetrieveActivityManualEntryList = CONCAT(\"  \n" +
                "			SELECT * FROM (  \n" +
                "				SELECT 	a.id,  \n" +
                "						a.refTransID,  \n" +
                "						a.transactionType,  \n" +
                "                        cp.id AS partID,  \n" +
                "                        cp.PIDCode,  \n" +
                "                        cp.mfgPN,  \n" +
                "                        cp.isCustom,  \n" +
                "                        cp.custAssyPN,  \n" +
                "                        ro.rohsIcon,  \n" +
                "                        ro.name AS rohsName,  \n" +
                "                        (CASE  WHEN (a.transactionType = 'B') THEN  'BOM'  \n" +
                "								WHEN (a.transactionType = 'C') THEN  'Costing'  \n" +
                "								WHEN (a.transactionType = 'K') THEN  'Kit'  \n" +
                "						ELSE  ''  END ) AS transactionTypeConvertedValue,  \n" +
                "						a.activityType,  \n" +
                "                        IF(a.activityType = 'P', 'Production','Setup') AS activityTypeConvertedValue,  \n" +
                "						a.checkinTime,  \n" +
                "						a.checkoutTime,  \n" +
                "						a.totalTime,  \n" +
                "						a.burdenRate,  \n" +
                "						a.paymentMode,  \n" +
                "						a.remark,  \n" +
                "                        u.employeeID,  \n" +
                "                        concat('(',emp.initialName , ') ',emp.firstName,' ',emp.lastName) AS userName,  \n" +
                "						fun_getUserNameByID(a.updatedBy) updatedby,  \n" +
                "						fun_getUserNameByID(a.createdBy) createdby,  \n" +
                "						fun_getRoleByID(a.createByRoleId) createdbyRole,  \n" +
                "						fun_getRoleByID(a.updateByRoleId) updatedbyRole,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(a.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "					FROM assembly_trans_history AS a  \n" +
                "                    INNER JOIN Component cp ON a.refTransID = cp.id AND cp.isDeleted = 0  \n" +
                "                    JOIN rfq_rohsmst ro ON cp.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "					LEFT JOIN users AS u ON a.userID = u.id AND u.isDeleted = 0  \n" +
                "                    JOIN employees emp on emp.id = u.employeeID AND emp.isDeleted = 0  \n" +
                "					WHERE a.isDeleted = 0 AND  \n" +
                "                    a.checkOutTime IS NOT NULL  \n" +
                "                    AND (CASE WHEN '\",pAssyIds,\"' <> '' THEN FIND_IN_SET(a.refTransID, '\",pAssyIds,\"') ELSE 1 = 1 END)  \n" +
                "			UNION ALL  \n" +
                "				SELECT 	a.id,  \n" +
                "						a.refTransID,  \n" +
                "						a.transactionType,  \n" +
                "                        ra.partID,  \n" +
                "                        cp.PIDCode,  \n" +
                "                        cp.mfgPN,  \n" +
                "                        cp.isCustom,  \n" +
                "                        cp.custAssyPN,  \n" +
                "                        ro.rohsIcon,  \n" +
                "                        ro.name AS rohsName,  \n" +
                "                        (CASE  WHEN (a.transactionType = 'B') THEN  'BOM'  \n" +
                "								WHEN (a.transactionType = 'C') THEN  'Costing'  \n" +
                "								WHEN (a.transactionType = 'K') THEN  'Kit'  \n" +
                "						ELSE  ''  END ) AS transactionTypeConvertedValue,  \n" +
                "						a.activityType,  \n" +
                "                        IF(a.activityType = 'P', 'Production','Setup') AS activityTypeConvertedValue,  \n" +
                "						a.checkinTime,  \n" +
                "						a.checkoutTime,  \n" +
                "						a.totalTime,  \n" +
                "						a.burdenRate,  \n" +
                "						a.paymentMode,  \n" +
                "						a.remark,  \n" +
                "                        u.employeeID,  \n" +
                "                        concat('(',emp.initialName , ') ',emp.firstName,' ',emp.lastName) AS userName,  \n" +
                "						fun_getUserNameByID(a.updatedBy) updatedby,  \n" +
                "						fun_getUserNameByID(a.createdBy) createdby,  \n" +
                "						fun_getRoleByID(a.createByRoleId) createdbyRole,  \n" +
                "						fun_getRoleByID(a.updateByRoleId) updatedbyRole,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(a.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "					FROM assembly_trans_history AS a  \n" +
                "                    INNER JOIN rfq_assemblies ra ON  a.refTransID = ra.id AND ra.isDeleted = 0  \n" +
                "                    INNER JOIN Component cp ON ra.partID = cp.id AND cp.isDeleted = 0  \n" +
                "                    JOIN rfq_rohsmst ro ON cp.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "					LEFT JOIN users AS u ON a.userID = u.id AND u.isDeleted = 0  \n" +
                "                    JOIN employees emp on emp.id = u.employeeID AND emp.isDeleted = 0  \n" +
                "					WHERE a.isDeleted = 0 AND  \n" +
                "                    a.checkOutTime IS NOT NULL  \n" +
                "                    AND (CASE WHEN '\",pAssyIds,\"' <> '' THEN FIND_IN_SET(ra.partID, '\",pAssyIds,\"') ELSE 1 = 1 END)  \n" +
                "			UNION ALL  \n" +
                "				SELECT 	a.id,  \n" +
                "						a.refTransID,  \n" +
                "						a.transactionType,  \n" +
                "                        sd.partID,  \n" +
                "                        cp.PIDCode,  \n" +
                "                        cp.mfgPN,  \n" +
                "                        cp.isCustom,  \n" +
                "                        cp.custAssyPN,  \n" +
                "                        ro.rohsIcon,  \n" +
                "                        ro.name AS rohsName,  \n" +
                "                        (CASE  WHEN (a.transactionType = 'B') THEN  'BOM'  \n" +
                "								WHEN (a.transactionType = 'C') THEN  'Costing'  \n" +
                "								WHEN (a.transactionType = 'K') THEN  'Kit'  \n" +
                "						ELSE  ''  END ) AS transactionTypeConvertedValue,  \n" +
                "						a.activityType,  \n" +
                "                        IF(a.activityType = 'P', 'Production','Setup') AS activityTypeConvertedValue,  \n" +
                "						a.checkinTime,  \n" +
                "						a.checkoutTime,  \n" +
                "						a.totalTime,  \n" +
                "						a.burdenRate,  \n" +
                "						a.paymentMode,  \n" +
                "						a.remark,  \n" +
                "                        u.employeeID,  \n" +
                "                        concat('(',emp.initialName , ') ',emp.firstName,' ',emp.lastName) AS userName,  \n" +
                "						fun_getUserNameByID(a.updatedBy) updatedby,  \n" +
                "						fun_getUserNameByID(a.createdBy) createdby,  \n" +
                "						fun_getRoleByID(a.createByRoleId) createdbyRole,  \n" +
                "						fun_getRoleByID(a.updateByRoleId) updatedbyRole,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(a.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "					FROM assembly_trans_history AS a  \n" +
                "                    INNER JOIN salesorderdet sd ON  a.refTransID = sd.id AND sd.isDeleted = 0  \n" +
                "                    INNER JOIN Component cp ON sd.partID = cp.id AND cp.isDeleted = 0  \n" +
                "                    JOIN rfq_rohsmst ro ON cp.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "					LEFT JOIN users AS u ON a.userID = u.id AND u.isDeleted = 0  \n" +
                "                    JOIN employees emp on emp.id = u.employeeID AND emp.isDeleted = 0  \n" +
                "					WHERE a.isDeleted = 0 AND  \n" +
                "                    a.checkOutTime IS NOT NULL  \n" +
                "                    AND (CASE WHEN '\",pAssyIds,\"' <> '' THEN FIND_IN_SET(sd.partID, '\",pAssyIds,\"') ELSE 1 = 1 END)  \n" +
                "		) AS tmp \");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY refTransID DESC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1 = 1 ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pEmployeeIds IS NOT NULL OR pEmployeeIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND employeeID in (\"',pEmployeeIds,'\")');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pTransType IS NOT NULL OR pTransType != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(transactionType, \"',pTransType,'\")');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF(pActivityType IS NOT NULL OR pActivityType != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(activityType, \"',pActivityType,'\")');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveActivityManualEntryList,\" ) c where \", pWhereClause);  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveActivityManualEntryList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllRFQListByID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllRFQListByID`(  \n" +
                "	IN pRefTransID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT 	ra.id, ra.partID,  \n" +
                "		part.PIDCode, part.isCustom, part.RoHSStatusID, part.mfgPN,  \n" +
                "		part.custAssyPN, part.mfgPNDescription, part.rev,part.assyCode, part.nickName, ro.rohsIcon, ro.name AS rohsName  \n" +
                "		FROM rfq_assemblies ra  \n" +
                "		JOIN component part ON part.id = ra.partID AND part.category = 3 AND part.isdeleted = 0  \n" +
                "		JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "		WHERE ra.isdeleted = 0 AND (CASE WHEN pRefTransID IS NOT NULL THEN ra.id = pRefTransID ELSE 1 = 1 END);  \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_assy_trans_history`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_assy_trans_history`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		SET @SQl1 = CONCAT('update assembly_trans_history set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and isDeleted = 0');  \n" +
                "		PREPARE stmt1 FROM @SQL1;  \n" +
                "		EXECUTE stmt1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(  \n" +
                "    IN tableName VARCHAR(255),  \n" +
                "    IN IDs LONGTEXT,  \n" +
                "    IN deletedBy INT,  \n" +
                "    IN entityID VARCHAR(255),  \n" +
                "    IN refrenceIDs LONGTEXT,  \n" +
                "    IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "IF tableName=\"employees\" THEN  \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"eco_type_category\" THEN  \n" +
                "     CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"eco_type_values\" THEN  \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customers\" THEN  \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"certificate_standards\" THEN  \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"department\" THEN  \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"genericcategory\" THEN  \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"equipment\" THEN  \n" +
                "    CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"master_templates\" THEN  \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"operations\" THEN  \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder\" THEN  \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"roles\" THEN  \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"standard_class\" THEN  \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"dataelement\" THEN  \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component\" THEN  \n" +
                "    CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_cluster\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_part\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_employee\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"entity\" THEN  \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"salesordermst\" THEN  \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"mfgcodemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN  \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"shippedassembly\" THEN  \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN  \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"br_label_template\" THEN  \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"measurement_types\" THEN  \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"uoms\" THEN  \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"jobtypes\" THEN  \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfqtype\" THEN  \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"reasonmst\" THEN  \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_sid_stock\" THEN  \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"chart_templatemst\" THEN  \n" +
                "    CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"shipping_requestdet\" THEN  \n" +
                "    CALL Sproc_checkDelete_shipping_requestdet(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"chart_rawdata_category\" THEN  \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_lineitems\" THEN  \n" +
                "      CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"requirement\" THEN  \n" +
                "    CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customer_addresses\" THEN  \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfqforms\" THEN  \n" +
                "    CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN  \n" +
                "    CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"who_bought_who\" THEN  \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_parttypemst\" THEN  \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN  \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN  \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN  \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"cost_category\" THEN  \n" +
                "    CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"chartypemst\" THEN  \n" +
                "    CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"countrymst\" THEN  \n" +
                "     CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"warehousemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"binmst\" THEN  \n" +
                "     CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rackmst\" THEN  \n" +
                "     CALL Sproc_checkDelete_rackmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_logicalgroup\" THEN  \n" +
                "     CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"packing_slip_material_receive\" THEN  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"packing_slip_material_receive_det\" THEN  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_det(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"packing_slip_material_receive_memo\" THEN  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_memo(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"packing_slip_track_number\" THEN  \n" +
                "     CALL Sproc_checkDelete_packing_slip_track_number(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"reserve_stock_request\" THEN  \n" +
                "       	 CALL Sproc_checkDelete_reserve_stock_request(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_packagingmst\" THEN  \n" +
                "     CALL Sproc_checkDelete_component_packagingmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_narrative_history\" THEN  \n" +
                "     CALL Sproc_checkDelete_workorder_trans_narrative_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"scannermst\" THEN  \n" +
                "     CALL Sproc_checkDelete_Scanner(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_alternatepn_validations\" THEN  \n" +
                "     CALL Sproc_checkDelete_Alias_Parts_Validation(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_equipment_feeder_details\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment_feeder_details(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_price_break_details\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_price_break_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"department_location\" THEN  \n" +
                "    CALL Sproc_checkDelete_department_location(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"purchase_parts_details\" THEN  \n" +
                "    CALL Sproc_checkDelete_purchase_parts_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_rohsmst\" THEN  \n" +
                "    CALL Sproc_checkDelete_rfq_rohsmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_partstatusmst\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_partstatusmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_umid_details\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_trans_umid_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"labor_cost_template\" THEN  \n" +
                "    CALL Sproc_checkDelete_labor_cost_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_packagecasetypemst\" THEN  \n" +
                "    CALL Sproc_checkDelete_rfq_packagecasetypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_dynamic_attribute\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_dynamic_attribute_mapping_part\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute_mapping_part(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"labeltemplatesmst\" THEN  \n" +
                "    CALL Sproc_checkDelete_labeltemplates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"reportmaster\" THEN  \n" +
                "    CALL Sproc_checkDelete_reportMaster(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"operating_temperature_conversion_mst\" THEN  \n" +
                "    CALL Sproc_checkDelete_operating_temperature_conversion_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"inspection_mst\" THEN  \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementMst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"inspection_template_mst\" THEN  \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementTemplate(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"componenet_inspection_requirement_det\" THEN  \n" +
                "    CALL Sproc_checkDelete_componenet_inspection_requirement_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"supplier_quote_mst\" THEN  \n" +
                "   CALL Sproc_checkDelete_supplier_quote(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"supplier_quote_parts_det\" THEN  \n" +
                "   CALL Sproc_checkDelete_supplier_quote_parts(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"calibration_details\" THEN  \n" +
                "   CALL Sproc_checkDelete_CalibrationDetails(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customer_packingslip\" THEN  \n" +
                "   CALL Sproc_checkDelete_customer_packingslip(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customer_packingslip_det\" THEN  \n" +
                "   CALL Sproc_checkDelete_customer_packingslip_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"supplier_attribute_template_mst\" THEN  \n" +
                "      CALL Sproc_checkDelete_supplier_attribute_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"freeonboardmst\" THEN  \n" +
                "   CALL Sproc_checkDelete_freeonboard(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"generic_file_extension\" THEN  \n" +
                "   CALL Sproc_checkDelete_genericFileExtension(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"assemblystock\" THEN  \n" +
                "   CALL Sproc_checkDelete_assemblystock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customer_invoice\" THEN  \n" +
                "   CALL Sproc_checkDelete_customer_invoice(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_boxserialno\" THEN  \n" +
                "   CALL Sproc_checkDelete_wo_box_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_boxserialno\" THEN  \n" +
                "   CALL Sproc_checkDelete_wo_trans_box_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"bank_mst\" THEN  \n" +
                "   CALL Sproc_checkDelete_bank(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"cameramst\" THEN  \n" +
                "   CALL Sproc_checkDelete_cameramst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"release_notes_detail\" THEN  \n" +
                "   CALL Sproc_checkDelete_releasenotes_detail(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"release_notes\" THEN  \n" +
                "   CALL Sproc_checkDelete_releasenotes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"purchase_order_mst\" THEN  \n" +
                "   CALL Sproc_checkDelete_purchase_order_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"acct_acctmst\" THEN  \n" +
                "    CALL Sproc_checkDelete_acct_acctmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"help_blog_det\" THEN  \n" +
                "   CALL Sproc_checkDelete_helpblog_detail(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"acct_classmst\" THEN  \n" +
                "	CALL Sproc_checkDelete_acct_classmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"mfgcodemst_comment_det\" THEN  \n" +
                "    CALL Sproc_checkDelete_mfgcodemst_comment_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"generic_transmode_mst\" THEN  \n" +
                "    CALL Sproc_checkDelete_generic_transmode_mst_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"assembly_trans_history\" THEN  \n" +
                "   CALL Sproc_checkDelete_assy_trans_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_saveEmployeeDetailsforAssyTransHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_saveEmployeeDetailsforAssyTransHistory`(  \n" +
                "	IN pIsFromMaster TINYINT,  \n" +
                "    IN pIDs LONGTEXT,  \n" +
                "    IN pPaymentMode VARCHAR(25),  \n" +
                "    IN pBurdenRate DECIMAL(13,3),  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempEmployeeDetails;  \n" +
                "	CREATE TEMPORARY TABLE tempEmployeeDetails  \n" +
                "	SELECT ath.id, u.employeeID, ath.userID, em.burdenRate, em.paymentMode  \n" +
                "		FROM assembly_trans_history ath  \n" +
                "        JOIN users u ON u.id = ath.userID  \n" +
                "        JOIN employees em ON em.id = u.employeeID  \n" +
                "		WHERE FIND_IN_SET(ath.id, (pIDs));  \n" +
                "  \n" +
                "	IF(pIsFromMaster = 1) THEN  \n" +
                "		# Case 1: Selected Record's Burdan Rate and Payment Mode Update from Employee Master  \n" +
                "		UPDATE assembly_trans_history ah, tempEmployeeDetails tmp  \n" +
                "		SET ah.updatedAt = fun_DatetimetoUTCDateTime(), ah.updatedBy = pUserID,  ah.updateByRoleId = pRoleID,  \n" +
                "			ah.paymentMode = tmp.paymentMode, ah.burdenRate = tmp.burdenRate  \n" +
                "		WHERE ah.id = tmp.id AND ah.isDeleted = 0;  \n" +
                "    ELSE  \n" +
                "		# Case 2: Selected Record's Burdan Rate and Payment Mode Update Manually  \n" +
                "         UPDATE assembly_trans_history ah SET ah.updatedAt = fun_DatetimetoUTCDateTime(), ah.updatedBy = pUserID,  ah.updateByRoleId = pRoleID,  \n" +
                "					ah.paymentMode = pPaymentMode, ah.burdenRate = pBurdenRate  \n" +
                "			WHERE ah.isDeleted = 0 AND FIND_IN_SET(ah.id, (pIDs));  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5609,'2.00','V1','User Story 35099: Kit Activity Tracking - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5609:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "select pageID INTO @pageID from page_detail where pageName = 'Kit Management';  \n" +
                "INSERT INTO page_detail (`pageName`, `RO`, `RW`, `menuRoute`, `pageRoute`, `pageURL`,  \n" +
                "`menuName`, `parentPageID`, `hasChild`, `orderBy`, `iconClass`, `isActive`, `createdBy`,  \n" +
                "`isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`)  \n" +
                "VALUES ('Manually Added Activity History', '0', '0', 'Materialmanagement.kitmanagement.manualentrylist', 'app.transaction.manualentry', '/manualentrylist',  \n" +
                "'Manually Added Activity History', @pageID , '0', '40.05', 'icons-manualy-added-activity-history', '1', '1', '0', '1', 'Manually Added Activity History', '0');  \n" +
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "select pageID INTO @pageID from page_detail where pageName = 'Manually Added Activity History';  \n" +
                "INSERT INTO page_detail (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`,  \n" +
                "`menuName`, `parentPageID`, `hasChild`, `orderBy`, `iconClass`, `isActive`, `createdBy`,  \n" +
                "`isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`)  \n" +
                "VALUES ('Activity Entry Manually', '0', '0', 'app.transaction.manualentry.manage', '/manualentry/:transType/:refTransId/:id',  \n" +
                "'Activity Entry Manually', @pageID , '0', '40.05', 'icons-data-entry-change-audit-log-list', '1', '1', '0', '1', 'Activity Entry Manually', '0');  \n" +
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "INSERT INTO feature_mst(featureName, isActive, isDeleted, createdBy, updatedBy)  \n" +
                "                VALUES ('Allow to Update/Delete Activity Entry Manually', 1, 0, 1,1);  \n" +
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5610,'2.00','V1','User Story 35099: Kit Activity Tracking - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5610:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "DROP PROCEDURE Sproc_bomStartStopActivity;  \n" +
                "DROP PROCEDURE Sproc_costingStartStopActivity;  \n" +
                "DROP PROCEDURE Sproc_RetrieveAssembly_trans_history;  \n" +
                "DROP PROCEDURE Sproc_Retrieve_costing_activity_history;  \n" +
                // "DROP TABLE rfq_assembly_trans_history;  \n" +
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5611,'2.00','V1','User Story 35099: Kit Activity Tracking - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 5611:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-10-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssemblyWOStockDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyWOStockDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pWoID INT ,  \n" +
                "    IN pPONumber VARCHAR(255),  \n" +
                "    IN pIsShowAllWO tinyint,  \n" +
                "    IN pSONumber VARCHAR(255))  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE whereClause1 VARCHAR(500);  \n" +
                "	SET whereClause1 = \"where 1=1\";  \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "    IF pPartID IS NOT NULL THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND PartID = \", pPartID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pWoID IS NOT NULL THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND vu_wss.woID = \", pWoID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPONumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND c.poNumber like \"%' ,pPONumber,'%\" and c.soNumbers like \"%' ,pSONumber,'%\" ' );  \n" +
                "	end if;  \n" +
                "  \n" +
                "     IF (!pIsShowAllWO)  THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND remaningtotalQty > 0 ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @Sproc_GetAssemblyWOStockDetails = CONCAT(\"SELECT vu_wss.* ,  \n" +
                "						(vu_wss.readytoShipQty + vu_wss.shippedQty) AS movedToStockQty ,  \n" +
                "						vu_wosod.totalPOQty, vu_wosod.POQtyValues soPOQty,  \n" +
                "						 vu_wosod.totalMRPQty, vu_wosod.MRPQtyValues soMRPQty,  \n" +
                "                         (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.initialStockPoQty ELSE vu_wss.poQty END) AS initialWOStockPOQty ,  \n" +
                "						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
                "							(SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT poNumber SEPARATOR ',')  \n" +
                "									 else GROUP_CONCAT(DISTINCT poNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end	) FROM `assemblystock`  WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS')  \n" +
                "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.poNumber ELSE parentSaleDtl.poNumber END)  \n" +
                "						   END) poNumber,  \n" +
                "						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
                "							(SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT soNumber SEPARATOR ', ')  \n" +
                "									 else GROUP_CONCAT(DISTINCT soNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end)  \n" +
                "									FROM `assemblystock` WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS')  \n" +
                "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END)  \n" +
                "                            END) soNumbers,  \n" +
                "						vu_wosod.lineID, vu_wosod.salesOrderMstIDs, vu_wosod.SOPOQtyValues ,  \n" +
                "						(CASE WHEN vu_wss.woid IS NULL THEN 'Initial Stock' ELSE 'Work Order Stock' END) AS stockTypeName ,  \n" +
                "                        (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.stockAdjustmentQty ELSE ((vu_wss.buildQty - vu_wss.scrapQty - vu_wss.poQty) + vu_wss.stockAdjustmentQty) END) AS excessFreetoUseQty,  \n" +
                "                        (CASE WHEN vu_wss.woid IS NULL THEN ((vu_wss.readytoShipQty + vu_wss.shippedQty + vu_wss.stockAdjustmentQty) - (vu_wss.shippedQty)) ELSE ((vu_wss.buildQty) - (vu_wss.scrapQty + vu_wss.shippedQty + vu_wss.readytoShipQty)) END) AS remaningtotalQty  \n" +
                "					FROM vu_workorder_summary_stk vu_wss  \n" +
                "						LEFT JOIN (SELECT woID AS woMstID, terminateWOID, isRevisedWO FROM workorder WHERE deletedAt IS NULL) AS wo  \n" +
                "								ON vu_wss.woid = wo.woMstID  \n" +
                "						LEFT JOIN vu_workorder_salesorder_details vu_wosod ON vu_wss.woid =  vu_wosod.woID  \n" +
                "						LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON wo.terminateWOID = parentSaleDtl.woID  \n" +
                "					\", whereClause1);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY woid ASC\");  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyWOStockDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyWOStockDetails,\" ) c where \" , pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "-- select @SQLStatement2;  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-10-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5612,'2.00','V1','Sproc_GetAssemblyWOStockDetails  - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5612:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetTotalUnreadMessageCount` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetTotalUnreadMessageCount`(  \n" +
                "	IN psenderID INT(11)  \n" +
                "   )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	 -- SELECT * FROM group_participant_details;  \n" +
                "  \n" +
                "	SELECT SUM(temp.totUnreadMsg) AS totUnreadMsg  \n" +
                "	FROM (  \n" +
                "		SELECT (CASE WHEN COUNT(1) >= 1 THEN 1 ELSE 0 END) AS totUnreadMsg  \n" +
                "		FROM `chat`  \n" +
                "		WHERE `receiverID` = psenderID  \n" +
                "		AND isRead = 0 AND isDeleted = 0  \n" +
                "		GROUP BY `senderID`  \n" +
                "  \n" +
                "		UNION ALL  \n" +
                "  \n" +
                "		SELECT (CASE WHEN COUNT(1) >= 1 THEN 1 ELSE 0 END) AS totUnreadMsg  \n" +
                "		FROM group_chat_log a  \n" +
                "		WHERE a.senderID != psenderID  \n" +
                "		AND EXISTS( SELECT  'Y' FROM group_participant_details b  \n" +
                "				WHERE b.groupID = a.groupID  \n" +
                "				AND b.participantID = psenderID  \n" +
                "				AND b.isRead = 0 AND isdeleted = 0  \n" +
                "				AND b.lastReadAt <= a.createdAt)  \n" +
                "		GROUP BY `groupID`  \n" +
                "  \n" +
                "	    ) temp ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5613,'2.00','V1',' Sproc_GetTotalUnreadMessageCount - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5613:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021  *********************************** */
                "DROP FUNCTION IF EXISTS fun_ValidateRefDesAgainstOperation;  \n" +
                "CREATE FUNCTION `fun_ValidateRefDesAgainstOperation`(  \n" +
                "		pAllowedRefDestList TEXT,  \n" +
                "        pEnteredRefDes TEXT  ,  \n" +
                "        pOdlyRefDes TEXT  \n" +
                ") RETURNS varchar(500) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	/*Allowed List and entered list is passed as it is here.  \n" +
                "    List converted to  comma separated from range in this function only    */  \n" +
                "  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                "    DECLARE startPos, endPos, maxLength INT ;  \n" +
                "	DECLARE vInvalidCount INT DEFAULT 0;  \n" +
                "    DECLARE itemRefDesg varchar(500);  \n" +
                "    DECLARE vAddedOddEnterRefDes,vAddedOddAllowedRefDes TEXT;  \n" +
                "	DECLARE vInvalidList TEXT DEFAULT '';  \n" +
                "  \n" +
                "  \n" +
                "    SET startPos = 1;  \n" +
                "	SET maxLength = Length(pAllowedRefDestList);  \n" +
                "    IF pAllowedRefDestList IS NOT NULL THEN  \n" +
                "		IF pOdlyRefDes IS NOT NULL THEN  \n" +
                "				SET startPos = 1;  \n" +
                "				SET maxLength = Length(pOdlyRefDes);  \n" +
                "				REPEAT  \n" +
                "					SET endPos = LOCATE(',',pOdlyRefDes,startPos);  \n" +
                "					IF endPos = 0 THEN  \n" +
                "						SET itemRefDesg = SUBSTR(pOdlyRefDes,startPos);  \n" +
                "					ELSE  \n" +
                "						SET itemRefDesg = SUBSTR(pOdlyRefDes,startPos,endPos-startPos);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF itemRefDesg <> '' OR itemRefDesg IS NOT NULL THEN  \n" +
                "						-- separate Oddly Ref Des from WO OP RefDes List  \n" +
                "						IF(INSTR(pEnteredRefDes, itemRefDesg) > 0) THEN  \n" +
                "                        	IF vAddedOddEnterRefDes = '' OR vAddedOddEnterRefDes IS NULL THEN  \n" +
                "								SET vAddedOddEnterRefDes = CONCAT_WS(',',itemRefDesg);  \n" +
                "							 ELSE  \n" +
                "								SET vAddedOddEnterRefDes = CONCAT_WS(',',vAddedOddEnterRefDes,itemRefDesg);  \n" +
                "							 END IF;  \n" +
                "                        END IF;  \n" +
                "						SET pEnteredRefDes = REPLACE(pEnteredRefDes,concat(itemRefDesg,','),'');  \n" +
                "						-- separate Oddly Ref Des from BOM RefDes List  \n" +
                "						IF(INSTR(pAllowedRefDestList, itemRefDesg) > 0) THEN  \n" +
                "                        	IF vAddedOddAllowedRefDes = '' OR vAddedOddAllowedRefDes IS NULL THEN  \n" +
                "								SET vAddedOddAllowedRefDes = CONCAT_WS(',',itemRefDesg);  \n" +
                "							 ELSE  \n" +
                "								SET vAddedOddAllowedRefDes = CONCAT_WS(',',vAddedOddAllowedRefDes,itemRefDesg);  \n" +
                "							 END IF;  \n" +
                "                        END IF;  \n" +
                "						SET pAllowedRefDestList = REPLACE(pAllowedRefDestList,concat(itemRefDesg,','),'');  \n" +
                "					END IF;  \n" +
                "					IF endPos = 0  AND startPos > 0 THEN  \n" +
                "						SET startPos = maxLength;  \n" +
                "					ELSE  \n" +
                "						SET startPos = endPos + 1;  \n" +
                "					END IF;  \n" +
                "				UNTIL startPos >=  maxLength END REPEAT;  \n" +
                "            END IF;  \n" +
                "  \n" +
                "		SELECT  fun_getDesignatorList(pEnteredRefDes) into pEnteredRefDes;  \n" +
                "		IF vAddedOddEnterRefDes IS NOT NULL OR vAddedOddEnterRefDes <> '' THEN  \n" +
                "			SET pEnteredRefDes = CONCAT_WS(',',vAddedOddEnterRefDes,  pEnteredRefDes);  \n" +
                "		END IF;  \n" +
                "		SELECT  fun_getDesignatorList(pAllowedRefDestList) into pAllowedRefDestList;  \n" +
                "		IF vAddedOddAllowedRefDes IS NOT NULL OR vAddedOddAllowedRefDes <> '' THEN  \n" +
                "			SET pAllowedRefDestList = CONCAT_WS(',',vAddedOddAllowedRefDes,  pAllowedRefDestList);  \n" +
                "		END IF;  \n" +
                "		SET startPos = 1;  \n" +
                "		SET maxLength = Length(pAllowedRefDestList);  \n" +
                "		REPEAT  \n" +
                "			SET endPos = LOCATE(',',pEnteredRefDes,startPos);  \n" +
                "			IF endPos = 0 THEN  \n" +
                "				SET itemRefDesg = SUBSTR(pEnteredRefDes,startPos);  \n" +
                "			ELSE  \n" +
                "				SET itemRefDesg = SUBSTR(pEnteredRefDes,startPos,endPos-startPos);  \n" +
                "			END IF;  \n" +
                "			IF itemRefDesg <> '' OR itemRefDesg IS NOT NULL THEN  \n" +
                "				IF(INSTR(pAllowedRefDestList,itemRefDesg) = 0) THEN  \n" +
                "					SET vInvalidCount = vInvalidCount +1 ;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			IF endPos = 0  AND startPos > 0 THEN  \n" +
                "				SET startPos = maxLength;  \n" +
                "			ELSE  \n" +
                "				SET startPos = endPos + 1;  \n" +
                "			END IF;  \n" +
                "		UNTIL startPos >=  maxLength END REPEAT;  \n" +
                "	END IF;  \n" +
                "    IF vInvalidCount > 0 THEN  \n" +
                "		SET result = fun_checkAndInsertError('UMID052', 0, 1, 0, 0, 0, pEnteredRefDes , pAllowedRefDestList, NULL);  \n" +
                "    ELSE  \n" +
                "		SET result = 1;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	RETURN result;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5614,'2.00','V1','fun_ValidateRefDesAgainstOperation- Story 38215: Work Order Operation REF DES- Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5614:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetRFQLineItemsByIDWithSubAssembly;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQLineItemsByIDWithSubAssembly`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN ppartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = NULL;  \n" +
                "	END IF;  \n" +
                "    SET @SQLStatement1 = concat(\"SELECT 	a.id, a.lineID, a.cust_lineID, a.qpa, a.refDesig, a.custPN, a.custPNID,  \n" +
                "			a.customerRev custPNRev,  \n" +
                "			a.refDesig ,  \n" +
                "            a.dnpQty,  \n" +
                "            a.dnpDesig,  \n" +
                "            a.isInstall,  \n" +
                "			rla.mfgPNID linePartId,  \n" +
                "			co.PIDCode,  \n" +
                "			co.mfgPN,  \n" +
                "			rohs.name AS rohsName,  \n" +
                "			rohs.rohsIcon,  \n" +
                "            co.mfgcodeID,  \n" +
                "            co.isCustom,  \n" +
                "            co.custAssyPN,  \n" +
                "            partMfg.mfgName ,  \n" +
                "            count(1) over (partition by lineID) bomLineCnt,  \n" +
                "            row_number() over (partition by lineID) bomLineIndex  ,  \n" +
                "			fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,\",vMfgCodeFormat,\") formattedMfrName  \n" +
                "	FROM rfq_lineitems a  \n" +
                "    LEFT JOIN rfq_lineitems_alternatepart rla on rla.rfqLineItemsID = a.id and rla.isDeleted = 0  \n" +
                "	LEFT JOIN rfq_lineitems_additional_comment ac ON ac.rfqLineItemId = a.id AND ac.isDeleted = 0  \n" +
                "    LEFT JOIN component co  ON co.id = rla.mfgPNID and co.isDeleted = 0  \n" +
                "    LEFT JOIN rfq_rohsmst rohs ON rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "    LEFT JOIN mfgcodemst partMfg ON partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
                "	WHERE a.isDeleted = 0  \n" +
                "    AND a.partID in (SELECT DISTINCT prPerPartID FROM part_sub_assy_relationship WHERE partID = \", ppartID, \" AND isDeleted = 0)  \n" +
                "     \");  \n" +
                "     IF rowNumWhere IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, rowNumWhere);  \n" +
                "     END IF;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5615,'2.00','V1','Sproc_GetRFQLineItemsByIDWithSubAssembly- Story 38215: Work Order Operation REF DES- Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5615:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveWorkorderTransEquipmentFeederDetails;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWorkorderTransEquipmentFeederDetails`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWoOpEqpID INT(11),  \n" +
                "	IN pWoOPID INT(11),  \n" +
                "	IN pWoTransID INT(11),  \n" +
                "	IN pisVerify INT(11),  \n" +
                "	IN ptransactionType VARCHAR(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "		IF (ptransactionType='F') THEN  \n" +
                "			 SET @temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails = CONCAT(\"  \n" +
                "			SELECT wotfd.id,  \n" +
                "				wotfd.woTransID,  \n" +
                "				woefd.id AS eqpFeederID,  \n" +
                "				woefd.feederLocation,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(wol.rfqLineItemID,'')) FROM workorder_operation_feeder_lineitem_details wol WHERE eqpFeederID=woefd.id AND wol.deletedAt IS NULL) AS rfqLineItemsID,  \n" +
                "				(SELECT GROUP_CONCAT(DISTINCT IFNULL(CAST(wol.lineID AS UNSIGNED),'')) FROM workorder_operation_feeder_lineitem_details wol WHERE eqpFeederID=woefd.id AND wol.deletedAt IS NULL) AS lineID,  \n" +
                "				fun_getAlternatePartListforFeeder(woefd.id) AS alternateParts,  \n" +
                "				fun_getAllocatedUMIDCountfromFeeder(woefd.feederLocation,woefd.woOpEqpID,woefd.woID) as totalallocatedUMID,  \n" +
                "				wotfd.refsidid,  \n" +
                "				csc.uid AS umid,  \n" +
                "				csc.refcompid AS refcompid,  \n" +
                "				csc.expiryDate AS expiryDate,  \n" +
                "				(CASE WHEN (`wotfd`.`isVerified` = 0) THEN 'Pending'  \n" +
                "						WHEN (`wotfd`.`isVerified` = 1) THEN 'Verified' ELSE '' END) AS `isVerifiedConvertedValue`,  \n" +
                "				woefd.mfgPNID,  \n" +
                "				co.PIDCODE AS PIDCode,  \n" +
                "				co.mfgPN AS mfgPN,  \n" +
                "				co.isCustom AS isCustom,  \n" +
                "				co.mfgPNDescription AS mfgPNDescription,  \n" +
                "				ro.rohsIcon,  \n" +
                "				`ro`.`name` AS `rohsName`,  \n" +
                "				woefd.isApprovelineItems,  \n" +
                "				woefd.recommendedLineItem,  \n" +
                "				woefd.woOpEqpID,  \n" +
                "				woefd.isActive,  \n" +
                "				CASE WHEN woefd.isActive=1 THEN 'Active' ELSE 'Inactive' END feederStatus,  \n" +
                "				wotfd.assyQty,  \n" +
                "				wotfd.UOM,  \n" +
                "				wotfd.isVerified,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(wotfd.verifiedOn,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') as verifiedAt,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(wotfd.updatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') as updatedAt,  \n" +
                "				woefd.woID,  \n" +
                "				woefd.partID,  \n" +
                "				woefd.eqpID,  \n" +
                "				woefd.woOPID,  \n" +
                "				woefd.qty,  \n" +
                "				fun_getBinNameByID(csc.binID) AS binName,  \n" +
                "				fun_getRestrictedFeederPart(woefd.id,woefd.mfgPNID) isRestricted,  \n" +
                "				fun_getbomRestrictedWithPermissionFeederPart(woefd.id,woefd.mfgPNID) restrictPermission,  \n" +
                "				(SELECT COUNT(1) FROM workorder_trans_umid_details wtud WHERE wtud.reelStatus='P' AND wtud.eqpFeederID=woefd.id) AS reelChangeCount,  \n" +
                "				(SELECT COUNT(1) FROM workorder_trans_umid_verification_history wtuvd WHERE wtuvd.woTransUMIDDetID=wotfd.id) AS reelVerificationCount,  \n" +
                "				(SELECT CONCAT(firstname,' ',lastname) FROM employees WHERE id=wotfd.verifiedBy) AS verifiedBy,  \n" +
                "				(SELECT CONCAT(firstname,' ',lastname) FROM employees WHERE id=wotfd.employeeID) AS scannedBy,  \n" +
                "				CASE WHEN woefd.placementType=1 THEN 'By Machine' ELSE 'By Hand' END placementType,  \n" +
                "				wotfd.refDesig AS refDesig,  \n" +
                "				-- (SELECT refDesig FROM rfq_lineitems WHERE deletedAt IS NULL AND id = wotfd.rfqLineItemsID) AS refDesig,  \n" +
                "				 (SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL AND id  \n" +
                "				 	IN (SELECT rfqLineItemID FROM workorder_operation_feeder_lineitem_details WHERE deletedAt IS NULL  \n" +
                "				 	and eqpFeederID IN (woefd.id))  \n" +
                "				) AS validRefDesig,  \n" +
                "				woefd.setupComment,  \n" +
                "				(case when (IFNULL(`wotfd`.`rfqLineItemsID`,0) = 0) then 'Supplies,Materials & Tools'  \n" +
                "					else 'BOM Part' END) AS partUsedFrom  ,  \n" +
                "                rli.custPN ,  \n" +
                "                rli.custPNID,  \n" +
                "                line_comp.PIDCode custPNPIDCode,  \n" +
                "                line_comp.RoHSStatusID custPNRoHSStatusID,  \n" +
                "                line_rohs.rohsIcon custPNrohsIcon,  \n" +
                "                line_rohs.name custPNrohsName,  \n" +
                "                IFNULL(wotfd.consumeQty,0) consumeQty,  \n" +
                "                fun_getUserNameByID(wotfd.approvedBy) approvedBy,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(wotfd.approvedOn,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') as approvedOn,  \n" +
                "                wotfd.approvedReason  \n" +
                "			FROM workorder_operation_equipment_feeder_details woefd  \n" +
                "			LEFT JOIN workorder_trans_umid_details wotfd ON (wotfd.eqpFeederID = woefd.id AND wotfd.deletedAt IS NULL AND wotfd.reelStatus='P' AND wotfd.transactionType='F')  \n" +
                "			LEFT JOIN component co ON (woefd.mfgPNID = co.id AND IFNULL(co.isdeleted,0) = 0 AND co.deletedAt IS NULL)  \n" +
                "			LEFT JOIN component_sid_stock csc ON (wotfd.refsidid = csc.id AND IFNULL(csc.isdeleted,0) = 0 AND csc.deletedAt IS NULL)  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON (co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  AND ro.deletedAt IS NULL)  \n" +
                "            LEFT JOIN rfq_lineitems rli ON rli.id = wotfd.rfqLineItemsID AND ifnull(rli.isDeleted,0) = 0  \n" +
                "				AND rli.id in (select rla.rfqLineItemsID from rfq_lineitems_alternatepart rla where  rla.mfgPNID =  woefd.mfgPNID   AND ifnull(rla.isDeleted,0) = 0  )  \n" +
                "            LEFT JOIN component line_comp ON line_comp.id =  rli.custPNID and ifnull(line_comp.isDeleted,0) = 0  \n" +
                "            LEFT JOIN rfq_rohsmst line_rohs ON line_comp.RoHSStatusID = line_rohs.id AND IFNULL(line_rohs.isdeleted,0) = 0  \n" +
                "			WHERE woefd.`deletedAt` IS NULL  \n" +
                "			\");  \n" +
                "  \n" +
                "			IF(pWoOpEqpID IS NOT NULL AND pWoOpEqpID != '') THEN  \n" +
                "				SET @temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails = CONCAT(@temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails,\" AND woefd.`woOpEqpID` = \",pWoOpEqpID);  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails = CONCAT(\"  \n" +
                "			SELECT wotfd.id,  \n" +
                "				wotfd.woTransID,  \n" +
                "				wotfd.refsidid,  \n" +
                "				csc.uid AS umid,  \n" +
                "				csc.refcompid AS refcompid,  \n" +
                "				csc.expiryDate AS expiryDate,  \n" +
                "				csc.pkgQty AS pkgQty,  \n" +
                "				csc.pkgUnit AS pkgUnit,  \n" +
                "				fun_getUnitNameByID(csc.uom) partUOM,  \n" +
                "				(CASE WHEN (`wotfd`.`isVerified` = 0) THEN 'Pending'  \n" +
                "						WHEN (`wotfd`.`isVerified` = 1) THEN 'Verified' ELSE '' END) AS `isVerifiedConvertedValue`,  \n" +
                "				co.PIDCODE AS PIDCode,  \n" +
                "				(SELECT mfgCode FROM mfgcodemst WHERE id = co.mfgCodeID) AS mfgCode,  \n" +
                "				co.mfgPN AS mfgPN,  \n" +
                "				co.mfgPNDescription AS mfgPNDescription,  \n" +
                "				co.isCustom AS isCustom,  \n" +
                "				ro.rohsIcon,  \n" +
                "				`ro`.`name` AS `rohsName`,  \n" +
                "				wotfd.assyQty,  \n" +
                "				wotfd.UOM,  \n" +
                "				wotfd.isVerified,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(wotfd.verifiedOn,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') as verifiedAt,  \n" +
                "                wotfd.verifiedOn verifiredDB,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(wotfd.updatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') as updatedAt,  \n" +
                "				fun_getRestrictedFeederPart(wotfd.eqpFeederID,wotfd.mfgPNID) isRestricted,  \n" +
                "				fun_getbomRestrictedWithPermissionFeederPart(wotfd.eqpFeederID,wotfd.mfgPNID) restrictPermission,  \n" +
                "				(SELECT CONCAT(firstname,' ',lastname) FROM employees WHERE id=wotfd.verifiedBy) AS verifiedBy,  \n" +
                "				(SELECT CONCAT(firstname,' ',lastname) FROM employees WHERE id=wotfd.employeeID) AS scannedBy,  \n" +
                "				(SELECT refDesig FROM rfq_lineitems WHERE deletedAt IS NULL AND id = wotfd.rfqLineItemsID) AS validRefDesig,  \n" +
                "				wotfd.refDesig AS refDesig,  \n" +
                "				wotfd.rfqLineItemsID,  \n" +
                "				(case when (IFNULL(`wotfd`.`rfqLineItemsID`,0) = 0) then 'Supplies,Materials & Tools'  \n" +
                "					else 'BOM Part' END) AS partUsedFrom  ,  \n" +
                "				rli.custPN ,  \n" +
                "                rli.custPNID,  \n" +
                "                line_comp.PIDCode custPNPIDCode,  \n" +
                "                line_comp.RoHSStatusID custPNRoHSStatusID,  \n" +
                "                line_rohs.rohsIcon custPNrohsIcon,  \n" +
                "                line_rohs.name custPNrohsName   ,  \n" +
                "                IFNULL(wotfd.consumeQty,0) consumeQty ,  \n" +
                "                 fun_getUserNameByID(wotfd.approvedBy) approvedBy,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(wotfd.approvedOn,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') as approvedOn,  \n" +
                "                wotfd.approvedReason  \n" +
                "				FROM workorder_trans_umid_details wotfd  \n" +
                "            JOIN workorder_operation woOp ON wotfd.woOPID = woOp.woOPID AND ifnull(woOp.isDeleted,0) = 0  \n" +
                "            LEFT JOIN workorder wo ON woOp.woID = wo.woID AND ifnull(wo.isDeleted,0) = 0  \n" +
                "			LEFT JOIN component co ON (wotfd.mfgPNID = co.id AND IFNULL(co.isdeleted,0) = 0 AND co.deletedAt IS NULL)  \n" +
                "			LEFT JOIN component_sid_stock csc ON (wotfd.refsidid = csc.id AND IFNULL(csc.isdeleted,0) = 0 AND csc.deletedAt IS NULL)  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON (co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  AND ro.deletedAt IS NULL)  \n" +
                "			LEFT JOIN rfq_lineitems rli ON  rli.id = wotfd.rfqLineItemsID AND ifnull(rli.isDeleted,0) = 0  \n" +
                "									AND rli.id in (select rla.rfqLineItemsID from rfq_lineitems_alternatepart rla where  rla.mfgPNID =  wotfd.mfgPNID   AND ifnull(rla.isDeleted,0) = 0  )  \n" +
                "            LEFT JOIN component line_comp ON line_comp.id =  rli.custPNID and ifnull(line_comp.isDeleted,0) = 0  \n" +
                "            LEFT JOIN rfq_rohsmst line_rohs ON line_comp.RoHSStatusID = line_rohs.id AND IFNULL(line_rohs.isdeleted,0) = 0  \n" +
                "			WHERE wotfd.`deletedAt` IS NULL AND wotfd.reelStatus='C'  \n" +
                "			AND wotfd.transactionType='U' AND wotfd.woOPID=\",pWoOPID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY fun_castStringDateTimeToDateTime(updatedAt) DESC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		IF (pisVerify = 1) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" and id > 0\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveWorkorderTransEquipmentFeederDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "		IF (ptransactionType='F') THEN  \n" +
                "			SELECT id,eqpFeederID,rfqLineItemID,CAST(lineID AS UNSIGNED) lineID  \n" +
                "				FROM workorder_operation_feeder_lineitem_details WHERE eqpFeederID IN  \n" +
                "			(SELECT woefd.id FROM workorder_operation_equipment_feeder_details woefd  \n" +
                "			WHERE woefd.`deletedAt` IS NULL  \n" +
                "			AND woefd.`woOpEqpID` = IFNULL(pWoOpEqpID,woefd.`woOpEqpID`)) AND deletedat IS NULL ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5616,'2.00','V1','Sproc_RetrieveWorkorderTransEquipmentFeederDetails Story 38215: Work Order Operation REF DES- Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5616:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_ValidateScanFeederFirst;  \n" +
                "CREATE PROCEDURE `Sproc_ValidateScanFeederFirst`(  \n" +
                "	IN pfeederLocation VARCHAR(1000),  \n" +
                "	IN pUMID VARCHAR(15),  \n" +
                "	IN ppartID INT,  \n" +
                "	IN pwoOpEqpID INT,  \n" +
                "	IN pwoOpID INT,  \n" +
                "	IN pwoTransID INT,  \n" +
                "	IN pemployeeId INT,  \n" +
                "	IN pcheckKitAllocation INT,  \n" +
                "	IN pverificationType VARCHAR(255),  \n" +
                "	IN pisVerify INT,  \n" +
                "	IN ptransactionType VARCHAR(1),  \n" +
                "	IN pisChangeReel INT,  \n" +
                "	IN preelChangeType VARCHAR(100),  \n" +
                "	IN ptoBinID INT,  \n" +
                "	IN pOldUMID VARCHAR(15),  \n" +
                "	IN pisConfirmed INT,  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "    IN pApprovedBy INT,  \n" +
                "    IN pApprovedReason VARCHAR(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                "	DECLARE temp_comp_id INT;  \n" +
                "	DECLARE temp_comp_uom INT;  \n" +
                "	DECLARE temp_rfqLineItemsID VARCHAR(100);  \n" +
                "	DECLARE temp_lineID VARCHAR(100);  \n" +
                "	DECLARE temp_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
                "	DECLARE temp_eqpFeederID INT;  \n" +
                "	DECLARE temp_comp_is_cpn INT DEFAULT 0;  \n" +
                "	DECLARE uidVerified INT DEFAULT 0;  \n" +
                "	DECLARE feederVerified INT DEFAULT 0;  \n" +
                "	DECLARE temp_umid_comp_id INT;  \n" +
                "	DECLARE temp_umid_pkgQty INT;  \n" +
                "	DECLARE temp_umid_stock_id INT;  \n" +
                "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                "	DECLARE temp_umid_package_id INT;  \n" +
                "	DECLARE temp_old_umid_comp_id INT;  \n" +
                "	DECLARE temp_old_umid_stock_id INT;  \n" +
                "	DECLARE temp_old_umid_pkgQty INT;  \n" +
                "	DECLARE temp_old_umid_pkgUnit INT;  \n" +
                "	DECLARE temp_old_umid_pkgUOM INT;  \n" +
                "	DECLARE temp_eqp_wh_id INT;  \n" +
                "	DECLARE temp_eqp_bin_id INT;  \n" +
                "	DECLARE temp_eqp_wh_name VARCHAR(100);  \n" +
                "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
                "	DECLARE temp_salesOrderDetID VARCHAR(100);  \n" +
                "	DECLARE flag_isFeederTransExists INT  DEFAULT 0;  \n" +
                "	DECLARE valid_umid_transfer INT  DEFAULT 0;  \n" +
                "	DECLARE temp_all_mfg_id_lineID VARCHAR(500);  \n" +
                "	DECLARE flag_tempVerificationApproval VARCHAR(5)  DEFAULT 'V';  \n" +
                "	DECLARE temp_json_object VARCHAR(100);  \n" +
                "	DECLARE temp_last_inserted_umid_id INT ;  \n" +
                "	DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_checkKitAllocation VARCHAR(50);  \n" +
                "    DECLARE temp_continue TINYINT DEFAULT 0;  \n" +
                "    DECLARE flag_isStrictlyLimitRefDes TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_allowed_refDesList TEXT;  \n" +
                "    DECLARE temp_entered_refDes TEXT;  \n" +
                "    DECLARE temp_odddly_RefDes TEXT;  \n" +
                "  \n" +
                "	SET temp_eqp_wh_id = NULL;  \n" +
                "	SET temp_eqp_bin_id = NULL;  \n" +
                "	SET temp_eqp_wh_name = NULL;  \n" +
                "	SET temp_all_mfg_id_lineID = NULL;  \n" +
                "  \n" +
                "  \n" +
                "	-- create temporary table for error  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                "		CREATE TEMPORARY TABLE temp_scan_error  \n" +
                "		(  \n" +
                "			 errorText VARCHAR(2000),  \n" +
                "			 isFeederError INT,  \n" +
                "			 isUMIDError INT,  \n" +
                "			 isConfirmation INT,  \n" +
                "			 isMessage INT,  \n" +
                "			 isInformation INT,  \n" +
                "			 stringText1 VARCHAR(1000),  \n" +
                "			 stringText2 VARCHAR(1000),  \n" +
                "			 stringText3 VARCHAR(1000)  \n" +
                "		);  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_feeder_details;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_umid_details;  \n" +
                "  \n" +
                "		select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID, 1, pwoOpID)  \n" +
                "        INTO flag_tempVerificationApproval;  \n" +
                "  \n" +
                "		SELECT isKitAllocationNotRequired INTO flag_kit_allocation_not_required_wo  \n" +
                "		FROM workorder wo  \n" +
                "		WHERE wo.woID = pwoID  \n" +
                "		AND wo.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT group_concat(refDesig) INTO temp_allowed_refDesList  \n" +
                "		FROM workorder_operation_refdesig  \n" +
                "		WHERE woID = pwoID  \n" +
                "		AND woOPID = pwoOpID  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(cor.refDes) INTO temp_odddly_RefDes  \n" +
                "		From component_oddely_refdes cor  \n" +
                "		Where cor.refComponentID = ppartID  \n" +
                "		and cor.isDeleted =0;  \n" +
                "  \n" +
                "		SELECT isStrictlyLimitRefDes INTO flag_isStrictlyLimitRefDes  \n" +
                "		FROM workorder_operation  \n" +
                "		WHERE woID = pwoID  \n" +
                "		AND woOPID = pwoOpID  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "	# Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
                "	IF ((fun_checkFeederLocation(pfeederLocation, pwoOPEqpID, pisVerify, pisChangeReel) > 0)) THEN  \n" +
                "		SELECT id, rfqLineItemsID, partID, eqpFeederID, lineID, pidcode, uom, mfgPN, isCPN , refDesig  \n" +
                "		INTO temp_comp_id, temp_rfqLineItemsID, ppartID, temp_eqpFeederID, temp_lineID, temp_pidcode, temp_comp_uom, temp_mfgpn, temp_comp_is_cpn ,  temp_entered_refDes  \n" +
                "		FROM temp_feeder_details;  \n" +
                "		-- removed due to allow verification multiple times  \n" +
                "		-- IF(pisChangeReel <> 1 AND pisVerify = 1) THEN  \n" +
                "		-- 	SET flag_isFeederTransExists = fun_checkFeederTransaction(pwoOpEqpID, temp_eqpFeederID, temp_rfqLineItemsID, temp_comp_id);  \n" +
                "		-- 	IF(flag_isFeederTransExists = 0 OR flag_isFeederTransExists = -1) THEN  \n" +
                "		-- 		IF(flag_isFeederTransExists = 0) THEN  \n" +
                "		-- 			-- FAILED  \n" +
                "		-- 			SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "		-- 		END IF;  \n" +
                "		-- 	END IF;  \n" +
                "		-- ELSE  \n" +
                "			IF (flag_isStrictlyLimitRefDes = 1 AND temp_allowed_refDesList IS NOT NULL  \n" +
                "				AND fun_ValidateRefDesAgainstOperation(temp_allowed_refDesList,temp_entered_refDes,temp_odddly_RefDes) = 0) THEN  \n" +
                "                SET result = 0;  \n" +
                "			ELSEIF (pUMID IS NOT NULL) THEN  \n" +
                "				-- select concat('select fun_checkUMIDScan(',pUMID,',',ppartID,',',pwoTransID,',',pwoOpID,',',pemployeeId,',',pcheckKitAllocation,',','',',','',',',ptransactionType,',','1',',',pisVerify,',',pwoOpEqpID,',',pfeederLocation,',',pCreatedBy,')');  \n" +
                "				IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                "					SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';  \n" +
                "				ELSE  \n" +
                "					SET temp_checkKitAllocation = pcheckKitAllocation;  \n" +
                "				END IF;  \n" +
                "				IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation,ptransactionType, 1, pisVerify, pwoOpEqpID, pfeederLocation, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN  \n" +
                "					SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId  \n" +
                "					-- , refSalesOrderDetID  \n" +
                "					INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id  \n" +
                "					-- , temp_salesorderdetID  \n" +
                "					FROM temp_umid_details;  \n" +
                "					#check umid id pid is allocated to same line id in bill of material  \n" +
                "					#yes - check for kit allocation of UMID  \n" +
                "					#no - Suggest location for scan UMID  \n" +
                "					-- select concat('select fun_checkKitAllocation(',IFNULL(pUMID,0),',',IFNULL(pwoID,0),',',IFNULL(pwoOPID,0),',',IFNULL(pwoTransID,0),',',IFNULL(temp_eqpFeederID,0),',',IFNULL(temp_umid_comp_id,0),',',IFNULL(temp_umid_package_id,0),',',IFNULL(pcheckKitAllocation,0),',',IFNULL(pisConfirmed,0),'1',','')');  \n" +
                "  \n" +
                "					IF((pisVerify <> 1) AND (SELECT COUNT(1) FROM workorder_trans_umid_details wtud  \n" +
                "						WHERE wtud.woOPEqpID = pwoOPEqpID AND wtud.deletedAt IS NULL AND wtud.reelStatus='P'  \n" +
                "						AND wtud.transactionType='F' AND wtud.eqpFeederID IN (SELECT woefd.id FROM workorder_operation_equipment_feeder_details woefd  \n" +
                "						WHERE woefd.feederLocation COLLATE utf8mb4_0900_ai_ci = pfeederLocation AND woefd.woOPEqpID = pwoOPEqpID AND woefd.deletedAt IS NULL)) > 0) THEN  \n" +
                "							-- ALLOCATED  \n" +
                "							SET result = fun_checkAndInsertError('FEED003', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "					ELSE  \n" +
                "						#in case validate UMID without Kit set true at WO  \n" +
                "                        #select 'Line 134',flag_kit_allocation_not_required_wo ;  \n" +
                "						IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                "							IF ((SELECT COUNT(1) FROM temp_assy_part_list  \n" +
                "																WHERE mfgPNID = temp_umid_comp_id  \n" +
                "																AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "																AND LineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)) = 0) THEN  \n" +
                "									-- WRONG_LOCATION  \n" +
                "									SET result = fun_checkAndInsertError('UMID015', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "                               ELSE  \n" +
                "									SET temp_continue = 1;  \n" +
                "                               END IF;  \n" +
                "						ELSEIF (fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, temp_eqpFeederID, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 1, NULL, NULL) > 0) THEN  \n" +
                "							SET temp_continue = 1;  \n" +
                "                        ELSE  \n" +
                "							SET temp_continue = 0;  \n" +
                "                        END IF;  \n" +
                "                       # select 'Line 142',temp_continue, pisVerify , pfeederLocation,temp_eqp_wh_id ;  \n" +
                "                        IF temp_continue = 1 THEN  \n" +
                "							#check part belongs to multiple line  \n" +
                "							#yes - check for umid and feeder component must be same  \n" +
                "							#no - check for restrict part  \n" +
                "							#no - allow to scan details  \n" +
                "							IF(temp_comp_is_cpn = 0 AND (SELECT COUNT(1) FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "								WHERE woefld.eqpFeederID=temp_eqpFeederID AND deletedAt IS NULL) > 1 AND temp_comp_id <> temp_umid_comp_id) THEN  \n" +
                "								-- INVALID  \n" +
                "								SET result = fun_checkAndInsertError('UMID004', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "							-- fun_checkUMIDRestrictionWithLineItem(ppartID, temp_comp_id, temp_umid_stock_id, 1, pisConfirmed, temp_rfqLineItemsID)  \n" +
                "							ELSEIF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_comp_id, temp_umid_stock_id, 1, pisConfirmed, temp_rfqLineItemsID) = 0) THEN  \n" +
                "								SET result = 0;  \n" +
                "							ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, temp_rfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
                "								SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "							ELSE  \n" +
                "								# if feeder details and umid details are valid than give umid qty details on screen  \n" +
                "								# insert transaction details for fedder first and umid validate details in  workorder_trans_umid_details  \n" +
                "								-- verify flag  \n" +
                "								IF (pisVerify <> 1) THEN  \n" +
                "									# Get Equipment/WareHouse ID from pwoOpEqpID  \n" +
                "									IF ((pwoOpEqpID IS NOT NULL) AND  \n" +
                "										( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0) OR flag_kit_allocation_not_required_wo = 1 ) THEN  \n" +
                "										SELECT whmst.id, whmst.`name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst whmst  \n" +
                "										WHERE refEqpID IN (  \n" +
                "											SELECT woe.eqpID FROM workorder_operation_equipment woe  \n" +
                "											WHERE woe.woOpEqpID=pwoOpEqpID AND woe.deletedAt IS NULL  \n" +
                "										) AND whmst.deletedAt IS NULL;  \n" +
                "  \n" +
                "										IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
                "											SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
                "											AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
                "										END IF;  \n" +
                "										IF (temp_eqp_bin_id IS NOT NULL) THEN  \n" +
                "  \n" +
                "                                   --     select flag_tempVerificationApproval , pisConfirmed ;  \n" +
                "											IF  ((flag_tempVerificationApproval = 'CP' OR flag_tempVerificationApproval = 'CV') AND pisConfirmed = 0) THEN -- Take Confirmation  \n" +
                "												-- Take confirmation  \n" +
                "												SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                "											ELSEIF(flag_tempVerificationApproval = 'V' OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) THEN -- verification not require  \n" +
                "												SELECT id INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
                "													WHERE eqpFeederID = temp_eqpFeederID AND transactionType='F'  \n" +
                "													AND refsidid = temp_umid_stock_id  \n" +
                "													AND mfgPNID=temp_umid_comp_id AND woOpEqpID=pwoOPEqpID  \n" +
                "													AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "														WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "													AND reelStatus=\"P\" AND deletedAt IS NULL  \n" +
                "													AND woOPID = pwoOpID;  \n" +
                "  \n" +
                "												IF(temp_feeder_transID > 0) THEN  \n" +
                "													-- FAILED  \n" +
                "													SET result = fun_checkAndInsertError('UMID001', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "												ELSE  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL, NULL,  \n" +
                "														\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "														0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "													INSERT INTO workorder_trans_umid_details  \n" +
                "														(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "														`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "														`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "														`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`, `verifiedOn`, `reelStatus`,  \n" +
                "                                                        `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "													VALUES  \n" +
                "														(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "														temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "														NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "														pCreatedBy, pCreatedBy, 1, pemployeeId, fun_DatetimetoUTCDateTime(), \"P\",  \n" +
                "                                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "													-- VERIFIED  \n" +
                "													SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "													SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "													SET valid_umid_transfer = 1;  \n" +
                "												END IF;  \n" +
                "											ELSEIF(flag_tempVerificationApproval = 'P' OR (flag_tempVerificationApproval = 'CP' AND pisConfirmed =1)) THEN   -- verification required  \n" +
                "												-- transfer umid to bin  \n" +
                "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "													pCreatedBy, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL, NULL,  \n" +
                "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "													0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "												-- add umid transaction details  \n" +
                "												INSERT INTO workorder_trans_umid_details  \n" +
                "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "													`updatedBy`,`createdBy`, `reelStatus`,  \n" +
                "                                                    `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "												VALUES  \n" +
                "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "													pCreatedBy, pCreatedBy, \"P\",  \n" +
                "                                                    pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "												SET valid_umid_transfer = 1;  \n" +
                "											END IF;  \n" +
                "										ELSE  \n" +
                "											-- WRONG_LOCATION  \n" +
                "											SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "										END IF;  \n" +
                "									ELSE  \n" +
                "										SET result = fun_checkAndInsertError('UMID009', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									SET uidVerified = 1;  \n" +
                "								ELSE  \n" +
                "									-- If change reel and old umid details  \n" +
                "									IF (pisChangeReel = 1 AND pOldUMID IS NOT NULL) THEN  \n" +
                "										-- check workorder operation equipment id and kit allocated or not while change reel  \n" +
                "										-- get component details based on old umid  \n" +
                "										SELECT css.refcompid, css.id, css.pkgQty, css.pkgUnit, css.uom  \n" +
                "											INTO temp_old_umid_comp_id, temp_old_umid_stock_id, temp_old_umid_pkgQty, temp_old_umid_pkgUnit, temp_old_umid_pkgUOM  \n" +
                "											FROM component_sid_stock css  \n" +
                "											WHERE css.uid=pOldUMID AND css.deletedAt IS NULL;  \n" +
                "  \n" +
                "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud  \n" +
                "											WHERE wtud.eqpFeederID = temp_eqpFeederID AND wtud.transactionType='F'  \n" +
                "											AND wtud.refsidid=temp_old_umid_stock_id  \n" +
                "												AND wtud.mfgPNID=temp_old_umid_comp_id  \n" +
                "												AND wtud.woOpEqpID=pwoOPEqpID  \n" +
                "												AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "													WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "											AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
                "											AND woOPID = pwoOpID;  \n" +
                "  \n" +
                "									-- If not change reel than check for reel transaction is done or not  \n" +
                "									ELSEIF(pisChangeReel <> 1) THEN  \n" +
                "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud  \n" +
                "											WHERE wtud.eqpFeederID = temp_eqpFeederID AND transactionType='F'  \n" +
                "											AND wtud.refsidid = temp_umid_stock_id  \n" +
                "												AND wtud.mfgPNID=temp_umid_comp_id  \n" +
                "												AND wtud.woOpEqpID=pwoOPEqpID  \n" +
                "												AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "													WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "											AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
                "											AND wtud.woOPID = pwoOpID;  \n" +
                "											-- AND isVerified=0;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									-- if not change reel than update verify flag for verfiy true  \n" +
                "									IF(pisChangeReel <> 1 AND temp_feeder_transID > 0) THEN  \n" +
                "										UPDATE workorder_trans_umid_details  \n" +
                "										SET isVerified=1,  \n" +
                "										verifiedBy=pemployeeId,  \n" +
                "										verifiedOn=fun_DatetimetoUTCDateTime()  \n" +
                "										WHERE id=temp_feeder_transID;  \n" +
                "  \n" +
                "										SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
                "  \n" +
                "										-- VERIFIED  \n" +
                "										SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "										SET uidVerified = 1;  \n" +
                "  \n" +
                "									-- if change reel than update verify flag for verfiy true  \n" +
                "									ELSEIF(pisChangeReel = 1 AND temp_feeder_transID > 0) THEN  \n" +
                "										-- check workorder operation equipment id and kit allocated or not while change reel  \n" +
                "										IF ((pwoOpEqpID IS NOT NULL) AND  \n" +
                "											( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0) OR flag_kit_allocation_not_required_wo = 1) THEN  \n" +
                "											SELECT whmst.id, whmst.`name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst whmst  \n" +
                "											WHERE whmst.refEqpID IN (  \n" +
                "												SELECT woe.eqpID FROM workorder_operation_equipment woe  \n" +
                "												WHERE woe.woOpEqpID=pwoOpEqpID AND woe.deletedAt IS NULL  \n" +
                "											) AND whmst.deletedAt IS NULL;  \n" +
                "  \n" +
                "											-- check feeder location and warehouse is valid than allow to do changes reel  \n" +
                "											IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
                "												SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
                "												AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
                "											END IF;  \n" +
                "											IF (temp_eqp_bin_id IS NOT NULL AND ptoBinID IS NOT NULL) THEN  \n" +
                "												-- ZERO Out case Json returnQty/Unit 0, consumeQty/Unit - Old UMID data pkgQty/pkgUnit/pkgUOM  \n" +
                "												IF (preelChangeType = \"ZeroOut\") THEN  \n" +
                "														-- Added for multiple kit  \n" +
                "													SET temp_json_object = CONCAT('[{\\\"id\\\":',  \n" +
                "														(SELECT id FROM kit_allocation ka  \n" +
                "															WHERE ka.refSalesOrderDetID IN  \n" +
                "																(SELECT GROUP_CONCAT(wsd.salesOrderDetailID)  \n" +
                "																FROM workorder_salesorder_details wsd  \n" +
                "																WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID)  \n" +
                "														AND ka.uid=pOldUMID AND ka.assyID=ppartID AND `status` = \"A\"),  \n" +
                "														',\\\"returnQty\\\":',0,  \n" +
                "														',\\\"returnUnit\\\":',0,  \n" +
                "														',\\\"consumeQty\\\":',temp_old_umid_pkgQty,  \n" +
                "														',\\\"consumeUnit\\\":',temp_old_umid_pkgUnit,  \n" +
                "														',\\\"umidUOM\\\":',temp_old_umid_pkgUOM,'}]');  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, 0,  \n" +
                "														0, NULL, NULL, temp_json_object, preelChangeType,  \n" +
                "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType)  \n" +
                "														,pwoTransID,  \n" +
                "														1,NULL,NULL,NULL,NULL);  \n" +
                "												ELSE  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL, NULL,  \n" +
                "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType),pwoTransID,  \n" +
                "														0,NULL,NULL,NULL,NULL);  \n" +
                "												END IF;  \n" +
                "												SET valid_umid_transfer = 1;  \n" +
                "  \n" +
                "												-- update old record toumid  \n" +
                "												UPDATE workorder_trans_umid_details  \n" +
                "												SET toRefUIDId=temp_umid_stock_id  \n" +
                "												WHERE id=temp_feeder_transID;  \n" +
                "  \n" +
                "												SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
                "  \n" +
                "												-- transfer umid to bin  \n" +
                "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "													pCreatedBy, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL, NULL,  \n" +
                "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "													0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "												-- SELECT pwoTransID;  \n" +
                "												-- insert new umid for workorder equipment feeder  \n" +
                "												INSERT INTO workorder_trans_umid_details  \n" +
                "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "													`updatedBy`,`createdBy`, `reelStatus`)  \n" +
                "												VALUES  \n" +
                "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "													pCreatedBy, pCreatedBy, \"P\");  \n" +
                "  \n" +
                "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "												-- UMID SCANNED  \n" +
                "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "											ELSE  \n" +
                "												-- WRONG_LOCATION  \n" +
                "												SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "											END IF;  \n" +
                "										ELSE  \n" +
                "											SET result = fun_checkAndInsertError('UMID009', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "										END IF;  \n" +
                "									ELSE  \n" +
                "										-- FAILED  \n" +
                "										SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "                    END IF;  \n" +
                "				END IF;  \n" +
                "				-- SELECT IFNULL(COUNT(1),0) FROM kit_allocation WHERE uid = pUMID AND assyID=ppartID AND refBOMLineID IN (SELECT rfqLineItemsID FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details WHERE uid=pUMID))) > 0  \n" +
                "			ELSE  \n" +
                "				# if feeder details are valid than give PID Details on screen  \n" +
                "				SET feederVerified = 1;  \n" +
                "				-- SELECT * FROM temp_feeder_details;  \n" +
                "			END IF;  \n" +
                "		-- END IF;     -- removed due to allow verification multiple times  \n" +
                "	END IF;  \n" +
                "	INSERT INTO `uid_verification_history`(  \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
                "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
                "	VALUES (  \n" +
                "		pfeederLocation, 					CASE WHEN (pUMID IS NULL) THEN '' ELSE pUMID END, 	temp_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_comp_id),		temp_mfgpn, 						temp_umid_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id),	temp_umid_mfgPN,					CASE WHEN (uidVerified = 1 OR feederVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                "		0,							IFNULL(pCreatedBy,''),					fun_DatetimetoUTCDateTime(),  \n" +
                "		pwoTransID, 						pwoOpEqpID,						pverificationType  \n" +
                "	);  \n" +
                "  \n" +
                "	#1. return history of umid transfer  \n" +
                "	IF(valid_umid_transfer = 0) THEN  \n" +
                "		SELECT id FROM kit_allocation WHERE 1=0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#2. return history of verification  \n" +
                "        SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                "  \n" +
                "        #3. return error  \n" +
                "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');  \n" +
                "  \n" +
                "	#4. return umid details  \n" +
                "	-- IF (uidVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                "	SELECT * FROM temp_umid_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#5. return feeder details  \n" +
                "	-- IF (feederVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_feeder_details  \n" +
                "	SELECT id FROM workorder_operation_equipment_feeder_details WHERE 1=0;  \n" +
                "	SELECT * FROM temp_feeder_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#6. return allocated UMID details  \n" +
                "	IF (pOldUMID IS NULL AND feederVerified=1) THEN  \n" +
                "		-- select '1';  \n" +
                "		SELECT GROUP_CONCAT(wsd.salesOrderDetailID) INTO temp_salesOrderDetID FROM workorder_salesorder_details wsd  \n" +
                "		WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID;  \n" +
                "		/*IF (temp_comp_is_cpn = 0) THEN  \n" +
                "			SELECT GROUP_CONCAT(vuBOMDet.mfgPNIDWithPackagingAliasID) INTO temp_all_mfg_id_lineID  \n" +
                "			FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID  \n" +
                "			AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "			WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);  \n" +
                "		ELSE  */  \n" +
                "			SELECT CASE WHEN vuBOMDet.custPNID IS NOT NULL THEN GROUP_CONCAT(vuBOMDet.custPNID,',',vuBOMDet.mfgPNIDWithPackagingAliasID)  \n" +
                "						ELSE  GROUP_CONCAT(vuBOMDet.mfgPNIDWithPackagingAliasID) END  \n" +
                "            INTO temp_all_mfg_id_lineID  \n" +
                "			FROM vu_bom_details_with_alias vuBOMDet WHERE vuBOMDet.AssyId=ppartID  AND vuBOMDet.isDeleted = 0  \n" +
                "			AND vuBOMDet.lineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "			WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL);  \n" +
                "		-- END IF;  \n" +
                "  \n" +
                "		CALL Sproc_GetStockAllocateList (temp_salesOrderDetID, ppartID, temp_all_mfg_id_lineID, temp_comp_uom, CAST(temp_rfqLineItemsID AS CHAR(255)), NULL, \"AllocatedStock\", \"ALL\");  \n" +
                "	ELSE  \n" +
                "		SELECT woSalesOrderDetID FROM workorder_salesorder_details  \n" +
                "		WHERE 1=0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#7 return last inserted/updated records for umid transaction  \n" +
                "	SELECT temp_last_inserted_umid_id;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5617,'2.00','V1','Sproc_ValidateScanFeederFirst- Story 38215: Work Order Operation REF DES- Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5617:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_validateScanMissingUMIDOnly;  \n" +
                "CREATE PROCEDURE `Sproc_validateScanMissingUMIDOnly`(  \n" +
                "	IN pUMID VARCHAR(15),  \n" +
                "	IN ppartID INT,  \n" +
                "	IN pwoOpID INT,  \n" +
                "	IN pwoTransID INT,  \n" +
                "	IN pemployeeId INT,  \n" +
                "	IN pcheckKitAllocation INT,  \n" +
                "	IN pverificationType VARCHAR(255),  \n" +
                "	IN pisVerify INT,  \n" +
                "	IN ptransactionType VARCHAR(1),  \n" +
                "	IN prfqLineItemsID INT,  \n" +
                "	IN pisConfirmed INT,  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pisPlacementTracking INT,  \n" +
                "	IN psaveUMIDDetails INT,  \n" +
                "	IN prefDesig VARCHAR(3000),  \n" +
                "	IN passyQty INT  ,  \n" +
                "    IN pConsumeQty INT,  \n" +
                "    IN pUMIDAllocateStatus INT,  \n" +
                "    IN pCreatedBy VARCHAR(255),  \n" +
                "    IN pCreateByRoleId INT ,  \n" +
                "    IN pApprovedBy INT,  \n" +
                "    IN pApprovedReason VARCHAR(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                "	DECLARE temp_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
                "	DECLARE uidVerified INT DEFAULT 0;  \n" +
                "	DECLARE temp_umid_comp_id INT;  \n" +
                "	DECLARE temp_umid_stock_id INT;  \n" +
                "	DECLARE temp_umid_pkgQty INT;  \n" +
                "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                "	DECLARE temp_umid_package_id INT;  \n" +
                "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
                "	DECLARE temp_last_inserted_umid_id INT;  \n" +
                "	DECLARE flag_isFeederTransExists INT DEFAULT 0;  \n" +
                "	DECLARE flag_tempVerificationApproval VARCHAR(5) DEFAULT 'V';  \n" +
                "	DECLARE flag_tempLineCount INT DEFAULT 0;  \n" +
                "	DECLARE tot_stock_umid INT DEFAULT 0;  \n" +
                "    DECLARE allocated_stock_umid INT DEFAULT 0 ;  \n" +
                "    DECLARE kit_qty INT DEFAULT 0 ;  \n" +
                "    DECLARE temp_salesorder_detID INT ;  \n" +
                "    DECLARE flag_kit_allocation_notcheck TINYINT DEFAULT 0;  \n" +
                "    DECLARE vParentWoId INT;  \n" +
                "    DECLARE flag_isStrictlyLimitRefDes TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_allowed_refDesList TEXT;  \n" +
                "	DECLARE temp_odddly_RefDes  TEXT;  \n" +
                "  \n" +
                "    # USE of pUMID_Allocate_Status 0- Start Checking, 1 - from existing kit allocation with equal qty , 2 - from existing kit allocation with lesser qty   , 3 - from unallocated stocl , 4- deallocate kit and allocate new kit  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
                "	(  \n" +
                "	     errorText VARCHAR(2000),  \n" +
                "	     isFeederError INT,  \n" +
                "	     isUMIDError INT,  \n" +
                "	     isConfirmation INT,  \n" +
                "	     isMessage INT,  \n" +
                "	     isInformation INT,  \n" +
                "	     stringText1 VARCHAR(1000),  \n" +
                "	     stringText2 VARCHAR(1000),  \n" +
                "	     stringText3 VARCHAR(1000)  \n" +
                "	);  \n" +
                "		#Get parent WO ID in case of revise  work order.  \n" +
                "		WITH RECURSIVE RevWo AS  (  \n" +
                "			SELECT	woId,  \n" +
                "					1 lvl  ,  \n" +
                "					terminateWOID  \n" +
                "			FROM workorder  \n" +
                "			WHERE woId = pwoID  \n" +
                "			AND isDeleted = 0  \n" +
                "			UNION ALL  \n" +
                "			SELECT	wo.woID,  \n" +
                "					rw.lvl +1 lvl,  \n" +
                "					wo.terminateWOID  \n" +
                "			 FROM workorder wo  \n" +
                "			 INNER JOIN RevWo rw ON rw.terminatewoID = wo.woID  \n" +
                "			 WHERE wo.isDeleted = 0  \n" +
                "			 )  \n" +
                "			SELECT rev.woID  INTO vParentWoId  \n" +
                "			FROM RevWo rev WHERE rev.terminateWOID IS NULL;  \n" +
                "  \n" +
                "		#Check for kit allocation flag from BOM Line  \n" +
                "		SELECT isNotRequiredKitAllocation INTO flag_kit_allocation_notcheck  \n" +
                "		FROM rfq_lineitems rli  \n" +
                "		WHERE rli.id = prfqLineItemsID  \n" +
                "        AND rli.isDeleted = 0 ;  \n" +
                "  \n" +
                "		SET flag_kit_allocation_notcheck  = IFNULL(flag_kit_allocation_notcheck,0);  \n" +
                "  \n" +
                "		SELECT group_concat(refDesig) INTO temp_allowed_refDesList  \n" +
                "		FROM workorder_operation_refdesig  \n" +
                "		WHERE woID = IFNULL(vParentWoId,pwoID)  \n" +
                "		AND woOPID = pwoOpID  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT isStrictlyLimitRefDes INTO flag_isStrictlyLimitRefDes  \n" +
                "		FROM workorder_operation  \n" +
                "		WHERE woID = IFNULL(vParentWoId,pwoID)  \n" +
                "		AND woOPID = pwoOpID  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(cor.refDes) INTO temp_odddly_RefDes  \n" +
                "		From component_oddely_refdes cor  \n" +
                "		Where cor.refComponentID = ppartID  \n" +
                "		and cor.isDeleted =0;  \n" +
                "  \n" +
                "		#CHeck Only BOM Part allowed  \n" +
                "        IF (SELECT COUNT(1) FROM rfq_lineitems_alternatepart rla  \n" +
                "				WHERE rla.mfgPNID IN  (SELECT refcompid  FROM component_sid_stock  \n" +
                "											WHERE uid = pUMID AND isDeleted = 0 )  \n" +
                "			    AND rla.partID =   ppartID  \n" +
                "				AND rla.isDeleted = 0) = 0 THEN  \n" +
                "             SET result = fun_checkAndInsertError('UMID043', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "        END IF;  \n" +
                "	# umid transaction details based on umid  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_umid_transIDs;  \n" +
                "    select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID,0, pwoOpID)  \n" +
                "    INTO flag_tempVerificationApproval;  \n" +
                "  /*  \n" +
                "	IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 0) > 0) THEN  \n" +
                "		SET flag_tempVerificationRequire = 1;  \n" +
                "	END IF;  \n" +
                "  */  \n" +
                "	# Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
                "	-- select concat('fun_checkUMIDScan(',pUMID,',', ppartID,',', pwoTransID,',', pwoOpID,',', pemployeeId,',', pcheckKitAllocation,',', ptransactionType,',', 0, pisVerify, ',NULL, NULL',',',pwoID,',', pCreatedBy,')');  \n" +
                "    IF (pisPlacementTracking = 1 AND psaveUMIDDetails = 1 AND flag_isStrictlyLimitRefDes = 1  \n" +
                "				AND temp_allowed_refDesList IS NOT NULL AND fun_ValidateRefDesAgainstOperation(temp_allowed_refDesList,prefDesig,temp_odddly_RefDes) = 0) THEN  \n" +
                "                SET result = 0;  \n" +
                "	ELSEIF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, 'MISSINGPART', ptransactionType, 0, pisVerify, NULL, NULL, pwoID, pCreatedBy, pisConfirmed ) > 0)) THEN  \n" +
                "		SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId  \n" +
                "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id  \n" +
                "		FROM temp_umid_details;  \n" +
                "  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		IF(flag_tempLineCount = 1) THEN  \n" +
                "			SELECT COUNT(1), rfqLineItemsID INTO flag_tempLineCount, prfqLineItemsID FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prfqLineItemsID IS NOT NULL) THEN  \n" +
                "			UPDATE temp_umid_details tud  \n" +
                "			SET tud.refDesig = (SELECT GROUP_CONCAT(refDesig) FROM rfq_lineitems WHERE deletedAt IS NULL  \n" +
                "			AND id = prfqLineItemsID)  \n" +
                "			WHERE tud.refsidid=temp_umid_stock_id;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                "			AND rfqLineItemsID = prfqLineItemsID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "        #step -2 Already  Allocated in Given KIT of same WO  \n" +
                "  \n" +
                "        IF (pUMIDAllocateStatus = 0 ) THEN  \n" +
                "			SELECT SUM(allocatedQty - IFNULL(consumeQty,0) - IFNULL(returnQty,0))  \n" +
                "            INTO kit_qty  \n" +
                "			FROM KIT_ALLOCATION ka        WHERE uid = pUMID  \n" +
                "			AND refSalesOrderDetID IN (SELECT salesOrderDetailID  FROM workorder_salesorder_details WHERE isDeleted = 0  AND woID = IFNULL(vParentWoId, pwoID) )  \n" +
                "			AND STATUS = 'A';  \n" +
                "  \n" +
                "            IF kit_qty > 0 THEN  \n" +
                "				IF  kit_qty >= pConsumeQty THEN  \n" +
                "					SET pUMIDAllocateStatus = 1 ;  \n" +
                "				ELSEIF kit_qty < pConsumeQty THEN  \n" +
                "					SET pUMIDAllocateStatus = 2 ;  \n" +
                "				END IF ;  \n" +
                "                #SELECT 'LINE 122' , pUMIDAllocateStatus;  \n" +
                "            ELSE  \n" +
                "				SELECT SUM(css.pkgQty) INTO tot_stock_umid  \n" +
                "				FROM component_sid_stock AS css  \n" +
                "				WHERE css.uid = pUMID  \n" +
                "				AND css.isDeleted = 0;  \n" +
                "  \n" +
                "				SELECT SUM((ka_all.allocatedQty - IFNULL(ka_all.consumeQty,0) - IFNULL(ka_all.returnQty,0)) ) INTO  allocated_stock_umid  \n" +
                "				FROM kit_allocation AS ka_all  \n" +
                "				WHERE ka_all.uid = pUMID  \n" +
                "				AND  ka_all.status IN ('A','R')  \n" +
                "				GROUP BY ka_all.uid ;  \n" +
                "  \n" +
                "				#step - 3 Check Un-Allocated  stock available or not  \n" +
                "				IF ((tot_stock_umid - allocated_stock_umid) >= pConsumeQty AND pConsumeQty > 0) THEN  \n" +
                "					SET pUMIDAllocateStatus = 3;  \n" +
                "					#allocate kit from un allocated stock  \n" +
                "				END IF;  \n" +
                "                #SELECT 'LINE 139' , pUMIDAllocateStatus;  \n" +
                "            END IF;  \n" +
                "        END IF;  \n" +
                "        #SELECT 'LINE 142' , pUMIDAllocateStatus;  \n" +
                "		# Add UMID in kit for all kit with status ='A' checkKitAndDeallocate  \n" +
                "  \n" +
                "			IF(flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                "				IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "					SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "					SET uidVerified = 1;  \n" +
                "				ELSE  \n" +
                "					SET uidVerified = 0;  \n" +
                "					SET result = 0;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				IF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_umid_comp_id, temp_umid_stock_id, 0, pisConfirmed, prfqLineItemsID) = 0) THEN  \n" +
                "					SET result = 0;  \n" +
                "				ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, prfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
                "					SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				ELSE  \n" +
                "						#take first sales order default in case of multiple sales order  \n" +
                "						SELECT 	salesOrderDetailID		#GROUP_CONCAT(salesOrderDetailID  SEPARATOR ',') AS saledOrderDetailIDs  \n" +
                "						INTO temp_salesorder_detID  \n" +
                "						FROM  workorder_salesorder_details  \n" +
                "						WHERE woID = IFNULL(vParentWoId,pwoID)  \n" +
                "						AND isDeleted = 0  \n" +
                "						LIMIT 1;  \n" +
                "					-- check verification required  \n" +
                "					-- than verification require than check from which page scan/verify  \n" +
                "                     IF (flag_tempVerificationApproval = 'CV' AND pisConfirmed = 0) and psaveUMIDDetails = 1 THEN  \n" +
                "							-- Take confirmation  \n" +
                "						SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                "					ELSEIF(flag_tempVerificationApproval = 'V'  OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) and psaveUMIDDetails = 1 THEN -- verification not require  \n" +
                "						-- if scan option selected than check for already scanned in flow first  \n" +
                "						-- if not scanned than add as verified umid directly  \n" +
                "						IF(pisVerify <> 1) THEN  \n" +
                "							SELECT COUNT(id) INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
                "							WHERE transactionType='U'  \n" +
                "							AND refsidid = temp_umid_stock_id  \n" +
                "							AND mfgPNID=temp_umid_comp_id  \n" +
                "							AND reelStatus=\"C\" AND deletedAt IS NULL  \n" +
                "							AND woOPID = pwoOpID  \n" +
                "							AND employeeID=pemployeeId;  \n" +
                "							-- if already scanned than give message  \n" +
                "							-- else add as verified umid directly  \n" +
                "							IF(temp_feeder_transID > 0) THEN  \n" +
                "								# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                "								INSERT INTO workorder_trans_umid_details  \n" +
                "									(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "									`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "									`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "									`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                "									`verifiedOn`,`reelStatus`, refDesig,  \n" +
                "									`approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "								VALUES  \n" +
                "									(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "									temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "									passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "									pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                "									fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
                "                                    pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "	  							-- VERIFIED  \n" +
                "								CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "								SELECT LAST_INSERT_ID() AS id;  \n" +
                "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "								SET uidVerified = 1;  \n" +
                "							ELSE  \n" +
                "								IF psaveUMIDDetails = 1 THEN  \n" +
                "									-- Condition for SMT material / For SMT UMID no need to do kit allocation  \n" +
                "									IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
                "									#SELECT 'LINE 197 CALL fun_checkKitAndDeallocate' ;  \n" +
                "										# Check wheather kit allocation required  or not  \n" +
                "  \n" +
                "										IF flag_kit_allocation_notcheck = 0  AND prfqLineItemsID IS NOT NULL THEN  \n" +
                "											SET result = fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , NULL ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,NULL, prfqLineItemsID,pUMIDAllocateStatus ,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId, vParentWoId);  \n" +
                "										ELSE  \n" +
                "											SET result = 1;  \n" +
                "										END IF;  \n" +
                "									ELSE  \n" +
                "										IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND  \n" +
                "												wop.partID = temp_umid_comp_id AND  \n" +
                "												wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN  \n" +
                "											SET result = 1;  \n" +
                "										END IF;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									IF (result = 1 ) THEN  \n" +
                "										SET result = 1;  \n" +
                "										INSERT INTO workorder_trans_umid_details  \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                "										`verifiedOn`, `reelStatus`, refDesig, consumeQty,  \n" +
                "                                        `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "										VALUES  \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig, pConsumeQty,  \n" +
                "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "										-- VERIFIED  \n" +
                "										CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "										SELECT LAST_INSERT_ID() AS id;  \n" +
                "										-- SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "										SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "										SET uidVerified = 1;  \n" +
                "									ELSEIF psaveUMIDDetails = 1 AND   pUMIDAllocateStatus = 0   THEN  \n" +
                "										SET pUMIDAllocateStatus = 4;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						ELSE  \n" +
                "							-- if already scanned than verify same umid for history  \n" +
                "							-- if not scanned yet than give message  \n" +
                "							IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "								SET uidVerified = 1;  \n" +
                "							ELSE  \n" +
                "								SET uidVerified = 0;  \n" +
                "								SET result = 0;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "					ELSE  \n" +
                "						-- verification require than check from which page/popup  \n" +
                "						-- if from scan popup than add umid as scanned new record  \n" +
                "						-- else check for verify flow  \n" +
                "                        #select  prfqLineItemsID;  \n" +
                "						IF (pisVerify <> 1) THEN  \n" +
                "							IF psaveUMIDDetails = 1 THEN  \n" +
                "								-- Condition for SMT material / For SMT UMID no need to do kit allocation  \n" +
                "								IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
                "                                #SELECT 'LINE 252 CALL fun_checkKitAndDeallocate' ;  \n" +
                "                                # Check wheather kit allocation required  or not  \n" +
                "  \n" +
                "									IF flag_kit_allocation_notcheck = 0  AND prfqLineItemsID IS NOT NULL THEN  \n" +
                "										SET result = fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , NULL ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,NULL, prfqLineItemsID,pUMIDAllocateStatus ,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId, vParentWoId);  \n" +
                "                                    ELSE  \n" +
                "										SET result = 1;  \n" +
                "                                    END IF;  \n" +
                "                                ELSE  \n" +
                "									IF(SELECT COUNT(1) FROM workorder_operation_part wop WHERE wop.deletedAt IS NULL AND  \n" +
                "											wop.partID = temp_umid_comp_id AND  \n" +
                "											wop.woOPID IN (SELECT woOPID FROM workorder_trans wt WHERE wt.woTransID=pwoTransID AND wt.deletedAt IS NULL) > 0) THEN  \n" +
                "										SET result = 1;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "                                #select 'Line261' , result;  \n" +
                "								#IF (fun_checkKitAndDeallocate(pUMID , pwoID ,  pwoOPID ,  pwoTransID , null ,temp_umid_comp_id ,temp_umid_package_id, pcheckKitAllocation ,pisConfirmed ,null, prfqLineItemsID,pUMIDAllocateStatus,psaveUMIDDetails,pConsumeQty, pCreatedBy , pCreateByRoleId) = 1 ) THEN  \n" +
                "                                IF result = 1 THEN  \n" +
                "									SET result = 1;  \n" +
                "                                    #SELECT 'LINE 264 INSERT workorder_trans_umid_details' ;  \n" +
                "									# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                "									INSERT INTO workorder_trans_umid_details  \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "										`updatedBy`,`createdBy`, `reelStatus`, refDesig, consumeQty)  \n" +
                "									VALUES  \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "										pCreatedBy, pCreatedBy,  \"C\", prefDesig, pConsumeQty);  \n" +
                "									-- SCANNED  \n" +
                "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "									SELECT LAST_INSERT_ID() AS id;  \n" +
                "                                    -- Condition for SMT material / For SMT UMID , only successful scan message  \n" +
                "                                    IF IFNULL(temp_salesorder_detID,0) > 0 THEN  \n" +
                "										SET result = fun_checkAndInsertError('UMID040', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "										SET uidVerified = 1;  \n" +
                "                                    ELSE  \n" +
                "										SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "										SET uidVerified = 1;  \n" +
                "									END IF;  \n" +
                "								ELSEIF psaveUMIDDetails = 1 AND   pUMIDAllocateStatus = 0   THEN  \n" +
                "									SET pUMIDAllocateStatus = 4;  \n" +
                "                                END IF;  \n" +
                "							END IF;  \n" +
                "						ELSE  \n" +
                "							IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "								SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "								SET uidVerified = 1;  \n" +
                "							ELSE  \n" +
                "								SET uidVerified = 0;  \n" +
                "								SET result = 0;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		#END IF;  \n" +
                "	END IF;  \n" +
                "	#END IF;  \n" +
                "  \n" +
                "	#select '10' , 'AT END' ;  \n" +
                "	INSERT INTO `uid_verification_history`(  \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
                "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
                "	VALUES (  \n" +
                "		pUMID,							'',				temp_umid_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 		NULL,  \n" +
                "		NULL, 							NULL,			CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                "		0,							IFNULL(pCreatedBy,''),		fun_DatetimetoUTCDateTime(),  \n" +
                "		pwoTransID, 						NULL,				pverificationType  \n" +
                "	);  \n" +
                "  \n" +
                "	#0. return assy part list  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_assy_part_list  \n" +
                "	SELECT id, refcompid AS mfgPNID, NULL AS rfqLineItemsID FROM component_sid_stock WHERE 1=0;  \n" +
                "  \n" +
                "	IF(flag_tempLineCount <= 1 AND prfqLineItemsID IS NOT NULL) THEN  \n" +
                "		SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                "		AND rfqLineItemsID = prfqLineItemsID;  \n" +
                "	ELSE  \n" +
                "		IF(uidVerified = 1 AND flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                "			-- verified UMID  \n" +
                "			SELECT * FROM temp_assy_part_list WHERE 1=0;  \n" +
                "		ELSE  \n" +
                "			SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#1. return history of verification  \n" +
                "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                "  \n" +
                "	#2. return error  \n" +
                "	SELECT * FROM temp_scan_error WHERE errorText<>'UMID016';  \n" +
                "  \n" +
                "	#3. return umid details  \n" +
                "	-- IF (uidVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                "	SELECT * FROM temp_umid_details;  \n" +
                "	-- SELECT * FROM temp_umid_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#4 return last inserted/updated records for umid transacrion  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_transIDs  \n" +
                "	SELECT NULL AS id;  \n" +
                "	SELECT id FROM temp_umid_transIDs;  \n" +
                "  \n" +
                "    #5 return UMID allocation checking status  \n" +
                "    SELECT pUMIDAllocateStatus  AS allocationStatus, 'UMID Status';  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5618,'2.00','V1','Sproc_validateScanMissingUMIDOnly- Story 38215: Work Order Operation REF DES- Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5618:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_ValidateWorkorderAndPublish;  \n" +
                "CREATE PROCEDURE `Sproc_ValidateWorkorderAndPublish`(  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pwoStatus INT,  \n" +
                "	IN pupdatedBy INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE allow_final_serialno_operation_count INT DEFAULT 0;  \n" +
                "    DECLARE vPartID INT;  \n" +
                "	/* case 1 - any operation with rework than previous operation must have 'inspection process'*/  \n" +
                "  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_operation_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_operation_error  \n" +
                "	(  \n" +
                "	     errorText VARCHAR(5000)  \n" +
                "	);  \n" +
                "  \n" +
                "	Select partID into vPartID  \n" +
                "    From workorder wo  \n" +
                "    Where wo.woID = pwoID  \n" +
                "    and wo.isDeleted = 0;  \n" +
                "  \n" +
                "	/**************************************** Rework Operation Validation ****************************************************/  \n" +
                "	block1: BEGIN  \n" +
                "		DECLARE current_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE current_previousopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE current_inspection_or_rework_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE current_operationTypeID INT DEFAULT 0;  \n" +
                "		DECLARE current_qtyControl INT DEFAULT 0;  \n" +
                "		DECLARE current_isTrackBySerialNo INT DEFAULT 0;  \n" +
                "		DECLARE current_isLoopOperation INT DEFAULT 0;  \n" +
                "		DECLARE current_refLoopWOOPNumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE current_isIssueQty INT DEFAULT 0;  \n" +
                "		DECLARE current_refLoopWOOPID INT DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE first_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE last_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE next_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE InspectionOperationTypeID INT DEFAULT 0;  \n" +
                "		DECLARE IsInspectionProcess INT DEFAULT 0;  \n" +
                "		DECLARE IsInValidReworkOperation INT DEFAULT 0;  \n" +
                "		DECLARE IsInValidIsTrackBySerialNo INT DEFAULT 0;  \n" +
                "		DECLARE IsInValidIsLoopOperation INT DEFAULT 0;  \n" +
                "		DECLARE found_in_paralleloperation INT DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE current_opname VARCHAR(500) DEFAULT '';  \n" +
                "		DECLARE current_woopid VARCHAR(500) DEFAULT '';  \n" +
                "  \n" +
                "		DECLARE opName_Max_ForMissingPartQtyOP VARCHAR(500) DEFAULT '';  \n" +
                "		DECLARE opNumber_Max_ForMissingPartQtyOP DECIMAL(7,3) DEFAULT 0;  \n" +
                "		DECLARE opNumber_Max_ForReworkOP DECIMAL(7,3) DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE anyPreProgPartInWOAssyBOM INT DEFAULT 0;  \n" +
                "		DECLARE anyPartPreProgRequireWOOP INT DEFAULT 0;  \n" +
                "  \n" +
                "		DECLARE assyCleanType VARCHAR(5) DEFAULT '';  \n" +
                "		DECLARE opCleanType VARCHAR(5)  DEFAULT 'NA';  \n" +
                "		DECLARE noCleanOp VARCHAR(10000) DEFAULT NULL;  \n" +
                "		DECLARE waterSolubleOp VARCHAR(10000) DEFAULT NULL;  \n" +
                "		DECLARE notApplicableOp VARCHAR(10000) DEFAULT NULL;  \n" +
                "		DECLARE bothOp VARCHAR(10000) DEFAULT NULL;  \n" +
                "  \n" +
                "		DECLARE err TINYINT  DEFAULT 0;  \n" +
                "		-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                "		DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "  \n" +
                "		-- 2 declare the cursor operation  \n" +
                "		DECLARE operation_cursor CURSOR FOR  \n" +
                "		SELECT opnumber	FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isrework=1 ORDER BY opnumber;  \n" +
                "  \n" +
                "		-- 3 set exit_loop flag to true if there are no more rows  \n" +
                "		DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "  \n" +
                "		-- get first operation work order  \n" +
                "		SELECT MIN(opnumber) INTO first_opnumber FROM workorder_operation wo  \n" +
                "			WHERE wo.woid=pwoid AND wo.deletedat IS NULL AND IFNULL(wo.isDeleted,0)=0;  \n" +
                "  \n" +
                "		-- get last operation work order  \n" +
                "		SELECT MAX(opnumber) INTO last_opnumber FROM workorder_operation wo  \n" +
                "			WHERE wo.woid=pwoid AND wo.deletedat IS NULL AND IFNULL(wo.isDeleted,0)=0;  \n" +
                "  \n" +
                "		-- get inspection process type id  \n" +
                "		SET InspectionOperationTypeID := 0;  \n" +
                "		SELECT genccategoryid INTO InspectionOperationTypeID FROM genericcategory  \n" +
                "			WHERE genccategoryname='inspection process' AND deletedat IS NULL AND categorytype = 'operation types' LIMIT 1;  \n" +
                "  \n" +
                "		-- get Assembly Clean Type  \n" +
                "		SELECT CASE WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 1 THEN 'BOTH'  \n" +
                "					WHEN comst.isNoClean = 1 AND comst.isWaterSoluble = 0 THEN 'NC'  \n" +
                "					WHEN comst.isNoClean = 0 AND comst.isWaterSoluble = 1 THEN 'WS'  \n" +
                "					WHEN comst.isFluxNotApplicable = 1 THEN 'NA'  \n" +
                "                    ELSE ''  \n" +
                "               END INTO assyCleanType  \n" +
                "        FROM component comst  \n" +
                "        WHERE EXISTS (SELECT 1 FROM workorder wo WHERE wo.woID = pwoID AND isDeleted = 0 AND wo.partID = comst.id );  \n" +
                "		-- open the cursor  \n" +
                "		OPEN operation_cursor;  \n" +
                "  \n" +
                "		 -- start looping  \n" +
                "		operation_loop: LOOP  \n" +
                "  \n" +
                "			-- read the name from next row into the variables  \n" +
                "			FETCH operation_cursor INTO current_opnumber;  \n" +
                "  \n" +
                "  \n" +
                "			-- check if the exit_loop flag has been set by mysql,  \n" +
                "			-- close the cursor and exit the loop if it has.  \n" +
                "			IF exit_loop THEN  \n" +
                "				 CLOSE operation_cursor;  \n" +
                "				 LEAVE operation_loop;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SET current_opname:= '';  \n" +
                "			SET current_woopid:= 0;  \n" +
                "			SET current_operationTypeID:= 0;  \n" +
                "			SET current_qtyControl:= 0;  \n" +
                "			SET current_isTrackBySerialNo:= 0;  \n" +
                "			SET current_isLoopOperation:= 0;  \n" +
                "			SET current_refLoopWOOPNumber:= 0;  \n" +
                "			SET current_isIssueQty:= 0;  \n" +
                "			SET current_refLoopWOOPID:= 0;  \n" +
                "  \n" +
                "			-- get opname and woopid from operation number  \n" +
                "			SELECT curWOOP.opname, curWOOP.woopid, curWOOP.operationTypeID, curWOOP.qtyControl,  \n" +
                "			curWOOP.isIssueQty, curWOOP.isTrackBySerialNo, curWOOP.isLoopOperation,  \n" +
                "			(SELECT woop.opNumber FROM workorder_operation woop WHERE woop.woopid=curWOOP.refLoopWOOPID) AS refLoopWOOPNumber ,  \n" +
                "			  curWOOP.refLoopWOOPID  \n" +
                "			INTO current_opname, current_woopid, current_operationTypeID, current_qtyControl,  \n" +
                "			current_isIssueQty, current_isTrackBySerialNo, current_isLoopOperation,  \n" +
                "			current_refLoopWOOPNumber ,  \n" +
                "			current_refLoopWOOPID  \n" +
                "			FROM workorder_operation curWOOP WHERE curWOOP.opnumber = current_opnumber  \n" +
                "			AND curWOOP.deletedat IS NULL AND curWOOP.woid=pwoid LIMIT 1;  \n" +
                "			-- get previous operation of rework operation  \n" +
                "			SELECT MAX(opnumber) INTO current_previousopnumber FROM workorder_operation wo  \n" +
                "				WHERE opnumber < current_opnumber  \n" +
                "				AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "			/**************************************** start - first operation should not be rework type ****************************************************/  \n" +
                "			IF first_opnumber=current_opnumber THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname,'</b> is rework operation, it cannot be set as first operation of work order.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - first operation should not be rework type ****************************************************/  \n" +
                "  \n" +
                "			/**************************************** start - first operation should not be rework type ****************************************************/  \n" +
                "			IF last_opnumber=current_opnumber THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname,'</b> is rework operation, it cannot be set as last operation of work order.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - first operation should not be rework type ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - rework operation should not be inspection process ****************************************************/  \n" +
                "			SET IsInspectionProcess:=0;  \n" +
                "  \n" +
                "			IF (current_operationTypeID = InspectionOperationTypeID) THEN  \n" +
                "				SET IsInspectionProcess := 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF (IsInspectionProcess  > 0) THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is rework operation, it cannot be inspection process.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - rework operation should not be inspection process ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - rework operation validation for mfg qty and issue Qty ****************************************************/  \n" +
                "			SET IsInValidReworkOperation:=0;  \n" +
                "  \n" +
                "			IF ((current_isIssueQty = 0) OR (current_qtyControl = 0)) THEN  \n" +
                "				SET IsInValidReworkOperation := 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF IsInValidReworkOperation  > 0 THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b>  is rework operation, it must have manufacturer and issue qty set as true.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - rework operation validation for mfg qty and issue Qty ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - is track by serial # operation validation for mfg qty ****************************************************/  \n" +
                "			SET IsInValidIsTrackBySerialNo:=0;  \n" +
                "  \n" +
                "			IF ((current_IsTrackBySerialNo = 1) AND (current_qtyControl = 0)) THEN  \n" +
                "				SET IsInValidIsTrackBySerialNo := 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF IsInValidIsTrackBySerialNo  > 0 THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b>  is track by serial# operation, it must have manufacturer qty set as true.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - is track by serial # operation validation for mfg qty ****************************************************/  \n" +
                "  \n" +
                "			/**************************************** start - loop operation validation for mfg qty, sequence operation ****************************************************/  \n" +
                "			SET IsInValidIsLoopOperation:=0;  \n" +
                "			IF (current_isLoopOperation = 1) THEN  \n" +
                "				SET next_opnumber:= 0;  \n" +
                "				-- get next operation of inspection operation  \n" +
                "				SELECT MIN(opnumber) INTO next_opnumber FROM workorder_operation wo  \n" +
                "					WHERE opnumber > current_opnumber  \n" +
                "					AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "  \n" +
                "				IF(current_qtyControl = 0) THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, it must have manufacturer qty set as true.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				-- if next operation is rework than not allow  \n" +
                "				ELSEIF(next_opnumber > 0 AND  \n" +
                "					(SELECT COUNT(1) FROM workorder_operation  \n" +
                "						WHERE deletedat IS NULL  \n" +
                "							AND woID=pwoID  \n" +
                "							AND opNumber = next_opnumber  \n" +
                "							AND isRework=1) > 0) THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, next operation cannot be rework operation.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				-- if found previous operation than check operation is inspection process or not  \n" +
                "				ELSEIF(current_refLoopWOOPNumber > 0 AND  \n" +
                "					(SELECT COUNT(1) FROM workorder_operation  \n" +
                "						WHERE deletedat IS NULL  \n" +
                "							AND woID=pwoID  \n" +
                "							AND opNumber <> current_refLoopWOOPNumber  \n" +
                "							AND opNumber <> current_opnumber  \n" +
                "							AND opNumber BETWEEN current_refLoopWOOPNumber AND current_opnumber) > 0) THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, There should be no operation between loop operation', '(', FORMAT(current_opnumber,3), ') ',' and loop to operation', '(', FORMAT(current_refLoopWOOPNumber,3), ').');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				-- check refLoopWOOPID added or not  \n" +
                "				ELSEIF(current_refLoopWOOPID IS NULL OR current_refLoopWOOPID = 0  \n" +
                "					OR (SELECT COUNT(1) FROM  workorder_operation WHERE deletedat IS NULL  \n" +
                "						AND woOPID = current_refLoopWOOPID) = 0  \n" +
                "					) THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> is loop operation, please add loop to operation for same.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - loop operation validation for mfg qty, sequence operation  ****************************************************/  \n" +
                "  \n" +
                "			/**************************************** start - check rework operation should not be in parallel cluster ****************************************************/  \n" +
                "			SET found_in_paralleloperation:= 0;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO found_in_paralleloperation FROM workorder_operation_cluster  \n" +
                "			WHERE deletedat IS NULL AND clusterid IN (  \n" +
                "				SELECT clusterid FROM workorder_cluster WHERE woid=pwoid AND deletedat IS NULL AND isparelleloperation=1  \n" +
                "			) AND woopid=current_woopid;  \n" +
                "  \n" +
                "			IF found_in_paralleloperation > 0 THEN  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> operation cannot be updated, because rework operation is not allowed in parallel cluster.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************************************** end - check rework operation should not be in parallel cluster ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "			/**************************************** start - check previous operation of rework operation must be inspection or rework only ****************************************************/  \n" +
                "  \n" +
                "			-- if found previous operation than check operation is inspection process or not  \n" +
                "			IF current_previousopnumber > 0 THEN  \n" +
                "				SET current_inspection_or_rework_opnumber:= 0;  \n" +
                "  \n" +
                "				-- set checked operation number if found as inspection process  \n" +
                "				SELECT opnumber INTO current_inspection_or_rework_opnumber FROM workorder_operation  \n" +
                "				WHERE ((operationtypeid = InspectionOperationTypeID) OR isrework=1)  \n" +
                "				AND woid=pwoid AND deletedat IS NULL AND opnumber=current_previousopnumber;  \n" +
                "  \n" +
                "				-- set flag false if any operation not found as inspection process  \n" +
                "				IF current_inspection_or_rework_opnumber = 0  THEN  \n" +
                "					IF(current_isLoopOperation = 1) THEN  \n" +
                "						SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "					ELSE  \n" +
                "						SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation or rework operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				SET @stmt_op = CONCAT('Previous operation of ','<b>', '(', FORMAT(current_opnumber,3), ') ', current_opname, '</b> must be inspection operation or rework operation.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/**************** end - check previous operation of rework operation must be inspection or rework only *****************/  \n" +
                "		END LOOP operation_loop;  \n" +
                "  \n" +
                "		/**************************************** start - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/  \n" +
                "		block2: BEGIN  \n" +
                "			-- 1 get list of inspection operation in workorder  \n" +
                "			DECLARE c_opnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE c_checkopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE c_reworkopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE temp_opname VARCHAR(500) DEFAULT 0;  \n" +
                "			DECLARE temp_woopid INT DEFAULT 0;  \n" +
                "			DECLARE temp_isRework INT DEFAULT 0;  \n" +
                "			DECLARE temp_qtyControl INT DEFAULT 0;  \n" +
                "  \n" +
                "			DECLARE IsInValidInspectionOperation INT DEFAULT 0;  \n" +
                "			DECLARE IsParallelClusterOperation INT DEFAULT 0;  \n" +
                "			DECLARE IsReworkInspectionOperation INT DEFAULT 0;  \n" +
                "  \n" +
                "			-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                "			DECLARE exit_inspection_loop BOOLEAN DEFAULT FALSE;  \n" +
                "  \n" +
                "  \n" +
                "			-- 2 declare the cursor for inspection operation  \n" +
                "			DECLARE inspection_cursor CURSOR FOR  \n" +
                "			SELECT opnumber FROM workorder_operation  \n" +
                "			WHERE operationtypeid = InspectionOperationTypeID  \n" +
                "			AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "			-- 3 set exit_loop_cluster flag to true if there are no more rows  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_inspection_loop = TRUE;  \n" +
                "  \n" +
                "			-- open the cursor  \n" +
                "			OPEN inspection_cursor;  \n" +
                "  \n" +
                "			 -- start looping  \n" +
                "			inspection_loop: LOOP  \n" +
                "  \n" +
                "				-- read the name from next row into the variables  \n" +
                "				FETCH inspection_cursor INTO c_opnumber;  \n" +
                "  \n" +
                "				-- check if the exit_cluster_loop flag has been set by mysql,  \n" +
                "				-- close the cursor and exit the loop if it has.  \n" +
                "				IF exit_inspection_loop THEN  \n" +
                "					 CLOSE inspection_cursor;  \n" +
                "					 LEAVE inspection_loop;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET temp_opname:= '';  \n" +
                "				SET temp_woopid:= 0;  \n" +
                "				SET temp_isRework:= 0;  \n" +
                "				SET temp_qtyControl:= 0;  \n" +
                "  \n" +
                "				SELECT opname, woopid, isRework, qtyControl  \n" +
                "				INTO temp_opname, temp_woopid, temp_isRework, temp_qtyControl  \n" +
                "				FROM workorder_operation WHERE opnumber = c_opnumber  \n" +
                "				AND deletedat IS NULL AND woid=pwoid LIMIT 1;  \n" +
                "  \n" +
                "				/**************************************** start - inspection operation should not be rework ****************************************************/  \n" +
                "				SET IsReworkInspectionOperation:= 0;  \n" +
                "				IF (temp_isRework = 1) THEN  \n" +
                "					SET IsReworkInspectionOperation := 1;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF IsReworkInspectionOperation  > 0 THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> is inspection process, it cannot be rework operation.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "				/**************************************** end - inspection operation should not be rework ****************************************************/  \n" +
                "  \n" +
                "				/**************************************** start - inspection operation validation for mfg qty ****************************************************/  \n" +
                "				SET IsInValidInspectionOperation:= 0;  \n" +
                "  \n" +
                "				IF (temp_qtyControl = 0) THEN  \n" +
                "					SET IsInValidInspectionOperation := 1;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF IsInValidInspectionOperation  > 0 THEN  \n" +
                "					SET @stmt_op = CONCAT('<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> is inspection process, it must have manufacturer qty set as true.');  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "				/**************************************** end - inspection operation validation for mfg qty ****************************************************/  \n" +
                "  \n" +
                "				/**************************************** start - check operation not in parallel cluster ****************************************************/  \n" +
                "				SET IsParallelClusterOperation:= 0;  \n" +
                "				SELECT COUNT(opnumber) INTO IsParallelClusterOperation FROM workorder_operation  \n" +
                "				 	WHERE deletedat IS NULL AND opNumber=c_opnumber AND woid=pwoid AND woopid IN (  \n" +
                "				 		SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL  \n" +
                "				 			AND clusterid IN (  \n" +
                "								SELECT clusterid FROM workorder_cluster WHERE deletedat IS NULL  \n" +
                "								AND woid=pwoid AND isparelleloperation=1  \n" +
                "				 	)  \n" +
                "				);  \n" +
                "				/**************************************** end - check operation not in parallel cluster ****************************************************/  \n" +
                "  \n" +
                "				/************ start - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/  \n" +
                "				-- Operation should not in parallel cluster for rework validation because we allow inspection process in sequence for parallel cluster  \n" +
                "				IF (IsParallelClusterOperation = 0) THEN  \n" +
                "					SET c_checkopnumber:= 0;  \n" +
                "					-- get next operation of inspection operation  \n" +
                "					SELECT MIN(opnumber) INTO c_checkopnumber FROM workorder_operation wo  \n" +
                "						WHERE opnumber > c_opnumber  \n" +
                "						AND wo.woid=pwoid AND wo.deletedat IS NULL;  \n" +
                "  \n" +
                "					-- if found next operation than check operation is rework process or not  \n" +
                "					IF c_checkopnumber > 0 THEN  \n" +
                "						SET c_reworkopnumber:= 0;  \n" +
                "						-- set checked operation number if found as rework process  \n" +
                "						SELECT opnumber INTO c_reworkopnumber FROM workorder_operation  \n" +
                "						WHERE opnumber=c_checkopnumber AND isrework=1  \n" +
                "						AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "						-- set flag false if any operation not found as rework process  \n" +
                "						IF c_reworkopnumber = 0 THEN  \n" +
                "							SET @stmt_op = CONCAT('Next operation of ','<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> must be rework operation.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "						END IF;  \n" +
                "					ELSE  \n" +
                "						SET @stmt_op = CONCAT('Next operation of ','<b>', '(', FORMAT(c_opnumber,3), ') ', temp_opname, '</b> must be rework operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				/************ end - check next operation must be rework, if current operation not in parallel cluster and inspection process ************/  \n" +
                "			END LOOP inspection_loop;  \n" +
                "		END block2;  \n" +
                "		/**************************************** end - case 2 - Any Operation inspection process and not in parallel cluster  ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** start - case 3 - Check Cluster validations ****************************************************/  \n" +
                "		block3: BEGIN  \n" +
                "			-- 1 get list of cluster in workorder  \n" +
                "			DECLARE current_clusterid INT DEFAULT 0;  \n" +
                "			DECLARE current_minopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE current_maxopnumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "  \n" +
                "			DECLARE temp_clustername VARCHAR(100) DEFAULT '';  \n" +
                "			DECLARE temp_isParellelOperation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalidsequenceoperation DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE found_mismatchoperations INT DEFAULT 0;  \n" +
                "			DECLARE found_operationTypeID INT DEFAULT 0;  \n" +
                "			DECLARE cluster_maxOpNumber DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE IsReworkParallelCluster INT DEFAULT 0;  \n" +
                "			DECLARE IsPregrorammingParallelCluster INT DEFAULT 0;  \n" +
                "			DECLARE next_operation_to_cluster_is_rework INT DEFAULT 0;  \n" +
                "			DECLARE next_operation_to_cluster_is_loopoperation INT DEFAULT 0;  \n" +
                "  \n" +
                "			-- 1 this flag will be set to true when cursor reaches end of table  \n" +
                "			DECLARE exit_cluster_loop BOOLEAN DEFAULT FALSE;  \n" +
                "  \n" +
                "  \n" +
                "			-- 2 declare the cursor for cluster  \n" +
                "			DECLARE cluster_cursor CURSOR FOR  \n" +
                "			SELECT DISTINCT clusterid FROM workorder_cluster  \n" +
                "			WHERE deletedat IS NULL AND clusterid IS NOT NULL AND woid=pwoid;  \n" +
                "  \n" +
                "  \n" +
                "			-- 3 set exit_loop_cluster flag to true if there are no more rows  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_cluster_loop = TRUE;  \n" +
                "  \n" +
                "			-- open the cursor  \n" +
                "			OPEN cluster_cursor;  \n" +
                "  \n" +
                "			 -- start looping  \n" +
                "			cluster_loop: LOOP  \n" +
                "  \n" +
                "				-- read the name from next row into the variables  \n" +
                "				FETCH cluster_cursor INTO current_clusterid;  \n" +
                "  \n" +
                "				-- check if the exit_cluster_loop flag has been set by mysql,  \n" +
                "				-- close the cursor and exit the loop if it has.  \n" +
                "				IF exit_cluster_loop THEN  \n" +
                "					 CLOSE cluster_cursor;  \n" +
                "					 LEAVE cluster_loop;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF current_clusterid > 0 THEN  \n" +
                "					SET temp_clustername:= '';  \n" +
                "					SET temp_isParellelOperation:= 0;  \n" +
                "					SELECT clustername, isparelleloperation INTO temp_clustername, temp_isParellelOperation FROM workorder_cluster WHERE clusterid = current_clusterid LIMIT 1;  \n" +
                "  \n" +
                "					IF(temp_isParellelOperation = 1) THEN  \n" +
                "						/************************** start - if cluster is parallel than it should not have any rework operation ******************************/  \n" +
                "						SET IsReworkParallelCluster:=0;  \n" +
                "  \n" +
                "						SELECT COUNT(opNumber) INTO IsReworkParallelCluster FROM workorder_operation  \n" +
                "							WHERE deletedat IS NULL AND woid=pwoid AND isRework=1 AND woopid  IN (  \n" +
                "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "						);  \n" +
                "  \n" +
                "						IF IsReworkParallelCluster > 0 THEN  \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername,'</b> is parallel cluster, Rework operation is not allowed in parallel cluster.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "						END IF;  \n" +
                "						/************************** end - if cluster is parallel than it should not have any rework operation ******************************/  \n" +
                "  \n" +
                "						/************************** start - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/  \n" +
                "						SET IsPregrorammingParallelCluster:=0;  \n" +
                "  \n" +
                "						SELECT COUNT(opNumber) INTO IsPregrorammingParallelCluster FROM workorder_operation  \n" +
                "							WHERE deletedat IS NULL AND woid=pwoid AND isPreProgrammingComponent=1 AND woopid  IN (  \n" +
                "								SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "						);  \n" +
                "  \n" +
                "						IF IsPregrorammingParallelCluster > 0 THEN  \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Pre Programming operation is not allowed in parallel cluster.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "						END IF;  \n" +
                "						/************************** end - if cluster is parallel than it should not have any PreProgrammingComponent operation ******************************/  \n" +
                "  \n" +
                "						/**************** start - all operation must be same in parallel cluster *****************/  \n" +
                "						SET found_mismatchoperations:= 0;  \n" +
                "  \n" +
                "						SELECT COUNT(DISTINCT operationtypeid) INTO found_mismatchoperations FROM workorder_operation WHERE woopid IN (  \n" +
                "							SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "						) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "						IF found_mismatchoperations > 1 THEN  \n" +
                "							SET @stmt_str = CONCAT('<b>',temp_clustername, '</b> is parallel cluster, Operation type must be same in parallel cluster.');  \n" +
                "							INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "						ELSE  \n" +
                "							/**************** start - check cluster operation type is inspection than next operation after cluster must be rework only *****************/  \n" +
                "							IF (found_mismatchoperations = 1) THEN  \n" +
                "								SET found_operationTypeID:= 0;  \n" +
                "								SET cluster_maxOpNumber:= 0;  \n" +
                "  \n" +
                "								SELECT DISTINCT operationtypeid, MAX(opNumber) INTO found_operationTypeID, cluster_maxOpNumber FROM workorder_operation WHERE woopid IN (  \n" +
                "									SELECT woopid FROM workorder_operation_cluster WHERE deletedat IS NULL AND clusterID = current_clusterid  \n" +
                "								) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "								IF (found_operationTypeID = InspectionOperationTypeID) THEN  \n" +
                "									SET next_operation_to_cluster_is_rework:= 0;  \n" +
                "									SET next_operation_to_cluster_is_loopoperation:= 0;  \n" +
                "  \n" +
                "									SELECT isRework,isLoopOperation INTO next_operation_to_cluster_is_rework,next_operation_to_cluster_is_loopoperation FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND  \n" +
                "									opNumber = (SELECT MIN(opNumber) FROM workorder_operation WHERE woID=pwoid AND deletedAt IS NULL AND  \n" +
                "									opNumber > cluster_maxOpNumber);  \n" +
                "  \n" +
                "  \n" +
                "									IF(next_operation_to_cluster_is_loopoperation = 1) THEN  \n" +
                "										SET @stmt_str = CONCAT('Next operation of ','<b>',temp_clustername, '</b> cannot be loop operation, beacuse it is inspection parallel cluster.');  \n" +
                "										INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									IF(next_operation_to_cluster_is_rework = 0) THEN  \n" +
                "										SET @stmt_str = CONCAT('Next operation of ','<b>',temp_clustername, '</b> must be rework operation, beacuse it is inspection parallel cluster.');  \n" +
                "										INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "							/**************** end - check cluster operation type is inspection than next operation after cluster must be rework only *****************/  \n" +
                "						END IF;  \n" +
                "						/**************** end - all operation must be same in parallel cluster *****************/  \n" +
                "					END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "					/**************** start - check sequence of operation number between cluster *****************/  \n" +
                "					SET current_minopnumber:= 0;  \n" +
                "					SET current_maxopnumber:= 0;  \n" +
                "  \n" +
                "					-- find min and max operation number in workorder operation  \n" +
                "					SELECT MIN(opnumber), MAX(opnumber) INTO current_minopnumber, current_maxopnumber FROM workorder_operation WHERE woopid IN  \n" +
                "					(SELECT woopid FROM workorder_operation_cluster WHERE clusterid=current_clusterid AND clusterid IS NOT NULL AND deletedat IS NULL)  \n" +
                "					AND woid = pwoid AND deletedat IS NULL;  \n" +
                "					SET found_invalidsequenceoperation:= 0;  \n" +
                "  \n" +
                "					-- check in between any operation is outside cluster than invalid  \n" +
                "					SELECT COUNT(opnumber) INTO found_invalidsequenceoperation FROM workorder_operation WHERE  \n" +
                "					opnumber > (current_minopnumber) AND opnumber < (current_maxopnumber)  \n" +
                "					AND woid=pwoid AND deletedat IS NULL AND woopid NOT IN  \n" +
                "					(SELECT woopid FROM workorder_operation_cluster WHERE (clusterid = current_clusterid OR clusterid IS NULL) AND deletedat IS NULL)  \n" +
                "					ORDER BY opnumber;  \n" +
                "					IF found_invalidsequenceoperation > 0 THEN  \n" +
                "						SET @stmt_str = CONCAT('Invalid operation sequence in ', '<b>',temp_clustername,'</b>');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/**************** end - check sequence of operation number between cluster *****************/  \n" +
                "				END IF;  \n" +
                "			END LOOP cluster_loop;  \n" +
                "		END block3;  \n" +
                "		/**************************************** end - case 3 - Check Cluster validations ****************************************************/  \n" +
                "  \n" +
                "  \n" +
                "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/  \n" +
                "		block4: BEGIN  \n" +
                "  \n" +
                "			DECLARE found_invalid_rework_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_inspection_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_move_to_stock_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_is_track_by_serialno_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_allow_final_serialno_operation INT DEFAULT 0;  \n" +
                "			DECLARE found_invalid_is_loop_operation INT DEFAULT 0;  \n" +
                "			DECLARE check_workorder_isrevised INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_operation_count INT DEFAULT 0;  \n" +
                "-- 			DECLARE allow_final_serialno_operation_count INT DEFAULT 0;  \n" +
                "			DECLARE preprogramming_operation_count INT DEFAULT 0;  \n" +
                "			DECLARE certificate_standard_count INT DEFAULT 0;  \n" +
                "			DECLARE invalid_wo_count INT DEFAULT 0;  \n" +
                "			DECLARE first_OpTypeID INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_op_type_id INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_is_rework INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_is_preprogramming INT DEFAULT 0;  \n" +
                "			DECLARE move_to_stock_op_name VARCHAR(500);  \n" +
                "			DECLARE move_to_stock_op_number DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE found_assembly_part_not_added INT DEFAULT 0;  \n" +
                "			DECLARE found_assembly_equipment_not_added INT DEFAULT 0;  \n" +
                "  \n" +
                "			DECLARE allow_final_serialno_operation_op_name VARCHAR(500);  \n" +
                "			DECLARE allow_final_serialno_operation_op_number DECIMAL(7,3) DEFAULT 0;  \n" +
                "			DECLARE allow_final_serialno_operation_is_rework INT DEFAULT 0;  \n" +
                "			DECLARE allow_final_serialno_operation_preprogramming INT DEFAULT 0;  \n" +
                "			DECLARE allow_final_serialno_operation_qtyControl INT DEFAULT 0;  \n" +
                "  \n" +
                "			/************ any operation with rework and mfg qty and issue qty is false than not allow to publish ************/  \n" +
                "			SET found_invalid_rework_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_rework_operation FROM workorder_operation WHERE isrework = 1 AND (qtycontrol=0 OR isIssueQty = 0) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_rework_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Rework Operation must have manufacturer and issue qty set as true.');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with rework and mfg qty and issue qty  is false than not allow to publish ************/  \n" +
                "  \n" +
                "  \n" +
                "			/************ any operation with loop operation is true not rework than not allow to publish ************/  \n" +
                "			SET found_invalid_is_loop_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_is_loop_operation FROM workorder_operation WHERE isrework = 0 AND isLoopOperation=1 AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_is_loop_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Loop Operation must have rework operation set as true.');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with loop operation is true not rework than not allow to publish ************/  \n" +
                "  \n" +
                "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/  \n" +
                "			SET found_invalid_inspection_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_inspection_operation FROM workorder_operation WHERE  \n" +
                "			operationTypeID = InspectionOperationTypeID AND (qtycontrol=0) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_inspection_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Inspection Process must have manufacturer qty set as true');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with inspection process and mfg qty is false than not allow to publish ************/  \n" +
                "  \n" +
                "			/************ any operation with track by serial# and qty Control is false then not allow to publish ************/  \n" +
                "			SET found_invalid_is_track_by_serialno_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_is_track_by_serialno_operation FROM workorder_operation WHERE  \n" +
                "			isTrackBySerialNo = 1 AND (qtycontrol=0) AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_is_track_by_serialno_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Track By Serial Operation must have manufacturer qty set as true');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with track by serial# and qty Control is false then not allow to publish ************/  \n" +
                "  \n" +
                "  \n" +
                "			/************ if work order is revised workorder than first operation must be inspection process ************/  \n" +
                "			SET check_workorder_isrevised:= 0;  \n" +
                "			SELECT COUNT(1) INTO check_workorder_isrevised FROM workorder WHERE woid=pwoid AND deletedat IS NULL AND isRevisedWO=1;  \n" +
                "			IF check_workorder_isrevised > 0 THEN  \n" +
                "				SET first_OpTypeID:=0;  \n" +
                "  \n" +
                "				SELECT operationtypeid INTO first_OpTypeID FROM workorder_operation WHERE opNumber = first_opnumber AND woid=pwoid AND deletedAt IS NULL;  \n" +
                "				IF(first_OpTypeID <> InspectionOperationTypeID) THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES ('First Operation must be inspection for revised workorder !!');  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			/************ if work order is revised workorder than first operation must be inspection process ************/  \n" +
                "  \n" +
                "			/************ if work order has more than one preprogramming operation than invalid workorder ************/  \n" +
                "			SET preprogramming_operation_count:= 0;  \n" +
                "			SELECT COUNT(1) INTO preprogramming_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isPreProgrammingComponent=1;  \n" +
                "			IF preprogramming_operation_count > 1 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order should have only one pre-programming operation !!');  \n" +
                "			END IF;  \n" +
                "			/************ if work order has more than one preprogramming operation than invalid workorder ************/  \n" +
                "  \n" +
                "			/************ if work order has not selected any standard than don't allow to verify ************/  \n" +
                "			-- set flag 1 for standard count ok  \n" +
                "			-- SET certificate_standard_count:= 0;  \n" +
                "			-- SELECT COUNT(1) INTO certificate_standard_count FROM certificate_standards  \n" +
                "			-- 	WHERE deletedAt IS NULL AND isRequired = 1 AND  \n" +
                "			-- 	certificateStandardID NOT IN (SELECT certificateStandardID FROM workorder_certification WHERE woID=pwoid AND deletedAt IS NULL);  \n" +
                "			-- IF certificate_standard_count > 0 THEN  \n" +
                "			-- 	INSERT INTO temp_operation_error (errorText) VALUES ('Please select all required certificate standard for Work Order !!');  \n" +
                "			-- END IF;  \n" +
                "			/************ if work order has not selected any standard than don't allow to verify ************/  \n" +
                "  \n" +
                "			/************ if any work order operation is other than published than don't allow to verify ************/  \n" +
                "			-- set flag 1 for standard count ok  \n" +
                "			SET invalid_wo_count:= 0;  \n" +
                "			SELECT COUNT(1) INTO invalid_wo_count FROM workorder_operation  \n" +
                "				WHERE deletedAt IS NULL AND woID=pwoID AND opStatus != 1;  \n" +
                "			IF invalid_wo_count > 0 THEN  \n" +
                "			 	INSERT INTO temp_operation_error (errorText) VALUES ('To Publish Work Order, All Operation Status must be published.');  \n" +
                "			END IF;  \n" +
                "			/************ if any work order operation is other than published than don't allow to verify ************/  \n" +
                "  \n" +
                "			/************ if work order has more than one move to stock operation than invalid workorder ************/  \n" +
                "			SET move_to_stock_operation_count:= 0;  \n" +
                "			SELECT COUNT(1) INTO move_to_stock_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isMoveToStock=1;  \n" +
                "			IF move_to_stock_operation_count > 1 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order should have only one move to stock operation.');  \n" +
                "			ELSE  \n" +
                "				IF move_to_stock_operation_count = 0 THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must have at least one <b>move to stock</b> operation, It should be last operation of work order.');  \n" +
                "				ELSE  \n" +
                "					/************ check if move to stock operation is not as last operation than not allow to publish ************/  \n" +
                "					SELECT opNumber, opName, operationTypeID, isRework, isPreProgrammingComponent INTO move_to_stock_op_number, move_to_stock_op_name, move_to_stock_op_type_id, move_to_stock_is_rework, move_to_stock_is_preprogramming FROM workorder_operation WHERE isMoveToStock = 1 AND woid=pwoid AND deletedat IS NULL;  \n" +
                "					IF(last_opnumber <> move_to_stock_op_number) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It must be last operation of work order.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if move to stock operation is not as last operation than not allow to publish ************/  \n" +
                "  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "					IF(move_to_stock_op_type_id = InspectionOperationTypeID) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be inspection process.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "					IF(move_to_stock_is_rework = 1) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be rework operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "  \n" +
                "					IF(move_to_stock_is_preprogramming = 1) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(move_to_stock_op_number,3), ') ', move_to_stock_op_name, '</b> is move to stock operation, It cannot be pre-programming operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if move to stock operation is inspection operation than not allow to publish ************/  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			/************ if work order has more than one move to stock operation than invalid workorder ************/  \n" +
                "  \n" +
                "			/************ if work order has more than one allow mapping serial# operation than invalid workorder ************/  \n" +
                "			SET allow_final_serialno_operation_count:= 0;  \n" +
                "			SELECT COUNT(1) INTO allow_final_serialno_operation_count FROM workorder_operation WHERE woid=pwoid AND deletedat IS NULL AND isAllowFinalSerialMapping=1;  \n" +
                "			IF allow_final_serialno_operation_count > 1 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('More than one operations configured with \"Serial# Mapping\". <br/>Only one operation with \"Serial# Mapping\" is allowed.');  \n" +
                "			ELSE  \n" +
                "				IF allow_final_serialno_operation_count <> 0 THEN  \n" +
                "					SELECT opNumber, opName, isRework, isPreProgrammingComponent, qtyControl  \n" +
                "					INTO allow_final_serialno_operation_op_number, allow_final_serialno_operation_op_name, allow_final_serialno_operation_is_rework, allow_final_serialno_operation_preprogramming,allow_final_serialno_operation_qtyControl FROM workorder_operation WHERE isAllowFinalSerialMapping = 1 AND woid=pwoid AND deletedat IS NULL;  \n" +
                "  \n" +
                "					/************ check if allow mapping serial# operation is rework operation than not allow to publish ************/  \n" +
                "					IF(allow_final_serialno_operation_is_rework = 1) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It cannot be rework operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if allow mapping serial# operation is rework operation than not allow to publish ************/  \n" +
                "  \n" +
                "					/************ check if allow mapping serial# operation is mfg qty false than not allow to publish ************/  \n" +
                "					IF(allow_final_serialno_operation_qtyControl = 0) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It must have manufacturer qty set as true.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if allow mapping serial# operation is mfg qty false than not allow to publish ************/  \n" +
                "  \n" +
                "					/************ check if allow mapping serial# operation is pre programming operation than not allow to publish ************/  \n" +
                "					IF(allow_final_serialno_operation_preprogramming = 1) THEN  \n" +
                "						SET @stmt_str = CONCAT('<b>', '(', FORMAT(allow_final_serialno_operation_op_number,3), ') ', allow_final_serialno_operation_op_name, '</b> is allow mapping serial# operation, It cannot be pre-programming operation.');  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES (@stmt_str);  \n" +
                "					END IF;  \n" +
                "					/************ check if allow mapping serial# operation is pre programming operation than not allow to publish ************/  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			/************ if work order has more than one allow mapping serial# operation than invalid workorder ************/  \n" +
                "  \n" +
                "			/************ any operation with move to stock and mfg qty is false than not allow to publish ************/  \n" +
                "			SET found_invalid_move_to_stock_operation:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_invalid_move_to_stock_operation FROM workorder_operation WHERE isMoveToStock = 1 AND qtycontrol=0 AND woid=pwoid AND deletedat IS NULL;  \n" +
                "			IF found_invalid_move_to_stock_operation > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Move To Stock Operation must have manufacturer qty set as true.');  \n" +
                "			END IF;  \n" +
                "			/************ any operation with move to stock and mfg qty is false than not allow to publish ************/  \n" +
                "  \n" +
                "			/************ check all component added in assembly and belongs to mounting group than must added in workorder parts ************/  \n" +
                "			-- SET found_assembly_part_not_added:= 0;  \n" +
                "			-- SELECT COUNT(1) INTO found_assembly_part_not_added FROM rfq_lineitems_alternatepart  \n" +
                "			--   WHERE rfqLineItemsID  \n" +
                "			-- 	IN (SELECT id FROM rfq_lineitems  \n" +
                "			-- 		WHERE partID  \n" +
                "			-- 		IN (SELECT partID FROM workorder WHERE woID=pwoID AND deletedAt IS NULL)  \n" +
                "			-- 		AND deletedAt IS NULL)  \n" +
                "			-- 			AND mountingTypeID  \n" +
                "			-- 			IN (  \n" +
                "			-- 				SELECT rfqMountingTypeID  \n" +
                "			-- 				FROM component_logicalgroup_detail cld  \n" +
                "			-- 				WHERE cld.deletedAt IS NULL AND cld.logicalgroupID  \n" +
                "			-- 				IN (  \n" +
                "			-- 					SELECT id  \n" +
                "			-- 					FROM component_logicalgroup  \n" +
                "			-- 					WHERE `name`  \n" +
                "			-- 					IN ('Supplies','Materials','Tools')  \n" +
                "			-- 					AND deletedAt IS NULL  \n" +
                "			-- 				)  \n" +
                "			-- 			)  \n" +
                "			-- 			AND deletedAt IS NULL  \n" +
                "			-- 			AND mfgPNID  \n" +
                "			-- NOT IN (SELECT partID FROM workorder_operation_part WHERE woID=pwoID AND deletedAt IS NULL);  \n" +
                "  \n" +
                "			SET found_assembly_part_not_added:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_assembly_part_not_added FROM component_drivetools  \n" +
                "			WHERE refComponentID IN (SELECT id FROM component WHERE id  \n" +
                "							IN (SELECT mfgPNID FROM rfq_lineitems_alternatepart  \n" +
                "								WHERE rfqLineItemsID IN (SELECT id FROM rfq_lineitems WHERE partID  \n" +
                "												IN (SELECT partID FROM workorder WHERE woID=pwoID AND deletedAt IS NULL)  \n" +
                "												AND mountingTypeID  IN (SELECT rfqMountingTypeID  \n" +
                "														FROM component_logicalgroup_detail cld  \n" +
                "														WHERE cld.deletedAt IS NULL AND cld.logicalgroupID  \n" +
                "														IN (SELECT id  \n" +
                "														FROM component_logicalgroup  \n" +
                "														WHERE `name` IN ('Supplies','Materials','Tools')  \n" +
                "														AND deletedAt IS NULL)  \n" +
                "													)) AND deletedAt IS NULL  \n" +
                "							) AND deletedAt IS NULL AND driverToolRequired=1  \n" +
                "						) AND deletedAt IS NULL AND componentID  \n" +
                "			NOT IN (SELECT partID FROM workorder_operation_part WHERE woID=pwoID AND deletedAt IS NULL);  \n" +
                "  \n" +
                "			IF found_assembly_part_not_added > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must requires all <b>Parts</b> from assembly which belongs to <b>Supplies, Materials & Tools</b>.');  \n" +
                "			END IF;  \n" +
                "			/************ check all component added in assembly and belongs to mounting group than must added in workorder parts ************/  \n" +
                "  \n" +
                "			/************ check all component with functional testing and equipments assigned must be added work order equipment ************/  \n" +
                "			SET found_assembly_equipment_not_added:= 0;  \n" +
                "			SELECT COUNT(1) INTO found_assembly_equipment_not_added  \n" +
                "			FROM component_functionaltestingequipment  \n" +
                "			WHERE refComponentID  \n" +
                "			IN (SELECT id FROM component WHERE id  \n" +
                "				IN (  \n" +
                "				SELECT mfgPNID FROM rfq_lineitems_alternatepart  \n" +
                "					WHERE rfqLineItemsID  \n" +
                "					IN (  \n" +
                "						SELECT id FROM rfq_lineitems WHERE partID  \n" +
                "						IN(  \n" +
                "							SELECT partID FROM workorder WHERE woID=pwoID  \n" +
                "						)  \n" +
                "					) AND deletedAt IS NULL  \n" +
                "				) AND deletedAt IS NULL AND functionalTestingRequired=1  \n" +
                "			) AND deletedAt IS NULL  AND eqpID  \n" +
                "			NOT IN (SELECT eqpID FROM workorder_operation_equipment WHERE woID=pwoID AND deletedAt IS NULL);  \n" +
                "  \n" +
                "			IF found_assembly_equipment_not_added > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work Order must requires all <b>Equipments</b> from assembly which needs <b>Functional Testing Equipments</b>.');  \n" +
                "			END IF;  \n" +
                "			/************ check all component with functional testing and equipments assigned must be added work order equipment ************/  \n" +
                "  \n" +
                "			/*********************** if any Operation have \"Allow operation to continue with the  \n" +
                "				possibility of missing placement\" than after that operation any one operation must be rework *********/  \n" +
                "			SELECT opNumber, opName INTO opNumber_Max_ForMissingPartQtyOP , opName_Max_ForMissingPartQtyOP  \n" +
                "			FROM workorder_operation woop  \n" +
                "			WHERE woop.woID = pwoid  \n" +
                "			AND woop.`isAllowMissingPartQty` =  1  \n" +
                "			AND woop.deletedAt IS NULL  \n" +
                "			ORDER BY opNumber DESC LIMIT 1;  \n" +
                "  \n" +
                "			SELECT MAX(opNumber) INTO opNumber_Max_ForReworkOP  \n" +
                "			FROM workorder_operation woop  \n" +
                "			WHERE woop.woID = pwoid  \n" +
                "			AND woop.`isRework` =  1  \n" +
                "			AND woop.deletedAt IS NULL ;  \n" +
                "  \n" +
                "			IF(opNumber_Max_ForMissingPartQtyOP IS NOT NULL AND opNumber_Max_ForMissingPartQtyOP > 0 AND  \n" +
                "				(opNumber_Max_ForReworkOP IS NULL OR opNumber_Max_ForReworkOP = 0  \n" +
                "					OR (opNumber_Max_ForMissingPartQtyOP > opNumber_Max_ForReworkOP))) THEN  \n" +
                "  \n" +
                "				SET @stmt_op = CONCAT('<b>', '(', FORMAT(opNumber_Max_ForMissingPartQtyOP,3), ') ' ,opName_Max_ForMissingPartQtyOP, '</b> operation is \"Allow Operation To Continue With Possibility Of Missing Parts Placements\".  \n" +
                "							So after this operation, any one operation must be rework.');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			END IF;  \n" +
                "			/*********************** if any Operation have \"Allow operation to continue with the  \n" +
                "				possibility of missing placement\" than after that operation any one operation must be rework *********/  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			/***** check bill of material if any part having \"PRE-ASSY\" then we must have to add pre-programming op in WO *****/  \n" +
                "			SELECT COUNT(1) INTO anyPreProgPartInWOAssyBOM FROM rfq_lineitems  \n" +
                "			WHERE partID = (SELECT partID FROM workorder WHERE woID= pwoID AND deletedAt IS NULL)  \n" +
                "			AND programingStatus = 1  \n" +
                "			AND deletedAt IS NULL LIMIT 1 ;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO anyPartPreProgRequireWOOP FROM workorder_operation  \n" +
                "			WHERE woID = pwoID  \n" +
                "			AND isPreProgrammingComponent = 1  \n" +
                "			AND deletedAt IS NULL LIMIT 1;  \n" +
                "  \n" +
                "  \n" +
                "			IF(anyPreProgPartInWOAssyBOM > 0 AND anyPartPreProgRequireWOOP = 0) THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ('Work order must have at least one part pre-programming operation.');  \n" +
                "			END IF;  \n" +
                "			/***** check bill of material if any part having \"PRE-ASSY\" then we must have to add pre-programming op in WO *****/  \n" +
                "  \n" +
                "  \n" +
                "		END block4;  \n" +
                "		/**************************************** end - case 4 - Check All operations and work order validations ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - case 5 - About required MFR# on serial Mapping validations ****************************************************/  \n" +
                "		block5: BEGIN  \n" +
                "        	DECLARE v_IsAllowSerialMappingWOId INT;  \n" +
                "            DECLARE v_IsAllowSerialMappingOperationName VARCHAR(500);  \n" +
                "			DECLARE v_CountMFRSR INT;  \n" +
                "			IF allow_final_serialno_operation_count <= 2 THEN  \n" +
                "				SELECT woOPID, fun_getOperationNameByWOOPID(woOPID) INTO v_IsAllowSerialMappingWOId  \n" +
                "				,v_IsAllowSerialMappingOperationName FROM  \n" +
                "				workorder_operation WHERE woID = pwoID AND isDeleted = 0 AND isAllowFinalSerialMapping = 1;  \n" +
                "				IF(v_IsAllowSerialMappingWOId IS NOT NULL)  \n" +
                "				THEN  \n" +
                "					SELECT COUNT(1) INTO v_CountMFRSR FROM workorder_serialmst WHERE woID = pwoID AND serialType = 1 AND isDeleted = 0;  \n" +
                "					IF v_CountMFRSR = 0 THEN  \n" +
                "						INSERT INTO temp_operation_error (errorText) VALUES ((CONCAT('Work Order must require MFR SR# because operation <b>',v_IsAllowSerialMappingOperationName,'</b> is configured as Serial# Mapping operation in work order.')));  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "            END IF;  \n" +
                "		END block5;  \n" +
                "		/**************************************** end - case 5 - About required MFR# on serial Mapping validations ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - case 6 - Check cleaning type of operation againse Assembly cleaning type ****************************************************/  \n" +
                "        block6: BEGIN  \n" +
                "			SELECT	GROUP_CONCAT((CASE WHEN isNoClean =  1 AND isWaterSoluble =  1 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - No-Clean and Water-Soluble </li>') ELSE NULL END)  SEPARATOR '' )  bothCnt,  \n" +
                "					GROUP_CONCAT((CASE WHEN isNoClean =  1 AND isWaterSoluble =  0 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - No-Clean </li>') ELSE NULL END)  SEPARATOR '' )  cleanCnt,  \n" +
                "					GROUP_CONCAT((CASE WHEN isWaterSoluble = 1 AND isNoClean =  0 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - Water-Soluble</li>' )ELSE NULL END) SEPARATOR '') waterCnt,  \n" +
                "                    GROUP_CONCAT((CASE WHEN isFluxNotApplicable = 1 THEN CONCAT('<li><b>(', FORMAT(opNumber,3), ') ',opName,'</b> - Not Applicable</li>' )ELSE NULL END) SEPARATOR '') naCnt  \n" +
                "			INTO  bothOp, noCleanOp, waterSolubleOp  , notApplicableOp  \n" +
                "			FROM workorder_operation WHERE woID = pwoID AND isDeleted = 0;  \n" +
                "			IF assyCleanType = '' THEN  \n" +
                "				SET @stmt_op = CONCAT('Please configure assembly flux type from part master.<br/>');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			ELSEIF assyCleanType = 'NA' AND  ( noCleanOp IS NOT NULL OR waterSolubleOp IS NOT NULL) THEN  \n" +
                "				SET @stmt_op = CONCAT('Please configure assembly as No-Clean or Water-Soluble or Remove following operation from work order to validate.<br/>','<ul>',IFNULL(noCleanOp,''),IFNULL(waterSolubleOp,''),'</ul>');  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "			ELSEIF	assyCleanType = 'NC' THEN  \n" +
                "				SET err = 0;  \n" +
                "				SET @stmt_op = 'Assembly configured as No-Clean.<br/><ul>';  \n" +
                "				IF  noCleanOp IS NULL THEN -- OR opWaterSolubleCnt > 0 ) THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one No-Clean operation require to validate.</li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				IF  bothOp IS NOT NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',bothOp,'</ul></li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				IF waterSolubleOp IS NOT NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',waterSolubleOp,'</ul></li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');  \n" +
                "				IF err > 0 THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			ELSEIF	assyCleanType = 'WS' THEN  \n" +
                "				SET err= 0 ;  \n" +
                "				SET @stmt_op = 'Assembly configured as Water-Soluble.<br/><ul>';  \n" +
                "				IF  noCleanOp IS NOT NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',noCleanOp,'</ul></li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				IF  bothOp IS NOT NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>Please remove following operation from work order to validate.<br/><ul>',bothOp,'</ul></li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				IF waterSolubleOp IS NULL THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one Water-Soluble operation require to validate.</li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');  \n" +
                "				IF err > 0 THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			ELSEIF	assyCleanType = 'BOTH' THEN  \n" +
                "				-- Check Both Operation Available Then allow  \n" +
                "				-- Check NoClean and WaterSolubale Both Operation Allow  \n" +
                "				SET err= 0 ;  \n" +
                "				SET @stmt_op = 'Assembly configured as No-clean and Water-soluble.<br/><ul>';  \n" +
                "				IF  ((bothOp IS NULL) AND (noCleanOp IS NULL OR waterSolubleOp IS NULL)) THEN  \n" +
                "					SET @stmt_op = CONCAT(@stmt_op,'<li>At least one Water-Soluble and No-clean operation or Both operation require to validate.</li>');  \n" +
                "					SET err = 1;  \n" +
                "				END IF;  \n" +
                "				SET @stmt_op = CONCAT(@stmt_op,'</ul>');  \n" +
                "				IF err > 0 THEN  \n" +
                "					INSERT INTO temp_operation_error (errorText) VALUES (@stmt_op);  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "        END block6;  \n" +
                "		/**************************************** end - case 6 - first operation should not be rework type ****************************************************/  \n" +
                "  \n" +
                "		/**************************************** start - case 7 - Validate Ref Designator ****************************************************/  \n" +
                "        block7: BEGIN  \n" +
                "			DECLARE vBOMRefDesigList,vWoOpRefDesigList,vOdddlyRefDes,vAddedWoOpRefDes,vAddedOddlyBOMRefDes TEXT;  \n" +
                "			DECLARE startPos, endPos, maxLength INT ;  \n" +
                "            DECLARE vInvalidCount INT DEFAULT 0;  \n" +
                "            DECLARE itemRefDesg varchar(500);  \n" +
                "            DECLARE vInvalidList TEXT DEFAULT '';  \n" +
                "            SET vAddedWoOpRefDes = '';  \n" +
                "  \n" +
                "  \n" +
                "            SELECT  Group_Concat(concat_ws(',',rl.refDesig,rl.dnpDesig)) INTO vBOMRefDesigList  \n" +
                "            From rfq_lineitems rl  \n" +
                "            LEFT JOIN part_sub_assy_relationship psub  ON rl.partID = psub.prPerPartID  and psub.isDeleted = 0  \n" +
                "            Where rl.isDeleted = 0  \n" +
                "            And psub.partID = vPartID;  \n" +
                "  \n" +
                "			/*IF vBOMRefDesigList IS NOT NULL OR  vBOMRefDesigList <> '' THEN  \n" +
                "				SELECT  fun_getDesignatorList(vBOMRefDesigList) into vBOMRefDesigList;  \n" +
                "			END IF;  */  \n" +
                "  \n" +
                "            SELECT  Group_Concat(wor.refDesig) INTO vWoOpRefDesigList  \n" +
                "            From workorder_operation_refDesig wor  \n" +
                "            Where wor.isDeleted = 0  \n" +
                "            AND wor.woID = pWoId;  \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(cor.refDes) INTO vOdddlyRefDes  \n" +
                "            From component_oddely_refdes cor  \n" +
                "            Where cor.refComponentID = vPartID  \n" +
                "            and cor.isDeleted =0;  \n" +
                "-- select   vBOMRefDesigList, vOdddlyRefDes;  \n" +
                "			--  validation for  oddly named ref des  \n" +
                "			--  case:  if oddly ref des added and one of them is 'V1-M1' then no need to  send that to fun_getDesignatorList  \n" +
                "            --  Separate added oddly RefDes and merge after getting valid refDes list  \n" +
                "            IF vOdddlyRefDes IS NOT NULL THEN  \n" +
                "				SET startPos = 1;  \n" +
                "				SET maxLength = Length(vOdddlyRefDes);  \n" +
                "				REPEAT  \n" +
                "					SET endPos = LOCATE(',',vOdddlyRefDes,startPos);  \n" +
                "					IF endPos = 0 THEN  \n" +
                "						SET itemRefDesg = SUBSTR(vOdddlyRefDes,startPos);  \n" +
                "					ELSE  \n" +
                "						SET itemRefDesg = SUBSTR(vOdddlyRefDes,startPos,endPos-startPos);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF itemRefDesg <> '' OR itemRefDesg IS NOT NULL THEN  \n" +
                "						-- separate Oddly Ref Des from WO OP RefDes List  \n" +
                "						IF(INSTR(vWoOpRefDesigList, itemRefDesg) > 0) THEN  \n" +
                "                        	IF vAddedWoOpRefDes = '' OR vAddedWoOpRefDes IS NULL THEN  \n" +
                "								SET vAddedWoOpRefDes = CONCAT_WS(',',itemRefDesg);  \n" +
                "							 ELSE  \n" +
                "								SET vAddedWoOpRefDes = CONCAT_WS(',',vAddedWoOpRefDes,itemRefDesg);  \n" +
                "							 END IF;  \n" +
                "                        END IF;  \n" +
                "						SET vWoOpRefDesigList = REPLACE(vWoOpRefDesigList,concat(itemRefDesg,','),'');  \n" +
                "						-- separate Oddly Ref Des from BOM RefDes List  \n" +
                "						IF(INSTR(vBOMRefDesigList, itemRefDesg) > 0) THEN  \n" +
                "                        	IF vAddedOddlyBOMRefDes = '' OR vAddedOddlyBOMRefDes IS NULL THEN  \n" +
                "								SET vAddedOddlyBOMRefDes = CONCAT_WS(',',itemRefDesg);  \n" +
                "							 ELSE  \n" +
                "								SET vAddedOddlyBOMRefDes = CONCAT_WS(',',vAddedOddlyBOMRefDes,itemRefDesg);  \n" +
                "							 END IF;  \n" +
                "                        END IF;  \n" +
                "						SET vBOMRefDesigList = REPLACE(vBOMRefDesigList,concat(itemRefDesg,','),'');  \n" +
                "					END IF;  \n" +
                "					IF endPos = 0  AND startPos > 0 THEN  \n" +
                "						SET startPos = maxLength;  \n" +
                "					ELSE  \n" +
                "						SET startPos = endPos + 1;  \n" +
                "					END IF;  \n" +
                "				UNTIL startPos >=  maxLength END REPEAT;  \n" +
                "            END IF;  \n" +
                "			IF vWoOpRefDesigList IS NOT NULL OR  vWoOpRefDesigList <> '' THEN  \n" +
                "				SELECT  fun_getDesignatorList(vWoOpRefDesigList) into vWoOpRefDesigList;  \n" +
                "                IF vAddedWoOpRefDes IS NOT NULL OR vAddedWoOpRefDes <> '' THEN  \n" +
                "					SET vWoOpRefDesigList = CONCAT_WS(',',vAddedWoOpRefDes,  vWoOpRefDesigList);  \n" +
                "                END IF;  \n" +
                "            END IF;  \n" +
                "            IF vBOMRefDesigList IS NOT NULL OR  vBOMRefDesigList <> '' THEN  \n" +
                "				SELECT  fun_getDesignatorList(vBOMRefDesigList) into vBOMRefDesigList;  \n" +
                "                IF vAddedOddlyBOMRefDes IS NOT NULL OR vAddedOddlyBOMRefDes <> '' THEN  \n" +
                "					SET vBOMRefDesigList = CONCAT_WS(',',vAddedOddlyBOMRefDes,  vBOMRefDesigList);  \n" +
                "                END IF;  \n" +
                "            END IF;  \n" +
                "-- select vWoOpRefDesigList , vBOMRefDesigList;  \n" +
                "			SET startPos = 1;  \n" +
                "            SET maxLength = Length(vWoOpRefDesigList);  \n" +
                "            IF vWoOpRefDesigList IS NOT NULL THEN  \n" +
                "				REPEAT  \n" +
                "					SET endPos = LOCATE(',',vWoOpRefDesigList,startPos);  \n" +
                "					IF endPos = 0 THEN  \n" +
                "						SET itemRefDesg = SUBSTR(vWoOpRefDesigList,startPos);  \n" +
                "					ELSE  \n" +
                "						SET itemRefDesg = SUBSTR(vWoOpRefDesigList,startPos,endPos-startPos);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF itemRefDesg <> '' OR itemRefDesg IS NOT NULL THEN  \n" +
                "						IF(INSTR(vBOMRefDesigList,itemRefDesg) = 0) THEN  \n" +
                "							SET vInvalidCount = vInvalidCount +1 ;  \n" +
                "							IF vInvalidList = '' OR vInvalidList IS NULL THEN  \n" +
                "								SET vInvalidList = CONCAT_WS(',',itemRefDesg);  \n" +
                "							 ELSE  \n" +
                "								SET vInvalidList = CONCAT_WS(',',vInvalidList,itemRefDesg);  \n" +
                "							 END IF;  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "					IF endPos = 0  AND startPos > 0 THEN  \n" +
                "						SET startPos = maxLength;  \n" +
                "					ELSE  \n" +
                "						SET startPos = endPos + 1;  \n" +
                "					END IF;  \n" +
                "				UNTIL startPos >=  maxLength END REPEAT;  \n" +
                "            END IF;  \n" +
                "  \n" +
                "            IF vInvalidCount > 0 THEN  \n" +
                "				INSERT INTO temp_operation_error (errorText) VALUES ( concat('Invalid RefDes found in one of Operation(s). <br/> <b>',vInvalidList,'</b>'));  \n" +
                "            END IF;  \n" +
                "        END block7;  \n" +
                "        /**************************************** end - case 7 - Validate Ref Designator ****************************************************/  \n" +
                "		SELECT errorText FROM temp_operation_error;  \n" +
                "  \n" +
                "		/* check all above result, if all is set true than do publish*/  \n" +
                "		IF (SELECT COUNT(1) FROM temp_operation_error) = 0 THEN  \n" +
                "			UPDATE workorder SET updatedby=pupdatedby, isOperationsVerified=1,  \n" +
                "			updatedat= fun_DatetimetoUTCDateTime() WHERE woid=pwoid;  \n" +
                "		END IF;  \n" +
                "	END block1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5619,'2.00','V1',' Sproc_ValidateWorkorderAndPublish -Story 38215: Work Order Operation REF DES- Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5619:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetsalesOrderDetailStatus;  \n" +
                "CREATE PROCEDURE `Sproc_GetsalesOrderDetailStatus`(  \n" +
                "	IN psalesorderDetID VARCHAR(10000),  \n" +
                "	IN preleaseLineId INT,  \n" +
                "    IN pSalesOrderId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vQtyRelease INT;  \n" +
                "	DECLARE vQtyWprkorder INT;  \n" +
                "	DECLARE vSalesOrderDetailIdOfRelease INT;  \n" +
                "	DECLARE vSalesOrderDetailIdOfWO INT;  \n" +
                "    DECLARE vTransactionCnt INT DEFAULT 0;  \n" +
                "    IF pSalesOrderId IS NULL THEN  \n" +
                "		SELECT 	IFNULL(SUM(kitReleaseQty),0), salesOrderDetID  \n" +
                "		INTO 	vQtyRelease, vSalesOrderDetailIdOfRelease  \n" +
                "		FROM 	salesorder_plan_detailsmst  \n" +
                "		WHERE 	FIND_IN_SET(salesOrderDetID, psalesorderDetID)  \n" +
                "				AND isdeleted = 0  \n" +
                "				AND kitStatus = 'R'  \n" +
                "		GROUP BY salesOrderDetID;  \n" +
                "  \n" +
                "		SELECT 	IFNULL(SUM(poQty),0), salesOrderDetailID  \n" +
                "		INTO 	vQtyWprkorder, vSalesOrderDetailIdOfWO  \n" +
                "		FROM 	workorder_salesorder_details  \n" +
                "		WHERE 	FIND_IN_SET(salesOrderDetailID, psalesorderDetID)  \n" +
                "				AND isdeleted = 0  \n" +
                "		GROUP BY salesOrderDetailID;  \n" +
                "  \n" +
                "		SELECT vQtyRelease, vSalesOrderDetailIdOfRelease, vQtyWprkorder, vSalesOrderDetailIdOfWO;  \n" +
                "	  IF(preleaseLineId IS NULL) THEN  \n" +
                "		SELECT 	IFNULL(SUM(cpd.shipQty),0) shippedqty, cp.id, GROUP_CONCAT(DISTINCT(cp.packingSlipNumber)) packingSlipNumber, refSalesOrderID vSalesOrderDetailIdOfCustPS  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		WHERE FIND_IN_SET(cpd.refsalesorderdetid,psalesorderDetID) AND  cpd.isdeleted = 0  \n" +
                "			AND cp.transType = 'P';  \n" +
                "	   ELSE  \n" +
                "		SELECT shippedQty AS shippedqty FROM   vu_shippingsummaryperReleasePlan WHERE shippingId=preleaseLineId;  \n" +
                "	   END IF;  \n" +
                "	ELSE  \n" +
                "			SELECT 	vTransactionCnt + count(1)  \n" +
                "			INTO 	vTransactionCnt  \n" +
                "			FROM 	salesorder_plan_detailsmst    spd  \n" +
                "            JOIN 	salesorderdet sod ON sod.id = spd.salesOrderDetID and sod.isDeleted = 0  \n" +
                "			WHERE spd.isDeleted = 0  \n" +
                "			AND spd.kitStatus = 'R'  \n" +
                "            and sod.refSalesOrderID = pSalesOrderId ;  \n" +
                "  \n" +
                "            SELECT  vTransactionCnt + count(1)  \n" +
                "			INTO 	vTransactionCnt  \n" +
                "			FROM 	workorder_salesorder_details  wsd  \n" +
                "             JOIN 	salesorderdet sod ON sod.id = wsd.salesOrderDetailID and sod.isDeleted = 0  \n" +
                "			WHERE 	sod.refSalesOrderID = pSalesOrderId  \n" +
                "			AND wsd.isdeleted = 0    ;  \n" +
                "  \n" +
                "            SELECT 	vTransactionCnt + count(1)  \n" +
                "            INTO 	vTransactionCnt  \n" +
                "			FROM 	customer_packingslip cp  \n" +
                "			JOIN 	salesordermst som ON som.id = cp.refSalesOrderID AND som.isdeleted = 0  \n" +
                "			WHERE 	cp.isDeleted = 0  \n" +
                "			AND cp.refSalesOrderID = pSalesOrderId ;  \n" +
                "  \n" +
                "			Select 	ifnull(vTransactionCnt,0) transCnt;  \n" +
                "    END IF;  \n" +
                "	SELECT sd.id FROM salesorderdet sd  \n" +
                "    WHERE sd.refBlanketPOID IN (SELECT id FROM salesorderdet sdd  \n" +
                "							WHERE sdd.refSalesOrderID=pSalesOrderId AND sdd.isdeleted=0);  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-10-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5620,'2.00','V1','Bug 39280: merging Issue in dev branch for RMA and Blanket PO from Main  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5620:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_purchase_order_mst`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_purchase_order_mst`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "	IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS temppurchaseordermst AS  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"Material_Receive_Detail\" ELSE \"\" END AS msg FROM packing_slip_material_receive WHERE deletedAt IS NULL AND isdeleted=0 AND refPurChaseOrderID IN(',IDs,') LIMIT 1)');  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "    IF (countList=FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM temppurchaseordermst t)=0 THEN  \n" +
                "			SET @SQlStament1 = CONCAT('SELECT GROUP_CONCAT(id) INTO @purchaseOrderDetIds FROM purchase_order_det WHERE refPurchaseOrderID IN(',IDs,') AND isDeleted=0');  \n" +
                "			PREPARE stmt1 FROM @SQlStament1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			IF @purchaseOrderDetIds IS NOT NULL THEN  \n" +
                "				SET @SQlStament2 = CONCAT('UPDATE purchase_order_line_requirement_det SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',  \n" +
                "					deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE refpurchaseOrderDetID IN(',@purchaseOrderDetIds,') AND isDeleted=0');  \n" +
                "				PREPARE stmt2 FROM @SQlStament2;  \n" +
                "				EXECUTE stmt2;  \n" +
                "  \n" +
                "				SET @SQlStament3 = CONCAT('UPDATE purchase_order_line_release_det SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',  \n" +
                "					deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE refpurchaseOrderDetID IN(',@purchaseOrderDetIds,') AND isDeleted=0');  \n" +
                "				PREPARE stmt3 FROM @SQlStament3;  \n" +
                "				EXECUTE stmt3;  \n" +
                "  \n" +
                "				SET @SQlStament4 = CONCAT('UPDATE purchase_order_line_othercharges SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',  \n" +
                "					deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE refpurchaseOrderDetID IN(',@purchaseOrderDetIds,') AND isDeleted=0');  \n" +
                "				PREPARE stmt4 FROM @SQlStament4;  \n" +
                "				EXECUTE stmt4;  \n" +
                "            END IF;  \n" +
                "  \n" +
                "			SET @SQlStament5 = CONCAT('UPDATE purchase_order_det SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',  \n" +
                "				deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE refPurchaseOrderID IN(',IDs,') AND isDeleted=0');  \n" +
                "			PREPARE stmt5 FROM @SQlStament5;  \n" +
                "			EXECUTE stmt5;  \n" +
                "  \n" +
                "			SET @SQlStament6 = CONCAT('UPDATE purchase_order_mst SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',  \n" +
                "				deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE id IN(',IDs,') AND isDeleted=0');  \n" +
                "			PREPARE stmt6 FROM @SQlStament6;  \n" +
                "			EXECUTE stmt6;  \n" +
                "  \n" +
                "			SET @SQlStament7= CONCAT('UPDATE genericfiles SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,',  \n" +
                "				deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE entityid=-20 AND refTransID IN(',IDs,') AND isDeleted=0');  \n" +
                "			PREPARE stmt7 FROM @SQlStament7;  \n" +
                "			EXECUTE stmt7;  \n" +
                "			SELECT * FROM temppurchaseordermst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM temppurchaseordermst t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg FROM temppurchaseordermst t1  \n" +
                "			INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "		WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\" ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE temppurchaseordermst;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5621,'2.00','V1',' Sproc_checkDelete_purchase_order_mst sp for delete operation not working from po list page - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5621:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_CopyPartDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyPartDetail`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pToPartID INT,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsProgram tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vIsCPN tinyint;  \n" +
                "DECLARE vToPartIsCPN tinyint;  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vMessage varchar(200);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	/* Get From Part Detail For apply Validation */  \n" +
                "	select co.category, co.isCPN  \n" +
                "      into vFromPartCategory, vIsCPN  \n" +
                "	from component co  \n" +
                "	where co.id = pFromPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "    /* Get To Part Detail For apply Validation */  \n" +
                "    select co.isCPN  \n" +
                "      into  vToPartIsCPN  \n" +
                "	from component co  \n" +
                "	where co.id = pToPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "	IF pIsAttribute  then  \n" +
                "		UPDATE `component` toPart,  \n" +
                "		(select `id`,  \n" +
                "        /* Copy IsAttribute */  \n" +
                "        `functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,  \n" +
                "		`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,  \n" +
                "		`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,  \n" +
                "		`length`,`width`,`heightText`,`height`,  \n" +
                "        /* Copy IsSetting */  \n" +
                "        `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,  \n" +
                "		`selfLifeDays`,`shelfLifeAcceptanceDays`,`shelfListDaysThresholdPercentage`,`maxShelfLifeAcceptanceDays`,`maxShelfListDaysThresholdPercentage`,  \n" +
                "		`shelfLifeDateType`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,  \n" +
                "        `programingRequired`,`functionalTestingRequired`,`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently`,  \n" +
                "        /* Copy Additional Attribute */  \n" +
                "        `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`,`isEpoxyMount`,  \n" +
                "        /* Copy Packaging Detail */  \n" +
                "         `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,  \n" +
                "		`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ`,`isReceiveBulkItem`,  \n" +
                "        /* Copy Standard Detail */  \n" +
                "        `countryOfOrigin`,`htsCode`  \n" +
                "  \n" +
                "        from component where id = pFromPartID) fromPart  \n" +
                "		SET  \n" +
                "		toPart.`functionalCategoryID` = (CASE WHEN pIsAttribute = 1 THEN fromPart.functionalCategoryID ELSE toPart.`functionalCategoryID` END),  \n" +
                "		toPart.`functionalCategoryText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.functionalCategoryText ELSE toPart.`functionalCategoryText` END),  \n" +
                "		toPart.`mountingTypeID` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.mountingTypeID ELSE toPart.`mountingTypeID` END),  \n" +
                "		toPart.`mountingTypeText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.mountingTypeText ELSE toPart.`mountingTypeText` END),  \n" +
                "		toPart.`operatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.operatingTemp ELSE toPart.`operatingTemp` END),  \n" +
                "		toPart.`minOperatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.minOperatingTemp ELSE toPart.`minOperatingTemp` END),  \n" +
                "		toPart.`maxOperatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.maxOperatingTemp ELSE toPart.`maxOperatingTemp` END),  \n" +
                "		toPart.`temperatureCoefficient` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficient ELSE toPart.`temperatureCoefficient` END),  \n" +
                "		toPart.`temperatureCoefficientValue` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficientValue ELSE toPart.`temperatureCoefficientValue` END),  \n" +
                "		toPart.`temperatureCoefficientUnit` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficientUnit ELSE toPart.`temperatureCoefficientUnit` END),  \n" +
                "		toPart.`connecterTypeID` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.connecterTypeID ELSE toPart.`connecterTypeID` END),  \n" +
                "		toPart.`connectorTypeText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.connectorTypeText ELSE toPart.`connectorTypeText` END),  \n" +
                "		toPart.`noOfPositionText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfPositionText ELSE toPart.`noOfPositionText` END),  \n" +
                "		toPart.`noOfPosition` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfPosition ELSE toPart.`noOfPosition` END),  \n" +
                "		toPart.`noOfRowsText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfRowsText ELSE toPart.`noOfRowsText` END),  \n" +
                "		toPart.`noOfRows` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfRows ELSE toPart.`noOfRows` END),  \n" +
                "		toPart.`pitch` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.pitch ELSE toPart.`pitch` END),  \n" +
                "		toPart.`pitchMating` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.pitchMating ELSE toPart.`pitchMating` END),  \n" +
                "		toPart.`sizeDimension` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.sizeDimension ELSE toPart.`sizeDimension` END),  \n" +
                "		toPart.`length` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.length ELSE toPart.`length` END),  \n" +
                "		toPart.`width` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.width ELSE toPart.`width` END),  \n" +
                "		toPart.`heightText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.heightText ELSE toPart.`heightText` END),  \n" +
                "		toPart.`height` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.height ELSE toPart.`height` END),  \n" +
                "        /* Copy IsSetting */  \n" +
                "        toPart.`scrapValuePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.scrapValuePerBuild ELSE toPart.`scrapValuePerBuild` END),  \n" +
                "		toPart.`scrapRatePercentagePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.scrapRatePercentagePerBuild ELSE toPart.`scrapRatePercentagePerBuild` END),  \n" +
                "		toPart.`plannedValuePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.plannedValuePerBuild ELSE toPart.`plannedValuePerBuild` END),  \n" +
                "		toPart.`plannedOverRunPercentagePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.plannedOverRunPercentagePerBuild ELSE toPart.`plannedOverRunPercentagePerBuild` END),  \n" +
                "		toPart.`selfLifeDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.selfLifeDays ELSE toPart.`selfLifeDays` END),  \n" +
                "		toPart.`shelfLifeAcceptanceDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.shelfLifeAcceptanceDays ELSE toPart.`shelfLifeAcceptanceDays` END),  \n" +
                "		toPart.`shelfListDaysThresholdPercentage` =(CASE WHEN pIsSettings = 1 THEN fromPart.shelfListDaysThresholdPercentage ELSE toPart.`shelfListDaysThresholdPercentage` END),  \n" +
                "        toPart.`maxShelfLifeAcceptanceDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxShelfLifeAcceptanceDays ELSE toPart.`maxShelfLifeAcceptanceDays` END),  \n" +
                "		toPart.`maxShelfListDaysThresholdPercentage` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxShelfListDaysThresholdPercentage ELSE toPart.`maxShelfListDaysThresholdPercentage` END),  \n" +
                "        toPart.`shelfLifeDateType` = (CASE WHEN pIsSettings = 1 THEN fromPart.shelfLifeDateType ELSE toPart.`shelfLifeDateType` END),  \n" +
                "		toPart.`maxPriceLimit` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxPriceLimit ELSE toPart.`maxPriceLimit` END),  \n" +
                "		toPart.`maxQtyonHand` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxQtyonHand ELSE toPart.`maxQtyonHand` END),  \n" +
                "		toPart.`saftyStock` = (CASE WHEN pIsSettings = 1 THEN fromPart.saftyStock ELSE toPart.`saftyStock` END),  \n" +
                "		toPart.`eau` = (CASE WHEN pIsSettings = 1 THEN fromPart.eau ELSE toPart.`eau` END),  \n" +
                "		toPart.`businessRisk` = (CASE WHEN pIsSettings = 1 THEN fromPart.businessRisk ELSE toPart.`businessRisk` END),  \n" +
                "		toPart.`driverToolRequired` = (CASE WHEN pIsSettings = 1 THEN fromPart.driverToolRequired ELSE toPart.`driverToolRequired` END),  \n" +
                "		toPart.`matingPartRquired` = (CASE WHEN pIsSettings = 1 THEN fromPart.matingPartRquired ELSE toPart.`matingPartRquired` END),  \n" +
                "		toPart.`pickupPadRequired` = (CASE WHEN pIsSettings = 1 THEN fromPart.pickupPadRequired ELSE toPart.`pickupPadRequired` END),  \n" +
                "		toPart.`programingRequired` = (CASE WHEN pIsSettings = 1 THEN fromPart.programingRequired ELSE toPart.`programingRequired` END),  \n" +
                "		toPart.`functionalTestingRequired` = (CASE WHEN pIsSettings = 1 THEN fromPart.functionalTestingRequired ELSE toPart.`functionalTestingRequired` END),  \n" +
                "		toPart.`restrictUSEwithpermission` = (CASE WHEN pIsSettings = 1 THEN fromPart.restrictUSEwithpermission ELSE toPart.`restrictUSEwithpermission` END),  \n" +
                "		toPart.`bomLock` = (CASE WHEN pIsSettings = 1 THEN fromPart.bomLock ELSE toPart.`bomLock` END),  \n" +
                "		toPart.`restrictUsePermanently` = (CASE WHEN pIsSettings = 1 THEN fromPart.restrictUsePermanently ELSE toPart.`restrictUsePermanently` END),  \n" +
                "        /* Copy Additional Attribute */  \n" +
                "        toPart.`tolerance` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.tolerance ELSE toPart.`tolerance` END),  \n" +
                "		toPart.`voltage` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.voltage ELSE toPart.`voltage` END),  \n" +
                "		toPart.`value` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.value ELSE toPart.`value` END),  \n" +
                "		toPart.`partPackage` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.partPackage ELSE toPart.`partPackage` END),  \n" +
                "		toPart.`powerRating` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.powerRating ELSE toPart.`powerRating` END),  \n" +
                "		toPart.`weight` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.weight ELSE toPart.`weight` END),  \n" +
                "		toPart.`feature` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.feature ELSE toPart.`feature` END),  \n" +
                "		toPart.`isEpoxyMount` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.isEpoxyMount ELSE toPart.`isEpoxyMount` END),  \n" +
                "		toPart.`color` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.color ELSE toPart.`color` END),  \n" +
                "        /* Copy Packaging Detail */  \n" +
                "        toPart.`deviceMarking` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.deviceMarking ELSE toPart.`deviceMarking` END),  \n" +
                "		toPart.`packagingID` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingID ELSE toPart.`packagingID` END),  \n" +
                "		toPart.`minimum` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.minimum ELSE toPart.`minimum` END),  \n" +
                "		toPart.`mult` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.mult ELSE toPart.`mult` END),  \n" +
                "		toPart.`packageQty` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packageQty ELSE toPart.`packageQty` END),  \n" +
                "        toPart.`umidSPQ` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.umidSPQ ELSE toPart.`umidSPQ` END),  \n" +
                "		toPart.`uomClassID` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.uomClassID ELSE toPart.`uomClassID` END),  \n" +
                "		toPart.`uom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.uom ELSE toPart.`uom` END),  \n" +
                "		toPart.`uomText` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.uomText ELSE toPart.`uomText` END),  \n" +
                "		toPart.`unit` =(CASE WHEN pIsPackagingDetail = 1 THEN fromPart.unit ELSE toPart.`unit` END),  \n" +
                "		toPart.`pcbPerArray` =(CASE WHEN pIsPackagingDetail = 1 THEN fromPart.pcbPerArray ELSE toPart.`pcbPerArray` END),  \n" +
                "		toPart.`grossWeight` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.grossWeight ELSE toPart.`grossWeight` END),  \n" +
                "		toPart.`grossWeightUom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.grossWeightUom ELSE toPart.`grossWeightUom` END),  \n" +
                "		toPart.`packagingWeight` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingWeight ELSE toPart.`packagingWeight` END),  \n" +
                "		toPart.`packagingWeightUom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingWeightUom ELSE toPart.`packagingWeightUom` END),  \n" +
                "        toPart.`isReceiveBulkItem` =  (CASE WHEN pIsPackagingDetail = 1 THEN ((CASE WHEN toPart.partType = 4 THEN fromPart.isReceiveBulkItem ELSE FALSE END))  \n" +
                "        ELSE toPart.`isReceiveBulkItem` END),  \n" +
                "		/* Copy Standard Detail */  \n" +
                "		toPart.`countryOfOrigin` = (CASE WHEN pIsStandards = 1 THEN fromPart.countryOfOrigin ELSE toPart.`countryOfOrigin` END),  \n" +
                "		toPart.`htsCode` = (CASE WHEN pIsStandards = 1 THEN fromPart.packagingWeightUom ELSE toPart.`htsCode` END),  \n" +
                "  \n" +
                "		toPart.`requiredTestTime` = (CASE WHEN (pIsFunctionalTesingTool = 1 and vToPartIsCPN = 0) THEN fromPart.requiredTestTime ELSE toPart.`requiredTestTime` END),  \n" +
                "        toPart.`mountingTypePartRequired`= (CASE WHEN (pIsRequiredMountingType = 1) THEN fromPart.mountingTypePartRequired ELSE  toPart.`mountingTypePartRequired` END),  \n" +
                "        toPart.`functionalTypePartRequired` = (CASE WHEN (pIsRequiredFunctionalType = 1) THEN fromPart.functionalTypePartRequired ELSE toPart.`functionalTypePartRequired` END),  \n" +
                "        toPart.`driverToolRequired`= (CASE WHEN (pIsDriveTool = 1 and vToPartIsCPN = 0) THEN fromPart.driverToolRequired ELSE toPart.`driverToolRequired` END),  \n" +
                "        toPart.`matingPartRquired` = (CASE WHEN (pIsRequiredMattingParts = 1  and vToPartIsCPN = 0) THEN fromPart.matingPartRquired ELSE toPart.`matingPartRquired` END),  \n" +
                "        toPart.`pickupPadRequired` = (CASE WHEN (pIsPickupPad = 1  and vToPartIsCPN = 0) THEN fromPart.pickupPadRequired ELSE toPart.`pickupPadRequired` END),  \n" +
                "        toPart.`functionalTestingRequired`= (CASE WHEN (pIsFunctionalTesingTool = 1  and vToPartIsCPN = 0) THEN fromPart.functionalTestingRequired ELSE toPart.`functionalTestingRequired` END),  \n" +
                "  \n" +
                "		toPart.`updatedBy` = pUserID,  \n" +
                "		toPart.`updatedAt` = current_timestamp()  \n" +
                "		WHERE toPart.`id` = pToPartID;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vMessage = '';  \n" +
                "			CALL Sproc_CopyPartDetailOnCopyAndDuplicatePart(pFromPartID,pToPartID,pUserID,vIsCPN,vToPartIsCPN,vFromPartCategory,pIsStandards,pIsRequiredFunctionalType,pIsRequiredMountingType,pIsPackagingAliasPart,pIsOtherPartName  \n" +
                "				,pIsAlternatePart,pIsRoHSReplacementPart,pIsDriveTool,pIsProcessMaterial,pIsRequiredMattingParts,pIsPickupPad,pIsFunctionalTesingTool,pIsFinctionalRestingEquipment, vMisMatchFields, vMessage);  \n" +
                "  \n" +
                "	IF(vMessage != '')  \n" +
                "	THEN  \n" +
                "		select vMessage as message,vMisMatchFields as misMatchFields;  \n" +
                "	ELSE  \n" +
                "		select * from component where id = pToPartID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetComponentPidCodeSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentPidCodeSearch`(  \n" +
                "IN pSearch VARCHAR(100),  \n" +
                "IN pId INT(11),  \n" +
                "IN pMfgType VARCHAR(50),  \n" +
                "IN pMfgCodeId INT(11),  \n" +
                "IN pCategory INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "   SELECT * FROM  \n" +
                "	(SELECT com.id,  \n" +
                "        com.mfgPN,  \n" +
                "		com.PIDCode,  \n" +
                "		com.mfgcodeID,  \n" +
                "		m.mfgCode AS mfgCode,  \n" +
                "		m.mfgType AS mfgType,  \n" +
                "        com.isCPN  \n" +
                "	FROM component AS com  \n" +
                "	INNER JOIN mfgCodemst AS m ON com.mfgcodeID = m.id  \n" +
                "	WHERE com.deletedAt IS NULL  \n" +
                "      and com.id != pId  \n" +
                "      and com.category = pCategory  \n" +
                "      and m.MfgType = pMfgType  \n" +
                "    ) AS a  \n" +
                "	WHERE ((pSearch IS NULL AND 1=1) OR  \n" +
                "			(pSearch IS NOT NULL AND (PIDCode LIKE CONCAT('%', pSearch , '%')  \n" +
                "             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = a.id AND opn.name LIKE CONCAT('%', pSearch , '%'))))  \n" +
                ")  \n" +
                "ORDER BY PIDCode;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5622,'2.00','V1',' Bug 38954: Code Refactor: [Main Branch] Need to restrict users to add Packaging Alias for Assembly/Sales kit at part master - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5622:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierQuotePartList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuotePartList`(  \n" +
                "	IN pPageIndex INT(11),  \n" +
                "	IN pRecordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pSupplierQuoteMstID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET @temp_Sproc_RetrieveSupplierQuotePartList=CONCAT(\"  \n" +
                "		SELECT  \n" +
                "        sqpd.id,  \n" +
                "        sqpd.partID,  \n" +
                "        sqpd.supplierPartID,  \n" +
                "        sqpd.supplierQuoteMstID,  \n" +
                "        c.custAssyPN,  \n" +
                "        c.mfgPN AS mfgPN,  \n" +
                "        c.mfgPNDescription,  \n" +
                "        c.mfgcodeID,  \n" +
                "        sqm.supplierID,  \n" +
                "        sqm.quoteStatus,  \n" +
                "        sqpd.scanLabel,  \n" +
                "        fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "		fun_getMfgNameByID(sqm.supplierID) supplier,  \n" +
                "        fun_getMfgCodeByID(c.mfgcodeID) mfgCode,  \n" +
                "        fun_getMfgCodeByID(sc.mfgcodeID) supplierCode,  \n" +
                "        sc.mfgPN AS supplierPN,  \n" +
                "        sqpd.isActive,  \n" +
                "        (  \n" +
                "				CASE  \n" +
                "					WHEN (`sqpd`.`isActive` = 0) THEN 'Inactive'  \n" +
                "					WHEN (`sqpd`.`isActive` = 1) THEN 'Active'  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS `isActiveConvertedValue`,  \n" +
                "        c.isCustom,  \n" +
                "        sc.isCustom AS isCustomSupplier,  \n" +
                "		fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
                "        fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "        fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon,  \n" +
                "        fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "        fun_getPartAttibutesBySupplierQuoteDetailID(sqpd.id) AS attributesList,  \n" +
                "        fun_getPartPricingCountBySupplierQuoteDetailID(sqpd.id) AS pricingCount,  \n" +
                "        fun_getUserNameByID(sqpd.createdBy) createdby,  \n" +
                "		fun_getUserNameByID(sqpd.updatedBy) updatedby,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(sqpd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(sqpd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "        fun_getRoleByID(sqpd.updateByRoleId) updatedbyRole  \n" +
                "    FROM		supplier_quote_parts_det sqpd  \n" +
                "	LEFT JOIN 	supplier_quote_mst sqm ON sqpd.supplierQuoteMstID = sqm.id AND sqm.deletedAt IS NULL  \n" +
                "	LEFT JOIN 	component c ON sqpd.partID = c.id AND c.deletedAt IS NULL  \n" +
                "	LEFT JOIN	component sc ON sqpd.supplierPartID = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "	WHERE   sqpd.supplierQuoteMstID = \",pSupplierQuoteMstID,\"  \n" +
                "	AND 	sqpd.deletedAt IS NULL  \n" +
                "    \");  \n" +
                "  \n" +
                "  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    /* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuotePartList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuotePartList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierQuote`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuote`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pIsSummary TINYINT,  \n" +
                "	IN pSupplierIds VARCHAR(16000),  \n" +
                "	IN pQuoteStatus VARCHAR(1000),  \n" +
                "	IN pSearchType VARCHAR(5),  \n" +
                "	IN pAdvanceSearchSQ VARCHAR(100),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN pPartIds VARCHAR(16000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_MfgNameFormat VARCHAR(100);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO v_MfgNameFormat;  \n" +
                "  \n" +
                "	IF (pIsSummary = FALSE) THEN  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "				SELECT  \n" +
                "					s.id,  \n" +
                "					spd.id AS supplierQuotePartDetID,  \n" +
                "					fun_GetFormattedMfgCode(cm.mfgCode, cm.mfgName, \",v_MfgNameFormat,\") mfgName,  \n" +
                "					cm.mfgCode,  \n" +
                "					s.supplierID,  \n" +
                "					spd.partID,  \n" +
                "                    c.custAssyPN,  \n" +
                "					c.mfgPN AS mfgPN,  \n" +
                "                    c.mfgPNDescription,  \n" +
                "					c.mfgcodeID,  \n" +
                "					sc.mfgPN AS supplierPN,  \n" +
                "					spd.supplierPartID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "					IF(spd.isActive = 0, 'Inactive', 'Active') AS isActiveConvertedValueDetail,  \n" +
                "					spd.isActive,  \n" +
                "					spd.scanLabel,  \n" +
                "                    IF(s.quoteStatus = 'P',true, false) AS isDisabledDelete,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricing,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledCopySupplierQuote,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricingHistory,  \n" +
                "                    IF(spd.id IS NULL, false, true) AS isRequirementReference,  \n" +
                "					c.isCustom,  \n" +
                "					sc.isCustom AS isCustomSupplier,  \n" +
                "					rhc.rohsIcon,  \n" +
                "					rhc.name rohsName,  \n" +
                "					rhsc.rohsIcon supplierRohsIcon,  \n" +
                "					rhsc.name supplierRohsName,  \n" +
                "					fun_getPartAttibutesBySupplierQuoteDetailID(spd.id) AS attributesList,  \n" +
                "					fun_getPartPricingCountBySupplierQuoteDetailID(spd.id) AS pricingCount,  \n" +
                "					fun_getUserNameByID(spd.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(spd.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(spd.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(spd.createByRoleId) createdByRole  \n" +
                "				FROM  supplier_quote_parts_det spd  \n" +
                "				LEFT JOIN supplier_quote_mst s ON spd.supplierQuoteMstID = s.id AND s.isDeleted = 0  \n" +
                "				LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN rfq_rohsmst rhc ON c.id = rhc.id AND rhc.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "				LEFT JOIN rfq_rohsmst rhsc ON sc.id = rhsc.id AND rhsc.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst cm ON cm.id = c.mfgcodeID  AND cm.isDeleted = 0  \n" +
                "				WHERE spd.isDeleted = 0 \");  \n" +
                "	 ELSE  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "			SELECT 	s.id,  \n" +
                "					s.supplierID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "                    IF(s.quoteStatus = 'P', true, false) AS isDisabledDelete,  \n" +
                "					fun_getAddressbyID(s.shippingAddressID) shipTo,  \n" +
                "					fun_getAddressbyID(s.billingAddressID) billTo,  \n" +
                "                    (SELECT COUNT(0) FROM supplier_quote_parts_det WHERE isDeleted = 0 AND supplierQuoteMstID = s.id) AS noOfSupplierPartLine,  \n" +
                "					fun_getUserNameByID(s.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(s.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(s.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(s.createByRoleId) createdByRole  \n" +
                "			FROM   supplier_quote_mst s  \n" +
                "			LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "			WHERE  s.isDeleted = 0  AND  \n" +
                "            (CASE WHEN ('\",pPartIds,\"' != '') THEN  \n" +
                "				s.id IN  (SELECT spd.supplierQuoteMstID FROM  \n" +
                "				supplier_quote_parts_det spd  \n" +
                "                LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "                WHERE spd.isDeleted = 0 AND (FIND_IN_SET(spd.supplierPartID, ('\",pPartIds,\"')) OR FIND_IN_SET(spd.partID, ('\",pPartIds,\"'))))  \n" +
                "				ELSE 1 = 1 END)  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSupplierIds IS NOT NULL OR pSupplierIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND supplierID in (\"',pSupplierIds,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pQuoteStatus IS NOT NULL OR pQuoteStatus != '') THEn  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND quoteStatus in (\"',pQuoteStatus,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pAdvanceSearchSQ IS NOT NULL OR pAdvanceSearchSQ != '') THEN  \n" +
                "		IF(pSearchType = 'E') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber = \"', pAdvanceSearchSQ , '\" ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber LIKE \"%', pAdvanceSearchSQ ,'%\" ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''' and quoteDate <= ''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate <= ''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPartIds != '' AND (pIsSummary = FALSE)) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( supplierPartID in (\"',pPartIds,'\") OR partID in (\"',pPartIds,'\") )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuote,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuote,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "   PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-12-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5623,'2.00','V1','Task 39273: Demo Improvement points changes - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5623:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssyCompListForCustomerPackingSlipMISC;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyCompListForCustomerPackingSlipMISC`(  \n" +
                "	IN pCustomerID INT,  \n" +
                "	IN pSearch VARCHAR(300),  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pisFromSO TINYINT  ,  \n" +
                "    IN pSalesOrderID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	/*NOTE:	pSalesOrderID is used for  RMA SO  for fetching part of original Q2C SO      */  \n" +
                "	DECLARE v_respOfGetAcquiredMFRListFn INT;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "    select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Customers;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Customers (  \n" +
                "		customerID INT  \n" +
                "    );  \n" +
                "    /* If Selected customer's isComapny true then make it null as in case of company we have to fetch all customer's assembly*/  \n" +
                "    IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany = 1) > 0 THEN  \n" +
                "		SET pCustomerID = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* IF customer selected and is comapny is not true then we have select customer based on acquire, and supplier mapping*/  \n" +
                "    IF 	pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID) INTO v_respOfGetAcquiredMFRListFn;  \n" +
                "  \n" +
                "        INSERT INTO temp_Customers  \n" +
                "		SELECT buyTo AS customerID  \n" +
                "		FROM acquireCustomers;  \n" +
                "  \n" +
                "        INSERT INTO temp_Customers  \n" +
                "        SELECT smm.refMfgCodeMstID AS customerID  \n" +
                "		FROM supplier_mapping_mst smm  \n" +
                "		WHERE smm.supplierID = pCustomerID  \n" +
                "        AND smm.isDeleted = 0  \n" +
                "        AND smm.isCustMapping=0;  \n" +
                "	END IF;  \n" +
                "	IF pSalesOrderID IS NULL THEN  \n" +
                "			/* Select assembly, sales kit, custom part and cpn part of selected customer and all the off the self MFR parts*/  \n" +
                "			SELECT *  \n" +
                "			FROM (  \n" +
                "				SELECT 	co.id,            	co.mfgPN,				co.PIDCode,			co.mfgPNDescription AS description,  \n" +
                "						co.rev,				co.nickName,			co.partType,		u.unitName,				u.id unitID,  \n" +
                "						ro.rohsIcon,		ro.name AS rohsName,	CONCAT('(', mfg.mfgcode, ')', ' ', co.mfgPN) combinemfgPN,  \n" +
                "						co.mfgcodeID,		 cst.co_standards as standards,  \n" +
                "                        fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgCodeFormat) mfgName,  \n" +
                "						mfg.mfgType,		co.category,            co.iscustom,		co.isCPN,  \n" +
                "						cst.componentStandardList,					co.rfqOnly,			co.partStatus  \n" +
                "				FROM 	component co  \n" +
                "				INNER JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id  AND mfg.isDeleted = 0  \n" +
                "				INNER JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "				INNER JOIN uoms u ON co.uom = u.id AND u.isDeleted = 0  \n" +
                "				LEFT JOIN (  \n" +
                "					SELECT 	csd.componentID,  \n" +
                "							GROUP_CONCAT(cs.fullName) componentStandardList,  \n" +
                "							GROUP_CONCAT(CASE WHEN csd.classID IS NULL  \n" +
                "													THEN cs.fullName  \n" +
                "												ELSE  \n" +
                "													(SELECT GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))  \n" +
                "													FROM standard_class s  \n" +
                "													WHERE s.classID = csd.classID AND isDeleted = 0)  \n" +
                "										END  \n" +
                "										ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC  \n" +
                "										SEPARATOR ', ') co_standards  \n" +
                "					FROM component_standard_details csd  \n" +
                "					INNER JOIN certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID AND cs.isDeleted = 0  \n" +
                "					WHERE csd.isDeleted = 0  \n" +
                "					GROUP BY csd.componentID  \n" +
                "				) cst ON co.id = cst.componentID  \n" +
                "				WHERE co.id > 0  \n" +
                "				AND  co.mfgType = 'MFG'  \n" +
                "				AND (CASE WHEN (co.iscustom = 1 AND pCustomerID IS NOT NULL)  \n" +
                "								THEN (EXISTS (SELECT 1 FROM temp_Customers ta WHERE ta.customerID = co.mfgCodeID))  \n" +
                "							  ELSE 1 = 1  END)  \n" +
                "				AND co.id = IFNULL(pPartID, co.id)  \n" +
                "				AND co.partstatus!=(CASE WHEN pisFromSO=1 THEN -3 ELSE 0 END)  \n" +
                "				AND co.isDeleted = 0  \n" +
                "				AND co.isGoodPart = 1  \n" +
                "				AND co.partType != 4  \n" +
                "			) AS co  \n" +
                "			WHERE (CASE WHEN pSearch IS NOT NULL  \n" +
                "						THEN (co.PIDCode LIKE CONCAT('%',pSearch,'%') OR co.combinemfgPN LIKE CONCAT('%',pSearch,'%'))  \n" +
                "						ELSE 1 = 1  \n" +
                "				END);  \n" +
                "    ELSE  \n" +
                "			/* Select assembly, sales kit, custom part and cpn part of selected customer and all the off the self MFR parts*/  \n" +
                "			SELECT *  \n" +
                "			FROM (  \n" +
                "				SELECT 	co.id,            	co.mfgPN,				co.PIDCode,			co.mfgPNDescription AS description,  \n" +
                "						co.rev,				co.nickName,			co.partType,		u.unitName,				u.id unitID,  \n" +
                "						ro.rohsIcon,		ro.name AS rohsName,	CONCAT('(', mfg.mfgcode, ')', ' ', co.mfgPN) combinemfgPN,  \n" +
                "						co.mfgcodeID,		 cst.co_standards as standards,  \n" +
                "                        fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgCodeFormat) mfgName,  \n" +
                "						mfg.mfgType,		co.category,            co.iscustom,		co.isCPN,  \n" +
                "						cst.componentStandardList,					co.rfqOnly,			co.partStatus  ,sod.custPOLineNumber  \n" +
                "				FROM 	component co  \n" +
                "				INNER JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id  AND mfg.isDeleted = 0  \n" +
                "				INNER JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "				INNER JOIN uoms u ON co.uom = u.id AND u.isDeleted = 0  \n" +
                "				LEFT JOIN (  \n" +
                "					SELECT 	csd.componentID,  \n" +
                "							GROUP_CONCAT(cs.fullName) componentStandardList,  \n" +
                "							GROUP_CONCAT(CASE WHEN csd.classID IS NULL  \n" +
                "													THEN cs.fullName  \n" +
                "												ELSE  \n" +
                "													(SELECT GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))  \n" +
                "													FROM standard_class s  \n" +
                "													WHERE s.classID = csd.classID AND isDeleted = 0)  \n" +
                "										END  \n" +
                "										ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC  \n" +
                "										SEPARATOR ', ') co_standards  \n" +
                "					FROM component_standard_details csd  \n" +
                "					INNER JOIN certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID AND cs.isDeleted = 0  \n" +
                "					WHERE csd.isDeleted = 0  \n" +
                "					GROUP BY csd.componentID  \n" +
                "				) cst ON co.id = cst.componentID  \n" +
                "				JOIN salesorderdet sod ON sod.partID = co.id and sod.isDeleted = 0  \n" +
                "				WHERE co.mfgType = 'MFG'  \n" +
                "				AND co.id = IFNULL(pPartID, co.id)  \n" +
                "				AND co.partstatus!= -3  \n" +
                "				AND co.isDeleted = 0  \n" +
                "                AND co.partType != 4  \n" +
                "                and sod.refSalesOrderId = pSalesOrderID  \n" +
                "			) AS co  ;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5624,'2.00','V1','Sproc_GetAssyCompListForCustomerPackingSlipMISC - Bug 39255: QA Testing issues of User Story 38431 - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5624:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF OLD.receiptType = \"P\" AND OLD.refPurchaseOrderID IS NULL AND NEW.isCustConsigned != OLD.isCustConsigned THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isLineCustConsigned=NEW.isCustConsigned, LineCustomerID=NEW.CustomerID WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		CASE  \n" +
                "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
                "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
                "			ELSE 'PO Date'  \n" +
                "		END ,  \n" +
                "		CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Date', CAST(OLD.packingSlipDate AS CHAR), CAST(new.packingSlipDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(new.invoiceDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(new.creditMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(new.debitMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(new.receiptDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
                "				ELSE 'Supplier Invoice Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
                "				ELSE 'Supplier Invoice Posting Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(new.applyDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
                "				ELSE 'Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
                "				ELSE 'PS Internal Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Ship To', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			case when OLD.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "            case when new.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CustomerID, 0) != IFNULL(NEW.CustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.CustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.CustomerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5625,'2.00','V1',' Bug 39249: Material Receipt : Showing wrong validation while adding a part from packing slip - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5625:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customer_packingslip` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customer_packingslip`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "	IN pToBinIDOfEmptyBin INT,  \n" +
                "	IN pTransTypeForUMID VARCHAR(100),  \n" +
                "	IN pActionPerformedForUMIDAdjust VARCHAR(100) ,  \n" +
                "	IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE totCustPackingSlipIDs INT DEFAULT 0;  \n" +
                "	DECLARE i_cp INT DEFAULT 0;  \n" +
                "	DECLARE v_refCustPackingSlipDetIDs LONGTEXT ;  \n" +
                "  \n" +
                "  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempcustomerPackingslip;  \n" +
                "	-- IF(IDs <> '') THEN  \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomerPackingslip as  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_invoice\" else \"\" end as msg FROM customer_packingslip  \n" +
                "			where id IN(',IDs,') and refCustInvoiceID is not null LIMIT 1)  \n" +
                "		');  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "		DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempcustomerPackingslip t)=0 THEN  \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "  \n" +
                "				/* update  */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS t;  \n" +
                "				CREATE TEMPORARY TABLE t( txt TEXT );  \n" +
                "				INSERT INTO t VALUES(IDs);  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_custPackingSlipIDList;  \n" +
                "				CREATE TEMPORARY TABLE temp_custPackingSlipIDList( val CHAR(255) );  \n" +
                "				SET @SQL = CONCAT(\"insert into temp_custPackingSlipIDList (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t), \",\", \"'),('\"),\"');\");  \n" +
                "				PREPARE stmt1 FROM @SQL;  \n" +
                "				EXECUTE stmt1;  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO totCustPackingSlipIDs FROM temp_custPackingSlipIDList ;  \n" +
                "				SET i_cp=0;  \n" +
                "  \n" +
                "				/* customer packing slip loop - to reset UMID record quantity */  \n" +
                "				WHILE i_cp < totCustPackingSlipIDs DO  \n" +
                "  \n" +
                "					SET v_refCustPackingSlipDetIDs = NULL;  \n" +
                "  \n" +
                "					SELECT GROUP_CONCAT(id) INTO v_refCustPackingSlipDetIDs  \n" +
                "					FROM customer_packingslip_det  \n" +
                "					WHERE isDeleted = 0  \n" +
                "					AND refCustPackingSlipID = (SELECT val FROM temp_custPackingSlipIDList LIMIT i_cp,1)  \n" +
                "					;  \n" +
                "  \n" +
                "					IF (v_refCustPackingSlipDetIDs IS NOT NULL AND v_refCustPackingSlipDetIDs != '') THEN  \n" +
                "						CALL Sproc_DeleteCustomerPackingslipDet(v_refCustPackingSlipDetIDs , countList , pToBinIDOfEmptyBin , pTransTypeForUMID , pActionPerformedForUMIDAdjust , deletedBy , pRoleID) ;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					SET i_cp = i_cp + 1;  \n" +
                "				END WHILE;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				SET @SQl2 = CONCAT('update customer_packingslip_otherexpense_details set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"  \n" +
                "				WHERE refCustomerPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,'))) AND isDeleted=0');  \n" +
                "				PREPARE stmt2 FROM @SQL2;  \n" +
                "				EXECUTE stmt2;  \n" +
                "				DEALLOCATE PREPARE stmt2;  \n" +
                "  \n" +
                "				SET @SQl3 = CONCAT('update customer_packingslip_commission_attribute set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"  \n" +
                "				WHERE refCustPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,'))) AND isDeleted=0');  \n" +
                "				PREPARE stmt3 FROM @SQL3;  \n" +
                "				EXECUTE stmt3;  \n" +
                "				DEALLOCATE PREPARE stmt3;  \n" +
                "  \n" +
                "			        SET @SQl6 = CONCAT('update customer_packing_slip_track_number set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCustPackingSlipID IN(',IDs,') and isDeleted=0');  \n" +
                "				PREPARE stmt6 FROM @SQl6;  \n" +
                "				EXECUTE stmt6;  \n" +
                "				DEALLOCATE PREPARE stmt6;  \n" +
                "  \n" +
                "				SET @SQL5 = CONCAT('UPDATE shippedassembly  \n" +
                "						SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"  \n" +
                "						WHERE refCustPackingSlipDetID IN (SELECT id FROM customer_packingslip_det WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,'))) AND isDeleted=0');  \n" +
                "				PREPARE stmt5 FROM @SQL5;  \n" +
                "				EXECUTE stmt5;  \n" +
                "				DEALLOCATE PREPARE stmt5;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('UPDATE customer_packingslip_det  \n" +
                "						SET isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"  \n" +
                "						WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,')) AND isDeleted=0');  \n" +
                "				PREPARE stmt1 FROM @SQL1;  \n" +
                "				EXECUTE stmt1;  \n" +
                "				DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl4 = CONCAT('update customer_packingslip set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN (',IDs,') and isDeleted=0');  \n" +
                "				PREPARE stmt4 FROM @SQL4;  \n" +
                "				EXECUTE stmt4;  \n" +
                "				DEALLOCATE PREPARE stmt4;  \n" +
                "  \n" +
                "				SET @SQl7 = CONCAT('update salesorderdet sd set sd.salesOrderDetStatus = 1 , sd.completeStatusReason = \"\" where sd.id in (select refSalesorderDetid from customer_packingslip_det WHERE refCustPackingSlipID IN (SELECT id FROM customer_packingslip WHERE id IN (',IDs,'))) and sd.isDeleted=0');  \n" +
                "				PREPARE stmt7 FROM @SQl7;  \n" +
                "				EXECUTE stmt7;  \n" +
                "				DEALLOCATE PREPARE stmt7;  \n" +
                "				SELECT * FROM tempcustomerPackingslip WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "			COMMIT;  \n" +
                "			ELSE  \n" +
                "			      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomerPackingslip t;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "				FROM tempcustomerPackingslip t1  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "				ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempcustomerPackingslip;  \n" +
                "	-- ELSE  \n" +
                "		/* [S] - Add Time line log for delete sales order mst */  \n" +
                "	-- 	SET @SQl5 = CONCAT('update customer_packingslip set isDeleted=1,deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in (', refrenceIDs ,') and deletedAt is NULL');  \n" +
                "	-- 	PREPARE stmt5 FROM @SQl5;  \n" +
                "	-- 	EXECUTE stmt5;  \n" +
                "	-- 	DEALLOCATE PREPARE  stmt5;  \n" +
                "	-- 	SELECT \"\" TotalCount ,\"\" AS Message FROM customer_packingslip WHERE id IN(refrenceIDs) AND deletedAt IS NULL LIMIT 1;  \n" +
                "	-- END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 07-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_DeleteCustomerPackingslipDet` ;  \n" +
                "CREATE PROCEDURE `Sproc_DeleteCustomerPackingslipDet`(  \n" +
                "	IN pRefCustPackingSlipDetIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "	IN pToBinIDOfEmptyBin INT,  \n" +
                "	IN pTransTypeForUMID VARCHAR(100),  \n" +
                "	IN pActionPerformedForUMIDAdjust VARCHAR(100) ,  \n" +
                "	IN pUserID VARCHAR(50),  \n" +
                "	IN pUserRoleID VARCHAR(50)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE totCustPackingSlipDet INT DEFAULT 0;  \n" +
                "	DECLARE j_cpd INT DEFAULT 0;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE totUIShipAssyUMID INT DEFAULT 0;  \n" +
                "	DECLARE lv_sa_refsidid INT;  \n" +
                "	DECLARE lv_sa_umid VARCHAR(20);  \n" +
                "	DECLARE lv_sa_shippedqty INT;  \n" +
                "	DECLARE lv_cpsd_refSalesorderDetid INT;  \n" +
                "	DECLARE lv_cpsd_partID INT;  \n" +
                "	DECLARE lv_sa_partID INT;  \n" +
                "	DECLARE lv_currRefCustPackingSlipDetID INT;  \n" +
                "	DECLARE lv_uomIDOfAssy INT;  \n" +
                "/*  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "*/  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempcustomerPackingslipdet;  \n" +
                "  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomerPackingslipdet as  \n" +
                "		(SELECT 0 cnt ,\"\" as msg)  \n" +
                "	');  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "  \n" +
                "	IF (countList=FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempcustomerPackingslipdet t)=0 THEN  \n" +
                "			-- START TRANSACTION;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS t;  \n" +
                "			CREATE TEMPORARY TABLE t( txt TEXT );  \n" +
                "			INSERT INTO t VALUES(pRefCustPackingSlipDetIDs);  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_refSalesorderDetids;  \n" +
                "			CREATE TEMPORARY TABLE temp_refSalesorderDetids( val CHAR(255) );  \n" +
                "			SET @SQL = CONCAT(\"insert into temp_refSalesorderDetids (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t), \",\", \"'),('\"),\"');\");  \n" +
                "			PREPARE stmt1 FROM @SQL;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO totCustPackingSlipDet FROM temp_refSalesorderDetids ;  \n" +
                "			SET j_cpd=0;  \n" +
                "			/* customer packing slip det loop */  \n" +
                "			WHILE j_cpd < totCustPackingSlipDet DO  \n" +
                "  \n" +
                "				SET lv_currRefCustPackingSlipDetID = NULL;  \n" +
                "				SET lv_cpsd_refSalesorderDetid = NULL;  \n" +
                "  \n" +
                "				SELECT val INTO lv_currRefCustPackingSlipDetID  \n" +
                "				FROM temp_refSalesorderDetids LIMIT j_cpd,1 ;  \n" +
                "  \n" +
                "				/* get all UMID details for ref customer packing slip det from shipped assembly */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UIShipAssyList_UMID;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UIShipAssyList_UMID AS  \n" +
                "					SELECT sa.woNumber, sa.refsidid,  \n" +
                "						(SELECT uid FROM component_sid_stock WHERE id = sa.refsidid AND isDeleted = 0) AS umid,  \n" +
                "						shippedqty , partID  \n" +
                "					FROM shippedassembly sa  \n" +
                "					WHERE sa.refCustPackingSlipDetID = lv_currRefCustPackingSlipDetID  \n" +
                "					AND sa.refsidid IS NOT NULL  \n" +
                "					AND sa.isDeleted = 0 AND sa.shippedqty > 0 ;  \n" +
                "  \n" +
                "				/* if cust packing det contain any UMID as shipped assembly then only  \n" +
                "					required ajdjust UMID stock */  \n" +
                "				IF((SELECT COUNT(1) FROM temp_UIShipAssyList_UMID) > 0) THEN  \n" +
                "  \n" +
                "					/* get all UMID details for ref customer packing slip det from component sid stock */  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_db_comp_sid_stock_list;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS temp_db_comp_sid_stock_list AS  \n" +
                "					SELECT 	csd.id,			csd.uid,		csd.refcompid,  \n" +
                "						csd.binID,		b.warehouseID,		w.parentWHID deptWHID,  \n" +
                "						csd.orgQty,		csd.orgPkgUnit,		csd.pkgQty,  \n" +
                "						csd.pkgUnit,		csd.uom,		csd.createdAt  \n" +
                "					FROM 	component_sid_stock   csd  \n" +
                "						JOIN 	binmst b ON csd.binID = b.id  \n" +
                "						JOIN 	warehousemst w ON b.warehouseID = w.id  \n" +
                "					WHERE   csd.id IN (SELECT refsidid FROM temp_UIShipAssyList_UMID)  \n" +
                "					AND 	csd.isdeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "					/* get required customer_packingslip_details */  \n" +
                "					SELECT refSalesorderDetid, partId INTO lv_cpsd_refSalesorderDetid, lv_cpsd_partID  \n" +
                "					FROM customer_packingslip_det  \n" +
                "					WHERE id = lv_currRefCustPackingSlipDetID AND isDeleted = 0 ;  \n" +
                "  \n" +
                "					SELECT uom INTO lv_uomIDOfAssy  \n" +
                "					FROM COMPONENT  \n" +
                "					WHERE id = lv_cpsd_partID ;  \n" +
                "  \n" +
                "					SELECT COUNT(1) INTO totUIShipAssyUMID FROM temp_UIShipAssyList_UMID ;  \n" +
                "					SET i=0;  \n" +
                "					WHILE i < totUIShipAssyUMID DO  \n" +
                "  \n" +
                "						SET lv_sa_refsidid = NULL;  \n" +
                "						SET lv_sa_umid = NULL;  \n" +
                "						SET lv_sa_shippedqty = 0;  \n" +
                "						SET lv_sa_partID = NULL;  \n" +
                "  \n" +
                "  \n" +
                "						SELECT refsidid, umid, shippedqty, partID  \n" +
                "							INTO lv_sa_refsidid , lv_sa_umid , lv_sa_shippedqty, lv_sa_partID  \n" +
                "						FROM temp_UIShipAssyList_UMID LIMIT i,1 ;  \n" +
                "  \n" +
                "  \n" +
                "						/* if change stock from UMID then check consume/adjustment UMID case */  \n" +
                "						CALL Sproc_CheckKitAndDeallocateUMIDForShipAssyFromPS(lv_sa_umid, lv_sa_refsidid,  \n" +
                "							0, lv_sa_shippedqty, pToBinIDOfEmptyBin, pTransTypeForUMID,  \n" +
                "							'', '', pActionPerformedForUMIDAdjust,  \n" +
                "							lv_cpsd_refSalesorderDetid, lv_sa_partID,lv_uomIDOfAssy, pUserID, pUserRoleID);  \n" +
                "  \n" +
                "  \n" +
                "						SET i = i + 1;  \n" +
                "					END WHILE;  \n" +
                "  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET j_cpd = j_cpd + 1;  \n" +
                "			END WHILE;  \n" +
                "			/* to  update header amount when details deleted*/  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_removeAmt ;  \n" +
                "			CREATE TEMPORARY TABLE temp_removeAmt  \n" +
                "			SELECT cpd.refCustPackingSlipID AS id , SUM(extendedPrice) AS removeAmt  \n" +
                "			FROM customer_packingslip_det cpd  \n" +
                "			WHERE FIND_IN_SET(cpd.id,pRefCustPackingSlipDetIDs)  \n" +
                "			AND cpd.isDeleted = 0  \n" +
                "			GROUP BY cpd.refCustPackingSlipID;  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update shippedassembly set isDeleted=1,deletedBy=',pUserID,', deleteByRoleId = ',pUserRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCustPackingSlipDetID IN(',pRefCustPackingSlipDetIDs,') and isDeleted=0');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customer_packingslip cp join temp_removeAmt tmp on tmp.id = cp.id set cp.totalAmount = cp.totalAmount - tmp.removeAmt where cp.id IN  ( select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.id in (',pRefCustPackingSlipDetIDs,') ) and cp.isDeleted=0');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customer_packingslip_det set isDeleted=1,deletedBy=',pUserID,', deleteByRoleId = ',pUserRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',pRefCustPackingSlipDetIDs,') and isDeleted=0');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customer_packingslip_det set isDeleted=1,deletedBy=',pUserID,', deleteByRoleId = ',pUserRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCustPackingSlipDetID IN(',pRefCustPackingSlipDetIDs,') and isDeleted=0');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SET @SQL2 = CONCAT('update salesorderdet sd set sd.salesOrderDetStatus = 1 , sd.completeStatusReason = \"\" where sd.id in ( select refSalesorderDetid from customer_packingslip_det where  id in (',pRefCustPackingSlipDetIDs,') ) and sd.isDeleted=0');  \n" +
                "			PREPARE stmt1 FROM @SQL2;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SELECT * FROM tempcustomerPackingslipdet WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "  \n" +
                "		-- COMMIT;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "  \n" +
                "		      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomerPackingslipdet t;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "			FROM tempcustomerPackingslipdet t1  \n" +
                "			INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "			WHERE IFNULL(t1.cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "			ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE tempcustomerPackingslipdet;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5626,'2.00','V1',' customer packing slip delete sps - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5626:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_CopyPartDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyPartDetail`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pToPartID INT,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsProgram tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vIsCPN tinyint;  \n" +
                "DECLARE vToPartIsCPN tinyint;  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vMessage varchar(200);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	/* Get From Part Detail For apply Validation */  \n" +
                "	select co.category, co.isCPN  \n" +
                "      into vFromPartCategory, vIsCPN  \n" +
                "	from component co  \n" +
                "	where co.id = pFromPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "    /* Get To Part Detail For apply Validation */  \n" +
                "    select co.isCPN  \n" +
                "      into  vToPartIsCPN  \n" +
                "	from component co  \n" +
                "	where co.id = pToPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "	IF pIsAttribute  then  \n" +
                "		UPDATE `component` toPart,  \n" +
                "		(select `id`,  \n" +
                "        /* Copy IsAttribute */  \n" +
                "        `functionalCategoryID`,`functionalCategoryText`,`mountingTypeID`,`mountingTypeText`,`operatingTemp`,`minOperatingTemp`,  \n" +
                "		`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,  \n" +
                "		`connectorTypeText`,`noOfPositionText`,`noOfPosition`,`noOfRowsText`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,  \n" +
                "		`length`,`width`,`heightText`,`height`,  \n" +
                "        /* Copy IsSetting */  \n" +
                "        `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,  \n" +
                "		`selfLifeDays`,`shelfLifeAcceptanceDays`,`shelfListDaysThresholdPercentage`,`maxShelfLifeAcceptanceDays`,`maxShelfListDaysThresholdPercentage`,  \n" +
                "		`shelfLifeDateType`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,  \n" +
                "        `programingRequired`,`functionalTestingRequired`,`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently`,  \n" +
                "        /* Copy Additional Attribute */  \n" +
                "        `tolerance`,`voltage`,`value`,`partPackage`,`powerRating`,`weight`,`feature`,`color`,`isEpoxyMount`,  \n" +
                "        /* Copy Packaging Detail */  \n" +
                "         `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`uomText`,`unit`,`pcbPerArray`,  \n" +
                "		`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ`,`isReceiveBulkItem`,  \n" +
                "        /* Copy Standard Detail */  \n" +
                "        `countryOfOrigin`,`htsCode`,  \n" +
                "  \n" +
                "		`requiredTestTime`,`mountingTypePartRequired`,`functionalTypePartRequired`  \n" +
                "  \n" +
                "        from component where id = pFromPartID) fromPart  \n" +
                "		SET  \n" +
                "		toPart.`functionalCategoryID` = (CASE WHEN pIsAttribute = 1 THEN fromPart.functionalCategoryID ELSE toPart.`functionalCategoryID` END),  \n" +
                "		toPart.`functionalCategoryText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.functionalCategoryText ELSE toPart.`functionalCategoryText` END),  \n" +
                "		toPart.`mountingTypeID` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.mountingTypeID ELSE toPart.`mountingTypeID` END),  \n" +
                "		toPart.`mountingTypeText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.mountingTypeText ELSE toPart.`mountingTypeText` END),  \n" +
                "		toPart.`operatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.operatingTemp ELSE toPart.`operatingTemp` END),  \n" +
                "		toPart.`minOperatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.minOperatingTemp ELSE toPart.`minOperatingTemp` END),  \n" +
                "		toPart.`maxOperatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.maxOperatingTemp ELSE toPart.`maxOperatingTemp` END),  \n" +
                "		toPart.`temperatureCoefficient` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficient ELSE toPart.`temperatureCoefficient` END),  \n" +
                "		toPart.`temperatureCoefficientValue` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficientValue ELSE toPart.`temperatureCoefficientValue` END),  \n" +
                "		toPart.`temperatureCoefficientUnit` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficientUnit ELSE toPart.`temperatureCoefficientUnit` END),  \n" +
                "		toPart.`connecterTypeID` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.connecterTypeID ELSE toPart.`connecterTypeID` END),  \n" +
                "		toPart.`connectorTypeText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.connectorTypeText ELSE toPart.`connectorTypeText` END),  \n" +
                "		toPart.`noOfPositionText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfPositionText ELSE toPart.`noOfPositionText` END),  \n" +
                "		toPart.`noOfPosition` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfPosition ELSE toPart.`noOfPosition` END),  \n" +
                "		toPart.`noOfRowsText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfRowsText ELSE toPart.`noOfRowsText` END),  \n" +
                "		toPart.`noOfRows` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfRows ELSE toPart.`noOfRows` END),  \n" +
                "		toPart.`pitch` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.pitch ELSE toPart.`pitch` END),  \n" +
                "		toPart.`pitchMating` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.pitchMating ELSE toPart.`pitchMating` END),  \n" +
                "		toPart.`sizeDimension` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.sizeDimension ELSE toPart.`sizeDimension` END),  \n" +
                "		toPart.`length` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.length ELSE toPart.`length` END),  \n" +
                "		toPart.`width` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.width ELSE toPart.`width` END),  \n" +
                "		toPart.`heightText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.heightText ELSE toPart.`heightText` END),  \n" +
                "		toPart.`height` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.height ELSE toPart.`height` END),  \n" +
                "        /* Copy IsSetting */  \n" +
                "        toPart.`scrapValuePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.scrapValuePerBuild ELSE toPart.`scrapValuePerBuild` END),  \n" +
                "		toPart.`scrapRatePercentagePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.scrapRatePercentagePerBuild ELSE toPart.`scrapRatePercentagePerBuild` END),  \n" +
                "		toPart.`plannedValuePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.plannedValuePerBuild ELSE toPart.`plannedValuePerBuild` END),  \n" +
                "		toPart.`plannedOverRunPercentagePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.plannedOverRunPercentagePerBuild ELSE toPart.`plannedOverRunPercentagePerBuild` END),  \n" +
                "		toPart.`selfLifeDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.selfLifeDays ELSE toPart.`selfLifeDays` END),  \n" +
                "		toPart.`shelfLifeAcceptanceDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.shelfLifeAcceptanceDays ELSE toPart.`shelfLifeAcceptanceDays` END),  \n" +
                "		toPart.`shelfListDaysThresholdPercentage` =(CASE WHEN pIsSettings = 1 THEN fromPart.shelfListDaysThresholdPercentage ELSE toPart.`shelfListDaysThresholdPercentage` END),  \n" +
                "        toPart.`maxShelfLifeAcceptanceDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxShelfLifeAcceptanceDays ELSE toPart.`maxShelfLifeAcceptanceDays` END),  \n" +
                "		toPart.`maxShelfListDaysThresholdPercentage` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxShelfListDaysThresholdPercentage ELSE toPart.`maxShelfListDaysThresholdPercentage` END),  \n" +
                "        toPart.`shelfLifeDateType` = (CASE WHEN pIsSettings = 1 THEN fromPart.shelfLifeDateType ELSE toPart.`shelfLifeDateType` END),  \n" +
                "		toPart.`maxPriceLimit` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxPriceLimit ELSE toPart.`maxPriceLimit` END),  \n" +
                "		toPart.`maxQtyonHand` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxQtyonHand ELSE toPart.`maxQtyonHand` END),  \n" +
                "		toPart.`saftyStock` = (CASE WHEN pIsSettings = 1 THEN fromPart.saftyStock ELSE toPart.`saftyStock` END),  \n" +
                "		toPart.`eau` = (CASE WHEN pIsSettings = 1 THEN fromPart.eau ELSE toPart.`eau` END),  \n" +
                "		toPart.`businessRisk` = (CASE WHEN pIsSettings = 1 THEN fromPart.businessRisk ELSE toPart.`businessRisk` END),  \n" +
                "		toPart.`programingRequired` = (CASE WHEN pIsSettings = 1 THEN fromPart.programingRequired ELSE toPart.`programingRequired` END),  \n" +
                "		toPart.`restrictUSEwithpermission` = (CASE WHEN pIsSettings = 1 THEN fromPart.restrictUSEwithpermission ELSE toPart.`restrictUSEwithpermission` END),  \n" +
                "		toPart.`bomLock` = (CASE WHEN pIsSettings = 1 THEN fromPart.bomLock ELSE toPart.`bomLock` END),  \n" +
                "		toPart.`restrictUsePermanently` = (CASE WHEN pIsSettings = 1 THEN fromPart.restrictUsePermanently ELSE toPart.`restrictUsePermanently` END),  \n" +
                "        /* Copy Additional Attribute */  \n" +
                "        toPart.`tolerance` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.tolerance ELSE toPart.`tolerance` END),  \n" +
                "		toPart.`voltage` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.voltage ELSE toPart.`voltage` END),  \n" +
                "		toPart.`value` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.value ELSE toPart.`value` END),  \n" +
                "		toPart.`partPackage` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.partPackage ELSE toPart.`partPackage` END),  \n" +
                "		toPart.`powerRating` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.powerRating ELSE toPart.`powerRating` END),  \n" +
                "		toPart.`weight` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.weight ELSE toPart.`weight` END),  \n" +
                "		toPart.`feature` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.feature ELSE toPart.`feature` END),  \n" +
                "		toPart.`isEpoxyMount` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.isEpoxyMount ELSE toPart.`isEpoxyMount` END),  \n" +
                "		toPart.`color` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.color ELSE toPart.`color` END),  \n" +
                "        /* Copy Packaging Detail */  \n" +
                "        toPart.`deviceMarking` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.deviceMarking ELSE toPart.`deviceMarking` END),  \n" +
                "		toPart.`packagingID` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingID ELSE toPart.`packagingID` END),  \n" +
                "		toPart.`minimum` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.minimum ELSE toPart.`minimum` END),  \n" +
                "		toPart.`mult` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.mult ELSE toPart.`mult` END),  \n" +
                "		toPart.`packageQty` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packageQty ELSE toPart.`packageQty` END),  \n" +
                "        toPart.`umidSPQ` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.umidSPQ ELSE toPart.`umidSPQ` END),  \n" +
                "		toPart.`uomClassID` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.uomClassID ELSE toPart.`uomClassID` END),  \n" +
                "		toPart.`uom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.uom ELSE toPart.`uom` END),  \n" +
                "		toPart.`uomText` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.uomText ELSE toPart.`uomText` END),  \n" +
                "		toPart.`unit` =(CASE WHEN pIsPackagingDetail = 1 THEN fromPart.unit ELSE toPart.`unit` END),  \n" +
                "		toPart.`pcbPerArray` =(CASE WHEN pIsPackagingDetail = 1 THEN fromPart.pcbPerArray ELSE toPart.`pcbPerArray` END),  \n" +
                "		toPart.`grossWeight` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.grossWeight ELSE toPart.`grossWeight` END),  \n" +
                "		toPart.`grossWeightUom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.grossWeightUom ELSE toPart.`grossWeightUom` END),  \n" +
                "		toPart.`packagingWeight` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingWeight ELSE toPart.`packagingWeight` END),  \n" +
                "		toPart.`packagingWeightUom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingWeightUom ELSE toPart.`packagingWeightUom` END),  \n" +
                "        toPart.`isReceiveBulkItem` =  (CASE WHEN pIsPackagingDetail = 1 THEN ((CASE WHEN toPart.partType = 4 THEN fromPart.isReceiveBulkItem ELSE FALSE END))  \n" +
                "        ELSE toPart.`isReceiveBulkItem` END),  \n" +
                "		/* Copy Standard Detail */  \n" +
                "		toPart.`countryOfOrigin` = (CASE WHEN pIsStandards = 1 THEN fromPart.countryOfOrigin ELSE toPart.`countryOfOrigin` END),  \n" +
                "		toPart.`htsCode` = (CASE WHEN pIsStandards = 1 THEN fromPart.packagingWeightUom ELSE toPart.`htsCode` END),  \n" +
                "  \n" +
                "		toPart.`requiredTestTime` = (CASE WHEN (pIsFunctionalTesingTool = 1 and vToPartIsCPN = 0) THEN fromPart.requiredTestTime ELSE toPart.`requiredTestTime` END),  \n" +
                "        toPart.`mountingTypePartRequired`= (CASE WHEN (pIsRequiredMountingType = 1  and vToPartIsCPN = 0) THEN fromPart.mountingTypePartRequired ELSE  toPart.`mountingTypePartRequired` END),  \n" +
                "        toPart.`functionalTypePartRequired` = (CASE WHEN (pIsRequiredFunctionalType = 1  and vToPartIsCPN = 0) THEN fromPart.functionalTypePartRequired ELSE toPart.`functionalTypePartRequired` END),  \n" +
                "        toPart.`driverToolRequired`= (CASE WHEN (pIsDriveTool = 1 and vToPartIsCPN = 0  and vToPartIsCPN = 0) THEN fromPart.driverToolRequired ELSE toPart.`driverToolRequired` END),  \n" +
                "        toPart.`matingPartRquired` = (CASE WHEN (pIsRequiredMattingParts = 1  and vToPartIsCPN = 0  and vToPartIsCPN = 0) THEN fromPart.matingPartRquired ELSE toPart.`matingPartRquired` END),  \n" +
                "        toPart.`pickupPadRequired` = (CASE WHEN (pIsPickupPad = 1  and vToPartIsCPN = 0  and vToPartIsCPN = 0) THEN fromPart.pickupPadRequired ELSE toPart.`pickupPadRequired` END),  \n" +
                "        toPart.`functionalTestingRequired`= (CASE WHEN (pIsFunctionalTesingTool = 1  and vToPartIsCPN = 0) THEN fromPart.functionalTestingRequired ELSE toPart.`functionalTestingRequired` END),  \n" +
                "  \n" +
                "		toPart.`updatedBy` = pUserID,  \n" +
                "		toPart.`updatedAt` = current_timestamp()  \n" +
                "		WHERE toPart.`id` = pToPartID;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vMessage = '';  \n" +
                "			CALL Sproc_CopyPartDetailOnCopyAndDuplicatePart(pFromPartID,pToPartID,pUserID,vIsCPN,vToPartIsCPN,vFromPartCategory,pIsStandards,pIsRequiredFunctionalType,pIsRequiredMountingType,pIsPackagingAliasPart,pIsOtherPartName  \n" +
                "				,pIsAlternatePart,pIsRoHSReplacementPart,pIsDriveTool,pIsProcessMaterial,pIsRequiredMattingParts,pIsPickupPad,pIsFunctionalTesingTool,pIsFinctionalRestingEquipment, vMisMatchFields, vMessage);  \n" +
                "  \n" +
                "	IF(vMessage != '')  \n" +
                "	THEN  \n" +
                "		select vMessage as message,vMisMatchFields as misMatchFields;  \n" +
                "	ELSE  \n" +
                "		select * from component where id = pToPartID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5627,'2.00','V1',' Bug 38954: Code Refactor: [Main Branch] Need to restrict users to add Packaging Alias for Assembly/Sales kit at part master - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5627:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "drop procedure if exists `Sproc_checkDelete_supplier_invoice_and_memo`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_supplier_invoice_and_memo`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMemoIds varchar(1000);  \n" +
                "    DECLARE vLineIds varchar(1000);  \n" +
                "    DECLARE vCount int;  \n" +
                "    DECLARE vCountLock int;  \n" +
                "    DECLARE vCountHalt int;  \n" +
                "  \n" +
                "    DROP temporary table if exists tempPackingSlipMst;  \n" +
                "    CREATE TEMPORARY TABLE tempPackingSlipMst(  \n" +
                "		cnt int,  \n" +
                "        msg varchar(500)  \n" +
                "    );  \n" +
                "  \n" +
                "	/*getting credit/debit memo ids from selected rows*/  \n" +
                "	select GROUP_CONCAT(a.id), count(1), sum(case when a.lockstatus = 'LC' then 1 else 0 end)  \n" +
                "      into vMemoIds, vCount, vCountLock  \n" +
                "	  from packing_slip_material_receive a  \n" +
                "	 where find_in_set(a.id, IDs)  \n" +
                "	   and a.receiptType in ('C','D');  \n" +
                "  \n" +
                "	select count(1) into vCountHalt  \n" +
                "	 from holdunholdtrans a  \n" +
                "	where status = 'H'  \n" +
                "	  and find_in_set(a.refTransId, IDs)  \n" +
                "	  and refType in ('SINV','SCM','SDM');  \n" +
                "  \n" +
                "	if vCountLock = 0 and vCountHalt = 0 then  \n" +
                "		/*deleting credit/debit memo before deleting invoice*/  \n" +
                "		if vCount > 0 then  \n" +
                "			CALL Sproc_checkDelete_packing_slip_material_receive_memo('packing_slip_material_receive_memo', vMemoIds, deletedBy, entityID, refrenceIDs, pRoleID);  \n" +
                "		end if;  \n" +
                "	else  \n" +
                "		if vCountLock != 0 then  \n" +
                "			insert into tempPackingSlipMst(cnt, msg)  \n" +
                "			values (vCountLock, 'TRANSACTION_LOCKED');  \n" +
                "		elseif vCountHalt != 0 then  \n" +
                "			insert into tempPackingSlipMst(cnt, msg)  \n" +
                "			values (vCountHalt, 'TRANSACTION_HALTED');  \n" +
                "        end if;  \n" +
                "	end if;  \n" +
                "	/*checking credit/debit memo created from selected invoices*/  \n" +
                "	select count(1) into vCount  \n" +
                "	  from packing_slip_material_receive_det a  \n" +
                "	 where a.isdeleted = 0  \n" +
                "	 and a.refPackingSlipDetId is not null  \n" +
                "	 and exists (select 1 from packing_slip_material_receive p where p.id = a.refPackingSlipMaterialRecID and p.receiptType in ('C','D') and p.isDeleted=0)  \n" +
                "	 and exists (select 1  \n" +
                "				  from packing_slip_material_receive_det d  \n" +
                "				 where d.id = a.refPackingSlipDetId  \n" +
                "				   and exists (select 1 from packing_slip_material_receive p  \n" +
                "								where p.id = d.refPackingSlipMaterialRecID  \n" +
                "								  and p.receiptType = 'I'  \n" +
                "								  and find_in_set(p.id, IDs)  \n" +
                "								  and p.isDeleted = 0)  \n" +
                "				   and d.isDeleted = 0);  \n" +
                "  \n" +
                "    if vCount = 0 then  \n" +
                "		/*get detail line ids to delete lines first*/  \n" +
                "		select GROUP_CONCAT(a.id) into vLineIds  \n" +
                "		  from packing_slip_material_receive_det a  \n" +
                "		 where a.isdeleted = 0  \n" +
                "		   and find_in_set(a.refPackingSlipMaterialRecID, IDs);  \n" +
                "		if vLineIds is not null and vLineIds != '' then  \n" +
                "			CALL Sproc_checkDelete_packing_slip_material_receive_det('packing_slip_material_receive_det', vLineIds, deletedBy, entityID, refrenceIDs, pRoleID);  \n" +
                "        end if;  \n" +
                "	else  \n" +
                "		insert into tempPackingSlipMst(cnt, msg)  \n" +
                "        values (vCount, 'CM_DM_CREATED');  \n" +
                "    end if;  \n" +
                "	IF(countList = FALSE) THEN  \n" +
                "		IF (SELECT ifnull(SUM(t.cnt),0) FROM tempPackingSlipMst t)=0 THEN  \n" +
                "			SET @SQl1 = CONCAT('update packing_slip_material_receive set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where ID in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update packing_slip_material_receive set `status` = \"W\", refPackingSlipNumberForInvoice = NULL where refPackingSlipNumberForInvoice in(',IDs,') and isDeleted = 0');  \n" +
                "			PREPARE stmt2 FROM @SQL2;  \n" +
                "			EXECUTE stmt2;  \n" +
                "  \n" +
                "			/*SELECT * FROM tempPackingSlipMst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";*/  \n" +
                "            select 0 cnt, null msg, 0 TotalCount;  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempPackingSlipMst t/* having SUM(t.cnt) > 0*/;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT 		t1.cnt, t1.cnt as TotalCount,  \n" +
                "					ifnull(t2.display_page_name,t1.msg) AS msg,  \n" +
                "                    ifnull(t2.display_page_name,t1.msg) as Message  \n" +
                "		FROM 		tempPackingSlipMst t1  \n" +
                "		left JOIN 	table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "		WHERE 		IFNULL(cnt,0) > 0  \n" +
                "					AND msg IS NOT NULL  \n" +
                "					AND msg != \"\"  \n" +
                "		ORDER BY 	t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP temporary table if exists tempPackingSlipMst;  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_SaveInvoiceAndInvoiceLineDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_SaveInvoiceAndInvoiceLineDetail`(  \n" +
                "	IN pInvoiceDetail JSON,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pSystemId VARCHAR(20),  \n" +
                "	IN pUserId VARCHAR(50),  \n" +
                "	IN pUserRoleId VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountOfInvoiceDetail INT;  \n" +
                "	DECLARE v_CountOfInvoiceLineDetail INT;  \n" +
                "    DECLARE v_CountOfRMA INT;  \n" +
                "	DECLARE v_IdOfInvoice INT;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Detail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Invoice_Detail AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pInvoiceDetail,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				poNumber VARCHAR(50) PATH \"$.poNumber\",  \n" +
                "				poDate DATE PATH \"$.poDate\",  \n" +
                "				mfgCodeID INT PATH \"$.mfgCodeID\",  \n" +
                "				supplierSONumber VARCHAR(50) PATH \"$.supplierSONumber\",  \n" +
                "                soDate DATE PATH \"$.soDate\",  \n" +
                "				packingSlipNumber VARCHAR(50) PATH \"$.packingSlipNumber\",  \n" +
                "				packingSlipDate DATE PATH \"$.packingSlipDate\",  \n" +
                "				invoiceNumber VARCHAR(50) PATH \"$.invoiceNumber\",  \n" +
                "				invoiceDate DATE PATH \"$.invoiceDate\",  \n" +
                "				creditMemoNumber VARCHAR(50) PATH \"$.creditMemoNumber\",  \n" +
                "				creditMemoDate DATE PATH \"$.creditMemoDate\",  \n" +
                "				debitMemoNumber VARCHAR(50) PATH \"$.debitMemoNumber\",  \n" +
                "				debitMemoDate DATE PATH \"$.debitMemoDate\",  \n" +
                "				receiptDate DATE PATH \"$.receiptDate\",  \n" +
                "				receiptType VARCHAR(1) PATH \"$.receiptType\",  \n" +
                "				`status` VARCHAR(5) PATH \"$.status\",  \n" +
                "				applyDate DATE PATH \"$.applyDate\",  \n" +
                "				invoiceTotalDue DECIMAL(18,8) PATH \"$.invoiceTotalDue\",  \n" +
                "				isTariffInvoice TINYINT PATH \"$.isTariffInvoice\",  \n" +
                "				refPackingSlipId INT PATH \"$.refPackingSlipId\",  \n" +
                "				paymentTermsID INT PATH \"$.paymentTermsID\",  \n" +
                "				termsDays INT PATH \"$.termsDays\",  \n" +
                "				creditMemoType VARCHAR(5) PATH \"$.creditMemoType\",  \n" +
                "                invoiceRequireManagementApproval INT PATH \"$.invoiceRequireManagementApproval\",  \n" +
                "                internalRemark  VARCHAR(1000) PATH \"$.internalRemark\",  \n" +
                "                remark  VARCHAR(1000) PATH \"$.remark\",  \n" +
                "                refSupplierCreditMemoNumber  VARCHAR(50) PATH \"$.refSupplierCreditMemoNumber\",  \n" +
                "                refPurchaseOrderID INT PATH \"$.refPurchaseOrderID\"  \n" +
                "			)  \n" +
                "		) AS Invoice_Detail_JT;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Line_Detail;  \n" +
                "		CREATE TEMPORARY TABLE temp_Invoice_Line_Detail  \n" +
                "		(  \n" +
                "			packingSlipSerialNumber VARCHAR(50),  \n" +
                "			nickname VARCHAR(50),  \n" +
                "			partID INT,  \n" +
                "			refSupplierPartId INT,  \n" +
                "			scanLabel VARCHAR(1000),  \n" +
                "			receivedQty DECIMAL(18,8),  \n" +
                "			packingSlipQty DECIMAL(18,8),  \n" +
                "			binID INT,  \n" +
                "			warehouseID INT,  \n" +
                "			parentWarehouseID INT,  \n" +
                "			invoicePrice DECIMAL(18,8),  \n" +
                "			purchasePrice DECIMAL(18,8),  \n" +
                "			disputedPrice DECIMAL(18,8),  \n" +
                "			approveNote VARCHAR(1000),  \n" +
                "			otherCharges INT,  \n" +
                "			`status` VARCHAR(1),  \n" +
                "			extendedPrice DECIMAL(18,8),  \n" +
                "			refCreditDebitInvoiceNo INT,  \n" +
                "			difference DECIMAL(18,8),  \n" +
                "			umidCreated TINYINT,  \n" +
                "			poReleaseNumber VARCHAR(1000),  \n" +
                "			packagingID INT,  \n" +
                "			receivedStatus VARCHAR(2),  \n" +
                "			remark LONGTEXT  \n" +
                "		);  \n" +
                "  \n" +
                "		INSERT INTO temp_Invoice_Line_Detail (  \n" +
                "			packingSlipSerialNumber,  \n" +
                "			nickname,  \n" +
                "			partID,  \n" +
                "			refSupplierPartId,  \n" +
                "			scanLabel,  \n" +
                "			receivedQty,  \n" +
                "			packingSlipQty,  \n" +
                "			binID,  \n" +
                "			warehouseID,  \n" +
                "			parentWarehouseID,  \n" +
                "			invoicePrice,  \n" +
                "			disputedPrice,  \n" +
                "			approveNote,  \n" +
                "			otherCharges,  \n" +
                "			`status`,  \n" +
                "			extendedPrice,  \n" +
                "			refCreditDebitInvoiceNo,  \n" +
                "			difference,  \n" +
                "			umidCreated,  \n" +
                "			poReleaseNumber,  \n" +
                "			packagingID,  \n" +
                "			receivedStatus,  \n" +
                "			remark  \n" +
                "		)  \n" +
                "		SELECT  packingSlipSerialNumber,  \n" +
                "			nickname,  \n" +
                "			partID,  \n" +
                "			refSupplierPartId,  \n" +
                "			scanLabel,  \n" +
                "			receivedQty,  \n" +
                "			packingSlipQty,  \n" +
                "			binID,  \n" +
                "			warehouseID,  \n" +
                "			parentWarehouseID,  \n" +
                "			invoicePrice,  \n" +
                "			disputedPrice,  \n" +
                "			approveNote,  \n" +
                "			otherCharges,  \n" +
                "			`status`,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN (packingSlipQty IS NOT NULL AND invoicePrice IS NOT NULL) THEN  \n" +
                "						(packingSlipQty * invoicePrice)  \n" +
                "					ELSE  \n" +
                "						NULL  \n" +
                "				END  \n" +
                "			),  \n" +
                "			refCreditDebitInvoiceNo,  \n" +
                "			difference,  \n" +
                "			umidCreated,  \n" +
                "			poReleaseNumber,  \n" +
                "			packagingID,  \n" +
                "			receivedStatus,  \n" +
                "			remark  \n" +
                "		FROM 	packing_slip_material_receive_det  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "				AND refPackingSlipMaterialRecID = pPackingSlipId;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_CountOfInvoiceDetail FROM temp_Invoice_Detail;  \n" +
                "  \n" +
                "			IF (v_CountOfInvoiceDetail > 0) THEN  \n" +
                "				INSERT INTO packing_slip_material_receive (systemId, poNumber, poDate, mfgCodeID, supplierSONumber, soDate, packingSlipNumber, packingSlipDate, invoiceNumber, invoiceDate,  \n" +
                "							creditMemoNumber, creditMemoDate, debitMemoNumber, debitMemoDate, receiptDate, receiptType, `status`, applyDate, invoiceTotalDue, isTariffInvoice,  \n" +
                "							creditMemoType, createdBy, updatedBy, createByRoleId, updateByRoleId, paymentTermsID,termsDays, invoiceRequireManagementApproval,  \n" +
                "                            internalRemark, remark, invoiceApprovalStatus, refSupplierCreditMemoNumber, refPurchaseOrderID)  \n" +
                "				SELECT 	pSystemId,  \n" +
                "					(CASE WHEN (poNumber IS NULL OR poNumber = \"\") THEN NULL ELSE poNumber END),  \n" +
                "					(CASE WHEN (poDate IS NULL OR poDate = \"0000-00-00\") THEN NULL ELSE poDate END),  \n" +
                "					mfgCodeID,  \n" +
                "					(CASE WHEN (supplierSONumber IS NULL OR supplierSONumber = \"\") THEN NULL ELSE supplierSONumber END),  \n" +
                "                    (CASE WHEN (soDate IS NULL OR soDate = \"0000-00-00\") THEN NULL ELSE soDate END),  \n" +
                "					packingSlipNumber, packingSlipDate,  \n" +
                "					(CASE WHEN (invoiceNumber IS NULL OR invoiceNumber = \"\") THEN NULL ELSE invoiceNumber END),  \n" +
                "					(CASE WHEN (invoiceDate IS NULL OR invoiceDate = \"0000-00-00\") THEN NULL ELSE invoiceDate END),  \n" +
                "					(CASE WHEN (creditMemoNumber IS NULL OR creditMemoNumber = \"\") THEN NULL ELSE creditMemoNumber END),  \n" +
                "					(CASE WHEN (creditMemoDate IS NULL OR creditMemoDate = \"0000-00-00\") THEN NULL ELSE creditMemoDate END),  \n" +
                "					(CASE WHEN (debitMemoNumber IS NULL OR debitMemoNumber = \"\") THEN NULL ELSE debitMemoNumber END),  \n" +
                "					(CASE WHEN (debitMemoDate IS NULL OR debitMemoDate = \"0000-00-00\") THEN NULL ELSE debitMemoDate END),  \n" +
                "					receiptDate, receiptType,  \n" +
                "					`status`, -- (case when invoiceRequireManagementApproval = 0 then `status` else 'I' end), /*status*/  \n" +
                "					applyDate, invoiceTotalDue, isTariffInvoice,  \n" +
                "					(CASE WHEN creditMemoType IS NULL OR creditMemoType = \"\" THEN NULL ELSE creditMemoType END),  \n" +
                "					pUserId, pUserId, pUserRoleId, pUserRoleId, paymentTermsID, termsDays, invoiceRequireManagementApproval,  \n" +
                "                    internalRemark,  \n" +
                "                    remark,  \n" +
                "					(CASE WHEN invoiceRequireManagementApproval = 0 THEN 3 ELSE 2 END) /*invoiceApprovalStatus*/,  \n" +
                "                    (CASE WHEN (refSupplierCreditMemoNumber IS NULL OR refSupplierCreditMemoNumber = \"\") THEN NULL ELSE refSupplierCreditMemoNumber END) /*refSupplierCreditMemoNumber*/,  \n" +
                "                    (CASE WHEN (refPurchaseOrderID IS NULL OR refPurchaseOrderID = 0) THEN NULL ELSE refPurchaseOrderID END)  \n" +
                "				FROM 	temp_Invoice_Detail;  \n" +
                "  \n" +
                "				SELECT LAST_INSERT_ID() INTO v_IdOfInvoice;  \n" +
                "  \n" +
                "				UPDATE 	packing_slip_material_receive  \n" +
                "				SET 	refPackingSlipNumberForInvoice = v_IdOfInvoice,  \n" +
                "					`status` = (CASE WHEN receiptType = 'P' THEN 'IR' WHEN receiptType = 'R' THEN 'CR' ELSE NULL END)  \n" +
                "				WHERE	id = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1)  \n" +
                "						AND isDeleted = 0;  \n" +
                "  \n" +
                "				select count(1) into v_CountOfRMA  \n" +
                "                  from packing_slip_material_receive_det d  \n" +
                "				 where exists (select 1 from packing_slip_material_receive p where p.id = d.refPackingSlipMaterialRecID and p.receiptType = 'R' and p.isDeleted = 0)  \n" +
                "					and d.refPackingSlipIdForRma = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1) /*packing slip id*/  \n" +
                "                    and d.isDeleted = 0  \n" +
                "					and d.refPackingSlipForRma is null/*manual packing slip*/  \n" +
                "					and d.refInvoiceIdForRma is null /* invoice id */;  \n" +
                "                 IF v_CountOfRMA != 0 THEN  \n" +
                "					/*update invoice id in RMA packing slip which is created before creating invoice*/  \n" +
                "                    update packing_slip_material_receive_det d  \n" +
                "						set d.refInvoiceIdForRma = v_IdOfInvoice  \n" +
                "					 where exists (select 1 from packing_slip_material_receive p where p.id = d.refPackingSlipMaterialRecID and p.receiptType = 'R' and p.isDeleted = 0)  \n" +
                "						and d.refPackingSlipIdForRma = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1) /*packing slip id*/  \n" +
                "						and d.isDeleted = 0  \n" +
                "						and d.refPackingSlipForRma is null/*manual packing slip*/  \n" +
                "						and d.refInvoiceIdForRma is null /* invoice id */;  \n" +
                "				 END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_CountOfInvoiceLineDetail FROM temp_Invoice_Line_Detail;  \n" +
                "			IF (v_CountOfInvoiceLineDetail > 0) THEN  \n" +
                "				INSERT INTO packing_slip_material_receive_det (refPackingSlipMaterialRecID, packingSlipSerialNumber, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, purchasePrice, disputedPrice, otherCharges, `status`, extendedPrice, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, createdBy, updatedBy, createByRoleId, updateByRoleId)  \n" +
                "				SELECT 	v_IdOfInvoice, packingSlipSerialNumber,  \n" +
                "					nickname,  \n" +
                "					(CASE WHEN ( partID > 0) THEN  partID ELSE NULL END),  \n" +
                "					(CASE WHEN ( refSupplierPartId > 0) THEN  refSupplierPartId ELSE NULL END),  \n" +
                "					scanLabel,  \n" +
                "					receivedQty,  \n" +
                "					packingSlipQty,  \n" +
                "					(CASE WHEN ( binID > 0) THEN  binID ELSE NULL END),  \n" +
                "					(CASE WHEN ( warehouseID > 0) THEN  warehouseID ELSE NULL END),  \n" +
                "					(CASE WHEN ( parentWarehouseID < 0) THEN  parentWarehouseID ELSE NULL END),  \n" +
                "					invoicePrice,  \n" +
                "					purchasePrice,  \n" +
                "					disputedPrice,  \n" +
                "					otherCharges,  \n" +
                "					`status`,  \n" +
                "					extendedPrice,  \n" +
                "					(CASE WHEN ( refCreditDebitInvoiceNo > 0) THEN  refCreditDebitInvoiceNo ELSE NULL END),  \n" +
                "					difference,  \n" +
                "					umidCreated,  \n" +
                "					poReleaseNumber,  \n" +
                "					(CASE WHEN ( packagingID > 0) THEN  packagingID ELSE NULL END),  \n" +
                "					receivedStatus,  \n" +
                "					remark,  \n" +
                "					pUserId,  \n" +
                "					pUserId,  \n" +
                "					pUserRoleId,  \n" +
                "					pUserRoleId  \n" +
                "				FROM 	temp_Invoice_Line_Detail;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "	SELECT v_IdOfInvoice AS PackingSlipId;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5628,'2.00','V1','Bug 39212, 39246, 39270 - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5628:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "drop procedure if exists `Sproc_CheckAndReGetPackingSlipLineDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_CheckAndReGetPackingSlipLineDetail`(  \n" +
                "	IN pInvoiceId INT,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pAction VARCHAR(50),  \n" +
                "	IN pUserId VARCHAR(50),  \n" +
                "	IN pUserRoleId VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_InsertCount INT;  \n" +
                "	DECLARE v_DeleteCount INT;  \n" +
                "	DECLARE v_UpdateCount INT;  \n" +
                "	DECLARE v_TotalDetailCount INT;  \n" +
                "	DECLARE v_PendingCount INT;  \n" +
                "	DECLARE v_DisapproveCount INT;  \n" +
                "	DECLARE v_ApproveCount INT;  \n" +
                "	DECLARE v_DetailLineStatus VARCHAR(5);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_ReGet_Validation_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_ReGet_Validation_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		NoOfLineInsert INT,  \n" +
                "		NoOfLineDelete INT,  \n" +
                "		NoOfLineUpdate INT  \n" +
                "	);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Insert_Packing_Slip_Record;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Insert_Packing_Slip_Record AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	packing_slip_material_receive_det  \n" +
                "	WHERE 	refPackingSlipMaterialRecID = pPackingSlipId  \n" +
                "			AND deletedAt IS NULL  \n" +
                "			AND packingSlipSerialNumber < 1000  \n" +
                "			AND packingSlipSerialNumber NOT IN (  \n" +
                "				SELECT 	packingSlipSerialNumber  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE 	refPackingSlipMaterialRecID = pInvoiceId  \n" +
                "						AND packingSlipSerialNumber < 1000  \n" +
                "						AND deletedAt IS NULL  \n" +
                "			);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Delete_Packing_Slip_Record;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Delete_Packing_Slip_Record AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	packing_slip_material_receive_det  \n" +
                "	WHERE 	refPackingSlipMaterialRecID = pInvoiceId  \n" +
                "			AND deletedAt IS NULL  \n" +
                "			AND packingSlipSerialNumber < 1000  \n" +
                "			AND packingSlipSerialNumber NOT IN (  \n" +
                "				SELECT 	packingSlipSerialNumber  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE 	refPackingSlipMaterialRecID = pPackingSlipId  \n" +
                "						AND packingSlipSerialNumber < 1000  \n" +
                "						AND deletedAt IS NULL  \n" +
                "			);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Update_Packing_Slip_Record;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Update_Packing_Slip_Record AS  \n" +
                "	SELECT 		ps.id packingSlipId,  \n" +
                "			si.id invoiceId,  \n" +
                "			ps.packingSlipSerialNumber,  \n" +
                "			si.packingSlipSerialNumber invoicePackingSlipSerialNumber,  \n" +
                "			si.orderedQty,  \n" +
                "			si.orderedQty invoiceOrderedQty,  \n" +
                "			ps.receivedQty,  \n" +
                "			si.receivedQty invoiceReceivedQty,  \n" +
                "			ps.packingSlipQty,  \n" +
                "			si.packingSlipQty invoicePackingSlipQty,  \n" +
                "			si.invoicePrice,  \n" +
                "			ps.packagingID,  \n" +
                "			si.packagingID invoicePackagingID,  \n" +
                "			ps.nickname,  \n" +
                "			si.nickname invoiceNickname,  \n" +
                "			ps.receivedStatus,  \n" +
                "			si.receivedStatus invoiceReceivedStatus,  \n" +
                "			ps.remark,  \n" +
                "			si.remark invoiceRemark,  \n" +
                "			(CASE WHEN ps.packingSlipSerialNumber != si.packingSlipSerialNumber THEN 1 ELSE 0 END) isSerialNumberUpdate,  \n" +
                "			(CASE WHEN ps.orderedQty != si.orderedQty THEN 1 ELSE 0 END) isOrderedQtyUpdate,  \n" +
                "			(CASE WHEN ps.receivedQty != si.receivedQty THEN 1 ELSE 0 END) isReceivedQtyUpdate,  \n" +
                "			(CASE WHEN ps.packingSlipQty != si.packingSlipQty THEN 1 ELSE 0 END) isPackingSlipQtyUpdate,  \n" +
                "			(CASE WHEN ps.packagingID != si.packagingID THEN 1 ELSE 0 END) isPackagingIDUpdate,  \n" +
                "			(CASE WHEN ps.nickname != si.nickname THEN 1 ELSE 0 END) isNicknameUpdate,  \n" +
                "			(CASE WHEN ps.receivedStatus != si.receivedStatus THEN 1 ELSE 0 END) isReceivedStatusUpdate,  \n" +
                "			(CASE WHEN ps.remark != si.remark THEN 1 ELSE 0 END) isRemarkUpdate  \n" +
                "	FROM 		packing_slip_material_receive_det ps  \n" +
                "	INNER JOIN 	packing_slip_material_receive_det si ON si.packingSlipSerialNumber = ps.packingSlipSerialNumber AND si.deletedAt IS NULL AND si.packingSlipSerialNumber < 1000  \n" +
                "	WHERE 		ps.refPackingSlipMaterialRecID = pPackingSlipId AND si.refPackingSlipMaterialRecID = pInvoiceId  \n" +
                "				AND ps.deletedAt IS NULL;  \n" +
                "  \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_InsertCount FROM temp_Insert_Packing_Slip_Record;  \n" +
                "	SELECT 	COUNT(1) INTO v_DeleteCount FROM temp_Delete_Packing_Slip_Record;  \n" +
                "  \n" +
                "	IF ((SELECT receiptType FROM packing_slip_material_receive WHERE id = pPackingSlipId AND isDeleted = 0) = 'R') THEN  \n" +
                "		SET v_UpdateCount = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT 	COUNT(1) INTO v_UpdateCount  \n" +
                "		FROM 	temp_Update_Packing_Slip_Record  \n" +
                "		WHERE 	(  \n" +
                "				isSerialNumberUpdate = 1 OR  \n" +
                "				isOrderedQtyUpdate = 1 OR  \n" +
                "				isReceivedQtyUpdate = 1 OR  \n" +
                "				isPackingSlipQtyUpdate = 1 OR  \n" +
                "				isPackagingIDUpdate = 1 OR  \n" +
                "				isNicknameUpdate = 1 OR  \n" +
                "				isReceivedStatusUpdate = 1 OR  \n" +
                "				isRemarkUpdate = 1  \n" +
                "			);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(v_InsertCount, 0) = 0 AND IFNULL(v_DeleteCount, 0) = 0 AND IFNULL(v_UpdateCount, 0) = 0) THEN  \n" +
                "		INSERT INTO temp_ReGet_Validation_Error (IsSuccess, NoOfLineInsert, NoOfLineDelete, NoOfLineUpdate) VALUES(TRUE, 0, 0, 0);  \n" +
                "	ELSE  \n" +
                "		IF (pAction = 'GetNotification') THEN  \n" +
                "			INSERT INTO temp_ReGet_Validation_Error (IsSuccess, NoOfLineInsert, NoOfLineDelete, NoOfLineUpdate) VALUES(FALSE, v_InsertCount, v_DeleteCount, v_UpdateCount);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(v_InsertCount, 0) > 0) THEN  \n" +
                "		IF (pAction = 'ReGet') THEN  \n" +
                "			INSERT INTO packing_slip_material_receive_det (refPackingSlipMaterialRecID, packingSlipSerialNumber, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, disputedPrice, otherCharges, extendedPrice, `status`, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, createdBy, updatedBy, createByRoleId, updateByRoleId)  \n" +
                "			SELECT 	pInvoiceId, packingSlipSerialNumber, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, disputedPrice, otherCharges,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN invoicePrice IS NOT NULL AND packingSlipQty IS NOT NULL THEN  \n" +
                "							invoicePrice * packingSlipQty  \n" +
                "						ELSE NULL  \n" +
                "					END  \n" +
                "				),  \n" +
                "				`status`, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, pUserId, pUserId, pUserRoleId, pUserRoleId  \n" +
                "			FROM 	temp_Insert_Packing_Slip_Record;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_TotalDetailCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId;  \n" +
                "			SELECT COUNT(1) INTO v_PendingCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'P';  \n" +
                "			SELECT COUNT(1) INTO v_DisapproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'D';  \n" +
                "			SELECT COUNT(1) INTO v_ApproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'A';  \n" +
                "  \n" +
                "			IF (v_DisapproveCount > 0) THEN  \n" +
                "				SET v_DetailLineStatus = 'I';  \n" +
                "			ELSEIF (v_PendingCount > 0) THEN  \n" +
                "				SET v_DetailLineStatus = 'W';  \n" +
                "			ELSEIF (v_ApproveCount > 0 AND v_ApproveCount = v_TotalDetailCount) THEN  \n" +
                "				SET v_DetailLineStatus = 'A';  \n" +
                "			ELSE  \n" +
                "				SET v_DetailLineStatus = 'W';  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			UPDATE 	packing_slip_material_receive  \n" +
                "			SET 	`status` = v_DetailLineStatus  \n" +
                "			WHERE 	receiptType = 'I'  \n" +
                "					AND deletedAt IS NULL  \n" +
                "					AND id = pInvoiceId;  \n" +
                "  \n" +
                "			/*UPDATE 	packing_slip_material_receive  \n" +
                "			SET 	`status` = 'W'  \n" +
                "			WHERE 	receiptType = 'I'  \n" +
                "					AND deletedAt IS NULL  \n" +
                "					AND id = pInvoiceId; */  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(v_DeleteCount, 0) > 0) THEN  \n" +
                "		IF (pAction = 'ReGet') THEN  \n" +
                "			UPDATE 	packing_slip_material_receive_det  \n" +
                "			SET 	updatedBy = pUserID, deletedBy = pUserID, deletedAt = fun_DatetimetoUTCDateTime(), isDeleted = 1  \n" +
                "			WHERE 	refPackingSlipMaterialRecID = pInvoiceId  \n" +
                "					AND deletedAt IS NULL  \n" +
                "					AND packingSlipSerialNumber IN (  \n" +
                "						SELECT packingSlipSerialNumber FROM temp_Delete_Packing_Slip_Record  \n" +
                "					);  \n" +
                "			SELECT COUNT(1) INTO v_TotalDetailCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId;  \n" +
                "			SELECT COUNT(1) INTO v_PendingCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'P';  \n" +
                "			SELECT COUNT(1) INTO v_DisapproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'D';  \n" +
                "			SELECT COUNT(1) INTO v_ApproveCount FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND refPackingSlipMaterialRecID = pInvoiceId AND `status` = 'A';  \n" +
                "  \n" +
                "			IF (v_DisapproveCount > 0) THEN  \n" +
                "				SET v_DetailLineStatus = 'I';  \n" +
                "			ELSEIF (v_PendingCount > 0) THEN  \n" +
                "				SET v_DetailLineStatus = 'W';  \n" +
                "			ELSEIF (v_ApproveCount > 0 AND v_ApproveCount = v_TotalDetailCount) THEN  \n" +
                "				SET v_DetailLineStatus = 'A';  \n" +
                "			ELSE  \n" +
                "				SET v_DetailLineStatus = 'W';  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			UPDATE 	packing_slip_material_receive  \n" +
                "			SET 	`status` = v_DetailLineStatus  \n" +
                "			WHERE 	receiptType = 'I'  \n" +
                "					AND deletedAt IS NULL  \n" +
                "					AND id = pInvoiceId;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(v_UpdateCount, 0) > 0) THEN  \n" +
                "		IF (pAction = 'ReGet') THEN  \n" +
                "			UPDATE 	packing_slip_material_receive_det ps, packing_slip_material_receive_det si  \n" +
                "			SET 	si.packingSlipSerialNumber = ps.packingSlipSerialNumber,  \n" +
                "				si.nickname = ps.nickname,  \n" +
                "				si.partID = ps.partID,  \n" +
                "				si.refSupplierPartId = ps.refSupplierPartId,  \n" +
                "				si.scanLabel = ps.scanLabel,  \n" +
                "				si.orderedQty = ps.orderedQty,  \n" +
                "				si.receivedQty = ps.receivedQty,  \n" +
                "				si.packingSlipQty = ps.packingSlipQty,  \n" +
                "				si.binID = ps.binID,  \n" +
                "				si.warehouseID = ps.warehouseID,  \n" +
                "				si.parentWarehouseID = ps.parentWarehouseID,  \n" +
                "				si.invoicePrice = ps.invoicePrice,  \n" +
                "				si.umidCreated = ps.umidCreated,  \n" +
                "				si.poReleaseNumber = ps.poReleaseNumber,  \n" +
                "				si.packagingID = ps.packagingID,  \n" +
                "				si.receivedStatus = ps.receivedStatus,  \n" +
                "				si.remark = ps.remark  \n" +
                "			WHERE 	ps.refPackingSlipMaterialRecID = pPackingSlipId  \n" +
                "					AND si.refPackingSlipMaterialRecID = pInvoiceId  \n" +
                "					AND si.packingSlipSerialNumber = ps.packingSlipSerialNumber  \n" +
                "					AND ps.deletedAt IS NULL  \n" +
                "					AND si.deletedAt IS NULL;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pAction = 'GetNotification') THEN  \n" +
                "		SELECT IsSuccess, NoOfLineInsert, NoOfLineDelete, NoOfLineUpdate FROM temp_ReGet_Validation_Error;  \n" +
                "	ELSEIF (pAction = 'ReGet') THEN  \n" +
                "		INSERT INTO temp_ReGet_Validation_Error (IsSuccess, NoOfLineInsert, NoOfLineDelete, NoOfLineUpdate) VALUES(TRUE, 0, 0, 0);  \n" +
                "		SELECT IsSuccess, NoOfLineInsert, NoOfLineDelete FROM temp_ReGet_Validation_Error;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5629,'2.00','V1','Bug 39270: On saving Supplier Invoice shows Error for umidCreated - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5629:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_validateScanUMIDOnly;  \n" +
                "CREATE PROCEDURE `Sproc_validateScanUMIDOnly`(  \n" +
                "	IN pUMID VARCHAR(15),  \n" +
                "	IN ppartID INT,  \n" +
                "	IN pwoOpID INT,  \n" +
                "	IN pwoTransID INT,  \n" +
                "	IN pemployeeId INT,  \n" +
                "	IN pcheckKitAllocation INT,  \n" +
                "	IN pverificationType VARCHAR(255),  \n" +
                "	IN pisVerify INT,  \n" +
                "	IN ptransactionType VARCHAR(1),  \n" +
                "	IN prfqLineItemsID INT,  \n" +
                "	IN pisConfirmed INT,  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "	IN pisPlacementTracking INT,  \n" +
                "	IN psaveUMIDDetails INT,  \n" +
                "	IN prefDesig VARCHAR(3000),  \n" +
                "	IN passyQty INT,  \n" +
                "    IN pApprovedBy INT,  \n" +
                "    IN pApprovedReason VARCHAR(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                "	DECLARE temp_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
                "	DECLARE uidVerified INT DEFAULT 0;  \n" +
                "	DECLARE temp_umid_comp_id INT;  \n" +
                "	DECLARE temp_umid_stock_id INT;  \n" +
                "	DECLARE temp_umid_pkgQty INT;  \n" +
                "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                "	DECLARE temp_umid_package_id INT;  \n" +
                "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
                "	DECLARE temp_last_inserted_umid_id INT;  \n" +
                "	DECLARE flag_isFeederTransExists INT DEFAULT 0;  \n" +
                "	DECLARE flag_tempVerificationApproval  VARCHAR(5)  DEFAULT 'V';  \n" +
                "	DECLARE flag_tempLineCount INT DEFAULT 0;  \n" +
                "	DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_checkKitAllocation VARCHAR(50);  \n" +
                "	DECLARE temp_wo_sub_status INT ;  \n" +
                "    DECLARE flag_isStrictlyLimitRefDes TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_allowed_refDesList TEXT;  \n" +
                "    DECLARE temp_odddly_RefDes  TEXT;  \n" +
                "  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
                "	(  \n" +
                "	     errorText VARCHAR(2000),  \n" +
                "	     isFeederError INT,  \n" +
                "	     isUMIDError INT,  \n" +
                "	     isConfirmation INT,  \n" +
                "	     isMessage INT,  \n" +
                "	     isInformation INT,  \n" +
                "	     stringText1 VARCHAR(1000),  \n" +
                "	     stringText2 VARCHAR(1000),  \n" +
                "	     stringText3 VARCHAR(1000)  \n" +
                "	);  \n" +
                "  \n" +
                "    SELECT isKitAllocationNotRequired,woSubStatus  \n" +
                "    INTO flag_kit_allocation_not_required_wo  , temp_wo_sub_status  \n" +
                "    FROM workorder wo  \n" +
                "    WHERE wo.woID = pwoID  \n" +
                "    AND wo.isDeleted = 0;  \n" +
                "  \n" +
                "    SELECT group_concat(refDesig) INTO temp_allowed_refDesList  \n" +
                "    FROM workorder_operation_refdesig  \n" +
                "    WHERE woID = pwoID  \n" +
                "    AND woOPID = pwoOpID  \n" +
                "    AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT GROUP_CONCAT(cor.refDes) INTO temp_odddly_RefDes  \n" +
                "    From component_oddely_refdes cor  \n" +
                "    Where cor.refComponentID = ppartID  \n" +
                "    and cor.isDeleted =0;  \n" +
                "  \n" +
                "    SELECT isStrictlyLimitRefDes INTO flag_isStrictlyLimitRefDes  \n" +
                "    FROM workorder_operation  \n" +
                "    WHERE woID = pwoID  \n" +
                "    AND woOPID = pwoOpID  \n" +
                "    AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	#CHeck Only SMT Part allowed  in case of missing material status  \n" +
                "	IF (temp_wo_sub_status = 9 AND (SELECT COUNT(1) FROM rfq_lineitems_alternatepart rla  \n" +
                "			WHERE rla.mfgPNID IN  (SELECT refcompid  FROM component_sid_stock  \n" +
                "										WHERE uid = pUMID AND isDeleted = 0 )  \n" +
                "            AND rla.partID =   ppartID  \n" +
                "			AND rla.isDeleted = 0) > 0 ) THEN  \n" +
                "		 SET result = fun_checkAndInsertError('UMID051', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "	END IF;  \n" +
                "	# umid transaction details based on umid  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_umid_transIDs;  \n" +
                "  \n" +
                "	select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID,0, pwoOpID)  \n" +
                "    INTO flag_tempVerificationApproval;  \n" +
                "	/*IF(fun_checkUMIDVerificationRequire(ppartID, pUMID, 0) > 0) THEN  \n" +
                "		SET flag_tempVerificationRequire = 1;  \n" +
                "	END IF;                */  \n" +
                "  \n" +
                "	IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                "		SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';  \n" +
                "    ELSE  \n" +
                "		SET temp_checkKitAllocation = pcheckKitAllocation;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	# Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
                "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation, ptransactionType, 0, pisVerify, NULL, NULL, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN  \n" +
                "  \n" +
                "		SELECT id, refsidid, pkgQty, PIDCode, mfgPN, packagingGroupId  \n" +
                "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_mfgPN, temp_umid_package_id  \n" +
                "		FROM temp_umid_details;  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		IF(flag_tempLineCount = 1) THEN  \n" +
                "			SELECT COUNT(1), rfqLineItemsID INTO flag_tempLineCount, prfqLineItemsID FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prfqLineItemsID IS NOT NULL) THEN  \n" +
                "			UPDATE temp_umid_details tud  \n" +
                "			SET tud.refDesig = (SELECT GROUP_CONCAT(CONCAT_WS(',',refDesig,dnpDesig)) FROM rfq_lineitems WHERE deletedAt IS NULL  \n" +
                "			AND id = prfqLineItemsID)  \n" +
                "			WHERE tud.refsidid=temp_umid_stock_id;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO flag_tempLineCount FROM temp_assy_part_list  \n" +
                "			WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                "			AND rfqLineItemsID = prfqLineItemsID;  \n" +
                "		END IF;  \n" +
                "-- select pisPlacementTracking, psaveUMIDDetails, flag_isStrictlyLimitRefDes , temp_allowed_refDesList , flag_tempLineCount;  \n" +
                "-- select flag_kit_allocation_not_required_wo;  \n" +
                "-- select fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, NULL, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 0, NULL , prfqLineItemsID);  \n" +
                "-- select * from temp_scan_error;  \n" +
                "		IF flag_kit_allocation_not_required_wo = 1 AND  flag_tempLineCount > 1 THEN  \n" +
                "			SET result = 0;  \n" +
                "        ELSEIF flag_kit_allocation_not_required_wo = 1 AND pisVerify = 0 AND flag_tempLineCount = 1 AND pisPlacementTracking = 1 AND psaveUMIDDetails = 0  THEN  \n" +
                "			SET result = 0;  \n" +
                "		ELSEIF flag_kit_allocation_not_required_wo = 0 AND (fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, NULL, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 0, NULL , prfqLineItemsID) = 0) THEN  \n" +
                "-- select 'line 132';  \n" +
                "			SET result = 0;  \n" +
                "        ELSEIF (pisPlacementTracking = 1 AND psaveUMIDDetails = 1 AND flag_isStrictlyLimitRefDes = 1  \n" +
                "				AND temp_allowed_refDesList IS NOT NULL AND fun_ValidateRefDesAgainstOperation(temp_allowed_refDesList,prefDesig,temp_odddly_RefDes) = 0) THEN  \n" +
                "                SET result = 0;  \n" +
                "		ELSE  \n" +
                "			-- need to check from here  \n" +
                "			-- If scan popup with manual placement and allocated in kit and not saved details          --  \n" +
                "			-- Check placement tracking with more than one BOM line item for same part  \n" +
                "            -- Check for Allowed RefDes  \n" +
                "--  SELECT 'line 140',pisVerify,flag_tempLineCount,pisPlacementTracking,COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042');  \n" +
                "            IF (pisVerify = 0 AND flag_tempLineCount = 1 AND pisPlacementTracking = 1 AND psaveUMIDDetails = 0 AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042') > 0)) THEN  \n" +
                "				SET result = 0;  \n" +
                "			ELSEIF(pisVerify = 0 AND flag_tempLineCount > 1  AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016') > 0) ) THEN  \n" +
                "				SET result = 0;  \n" +
                "			ELSEIF (pisVerify = 0  AND prfqLineItemsID IS NULL AND (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID042') > 0)) THEN  \n" +
                "				SET result = 0;  \n" +
                "			ELSE  \n" +
                "				IF(flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                "					IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "						SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "						SET uidVerified = 1;  \n" +
                "					ELSE  \n" +
                "						SET uidVerified = 0;  \n" +
                "						SET result = 0;  \n" +
                "					END IF;  \n" +
                "				ELSE  \n" +
                "					IF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_umid_comp_id, temp_umid_stock_id, 0, pisConfirmed, prfqLineItemsID) = 0) THEN  \n" +
                "						SET result = 0;  \n" +
                "					ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, prfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
                "						SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "					ELSE  \n" +
                "						-- check verification required  \n" +
                "						-- than verification require than check from which page scan/verify  \n" +
                "                        IF (flag_tempVerificationApproval = 'CV' AND pisConfirmed = 0) THEN  \n" +
                "							-- Take confirmation  \n" +
                "							SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                "						ELSEIF(flag_tempVerificationApproval = 'V'  OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) THEN -- verification not require  \n" +
                "							-- if scan option selected than check for already scanned in flow first  \n" +
                "							-- if not scanned than add as verified umid directly  \n" +
                "							IF(pisVerify <> 1) THEN  \n" +
                "								SELECT COUNT(id) INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
                "								WHERE transactionType='U'  \n" +
                "								AND refsidid = temp_umid_stock_id  \n" +
                "								AND mfgPNID=temp_umid_comp_id  \n" +
                "								AND reelStatus=\"C\" AND deletedAt IS NULL  \n" +
                "								AND woOPID = pwoOpID  \n" +
                "								AND employeeID=pemployeeId;  \n" +
                "  \n" +
                "								-- if already scanned than give message  \n" +
                "								-- else add as verified umid directly  \n" +
                "								IF(temp_feeder_transID > 0) THEN  \n" +
                "									# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                "									INSERT INTO workorder_trans_umid_details  \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                "										`verifiedOn`,`reelStatus`, refDesig,  \n" +
                "                                         `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "									VALUES  \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
                "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "									-- SCANNED  \n" +
                "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "									SELECT LAST_INSERT_ID() AS id;  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "									SET uidVerified = 1;  \n" +
                "								ELSE  \n" +
                "									INSERT INTO workorder_trans_umid_details  \n" +
                "										(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "										`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "										`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "										`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`,  \n" +
                "										`verifiedOn`, `reelStatus`, refDesig,  \n" +
                "                                        `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "									VALUES  \n" +
                "										(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "										temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "										passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "										pCreatedBy, pCreatedBy, 1, pemployeeId,  \n" +
                "										fun_DatetimetoUTCDateTime(), \"C\", prefDesig,  \n" +
                "                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "									-- VERIFIED  \n" +
                "									CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "									SELECT LAST_INSERT_ID() AS id;  \n" +
                "									-- SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "									SET uidVerified = 1;  \n" +
                "								END IF;  \n" +
                "							ELSE  \n" +
                "								-- if already scanned than verify same umid for history  \n" +
                "								-- if not scanned yet than give message  \n" +
                "								IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "									SET uidVerified = 1;  \n" +
                "								ELSE  \n" +
                "									SET uidVerified = 0;  \n" +
                "									SET result = 0;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						 -- this code is commented because as per new implementation there will  be no verification for scan material  \n" +
                "                         /*ELSE  \n" +
                "							-- verification require than check from which page/popup  \n" +
                "							-- if from scan popup than add umid as scanned new record  \n" +
                "							-- else check for verify flow  \n" +
                "							IF (pisVerify <> 1) THEN  \n" +
                "								# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                "								INSERT INTO workorder_trans_umid_details  \n" +
                "									(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "									`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "									`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "									`updatedBy`,`createdBy`, `reelStatus`, refDesig)  \n" +
                "								VALUES  \n" +
                "									(pwoTransID, NULL, temp_umid_stock_id,  \n" +
                "									temp_umid_comp_id, NULL, pemployeeId, pwoOpID,  \n" +
                "									passyQty, NULL, prfqLineItemsID, ptransactionType,  \n" +
                "									pCreatedBy, pCreatedBy, \"C\", prefDesig);  \n" +
                "  \n" +
                "								-- SCANNED  \n" +
                "								CREATE TEMPORARY TABLE temp_umid_transIDs AS  \n" +
                "								SELECT LAST_INSERT_ID() AS id;  \n" +
                "								SET result = fun_checkAndInsertError('UMID006', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "								SET uidVerified = 1;  \n" +
                "							ELSE  \n" +
                "								IF(fun_checkAndVerifyUMID(temp_umid_stock_id, temp_umid_comp_id,pwoOpID, pemployeeId) = 1) THEN  \n" +
                "									SET result = fun_checkAndInsertError('UMID002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "									SET uidVerified = 1;  \n" +
                "								ELSE  \n" +
                "									SET uidVerified = 0;  \n" +
                "									SET result = 0;  \n" +
                "								END IF;  \n" +
                "							END IF; */  \n" +
                "						END IF;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(  \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
                "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
                "	VALUES (  \n" +
                "		pUMID,							'',				temp_umid_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 		NULL,  \n" +
                "		NULL, 							NULL,				CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                "		0,							IFNULL(pCreatedBy,''),		fun_DatetimetoUTCDateTime(),  \n" +
                "		pwoTransID, 						NULL,				pverificationType  \n" +
                "	);  \n" +
                "  \n" +
                "	#0. return assy part list  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_assy_part_list  \n" +
                "	SELECT id, refcompid AS mfgPNID, NULL AS rfqLineItemsID FROM component_sid_stock WHERE 1=0;  \n" +
                "  \n" +
                "	IF(flag_tempLineCount <= 1 AND prfqLineItemsID IS NOT NULL) THEN  \n" +
                "		SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details)  \n" +
                "		AND rfqLineItemsID = prfqLineItemsID;  \n" +
                "	ELSE  \n" +
                "		IF(uidVerified = 1 AND flag_tempLineCount > 1 AND pisVerify = 1) THEN  \n" +
                "			-- verified UMID  \n" +
                "			SELECT * FROM temp_assy_part_list WHERE 1=0;  \n" +
                "		ELSE  \n" +
                "			SELECT * FROM temp_assy_part_list WHERE mfgPNID IN (SELECT id FROM temp_umid_details);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#1. return history of verification  \n" +
                "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                "  \n" +
                "	#2. return error  \n" +
                "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');  \n" +
                "  \n" +
                "	#3. return umid details  \n" +
                "	-- IF (uidVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                "	SELECT * FROM temp_umid_details;  \n" +
                "	-- SELECT * FROM temp_umid_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#4 return last inserted/updated records for umid transacrion  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_transIDs  \n" +
                "	SELECT NULL AS id;  \n" +
                "	SELECT id FROM temp_umid_transIDs;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5630,'2.00','V1','Sproc_validateScanUMIDOnly-Bug 39313: While scan UMID the error should not display.  - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5630:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_ValidateScanUMIDFirst;  \n" +
                "CREATE PROCEDURE `Sproc_ValidateScanUMIDFirst`(  \n" +
                "	IN pUMID VARCHAR(15),  \n" +
                "	IN pfeederLocation VARCHAR(1000),  \n" +
                "	IN ppartID INT(11),  \n" +
                "	IN pwoOpEqpID INT(11),  \n" +
                "	IN pwoOpID INT(11),  \n" +
                "	IN pwoTransID INT(11),  \n" +
                "	IN pemployeeId INT(11),  \n" +
                "	IN pcheckKitAllocation INT(11),  \n" +
                "	IN pverificationType VARCHAR(255),  \n" +
                "	IN pisVerify INT(11),  \n" +
                "	IN ptransactionType VARCHAR(1),  \n" +
                "	IN pisChangeReel INT(11),  \n" +
                "	IN preelChangeType VARCHAR(100),  \n" +
                "	IN ptoBinID INT(11),  \n" +
                "	IN pOldUMID VARCHAR(15),  \n" +
                "	IN pisConfirmed INT(11),  \n" +
                "	IN pwoID INT(11),  \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "    IN pApprovedBy INT,  \n" +
                "    IN pApprovedReason VARCHAR(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE result VARCHAR(255) DEFAULT 0;  \n" +
                "	DECLARE temp_comp_id INT(11);  \n" +
                "	DECLARE temp_comp_uom INT(11);  \n" +
                "	DECLARE temp_rfqLineItemsID VARCHAR(100);  \n" +
                "	DECLARE temp_lineID VARCHAR(100);  \n" +
                "	DECLARE temp_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_mfgpn VARCHAR(50);  \n" +
                "	DECLARE temp_eqpFeederID INT(11);  \n" +
                "	DECLARE temp_comp_is_cpn INT(11) DEFAULT 0;  \n" +
                "	DECLARE uidVerified INT(11) DEFAULT 0;  \n" +
                "	DECLARE feederVerified INT(11) DEFAULT 0;  \n" +
                "	DECLARE temp_umid_comp_id INT(11);  \n" +
                "	DECLARE temp_umid_pkgQty INT(11);  \n" +
                "	DECLARE temp_umid_stock_id INT(11);  \n" +
                "	DECLARE temp_umid_pidcode VARCHAR(100);  \n" +
                "	DECLARE temp_umid_mfgPN VARCHAR(100);  \n" +
                "	DECLARE temp_umid_package_id INT(11);  \n" +
                "	DECLARE temp_umid_pkgUnit INT(11);  \n" +
                "	DECLARE temp_umid_pkgCount INT(11);  \n" +
                "	DECLARE temp_umid_pkgUOM INT(11);  \n" +
                "	DECLARE temp_old_umid_comp_id INT(11);  \n" +
                "	DECLARE temp_old_umid_stock_id INT(11);  \n" +
                "	DECLARE temp_old_umid_pkgQty INT(11);  \n" +
                "	DECLARE temp_old_umid_pkgUnit INT(11);  \n" +
                "	DECLARE temp_old_umid_pkgUOM INT(11);  \n" +
                "	DECLARE temp_eqp_wh_id INT(11);  \n" +
                "	DECLARE temp_eqp_bin_id INT(11);  \n" +
                "	DECLARE temp_eqp_wh_name VARCHAR(100);  \n" +
                "	DECLARE temp_feeder_transID VARCHAR(100);  \n" +
                "	DECLARE temp_salesorderdetID VARCHAR(100);  \n" +
                "	DECLARE flag_isFeederTransExists INT (11) DEFAULT 0;  \n" +
                "	DECLARE valid_umid_transfer INT (11) DEFAULT 0;  \n" +
                "	DECLARE flag_tempVerificationApproval VARCHAR(5) DEFAULT 'V';  \n" +
                "	DECLARE temp_json_object VARCHAR(100);  \n" +
                "	DECLARE temp_last_inserted_umid_id INT (11);  \n" +
                "    DECLARE flag_kit_allocation_not_required_wo TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_checkKitAllocation VARCHAR(50);  \n" +
                "    DECLARE temp_continue TINYINT DEFAULT 0;  \n" +
                "	DECLARE temp_old_umid_verify_status TINYINT DEFAULT 0; -- for  change reel flow  \n" +
                "	DECLARE flag_isStrictlyLimitRefDes TINYINT DEFAULT 0 ;  \n" +
                "    DECLARE temp_allowed_refDesList TEXT;  \n" +
                "    DECLARE temp_entered_refDes TEXT;  \n" +
                "	DECLARE temp_odddly_RefDes TEXT;  \n" +
                "  \n" +
                "	SET temp_eqp_wh_id = NULL;  \n" +
                "	SET temp_eqp_bin_id = NULL;  \n" +
                "	SET temp_eqp_wh_name = NULL;  \n" +
                "  \n" +
                "   -- This will be case when  call from  Change Reel SP : Sproc_ValidateScanChangeReel  \n" +
                "	CREATE temporary TABLE IF NOT EXISTS temp_old_umid_details  \n" +
                "    SELECT 0 As isVerified;  \n" +
                "	SELECT isVerified  \n" +
                "	INTO temp_old_umid_verify_status  \n" +
                "    FROM temp_old_umid_details;  \n" +
                "  \n" +
                "  \n" +
                "	-- create temporary table for error  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_scan_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_scan_error  \n" +
                "	(  \n" +
                "	     errorText VARCHAR(2000),  \n" +
                "	     isFeederError INT(11),  \n" +
                "	     isUMIDError INT(11),  \n" +
                "	     isConfirmation INT(11),  \n" +
                "	     isMessage INT(11),  \n" +
                "	     isInformation INT(11),  \n" +
                "	     stringText1 VARCHAR(1000),  \n" +
                "	     stringText2 VARCHAR(1000),  \n" +
                "	     stringText3 VARCHAR(1000)  \n" +
                "	);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_feeder_details;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_umid_details;  \n" +
                "  \n" +
                "    select  fun_checkUMIDVerificationAndApprovalRequire(ppartID, pUMID, 1, pwoOpID)  \n" +
                "	INTO flag_tempVerificationApproval;  \n" +
                "  \n" +
                "    SELECT isKitAllocationNotRequired INTO flag_kit_allocation_not_required_wo  \n" +
                "	FROM workorder wo  \n" +
                "	WHERE wo.woID = pwoID  \n" +
                "	AND wo.isDeleted = 0;  \n" +
                "  \n" +
                "    SELECT group_concat(refDesig) INTO temp_allowed_refDesList  \n" +
                "	FROM workorder_operation_refdesig  \n" +
                "	WHERE woID = pwoID  \n" +
                "	AND woOPID = pwoOpID  \n" +
                "	AND isDeleted = 0;  \n" +
                "  \n" +
                "    SELECT GROUP_CONCAT(cor.refDes) INTO temp_odddly_RefDes  \n" +
                "    From component_oddely_refdes cor  \n" +
                "    Where cor.refComponentID = ppartID  \n" +
                "    and cor.isDeleted =0;  \n" +
                "  \n" +
                "	SELECT isStrictlyLimitRefDes INTO flag_isStrictlyLimitRefDes  \n" +
                "	FROM workorder_operation  \n" +
                "	WHERE woID = pwoID  \n" +
                "	AND woOPID = pwoOpID  \n" +
                "	AND isDeleted = 0 ;  \n" +
                "  \n" +
                "	IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                "		SET temp_checkKitAllocation = 'KITALLOCATIONNOTREQUIRED';  \n" +
                "	ELSE  \n" +
                "		SET temp_checkKitAllocation = pcheckKitAllocation;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    # Step 1 - check feeder is valid or not for scanned details and return pid details  \n" +
                "	#select concat('fun_checkUMIDScan(',pUMID,',', ppartID,',', pwoTransID,',', pwoOpID,',', pcheckKitAllocation,',', ptransactionType,',', 0, pisVerify,')');  \n" +
                "	IF ((fun_checkUMIDScan(pUMID, ppartID, pwoTransID, pwoOpID, pemployeeId, temp_checkKitAllocation,ptransactionType, 1, pisVerify, pwoOpEqpID, pfeederLocation, pwoID, pCreatedBy, pisConfirmed) > 0)) THEN  \n" +
                "		SELECT id, refsidid, pkgQty, PIDCode, pkgUOM, pkgUnit, mfgPN, packagingGroupId  \n" +
                "		-- , refSalesOrderDetID  \n" +
                "		INTO temp_umid_comp_id, temp_umid_stock_id, temp_umid_pkgQty, temp_umid_pidcode, temp_umid_pkgUOM, temp_umid_pkgUnit, temp_umid_mfgPN, temp_umid_package_id  \n" +
                "		-- , temp_salesorderdetID  \n" +
                "		FROM temp_umid_details;  \n" +
                "		-- Before doing ZeroOut any UMID it should be verified  \n" +
                "		IF (preelChangeType = \"ZeroOut\"  AND  temp_old_umid_verify_status = 0 and  pUMID is not null) THEN  \n" +
                "			SET result = fun_checkAndInsertError('UMID050', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "        elseif (pfeederLocation IS NOT NULL) THEN  \n" +
                "			IF(fun_checkFeederLocation(pfeederLocation, pwoOPEqpID, pisVerify, 0) > 0) THEN  \n" +
                "				SELECT id, rfqLineItemsID, partID, lineID, eqpFeederID, pidcode, uom, mfgPN, isCPN , refDesig  \n" +
                "				INTO temp_comp_id, temp_rfqLineItemsID, ppartID, temp_lineID, temp_eqpFeederID, temp_pidcode, temp_comp_uom, temp_mfgpn, temp_comp_is_cpn,temp_entered_refDes  \n" +
                "				FROM temp_feeder_details;  \n" +
                "				-- IF(pisVerify = 1) THEN  \n" +
                "				-- 	SET flag_isFeederTransExists = fun_checkFeederTransaction(pwoOpEqpID, temp_eqpFeederID, temp_rfqLineItemsID, temp_comp_id);  \n" +
                "				-- 	IF(flag_isFeederTransExists = 0 OR flag_isFeederTransExists = -1) THEN  \n" +
                "				-- 		IF(flag_isFeederTransExists = 0) THEN  \n" +
                "				-- 			-- FAILED  \n" +
                "				-- 			SET @stmt_str = 'FEED001';  \n" +
                "				-- 			INSERT INTO temp_scan_error (errorText, isFeederError, isUMIDError, isConfirmation, isMessage, isInformation, stringText1, stringText2, stringText3)  \n" +
                "				-- 			VALUES (@stmt_str, 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				-- 			SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "				-- 		END IF;  \n" +
                "				-- 	END IF;  \n" +
                "				-- ELSE  \n" +
                "					# check for valid lineid for feeder details and umid details  \n" +
                "					#yes - check for lineid and valid than save transaction  \n" +
                "					#no - suggest valid feeder location  \n" +
                "					IF((pisVerify <> 1) AND (SELECT COUNT(1) FROM workorder_trans_umid_details wtud  \n" +
                "						WHERE wtud.woOPEqpID = pwoOPEqpID AND wtud.deletedAt IS NULL AND wtud.reelStatus='P'  \n" +
                "						AND wtud.transactionType='F' AND wtud.eqpFeederID IN (SELECT woefd.id FROM workorder_operation_equipment_feeder_details woefd  \n" +
                "						WHERE woefd.feederLocation COLLATE utf8mb4_0900_ai_ci = pfeederLocation AND woefd.woOPEqpID = pwoOPEqpID AND woefd.deletedAt IS NULL)) > 0) THEN  \n" +
                "							-- ALLOCATED  \n" +
                "							SET result = fun_checkAndInsertError('FEED003', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "					ELSEIF (flag_isStrictlyLimitRefDes = 1 AND temp_allowed_refDesList IS NOT NULL  \n" +
                "							AND fun_ValidateRefDesAgainstOperation(temp_allowed_refDesList,temp_entered_refDes,temp_odddly_RefDes) = 0) THEN  \n" +
                "							SET result = 0;  \n" +
                "					ELSE  \n" +
                "						#in case validate UMID without Kit set true at WO  \n" +
                "						IF flag_kit_allocation_not_required_wo = 1 THEN  \n" +
                "							IF ((SELECT COUNT(1) FROM temp_assy_part_list  \n" +
                "																WHERE mfgPNID = temp_umid_comp_id  \n" +
                "																AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "																AND LineID IN (SELECT woefld.lineID FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "																		WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)) = 0) THEN  \n" +
                "									-- WRONG_LOCATION  \n" +
                "									SET result = fun_checkAndInsertError('UMID015', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "							   ELSE  \n" +
                "									SET temp_continue = 1;  \n" +
                "							   END IF;  \n" +
                "						ELSEIF ( fun_checkKitAllocation(pUMID, pwoID, pwoOPID, pwoTransID, temp_eqpFeederID, temp_umid_comp_id, temp_umid_package_id, pcheckKitAllocation, pisConfirmed, 1, NULL, NULL) > 0) THEN  \n" +
                "							SET temp_continue = 1 ;  \n" +
                "						END IF;  \n" +
                "                        IF temp_continue = 1 THEN  \n" +
                "							IF(temp_comp_is_cpn = 0 AND (SELECT COUNT(1) FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "								WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL) > 1 AND temp_comp_id <> temp_umid_comp_id) THEN  \n" +
                "									SET result = fun_checkAndInsertError('UMID004', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "							ELSEIF(fun_checkUMIDRestrictionWithLineItem(ppartID, temp_comp_id, temp_umid_stock_id,1, pisConfirmed, temp_rfqLineItemsID) = 0) THEN  \n" +
                "								SET result = 0;  \n" +
                "							ELSEIF(fun_getBOMLineCleanStatusErrorCategoryWise(NULL, temp_rfqLineItemsID, temp_umid_stock_id, ppartID, 4) = 0) THEN  \n" +
                "								SET result = fun_checkAndInsertError('UMID029', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "							ELSE  \n" +
                "								IF (pisVerify <> 1) THEN  \n" +
                "									# Get Equipment/WareHouse ID from pwoOpEqpID  \n" +
                "									-- IF NOT ALLOCATED THAN NO NEED TO GIVE ELSE PART, IT IS ALREADY ADDED IN FUNCTION  \n" +
                "                                    -- UMID016 for regualer feeder scan  \n" +
                "                                    -- UMID042 for Part level Kit Allocation checking success  . Both from  fun_checkKitAllocation  \n" +
                "									IF ( pwoOpEqpID IS NOT NULL AND  \n" +
                "										( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0)  OR flag_kit_allocation_not_required_wo = 1 ) THEN  \n" +
                "										SELECT id, `name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst  \n" +
                "										WHERE refEqpID IN (  \n" +
                "											SELECT eqpID FROM workorder_operation_equipment  \n" +
                "											WHERE woOpEqpID=pwoOpEqpID AND deletedAt IS NULL  \n" +
                "										) AND deletedAt IS NULL;  \n" +
                "  \n" +
                "										IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
                "											SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
                "											AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
                "										END IF;  \n" +
                "  \n" +
                "										-- CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL, (SELECT binID FROM temp_umid_details),temp_eqp_wh_id, NULL, pCreatedBy, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);  \n" +
                "										IF (temp_eqp_bin_id IS NOT NULL) THEN  \n" +
                "											IF  ((flag_tempVerificationApproval = 'CP' OR flag_tempVerificationApproval = 'CV') AND pisConfirmed = 0) THEN -- Take Confirmation  \n" +
                "												-- Take confirmation  \n" +
                "												SET result = fun_checkAndInsertError('UMID049', 0, 0, 1, 0, 0, NULL, NULL, NULL);  \n" +
                "											ELSEIF(flag_tempVerificationApproval = 'V' OR (flag_tempVerificationApproval = 'CV' AND pisConfirmed =1)) THEN -- verification not require  \n" +
                "												SELECT id INTO temp_feeder_transID FROM workorder_trans_umid_details  \n" +
                "													WHERE eqpFeederID = temp_eqpFeederID AND transactionType='F'  \n" +
                "													AND refsidid = temp_umid_stock_id  \n" +
                "													AND mfgPNID=temp_umid_comp_id AND woOpEqpID=pwoOPEqpID  \n" +
                "													AND rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "														WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "													AND reelStatus=\"P\" AND deletedAt IS NULL  \n" +
                "													AND woOPID = pwoOpID;  \n" +
                "  \n" +
                "  \n" +
                "												IF(temp_feeder_transID > 0) THEN  \n" +
                "													-- FAILED  \n" +
                "													SET result = fun_checkAndInsertError('UMID001', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "												ELSE  \n" +
                "  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL, NULL,  \n" +
                "														\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "														0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "													INSERT INTO workorder_trans_umid_details  \n" +
                "														(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "														`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "														`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "														`updatedBy`,`createdBy`, `isVerified`, `verifiedBy`, `verifiedOn`, `reelStatus`,  \n" +
                "														`approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "													VALUES  \n" +
                "														(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "														temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "														NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "														pCreatedBy, pCreatedBy, 1, pemployeeId, fun_DatetimetoUTCDateTime(), \"P\",  \n" +
                "                                                        pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "													-- VERIFIED  \n" +
                "													SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "													SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "													SET valid_umid_transfer = 1;  \n" +
                "												END IF;  \n" +
                "											ELSEIF (flag_tempVerificationApproval = 'P' OR (flag_tempVerificationApproval = 'CP' AND pisConfirmed =1)) THEN  \n" +
                "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "													pCreatedBy, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL, NULL,  \n" +
                "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "													0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "												# insert transaction details for umid first and feeder details in workorder_trans_umid_details  \n" +
                "												INSERT INTO workorder_trans_umid_details  \n" +
                "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "													`updatedBy`,`createdBy`, `reelStatus`,  \n" +
                "                                                    `approvedBy`,`approvedOn`,`approvedReason`)  \n" +
                "												VALUES  \n" +
                "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "													pCreatedBy, pCreatedBy, \"P\",  \n" +
                "                                                    pApprovedBy, IF(pApprovedBy IS NOT NULL,fun_DatetimetoUTCDateTime(),null), pApprovedReason);  \n" +
                "  \n" +
                "												-- SCANNED  \n" +
                "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "												SET valid_umid_transfer = 1;  \n" +
                "											END IF;  \n" +
                "										ELSE  \n" +
                "											-- WRONG_LOCATION  \n" +
                "											-- SET @stmt_str = 'UMID018';  \n" +
                "											-- INSERT INTO temp_scan_error (errorText, isFeederError, isUMIDError, isConfirmation, isMessage, isInformation, stringText1, stringText2, stringText3)  \n" +
                "											-- VALUES (@stmt_str, 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "											SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "										END IF;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									SET feederVerified = 1;  \n" +
                "								ELSE  \n" +
                "									-- If change reel and old umid details  \n" +
                "									IF (pisChangeReel = 1 AND pOldUMID IS NOT NULL) THEN  \n" +
                "										-- check workorder operation equipment id and kit allocated or not while change reel  \n" +
                "										-- get component details based on old umid  \n" +
                "										SELECT css.refcompid, css.id, css.pkgQty, css.pkgUnit, css.uom  \n" +
                "											INTO temp_old_umid_comp_id, temp_old_umid_stock_id, temp_old_umid_pkgQty, temp_old_umid_pkgUnit, temp_old_umid_pkgUOM  \n" +
                "											FROM component_sid_stock css  \n" +
                "											WHERE css.uid=pOldUMID AND css.deletedAt IS NULL;  \n" +
                "  \n" +
                "										SELECT wtud.id  \n" +
                "                                        INTO temp_feeder_transID  \n" +
                "                                        FROM workorder_trans_umid_details wtud  \n" +
                "											WHERE wtud.eqpFeederID = temp_eqpFeederID AND wtud.transactionType='F'  \n" +
                "											AND wtud.refsidid=temp_old_umid_stock_id  \n" +
                "												AND wtud.mfgPNID=temp_old_umid_comp_id  \n" +
                "												AND wtud.woOpEqpID=pwoOPEqpID  \n" +
                "												AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "													FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "													WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "											AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
                "											AND woOPID = pwoOpID;  \n" +
                "									-- If not change reel than check for reel transaction is done or not  \n" +
                "									ELSEIF(pisChangeReel <> 1) THEN  \n" +
                "										SELECT wtud.id INTO temp_feeder_transID FROM workorder_trans_umid_details wtud  \n" +
                "										WHERE wtud.eqpFeederID = temp_eqpFeederID AND wtud.transactionType='F'  \n" +
                "										AND wtud.refsidid = temp_umid_stock_id  \n" +
                "										AND wtud.mfgPNID=temp_umid_comp_id AND wtud.woOpEqpID=pwoOPEqpID  \n" +
                "										AND wtud.rfqLineItemsID IN (SELECT woefld.rfqLineItemID  \n" +
                "										FROM workorder_operation_feeder_lineitem_details woefld  \n" +
                "											WHERE woefld.eqpFeederID=temp_eqpFeederID AND woefld.deletedAt IS NULL)  \n" +
                "										AND wtud.reelStatus=\"P\" AND wtud.deletedAt IS NULL  \n" +
                "										AND wtud.woOPID = pwoOpID;  \n" +
                "										-- AND isVerified=0;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									IF(pisChangeReel <> 1 AND temp_feeder_transID > 0) THEN  \n" +
                "										UPDATE workorder_trans_umid_details  \n" +
                "										SET isVerified=1,  \n" +
                "										verifiedBy=pemployeeId,  \n" +
                "										verifiedOn=fun_DatetimetoUTCDateTime()  \n" +
                "										WHERE id=temp_feeder_transID;  \n" +
                "  \n" +
                "										SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
                "										-- VERIFIED  \n" +
                "										SET result = fun_checkAndInsertError('FEED002', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "										SET feederVerified = 1;  \n" +
                "									-- if change reel than update verify flag for verfiy true  \n" +
                "									ELSEIF(pisChangeReel = 1 AND temp_feeder_transID > 0) THEN  \n" +
                "										 IF ((pwoOpEqpID IS NOT NULL) AND  \n" +
                "                                        ( (SELECT COUNT(1) FROM temp_scan_error WHERE errorText IN ('UMID016','UMID042')) > 0) OR flag_kit_allocation_not_required_wo = 1) THEN  \n" +
                "                                        -- check workorder operation equipment id and kit allocated or not while change reel  \n" +
                "											SELECT whmst.id, whmst.`name` INTO temp_eqp_wh_id, temp_eqp_wh_name FROM warehousemst whmst  \n" +
                "											WHERE whmst.refEqpID IN (  \n" +
                "												SELECT woe.eqpID FROM workorder_operation_equipment woe  \n" +
                "												WHERE woe.woOpEqpID=pwoOpEqpID AND woe.deletedAt IS NULL  \n" +
                "											) AND whmst.deletedAt IS NULL;  \n" +
                "  \n" +
                "											-- check feeder location and warehouse is valid than allow to do changes reel  \n" +
                "											IF(pfeederLocation IS NOT NULL AND temp_eqp_wh_id IS NOT NULL) THEN  \n" +
                "												SELECT id INTO temp_eqp_bin_id FROM binmst WHERE deletedAt IS NULL  \n" +
                "												AND `name`=CONCAT(temp_eqp_wh_name, '+' ,pfeederLocation) AND wareHouseID=temp_eqp_wh_id;  \n" +
                "											END IF;  \n" +
                "											IF (temp_eqp_bin_id IS NOT NULL AND ptoBinID IS NOT NULL) THEN  \n" +
                "												-- ZERO Out case Json returnQty/Unit 0, consumeQty/Unit - Old UMID data pkgQty/pkgUnit/pkgUOM  \n" +
                "												IF (preelChangeType = \"ZeroOut\") THEN  \n" +
                "														-- Added for multiple kit  \n" +
                "													SET temp_json_object = CONCAT('[{\\\"id\\\":',  \n" +
                "														(SELECT id FROM kit_allocation ka  \n" +
                "															WHERE ka.refSalesOrderDetID IN  \n" +
                "																(SELECT GROUP_CONCAT(wsd.salesOrderDetailID)  \n" +
                "																FROM workorder_salesorder_details wsd  \n" +
                "																WHERE wsd.deletedAt IS NULL AND wsd.woID=pwoID)  \n" +
                "														AND ka.uid=pOldUMID AND ka.assyID=ppartID AND `status` = \"A\"),  \n" +
                "														',\\\"returnQty\\\":',0,  \n" +
                "														',\\\"returnUnit\\\":',0,  \n" +
                "														',\\\"consumeQty\\\":',temp_old_umid_pkgQty,  \n" +
                "														',\\\"consumeUnit\\\":',temp_old_umid_pkgUnit,  \n" +
                "														',\\\"umidUOM\\\":',temp_old_umid_pkgUOM,'}]');  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, 0,  \n" +
                "														0, NULL, NULL, temp_json_object, preelChangeType,  \n" +
                "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType),pwoTransID,  \n" +
                "														1,NULL,NULL,NULL,NULL);  \n" +
                "												ELSE  \n" +
                "													CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "														NULL ,ptoBinID, temp_old_umid_stock_id,  \n" +
                "														pCreatedBy, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL,  \n" +
                "														NULL, NULL, NULL, NULL, NULL,  \n" +
                "														\"UMID to Bin Transfer\",CONCAT(\"Feeder Transfer Material - \", preelChangeType),pwoTransID,  \n" +
                "														0,NULL,NULL,NULL,NULL);  \n" +
                "												END IF;  \n" +
                "												SET valid_umid_transfer = 1;  \n" +
                "  \n" +
                "												-- update old record toumid  \n" +
                "												UPDATE workorder_trans_umid_details  \n" +
                "												SET toRefUIDId=temp_umid_stock_id  \n" +
                "												WHERE id=temp_feeder_transID;  \n" +
                "  \n" +
                "												SET temp_last_inserted_umid_id = temp_feeder_transID;  \n" +
                "  \n" +
                "												-- transfer umid to bin  \n" +
                "												CALL Sproc_transfer_stock('Stock Transfer', NULL, NULL,  \n" +
                "													NULL,temp_eqp_bin_id, temp_umid_stock_id,  \n" +
                "													pCreatedBy, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL,  \n" +
                "													NULL, NULL, NULL, NULL, NULL,  \n" +
                "													\"UMID to Bin Transfer\",\"Feeder Transfer Material\",pwoTransID,  \n" +
                "													0,NULL,NULL,NULL,NULL);  \n" +
                "  \n" +
                "												-- SELECT pwoTransID;  \n" +
                "												-- insert new umid for workorder equipment feeder  \n" +
                "												INSERT INTO workorder_trans_umid_details  \n" +
                "													(`woTransID`,`eqpFeederID`,`refsidid`,  \n" +
                "													`mfgPNID`,`woOpEqpID`,`employeeId`, `woOpID`,  \n" +
                "													`assyQty`,`UOM`,`rfqLineItemsID`, `transactionType`,  \n" +
                "													`updatedBy`,`createdBy`, `reelStatus`)  \n" +
                "												VALUES  \n" +
                "													(pwoTransID, temp_eqpFeederID, temp_umid_stock_id,  \n" +
                "													temp_umid_comp_id, pwoOPEqpID, pemployeeId, pwoOpID,  \n" +
                "													NULL, NULL, temp_rfqLineItemsID, ptransactionType,  \n" +
                "													pCreatedBy, pCreatedBy, \"P\");  \n" +
                "  \n" +
                "												SELECT LAST_INSERT_ID() INTO temp_last_inserted_umid_id;  \n" +
                "												-- UMID SCANNED  \n" +
                "												SET result = fun_checkAndInsertError('FEED009', 0, 0, 0, 1, 0, NULL, NULL, NULL);  \n" +
                "											ELSE  \n" +
                "												-- WRONG_LOCATION  \n" +
                "												SET result = fun_checkAndInsertError('UMID018', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "											END IF;  \n" +
                "										ELSE  \n" +
                "											SET result = fun_checkAndInsertError('UMID009', 0, 1, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "										END IF;  \n" +
                "									ELSE  \n" +
                "										-- FAILED  \n" +
                "										SET result = fun_checkAndInsertError('FEED001', 1, 0, 0, 0, 0, NULL, NULL, NULL);  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "                    END IF;  \n" +
                "				-- END IF;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SET uidVerified = 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(  \n" +
                "		`scanString1`,		`scanString2`,		`string1PartID`,  \n" +
                "		`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                "		`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                "		`isDeleted`,		`createdBy`,		`createdAt`,  \n" +
                "		`woTransID`, 		`woOpEqpID`, 		`verificationType`)  \n" +
                "	VALUES (  \n" +
                "		pUMID,							CASE WHEN (pfeederLocation IS NULL) THEN '' ELSE pfeederLocation END,		temp_umid_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_umid_comp_id), 	temp_umid_mfgPN, 								temp_comp_id,  \n" +
                "		fun_getMfgCodeAndNameByPartID(temp_comp_id), 		temp_mfgpn,									CASE WHEN (uidVerified = 1 OR feederVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                "		0,							IFNULL(pCreatedBy,''),								fun_DatetimetoUTCDateTime(),  \n" +
                "		pwoTransID, 						pwoOpEqpID,									pverificationType  \n" +
                "	);  \n" +
                "  \n" +
                "	#1. return history of umid transfer  \n" +
                "	IF(valid_umid_transfer = 0) THEN  \n" +
                "		SELECT id FROM kit_allocation WHERE 1=0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#2. return history of verification  \n" +
                "	SELECT * FROM uid_verification_history WHERE id = LAST_INSERT_ID();  \n" +
                "  \n" +
                "	#3. return error  \n" +
                "	SELECT * FROM temp_scan_error WHERE errorText NOT IN ('UMID016','UMID042');  \n" +
                "  \n" +
                "	#4. return umid details  \n" +
                "	-- IF (uidVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_umid_details  \n" +
                "	SELECT id FROM component_sid_stock WHERE 1=0;  \n" +
                "	SELECT * FROM temp_umid_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#5. return feeder details  \n" +
                "	-- IF (feederVerified=1) THEN  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_feeder_details  \n" +
                "	SELECT id FROM workorder_operation_equipment_feeder_details WHERE 1=0;  \n" +
                "	SELECT * FROM temp_feeder_details;  \n" +
                "	-- END IF;  \n" +
                "  \n" +
                "	#6. return allocated UMID details  \n" +
                "	SELECT woSalesOrderDetID FROM workorder_salesorder_details  \n" +
                "	WHERE 1=0;  \n" +
                "  \n" +
                "	#7 return last inserted/updated records for umid transacrion  \n" +
                "	SELECT temp_last_inserted_umid_id;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5631,'2.00','V1','Sproc_ValidateScanUMIDFirst-Bug 39313: While scan UMID the error should not display.  - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5631:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentPackagingAliasGroup`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentPackagingAliasGroup`(  \n" +
                "    IN pPartId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET @temp_Sproc_GetComponentPackagingAliasGroup= CONCAT(\"select a.* from (SELECT  \n" +
                "							cpa.id,  \n" +
                "							co.id as componentID,  \n" +
                "							cpa.aliasgroupID,  \n" +
                "							co.id AS partID,  \n" +
                "							co.mfgPN AS mfgPN,  \n" +
                "							co.isCustom AS isCustom,  \n" +
                "							fun_GetFormattedMfgCode(m.mfgCode, co.mfgPN,\", vMfgCodeFormat,\") as displayMfgPN,  \n" +
                "							co.mfgType,  \n" +
                "							m.id AS mfgCodeID,  \n" +
                "							m.mfgCode AS mfgCode  \n" +
                "						FROM  \n" +
                "							component AS co  \n" +
                "								LEFT OUTER JOIN  \n" +
                "							component_packagingalias  \n" +
                "							 AS cpa ON cpa.componentID = co.id  \n" +
                "								AND (cpa.isDeleted = FALSE )  \n" +
                "								LEFT OUTER JOIN  \n" +
                "							mfgCodemst AS m ON co.mfgcodeID = m.id  \n" +
                "								AND m.isDeleted = FALSE  \n" +
                "							where co.isDeleted = 0 and  \n" +
                "                             cpa.aliasgroupID = (select packaginggroupID from component c where c.id = \",pPartId,\")  \n" +
                "                           and co.id != \",pPartId,\") as a\");  \n" +
                "  \n" +
                "		PREPARE query1 FROM @temp_Sproc_GetComponentPackagingAliasGroup;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5632,'2.00','V1',' Bug 39316: Global Point: 37916 Part master > ALT & ALIAS Tab - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5632:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021  ********************************** */
                "ALTER TABLE assembly_trans_history MODIFY COLUMN `remark` LONGTEXT;  \n" +
                /* **************************** New Script -> 08-12-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5633,'2.00','V1','Bug 39288: Qa Testing issues for #35099: Kit Activity Tracking - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5633:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_supplier_quote_parts`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_supplier_quote_parts`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	SET @SQl2 = CONCAT('update supplier_quote_part_attribute set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where supplierQuotePartDetID IN(',IDs,') and isDeleted = 0');  \n" +
                "	PREPARE stmt2 FROM @SQL2;  \n" +
                "	EXECUTE stmt2;  \n" +
                "	SET @SQl1 = CONCAT('update supplier_quote_parts_det set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where ID in(',IDs,') and deletedAt is NULL');  \n" +
                "	PREPARE stmt1 FROM @SQL1;  \n" +
                "	EXECUTE stmt1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_saveStartStopActivity`;  \n" +
                "CREATE PROCEDURE `Sproc_saveStartStopActivity`(  \n" +
                "	IN pRefTransID INT,  \n" +
                "	IN pUserId INT,  \n" +
                "	IN pIsActivityStart TINYINT,  \n" +
                "    IN pTransactionType VARCHAR(100),  \n" +
                "    IN pActivityType VARCHAR(100),  \n" +
                "    IN pRemark LONGTEXT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_UpdatedUserID INT;  \n" +
                "	DECLARE v_CurrentTime DATETIME;  \n" +
                "    DECLARE v_BurdenRate DECIMAL(13,3);  \n" +
                "    DECLARE v_PaymentMode VARCHAR(10);  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() INTO v_CurrentTime;  \n" +
                "    SELECT em.burdenRate, em.paymentMode INTO v_BurdenRate, v_PaymentMode  \n" +
                "		FROM users u JOIN employees em ON em.id = u.employeeID  \n" +
                "        WHERE u.id = pUserId;  \n" +
                "  \n" +
                "   IF(pTransactionType = 'B') THEN  \n" +
                "		IF(SELECT COUNT(1) FROM Component WHERE id = pRefTransID AND isActivityStart = 1 > 0) THEN  \n" +
                "			SELECT activityStartBy INTO v_UpdatedUserID FROM Component WHERE id = pRefTransID AND isActivityStart = 1;  \n" +
                "		END IF;  \n" +
                "	ELSEIF(pTransactionType = 'C') THEN  \n" +
                "		IF( SELECT COUNT(1) FROM rfq_assemblies WHERE id = pRefTransID AND isActivityStart = 1 > 0) THEN  \n" +
                "		SELECT activityStartBy INTO v_UpdatedUserID FROM rfq_assemblies WHERE id = pRefTransID AND isActivityStart = 1;  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "	IF v_UpdatedUserID IS NULL THEN  \n" +
                "		SET v_UpdatedUserID = pUserId;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsActivityStart THEN  \n" +
                "		IF(pTransactionType = 'B') THEN  \n" +
                "			UPDATE Component SET  \n" +
                "				isActivityStart = pIsActivityStart,  \n" +
                "				activityStartBy = pUserId,  \n" +
                "				activityStartAt = v_CurrentTime,  \n" +
                "                updateByRoleId = pRoleID  \n" +
                "			WHERE id = pRefTransID;  \n" +
                "		ELSEIF(pTransactionType = 'C') THEN  \n" +
                "			UPDATE rfq_assemblies SET  \n" +
                "				isActivityStart = pIsActivityStart,  \n" +
                "				activityStartBy = pUserId,  \n" +
                "				activityStartAt = v_CurrentTime,  \n" +
                "                updateByRoleId = pRoleID  \n" +
                "			WHERE id = pRefTransID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		INSERT INTO assembly_trans_history (`refTransID`, `transactionType`, `activityType`, `checkinTime`, `userID`, `burdenRate`, `paymentMode`, `remark`, `createdBy`,`createByRoleId`)  \n" +
                "        VALUES(pRefTransID, pTransactionType, pActivityType, v_CurrentTime, pUserId, v_BurdenRate, v_PaymentMode, pRemark, pUserId, pRoleID);  \n" +
                "	ELSE  \n" +
                "		IF(pTransactionType = 'B') THEN  \n" +
                "			UPDATE Component SET  \n" +
                "				isActivityStart = pIsActivityStart,  \n" +
                "				activityStartBy = pUserId,  \n" +
                "				activityStopAt = v_CurrentTime,  \n" +
                "                updateByRoleId = pRoleID  \n" +
                "			WHERE id = pRefTransID;  \n" +
                "		ELSEIF(pTransactionType = 'C') THEN  \n" +
                "			UPDATE rfq_assemblies SET  \n" +
                "				isActivityStart = pIsActivityStart,  \n" +
                "				activityStartBy = pUserId,  \n" +
                "				activityStopAt = v_CurrentTime,  \n" +
                "				activityStartAt = null,  \n" +
                "                updateByRoleId = pRoleID  \n" +
                "		WHERE id = pRefTransID;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "		SELECT a.id, a.checkinTime INTO @pid, @pcheckinTime FROM assembly_trans_history a WHERE a.refTransID = pRefTransID AND a.isDeleted = FALSE ORDER BY id DESC LIMIT 1;  \n" +
                "		UPDATE assembly_trans_history SET  \n" +
                "			checkoutTime = v_CurrentTime,  \n" +
                "			totalTime = TIMESTAMPDIFF(SECOND, @pcheckinTime, v_CurrentTime),  \n" +
                "			updatedBy = pUserId,  \n" +
                "			updatedAt = v_CurrentTime,  \n" +
                "            remark = pRemark,  \n" +
                "			updateByRoleId = pRoleID  \n" +
                "			 WHERE id = @pid;  \n" +
                "	END IF;  \n" +
                "	COMMIT;  \n" +
                "	SELECT 	v_UpdatedUserID,  \n" +
                "			(case when pIsActivityStart = 1 then v_CurrentTime else null end) activityStartAt,  \n" +
                "			(case when pIsActivityStart = 0 then v_CurrentTime else null end) activityStopAt;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 08-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_supplier_quote`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_supplier_quote`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempSupplier_quote_mst;  \n" +
                "	-- delete supplier quote mst if reference ID is not null  \n" +
                "	-- refernece ID is equal to salesOrderDetID  \n" +
                "    IF(IDs <> '') THEN  \n" +
                "		SET @SQL1 = CONCAT('CREATE TEMPORARY TABLE if not exists tempSupplier_quote_mst as  \n" +
                "			(SELECT COUNT(1) cnt, CASE WHEN COUNT(1) > 0 then \"supplier_quote_parts_det\" else \"\" end as msg FROM supplier_quote_parts_det WHERE isDeleted = 0  AND supplierQuoteMstID IN(',IDs,') LIMIT 1)  \n" +
                "			');  \n" +
                "		PREPARE stmt1 FROM @SQL1;  \n" +
                "		EXECUTE stmt1;  \n" +
                "  \n" +
                "	IF(countList = FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempSupplier_quote_mst t) = 0 THEN  \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			SET @SQl2 = CONCAT('update supplier_quote_mst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\"  \n" +
                "								where id IN(',IDs,') and isDeleted = 0');  \n" +
                "			PREPARE stmt2 FROM @SQL2;  \n" +
                "			EXECUTE stmt2;  \n" +
                "            SELECT * FROM tempSupplier_quote_mst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "            COMMIT;  \n" +
                "        ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempSupplier_quote_mst t;  \n" +
                "	    END IF;  \n" +
                "	 ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "				FROM tempSupplier_quote_mst t1  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "				ORDER BY t2.display_page_name;  \n" +
                "     END IF;  \n" +
                "	 DROP TEMPORARY TABLE IF EXISTS tempSupplier_quote_mst;  \n" +
                "ELSE  \n" +
                "		SET @SQl5 = CONCAT('update supplier_quote_mst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in (', IDs ,') and isDeleted = 0');  \n" +
                "		PREPARE stmt5 FROM @SQl5;  \n" +
                "		EXECUTE stmt5;  \n" +
                "		SELECT \"\" TotalCount ,\"\" AS Message FROM supplier_quote_mst WHERE id IN(IDs) AND isDeleted = 0 LIMIT 1;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierQuote`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuote`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pIsSummary TINYINT,  \n" +
                "	IN pSupplierIds VARCHAR(16000),  \n" +
                "	IN pQuoteStatus VARCHAR(1000),  \n" +
                "	IN pSearchType VARCHAR(5),  \n" +
                "	IN pAdvanceSearchSQ VARCHAR(100),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN pPartIds VARCHAR(16000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_MfgNameFormat VARCHAR(100);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO v_MfgNameFormat;  \n" +
                "  \n" +
                "	IF (pIsSummary = FALSE) THEN  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "				SELECT  \n" +
                "					s.id,  \n" +
                "					spd.id AS supplierQuotePartDetID,  \n" +
                "					fun_GetFormattedMfgCode(cm.mfgCode, cm.mfgName, \",v_MfgNameFormat,\") mfgName,  \n" +
                "					cm.mfgCode,  \n" +
                "					s.supplierID,  \n" +
                "					spd.partID,  \n" +
                "                    c.custAssyPN,  \n" +
                "					c.mfgPN AS mfgPN,  \n" +
                "                    c.mfgPNDescription,  \n" +
                "					c.mfgcodeID,  \n" +
                "					sc.mfgPN AS supplierPN,  \n" +
                "					spd.supplierPartID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "					IF(spd.isActive = 0, 'Inactive', 'Active') AS isActiveConvertedValueDetail,  \n" +
                "					spd.isActive,  \n" +
                "					spd.scanLabel,  \n" +
                "                    IF(s.quoteStatus = 'P',true, false) AS isDisabledDelete,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricing,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledCopySupplierQuote,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricingHistory,  \n" +
                "                    IF(spd.id IS NULL, false, true) AS isRequirementReference,  \n" +
                "					c.isCustom,  \n" +
                "					sc.isCustom AS isCustomSupplier,  \n" +
                "					rhc.rohsIcon,  \n" +
                "					rhc.name rohsName,  \n" +
                "					rhsc.rohsIcon supplierRohsIcon,  \n" +
                "					rhsc.name supplierRohsName,  \n" +
                "					fun_getPartAttibutesBySupplierQuoteDetailID(spd.id) AS attributesList,  \n" +
                "					fun_getPartPricingCountBySupplierQuoteDetailID(spd.id) AS pricingCount,  \n" +
                "					fun_getUserNameByID(spd.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(spd.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(spd.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(spd.createByRoleId) createdByRole  \n" +
                "				FROM  supplier_quote_parts_det spd  \n" +
                "				LEFT JOIN supplier_quote_mst s ON spd.supplierQuoteMstID = s.id AND s.isDeleted = 0  \n" +
                "				LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN rfq_rohsmst rhc ON c.id = rhc.id AND rhc.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "				LEFT JOIN rfq_rohsmst rhsc ON sc.id = rhsc.id AND rhsc.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst cm ON cm.id = c.mfgcodeID  AND cm.isDeleted = 0  \n" +
                "				WHERE spd.isDeleted = 0 \");  \n" +
                "	 ELSE  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "			SELECT 	s.id,  \n" +
                "					s.supplierID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "                    IF(s.quoteStatus = 'P', true, false) AS isDisabledDelete,  \n" +
                "					fun_getAddressbyID(s.shippingAddressID) shipTo,  \n" +
                "					fun_getAddressbyID(s.billingAddressID) billTo,  \n" +
                "                    (SELECT COUNT(0) FROM supplier_quote_parts_det WHERE isDeleted = 0 AND supplierQuoteMstID = s.id) AS noOfSupplierPartLine,  \n" +
                "					fun_getUserNameByID(s.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(s.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(s.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(s.createByRoleId) createdByRole  \n" +
                "			FROM   supplier_quote_mst s  \n" +
                "			LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "			WHERE  s.isDeleted = 0  AND  \n" +
                "            (CASE WHEN ('\",pPartIds,\"' != '') THEN  \n" +
                "				s.id IN  (SELECT spd.supplierQuoteMstID FROM  \n" +
                "				supplier_quote_parts_det spd  \n" +
                "                LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "                WHERE spd.isDeleted = 0 AND (FIND_IN_SET(spd.supplierPartID, ('\",pPartIds,\"')) OR FIND_IN_SET(spd.partID, ('\",pPartIds,\"'))))  \n" +
                "				ELSE 1 = 1 END)  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSupplierIds IS NOT NULL OR pSupplierIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND supplierID in (\"',pSupplierIds,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pQuoteStatus IS NOT NULL OR pQuoteStatus != '') THEn  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND quoteStatus in (\"',pQuoteStatus,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pAdvanceSearchSQ IS NOT NULL OR pAdvanceSearchSQ != '') THEN  \n" +
                "		IF(pSearchType = 'E') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber = \"', pAdvanceSearchSQ , '\" ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber LIKE \"%', pAdvanceSearchSQ ,'%\" ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''' and quoteDate <= ''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate <= ''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPartIds != '' AND (pIsSummary = FALSE)) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( supplierPartID in (\"',pPartIds,'\") OR partID in (\"',pPartIds,'\") )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuote,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuote,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "   PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierQuotePartList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuotePartList`(  \n" +
                "	IN pPageIndex INT(11),  \n" +
                "	IN pRecordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pSupplierQuoteMstID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET @temp_Sproc_RetrieveSupplierQuotePartList=CONCAT(\"  \n" +
                "		SELECT  \n" +
                "        sqpd.id,  \n" +
                "        sqpd.partID,  \n" +
                "        sqpd.supplierPartID,  \n" +
                "        sqpd.supplierQuoteMstID,  \n" +
                "        c.custAssyPN,  \n" +
                "        c.mfgPN AS mfgPN,  \n" +
                "        c.mfgPNDescription,  \n" +
                "        c.mfgcodeID,  \n" +
                "        sqm.supplierID,  \n" +
                "        sqm.quoteStatus,  \n" +
                "        sqpd.scanLabel,  \n" +
                "        fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "		fun_getMfgNameByID(sqm.supplierID) supplier,  \n" +
                "        fun_getMfgCodeByID(c.mfgcodeID) mfgCode,  \n" +
                "        fun_getMfgCodeByID(sc.mfgcodeID) supplierCode,  \n" +
                "        sc.mfgPN AS supplierPN,  \n" +
                "        sqpd.isActive,  \n" +
                "        (  \n" +
                "				CASE  \n" +
                "					WHEN (`sqpd`.`isActive` = 0) THEN 'Inactive'  \n" +
                "					WHEN (`sqpd`.`isActive` = 1) THEN 'Active'  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS `isActiveConvertedValue`,  \n" +
                "        c.isCustom,  \n" +
                "        sc.isCustom AS isCustomSupplier,  \n" +
                "		fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
                "        fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "        fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon,  \n" +
                "        fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "        fun_getPartAttibutesBySupplierQuoteDetailID(sqpd.id) AS attributesList,  \n" +
                "        fun_getPartPricingCountBySupplierQuoteDetailID(sqpd.id) AS pricingCount,  \n" +
                "        fun_getUserNameByID(sqpd.createdBy) createdby,  \n" +
                "		fun_getUserNameByID(sqpd.updatedBy) updatedby,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(sqpd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(sqpd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "        fun_getRoleByID(sqpd.updateByRoleId) updatedbyRole  \n" +
                "    FROM		supplier_quote_parts_det sqpd  \n" +
                "	LEFT JOIN 	supplier_quote_mst sqm ON sqpd.supplierQuoteMstID = sqm.id AND sqm.deletedAt IS NULL  \n" +
                "	LEFT JOIN 	component c ON sqpd.partID = c.id AND c.deletedAt IS NULL  \n" +
                "	LEFT JOIN	component sc ON sqpd.supplierPartID = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "	WHERE   sqpd.supplierQuoteMstID = \",pSupplierQuoteMstID,\"  \n" +
                "	AND 	sqpd.deletedAt IS NULL  \n" +
                "    \");  \n" +
                "  \n" +
                "  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    /* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuotePartList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuotePartList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5634,'2.00','V1','Bug 39298 & Bug 39288 - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5634:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `TRG_BU_salesorderdet` ;  \n" +
                "CREATE TRIGGER `TRG_BU_salesorderdet` BEFORE UPDATE ON `salesorderdet`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	IF NEW.isDeleted=0 THEN  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM salesordermst sm WHERE sm.isDeleted = 0  \n" +
                "		AND sm.id = NEW.refSalesOrderID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM component c WHERE c.isDeleted = 0  \n" +
                "		AND c.id = NEW.partID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `TRG_BU_salesshippingmst` ;  \n" +
                "CREATE TRIGGER `TRG_BU_salesshippingmst` BEFORE UPDATE ON `salesshippingmst`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	IF NEW.isDeleted=0 THEN  \n" +
                "  \n" +
                "	        IF( (SELECT COUNT(1)  FROM salesorderdet sd WHERE sd.isDeleted = 0  \n" +
                "		AND sd.id = NEW.sDetID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM salesordermst sm JOIN salesorderdet sd ON sd.refsalesOrderID=sm.id AND sd.isdeleted=0 WHERE sm.isDeleted = 0  \n" +
                "		AND sd.id = NEW.sDetID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `TRG_BU_salesorder_otherexpense_details` ;  \n" +
                "CREATE TRIGGER `TRG_BU_salesorder_otherexpense_details` BEFORE UPDATE ON `salesorder_otherexpense_details`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	IF NEW.isDeleted=0 THEN  \n" +
                "  \n" +
                "	        IF( (SELECT COUNT(1)  FROM salesorderdet sd WHERE sd.isDeleted = 0  \n" +
                "		AND sd.id = NEW.refSalesOrderDetID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM salesordermst sm JOIN salesorderdet sd ON sd.refsalesOrderID=sm.id AND sd.isdeleted=0 WHERE sm.isDeleted = 0  \n" +
                "		AND sd.id = NEW.refSalesOrderDetID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM component c WHERE c.isDeleted = 0  \n" +
                "		AND c.id = NEW.partID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `TRG_BU_salesorder_plan_detailsmst` ;  \n" +
                "CREATE TRIGGER `TRG_BU_salesorder_plan_detailsmst` BEFORE UPDATE ON `salesorder_plan_detailsmst`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	IF NEW.isDeleted=0 THEN  \n" +
                "  \n" +
                "	        IF( (SELECT COUNT(1)  FROM salesorderdet sd WHERE sd.isDeleted = 0  \n" +
                "		AND sd.id = NEW.salesOrderDetID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM salesordermst sm JOIN salesorderdet sd ON sd.refsalesOrderID=sm.id AND sd.isdeleted=0 WHERE sm.isDeleted = 0  \n" +
                "		AND sd.id = NEW.salesOrderDetID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `TRG_BU_salesorderdet_commission_attribute_mstdet` ;  \n" +
                "CREATE TRIGGER `TRG_BU_salesorderdet_commission_attribute_mstdet` BEFORE UPDATE ON `salesorderdet_commission_attribute_mstdet`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	IF NEW.isDeleted=0 THEN  \n" +
                "  \n" +
                "	        IF( (SELECT COUNT(1)  FROM salesorderdet sd WHERE sd.isDeleted = 0  \n" +
                "		AND sd.id = NEW.refSalesOrderDetID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM salesordermst sm JOIN salesorderdet sd ON sd.refsalesOrderID=sm.id AND sd.isdeleted=0 WHERE sm.isDeleted = 0  \n" +
                "		AND sd.id = NEW.refSalesOrderDetID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `TRG_BI_salesorderdet` ;  \n" +
                "CREATE TRIGGER `TRG_BI_salesorderdet` BEFORE INSERT ON `salesorderdet`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM salesordermst sm WHERE sm.isDeleted = 0  \n" +
                "		AND sm.id = NEW.refSalesOrderID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM component c WHERE c.isDeleted = 0  \n" +
                "		AND c.id = NEW.partID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `TRG_BI_salesshippingmst` ;  \n" +
                "CREATE TRIGGER `TRG_BI_salesshippingmst` BEFORE INSERT ON `salesshippingmst`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM salesorderdet sd WHERE sd.isDeleted = 0  \n" +
                "		AND sd.id = NEW.sDetID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM salesordermst sm JOIN salesorderdet sd ON sd.refsalesOrderID=sm.id AND sd.isdeleted=0 WHERE sm.isDeleted = 0  \n" +
                "		AND sd.id = NEW.sDetID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `TRG_BI_salesorder_otherexpense_details` ;  \n" +
                "CREATE TRIGGER `TRG_BI_salesorder_otherexpense_details` BEFORE INSERT ON `salesorder_otherexpense_details`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM salesorderdet sd WHERE sd.isDeleted = 0  \n" +
                "		AND sd.id = NEW.refSalesOrderDetID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM salesordermst sm JOIN salesorderdet sd ON sd.refsalesOrderID=sm.id AND sd.isdeleted=0 WHERE sm.isDeleted = 0  \n" +
                "		AND sd.id = NEW.refSalesOrderDetID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM component c WHERE c.isDeleted = 0  \n" +
                "		AND c.id = NEW.partID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `TRG_BI_salesorder_plan_detailsmst` ;  \n" +
                "CREATE TRIGGER `TRG_BI_salesorder_plan_detailsmst` BEFORE INSERT ON `salesorder_plan_detailsmst`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM salesorderdet sd WHERE sd.isDeleted = 0  \n" +
                "		AND sd.id = NEW.salesOrderDetID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM salesordermst sm JOIN salesorderdet sd ON sd.refsalesOrderID=sm.id AND sd.isdeleted=0 WHERE sm.isDeleted = 0  \n" +
                "		AND sd.id = NEW.salesOrderDetID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `TRG_BI_salesorderdet_commission_attribute_mstdet` ;  \n" +
                "CREATE TRIGGER `TRG_BI_salesorderdet_commission_attribute_mstdet` BEFORE INSERT ON `salesorderdet_commission_attribute_mstdet`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM salesorderdet sd WHERE sd.isDeleted = 0  \n" +
                "		AND sd.id = NEW.refSalesOrderDetID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM salesordermst sm JOIN salesorderdet sd ON sd.refsalesOrderID=sm.id AND sd.isdeleted=0 WHERE sm.isDeleted = 0  \n" +
                "		AND sd.id = NEW.refSalesOrderDetID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesordermst` ;  \n" +
                "CREATE TRIGGER `Trg_AU_salesordermst` AFTER UPDATE ON `salesordermst`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "    IF (IFNULL(OLD.blanketPOOption,0)=3 AND IFNULL(NEW.blanketPOOption,0)!=3) OR (IFNULL(OLD.blanketPOOption,0)!=3 AND IFNULL(NEW.blanketPOOption,0)=3) THEN  \n" +
                "    CREATE TEMPORARY TABLE IF NOT EXISTS tempsalesDet  \n" +
                "       SELECT sd.id FROM salesorderdet sd WHERE sd.refSalesOrderID=NEW.id AND NEW.isDeleted=0;  \n" +
                "       IF(IFNULL(OLD.blanketPOOption,0)=3 AND IFNULL(NEW.blanketPOOption,0)!=3)THEN  \n" +
                "		UPDATE salesshippingmst ss SET ss.poReleaseNumber=NULL WHERE ss.sDetID IN (SELECT sd.id FROM tempsalesDet sd) AND ss.isdeleted=0;  \n" +
                "       END IF;  \n" +
                "       IF(IFNULL(OLD.blanketPOOption,0)!=3 AND IFNULL(NEW.blanketPOOption,0)=3)THEN  \n" +
                "		UPDATE salesshippingmst ss SET ss.poReleaseNumber=CONCAT(new.poNumber,'-',ss.customerReleaseLine) WHERE ss.sDetID IN (SELECT sd.id FROM tempsalesDet sd) AND ss.isdeleted=0;  \n" +
                "       END IF;  \n" +
                "      DROP TEMPORARY TABLE IF EXISTS tempsalesDet;  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.salesOrderNumber,0) != IFNULL(NEW.salesOrderNumber,0) THEN  \n" +
                "       UPDATE customer_packingslip SET soNumber=NEW.salesOrderNumber,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SALESORDERNUMBER',CAST(OLD.salesOrderNumber AS CHAR),  \n" +
                "       CAST(new.salesOrderNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "    UPDATE customer_packingslip SET poNumber=NEW.poNumber,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'PONUMBER',CAST(OLD.poNumber AS CHAR),  \n" +
                "       CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "    UPDATE customer_packingslip SET poDate=NEW.poDate,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'PODATE',CAST(OLD.poDate AS CHAR),  \n" +
                "       CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.customerID,0) != IFNULL(NEW.customerID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'CUSTOMERID', CAST(OLD.customerID AS CHAR),  \n" +
                "       CAST(new.customerID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'CONTACTPERSONID', CAST(OLD.contactPersonID AS CHAR),  \n" +
                "       CAST(new.contactPersonID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.billingAddressID,0) != IFNULL(NEW.billingAddressID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'BILLINGADDRESSID', CAST(OLD.billingAddressID AS CHAR),  \n" +
                "       CAST(new.billingAddressID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingAddressID ,0) != IFNULL(NEW.shippingAddressID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGADDRESSID', CAST(OLD.shippingAddressID AS CHAR),  \n" +
                "       CAST(new.shippingAddressID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingMethodID ,0) != IFNULL(NEW.shippingMethodID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGMETHODID', CAST(OLD.shippingMethodID AS CHAR),  \n" +
                "       CAST(new.shippingMethodID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REVISION', CAST(OLD.revision AS CHAR),  \n" +
                "       CAST(new.revision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGCOMMENT', CAST(OLD.shippingComment AS CHAR),  \n" +
                "       CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "     IF IFNULL(OLD.internalComment ,0) != IFNULL(NEW.internalComment ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'INTERNALCOMMENT', CAST(OLD.internalComment AS CHAR),  \n" +
                "       CAST(new.internalComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.termsID ,0) != IFNULL(NEW.termsID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'TERMSID', CAST(OLD.termsID AS CHAR),  \n" +
                "       CAST(new.termsID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'STATUS', CAST(OLD.status AS CHAR),  \n" +
                "       CAST(new.status AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.soDate ,0) != IFNULL(NEW.soDate ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SODATE', CAST(OLD.soDate AS CHAR),  \n" +
                "       CAST(new.soDate AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.revisionChangeNote ,0) != IFNULL(NEW.revisionChangeNote ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REVISIONCHANGENOTE', CAST(OLD.revisionChangeNote AS CHAR),  \n" +
                "       CAST(new.revisionChangeNote AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'BLANKETPO', CASE WHEN old.isBlanketPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "      CASE WHEN new.isBlanketPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'POREVISION', CAST(OLD.poRevision AS CHAR),  \n" +
                "      CAST(NEW.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'', CAST(OLD.isDeleted AS CHAR),  \n" +
                "       CAST(new.isDeleted AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isRmaPO ,0) != IFNULL(NEW.isRmaPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'RMAPO', CASE WHEN old.isRmaPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.isRmaPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isLegacyPO ,0) != IFNULL(NEW.isLegacyPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'LEGACYPO', CASE WHEN old.isLegacyPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.isLegacyPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.originalPODate ,0) != IFNULL(NEW.originalPODate ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'ORGPODATE', CAST(DATE_FORMAT(OLD.originalPODate, \"%m/%d/%Y\") AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(new.originalPODate, \"%m/%d/%Y\") AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.rmaNumber ,0) != IFNULL(NEW.rmaNumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'RMANUMBER', CAST(OLD.rmaNumber AS CHAR),  \n" +
                "       CAST(new.rmaNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isDebitedByCustomer ,0) != IFNULL(NEW.isDebitedByCustomer ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'DEBITBYCUST', CASE WHEN OLD.isDebitedByCustomer=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "        CASE WHEN new.isDebitedByCustomer=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.orgPONumber ,0) != IFNULL(NEW.orgPONumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'ORGPONUMBER', CAST(OLD.orgPONumber AS CHAR),  \n" +
                "       CAST(new.orgPONumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isReworkRequired ,0) != IFNULL(NEW.isReworkRequired ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REWORKREQ', CASE WHEN OLD.isReworkRequired=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "        CASE WHEN new.isReworkRequired=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.reworkPONumber ,0) != IFNULL(NEW.reworkPONumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REWORKPONUMBER', CAST(OLD.reworkPONumber AS CHAR),  \n" +
                "       CAST(new.reworkPONumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 and vuss.blanketPOOption=2 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				vuss.blanketPOOption,  \n" +
                "				vuss.blanketPOOptionText,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToreturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount ,  \n" +
                "				vuss.rmaNumber,vuss.isDebitedByCustomer, vuss.debitedByCustText,  \n" +
                "				vuss.rmaOrgPONumber,vuss.orgSalesOrderID,vuss.isReworkRequired,  \n" +
                "				vuss.reworkReqText, vuss.reworkPONumber,vuss.custOrgPOLineNumber \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID  \n" +
                "					ORDER BY w.woID ASC ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'' OR rmaNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''' OR rmaNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "    IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsRmaPO = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isRmaPO = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5635,'2.00','V1',' User Story 39322: Check Parent Existence on add/update/delete detail records in SO - Champak '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5635:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_BI_customer_packingslip_otherexpense_details;  \n" +
                "CREATE TRIGGER `Trg_BI_customer_packingslip_otherexpense_details` BEFORE INSERT ON `customer_packingslip_otherexpense_details` FOR EACH ROW BEGIN  \n" +
                "	IF( (select count(1)  from customer_packingslip_det cpd where cpd.isDeleted = 0  \n" +
                "		and cpd.id = NEW.refCustomerPackingSlipDetID) = 0 )   THEN  \n" +
                "        SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF( (select count(1)  \n" +
                "		from  customer_packingslip cp  \n" +
                "        JOIN customer_packingslip_det cpd  ON cp.id = cpd.refCustPackingSlipID and cpd.isDeleted = 0  \n" +
                "        where cp.isDeleted = 0  \n" +
                "		and cpd.id = NEW.refCustomerPackingSlipDetID) = 0 )   THEN  \n" +
                "        SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5636,'2.00','V1','Trg_BI_customer_packingslip_otherexpense_details - User Story 39253: Check Parent Existence   - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5636:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_BU_customer_packingslip_otherexpense_details;  \n" +
                "CREATE TRIGGER `Trg_BU_customer_packingslip_otherexpense_details` BEFORE UPDATE ON `customer_packingslip_otherexpense_details` FOR EACH ROW BEGIN  \n" +
                "	IF NEW.isDeleted = 0 THEN  \n" +
                "		IF( (select count(1)  from customer_packingslip_det cpd where cpd.isDeleted = 0  \n" +
                "			and cpd.id = NEW.refCustomerPackingSlipDetID) = 0 )   THEN  \n" +
                "			SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF( (select count(1)  \n" +
                "			from  customer_packingslip cp  \n" +
                "			JOIN customer_packingslip_det cpd  ON cp.id = cpd.refCustPackingSlipID and cpd.isDeleted = 0  \n" +
                "			where cp.isDeleted = 0  \n" +
                "			and cpd.id = NEW.refCustomerPackingSlipDetID) = 0 )   THEN  \n" +
                "			SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5637,'2.00','V1',' Trg_BU_customer_packingslip_otherexpense_details - User Story 39253: Check Parent Existence - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5637:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_BI_customer_packingslip_commission_attribute_mstdet;  \n" +
                "CREATE TRIGGER `Trg_BI_customer_packingslip_commission_attribute_mstdet` BEFORE INSERT ON `customer_packingslip_commission_attribute_mstdet` FOR EACH ROW BEGIN  \n" +
                "	IF((select count(1) from customer_packingslip_det cpd  \n" +
                "			where cpd.isDeleted = 0 and cpd.id = NEW.refCustPackingSlipDetID) = 0) THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "	END IF;  \n" +
                "    IF((Select count(1) from  customer_packingslip cp  \n" +
                "        JOIN customer_packingslip_det cpd  ON cp.id = cpd.refCustPackingSlipID and cpd.isDeleted = 0  \n" +
                "		where cpd.isDeleted = 0 and cpd.id = NEW.refCustPackingSlipDetID) = 0) THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5638,'2.00','V1','Trg_BI_customer_packingslip_commission_attribute_mstdet - User Story 39253: Check Parent Existence  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5638:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_BU_customer_packingslip_commission_attribute_mstdet;  \n" +
                "CREATE TRIGGER `Trg_BU_customer_packingslip_commission_attribute_mstdet` BEFORE UPDATE ON `customer_packingslip_commission_attribute_mstdet` FOR EACH ROW BEGIN  \n" +
                "	IF NEW.isDeleted = 0 THEN  \n" +
                "		IF((select count(1) from customer_packingslip_det cpd  \n" +
                "				where cpd.isDeleted = 0 and cpd.id = NEW.refCustPackingSlipDetID) = 0) THEN  \n" +
                "			SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "		IF((Select count(1) from  customer_packingslip cp  \n" +
                "			JOIN customer_packingslip_det cpd  ON cp.id = cpd.refCustPackingSlipID and cpd.isDeleted = 0  \n" +
                "			where cpd.isDeleted = 0 and cpd.id = NEW.refCustPackingSlipDetID) = 0) THEN  \n" +
                "			SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5639,'2.00','V1',' Trg_BU_customer_packingslip_commission_attribute_mstdet - User Story 39253: Check Parent Existence- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5639:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_BI_customer_packingslip_commission_attribute;  \n" +
                "CREATE TRIGGER `Trg_BI_customer_packingslip_commission_attribute` BEFORE INSERT ON `customer_packingslip_commission_attribute` FOR EACH ROW BEGIN  \n" +
                "	IF((select count(1) from customer_packingslip_commission_attribute_mstdet cpm  \n" +
                "			where cpm.isDeleted = 0 and cpm.id = NEW.refcustInvoiceCommissionID) = 0) THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "	END IF;  \n" +
                "	IF((select count(1) from customer_packingslip_det cpd  \n" +
                "			where cpd.isDeleted = 0 and cpd.id = NEW.refCustPackingSlipDetID) = 0) THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "	END IF;  \n" +
                "    IF((Select count(1) from  customer_packingslip cp  \n" +
                "        JOIN customer_packingslip_det cpd  ON cp.id = cpd.refCustPackingSlipID and cpd.isDeleted = 0  \n" +
                "		where cpd.isDeleted = 0 and cpd.id = NEW.refCustPackingSlipDetID) = 0) THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5640,'2.00','V1','Trg_BI_customer_packingslip_commission_attribute- User Story 39253: Check Parent Existence  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5640:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_BU_customer_packingslip_commission_attribute;  \n" +
                "CREATE TRIGGER `Trg_BU_customer_packingslip_commission_attribute` BEFORE UPDATE ON `customer_packingslip_commission_attribute` FOR EACH ROW BEGIN  \n" +
                "	IF NEW.isDeleted = 0 THEN  \n" +
                "		IF((select count(1) from customer_packingslip_commission_attribute_mstdet cpm  \n" +
                "				where cpm.isDeleted = 0 and cpm.id = NEW.refcustInvoiceCommissionID) = 0) THEN  \n" +
                "			SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "		IF((select count(1) from customer_packingslip_det cpd  \n" +
                "				where cpd.isDeleted = 0 and cpd.id = NEW.refCustPackingSlipDetID) = 0) THEN  \n" +
                "			SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "		IF((Select count(1) from  customer_packingslip cp  \n" +
                "			JOIN customer_packingslip_det cpd  ON cp.id = cpd.refCustPackingSlipID and cpd.isDeleted = 0  \n" +
                "			where cpd.isDeleted = 0 and cpd.id = NEW.refCustPackingSlipDetID) = 0) THEN  \n" +
                "			SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "     END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5641,'2.00','V1','Trg_BU_customer_packingslip_commission_attribute- User Story 39253: Check Parent Existence   - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5641:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_BI_customer_packing_slip_track_number;  \n" +
                "CREATE TRIGGER `Trg_BI_customer_packing_slip_track_number` BEFORE INSERT ON `customer_packing_slip_track_number` FOR EACH ROW BEGIN  \n" +
                "	IF ((select count(1) from customer_packingslip cps  \n" +
                "		where cps.isDeleted = 0 and cps.id = NEW.refCustPackingSlipID) = 0 ) THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5642,'2.00','V1','Trg_BI_customer_packing_slip_track_number-User Story 39253: Check Parent Existence- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5642:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_BU_customer_packing_slip_track_number;  \n" +
                "CREATE TRIGGER `Trg_BU_customer_packing_slip_track_number` BEFORE UPDATE ON `customer_packing_slip_track_number` FOR EACH ROW BEGIN  \n" +
                "	IF NEW.isDeleted = 0 THEN  \n" +
                "		IF ((select count(1) from customer_packingslip cps  \n" +
                "			where cps.isDeleted = 0 and cps.id = NEW.refCustPackingSlipID) = 0 ) THEN  \n" +
                "			SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5643,'2.00','V1','Trg_BU_customer_packing_slip_track_number-User Story 39253: Check Parent Existence- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5643:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_BI_customer_packingslip_det;  \n" +
                "CREATE TRIGGER `Trg_BI_customer_packingslip_det` BEFORE INSERT ON `customer_packingslip_det` FOR EACH ROW BEGIN  \n" +
                "	IF((select count(1)  \n" +
                "		from customer_packingslip  \n" +
                "        where id = NEW.refCustPackingSlipID and isDeleted = 0) = 0 ) THEN  \n" +
                "		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "     END IF;  \n" +
                "     IF((select count(1)  \n" +
                "		from component  \n" +
                "        where id = NEW.partId and isDeleted = 0) = 0 ) THEN  \n" +
                "		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "     END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5644,'2.00','V1','Trg_BI_customer_packingslip_det-User Story 39253: Check Parent Existence- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5644:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_BU_customer_packingslip_det;  \n" +
                "CREATE TRIGGER `Trg_BU_customer_packingslip_det` BEFORE UPDATE ON `customer_packingslip_det` FOR EACH ROW BEGIN  \n" +
                "	IF NEW.isDeleted = 0 THEN  \n" +
                "		IF((select count(1) from customer_packingslip  \n" +
                "			where id = NEW.refCustPackingSlipID and isDeleted = 0) = 0 ) THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		 END IF;  \n" +
                "		 IF((select count(1) from component  \n" +
                "			where id = NEW.partId and isDeleted = 0) = 0 ) THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		 END IF;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5645,'2.00','V1','Trg_BU_customer_packingslip_det-User Story 39253: Check Parent Existence- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5645:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_purchase_order_det`;  \n" +
                "CREATE TRIGGER `Trg_BI_purchase_order_det` BEFORE INSERT ON `purchase_order_det` FOR EACH ROW BEGIN  \n" +
                "	IF (SELECT COUNT(1) FROM purchase_order_mst WHERE id = NEW.refPurchaseOrderID AND isdeleted = true) = 1 THEN  \n" +
                "		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BU_purchase_order_det`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `Trg_BU_purchase_order_det` BEFORE UPDATE ON `purchase_order_det` FOR EACH ROW BEGIN  \n" +
                "	IF(NEW.isdeleted = 0) THEN  \n" +
                "		IF (SELECT COUNT(1) FROM purchase_order_mst WHERE id = NEW.refPurchaseOrderID AND isdeleted = true) = 1 THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +


                /* **************************** Add Script Version -> 08-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5646,'2.00','V1',' Bug 39241: System is allow to add Line detail of deleted record [ PO ] - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5646:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_purchase_order_line_othercharges`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `Trg_BI_purchase_order_line_othercharges` BEFORE INSERT ON `purchase_order_line_othercharges` FOR EACH ROW BEGIN  \n" +
                "	IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = NEW.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
                "		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BU_purchase_order_line_othercharges`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `Trg_BU_purchase_order_line_othercharges` BEFORE UPDATE ON `purchase_order_line_othercharges` FOR EACH ROW BEGIN  \n" +
                "	IF(NEW.isdeleted = 0) THEN  \n" +
                "		IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = NEW.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 08-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5647,'2.00','V1',' Bug 39241: System is allow to add Line detail of deleted record [ PO ] - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5647:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_purchase_order_line_release_det`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `Trg_BI_purchase_order_line_release_det` BEFORE INSERT ON `purchase_order_line_release_det` FOR EACH ROW BEGIN  \n" +
                "	IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = NEW.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
                "		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_BU_purchase_order_line_release_det`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `TRG_BU_purchase_order_line_release_det` BEFORE UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN  \n" +
                "	IF(NEW.isdeleted = 0) THEN  \n" +
                "		IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = NEW.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (NEW.qty = NEW.receivedQty AND NEW.poLineWorkingStatus='P') THEN  \n" +
                "			SET NEW.poLineWorkingStatus='C';  \n" +
                "			SET NEW.poLineCompleteType='Auto';  \n" +
                "		ELSEIF ((NEW.qty > NEW.receivedQty AND NEW.poLineCompleteType != 'Manual') OR (NEW.qty != OLD.qty AND New.poLineCompleteType = 'Manual' AND NEW.poLineWorkingStatus='C')) THEN  \n" +
                "			SET NEW.poLineWorkingStatus='P';  \n" +
                "			SET NEW.poLineCompleteType=null;  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 08-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5648,'2.00','V1',' Bug 39241: System is allow to add Line detail of deleted record [ PO ] - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5648:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_purchase_order_line_requirement_det`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `Trg_BI_purchase_order_line_requirement_det` BEFORE INSERT ON `purchase_order_line_requirement_det` FOR EACH ROW BEGIN  \n" +
                "	IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = New.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
                "		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BU_purchase_order_line_requirement_det`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `Trg_BU_purchase_order_line_requirement_det` BEFORE UPDATE ON `purchase_order_line_requirement_det` FOR EACH ROW BEGIN  \n" +
                "	IF(NEW.isdeleted = 0) THEN  \n" +
                "		IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = NEW.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_UK_MANUAL_BI_packing_slip_material_receive`;  \n" +
                "CREATE DEFINER=`root`@`localhost` TRIGGER `TRG_UK_MANUAL_BI_packing_slip_material_receive` BEFORE INSERT ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMessage varchar(500) default '';  \n" +
                "	IF ((NEW.CreditMemoType = 'RC' or NEW.receiptType = 'I') AND /*Invoice Created VAlidation from PS*/  \n" +
                "		( SELECT COUNT(1)  \n" +
                "			FROM packing_slip_material_receive  \n" +
                "		   WHERE packingSlipNumber = NEW.packingSlipNumber  \n" +
                "			 AND mfgCodeID = New.mfgCodeID  \n" +
                "			 AND receiptType = (CASE WHEN NEW.CreditMemoType = 'RC' THEN 'C' ELSE 'I' END)  \n" +
                "			 AND isdeleted = 0  \n" +
                "		) > 0 )  \n" +
                "	THEN  \n" +
                "		set vMessage = concat('Packing slip# ' ,NEW.packingSlipNumber,'''s supplier invoice is already created.');  \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /*Invoice Number Duplicate VAlidation*/  \n" +
                "    if NEW.receiptType = 'I' AND ( (select count(1)  \n" +
                "								  from packing_slip_material_receive  \n" +
                "								 where receiptType = 'I'  \n" +
                "								   and invoiceNumber = NEW.invoiceNumber  \n" +
                "                                   and mfgCodeID = NEW.mfgCodeID  \n" +
                "								   and isDeleted = 0) > 0)  \n" +
                "    then  \n" +
                "		set vMessage = concat('This Invoice# ', NEW.invoiceNumber ,' is already exists. Please enter unique Invoice#.');  \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
                "    end  if;  \n" +
                "  \n" +
                "    /*Packing Slip nmber duplicate validation*/  \n" +
                "    if NEW.receiptType = 'P' AND ( (select count(1)  \n" +
                "								  from packing_slip_material_receive  \n" +
                "								 where receiptType = 'P'  \n" +
                "								   and packingSlipNumber  = NEW.packingSlipNumber  \n" +
                "								   and mfgCodeID = NEW.mfgCodeID  \n" +
                "								   and isDeleted = 0) > 0)  \n" +
                "    then  \n" +
                "		set vMessage = concat('This packing slip# ', NEW.packingSlipNumber ,' is already exists. Please enter unique packing slip#.');  \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
                "    end  if;  \n" +
                "  \n" +
                "     /*Credit memo# duplicate validation*/  \n" +
                "     if NEW.receiptType = 'C' AND ( (select count(1)  \n" +
                "								  from packing_slip_material_receive  \n" +
                "								 where ((creditMemoNumber = NEW.creditMemoNumber AND receiptType = 'C')  \n" +
                "										OR (refSupplierCreditMemoNumber = NEW.creditMemoNumber AND receiptType = 'D'))  \n" +
                "								   and mfgCodeID = NEW.mfgCodeID  \n" +
                "								   and isDeleted = 0) > 0)  \n" +
                "    then  \n" +
                "		set vMessage = concat('This Credit Memo# ', NEW.creditMemoNumber ,' is already exists. Please enter unique Credit Memo#.');  \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
                "    end  if;  \n" +
                "  \n" +
                "    /*ref Supplier Credit memo# duplicate validation*/  \n" +
                "     if NEW.receiptType = 'D' and NEW.refSupplierCreditMemoNumber is not null  \n" +
                "		AND ((select count(1)  \n" +
                "			    from packing_slip_material_receive  \n" +
                "			   where ((creditMemoNumber = NEW.refSupplierCreditMemoNumber AND receiptType = 'C')  \n" +
                "						OR (refSupplierCreditMemoNumber = NEW.refSupplierCreditMemoNumber AND receiptType = 'D'))  \n" +
                "			     and mfgCodeID = NEW.mfgCodeID  \n" +
                "			     and isDeleted = 0) > 0)  \n" +
                "    then  \n" +
                "		set vMessage = concat('This Credit Memo# ', NEW.refSupplierCreditMemoNumber ,' is already exists. Please enter unique Credit Memo#.');  \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
                "    end  if;  \n" +
                "  \n" +
                "     /*Debit memo# duplicate validation*/  \n" +
                "     if NEW.receiptType = 'D' AND ( (select count(1)  \n" +
                "								  from packing_slip_material_receive  \n" +
                "								 where debitMemoNumber = NEW.debitMemoNumber  \n" +
                "								   AND receiptType = 'D'  \n" +
                "								   and mfgCodeID = NEW.mfgCodeID  \n" +
                "								   and isDeleted = 0) > 0)  \n" +
                "    then  \n" +
                "		set vMessage = concat('This Debit Memo# ', NEW.debitMemoNumber ,' is already exists. Please enter unique Debit Memo#.');  \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
                "    end  if;  \n" +
                "	IF (NEW.receiptType = 'P' AND NEW.refPurchaseOrderID IS NOT NULL) THEN  \n" +
                "		IF (SELECT COUNT(1) FROM purchase_order_mst WHERE id = NEW.refPurchaseOrderID AND isdeleted = true) = 1 THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                " END;  \n" +
                /* **************************** Add Script Version -> 08-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5649,'2.00','V1',' Bug 39241: System is allow to add Line detail of deleted record [ PO ] - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5649:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BU_packingslip_invoice_payment` ;  \n" +
                "CREATE TRIGGER `Trg_BU_packingslip_invoice_payment` BEFORE UPDATE ON `packingslip_invoice_payment`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	/* if parent-master record available then only insert child record otherwise throw error */  \n" +
                "	IF (OLD.isDeleted = 1 OR OLD.isPaymentVoided = 1) THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BI_packingslip_invoice_payment_det` ;  \n" +
                "CREATE TRIGGER `Trg_BI_packingslip_invoice_payment_det` BEFORE INSERT ON `packingslip_invoice_payment_det`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_receiptType VARCHAR(1);  \n" +
                "    DECLARE v_creditMemoType VARCHAR(2);  \n" +
                "	DECLARE v_invoiceTotal DECIMAL(18,8);  \n" +
                "	DECLARE v_totalPayment DECIMAL(18,8);  \n" +
                "    DECLARE v_newPaymentAmount DECIMAL(18,8);  \n" +
                "	DECLARE v_isTariffInvoice TINYINT;  \n" +
                "	DECLARE v_refPaymentMode VARCHAR(5);  \n" +
                "	DECLARE vMessage VARCHAR(500);  \n" +
                "  \n" +
                "  \n" +
                "	SELECT 	a.refPaymentMode  \n" +
                "	INTO 	v_refPaymentMode  \n" +
                "	FROM 	packingslip_invoice_payment a  \n" +
                "	WHERE 	a.isDeleted = 0  \n" +
                "	AND a.isPaymentVoided = 0  \n" +
                "	AND a.id = NEW.refPayementid LIMIT 1;  \n" +
                "  \n" +
                "	/* if parent-master record available then only insert child record otherwise throw error */  \n" +
                "  \n" +
                "	/* check for det payment's master entry is deleted/voided */  \n" +
                "	IF ((SELECT COUNT(1) FROM packingslip_invoice_payment WHERE id = NEW.refPayementid AND (isDeleted = 1 OR isPaymentVoided = 1)) = 1) THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_refPaymentMode IN ('R','CA','WOFF')) THEN  \n" +
                "		/* check for det payment's - taken invoice is deleted/voided */  \n" +
                "		IF (NEW.refCustPackingslipInvoiceID IS NOT NULL AND NEW.refCustPackingslipInvoiceID != ''  \n" +
                "				AND ((SELECT COUNT(1) FROM `customer_packingslip` WHERE id = NEW.refCustPackingslipInvoiceID AND isDeleted = 1) = 1)) THEN  \n" +
                "			SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "	ELSEIF (v_refPaymentMode = 'CR') THEN  \n" +
                "		/* refund payment - check for taken cust payment/CM is deleted/voided */  \n" +
                "		IF (NEW.refRefundPaymentID IS NOT NULL AND NEW.refRefundPaymentID != ''  \n" +
                "				AND ((SELECT COUNT(1) FROM packingslip_invoice_payment WHERE id = NEW.refRefundPaymentID AND (isDeleted = 1 OR isPaymentVoided = 1)) = 1)) THEN  \n" +
                "			SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "  \n" +
                "		ELSEIF (NEW.refRefundCustCreditMemoID IS NOT NULL AND NEW.refRefundCustCreditMemoID != ''  \n" +
                "				AND ((SELECT COUNT(1) FROM `customer_packingslip` WHERE id = NEW.refRefundCustCreditMemoID AND isDeleted = 1) = 1)) THEN  \n" +
                "			SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF v_refPaymentMode = 'P' THEN  \n" +
                "		/*getting invoice amount and type*/  \n" +
                "		SELECT 	a.receiptType,  \n" +
                "				(IFNULL(SUM(b.extendedPrice),0)/*+IFNULL(sum(a.markedForRefundAmt),0)*/),  \n" +
                "				a.isTariffInvoice  \n" +
                "		INTO 	v_receiptType, v_invoiceTotal, v_isTariffInvoice  \n" +
                "		FROM 	packing_slip_material_receive a  \n" +
                "		JOIN 	packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id  \n" +
                "		WHERE 	a.id = NEW.refPackingslipInvoiceID  \n" +
                "				AND a.isDeleted = 0  \n" +
                "				AND b.isDeleted = 0  \n" +
                "		GROUP BY a.receiptType, a.isTariffInvoice;  \n" +
                "  \n" +
                "		/*getting total payment amount including new added payment */  \n" +
                "		SELECT 	(IFNULL(SUM(b.paymentAmount),0) + IFNULL(NEW.paymentAmount,0))  \n" +
                "			INTO 	v_totalPayment  \n" +
                "			FROM 	packingslip_invoice_payment_det b  \n" +
                "			WHERE 	b.refPackingslipInvoiceID = NEW.refPackingslipInvoiceID  \n" +
                "				AND EXISTS (SELECT 1 FROM packingslip_invoice_payment a WHERE a.id = b.refPayementid AND a.refPaymentMode = 'P')  \n" +
                "                AND b.isPaymentVoided = 0  \n" +
                "                AND b.isDeleted = 0  \n" +
                "                AND b.refCustPackingslipInvoiceID IS NULL;  \n" +
                "  \n" +
                "		IF v_receiptType IN ('D', 'C') THEN  \n" +
                "			IF IFNULL(NEW.paymentAmount,0) >= 0 THEN  \n" +
                "			/*in case of debit/credit memo payment amount must be less then zero*/  \n" +
                "				SET vMessage = CONCAT('Debit or Credit Memo payment must be less than zero. actual amount is: ', IFNULL(NEW.paymentAmount,0));  \n" +
                "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
                "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) > 0 THEN  \n" +
                "			/*in case of debit/credit memo outstanding amount must be less or equal to zero*/  \n" +
                "				SET vMessage = CONCAT('Total payment amount for Debit or Credit Memo must be less or equal to zero. actual amount is: ', ROUND((v_invoiceTotal - v_totalPayment),2));  \n" +
                "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= vMessage;  \n" +
                "			/*ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) = 0 THEN  */  \n" +
                "			/*in case of debit/credit memo now if outstanding amount is zero then update debit/credit memo status to paid*/  \n" +
                "				/*UPDATE 	packing_slip_material_receive  \n" +
                "				SET 	`status` = 'P',  \n" +
                "					updatedBy = NEW.updatedBy,  \n" +
                "					updatedAt = NEW.updatedAt,  \n" +
                "					updateByRoleId = NEW.updateByRoleId  \n" +
                "				WHERE 	id = NEW.refPackingslipInvoiceID;  */  \n" +
                "			END IF;  \n" +
                "		ELSEIF v_receiptType = 'I' THEN  \n" +
                "			IF IFNULL(NEW.paymentAmount,0) <= 0 AND IFNULL(v_invoiceTotal,0) != 0 THEN  \n" +
                "			/*invoice payment amount must not negetive, if invoice amount is not zero*/  \n" +
                "				SET vMessage = CONCAT('Invoice Payment amount must be greater than zero. actual amount is: ', IFNULL(NEW.paymentAmount,0));  \n" +
                "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
                "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) < 0 THEN  \n" +
                "			/*invoice outstanding amount must not negetive*/  \n" +
                "				SET vMessage = CONCAT('Total payment amount for an Invoice can not less than zero. actual amount is: ', ROUND((v_invoiceTotal - v_totalPayment),2));  \n" +
                "				SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= vMessage;  \n" +
                "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) = 0 THEN  \n" +
                "            /*if invoice outstanding amount zero then update invoice status to paid*/  \n" +
                "				UPDATE packing_slip_material_receive  \n" +
                "				   SET `status` = 'P',  \n" +
                "						updatedBy = NEW.updatedBy,  \n" +
                "						updatedAt = NEW.updatedAt,  \n" +
                "						updateByRoleId = NEW.updateByRoleId  \n" +
                "				  WHERE id = NEW.refPackingslipInvoiceID;  \n" +
                "  \n" +
                "				 IF v_isTariffInvoice = FALSE THEN  \n" +
                "					/*in case of non tariff invoice update packing slip status to paid*/  \n" +
                "					UPDATE packing_slip_material_receive  \n" +
                "					   SET `status` = 'P',  \n" +
                "							updatedBy = NEW.updatedBy,  \n" +
                "							updatedAt = NEW.updatedAt,  \n" +
                "							updateByRoleId = NEW.updateByRoleId  \n" +
                "					  WHERE refPackingSlipNumberForInvoice = NEW.refPackingslipInvoiceID;  \n" +
                "				 END IF;  \n" +
                "			ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) <> 0 AND v_totalPayment <> 0 THEN  \n" +
                "				/*if payment done but not fully paid then set invoice status PP Partially paid*/  \n" +
                "				UPDATE packing_slip_material_receive  \n" +
                "				   SET `status` = 'PP',  \n" +
                "						updatedBy = NEW.updatedBy,  \n" +
                "						updatedAt = NEW.updatedAt,  \n" +
                "						updateByRoleId = NEW.updateByRoleId  \n" +
                "				  WHERE id = NEW.refPackingslipInvoiceID;  \n" +
                "  \n" +
                "				 IF v_isTariffInvoice = FALSE THEN  \n" +
                "					/*in case of non tariff invoice update packing slip status to Partially Paid*/  \n" +
                "					UPDATE packing_slip_material_receive  \n" +
                "					   SET `status` = 'PP',  \n" +
                "							updatedBy = NEW.updatedBy,  \n" +
                "							updatedAt = NEW.updatedAt,  \n" +
                "							updateByRoleId = NEW.updateByRoleId  \n" +
                "					  WHERE refPackingSlipNumberForInvoice = NEW.refPackingslipInvoiceID;  \n" +
                "				 END IF;  \n" +
                "            END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "    ELSEIF v_refPaymentMode = 'RR' THEN  \n" +
                "		/*getting invoice amount and type*/  \n" +
                "		 SELECT a.receiptType,  \n" +
                "				IFNULL(SUM(a.markedForRefundAmt),0),  \n" +
                "				a.isTariffInvoice  \n" +
                "		   INTO v_receiptType, v_invoiceTotal, v_isTariffInvoice  \n" +
                "		   FROM packing_slip_material_receive a  \n" +
                "		   JOIN packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id  \n" +
                "		  WHERE a.id = NEW.refPackingslipInvoiceID  \n" +
                "			AND a.isDeleted = 0  \n" +
                "			AND b.isDeleted = 0  \n" +
                "		  GROUP BY a.receiptType, a.isTariffInvoice;  \n" +
                "  \n" +
                "        /*getting total payment amount including new added payment */  \n" +
                "			SELECT (IFNULL(SUM(b.paymentAmount),0) + IFNULL(NEW.paymentAmount,0))  \n" +
                "			  INTO v_totalPayment  \n" +
                "			  FROM packingslip_invoice_payment_det b  \n" +
                "			 WHERE b.refPackingslipInvoiceID = NEW.refPackingslipInvoiceID  \n" +
                "			   AND EXISTS (SELECT 1 FROM packingslip_invoice_payment a WHERE a.id = b.refPayementid AND a.refPaymentMode = 'RR')  \n" +
                "               AND b.isPaymentVoided = 0  \n" +
                "               AND b.isDeleted = 0  \n" +
                "               AND b.refCustPackingslipInvoiceID IS NULL;  \n" +
                "  \n" +
                "		IF v_totalPayment > v_invoiceTotal THEN  \n" +
                "			/*in case of debit/credit memo payment amount must be less then zero*/  \n" +
                "			SET vMessage = CONCAT('CM DM Refund must be less or equal to Marked for Refund Amount. actual amt is: ', ROUND((v_invoiceTotal - v_totalPayment),2),', Marked for Refund amt is: ',ROUND(IFNULL(v_invoiceTotal,0),2));  \n" +
                "			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	/*CM and DM has Refund transaction also. so updateed at last to manage single code for both transactions*/  \n" +
                "    IF v_refPaymentMode IN ('P','RR') THEN /*update status to paid*/  \n" +
                "		/*getting invoice amount and type*/  \n" +
                "		SELECT 	a.receiptType,  \n" +
                "				IFNULL(SUM(b.extendedPrice),0),  \n" +
                "                a.creditMemoType  \n" +
                "		INTO 	v_receiptType, v_invoiceTotal, v_creditMemoType  \n" +
                "		FROM 	packing_slip_material_receive a  \n" +
                "		JOIN 	packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id  \n" +
                "		WHERE 	a.id = NEW.refPackingslipInvoiceID  \n" +
                "				AND a.isDeleted = 0  \n" +
                "				AND b.isDeleted = 0  \n" +
                "		GROUP BY a.receiptType, a.creditMemoType;  \n" +
                "  \n" +
                "		/*getting total payment amount including new added payment */  \n" +
                "		SELECT 	(IFNULL(SUM(CASE WHEN b.paymentAmount > 0 THEN (b.paymentAmount *-1) ELSE b.paymentAmount END),0) +  \n" +
                "				 IFNULL(CASE WHEN NEW.paymentAmount > 0 THEN (NEW.paymentAmount *-1) ELSE NEW.paymentAmount END,0))  \n" +
                "			INTO 	v_totalPayment  \n" +
                "			FROM 	packingslip_invoice_payment_det b  \n" +
                "			WHERE 	b.refPackingslipInvoiceID = NEW.refPackingslipInvoiceID  \n" +
                "                AND b.isPaymentVoided = 0  \n" +
                "                AND b.isDeleted = 0  \n" +
                "                AND b.refCustPackingslipInvoiceID IS NULL;  \n" +
                "		IF v_receiptType IN ('D', 'C') THEN  \n" +
                "			/*Payment and Memo Amount is same then set memo status to paid*/  \n" +
                "			IF ROUND((v_invoiceTotal - v_totalPayment),2) = 0 THEN  \n" +
                "				UPDATE 	packing_slip_material_receive  \n" +
                "				SET `status` = 'P',  \n" +
                "					updatedBy = NEW.updatedBy,  \n" +
                "					updatedAt = NEW.updatedAt,  \n" +
                "					updateByRoleId = NEW.updateByRoleId  \n" +
                "				WHERE 	id = NEW.refPackingslipInvoiceID;  \n" +
                "                IF v_receiptType = 'C' AND v_creditMemoType = 'RC' THEN  \n" +
                "					/*in case of RMA credit memo set status to paid once CM paid*/  \n" +
                "					UPDATE packing_slip_material_receive  \n" +
                "					   SET `status` = 'P',  \n" +
                "							updatedBy = NEW.updatedBy,  \n" +
                "							updatedAt = NEW.updatedAt,  \n" +
                "							updateByRoleId = NEW.updateByRoleId  \n" +
                "					  WHERE refPackingSlipNumberForInvoice = NEW.refPackingslipInvoiceID;  \n" +
                "				 END IF;  \n" +
                "            /*Payment and Memo Amount is not same and payment is not zero then set memo status to Partially Paid*/  \n" +
                "            ELSEIF ROUND((v_invoiceTotal - v_totalPayment),2) <> 0 AND v_totalPayment <> 0 THEN  \n" +
                "				UPDATE 	packing_slip_material_receive  \n" +
                "				SET `status` = 'PP',  \n" +
                "					updatedBy = NEW.updatedBy,  \n" +
                "					updatedAt = NEW.updatedAt,  \n" +
                "					updateByRoleId = NEW.updateByRoleId  \n" +
                "				WHERE 	id = NEW.refPackingslipInvoiceID;  \n" +
                "                IF v_receiptType = 'C' AND v_creditMemoType = 'RC' THEN  \n" +
                "					/*in case of RMA credit memo set status to partially paid once CM partially paid*/  \n" +
                "					UPDATE packing_slip_material_receive  \n" +
                "					   SET `status` = 'PP',  \n" +
                "							updatedBy = NEW.updatedBy,  \n" +
                "							updatedAt = NEW.updatedAt,  \n" +
                "							updateByRoleId = NEW.updateByRoleId  \n" +
                "					  WHERE refPackingSlipNumberForInvoice = NEW.refPackingslipInvoiceID;  \n" +
                "				 END IF;  \n" +
                "            END IF;  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BU_packingslip_invoice_payment_det` ;  \n" +
                "CREATE TRIGGER `Trg_BU_packingslip_invoice_payment_det` BEFORE UPDATE ON `packingslip_invoice_payment_det`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	DECLARE v_refPaymentMode VARCHAR(5);  \n" +
                "  \n" +
                "	SELECT 	refPaymentMode INTO v_refPaymentMode  \n" +
                "	FROM 	packingslip_invoice_payment  \n" +
                "	WHERE 	id = NEW.refPayementid  \n" +
                "	;  \n" +
                "  \n" +
                "	/* if parent-master record available then only insert child record otherwise throw error */  \n" +
                "  \n" +
                "	/* check for det payment deleted/voided */  \n" +
                "	IF (OLD.isDeleted = 1 OR OLD.isPaymentVoided = 1) THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* check for det payment's master entry deleted/voided */  \n" +
                "	IF ((SELECT COUNT(1) FROM packingslip_invoice_payment WHERE id = NEW.refPayementid AND (isDeleted = 1 OR isPaymentVoided = 1)) = 1) THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_refPaymentMode IN ('R','CA','WOFF')) THEN  \n" +
                "		/* check for det payment's taken invoice deleted/voided */  \n" +
                "		IF (NEW.refCustPackingslipInvoiceID IS NOT NULL AND NEW.refCustPackingslipInvoiceID != '' AND  \n" +
                "				((SELECT COUNT(1) FROM `customer_packingslip` WHERE id = NEW.refCustPackingslipInvoiceID AND isDeleted = 1) = 1)) THEN  \n" +
                "			SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "	ELSEIF (v_refPaymentMode = 'CR') THEN  \n" +
                "		IF (NEW.refRefundPaymentID IS NOT NULL AND NEW.refRefundPaymentID != ''  \n" +
                "				AND ((SELECT COUNT(1) FROM packingslip_invoice_payment WHERE id = NEW.refRefundPaymentID AND (isDeleted = 1 OR isPaymentVoided = 1)) = 1)) THEN  \n" +
                "			SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "  \n" +
                "		ELSEIF (NEW.refRefundCustCreditMemoID IS NOT NULL AND NEW.refRefundCustCreditMemoID != ''  \n" +
                "				AND ((SELECT COUNT(1) FROM `customer_packingslip` WHERE id = NEW.refRefundCustCreditMemoID AND isDeleted = 1) = 1)) THEN  \n" +
                "			SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5650,'2.00','V1',' payment trigger - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5650:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetStockAllocateList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStockAllocateList`(  \n" +
                "	IN pRefSalesOrderDetID VARCHAR(255),  \n" +
                "	IN pAssyId INT,  \n" +
                "	IN pPartId VARCHAR(16383),  \n" +
                "	IN pToUOM INT,  \n" +
                "	IN pRfqLineItemIds VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pType VARCHAR(255),  \n" +
                "	IN pStockType VARCHAR(20)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_IsPurchase TINYINT;  \n" +
                "	DECLARE v_NumOfPosition DECIMAL(10,5);  \n" +
                "	DECLARE v_RestrictCPNUseInBOMStep TINYINT;  \n" +
                "	DECLARE v_CustomerApprovalCPN VARCHAR(1);  \n" +
                "    DECLARE v_custPNID INT;  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SELECT 	isPurchase, IFNULL(numOfPosition, 0), IFNULL(restrictCPNUseInBOMStep, 0), IFNULL(customerApprovalCPN, 'p'), custPNID  \n" +
                "	INTO	v_IsPurchase, v_NumOfPosition, v_RestrictCPNUseInBOMStep, v_CustomerApprovalCPN , v_custPNID  \n" +
                "	FROM 	kit_allocation_lineitems  \n" +
                "	WHERE 	refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "			AND partID = pAssyId  \n" +
                "			AND FIND_IN_SET(refRfqLineitem, pRfqLineItemIds)  \n" +
                "			AND isDeleted = 0  \n" +
                "	LIMIT 	1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	CREATE TEMPORARY TABLE temp_mainPartAndPackagingAliesPart ( mfrPNId int);  \n" +
                "	SET @partWithPackagingStatement = CONCAT(\"  \n" +
                "			Insert into temp_mainPartAndPackagingAliesPart  \n" +
                "			SELECT 		IFNULL(cp.id, c.id) AS mfrPNId  \n" +
                "			FROM 		component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 		c.id in (\", pPartId, \")  \n" +
                "			AND 		c.isDeleted = 0  \n" +
                "			GROUP BY 	mfrPNId;  \n" +
                "	\");  \n" +
                "	PREPARE partWithPackaging FROM @partWithPackagingStatement;  \n" +
                "	EXECUTE partWithPackaging;  \n" +
                "	DEALLOCATE PREPARE partWithPackaging;  \n" +
                "  \n" +
                "	IF (pType = 'AvailableStock') THEN  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_internalAndCustomerAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_internalAndCustomerAvailableStock AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	(  \n" +
                "				SELECT  	*  \n" +
                "				FROM 		(  \n" +
                "							SELECT 	cst.id,						cst.uid,					cst.refcompid,					c.mfgPN,				c.PIDCode,  \n" +
                "									c.RoHSStatusID	rohsID,		rohs.name  rohsName, 		rohs.rohsIcon,					cst.pkgQty,				cst.pkgUnit,  \n" +
                "									cst.uom, 					u.unitName unitName,  		u.measurementTypeID  uomClassID,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "									cst.packaging,   cst.receiveMaterialType, 				IFNULL(cst.nickName, '-') nickName,  \n" +
                "									cst.dateCode,    			fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,  \n" +
                "									cst.customerConsign,		cst.binID,					b.name binName,					w.name warehouseName,	w.warehouseType,  \n" +
                "									pw.name departmentName,   	cst.fromBin,				fb.name fromBinName,    		cst.fromWarehouse,  \n" +
                "									fw.name fromWarehouseName,  cst.fromDepartment,			fpw.name fromDepartmentName,  	IFNULL(cst.customerID, 0) customerID,  \n" +
                "									CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "									IFNULL(cst.assyID, 0) assyID,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "									IFNULL(assy_rohs.name, '-') assyRohsName,				IFNULL(assy_rohs.rohsIcon, '-') assyRohsIcon,  \n" +
                "									0 pendingUMIDQty,			fun_convertUOM(cst.uom,pToUOM,cst.pkgUnit) convertedUnit,  \n" +
                "									IFNULL(fun_getAllocatedKitsNameByID(cst.id, 'A'),'-') allocatedToKit,  \n" +
                "									IFNULL(ka.allocatedQty, 0) allocatedQty, 		         IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "									(  \n" +
                "										CASE  \n" +
                "											WHEN c.connecterTypeID = -2 THEN  \n" +
                "												((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * IFNULL(ka.allocatedUnit,0))  \n" +
                "											ELSE 0  \n" +
                "										END  \n" +
                "									) allocatedPins,  \n" +
                "									IFNULL((FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * IFNULL(ka.allocatedUnit,0)), 0) scrapedPins,  \n" +
                "									(fun_convertUOM(cst.uom,pToUOM,IFNULL(cst.pkgUnit, 0)) - IFNULL(ka.allocatedUnit, 0)) FreeToShare,  \n" +
                "									IFNULL(fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id), 0) kitAllocationId,  \n" +
                "									IFNULL(c.noOfPosition,0) noOfPosition,		fun_getCostCategoryNameByID(cst.costCategoryID, FALSE) costCategory,        c.isGoodPart,  \n" +
                "									c.restrictUsePermanently,					c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
                "									d.restrictUseInBOMStep restrictUseInBOM,	d.restrictUseInBOMWithPermissionStep restrictUseInBOMWithPermission,  \n" +
                "									d.restrictUseInBOMExcludingAliasStep restrictUseInBOMExcluding,			d.restrictUseInBOMExcludingAliasWithPermissionStep restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "									v_RestrictCPNUseInBOMStep restrictUseCPNInBOM,							cst.isUMIDRestrict,  \n" +
                "									fun_convertUOM(cst.uom,pToUOM,c.unit) unit,  \n" +
                "									d.customerApproval customerApproveStatus,								v_CustomerApprovalCPN customerApproveStatusCPN,  \n" +
                "									cst.rohsStatusID UMIDRohsStatusID,										fun_getRoHSNameByID(cst.rohsStatusID) UMIDRohsStatus,  \n" +
                "									v_IsPurchase isPurchase,     d.refRfqLineitem,  \n" +
                "									0 lineCleanStatus,			 cst.isReservedStock,			c.mountingTypeID, 				c.partType  \n" +
                "							FROM 		component_sid_stock cst  \n" +
                "							INNER JOIN 	component c ON cst.refcompid = c.id  \n" +
                "							INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "							INNER JOIN 	binmst b on cst.binID = b.id  \n" +
                "							INNER JOIN 	warehousemst w on b.WarehouseID = w.id  \n" +
                "							INNER JOIN 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "							INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "							INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "							INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "                            INNER JOIN 	uoms u on cst.uom = u.id  \n" +
                "							left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "							LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "							LEFT join 	rfq_rohsmst assy_rohs on assy.RoHSStatusID = assy_rohs.id and assy_rohs.isDeleted = 0  \n" +
                "							LEFT JOIN 	(  \n" +
                "										SELECT 		ka.refUIDId,  \n" +
                "												SUM(ka.allocatedQty) allocatedQty,  \n" +
                "												SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) AS allocatedUnit  \n" +
                "										FROM 		kit_allocation ka  \n" +
                "										WHERE 		ka.status = 'A'  \n" +
                "										GROUP BY 	ka.refUIDId  \n" +
                "									) AS ka ON ka.refUIDId = cst.id  \n" +
                "							LEFT JOIN	(  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, IFNULL(d.id, a.mfgPNID) mfgPNID, a.restrictUseInBOMStep, a.restrictUseInBOMWithPermissionStep, a.restrictUseInBOMExcludingAliasStep, a.restrictUseInBOMExcludingAliasWithPermissionStep, a.customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems_alternatepart a  \n" +
                "										INNER JOIN 	component c ON a.mfgPNID = c.id  \n" +
                "										LEFT OUTER JOIN component d ON c.packaginggroupID = d.packaginggroupID  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "													AND (CASE WHEN (v_custPNID IS NOT NULL) THEN c.id != v_custPNID ELSE 1 = 1 END)  \n" +
                "                                        GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, IFNULL(d.id, a.mfgPNID), restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "										UNION  \n" +
                "										SELECT 		a.refSalesOrderDetID, a.partID, a.refRfqLineitem, a.custPNID mfgPNID, 0 restrictUseInBOMStep, 0 restrictUseInBOMWithPermissionStep, 0 restrictUseInBOMExcludingAliasStep, 0 restrictUseInBOMExcludingAliasWithPermissionStep, 'A' customerApproval  \n" +
                "										FROM 		kit_allocation_lineitems a  \n" +
                "										WHERE 		a.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "													AND a.partID = pAssyId  \n" +
                "													AND FIND_IN_SET(a.refRfqLineitem, pRfqLineItemIds)  \n" +
                "													AND a.isDeleted = 0  \n" +
                "										GROUP BY 	refSalesOrderDetID, partID, refRfqLineitem, mfgPNID, restrictUseInBOMStep, restrictUseInBOMWithPermissionStep, restrictUseInBOMExcludingAliasStep, restrictUseInBOMExcludingAliasWithPermissionStep, customerApproval  \n" +
                "									) d ON d.mfgPNID = cst.refcompid  \n" +
                "							WHERE 		cst.refcompid IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "										AND (  \n" +
                "											CASE  \n" +
                "												WHEN pStockType = 'IS' THEN  \n" +
                "													cst.customerConsign = 0  \n" +
                "												WHEN pStockType = 'CS' THEN  \n" +
                "													cst.customerConsign = 1 AND cst.customerID = pCustomerId  \n" +
                "												ELSE  \n" +
                "													1 = 1  \n" +
                "											END  \n" +
                "											)  \n" +
                "										AND cst.isDeleted = 0  \n" +
                "						) a  \n" +
                "						WHERE 		FreeToShare > 0  \n" +
                "						ORDER BY 	internalDateCodeInDate ASC  \n" +
                "			) b;  \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_lineCleanStatus;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_lineCleanStatus AS  \n" +
                "        select 	refRfqLineitem,  refcompid, fun_getBOMLineCleanStatusErrorCategoryWise(NULL, refRfqLineitem, max(id), pAssyId, 2) lineCleanStatus  \n" +
                "		from   	temp_internalAndCustomerAvailableStock  \n" +
                "		group by   refRfqLineitem,  refcompid;  \n" +
                "  \n" +
                "        #Update Line Clean Status  \n" +
                "        Update temp_internalAndCustomerAvailableStock ts  \n" +
                "        inner join temp_lineCleanStatus tl on ts.refcompid = tl.refcompid  \n" +
                "        set ts.lineCleanStatus = tl.lineCleanStatus;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF  EXISTS temp_nonUmidAvailableStock;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_nonUmidAvailableStock AS  \n" +
                "		SELECT 	0 AS id,						'-' AS uid,						refcompid,						0 AS pkgQty,  \n" +
                "				'-' AS dateCode,   				'-' AS internalDateCodeInDate,	0 AS customerID,				0 AS binID,  \n" +
                "				0 AS assyID,					'-' AS receiveMaterialType, 	0 AS customerConsign,  \n" +
                "				c.uom,							c.packagingID packaging,		vu.fromBin,						b.Name fromBinName,  \n" +
                "				b.WarehouseID fromWarehouse,	w.Name fromWarehouseName,		w.parentWHID fromDepartment,	pw.name fromDepartmentName,  \n" +
                "				0 AS pkgUnit,					c.PIDCode,						'-' nickName,					'-' AS customer,  \n" +
                "				'-' AS assembly,				c.RoHSStatusID	rohsID,         rohs.name  rohsName, 			rohs.rohsIcon,  \n" +
                "				'-' AS assyRohsName,			'-' AS assyRohsIcon,            '-' AS binName,					'-' AS warehouseName,  \n" +
                "				'-' AS warehouseType,			'-' AS departmentName,			u.unitName unitName,  			u.measurementTypeID uomClassID,  \n" +
                "                vu.pendingUMIDQty,				0 AS convertedUnit,				0 currentPin,					'-' AS allocatedToKit,  \n" +
                "				0 AS allocatedQty,				0 AS allocatedUnit,				0 AS allocatedPins,				0 AS scrapedPins,  \n" +
                "				0 AS FreeToShare,				0 AS kitAllocationId,			IFNULL(c.noOfPosition,0) noOfPosition,  \n" +
                "                '-' costCategory,				c.isGoodPart,					c.restrictUsePermanently,		c.restrictUSEwithpermission,  \n" +
                "				c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,					1 AS restrictUseInBOM,  \n" +
                "                0 AS restrictUseInBOMWithPermission,	1 AS restrictUseInBOMExcluding,							0 AS restrictUseInBOMExcludingAliasWithPermission,  \n" +
                "                v_RestrictCPNUseInBOMStep AS restrictUseCPNInBOM,				0 AS isUMIDRestrict,			fun_convertUOM(c.uom,pToUOM,c.unit) unit,  \n" +
                "                '-' customerApproveStatus,		v_CustomerApprovalCPN customerApproveStatusCPN,					0 UMIDRohsStatusID,  \n" +
                "                '-' UMIDRohsStatus,				v_IsPurchase isPurchase, 		0 AS lineCleanStatus, 			c.mfgPN,  \n" +
                "                0 AS isReservedStock,			c.mountingTypeID, 				c.partType  \n" +
                "		FROM 	(  \n" +
                "					SELECT  	vu.PartId AS refcompid, vu.BinID AS fromBin, SUM(vu.BalanceQty) pendingUMIDQty  \n" +
                "					FROM 		vu_umid_creation_pending vu  \n" +
                "                    where 		vu.PartId in (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "					GROUP BY 	vu.packingSlipDetID  \n" +
                "		) vu  \n" +
                "		INNER JOIN 	component c ON c.id = vu.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on c.uom = u.id  \n" +
                "		INNER JOIN 	binmst b ON b.id = vu.fromBin AND b.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst w ON w.ID = b.WarehouseID AND w.isDeleted = 0  \n" +
                "		INNER JOIN 	warehousemst pw ON w.parentWHID = pw.id AND pw.isDeleted = 0  \n" +
                "		WHERE 		vu.pendingUMIDQty > 0;  \n" +
                "  \n" +
                "		IF (pStockType = 'CS') THEN  \n" +
                "			SELECT * FROM temp_internalAndCustomerAvailableStock;  \n" +
                "		ELSE  \n" +
                "			SELECT 	*  \n" +
                "			FROM 	(  \n" +
                "					SELECT  id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		    customerID,					binID,  \n" +
                "                            assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,		uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,			        CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,				CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,		CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,    isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus,		isReservedStock,  \n" +
                "                            mountingTypeID, 		partType  \n" +
                "					FROM 	temp_internalAndCustomerAvailableStock  \n" +
                "					UNION ALL  \n" +
                "					SELECT 	id,						CAST(uid AS CHAR) uid,		refcompid,				pkgQty,					CAST(dateCode AS CHAR) dateCode,  \n" +
                "							CAST(internalDateCodeInDate AS CHAR) internalDateCodeInDate,		        customerID,				binID,  \n" +
                "                            assyID,						CAST(receiveMaterialType AS CHAR) receiveMaterialType,  \n" +
                "                            customerConsign,	    uom,						packaging,				fromBin,				fromBinName,  \n" +
                "                            fromWarehouse,			fromWarehouseName,			fromDepartment,			fromDepartmentName,		pkgUnit,  \n" +
                "                            PIDCode,				CAST(nickName AS CHAR) nickName,					CAST(customer AS CHAR) customer,  \n" +
                "                            CAST(assembly AS CHAR) assembly,					rohsID,  				CAST(assyRohsName AS CHAR) assyRohsName,  \n" +
                "                            assyRohsIcon,			rohsName, 					CAST(rohsIcon AS CHAR) rohsIcon,					CAST(binName AS CHAR) binName,  \n" +
                "                            CAST(warehouseName AS CHAR) warehouseName,			CAST(warehouseType AS CHAR) warehouseType,			CAST(departmentName AS CHAR) departmentName,  \n" +
                "							unitName,  				uomClassID,					mfgPN,					pendingUMIDQty,			convertedUnit,			currentPin,  \n" +
                "                            CAST(allocatedToKit AS CHAR) allocatedToKit,		allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                            scrapedPins,			FreeToShare,				kitAllocationId,		noOfPosition,			CAST(costCategory AS CHAR) costCategory,  \n" +
                "                            isGoodPart,				restrictUsePermanently,		restrictUSEwithpermission,						restrictPackagingUsePermanently,  \n" +
                "                            restrictPackagingUseWithpermission,					restrictUseInBOM,		restrictUseInBOMWithPermission,  \n" +
                "							restrictUseInBOMExcluding,	restrictUseInBOMExcludingAliasWithPermission,	restrictUseCPNInBOM,	isUMIDRestrict,  \n" +
                "                            unit,					CAST(customerApproveStatus AS CHAR) customerApproveStatus,					customerApproveStatusCPN,  \n" +
                "                            UMIDRohsStatusID,		CAST(UMIDRohsStatus AS CHAR) UMIDRohsStatus,		isPurchase,				lineCleanStatus, 		isReservedStock,  \n" +
                "                            mountingTypeID, 		partType  \n" +
                "					FROM 	temp_nonUmidAvailableStock  \n" +
                "				) d ORDER BY internalDateCodeInDate ASC;  \n" +
                "		END IF;  \n" +
                "	ELSEIF (pType = 'AllocatedStock' OR pType = 'ConsumedStock') THEN  \n" +
                "		SELECT 	cst.id,					cst.uid,		cst.refcompid,			cst.pkgQty,					cst.dateCode,  \n" +
                "				fun_ConvertInternalDateCodeIntoDateInDefaultFormate(cst.dateCode) internalDateCodeInDate,	cst.customerID,  \n" +
                "                cst.binID,				cst.assyID,					cst.receiveMaterialType,  \n" +
                "				cst.customerConsign,	cst.uom,		cst.packaging,			cst.fromBin,				fb.name fromBinName,  \n" +
                "				cst.fromWarehouse,		fw.name fromWarehouseName,				cst.fromDepartment,			fpw.name fromDepartmentName,  \n" +
                "				b.name binName,			cst.pkgUnit,	cst.nickName,			w.name warehouseName,		w.warehouseType,  \n" +
                "				pw.name departmentName,	pw.parentWHType departmentType,			u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
                "				CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,	IFNULL(assy.PIDCode, '-') assembly,  \n" +
                "				c.PIDCode,				c.mfgPN, 		c.RoHSStatusID rohsID,	rohs.name  rohsName,		rohs.rohsIcon,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getUnitNameByID(ka.allocatedUOM) ELSE NULL END) allocatedUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN NULL ELSE fun_getUnitNameByID(ka.consumeUOM) END) consumeUOM,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedQty ELSE 0 END) allocatedQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeQty END) consumeQty,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN ka.allocatedUnit ELSE 0 END) allocatedUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE ka.consumeUnit END) consumeUnit,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.allocatedUnit) ELSE 0 END) ELSE 0 END) allocatedPins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN 0 ELSE (CASE WHEN c.connecterTypeID = -2 THEN ((FLOOR(IFNULL(c.noOfPosition,0)/v_NumOfPosition) * v_NumOfPosition) * ka.consumeUnit) ELSE 0 END) END) consumePins,  \n" +
                "				(CASE WHEN pType = 'AllocatedStock' THEN fun_getKitAllocationIdByUMID(pRefSalesOrderDetID, pAssyId, pRfqLineItemIds, cst.id) ELSE NULL END) kitAllocationId,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, IFNULL(cst.pkgUnit, 0)) - ka.allocatedUnit) FreeToShare,  \n" +
                "				fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) convertedUnit,  \n" +
                "				(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) * IFNULL(c.noOfPosition, 0)) currentPin,  \n" +
                "				v_NumOfPosition bomPin,					c.noOfPosition,  \n" +
                "				fun_getAllocatedKitsNameByID(cst.id, 'A') allocatedToKit,  \n" +
                "				(FLOOR(MOD(IFNULL(c.noOfPosition,0), v_NumOfPosition)) * ka.allocatedUnit) scrapedPins,  \n" +
                "				IFNULL(w.cartMfr, 'Manual') warehouseCart,  \n" +
                "				c.isCustom, 			cst.rohsStatusID UMIDRohsStatusID,  	CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "				fun_getUMIDTransitStatus(cst.uid) isTransit,                    umid_rohs.name UMIDRohsStatus,  \n" +
                "				ka.roHSApprovalReason,                                          fun_getUserNameByID(ka.roHSApprovedBy) roHSApprovedBy,  \n" +
                "                cst.isReservedStock, 					c.mountingTypeID, 		c.partType  \n" +
                "		FROM 		component_sid_stock cst  \n" +
                "		INNER JOIN 	component c ON c.id = cst.refcompid  \n" +
                "        INNER JOIN 	rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "        inner join 	uoms u on cst.uom = u.id  \n" +
                "        inner join 	cost_category cc on cst.costCategoryID = cc.id  \n" +
                "        inner join 	rfq_rohsmst umid_rohs on cst.rohsStatusID = umid_rohs.id  \n" +
                "        inner join 	binmst b on cst.binID = b.id  \n" +
                "        inner join 	warehousemst w on b.WarehouseID = w.id  \n" +
                "        inner join 	warehousemst pw on w.parentWHID = pw.id  \n" +
                "        INNER JOIN 	binmst fb on cst.fromBin = fb.id  \n" +
                "		INNER JOIN 	warehousemst fw on cst.fromWarehouse = fw.id  \n" +
                "		INNER JOIN 	warehousemst fpw on cst.fromDepartment = fpw.id  \n" +
                "		INNER JOIN 	(  \n" +
                "					SELECT 	b.refSalesOrderDetID, b.assyID, a.refUIDId, a.partID, b.refBOMLineID, b.status,  \n" +
                "							a.allocatedUOM, a.consumeUOM, a.allocatedQty, a.consumeQty, a.allocatedUnit, a.consumeUnit,  \n" +
                "							b.roHSApprovalReason, b.roHSApprovedBy  \n" +
                "					FROM 	(  \n" +
                "								SELECT 	refUIDId, partID, allocatedUOM, consumeUOM,  \n" +
                "										IFNULL(SUM(allocatedQty), 0) allocatedQty,  \n" +
                "										IFNULL(SUM(consumeQty), 0) consumeQty,  \n" +
                "										IFNULL(SUM(fun_convertUOM(allocatedUOM, pToUOM, allocatedUnit)), 0) allocatedUnit,  \n" +
                "										IFNULL(SUM(fun_convertUOM(consumeUOM, pToUOM, consumeUnit)), 0) consumeUnit  \n" +
                "								FROM 	kit_allocation  \n" +
                "								WHERE 	partID IN (SELECT mfrPNId FROM temp_mainPartAndPackagingAliesPart)  \n" +
                "                                AND		(CASE WHEN pType = 'AllocatedStock' THEN `status` = 'A' ELSE `status` = 'R' END)  \n" +
                "								GROUP BY refUIDId, partID, allocatedUOM, consumeUOM  \n" +
                "					) a  \n" +
                "					INNER JOIN 	kit_allocation b ON a.refUIDId = b.refUIDId  \n" +
                "                    AND	FIND_IN_SET(b.refSalesOrderDetID, pRefSalesOrderDetID)  \n" +
                "					AND b.assyID = IFNULL(pAssyId,b.assyID)  \n" +
                "					AND FIND_IN_SET(b.refBOMLineID, pRfqLineItemIds)  \n" +
                "                    AND (CASE WHEN pType = 'AllocatedStock' THEN b.`status` = 'A' ELSE b.`status` = 'R' END)  \n" +
                "		) ka ON ka.refUIDId = cst.id  \n" +
                "		left JOIN 	mfgcodemst cust on cst.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "		LEFT JOIN	component assy ON cst.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "		WHERE cst.isDeleted = 0  \n" +
                "		ORDER BY internalDateCodeInDate ASC;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_mainPartAndPackagingAliesPart;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_nonUmidAvailableStock;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5651,'2.00','V1','Bug 38683: Refresh button should refresh the pop-up data and resolved errors on Stock Pop-up at Kit Allocation - CHARMI ', " + userid + ", '" + requiredDet.ipAddress + "'); "
            );
            break;
        case 5651:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-12-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDeatils;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "        SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "		cd.subStatus,  \n" +
                "		cd.sorevision,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "                fun_getMfgCodeByID(cd.customerID) custCode,  \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "            case when sm.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
                "            sm.isBlanketPO,  \n" +
                "cd.id AS customerslipId,  \n" +
                "case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "  fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "   concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "     (CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         fun_getUserNameByID(cd.updatedBy) updatedby,  \n" +
                "         fun_getUserNameByID(cd.createdBy) createdby,  \n" +
                "         fun_getRoleByID(cd.createByRoleId) createdbyRole,  \n" +
                "         fun_getRoleByID(cd.updateByRoleId) updatedbyRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdAt,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS lockedAt,  \n" +
                "         cpTrack.cpTrackNumber,  \n" +
                "         ifnull(cpTrack.cpTrackNumberCount,0) cpTrackNumberCount,  \n" +
                "         (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "                        cd.revision ,  \n" +
                "           ifnull(packingdtl.packingSlipCnt,0)  packingSlipCnt,  \n" +
                "           sm.rmaNumber,sm.isRmaPO,  \n" +
                "           (CASE when sm.isRmaPO = 1 then 'YES' when sm.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "           (CASE when sm.isRmaPO = 1 then 'Yes' when sm.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp  \n" +
                "		FROM customer_packingslip cd  \n" +
                "		LEFT JOIN salesordermst sm on sm.id=cd.refSalesOrderID and sm.isdeleted=0  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0  \n" +
                "		LEFT JOIN (  \n" +
                "		SELECT COUNT(cpTrack.trackNumber) cpTrackNumberCount,GROUP_CONCAT(cpTrack.trackNumber SEPARATOR ', ') cpTrackNumber,cpTrack.refCustPackingSlipID FROM customer_packing_slip_track_number cpTrack WHERE  cpTrack.isDeleted = 0 GROUP BY cpTrack.refCustPackingSlipID  \n" +
                "		) cpTrack on cpTrack.refCustPackingSlipID=cd.id  \n" +
                "		left join ( select count(1) packingSlipCnt,packingdtl.refCustPackingSlipID from customer_packingslip_det packingdtl where packingdtl.isDeleted = 0 GRoup by packingdtl.refCustPackingSlipID  \n" +
                "		) packingdtl on packingdtl.refCustPackingSlipID=cd.id  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "	 IF (pfilterStatus = 0) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    ELSE  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  \n" +
                "   IF pmfgPartID IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails= CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' AND cd.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pmfgPartID , ')) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "		padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,'''  or cd.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "        SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "		padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%''  or cd.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "  SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5652,'2.00','V1','Search PO# Error in CPS summary List - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5652:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerRefund` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerRefund`(  \n" +
                "	IN pCustPaymentDetList JSON,  \n" +
                "	IN pCustCMDetList JSON,  \n" +
                "	IN pCustRefundMstID INT,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedPayOfCust INT,  \n" +
                "	IN pTotSelectedCMOfCust INT,  \n" +
                "	IN pDeleteCustPaymentDetList JSON,  \n" +
                "	IN pDeleteCustCMDetList JSON,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT,  \n" +
                "	IN pOffsetAmount DECIMAL(18,8) ,  \n" +
                "	IN pBillToName VARCHAR(100) ,  \n" +
                "	IN pBillToAddress VARCHAR(255) ,  \n" +
                "	IN pIsMarkAsPaid TINYINT,  \n" +
                "	IN pSubStatus INT,  \n" +
                "	IN pStatus INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_db_mainRefundAmount DECIMAL(18,8) ;  \n" +
                "	IF(pTotSelectedPayOfCust > 0  \n" +
                "					AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN  \n" +
                "		/* get/map all Customer Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustPaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustPaymentDetList_JT ;  \n" +
                "		-- select * from temp_UI_CustPaymentDetList;  \n" +
                "  \n" +
                "		/* get all customer refund > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS  \n" +
                "			SELECT psip.id AS paymentMstID,  \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "				psipd.id AS paymentDetMstID,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID = psip.id  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0)  AS totalRefundIssuedAmount  \n" +
                "			FROM packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN packingslip_invoice_payment_det psipd  \n" +
                "					ON psipd.refPayementid = pCustRefundMstID AND psip.id = psipd.refRefundPaymentID AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "			AND psip.isDeleted = 0  \n" +
                "			AND psip.isPaymentVoided = 0 ;  \n" +
                "  \n" +
                "            -- select * from temp_DB_Available_CustPaymentDetList;  \n" +
                "  \n" +
                "            /* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected payment not found from db > tdacipl.paymentMstID comes NULL  \n" +
                "			> original agreed refund Amount Of payment Pay  mismatch > tdacipl.agreedRefundAmount comes NULL  \n" +
                "			> refund issued Amount mismatch > tdacipl.totalRefundIssuedAmount comes NULL  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustPaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "				-- select * from temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "  \n" +
                "  \n" +
                "				/* get/map all deleting customer Payment Detail List send from UI */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM 	JSON_TABLE(  \n" +
                "					pDeleteCustPaymentDetList,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "							`refRefundPaymentID` INT PATH \"$.refRefundPaymentID\"  \n" +
                "						)  \n" +
                "				) AS DeleteCustPaymentDetList_JT ;  \n" +
                "  \n" +
                "				 /* get all deleted invoice payment det (passed from UI but not in db)  \n" +
                "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS  \n" +
                "					SELECT id FROM packingslip_invoice_payment_det  \n" +
                "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
                "					AND (isDeleted = 1 OR isPaymentVoided = 1);  \n" +
                "  \n" +
                "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;  \n" +
                "  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) = 0)  \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0)) THEN  \n" +
                "  \n" +
                "			/* start - create/update/delete payment refund process */  \n" +
                "			IF(pDeleteCustPaymentDetList IS NOT NULL AND pDeleteCustPaymentDetList != '') THEN  \n" +
                "				/* delete those which are unselected(from UI) payment det */  \n" +
                "				UPDATE packingslip_invoice_payment_det  \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList_Copy1 AS  \n" +
                "					SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList ;  \n" +
                "  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy2;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList_Copy2 AS  \n" +
                "					SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList ;  \n" +
                "  \n" +
                "				/* update refund payment status details and lock status which are deleted (unselected from UI) */  \n" +
                "				UPDATE packingslip_invoice_payment psip  \n" +
                "					LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "							FROM packingslip_invoice_payment_det psipd  \n" +
                "							WHERE psipd.refPayementid IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList_Copy2)  \n" +
                "							AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "							AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "							GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "						ON psip.id = invPayDetTemp.refPayementid  \n" +
                "					LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "							FROM packingslip_invoice_payment_det  \n" +
                "							WHERE refRefundPaymentID IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "							GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "						ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "				SET  psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) = 0 THEN 'RL'  \n" +
                "						ELSE psip.lockStatus END ,  \n" +
                "					psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
                "								(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "								END)  \n" +
                "							ELSE 'NA' END),  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE psip.id IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList_Copy1)  \n" +
                "				AND psip.isPaymentVoided = 0  \n" +
                "				AND psip.isDeleted = 0 ;  \n" +
                "  			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all payment det amount whose amount is changed from UI */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedPayment , paymentMstID , COMMENT  \n" +
                "					FROM temp_UI_CustPaymentDetList  \n" +
                "					WHERE paymentDetMstID IS NOT NULL) tucipdl  \n" +
                "				ON pipd.id = tucipdl.paymentDetMstID  \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedPayment,0),  \n" +
                "				pipd.comment = tucipdl.comment ,  \n" +
                "				pipd.updatedBy = pUserID,  \n" +
                "				pipd.updateByRoleId = pUserRoleID ,  \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE pipd.refPayementid = pCustRefundMstID  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0  \n" +
                "			;  \n" +
                "			-- select * from packingslip_invoice_payment_det where refPayementid =pCustRefundMstID;  \n" +
                "  \n" +
                "			/* insert newly selected payment det */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,  \n" +
                "				`comment` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedPayment,0), paymentMstID,  \n" +
                "				COMMENT ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustPaymentDetList  \n" +
                "			WHERE paymentDetMstID IS NULL  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy1 AS  \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy2;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy2 AS  \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			/* update refund payment status details and lock status which are newly created/updated */  \n" +
                "			UPDATE packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "							FROM packingslip_invoice_payment_det psipd  \n" +
                "							WHERE psipd.refPayementid IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy2)  \n" +
                "							AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "							AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "							GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "						ON psip.id = invPayDetTemp.refPayementid  \n" +
                "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "					ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "			SET  psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) = 0 THEN (CASE WHEN psip.lockStatus = 'LC' THEN 'LC' ELSE 'RL' END)  \n" +
                "						ELSE psip.lockStatus END ,  \n" +
                "			       psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
                "							(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "							END)  \n" +
                "						ELSE 'NA' END) ,  \n" +
                "				updatedBy = pUserID,  \n" +
                "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy1)  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	/* customer credit memo refund cases */  \n" +
                "	ELSEIF (pTotSelectedCMOfCust > 0 AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN  \n" +
                "  \n" +
                "	        /* get/map all Customer CM Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustCMDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustCMDetList_JT ;  \n" +
                "		-- select temp_UI_CustCMDetList.* from temp_UI_CustCMDetList;  \n" +
                "  \n" +
                "		/* get all customer Refund > against total CM list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS  \n" +
                "				SELECT cps.id AS custCreditMemoMstID,  \n" +
                "				 cps.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "		    (SELECT IFNULL(SUM(paymentAmount),0)  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0  \n" +
                "			    ) totalRefundIssuedAmount  \n" +
                "			FROM customer_packingslip AS cps  \n" +
                "			WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "			AND cps.isDeleted = 0 ;  \n" +
                "  \n" +
                "		-- select temp_DB_Available_CustCMDetList.* from temp_DB_Available_CustCMDetList;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected CM not found from db  \n" +
                "			> original Agreed Refund Amount Of Refund mismatch  \n" +
                "			> Total Refund Issued Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "			SELECT tucml.*  \n" +
                "			FROM temp_UI_CustCMDetList tucml  \n" +
                "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID  \n" +
                "			WHERE (  \n" +
                "				(tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "			-- select temp_UI_Mismatch_Amount_CustCMDetList.* from temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "  \n" +
                "			/* get/map all deleting customer CM Detail List send from UI */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM 	JSON_TABLE(  \n" +
                "					pDeleteCustCMDetList,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "							`refRefundCustCreditMemoID` INT PATH \"$.refRefundCustCreditMemoID\"  \n" +
                "						)  \n" +
                "				) AS DeleteCustCMtDetList_JT ;  \n" +
                "				-- select * from temp_UI_Delete_CustCMDetList;  \n" +
                "  \n" +
                "			/* get all deleted invoice payment det (passed from UI but not in db)  \n" +
                "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustCMDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS  \n" +
                "					SELECT id FROM packingslip_invoice_payment_det  \n" +
                "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)  \n" +
                "					AND (isDeleted = 1 OR isPaymentVoided = 1);  \n" +
                "  \n" +
                "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) = 0)  \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0)) THEN  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			IF(pDeleteCustCMDetList IS NOT NULL AND pDeleteCustCMDetList != '') THEN  \n" +
                "				/* delete those which are unselected(from UI) CM det */  \n" +
                "				UPDATE packingslip_invoice_payment_det  \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "				-- select 'deleted refund for CM list' ;  \n" +
                "  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList_Copy1;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList_Copy1 AS  \n" +
                "					SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				/* update customer credit memo - payment status and credit memo refund status   */  \n" +
                "				UPDATE customer_packingslip cps  \n" +
                "				LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList)  \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "						GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "					 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "				SET  cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
                "									(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
                "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
                "									END)  \n" +
                "							ELSE 'NA' END),  \n" +
                "					cps.updatedBy = pUserID,  \n" +
                "					cps.updateByRoleId = pUserRoleID ,  \n" +
                "					cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE cps.id IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList_Copy1)  \n" +
                "				AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all CM det amount whose amount is changed from UI */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedCM , paymentMstID , COMMENT  \n" +
                "					FROM temp_UI_CustCMDetList  \n" +
                "					WHERE paymentDetMstID IS NOT NULL) tucipdl  \n" +
                "				ON pipd.id = tucipdl.paymentDetMstID  \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedCM,0),  \n" +
                "				pipd.comment = tucipdl.comment ,  \n" +
                "				pipd.updatedBy = pUserID,  \n" +
                "				pipd.updateByRoleId = pUserRoleID ,  \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE pipd.refPayementid = pCustRefundMstID  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "			/* insert newly selected CM det */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,  \n" +
                "				`comment` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedCM,0), custCreditMemoMstID,  \n" +
                "				COMMENT ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustCMDetList  \n" +
                "			WHERE paymentDetMstID IS NULL  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy1 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy2;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy2 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status and refund status   */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy1)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
                "					FROM packingslip_invoice_payment  \n" +
                "					WHERE refCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy2)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet  \n" +
                "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN  \n" +
                "									(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
                "								(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
                "								END)  \n" +
                "						      ELSE 'NA' END),  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* update payment master details */  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,  \n" +
                "			paymentType = pPaymentType, paymentAmount = pPaymentAmount ,  \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,  \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,  \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,  \n" +
                "			payToName = pBillToName , payToAddress = pBillToAddress,  \n" +
                "			billToAddress = pBillToAddress, billToName = pBillToName,  \n" +
                "			isMarkAsPaid = pIsMarkAsPaid ,  \n" +
                "			subStatus = pSubStatus , `status` = pStatus ,  \n" +
                "			updatedBy = pUserID, offsetAmount = pOffsetAmount,  \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE id = pCustRefundMstID  \n" +
                "		-- AND isPaymentVoided = 0  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
                "  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)  \n" +
                "		) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted payment det (passed from UI but not in db) */  \n" +
                "	 SELECT * FROM temp_Deleted_CustPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - get all deleted CM det (passed from UI but not in db) */  \n" +
                "	SELECT * FROM temp_Deleted_CustCMDetList ;  \n" +
                "  \n" +
                "	/* Resp[3] - get all mis match payment amount records or deleted  */  \n" +
                "	 SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;  \n" +
                "  \n" +
                "	/*  Resp[4] - get all mis match credit memo amount records or deleted  */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList ;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy2;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy2;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 08-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5653,'2.00','V1',' Sproc_UpdateCustomerRefund - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5653:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "ALTER TABLE `workorder_assembly_excessstock_location`  \n" +
                "ADD COLUMN `geolocationId` INT NULL DEFAULT NULL;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "ALTER TABLE `workorder_assembly_excessstock_location`  \n" +
                "ADD INDEX `FK_workorder_assembly_excessstock_location_geolocationId_idx` (`geolocationId` ASC) VISIBLE;  \n" +
                "  \n" +
                "ALTER TABLE `workorder_assembly_excessstock_location`  \n" +
                "ADD CONSTRAINT `FK_workorder_assembly_excessstock_location_geolocationId`  \n" +
                "  FOREIGN KEY (`geolocationId`)  \n" +
                "  REFERENCES `genericcategory` (`gencCategoryID`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                /* **************************** Add Script Version -> 08-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5654,'2.00','V1',' User Story 38220: Menu Changes: FOB and Locations - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5654:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_genericcategory`;  \n" +
                "CREATE TRIGGER `Trg_BI_genericcategory` BEFORE INSERT ON `genericcategory` FOR EACH ROW BEGIN  \n" +
                "    IF (SELECT COUNT(1) FROM genericcategory  \n" +
                "       WHERE `categoryType` IN ('Printers','Label Templates','Document Type')  \n" +
                "        AND `categoryType` = NEW.categoryType  \n" +
                "        AND `gencCategoryName`= NEW.gencCategoryName  \n" +
                "        AND isdeleted = 0 AND deletedAt IS NULL) > 0 THEN  \n" +
                "        SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';  \n" +
                "    ELSEIF (SELECT COUNT(1) FROM genericcategory  \n" +
                "            WHERE `categoryType` IN ('Equipment & Workstation Groups', 'Equipment & Workstation Types',  \n" +
                "                    'Equipment & Workstation Ownerships', 'Standard Types', 'Titles',  \n" +
                "                    'Operation Types', 'Geolocations', 'Responsibilities', 'Shipping Methods',  \n" +
                "                    'Payment Terms', 'Part Status', 'Barcode Separators', 'Payment Type Category')  \n" +
                "            AND (`gencCategoryName`= NEW.gencCategoryName  \n" +
                "            OR `gencCategoryCode` = NEW.gencCategoryCode)  \n" +
                "            AND `categoryType` = NEW.categoryType  \n" +
                "            AND isdeleted = 0 AND deletedAt IS NULL) > 0 THEN  \n" +
                "        SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';  \n" +
                "    END IF;  \n" +
                "END;  \n" +

                /* **************************** New Script -> 08-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BU_genericcategory`;  \n" +
                "CREATE TRIGGER `Trg_BU_genericcategory` BEFORE UPDATE ON `genericcategory` FOR EACH ROW BEGIN  \n" +
                "        IF ((NEW.isDeleted = 0 AND NEW.deletedAt IS NULL) AND (SELECT COUNT(1) FROM genericcategory  \n" +
                "                    WHERE `categoryType` IN ('Printers','Label Templates','Document Type')  \n" +
                "                    AND `gencCategoryName` = NEW.gencCategoryName  \n" +
                "                    AND `categoryType` = NEW.categoryType  \n" +
                "                    AND isdeleted = 0 AND deletedAt IS NULL  \n" +
                "                    AND gencCategoryID != NEW.gencCategoryID)) > 0 THEN  \n" +
                "                SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';  \n" +
                "        ELSEIF ((NEW.isDeleted = 0 AND NEW.deletedAt IS NULL) AND (SELECT COUNT(1) FROM genericcategory  \n" +
                "                WHERE `categoryType` IN ('Equipment & Workstation Groups', 'Equipment & Workstation Types',  \n" +
                "                        'Equipment & Workstation Ownerships', 'Standard Types', 'Titles',  \n" +
                "                        'Operation Types', 'Geolocations', 'Responsibilities', 'Shipping Methods',  \n" +
                "                        'Payment Terms', 'Part Status', 'Barcode Separators', 'Payment Type Category')  \n" +
                "                AND (`gencCategoryName`= NEW.gencCategoryName  \n" +
                "                OR `gencCategoryCode` = NEW.gencCategoryCode)  \n" +
                "                AND `categoryType` = NEW.categoryType  \n" +
                "                AND isdeleted = 0 AND deletedAt IS NULL  \n" +
                "                AND gencCategoryID != NEW.gencCategoryID)) > 0 THEN  \n" +
                "            SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='duplicate entry';  \n" +
                "        END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_GetLocationsForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetLocationsForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM genericcategory gc WHERE  \n" +
                "		gc.categoryType = 'Geolocations' AND gc.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "	  SELECT gc.gencCategoryID  \n" +
                "			,gc.gencCategoryName  \n" +
                "			,gc.gencCategoryCode  \n" +
                "			,gc.displayOrder  \n" +
                "			,CASE WHEN (gc.isActive = 1) THEN 'Active' ELSE 'Inactive' END STATUS  \n" +
                "			,gc.isDeleted  \n" +
                "		FROM genericcategory gc  \n" +
                "		WHERE  gc.categoryType = 'Geolocations'  \n" +
                "			AND gc.gencCategoryID = IFNULL(pId,gc.gencCategoryID)  \n" +
                "			AND  \n" +
                "				(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(gc.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(gc.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "Drop Procedure if exists `Sproc_GetWorkorderAssemblyExcessstockLocation`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderAssemblyExcessstockLocation`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetWorkorderAssemblyExcessstockLocation = CONCAT(\"  \n" +
                "		SELECT wa.woID, wa.id, wa.isdefault, wa.geolocationId,  wa.notes, wa.serialNoDescription,  \n" +
                "        fun_getGenericCategoryNameByID(wa.geolocationId) location,  \n" +
                "		fun_getUserNameByID(wa.updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(wa.createdBy) createdby,  \n" +
                "		fun_getRoleByID(wa.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(wa.updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(wa.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(wa.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "		FROM workorder_assembly_excessstock_location wa  \n" +
                "		WHERE IFNULL(wa.isDeleted, 0) = 0  \n" +
                "	\");  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetWorkorderAssemblyExcessstockLocation,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetWorkorderAssemblyExcessstockLocation,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_Utility_AddOldAssemblyStockGeolocatoinInGenericcategory`;  \n" +
                "CREATE PROCEDURE `Sproc_Utility_AddOldAssemblyStockGeolocatoinInGenericcategory`()  \n" +
                "BEGIN  \n" +
                "		drop temporary table if exists temp_assembly_excessstock_location;  \n" +
                "		create temporary table temp_assembly_excessstock_location as  \n" +
                "			Select Distinct location From workorder_assembly_excessstock_location;  \n" +
                "  \n" +
                "		Select count(1) from temp_assembly_excessstock_location  as t LEFT join genericcategory gc on gc.gencCategoryName = t.location AND gc.categoryType ='Geolocations'  \n" +
                "													where gc.gencCategoryName is null;  \n" +
                "  \n" +
                "		# insert record in genericcategory if Geolocation record is not available.  \n" +
                "		INSERT into genericcategory(gencCategoryName, categoryType, createdAt, createdBy, createByRoleId)  select  \n" +
                "			t.location, 'Geolocations', fun_DatetimetoUTCDateTime() ,1,1  from temp_assembly_excessstock_location  as t LEFT join genericcategory gc on gc.gencCategoryName = t.location AND gc.categoryType ='Geolocations'  \n" +
                "			where gc.gencCategoryName is null;  \n" +
                "  \n" +
                "        # Update geolocationId in workorder_assembly_excessstock_location from genericcategory.  \n" +
                "		update workorder_assembly_excessstock_location as wael set wael.geolocationId = (Select gc.gencCategoryID from genericcategory gc where gc.gencCategoryName = wael.location AND gc.categoryType = 'Geolocations' and gc.isDeleted = 0 limit 1);  \n" +
                "  \n" +
                "        drop temporary table if exists temp_assembly_excessstock_location;  \n" +
                "		Alter table workorder_assembly_excessstock_location Drop column location;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                "drop procedure if exists `Sproc_GetVUWorkorderReadyassyStk`;  \n" +
                "CREATE PROCEDURE `Sproc_GetVUWorkorderReadyassyStk`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "  \n" +
                "	-- vuwoss.opID, vuwoss.woOPID,  \n" +
                "	SET @temp_Sproc_GetVUWorkorderReadyassyStk = CONCAT(\"  \n" +
                "  \n" +
                "	SELECT vuwoss.woid AS woID, vuwoss.woNumber, vuwoss.shippedQty, vuwoss.buildQty , vuwoss.wipQty ,  \n" +
                "		vuwoss.scrapQty AS scrappedQty  , vuwoss.buildOverageQty ,  vuwoss.poQty ,  \n" +
                "		(IFNULL(vuwoss.buildQty,0) - IFNULL(vuwoss.firstOPtotalQty,0)) AS returnPending,  \n" +
                "		fun_getMfgCodeByID(co.mfgcodeID) AS mfgCode ,  \n" +
                "		co.nickname AS `nickName`, co.PIDCODE AS `PIDCode`, co.mfgPN, co.mfgPNDescription AS mfgPNDescription,  \n" +
                "		co.isCustom ,  \n" +
                "		ro.rohsIcon, `ro`.`name` AS `rohsName` ,  \n" +
                "		vuwoss.woVersion, vuwoss.readytoShipQty,  \n" +
                "		vuwoss.stockAdjustmentQty ,  \n" +
                "		(CASE WHEN vuwoss.woid IS NOT NULL THEN  \n" +
                "				(IFNULL(vuwoss.readytoShipQty,0) + IFNULL(vuwoss.stockAdjustmentQty,0))  \n" +
                "			ELSE (IFNULL(vuwoss.stockAdjustmentQtyWithFinalAdjustment,0)) END) AS readytoShipQtyWithFinalStockAdjustment ,  \n" +
                "		fun_getGenericCategoryNameByID(wae.geolocationId) location,wae.serialNoDescription, wae.notes, vuwoss.partID ,  \n" +
                "		vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,  \n" +
                "   		vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
                "		(CASE WHEN vuwoss.woid IS NULL THEN  \n" +
                "					(SELECT GROUP_CONCAT(DISTINCT poNumber SEPARATOR ', ') FROM `assemblystock`  WHERE woNumber = vuwoss.woNumber AND isDeleted = 0 AND `type` = 'OS')  \n" +
                "			ELSE vusalesorderdet.poNumber END) poNumber,  \n" +
                "		vusalesorderdet.salesOrderNumber, vusalesorderdet.lineID ,  \n" +
                "		 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues  \n" +
                "	FROM vu_workorder_summary_stk vuwoss  \n" +
                "		JOIN component co ON vuwoss.partID = co.id AND co.isDeleted = 0  \n" +
                "		left JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND ro.isdeleted = 0  \n" +
                "		LEFT JOIN workorder_assembly_excessstock_location wae ON vuwoss.woid = wae.woID AND wae.isdefault = 1 AND wae.isDeleted = 0  \n" +
                "		LEFT OUTER JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = vuwoss.woid  \n" +
                "  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY woNumber ASC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetVUWorkorderReadyassyStk,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetVUWorkorderReadyassyStk,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 08-12-2021 *********************************** */
                /* **************************** Add Script Version -> 08-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5655,'2.00','V1',' User Story 38220: Menu Changes: FOB and Locations - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5655:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-12-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetsalesOrderDetailStatus;  \n" +
                "CREATE PROCEDURE `Sproc_GetsalesOrderDetailStatus`(  \n" +
                "	IN psalesorderDetID VARCHAR(10000),  \n" +
                "	IN preleaseLineId INT,  \n" +
                "    IN pSalesOrderId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vQtyRelease INT;  \n" +
                "	DECLARE vQtyWprkorder INT;  \n" +
                "	DECLARE vSalesOrderDetailIdOfRelease INT;  \n" +
                "	DECLARE vSalesOrderDetailIdOfWO INT;  \n" +
                "    DECLARE vTransactionCnt INT DEFAULT 0;  \n" +
                "    IF pSalesOrderId IS NULL THEN  \n" +
                "		SELECT 	IFNULL(SUM(kitReleaseQty),0), salesOrderDetID  \n" +
                "		INTO 	vQtyRelease, vSalesOrderDetailIdOfRelease  \n" +
                "		FROM 	salesorder_plan_detailsmst  \n" +
                "		WHERE 	FIND_IN_SET(salesOrderDetID, psalesorderDetID)  \n" +
                "				AND isdeleted = 0  \n" +
                "				AND kitStatus = 'R'  \n" +
                "		GROUP BY salesOrderDetID;  \n" +
                "  \n" +
                "		SELECT 	IFNULL(SUM(poQty),0), salesOrderDetailID  \n" +
                "		INTO 	vQtyWprkorder, vSalesOrderDetailIdOfWO  \n" +
                "		FROM 	workorder_salesorder_details  \n" +
                "		WHERE 	FIND_IN_SET(salesOrderDetailID, psalesorderDetID)  \n" +
                "				AND isdeleted = 0  \n" +
                "		GROUP BY salesOrderDetailID;  \n" +
                "  \n" +
                "		SELECT vQtyRelease, vSalesOrderDetailIdOfRelease, vQtyWprkorder, vSalesOrderDetailIdOfWO;  \n" +
                "	  IF(preleaseLineId IS NULL) THEN  \n" +
                "		SELECT 	IFNULL(SUM(cpd.shipQty),0) shippedqty, cp.id, GROUP_CONCAT(DISTINCT(cp.packingSlipNumber)) packingSlipNumber, refSalesOrderID vSalesOrderDetailIdOfCustPS  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		WHERE FIND_IN_SET(cpd.refsalesorderdetid,psalesorderDetID) AND  cpd.isdeleted = 0  \n" +
                "			AND cp.transType = 'P';  \n" +
                "	   ELSE  \n" +
                "		SELECT shippedQty AS shippedqty FROM   vu_shippingsummaryperReleasePlan WHERE shippingId=preleaseLineId;  \n" +
                "	   END IF;  \n" +
                "	ELSE  \n" +
                "			SELECT 	vTransactionCnt + count(1)  \n" +
                "			INTO 	vTransactionCnt  \n" +
                "			FROM 	salesorder_plan_detailsmst    spd  \n" +
                "            JOIN 	salesorderdet sod ON sod.id = spd.salesOrderDetID and sod.isDeleted = 0  \n" +
                "			WHERE spd.isDeleted = 0  \n" +
                "			AND spd.kitStatus = 'R'  \n" +
                "            and sod.refSalesOrderID = pSalesOrderId ;  \n" +
                "  \n" +
                "            SELECT  vTransactionCnt + count(1)  \n" +
                "			INTO 	vTransactionCnt  \n" +
                "			FROM 	workorder_salesorder_details  wsd  \n" +
                "             JOIN 	salesorderdet sod ON sod.id = wsd.salesOrderDetailID and sod.isDeleted = 0  \n" +
                "			WHERE 	sod.refSalesOrderID = pSalesOrderId  \n" +
                "			AND wsd.isdeleted = 0    ;  \n" +
                "  \n" +
                "            SELECT 	vTransactionCnt + count(1)  \n" +
                "            INTO 	vTransactionCnt  \n" +
                "			FROM 	customer_packingslip cp  \n" +
                "			JOIN 	salesordermst som ON som.id = cp.refSalesOrderID AND som.isdeleted = 0  \n" +
                "			WHERE 	cp.isDeleted = 0  \n" +
                "			AND cp.refSalesOrderID = pSalesOrderId ;  \n" +
                "  \n" +
                "			Select 	ifnull(vTransactionCnt,0) transCnt;  \n" +
                "    END IF;  \n" +
                "    IF psalesorderDetID IS NULL THEN  \n" +
                "		SELECT sd.id FROM salesorderdet sd  \n" +
                "		WHERE sd.refBlanketPOID IN (SELECT id FROM salesorderdet sdd  \n" +
                "				WHERE sdd.refSalesOrderID=pSalesOrderId AND sdd.isdeleted=0);  \n" +
                "	ELSE  \n" +
                "		SELECT sm.salesOrderNumber,poNumber,sm.id soID,sd.id  \n" +
                "		FROM salesorderdet sd  \n" +
                "		JOIN salesordermst sm ON sd.refSalesOrderID=sm.id AND sm.isdeleted=0  \n" +
                "			  WHERE sd.refBlanketPOID=psalesorderDetID AND sd.isdeleted=0;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 09-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5656,'2.00','V1','CheckIN for Sproc_GetsalesOrderDetailStatus for BPO case - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5656:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-12-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getSalesOrderReleaseLineDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderReleaseLineDetails`(  \n" +
                "IN pSalesOrderDetID  INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "          SELECT ss.shippingID,  \n" +
                "                 ss.qty,  \n" +
                "                 IFNULL(ss.unitMeaser,'EA') unitMeaser,  \n" +
                "                 ss.shippingDate,  \n" +
                "                 ss.shippingAddressID,  \n" +
                "                 ss.description,  \n" +
                "                 ss.priority,  \n" +
                "                 ss.packingSlipNo,  \n" +
                "                 ss.invoiceNo,  \n" +
                "                 ss.releaseNotes,  \n" +
                "                 ss.releaseNumber,  \n" +
                "                 ss.requestedDockDate,  \n" +
                "                 ss.carrierID,  \n" +
                "                 ss.carrierAccountNumber,  \n" +
                "                 ss.promisedShipDate,  \n" +
                "                 ss.shippingMethodID,  \n" +
                "                 ss.revisedRequestedDockDate,  \n" +
                "                 ss.revisedRequestedShipDate,  \n" +
                "                 ss.revisedRequestedPromisedDate,  \n" +
                "                 ss.isAgreeToShip,  \n" +
                "                 1 AS isShippingDateConfirm,  \n" +
                "                 1 AS isrequestedDockDateConfirm,  \n" +
                "                 1 AS promisedShipDateConfirm,  \n" +
                "                 1 AS isRevisedShippingDateConfirm,  \n" +
                "                 1 AS isrevisedRequestedDockDateConfirm,  \n" +
                "                 1 AS revisedPromisedShipDateConfirm,  \n" +
                "                 ss.customerReleaseLine,  \n" +
                "                 CASE WHEN shp.shippedQty IS NULL OR shp.shippedQty=0 THEN sbp.blanketPOShipQty ELSE shp.shippedQty END shippedQty,  \n" +
                "                 ss.isReadyToShip,  \n" +
                "                 ss.poReleaseNumber  \n" +
                "                 FROM salesshippingmst ss  LEFT JOIN (  \n" +
                "                                      SELECT SUM(cpd.shipQty) shippedQty,cpd.shippingId FROM customer_packingslip_det cpd  \n" +
                "                                      JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID WHERE  cp.transType='P' AND cpd.isdeleted=0  \n" +
                "                                    GROUP BY cpd.shippingId ) AS shp  ON shp.shippingId=ss.shippingID  \n" +
                "                                    LEFT JOIN(  \n" +
                "                                      SELECT SUM(sd.shippedQty) AS blanketPOShipQty,sd.blanketShippingID FROM   (SELECT SUM(cpd.shipQty) shippedQty,cpd.shippingId,ssm.shippingID AS blanketShippingID FROM customer_packingslip_det cpd  \n" +
                "                                      JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
                "                                      LEFT JOIN salesshippingmst ssm ON ssm.refShippingLineID=`cpd`.`shippingId` AND ssm.isDeleted=0  \n" +
                "                                      WHERE  cp.transType='P' AND cpd.isdeleted=0  \n" +
                "                                    GROUP BY cpd.shippingId ,ssm.shippingID)sd GROUP BY sd.blanketShippingID  \n" +
                "                                    ) AS sbp ON sbp.blanketShippingID=ss.shippingID  \n" +
                "                 WHERE ss.sDetID= pSalesOrderDetID AND ss.isdeleted=0;  \n" +
                "  \n" +
                "                 SELECT releaseLevelComment,partCategory FROM salesorderdet WHERE id=pSalesOrderDetID;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 09-12-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveBlanketPOLinkFuturePOOption` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveBlanketPOLinkFuturePOOption`(  \n" +
                "		IN pSoDetID INT,  \n" +
                "		IN pBlanketPOID INT,  \n" +
                "		IN pUserID VARCHAR(10),  \n" +
                "		IN pUserRoleID VARCHAR(10)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "  \n" +
                "         CREATE TEMPORARY TABLE IF NOT EXISTS tempBlanketPOTbl AS  \n" +
                "         SELECT shippingID,sDetID,qty,unitMeaser,shippingDate,shippingMethodID,shippingAddressID,description,packingSlipNo,invoiceNo,releaseNotes,  \n" +
                "                 promisedShipDate,releaseNumber,requestedDockDate,carrierID,carrierAccountNumber,customerReleaseLine,revisedRequestedDockDate,  \n" +
                "                 revisedRequestedShipDate,revisedRequestedPromisedDate,isAgreeToShip,isdeleted  FROM salesshippingmst WHERE  sDetID=pSoDetID ;  \n" +
                "  \n" +
                "                 UPDATE salesshippingmst  \n" +
                "                  SET isdeleted=1,  \n" +
                "                  deletedAt=CURRENT_TIMESTAMP,  \n" +
                "                  deletedBy=pUserID,  \n" +
                "                  deleteByRoleId=pUserRoleID  \n" +
                "         WHERE refShippingLineID IN (SELECT shippingID FROM tempBlanketPOTbl WHERE isdeleted=1) AND sDetID=pBlanketPOID;  \n" +
                "  \n" +
                "          CREATE TEMPORARY TABLE IF NOT EXISTS tempSalesShippingMst AS  \n" +
                "           SELECT ss.refShippingLineID FROM  salesshippingmst ss WHERE ss.sDetID=pBlanketPOID AND ss.isdeleted=0;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "         -- update blanket po sales order detail  \n" +
                "         UPDATE salesshippingmst  ss  \n" +
                "         JOIN tempBlanketPOTbl tp ON tp.shippingID=ss.refShippingLineID  \n" +
                "         SET  \n" +
                "           ss.qty=tp.qty,  \n" +
                "           ss.unitMeaser=tp.unitMeaser,  \n" +
                "           ss.shippingDate=tp.shippingDate,  \n" +
                "           ss.shippingMethodID=tp.shippingMethodID,  \n" +
                "           ss.shippingAddressID=tp.shippingAddressID,  \n" +
                "           ss.description=tp.description,  \n" +
                "           ss.packingSlipNo=tp.packingSlipNo,  \n" +
                "           ss.invoiceNo=tp.invoiceNo,  \n" +
                "           ss.releaseNotes=tp.releaseNotes,  \n" +
                "           ss.promisedShipDate=tp.promisedShipDate,  \n" +
                "           ss.releaseNumber=tp.releaseNumber,  \n" +
                "           ss.requestedDockDate=tp.requestedDockDate,  \n" +
                "           ss.carrierID=tp.carrierID,  \n" +
                "           ss.carrierAccountNumber=tp.carrierAccountNumber,  \n" +
                "           ss.customerReleaseLine=tp.customerReleaseLine,  \n" +
                "           ss.revisedRequestedDockDate=tp.revisedRequestedDockDate,  \n" +
                "           ss.revisedRequestedShipDate=tp.revisedRequestedShipDate,  \n" +
                "           ss.revisedRequestedPromisedDate=tp.revisedRequestedPromisedDate,  \n" +
                "           ss.isAgreeToShip=tp.isAgreeToShip,  \n" +
                "           ss.updatedBy=pUserID,  \n" +
                "           ss.updateByRoleId=pUserRoleID  \n" +
                "           WHERE ss.sDetID=pBlanketPOID AND ss.refShippingLineID=tp.shippingID;  \n" +
                "  \n" +
                "  \n" +
                "		SELECT IFNULL(MAX(ss.releaseNumber),0) , COUNT(1) INTO @vReleaseNumber , @vCount  \n" +
                "		FROM salesshippingmst ss  \n" +
                "		WHERE ss.sDetID=pBlanketPOID AND ss.isdeleted=0 ;  \n" +
                "  \n" +
                "		/*(SELECT COUNT(1)+1  \n" +
                "		FROM salesshippingmst ss  \n" +
                "		WHERE ss.sDetID=pBlanketPOID AND ss.isdeleted=0); */  \n" +
                "  \n" +
                "          -- insert into blanket po detail  \n" +
                "		  INSERT INTO salesshippingmst(sDetID,qty,unitMeaser,shippingDate,shippingMethodID,shippingAddressID,description,packingSlipNo,invoiceNo,releaseNotes,  \n" +
                "		  promisedShipDate,releaseNumber,requestedDockDate,carrierID,carrierAccountNumber,customerReleaseLine,revisedRequestedDockDate,  \n" +
                "		  revisedRequestedShipDate,revisedRequestedPromisedDate,isAgreeToShip,createdBy,createByRoleId,refShippingLineID)  \n" +
                "  \n" +
                "		  SELECT pBlanketPOID,qty,unitMeaser,shippingDate,shippingMethodID,shippingAddressID,description,packingSlipNo,invoiceNo,releaseNotes,  \n" +
                "		  promisedShipDate, @vReleaseNumber := @vReleaseNumber + 1 ,requestedDockDate,carrierID,carrierAccountNumber, @vCount := @vCount + 1 ,revisedRequestedDockDate,  \n" +
                "		  revisedRequestedShipDate,revisedRequestedPromisedDate,isAgreeToShip,pUserID,pUserRoleID,shippingID  \n" +
                "		  FROM tempBlanketPOTbl  \n" +
                "		  WHERE isdeleted=0  \n" +
                "		  AND shippingID NOT IN (SELECT ss.refShippingLineID FROM  tempSalesShippingMst ss);  \n" +
                "  \n" +
                "		  DROP TEMPORARY TABLE IF EXISTS tempBlanketPOTbl;  \n" +
                "		  DROP TEMPORARY TABLE IF EXISTS tempSalesShippingMst;  \n" +
                "  \n" +
                "         -- insert sales order other expense for blanket PO  \n" +
                "         IF((SELECT COUNT(1) FROM salesorder_otherexpense_details WHERE refSalesOrderDetID=pSoDetID)=0) THEN  \n" +
                "		        INSERT INTO salesorder_otherexpense_details(refSalesOrderDetID,partID,qty,price,frequency,lineComment,lineInternalComment,createdBy,updatedBy,createByRoleId,updateByRoleId,frequencyType)  \n" +
                "			 SELECT  pSoDetID,partID,qty,price,frequency,lineComment,lineInternalComment,pUserID,pUserID,pUserRoleID,pUserRoleID,frequencyType FROM salesorder_otherexpense_details  \n" +
                "			 WHERE refSalesOrderDetID=pBlanketPOID AND isdeleted=0;  \n" +
                "  \n" +
                "			 -- update sales order release line  \n" +
                "				UPDATE salesorder_otherexpense_details sd SET sd.refReleaseLineID=(SELECT ss.shippingID FROM salesshippingmst ss WHERE ss.sDetID=sd.refSalesOrderDetID LIMIT 1)  \n" +
                "				WHERE sd.frequency=2 AND sd.refSalesOrderDetID IN (SELECT sdt.id FROM salesorderdet sdt WHERE sdt.refSalesOrderID=pSoDetID);  \n" +
                "  \n" +
                "         END IF;  \n" +
                "  \n" +
                "         SELECT refSalesOrderID INTO @refSalesOrderID FROM salesorderdet WHERE id=pSoDetID;  \n" +
                "         -- save mapping other charges data for same line  \n" +
                "         IF((SELECT COUNT(1) FROM salesorderdet WHERE refSODetID=pSoDetID)=0) THEN  \n" +
                "  \n" +
                "		SELECT IFNULL(MAX(sd.lineID),0) INTO @vLineID  \n" +
                "		FROM salesorderdet sd  \n" +
                "		WHERE sd.refSalesOrderID=@refSalesOrderID AND sd.isdeleted=0 ;  \n" +
                "  \n" +
                "                              INSERT INTO salesorderdet(refSalesOrderID,qty,price,shippingQty,remark,createdBy,updatedBy,materialTentitiveDocDate,prcNumberofWeek,isHotJob,materialDueDate,  \n" +
                "				partID,isCancle,tentativeBuild,uom,lineID,createByRoleId,updateByRoleId,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,custPOLineNumber,partCategory,salesOrderDetStatus,  \n" +
                "				 isSkipKitCreation,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType,refSODetID)  \n" +
                "  \n" +
                "			 SELECT @refSalesOrderID,qty,price,shippingQty,remark,pUserID,pUserID,materialTentitiveDocDate,prcNumberofWeek,isHotJob,materialDueDate,  \n" +
                "			  partID,0,tentativeBuild,uom, @vLineID := @vLineID + 1 ,pUserRoleID,pUserRoleID,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,(SELECT COUNT(1)+1 FROM salesorderdet sd WHERE sd.refSalesOrderID=@refSalesOrderID AND sd.isdeleted=0),partCategory,1,  \n" +
                "			  isSkipKitCreation,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType,pSoDetID  \n" +
                "			  FROM salesorderdet WHERE refSODetID=pBlanketPOID AND isdeleted=0;  \n" +
                "  \n" +
                "			  -- update sales order release line  \n" +
                "				UPDATE salesorderdet sd SET sd.refSOReleaseLineID=(SELECT ss.shippingID FROM salesshippingmst ss WHERE ss.sDetID=sd.id LIMIT 1)  \n" +
                "				WHERE sd.frequency=2 AND sd.refSODetID=pSoDetID;  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 09-12-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report` ;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "         `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`rmaNumber` AS `rmaNumber`,  \n" +
                "        `a`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "        `a`.`debitedByCustText` AS `debitedByCustText`,  \n" +
                "        `a`.`rmaOrgPONumber` AS `rmaOrgPONumber`,  \n" +
                "        `a`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "        `a`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "        `a`.`reworkReqText` AS `reworkReqText`,  \n" +
                "        `a`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "        `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "        `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "        `a`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "        `a`.`blanketPOOptionText` AS `blanketPOOptionText`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                `sm`.`rmaNumber` AS `rmaNumber`,  \n" +
                "                `sm`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isDebitedByCustomer` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `debitedByCustText`,  \n" +
                "                `sm`.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "                `sm`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "                `sm`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isReworkRequired` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `reworkReqText`,  \n" +
                "                `sm`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                `sm`.`createdAt` AS `createdDate`,  \n" +
                "                `sm`.`updatedAt` AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                IFNULL(CASE WHEN sm.blanketPOOption=2 THEN sqt.BPOShippedQty ELSE `sq`.`ShippedQty` END, 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "                `sm`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 1) THEN 'Use Blanket PO# for All Releases'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN 'Link Blanket PO to Future PO(s)'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 3) THEN 'Use Blanket PO# and Release#'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `blanketPOOptionText`  \n" +
                "        FROM  \n" +
                "            ((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (  \n" +
                "        SELECT IFNULL(SUM(sbt.ShippedQty),0) BPOShippedQty,sbt.refBlanketPOID AS blanketPOSoDetID FROM (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,sdd.refBlanketPOID,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`))  \n" +
                "        JOIN salesorderdet sdd ON sdd.id=`cpd`.`refSalesorderDetid` AND sdd.isDeleted=0  \n" +
                "        )  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`,sdd.refBlanketPOID) sbt GROUP BY sbt.refBlanketPOID  \n" +
                "        ) `sqt` ON ((`sqt`.`blanketPOSoDetID` = `a`.`id`))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refSalesOrderID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refSalesOrderID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** New Script -> 09-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5657,'2.00','V1',' SO Details-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5657:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-12-2021 *********************************** */
                "UPDATE `systemconfigrations`  \n" +
                "SET `key`='ShowDigikeyAccessTokenPopupOnLogin',  \n" +
                "`values` = 0,  \n" +
                "`displayName` = 'Show Access Token Popup On Login',  \n" +
                "`Description` = 'Turn off Digikey API Key Setting pop-up by setting value of SkipCheckAccessTokenOnLogin to 0.'  \n" +
                "WHERE `key`= 'SkipCheckAccessTokenOnLogin';  \n" +
                /* **************************** Add Script Version -> 09-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5658,'2.00','V1','User Story 39009: Configurable Check Access Token Popup on Login - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5658:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
                "	IN pAssyIDs VARCHAR(16383),  \n" +
                "	IN pRestrictPart TINYINT,  \n" +
                "	IN pExpireMaterial TINYINT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pIsShowPackagingAlias TINYINT,  \n" +
                "	IN pStandardIDs VARCHAR(16383),  \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),  \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),  \n" +
                "	IN pDateCode VARCHAR(16383),  \n" +
                "	IN pIsAvailableToSell TINYINT,  \n" +
                "	IN pIsRestrictedUMID TINYINT,  \n" +
                "	IN pIsInternalStock TINYINT,  \n" +
                "	IN pIsCustomerStock TINYINT,  \n" +
                "	IN pdepartmentIDs VARCHAR(16383),  \n" +
                "	IN pwarehouseType VARCHAR(255),  \n" +
                "	IN pWarehouse VARCHAR(16383),  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pSearchTextAttribute LONGTEXT,  \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),  \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
                "	IN pInventoryType VARCHAR(255),  \n" +
                "    IN pInnerQueryWhereClause VARCHAR(16383),  \n" +
                "    IN pIsNonCofc TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE attributeSearchString LONGTEXT;  \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "	DECLARE attributeSearchChip  VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);  \n" +
                "    DECLARE v_ExpiryDate datetime;  \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);  \n" +
                "    set v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET v_DescriptionWhereClause = '';  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN  \n" +
                "		SET pInnerQueryWhereClause = ' ';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsNonCofc = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  packingSlipName IS NULL ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* Non COFc records filter */  \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN  \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
                "            into	v_PartIDs  \n" +
                "			FROM 	component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 	c.id = pPartId  \n" +
                "			AND 	c.isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			select pPartId into v_PartIDs;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*below query need to refactor*/  \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
                "		SET attributeSearchString = pSearchTextAttribute;  \n" +
                "		do_this:  \n" +
                "		LOOP  \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
                "				LEAVE do_this;  \n" +
                "			END IF;  \n" +
                "		END LOOP do_this;  \n" +
                "	END IF;  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "			AND partId IN (SELECT id FROM component WHERE isDeleted = 0 AND mfgcodeid=pCustomerId);  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;  \n" +
                "    CREATE temporary table temp_component_sid_stock(  \n" +
                "		  id int NOT NULL DEFAULT '0',  \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
                "		  uid varchar(15) DEFAULT NULL,  \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
                "		  fromUIDId int DEFAULT NULL,  \n" +
                "		  fromUID varchar(15) DEFAULT NULL,  \n" +
                "		  parentUIDId int DEFAULT NULL,  \n" +
                "		  parentUID varchar(15) DEFAULT NULL,  \n" +
                "		  mfgcodeID int NOT NULL,  \n" +
                "		  mfg text,  \n" +
                "		  refcompid int DEFAULT NULL,  \n" +
                "		  mfgPN varchar(100) NOT NULL,  \n" +
                "		  PIDCode varchar(109) NOT NULL,  \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,  \n" +
                "		  RoHSStatusID int NOT NULL,  \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
                "		  rohsName varchar(50) DEFAULT NULL,  \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
                "		  spq decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
                "		  uom int DEFAULT NULL,  \n" +
                "          uomClassID int DEFAULT NULL,  \n" +
                "		  uomName varchar(100) NOT NULL,  \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  packaginggroupID int DEFAULT NULL,  \n" +
                "		  packaging int DEFAULT NULL,  \n" +
                "		  packagingName varchar(100) NOT NULL,  \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
                "		  costCategoryID int DEFAULT NULL,  \n" +
                "		  costCategory varchar(147) DEFAULT NULL,  \n" +
                "		  lotCode varchar(255) DEFAULT NULL,  \n" +
                "		  dateCode varchar(10) DEFAULT NULL,  \n" +
                "		  UMIDrohsStatusID int NOT NULL,  \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
                "		  binID int DEFAULT NULL,  \n" +
                "		  location varchar(110) DEFAULT NULL,  \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  warehouseID int DEFAULT NULL,  \n" +
                "		  warehouse varchar(50) NOT NULL,  \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,  \n" +
                "		  department varchar(50) NOT NULL,  \n" +
                "		  departmentID int NOT NULL DEFAULT '0',  \n" +
                "		  fromBin int DEFAULT NULL,  \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,  \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  fromWarehouse int DEFAULT NULL,  \n" +
                "		  fromWHName varchar(50) NOT NULL,  \n" +
                "		  fromDepartment int DEFAULT NULL,  \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,  \n" +
                "		  orgRecBin int DEFAULT NULL,  \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
                "		  orgRecWarehouse int DEFAULT NULL,  \n" +
                "		  orgRecWHName varchar(50) NOT NULL,  \n" +
                "		  orgRecDepartment int DEFAULT NULL,  \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
                "		  expiryDate date DEFAULT NULL,  \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
                "		  pcbPerArray int DEFAULT NULL,  \n" +
                "		  nickName varchar(50) DEFAULT NULL,  \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,  \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,  \n" +
                "		  woNumber varchar(255) DEFAULT NULL,  \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,  \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
                "		  mountingTypeID int NOT NULL,  \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
                "		  partPackage varchar(50) DEFAULT NULL,  \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
                "		  detailDescription text,  \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
                "		  customerID int DEFAULT NULL,  \n" +
                "		  customer text,  \n" +
                "		  assyID int DEFAULT NULL,  \n" +
                "		  assembly varchar(109),  \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
                "          cpnMFGCodeID INT DEFAULT NULL,  \n" +
                "		  cpnMFGCode text,  \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,  \n" +
                "		  cpnMFGPN varchar(100),  \n" +
                "		  refSupplierPartId int DEFAULT NULL,  \n" +
                "		  supplierMFGCode text,  \n" +
                "		  supplieMFGPN varchar(100),  \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
                "		  isTransit varchar(10) DEFAULT NULL,  \n" +
                "		  searchUser varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
                "		  createdAt varchar(50) DEFAULT NULL,  \n" +
                "		  createdBy varchar(255) NOT NULL,  \n" +
                "		  createdByName varchar(50) DEFAULT NULL,  \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,  \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,  \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  allocatedToKit text,  \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
                "		  packingSupplierName text,  \n" +
                "		  packingSlipId int DEFAULT NULL,  \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,  \n" +
                "          packingSlipNumber VARCHAR(100) DEFAULT NULL,  \n" +
                "          cocDocumentCount int default 0,  \n" +
                "          parentCofCDocumentCount int default 0,  \n" +
                "          createByRoleId int default null,  \n" +
                "          updateByRoleId int default null,  \n" +
                "          isReservedStock TINYINT DEFAULT FALSE,  \n" +
                "          reservedStock VARCHAR(10)  \n" +
                "		);  \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
                "					(		id, 				scanlabel, 			umidPrefix, 			uid,					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType, 					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "                            parentUID, 			mfgcodeID, 			mfg, 					refcompid, 				mfgPN, 					PIDCode,  \n" +
                "                            packageQty, 		mslLevel, 			RoHSStatusID, 			rohsIcon, 				rohsName, 				mfgPNDescription,  \n" +
                "                            spq, 				pkgQty, 			pkgUnit, 				uom, 					uomClassID, 			uomName,  \n" +
                "                            orgPkgUnit, 		orgQty, 			packaginggroupID, 		packaging, 				packagingName, 			printStatus,  \n" +
                "                            tentativePrice, 	costScrapQty, 		costCategoryID, 		costCategory, 			lotCode, 				dateCode,  \n" +
                "                            UMIDrohsStatusID, 	UMIDrohsStatus, 	binID, 					location, 				side, 					warehouseID,  \n" +
                "                            warehouse, 			warehouseType, 		department, 			departmentID, 			fromBin, 				fromBinName,  \n" +
                "                            fromSide, 			fromWarehouse, 		fromWHName, 			fromDepartment, 		fromDepartmentName, 	orgRecBin,  \n" +
                "                            orgRecBinName, 		orgRecWarehouse, 	orgRecWHName, 			orgRecDepartment, 		orgRecDepartmentName, 	expiryDate,  \n" +
                "                            expiredStatus, 		pcbPerArray, 		nickName, 				specialNote, 			isinStk, 				woNumber,  \n" +
                "                            refRestrictUMIDId, 	isUMIDRestrict, 	UMIDRestricted, 		restrictUsePermanently, restrictUSEwithpermission,  \n" +
                "                            restrictPackagingUsePermanently, 		restrictPackagingUseWithpermission, 			reasonUMIDRestricted, 	countOfRestrictUMID,  \n" +
                "                            mountingTypeID, 	mountingTypeName, 	externalPartPackage, 	partPackage, 			internalPartPackage, 	isCustom,  \n" +
                "                            detailDescription, 	pictureCount, 		customerID, 			customer, 				assyID,					assembly,  \n" +
                "                            cpn, 				mfgAvailable, 		customerConsign, 		cpnMFGCodeID, 			cpnMFGCode, 			refCPNMFGPNID,  \n" +
                "                            cpnMFGPN, 			refSupplierPartId, 	supplierMFGCode, 		supplieMFGPN, 			totalScrapUnit, 		perScrapQty,  \n" +
                "                            isTransit, 			searchUser, 		mfrDateCodeFormatID, 	mfrDateCode, 			mfrDateCodeFormat, 		createdAt,  \n" +
                "                            createdBy, 			createdByName, 		createdbyRole, 			createdUserCode, 		createByRoleId, 		updatedAt,  \n" +
                "                            updatedBy, 			umidModifiedBy, 	updatedbyRole, 			updateByRoleId, 		allocatedToKit, 		packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId, 		packingSlipSupplierId, 	packingSlipNumber,		isReservedStock,		reservedStock)  \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomClassID,				uomName,  \n" +
                "                            orgPkgUnit,      	orgQty, 			packaginggroupID,		packaging,				packagingName,  		printStatus,  \n" +
                "                            tentativePrice,   	costScrapQty,		costCategoryID,			costCategory,			lotCode,  \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,  \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin,  \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName,  \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,  \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,  \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,  \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,  \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,  \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly,  \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCodeID,			cpnMFGCode, 		 	refCPNMFGPNID,  \n" +
                "                            cpnMFGPN,  			refSupplierPartId,	supplierMFGCode,		supplieMFGPN,			totalScrapUnit,			perScrapQty,  \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt,  \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt,  \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId,	packingSlipNumber,		isReservedStock,		reservedStock  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,  \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'  \n" +
                "										WHEN css.receiveMaterialType = 'CP' THEN 'Customer Consigned Part'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayReceiveMaterialType,  \n" +
                "								css.stockInventoryType,  \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Incoming Stock'  \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Move Non-Q2C to Q2C Stock'  \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Non-UMID Assembly Stock'  \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayStockInventoryType,  \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,  \n" +
                "								CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfg,		css.refcompid,				c.mfgPN,					c.PIDCode,  \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,  \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,  \n" +
                "								css.pkgUnit,				css.uom,					u.measurementTypeID uomClassID,							u.unitName uomName,  \n" +
                "                                IFNULL(css.orgPkgUnit, 0) orgPkgUnit, 					css.orgQty,					c.packaginggroupID,			css.packaging,  \n" +
                "                                cp.name packagingName,		css.printStatus, 			IFNULL(c.price, 0) tentativePrice,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * IFNULL(c.price, 0)), 2) costScrapQty,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * 100), 2) perScrapQty,  \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,  \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,			CONCAT('(', cust.mfgCode, ')', ' ',  cust.mfgName) customer,  \n" +
                "								css.assyID,					assy.PIDCode assembly,  \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,  \n" +
                "								css.refCPNMFGPNID,	m_cpn.id cpnMFGCodeID, CONCAT('(', m_cpn.mfgCode, ')', ' ',  m_cpn.mfgName) cpnMFGCode,	cpn_comp.mfgPN cpnMFGPN,  \n" +
                "								css.refSupplierPartId, 	CONCAT('(', m_supp.mfgCode, ')', ' ',  m_supp.mfgName) supplierMFGCode,		supp_comp.mfgPN supplieMFGPN,  \n" +
                "								(IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0)) totalScrapUnit,  \n" +
                "								null isTransit,  \n" +
                "								null searchUser,  \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,  \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,  \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
                "								kit.kitname allocatedToKit,  \n" +
                "								null packingSlipName,  \n" +
                "								null packingSupplierName,  \n" +
                "								null packingSlipId,  \n" +
                "								null packingSlipSupplierId,  \n" +
                "                                NULL packingSlipNumber,  \n" +
                "                                css.isReservedStock,  \n" +
                "                                IF(css.isReservedStock = 0,'No','Yes') AS reservedStock  \n" +
                "					FROM 		component_sid_stock css  \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
                "								else ''  \n" +
                "                        end),  \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
                "                        /*below query need to refactor*/  \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN  \n" +
                "							' AND not exists (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	rfq_lineitems_alternatepart a  \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
                "								)  \n" +
                "						' else '' end),  \n" +
                "					\"  \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id  \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  \n" +
                "					inner join uoms u on css.uom = u.id  \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
                "					inner join binmst b on css.binID = b.id \" ,  \n" +
                "						(Case  \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id  \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id  \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
                "					left join (  \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit  \n" +
                "								FROM 		component_sid_stock_history cssh  \n" +
                "								where 		cssh.scrappedUnit > 0  \n" +
                "								GROUP BY 	cssh.refUIDId  \n" +
                "					) cssh on css.id = cssh.refUIDId  \n" +
                "                   left join (  \n" +
                "								SELECT 		vu.umidid,	SUM((IFNULL(vu.scrappedunit,0) - IFNULL(vu.scrapExpiredUnit,0))) AS kitScrappepUnit  \n" +
                "								FROM 		vu_material_consumption_scrapped_det vu  \n" +
                "                                LEFT JOIN  component_sid_stock_history cssh ON cssh.id = vu.componentSIDStockHistoryID AND cssh.isDeleted = 0  \n" +
                "								WHERE 		vu.scrappedunit > 0  \n" +
                "								GROUP BY 	vu.umidid  \n" +
                "					) vuu on vuu.umidid = css.id  \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
                "					left join (  \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
                "						from (  \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
                "							from component_sid_stock_restrict_umid rest_umid  \n" +
                "						) css_rst where css_rst.rnk = 1  \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
                "					left join (  \n" +
                "						SELECT 		k.refUIDId,  \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname  \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)  \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3  \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "						INNER JOIN	component c ON k.assyID = c.id  \n" +
                "						WHERE 		k.status = 'A'  \n" +
                "						GROUP BY 	k.refUIDId  \n" +
                "					) kit  ON kit.refUIDId = css.id  \n" +
                "					WHERE 	css.isdeleted = 0\",  \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
                "							  when (pCustomerId IS NOT NULL) then  \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
                "                        (case when (pExpireMaterial = 1) THEN  \n" +
                "									(case when (pExpiredDay = 0) THEN  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate = fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") ')  \n" +
                "									ELSE  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate BETWEEN fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") AND (fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") + INTERVAL ', pExpiredDay,' DAY ) ')  \n" +
                "									END)  \n" +
                "							  else ''  \n" +
                "						end),  \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 else ''  \n" +
                "                        end),  \n" +
                "						v_DescriptionWhereClause,  \n" +
                "                        pInnerQueryWhereClause,  \n" +
                "				\") As tempUMID\"  \n" +
                "			);  \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock;  \n" +
                "	EXECUTE tempSQLQuery;  \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;  \n" +
                "  \n" +
                "    # Update count for self documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.cocDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "	# Update count for parent documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "    # Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
                "	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
                "											then CONCAT(ps.mfgCode, ps.packingSlipNumber)  \n" +
                "										else null  \n" +
                "								  end),  \n" +
                "			t.packingSupplierName = CONCAT('(', ps.mfgCode, ') ', ps.mfgName),  \n" +
                "			t.packingSlipId = ps.packingSlipId,  \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId,  \n" +
                "            t.packingSlipNumber = ps.packingSlipNumber  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)  \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI');  \n" +
                "  \n" +
                "	# Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t  \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
                "	and		t.packingSlipId is null  \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "  \n" +
                "    # Update created by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.createByRoleId  \n" +
                "	set t.createdbyRole = r.name;  \n" +
                "  \n" +
                "    # Update updated by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.updateByRoleId  \n" +
                "	set t.updatedbyRole = r.name;  \n" +
                "  \n" +
                "    # Update created by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on u.id = t.createdBy  \n" +
                "    inner join employees emp on emp.id = u.employeeID  \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
                "  \n" +
                "    # Update updated by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on  u.id = t.updatedBy  \n" +
                "    inner join employees emp  on emp.id = u.employeeID  \n" +
                "	set t.umidModifiedBy = emp.initialName ;  \n" +
                "  \n" +
                "    # Update MFR Date Code Format  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "	inner join dateCodeFormatMst d on  d.id = t.mfrDateCodeFormatID  \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
                "  \n" +
                "    # Update In Transit Data  \n" +
                "	Update temp_component_sid_stock t  \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
                "	set t.isTransit = 'Yes',  \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)  \n" +
                "							when (messagetype = 1001) then 'Unauthorized'  \n" +
                "							else ''  \n" +
                "                        end);  \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT DISTINCT mfgcodeID AS id, mfg AS mfgCodeName from ( \", @vFromSQLQuery, \") as mfrDetail\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT DISTINCT packingSlipSupplierId AS id, packingSupplierName AS  mfgCodeName from ( \", @vFromSQLQuery, \") as supplierDetail\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-12-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5659,'2.00','V1','Bug 39374: On UMID list showing Error when apply Expire material filter - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
    }
    return allDbChangesArray;
});

// sample
//break;
//case 5496:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 11-11-2021 *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version -> 11-11-2021 *********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
//  "VALUES (5497,'2.00','V1',' Sample entry - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
//  );
//break;

/* ******** **********************/
// Please Note : Don't forgot to set schemaVersion as '2.00' instead of '1.00' as branch is Dev Branch
/* ******** **********************/