(function (maxBuildNumber, userid, requiredDet) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 5659:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-12-2021 *********************************** */
                "UPDATE `systemconfigrations`  \n" +
                "SET `key`='ShowDigikeyAccessTokenPopupOnLogin',  \n" +
                "`values` = 0,  \n" +
                "`displayName` = 'Show Access Token Popup On Login',  \n" +
                "`Description` = 'Turn off Digikey API Key Setting pop-up by setting value of ShowDigikeyAccessTokenPopupOnLogin to 0.'  \n" +
                "WHERE `key`= 'SkipCheckAccessTokenOnLogin';  \n" +
                /* **************************** Add Script Version -> 10-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5660,'2.00','V1','User Story 39009: Configurable Check Access Token Popup on Login - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5660:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitReleaseSummaryAndStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleaseSummaryAndStatus`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pMainAssyID INT,  \n" +
                "	IN pIsConsolidated TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    SELECT  c.PartID,	c.releaseCount, 	c.kitReturnStatus,		c.salesOrderCompletedStatus,	c.shortageQty,		c.toBeRelease,		c.totalReleased,  \n" +
                "			FUN_GETKITRELEASESTATUS(allocPerWithSubAssy,totalReleaseQty,totalPOQty,assyKitQty,assyPOQty,releaseCount,pendingCount) releaseStatus  \n" +
                "	FROM  \n" +
                "		(SELECT vuss.PartID,  \n" +
                "                p.releaseCount,  \n" +
                "				p.pendingCount,  \n" +
                "				ka.allocPerWithSubAssy,  \n" +
                "				FUN_GETKITRETURNSTATUS(pendingReleaseCount, releasedNotReturnedCount, returnedCount, readyToreturnCount) kitReturnStatus,  \n" +
                "				IFNULL(`vuss`.`kitQty`, 0) * IFNULL(perAssyBuildQty, 0) AS assyKitQty,  \n" +
                "				IFNULL(`vuss`.`PO Qty`, 0) * IFNULL(perAssyBuildQty, 0) AS assyPOQty,  \n" +
                "				p.totalReleased,  \n" +
                "                p.totalReleaseQty,  \n" +
                "                p.totalPOQty,  \n" +
                "				IFNULL(p.totalReleaseQty, 0) - IFNULL(totalReleased, 0) AS toBeRelease,  \n" +
                "				IFNULL(p.totalReleaseQty, 0) - IFNULL(ka.totalBuildFesibility, 0) AS shortageQty,  \n" +
                "				vuss.`Status` salesOrderCompletedStatus  \n" +
                "		FROM  \n" +
                "			vu_salesorder_updatedlist_report vuss  \n" +
                "		JOIN (  \n" +
                "				SELECT  \n" +
                "					perAssyBuildQty, refSalesOrderDetID, partID AS refAssyId  \n" +
                "				FROM kit_allocation_assy_detail  \n" +
                "				WHERE refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "				AND partID = pAssyID AND isDeleted = 0  \n" +
                "				GROUP BY refSalesOrderDetID , partID  \n" +
                "			) AS a ON a.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "		LEFT JOIN (  \n" +
                "					SELECT  \n" +
                "							salesOrderDetID, refAssyId,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releaseCount,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN kitReleaseQty ELSE 0 END) totalReleased,  \n" +
                "							SUM(CASE WHEN kitStatus = 'P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "							SUM(kitReleaseQty) totalReleaseQty,  \n" +
                "							SUM(poQty) totalPOQty  \n" +
                "					FROM salesorder_plan_detailsmst  \n" +
                "					WHERE (CASE WHEN (pIsConsolidated = 1 OR pAssyID = pMainAssyID) THEN subAssyID IS NULL ELSE subAssyID = pAssyID END)  \n" +
                "					AND isDeleted = 0  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p ON p.salesOrderDetID = `vuss`.`salesOrderDetailId` AND p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "						SELECT  \n" +
                "								salesOrderDetID, refAssyId,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "						FROM 	vu_release_plan_release_return_status_det  \n" +
                "						WHERE  /* salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pMainAssyID  \n" +
                "								AND */ (CASE WHEN (pIsConsolidated = 1) THEN 1 = 1 WHEN (pAssyID IS NOT NULL AND pAssyID != pMainAssyID) THEN subAssyID = pAssyID ELSE subAssyID IS NULL END)  \n" +
                "						GROUP BY salesOrderDetID , refAssyId  \n" +
                "					) AS vrr ON vrr.salesOrderDetID = vuss.salesOrderDetailId AND vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "						SELECT  k.refSalesOrderDetID,  mainAssy AS assyID,  min( k.totalBuildFesibility) as totalBuildFesibility,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`  \n" +
                "						FROM (  \n" +
                "								SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN IFNULL((vk.allocatedpin/(vk.qpaWithDnp * vk.bomNumOfPosition)),0) ELSE IFNULL((vk.allocatedunit/vk.qpaWithDnp),0) END) AS totalBuildFesibility,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "								FROM  	`vu_kit_allocation_detail` vk  \n" +
                "								Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  AND sd.isDeleted = 0  \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1 and vk.qpaWithDnp != 0  \n" +
                "							) `k`  \n" +
                "							GROUP BY k.refSalesOrderDetID, k.mainAssy  \n" +
                "			) AS ka ON ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` AND ka.assyID = `vuss`.`PartID`  \n" +
                "		WHERE vuss.SalesOrderDetailId = pRefSalesOrderDetID  \n" +
                "	) AS c;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-12-2021  ********************************** */
                "DROP function IF EXISTS `fun_getKitReleaseStatus`;  \n" +
                "CREATE FUNCTION `fun_getKitReleaseStatus`(  \n" +
                "	pKitAllocationPer DECIMAL(18,8),  \n" +
                "    pSOPlanTotalKitQty INT,  \n" +
                "    pSOPlanTotalPOQty INT,  \n" +
                "    pPOKitQty INT,  \n" +
                "    pPOQty INT,  \n" +
                "    pReleaseCount INT,  \n" +
                "    pPendingCount INT  \n" +
                ") RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vKitReleaseStatus VARCHAR(50);  \n" +
                "	SET vKitReleaseStatus = 'Not Released';  \n" +
                "  /* old logic  \n" +
                "   IF (ifnull(pReleaseCount,0) > 0 AND ifnull(pPendingCount,0) = 0 AND (ifnull(pSOPlanTotalKitQty,0) = ifnull(pPOKitQty,0) AND ifnull(pSOPlanTotalPOQty,0) = ifnull(pPOQty,0))) THEN  \n" +
                "		SET vKitReleaseStatus = 'Fully Released';  \n" +
                "	ELSEIF (ifnull(pReleaseCount,0) = 0 AND ifnull(pPendingCount,0) > 0) THEN  \n" +
                "		SET vKitReleaseStatus = 'Not Released';  \n" +
                "	ELSEIF (ifnull(pReleaseCount,0) = 0 AND (ifnull(pPendingCount,0) > 0 OR ifnull(pPendingCount,0) = 0) AND (pKitAllocationPer IS NOT NULL AND FLOOR(pKitAllocationPer) = 100)) THEN  \n" +
                "		SET vKitReleaseStatus = 'Ready To Release';  \n" +
                "	ELSEIF (ifnull(pReleaseCount,0) > 0 AND (ifnull(pPendingCount,0) > 0 OR (ifnull(pSOPlanTotalKitQty,0) <> ifnull(pPOKitQty,0) AND ifnull(pSOPlanTotalPOQty,0) <> ifnull(pPOQty,0)))) THEN  \n" +
                "		SET vKitReleaseStatus = 'Partially Released';  \n" +
                "	END IF;  \n" +
                "  */  \n" +
                "    IF (ifnull(pReleaseCount,0) > 0 AND ifnull(pPendingCount,0) = 0 AND (ifnull(pSOPlanTotalKitQty,0) = ifnull(pPOKitQty,0) AND ifnull(pSOPlanTotalPOQty,0) = ifnull(pPOQty,0))) THEN  \n" +
                "		SET vKitReleaseStatus = 'Fully Released';  \n" +
                "	ELSEIF (ifnull(pReleaseCount,0) = 0 AND ifnull(pPendingCount,0) > 0) AND  FLOOR(ifnull(pKitAllocationPer,0)) < 100 THEN  \n" +
                "		SET vKitReleaseStatus = 'Not Released';  \n" +
                "	ELSEIF ifnull(pReleaseCount,0) = 0 AND  FLOOR(ifnull(pKitAllocationPer,0)) = 100 THEN  \n" +
                "		SET vKitReleaseStatus = 'Ready To Release';  \n" +
                "	ELSEIF (ifnull(pReleaseCount,0) > 0 AND (ifnull(pPendingCount,0) > 0 OR (ifnull(pSOPlanTotalKitQty,0) <> ifnull(pPOKitQty,0) AND ifnull(pSOPlanTotalPOQty,0) <> ifnull(pPOQty,0)))) THEN  \n" +
                "		SET vKitReleaseStatus = 'Partially Released';  \n" +
                "	END IF;  \n" +
                "	REturn vKitReleaseStatus;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllocatedKitForUMID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllocatedKitForUMID`(  \n" +
                "	pUMIDId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT *,  \n" +
                "        fun_getKitReleaseStatus(allocPerWithSubAssy,totalKitQty,totalPOQty, assyKitQty, assyPOQty, releaseCount, pendingCount) as kitReleaseStatus  FROM  \n" +
                "(SELECT  \n" +
                "		ka.id,					ka.refSalesOrderDetID,		s.salesOrderNumber,  \n" +
                "		s.poNumber,             sd.materialTentitiveDocDate,  \n" +
                "		ka.assyID,				assy.nickname,				assy.PIDCode assyPIDCode,  \n" +
                "		CONCAT(s.poNumber, ', ', s.salesOrderNumber, ', ', assy.PIDCode, ', ', sd.qty) kitName,  \n" +
                "		ka.allocatedQty,		ka.allocatedUnit,  \n" +
                "        ka.allocatedUOMID, 		fun_getUnitNameByID(ka.allocatedUOMID) allocatedUOM,  \n" +
                "        u.measurementTypeID as uomClassID,  \n" +
                "		FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(rp.kitReleaseDate) kitReleaseDate,  \n" +
                "        rp.promiseShipDate,  \n" +
                "        k.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,sd.kitQty, sd.qty, p.releaseCount, p.pendingCount,  \n" +
                "        (a.perAssyBuildQty * sd.kitQty) AS assyKitQty,  \n" +
                "        (a.perAssyBuildQty *  sd.qty)AS assyPOQty  \n" +
                "	From (  \n" +
                "			SELECT 	k.id,			k.refSalesOrderDetID, k.assyID,  \n" +
                "					SUM(k.allocatedQty) allocatedQty,		SUM(k.allocatedUnit) allocatedUnit,  \n" +
                "					k.allocatedUOM allocatedUOMID  \n" +
                "			FROM 	kit_allocation k  \n" +
                "			WHERE 	k.id = k.id  \n" +
                "			AND 	k.refUIDId = pUMIDId  \n" +
                "			AND 	k.status = 'A'  \n" +
                "			GROUP BY k.id, k.refSalesOrderDetID, k.assyID, k.allocatedUOM  \n" +
                "		) ka  \n" +
                "	INNER JOIN 	salesorderdet sd ON ka.refSalesOrderDetID = sd.id  AND sd.partCategory = 3 AND sd.isDeleted = 0  \n" +
                "	INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id AND s.isDeleted = 0  \n" +
                "	INNER JOIN	component assy ON ka.assyID = assy.id AND assy.isDeleted = 0  \n" +
                "	INNER JOIN 	uoms u ON u.id = ka.allocatedUOMID AND u.isDeleted = 0  \n" +
                "    JOIN (  \n" +
                "				SELECT  \n" +
                "					perAssyBuildQty, refSalesOrderDetID, partID AS refAssyId  \n" +
                "				FROM kit_allocation_assy_detail  \n" +
                "				WHERE isDeleted = 0  \n" +
                "				GROUP BY refSalesOrderDetID, partID  \n" +
                "			) AS a ON a.refSalesOrderDetID = ka.refSalesOrderDetID  AND ka.assyID = a.refAssyId  \n" +
                "    LEFT JOIN (  \n" +
                "					SELECT 	salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                            subAssyID,  \n" +
                "                            IFNULL(subAssyID, refAssyId) AS mainAssy,  \n" +
                "                            kitStatus,  \n" +
                "							SUM(CASE WHEN  kitStatus = 'R' THEN 1 ELSE 0 END) releaseCount,  \n" +
                "							SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "							SUM(kitReleaseQty) totalKitQty,	SUM(poQty) totalPOQty  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "				) AS p ON ka.refSalesOrderDetID = p.salesOrderDetID AND ka.assyID = p.mainAssy  \n" +
                "	LEFT JOIN (  \n" +
                "				SELECT 	k.refSalesorderdetid, k.assyID,  \n" +
                "						ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS allocPerWithSubAssy  \n" +
                "				FROM  \n" +
                "					(SELECT  vk.qpaWithDnp,   vk.refSalesorderdetid, vk.assyID,  \n" +
                "							vk.isNotRequiredKitAllocation AS isNotRequiredKitAllocation ,  \n" +
                "							IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.allocatedpin, 0) ELSE IFNULL(vk.allocatedunit, 0) END)) / (vk.totalAssyBuildQty * IFNULL(vk.qpaWithDnp, 0))), 0) AS allocationPer  \n" +
                "									FROM  		vu_kit_allocation_detail vk  \n" +
                "									INNER JOIN	salesorderdet sd on vk.refSalesorderdetid  = sd.id AND sd.isDeleted = 0  \n" +
                "									WHERE    	vk.isNotRequiredKitAllocation != 1 AND vk.qpaWithDnp != 0  \n" +
                "					) as k  GROUP BY k.refSalesOrderDetID, k.assyID  \n" +
                "			) k ON ka.refSalesOrderDetID = k.refSalesorderdetid AND ka.assyID = k.assyID  \n" +
                "	LEFT JOIN (  \n" +
                "		SELECT 	salesOrderDetID,  \n" +
                "				(CASE WHEN subAssyID IS NOT NULL THEN subAssyID ELSE refAssyId END) assyID,  \n" +
                "				min(actualKitReleaseDate) kitReleaseDate,  \n" +
                "				MIN(poDueDate) promiseShipDate  \n" +
                "		FROM 	vu_kit_plans  \n" +
                "		GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "	) rp ON ka.refSalesOrderDetID = rp.salesOrderDetID AND ka.assyID = rp.assyID  \n" +
                "	) AS temp ORDER BY (kitReleaseDate IS NULL),  kitReleaseDate ASC, id ASC;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);  \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);  \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vUTCDateTime datetime;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() into vUTCDateTime;  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "     SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "							select  a.*  \n" +
                "							from  \n" +
                "							(SELECT 	        c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                            c.actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber ,  \n" +
                "                            min(kitreleasedate)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minKitReleaseDate,  \n" +
                "                             min(id)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minkitid  \n" +
                "					FROM     vu_release_plan_detail AS c where c.kitstatus = case when '\",v_ParentWHType,\"' ='M' then 'P' else 'R' end  \n" +
                "                      ) a where a.kitreleasedate = a.minKitReleaseDate  and a.id =a.minkitid \");  \n" +
                "  \n" +
                "  IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
                "				csd.binId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	binmst  \n" +
                "						WHERE 	isdeleted = 0  \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
                "					)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
                "				ka.refUIDId IN (  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock  \n" +
                "					WHERE 	isdeleted = 0  \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "				)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"  \n" +
                "			EXISTS (  \n" +
                "				SELECT 		1  \n" +
                "				FROM 		kit_allocation ka  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "							AND ka.status = 'A'  \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")  \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
                "	END IF;  \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (pIsCheckPRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"  \n" +
                "		SELECT k.* FROM  \n" +
                "			(SELECT	a.*,  \n" +
                "					(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore,  \n" +
                "					FUNC_MISMATCHITEMFORKIT(a.refSalesOrderDetID, IFNULL(a.subAssyID,a.refAssyId), 'M', NULL, NULL) AS mismatchItem,  \n" +
                "					fun_getKitReleaseStatus(a.kitPlanPercentage,totalKitReleaseQty,totalPOReleaseQty,a.assyKitQty,a.assyPOQty,a.totalKitReleasePlan,a.pendingCount) kitReleaseStatus  \n" +
                "				FROM	(  \n" +
                "					SELECT 	sd.id refSalesOrderDetID,  \n" +
                "							sd.kitNumber,  \n" +
                "							IFNULL(kad.partId, sd.partID) assyID,  \n" +
                "							(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
                "							(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
                "							sd.partID assyMainId,  \n" +
                "							c.mfgPN assyMainName,  \n" +
                "							c.PIDCode assyMainPIDCode,  \n" +
                "							kad.partId assySubId,  \n" +
                "							cs.mfgPN assySubName,  \n" +
                "							cs.PIDCode assySubPIDCode,  \n" +
                "							CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
                "							sd.kitNumber kitName,  \n" +
                "							s.id soId,  \n" +
                "							s.poNumber,  \n" +
                "							s.salesOrderNumber,  \n" +
                "							s.poDate,  \n" +
                "							sd.qty,  \n" +
                "							sd.kitQty,  \n" +
                "							kad.totalAssyBuildQty,  \n" +
                "							\", pDeptID ,\" AS deptID,  \n" +
                "							'\", v_ParentWHType ,\"' AS deptType,  \n" +
                "							fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
                "							IFNULL(b.uidCount, 0) uidCount,  \n" +
                "							IFNULL(b.binCount, 0) binCount,  \n" +
                "							ka.totalLines,  \n" +
                "							ka.shortageLines,  \n" +
                "							sd.isHotJob,  \n" +
                "							IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
                "							fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
                "							fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
                "							fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  \n" +
                "							fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
                "							sp.totalKitPlan,  \n" +
                "							sp.pendingCount,  \n" +
                "							sp.totalKitReleasePlan,  \n" +
                "                            IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.qty,0) AS assyPOQty,  \n" +
                "							IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.kitQty,0) AS assyKitQty,  \n" +
                "							sp.totalKitReleaseQty,  \n" +
                "							sp.totalPOReleaseQty,  \n" +
                "							(  \n" +
                "								SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
                "								FROM 	holdunholdtrans h  \n" +
                "								WHERE 	h.refTransId = sd.id  \n" +
                "										AND h.refType = 'PO'  \n" +
                "										AND h.`status` = 'H'  \n" +
                "								ORDER BY h.id DESC  \n" +
                "								LIMIT 1  \n" +
                "							) poHalt,  \n" +
                "							(  \n" +
                "								SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	a.haltTooltip  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "												FROM 	holdunholdtrans h  \n" +
                "												WHERE 	h.refTransId = sd.id  \n" +
                "														AND h.refType = 'KR'  \n" +
                "														AND h.`status` = 'H'  \n" +
                "												ORDER BY h.id DESC  \n" +
                "												LIMIT 1  \n" +
                "										) a  \n" +
                "										UNION  \n" +
                "										SELECT 	b.haltTooltip  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "												FROM 	holdunholdtrans h  \n" +
                "												WHERE 	h.refTransId = sd.id  \n" +
                "														AND h.refType = 'KA'  \n" +
                "														AND h.`status` = 'H'  \n" +
                "												ORDER BY h.id DESC  \n" +
                "												LIMIT 1  \n" +
                "										) b  \n" +
                "								) c  \n" +
                "							) kitHalt,  \n" +
                "							p.woID,  \n" +
                "							p.workorderNumber,  \n" +
                "							p.id AS id,  \n" +
                "							p.salesOrderDetID,  \n" +
                "							p.refAssyId,  \n" +
                "							p.subAssyID,  \n" +
                "							p.plannKitNumber,  \n" +
                "							p.poQty,  \n" +
                "							p.poDueDate,  \n" +
                "							p.mfrLeadTime,  \n" +
                "							p.materialDockDate,  \n" +
                "							p.kitReleaseQty,  \n" +
                "							p.kitReleaseDate,  \n" +
                "							(DATEDIFF(fun_ConvertUTCDatetimeToSpecificTimeZone('\",vUTCDateTime,\"','\",v_TimeZone,\"'), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
                "							p.feasibilityWithAllocatedQty,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
                "							p.releasedBy,  \n" +
                "							p.releaseTimeFeasibility,  \n" +
                "							p.kitStatus,  \n" +
                "							p.rushJob,  \n" +
                "							p.woStatusID,  \n" +
                "							p.refPlanId,  \n" +
                "							p.releasedNote,  \n" +
                "							p.releaseKitNumber,  \n" +
                "							p.kitReturnStatus,  \n" +
                "							ka.kitPlanPercentage,  \n" +
                "							fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,'\",vUTCDateTime,\"'), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0), FALSE) kitReleaseIndicator,  \n" +
                "							ka.allocationUMIDCount allocationUMIDCount  \n" +
                "					FROM 		salesorderdet sd  \n" +
                "					INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "					INNER JOIN	component c ON sd.partID = c.id  \n" +
                "					LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
                "					LEFT JOIN  	component cs ON kad.partId = cs.id  \n" +
                "					LEFT JOIN (  \n" +
                "							SELECT  salesOrderDetID, refAssyId, subAssyID,  \n" +
                "									COUNT(1) totalKitPlan,  \n" +
                "									SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) totalKitReleasePlan,  \n" +
                "									SUM(CASE WHEN kitStatus = 'P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "									SUM(kitReleaseQty) totalKitReleaseQty,  \n" +
                "									SUM(poQty) totalPOReleaseQty  \n" +
                "									FROM salesorder_plan_detailsmst WHERE isDeleted = 0  \n" +
                "									GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "						) AS sp ON sp.salesOrderDetID =  sd.id  AND sp.refAssyId = sd.partID  AND (CASE WHEN kad.partId = sd.partID THEN sp.subAssyID IS NULL ELSE sp.subAssyID = kad.partId END)  \n" +
                "					LEFT JOIN	(  \n" +
                "								SELECT 	a.refSalesOrderDetID,  \n" +
                "									a.assyID,  \n" +
                "									a.binID,  \n" +
                "									COUNT(1) binCount,  \n" +
                "									SUM(a.uidCount) uidCount,  \n" +
                "									SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
                "								FROM 	(  \n" +
                "										SELECT 		k.refSalesOrderDetID,  \n" +
                "												k.assyID,  \n" +
                "												csd.binID,  \n" +
                "												COUNT(1) uidCount,  \n" +
                "												(  \n" +
                "													SELECT IF( EXISTS(  \n" +
                "														SELECT 	binId  \n" +
                "														FROM 	component_sid_stock  \n" +
                "														WHERE 	binID = csd.binID  \n" +
                "															AND isdeleted = 0  \n" +
                "															and isinstk  =1  \n" +
                "															AND id NOT IN (  \n" +
                "																SELECT 	refUIDId  \n" +
                "																FROM 	kit_allocation  \n" +
                "																WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
                "																		AND assyID = k.assyID  \n" +
                "																		AND `status` = 'A'  \n" +
                "															)  \n" +
                "													), 1, 0)  \n" +
                "												) mismatchUMIDBin  \n" +
                "											FROM 		kit_allocation k  \n" +
                "											INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "											INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "											INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "											WHERE		k.status = 'A'  \n" +
                "														AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
                "														AND	csd.isDeleted = 0  \n" +
                "														AND	b.isDeleted = 0  \n" +
                "														AND	w.isDeleted = 0  \n" +
                "											GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
                "									) AS a  \n" +
                "								GROUP BY  a.refSalesOrderDetID, a.assyID  \n" +
                "							) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	k.refSalesOrderDetID,  \n" +
                "									k.assyID,  \n" +
                "									k.totalLines,  \n" +
                "									k.shortageLines,  \n" +
                "									k.kitAllocationPercentage kitPlanPercentage,  \n" +
                "									(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	k.refSalesOrderDetID,  \n" +
                "											k.assyID,  \n" +
                "											COUNT(1) AS totalLines,  \n" +
                "											SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
                "											ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS kitAllocationPercentage  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	vk.refSalesOrderDetID,  \n" +
                "														vk.assyID,  vk.qpaWithDnp,  \n" +
                "														vk.isNotRequiredKitAllocation AS isNotRequiredKitAllocation,  \n" +
                "														IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "														(CASE WHEN vk.connecterTypeID = -2 THEN vk.shortagePins ELSE vk.shortage END) AS shortage  \n" +
                "												FROM 	vu_kit_allocation_detail vk  \n" +
                "                                                Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  AND sd.isDeleted = 0  \n" +
                "												WHERE    vk.`isNotRequiredKitAllocation` != 1 and vk.qpaWithDnp != 0  \n" +
                "											) k  GROUP BY k.refSalesOrderDetID, k.assyID  \n" +
                "									) k  \n" +
                "							) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
                "					LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
                "									AND p.refAssyId = sd.partID  \n" +
                "									AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
                "					WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
                "								AND 	s.isDeleted = 0  \n" +
                "								AND 	sd.isCancle != 1  \n" +
                "								AND 	(\", v_WhereClauseFilter ,\")  \n" +
                "								AND 	(\", v_WhereClause ,\")  \n" +
                "					GROUP BY 	sd.id, sd.partID, kad.partId  \n" +
                "				) AS a  \n" +
                "		) AS k WHERE 	(\", v_WhereKitFilterCondition ,\")  \n" +
                "	\");  \n" +
                "  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 kitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 actualKitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-12-2021  ********************************** */
                "DROP procedure IF EXISTS `Sproc_GetSalesorderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 and vuss.blanketPOOption=2 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				vuss.blanketPOOption,  \n" +
                "				vuss.blanketPOOptionText,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToreturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount ,  \n" +
                "				vuss.rmaNumber,vuss.isDebitedByCustomer, vuss.debitedByCustText,  \n" +
                "				vuss.rmaOrgPONumber,vuss.orgSalesOrderID,vuss.isReworkRequired,  \n" +
                "				vuss.reworkReqText, vuss.reworkPONumber,vuss.custOrgPOLineNumber \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID  \n" +
                "					ORDER BY w.woID ASC ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'' OR rmaNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''' OR rmaNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "    IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsRmaPO = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isRmaPO = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-12-2021  ********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5661,'2.00','V1','Bug 39369: [Main Branch] showing Mismatched Kit Release status on details and list page - CHARMI '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5661:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustAgedReceivablesRangeDet` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustAgedReceivablesRangeDet`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pAgedReceivablesDueAsOfDate DATE ,  \n" +
                "	IN pDueDate DATE ,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT  ,  \n" +
                "	IN pIsIncludeZeroValueInvoices TINYINT ,  \n" +
                "	IN pCustomerID VARCHAR(10000) ,  \n" +
                "	IN pAgedRecvAmtWithIn VARCHAR(20),  \n" +
                "	IN pIsAllCustAllInvOnly TINYINT,  \n" +
                "	IN pIsAllCustAllUninvOnly TINYINT,  \n" +
                "	IN pIsAllCustAllDraftCMOnly TINYINT,  \n" +
                "	IN pIsAllCustAllPSWithOutInv TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE vDueDate DATE;  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);  \n" +
                "	DECLARE vAgedAmtWithIn VARCHAR(1000);  \n" +
                "	-- DECLARE vSumOfAgedAmtWithIn VARCHAR(1000);  \n" +
                "	DECLARE vWCCustIDForInv VARCHAR(10000);  \n" +
                "	DECLARE vWCCustIDForPMT VARCHAR(10000);  \n" +
                "	DECLARE vWCAllCustAllInv VARCHAR(100);  \n" +
                "	DECLARE vAgedAmtWithInCondition VARCHAR(1000);  \n" +
                "  \n" +
                "	SET vAgedAmtWithIn = \" \";  \n" +
                "	-- SET vSumOfAgedAmtWithIn = \" \";  \n" +
                "	SET vWCCustIDForInv = \" \";  \n" +
                "	SET vWCCustIDForPMT = \" \";  \n" +
                "	SET vWCAllCustAllInv = \" \";  \n" +
                "	SET vAgedAmtWithInCondition = '';  \n" +
                "	/* cps.subStatus 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "	IF (pTermsAndAboveDays IS NOT NULL) THEN  \n" +
                "		SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;  \n" +
                "		SET vDueDate = DATE_ADD(currDateWithAppliedTimeZone, INTERVAL IFNULL(pTermsAndAboveDays,0) DAY);  \n" +
                "	ELSE  \n" +
                "		SET vDueDate = DATE_ADD(pDueDate, INTERVAL IFNULL(pAdditionalDays,0) DAY);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pIsAllCustAllPSWithOutInv = 1) THEN  /* get all customer packing slip which */  \n" +
                "		IF (pCustomerID IS NOT NULL AND pCustomerID != '') THEN  \n" +
                "			SET vWCCustIDForInv = CONCAT(' AND `customerID` IN (',pCustomerID,') ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET @temp_balanceDue = CONCAT(\"  \n" +
                "				SELECT id AS cpsMstID, packingSlipNumber, packingSlipDate, refSalesOrderID,  \n" +
                "					transType, 'Customer Packing Slip' AS `transTypeText` ,  \n" +
                "					fun_getMfgCodeAndNameByID(customerID) AS customerCodeName  \n" +
                "				FROM customer_packingslip  \n" +
                "				WHERE transType = 'P'  \n" +
                "				\",vWCCustIDForInv,\"  \n" +
                "				AND refCustInvoiceID IS NULL  \n" +
                "				AND isDeleted = 0  \n" +
                "			\");  \n" +
                "	ELSE  /* aged receivable details */  \n" +
                "  \n" +
                "		IF (pAgedRecvAmtWithIn IS NOT NULL AND pAgedRecvAmtWithIn != '') THEN  \n" +
                "			IF (pAgedRecvAmtWithIn = 'TotPastDue') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.totalDueAmount) totalAmountOfAgedDueReceivable , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) ');  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = 'CurrAmtWithinTerms') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.currentAmount) totalAmountWithinTerms , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) ');  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = '0-30') THEN  \n" +
                "				-- set vSumOfAgedAmtWithIn = concat( ' SUM(temp_aged_details.agedAmountAs0To30) agedAmountAs0To30 , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 30)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs0To30` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 30)) ');  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = '31-60') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs31To60) agedAmountAs31To60 , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 31) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 60)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs31To60` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 31) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 60)) ' );  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = '61-90') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs61To90) agedAmountAs61To90 , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 61) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 90)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs61To90` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 61) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 90)) ' );  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = '91-120') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs91To120) agedAmountAs91To120 , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 91) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 120)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs91To120` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 91) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 120)) ' );  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = '120+') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs121more) agedAmountAs121More , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 121) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs121more` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 121) ' );  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pCustomerID IS NOT NULL AND pCustomerID != '') THEN  \n" +
                "			SET vWCCustIDForInv = CONCAT(' AND `a`.`customerID` IN (',pCustomerID,') ');  \n" +
                "			SET vWCCustIDForPMT = CONCAT(' AND `a`.`mfgcodeID` IN (',pCustomerID,') ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsAllCustAllInvOnly = 1) THEN  \n" +
                "			SET vWCAllCustAllInv = CONCAT(' WHERE `cid`.`invoiceCount` = 1 ');  \n" +
                "		ELSEIF (pIsAllCustAllUninvOnly = 1) THEN  \n" +
                "			SET vWCAllCustAllInv = CONCAT(' WHERE `cid`.`unInvoiceCount` = 1 ');  \n" +
                "		ELSEIF (pIsAllCustAllDraftCMOnly = 1) THEN  \n" +
                "			SET vWCAllCustAllInv = CONCAT(' WHERE `cid`.`dratftCreditMemoCount` = 1 ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		SET @temp_balanceDue = CONCAT(\"  \n" +
                "		SELECT  temp_aged_details.*,  \n" +
                "			fun_getMfgCodeAndNameByID(temp_aged_details.customerID) AS customerCodeName  \n" +
                "  \n" +
                "		 FROM (  \n" +
                "				SELECT  \n" +
                "					  `cid`.`customerID`                  AS `customerID`,  \n" +
                "					  `cid`.`transMstID` 		      AS `transMstID`,  \n" +
                "					  `cid`.`transNumber` 		      AS `transNumber` ,  \n" +
                "					  `cid`.`transType`		      AS  `transType` ,  \n" +
                "					  `cid`.`transTypeText` 	      AS `transTypeText` ,  \n" +
                "					  SUM(`cid`.`invoiceCount`)           AS `invoiceCount`,  \n" +
                "					  SUM(`cid`.`unInvoiceCount`)         AS `unInvoiceCount`,  \n" +
                "					  SUM(`cid`.`dratftCreditMemoCount`)  AS `dratftCreditMemoCount`,  \n" +
                "					  `cid`.`DocDate`                     AS `DocDate`,  \n" +
                "					  `cid`.`termsDays`                   AS `termsDays`,  \n" +
                "					  (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) AS `DueDaysDiff`,  \n" +
                "					  -- (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount`,  \n" +
                "					  -- (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount`,  \n" +
                "					  \",vAgedAmtWithIn,\"  \n" +
                "					  (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) AS `totalOutstandingAmount`,  \n" +
                "					  (SUM(`cid`.`totalUnappliedCreditMemoAmount`))  AS `totalCreditMemoAmount`,  \n" +
                "					  SUM(`cid`.`totalUnappliedAmount`)   AS `totalUnappliedAmount`,  \n" +
                "					  (SUM(`cid`.`totalUnappliedCreditMemoAmount`) + SUM(`cid`.`totalUnappliedAmount`)) AS `totalCreditAmount`,  \n" +
                "					  SUM(`cid`.`totalInvoicedAmount`)    AS `totalCustomerInvoicedAmount`,  \n" +
                "					  SUM(`cid`.`totalDraftAmount`)       AS `totalDraftAmount`,  \n" +
                "					  SUM(`cid`.`totalRecievedAmount`)    AS `totalRecievedAmount`,  \n" +
                "					  (CASE WHEN ((SUM(`cid`.`totalInvoicedAmount`) <> 0) AND (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`)) = 0) THEN 1 ELSE 0 END) paidInvoiceCount  \n" +
                "				FROM  \n" +
                "					(  \n" +
                "						SELECT  \n" +
                "							 `a`.`customerID`                     AS `customerID`,  \n" +
                "							 `a`.termsDays			      AS `termsDays`,  \n" +
                "							 `a`.`id`                             AS `transMstID`,  \n" +
                "							 IF((`a`.`transType` = 'I'), `a`.`invoiceNumber`, `a`.`creditMemoNumber`) AS `transNumber`,  \n" +
                "							 `a`.`transType`		      AS `transType` ,  \n" +
                "							IF((`a`.`transType` = 'I'), 'Customer Invoice', 'Customer Credit Memo') AS `transTypeText`,  \n" +
                "							IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),1,0) AS `invoiceCount`,  \n" +
                "							IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),1,0) AS `unInvoiceCount`,  \n" +
                "							IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '1')),1,0) AS `dratftCreditMemoCount`,  \n" +
                "							IF((`a`.`transType` = 'I'),`a`.`invoiceDate`,`a`.`creditMemoDate`) AS `DocDate`,  \n" +
                "							IFNULL(b.totalCustomerInvoiceReceivedAmount,0)  AS `totalRecievedAmount`,  \n" +
                "							0                                    AS `totalUnappliedAmount`,  \n" +
                "							IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '2')),(IFNULL(`a`.`totalAmount`,0) + (IFNULL(c.totalCreditMemoAppliedAmount,0) + IFNULL(d.totRefundIssuedAgainstCreditMemo,0))),0) AS `totalUnappliedCreditMemoAmount`,  \n" +
                "							IFNULL(c.totalCreditMemoAppliedAmount, 0) AS totalCreditMemoAppliedAmount,  \n" +
                "							IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalInvoicedAmount`,  \n" +
                "							-- IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalDraftAmount`  \n" +
                "							(CASE WHEN `a`.`transType` = 'I' AND (`a`.`subStatus` = '1' OR `a`.`subStatus` > '3') THEN IFNULL(`a`.`totalAmount`,0)  \n" +
                "								WHEN `a`.`transType` = 'C' AND `a`.`subStatus` = '1' THEN IFNULL(`a`.`totalAmount`,0)  \n" +
                "								ELSE 0 END) AS totalDraftAmount  \n" +
                "						FROM `customer_packingslip` `a`  \n" +
                "								LEFT JOIN 	(SELECT     `b`.`refCustPackingslipInvoiceID`     					AS `refCustPackingslipInvoiceID`,  \n" +
                "												      SUM(IF(a.refPaymentMode='R',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalRecievedAmount`,  \n" +
                "												      0									  	AS `totalCreditMemoAppliedAmount`,  \n" +
                "													SUM(IFNULL(`b`.`paymentAmount`,0))    					AS `totalCustomerInvoiceReceivedAmount`  \n" +
                "												    FROM (`packingslip_invoice_payment` `a`  \n" +
                "												       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "													 ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "												    WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "													   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "													   AND (`a`.`refPaymentMode` IN ('R','CA','WOFF')))  \n" +
                "												    GROUP BY `b`.`refCustPackingslipInvoiceID` ) b  \n" +
                "												ON a.id = b.refCustPackingslipInvoiceID  \n" +
                "  \n" +
                "								LEFT JOIN 	(  \n" +
                "											SELECT  \n" +
                "													a.`refCustCreditMemoID` AS refCustCreditMemoID,  \n" +
                "													SUM(IF(a.refPaymentMode='CA',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalCreditMemoAppliedAmount`  \n" +
                "											FROM `packingslip_invoice_payment` `a`  \n" +
                "												       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "													 ON (`b`.`refPayementid` = `a`.`id`)  \n" +
                "												    WHERE (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "													   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "													   AND (`a`.`refPaymentMode` IN ('R','CA'))  \n" +
                "												    GROUP BY `a`.`refCustCreditMemoID`  \n" +
                "												    ) c  ON a.id = c.refCustCreditMemoID  \n" +
                "								LEFT JOIN (  \n" +
                "											SELECT SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo , refRefundCustCreditMemoID  \n" +
                "												FROM packingslip_invoice_payment_det  \n" +
                "												WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "												GROUP BY refRefundCustCreditMemoID  \n" +
                "											) d  ON a.id = d.refRefundCustCreditMemoID  \n" +
                "						WHERE ( (`a`.`transType` IN('I','C'))  \n" +
                "						\",vWCCustIDForInv,\"  \n" +
                "						AND  (a.paymentStatus <> 'RE')  \n" +
                "						-- AND  (IFNULL(a.totalAmount,0) != 0)  \n" +
                "						AND (CASE WHEN \",pIsIncludeZeroValueInvoices,\" = 0 AND a.transType = 'I' THEN IFNULL(a.totalAmount,0) > 0 ELSE 1=1 END)  \n" +
                "						AND (`a`.`isDeleted` = 0))  \n" +
                "  \n" +
                "					UNION  \n" +
                "  \n" +
                "						SELECT  \n" +
                "							`a`.`mfgcodeID`                       					AS `customerID`,  \n" +
                "							NULL									AS `termsDays`,  \n" +
                "							`a`.`id`								AS `transMstID`,  \n" +
                "							`a`.`paymentNumber`							AS `transNumber` ,  \n" +
                "							'R'		  	    						AS `transType` ,  \n" +
                "							'Customer Payment' 							AS `transTypeText`,  \n" +
                "							0                                     					AS `invoiceCount`,  \n" +
                "							0                                     					AS `unInvoiceCount`,  \n" +
                "							0                                     					AS `dratftCreditMemoCount`,  \n" +
                "							`a`.`paymentDate`                     					AS `DocDate`,  \n" +
                "							0  									AS `totalRecievedAmount`,  \n" +
                "							((IFNULL(`a`.`paymentAmount`,0) - (SUM(IFNULL(`b`.`paymentAmount`,0)) + IFNULL(c.totRefundIssuedOfPayment,0))) * -(1)) 	AS `totalUnappliedAmount`,  \n" +
                "							0                                     					AS `totalUnappliedCreditMemoAmount`,  \n" +
                "							0									AS `totalCreditMemoAppliedAmount`,  \n" +
                "							0                                     					AS `totalInvoicedAmount`,  \n" +
                "							0                                     					AS `totalDraftAmount`  \n" +
                "							FROM (`packingslip_invoice_payment` `a`  \n" +
                "								LEFT JOIN `packingslip_invoice_payment_det` `b` ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "								LEFT JOIN (  \n" +
                "										SELECT SUM(paymentAmount) AS totRefundIssuedOfPayment , refRefundPaymentID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										GROUP BY refRefundPaymentID  \n" +
                "									     ) c  ON a.id = c.refRefundPaymentID  \n" +
                "							WHERE ( (`a`.`refPaymentMode` = 'R')  \n" +
                "							\",vWCCustIDForPMT,\"  \n" +
                "							AND (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "							AND (`a`.`isPaymentVoided` = 0) )  \n" +
                "							GROUP BY `a`.`mfgcodeID`, a.id  ,`a`.`paymentDate`,`a`.`paymentAmount` , `a`.`paymentNumber`  \n" +
                "							HAVING  ((IFNULL(`a`.`paymentAmount`,0) - SUM(IFNULL(`b`.`paymentAmount`,0))) * -(1))  != 0  \n" +
                "					) AS  cid  \n" +
                "  \n" +
                "				\",vWCAllCustAllInv,\"  \n" +
                "				GROUP BY `cid`.`customerID`,`cid`.`transMstID`, `cid`.`transNumber` ,  \n" +
                "					`cid`.`DocDate`, `cid`.`termsDays` ,  `cid`.`transType` , `cid`.`transTypeText` ,  \n" +
                "					(TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY)))  \n" +
                "				HAVING (CASE WHEN `cid`.`transType` = 'C' AND \",pIsAllCustAllDraftCMOnly,\" != 1 THEN SUM(`cid`.`totalUnappliedCreditMemoAmount`) != 0  \n" +
                "							\",vAgedAmtWithInCondition,\"  \n" +
                "						WHEN `cid`.`transType` = 'I' AND \",pIsAllCustAllUninvOnly,\" != 1 THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) != 0)  \n" +
                "							\",vAgedAmtWithInCondition,\"  \n" +
                "						WHEN `cid`.`transType` = 'R' THEN SUM(`cid`.`totalUnappliedAmount`) != 0  \n" +
                "					ELSE 1=1 END)  \n" +
                "  \n" +
                "  \n" +
                "			   ) AS temp_aged_details  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		\");  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY transTypeText asc, customerCodeName asc \") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_balanceDue ,\" ) c where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*  \n" +
                "			FROM 	(\", @temp_balanceDue ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "	-- SELECT @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5662,'2.00','V1',' Sproc_GetCustAgedReceivablesRangeDet - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5662:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-12-2021 *********************************** */
                "DROP function IF EXISTS `fun_getUMIDPackingSlipIdByID`;  \n" +

                "CREATE FUNCTION `fun_getUMIDPackingSlipIdByID`(  \n" +
                "	pUIDId INT(11)  \n" +
                ") RETURNS int  \n" +
                "BEGIN  \n" +
                "	DECLARE vRefPackingSlip INT;  \n" +
                "  \n" +
                "	SELECT 		ps.id INTO vRefPackingSlip  \n" +
                "	FROM 		component_sid_stock_packing_detail cspd  \n" +
                "	INNER JOIN 	packing_slip_material_receive_det psd ON cspd.refPackingSlipDetailID = psd.id AND psd.isDeleted = 0  \n" +
                "	INNER JOIN 	packing_slip_material_receive ps ON psd.refPackingSlipMaterialRecID = ps.id AND ps.isDeleted = 0  \n" +
                "	INNER JOIN 	mfgcodemst mcm ON mcm.id = ps.mfgCodeID AND mcm.isDeleted = 0  \n" +
                "	WHERE 		cspd.refComponentSidStockID = pUIDId  ;  \n" +
                "  \n" +
                "	RETURN vRefPackingSlip;  \n" +
                "END;  \n" +

                /* **************************** Add Script Version -> 10-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5663,'2.00','V1',' Tune fun_getUMIDPackingSlipIdByID -DP remove unwanted condition'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5663:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-12-2021 *********************************** */
                "CREATE or replace VIEW `vu_umid_packingslipmapping_det` AS  \n" +
                "    SELECT DISTINCT  \n" +
                "        `cspd`.`refComponentSidStockID` AS `refComponentSidStockID`,  \n" +
                "        `ps`.`id` AS `PackingslipID`,  \n" +
                "        `ps`.`packingSlipNumber` AS `packingSlipNumber`,  \n" +
                "        `ps`.`mfgCodeID` AS `packingslipsupplierid`,  \n" +
                "        `mcm`.`mfgCode` AS `packingslipSupplierCode`  \n" +
                "    FROM  \n" +
                "        (((`component_sid_stock_packing_detail` `cspd`  \n" +
                "        JOIN `packing_slip_material_receive_det` `psd` ON (((`cspd`.`refPackingSlipDetailID` = `psd`.`id`)  \n" +
                "            AND (`psd`.`isDeleted` = 0))))  \n" +
                "        JOIN `packing_slip_material_receive` `ps` ON (((`psd`.`refPackingSlipMaterialRecID` = `ps`.`id`)  \n" +
                "            AND (`ps`.`isDeleted` = 0))))  \n" +
                "        JOIN `mfgcodemst` `mcm` ON (((`mcm`.`id` = `ps`.`mfgCodeID`)  \n" +
                "            AND (`mcm`.`isDeleted` = 0))));  \n" +
                "DROP procedure IF EXISTS `Sproc_verify_UID`;  \n" +
                "CREATE PROCEDURE `Sproc_verify_UID`(  \n" +
                "	IN pVerificationType VARCHAR(100),  \n" +
                "	IN pUID VARCHAR(15),  \n" +
                "	IN pScanMFGPNLabel VARCHAR(1000),  \n" +
                "	IN pScanPID VARCHAR(50),  \n" +
                "	IN pScanCPN VARCHAR(50),  \n" +
                "	IN pScanUID VARCHAR(15),  \n" +
                "	IN pScanMFGPN VARCHAR(100),  \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "	IN pMFRId INT,  \n" +
                "	IN pBarcodeId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE uidVerified TINYINT(1) DEFAULT 0;  \n" +
                "	DECLARE v_mfgcodeID INT;  \n" +
                "	DECLARE v_mfgPN VARCHAR(100);  \n" +
                " 	DECLARE v_PIDCode VARCHAR(100);  \n" +
                " 	DECLARE v_PartDescription VARCHAR(2000);  \n" +
                "	DECLARE v_RoHSStatusID INT;  \n" +
                "	DECLARE v_compStockID INT;  \n" +
                "	DECLARE	v_pkgQty DECIMAL(18,8);  \n" +
                "	DECLARE v_pkgUnit DECIMAL(18,8);  \n" +
                " 	DECLARE v_uom VARCHAR(255);  \n" +
                " 	DECLARE v_string2PartID INT;  \n" +
                " 	DECLARE v_scanString2MFG VARCHAR(100);  \n" +
                " 	DECLARE v_scanString2MFGPNID VARCHAR(100);  \n" +
                " 	DECLARE v_packingSlipId INT;  \n" +
                "	DECLARE	v_packingSlipNumber VARCHAR(255);  \n" +
                "	DECLARE	v_packingSlipSupplierId INT;  \n" +
                "	DECLARE	v_packingSlipSupplierCode VARCHAR(10);  \n" +
                "	DECLARE	v_cOfCValue VARCHAR(100);  \n" +
                "	DECLARE v_isCustom TINYINT(1) DEFAULT 0;  \n" +
                "	DECLARE v_componentId INT;  \n" +
                "	DECLARE v_successId INT;  \n" +
                "	DECLARE v_refcompid INT;  \n" +
                "    DECLARE v_mountingTypeID INT;  \n" +
                "    DECLARE v_partPackage VARCHAR(255);  \n" +
                "    DECLARE v_uomClassID INT;  \n" +
                "    DECLARE v_spq DECIMAL(18,8);  \n" +
                "    DECLARE v_orgQty DECIMAL(18,8);  \n" +
                "	DECLARE v_orgPkgUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_imageURL VARCHAR(1000);  \n" +
                "    DECLARE v_documentPath VARCHAR(1000);  \n" +
                "    DECLARE v_mfgCode VARCHAR(255);  \n" +
                "    DECLARE v_mfgName VARCHAR(255);  \n" +
                "    DECLARE v_mfgType VARCHAR(20);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUIDDet;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUIDHistory;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDDet AS  \n" +
                "  \n" +
                "    SELECT  \n" +
                "						a.* , (CASE WHEN fun_getCofCDocumentCount(IFNULL(parentUIDId,id), packingSlipId) > 0 THEN  \n" +
                "											(  \n" +
                "												CASE  \n" +
                "													WHEN stockInventoryType = 'NI' THEN  \n" +
                "													      CONCAT(a.supplierCode,a.packingSlipNumber)  \n" +
                "													WHEN stockInventoryType = 'SI' THEN  \n" +
                "												       ifnull(CONCAT(a.supplierCode,a.packingSlipNumber),IFNULL(parentUID,uid))  \n" +
                "													ELSE  \n" +
                "														uid  \n" +
                "												END  \n" +
                "											)ELSE NULL END) cOfCValue  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		cs.id, 		cs.uid, 	cs.parentUID,	cs.scanlabel, 	cs.refcompid, 	c.mfgcodeID, 	c.mfgPN, cs.stockInventoryType, c.imageURL, c.documentPath,  \n" +
                "											cs.spq, 	cs.orgQty,	cs.orgPkgUnit,	c.mountingTypeID, IFNULL(c.partPackage, fun_getPackageCaseNameByID(c.partPackageID)) partPackage,  \n" +
                "										c.PIDCode, 	c.RoHSStatusID,	cs.pkgQty,	cs.pkgUnit,	cs.uom,   um.unitName,   um.measurementTypeID uomClassID,   c.isCustom,  c.mfgPNDescription,  \n" +
                "									   vps.PackingslipID PackingslipID,  \n" +
                "                                       vps.packingSlipNumber packingSlipNumber,vps.packingSlipSupplierId, vps.packingslipSupplierCode supplierCode,  \n" +
                "                                        m.mfgCode, m.mfgName, m.mfgType  ,cs.parentUIDId  \n" +
                "								FROM 		component_sid_stock cs  \n" +
                "								INNER JOIN 	component c ON cs.refcompid = c.id  \n" +
                "								INNER JOIN 	mfgcodemst m ON c.mfgcodeID = m.id  \n" +
                "								INNER JOIN 	uoms um ON cs.uom = um.id  \n" +
                "                                Left join vu_umid_packingslipmapping_det vps on case when stockInventoryType ='SI' THEN cs.parentUIDId else  cs.id end =  refComponentSidStockID  \n" +
                "								WHERE 		cs.uid  = pUID  \n" +
                "								AND 		cs.isDeleted = 0  \n" +
                "								-- LIMIT 		1  \n" +
                "							) AS a;  \n" +
                "    /* Old Query commented by DP on 14th-dec-2021 keep this query upto next 1 month till we not give final release on production  \n" +
                "	SELECT 		*,  \n" +
                "				fun_getMfgCodeByID(packingSlipSupplierId) supplierCode  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		*,  \n" +
                "							fun_getPackingSlipNumberById(packingSlipId) packingSlipNumber,  \n" +
                "							fun_getPackingSlipSupplierIdBySlipId(packingSlipId) packingSlipSupplierId,  \n" +
                "                            (CASE WHEN fun_getCofCDocumentCount(IFNULL(parentUIDId,id), packingSlipId) > 0 THEN  \n" +
                "											(  \n" +
                "												CASE  \n" +
                "													WHEN stockInventoryType = 'NI' THEN  \n" +
                "														fun_getUMIDPackingSlipNameByID(id)  \n" +
                "													WHEN stockInventoryType = 'SI' THEN  \n" +
                "														IFNULL(fun_getUMIDPackingSlipNameByID(id),uid)  \n" +
                "													ELSE  \n" +
                "														uid  \n" +
                "												END  \n" +
                "											)ELSE NULL END) cOfCValue  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		cs.id, 		cs.uid, 	cs.parentUIDId,	cs.scanlabel, 	cs.refcompid, 	c.mfgcodeID, 	c.mfgPN, cs.stockInventoryType, c.imageURL, c.documentPath,  \n" +
                "											cs.spq, 	cs.orgQty,	cs.orgPkgUnit,	c.mountingTypeID, IFNULL(c.partPackage, fun_getPackageCaseNameByID(c.partPackageID)) partPackage,  \n" +
                "										c.PIDCode, 	c.RoHSStatusID,	cs.pkgQty,	cs.pkgUnit,	cs.uom,   um.unitName,   um.measurementTypeID uomClassID,   c.isCustom,  c.mfgPNDescription,  \n" +
                "										fun_getUMIDPackingSlipIdByID(cs.id) packingSlipId, m.mfgCode, m.mfgName, m.mfgType  \n" +
                "								FROM 		component_sid_stock cs  \n" +
                "								INNER JOIN 	component c ON cs.refcompid = c.id  \n" +
                "								INNER JOIN 	mfgcodemst m ON c.mfgcodeID = m.id  \n" +
                "								INNER JOIN 	uoms um ON cs.uom = um.id  \n" +
                "								WHERE 		cs.uid =  pUID  \n" +
                "								AND 		cs.isDeleted = 0  \n" +
                "								LIMIT 		1  \n" +
                "							) AS a  \n" +
                "				) AS b;  */  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDHistory (  \n" +
                "		scanString1 VARCHAR(1000) NULL,  \n" +
                "		scanString2 VARCHAR(1000) NULL,  \n" +
                "		string1PartID INT(11) NULL,  \n" +
                "		scanString1MFG VARCHAR(100) NULL,  \n" +
                "		scanString1MFGPNID VARCHAR(100) NULL,  \n" +
                "		string2PartID INT(11) NULL,  \n" +
                "		scanString2MFG VARCHAR(100) NULL,  \n" +
                "		scanString2MFGPNID VARCHAR(100) NULL,  \n" +
                "		STATUS VARCHAR(100) NULL,  \n" +
                "		packingSlipId INT(11) NULL,  \n" +
                "		packingSlipNumber VARCHAR(255) NULL,  \n" +
                "		packingSlipSupplierId INT(11) NULL,  \n" +
                "		packingSlipSupplierCode VARCHAR(10) NULL,  \n" +
                "		cOfCValue VARCHAR(100) NULL,  \n" +
                "		isDeleted TINYINT(1) DEFAULT '0',  \n" +
                "		createdBy VARCHAR(255) NULL,  \n" +
                "		createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP  \n" +
                "	);  \n" +
                "  \n" +
                "	INSERT INTO `tempUIDHistory`(	`scanString1`, 		`scanString2`, 		`string1PartID`,  \n" +
                "					`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                "					`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                "					`packingSlipId`,	`packingSlipNumber`,	`packingSlipSupplierId`,  \n" +
                "					`packingSlipSupplierCode`,			`cOfCValue`)  \n" +
                "	SELECT 	pUID 				scanString1, 			IFNULL(pScanMFGPNLabel,		IFNULL(pScanPID,IFNULL(pScanCPN,IFNULL(pScanUID,pScanMFGPN)))) scanString2,  \n" +
                "		UH.refcompid string1PartID, 	UH.mfgcodeID scanString1MFG, 	UH.mfgPN scanString1MFGPNID,  \n" +
                "		NULL string2PartID,  \n" +
                "		NULL scanString2MFG,		NULL scanString2MFGPNID,	NULL STATUS,  \n" +
                "		packingSlipId,			packingSlipNumber,		packingSlipSupplierId,  \n" +
                "		supplierCode,			cOfCValue  \n" +
                "	FROM 	tempUIDDet UH;  \n" +
                "  \n" +
                "	SELECT 	u.mfgcodeID,	u.mfgPN,	u.PIDCode, 	u.mfgPNDescription,	u.RoHSStatusID,	u.mountingTypeID, u.partPackage, u.documentPath,  \n" +
                "			u.spq, 	u.orgQty,	u.orgPkgUnit, 	u.id,		u.pkgQty,	u.pkgUnit,	u.unitName,	u.uomClassID,	u.packingSlipId, u.mfgCode, u.mfgName, u.mfgType,  \n" +
                "            u.packingSlipNumber, 	u.packingSlipSupplierId, 	u.supplierCode, 		u.cOfCValue,	u.isCustom,	u.refcompid, u.imageURL  \n" +
                "	INTO 	v_mfgcodeID,	v_mfgPN, 	v_PIDCode, 	v_PartDescription,	v_RoHSStatusID,	v_mountingTypeID, v_partPackage, v_documentPath,  \n" +
                "			v_spq, 			v_orgQty,	v_orgPkgUnit,	v_compStockID,	v_pkgQty,	v_pkgUnit, 	v_uom, 	v_uomClassID,   v_packingSlipId,	v_mfgCode, v_mfgName, v_mfgType,  \n" +
                "            v_packingSlipNumber,	v_packingSlipSupplierId,	v_packingSlipSupplierCode,	v_cOfCValue, 	v_isCustom,	v_refcompid, v_imageURL  \n" +
                "	FROM 	tempUIDDet u;  \n" +
                "  \n" +
                "	IF EXISTS(SELECT 1 FROM tempUIDDet LIMIT 1) THEN  \n" +
                "		IF (pScanMFGPNLabel IS NOT NULL) THEN  \n" +
                "			-- IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.scanlabel = pScanMFGPNLabel LIMIT 1) THEN  \n" +
                "				CALL Sproc_MatchBarCodeAndSaveDelimiters (pScanMFGPNLabel,1,NULL,NULL,false,pMFRId,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,pBarcodeId,NULL,NULL,'M',NULL,NULL,NULL,NULL);  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDValidationDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDValidationDetail AS  \n" +
                "				SELECT * FROM tempUIDSuccessDetail;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDComponentDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDComponentDetail AS  \n" +
                "				SELECT * FROM tempUIDComponentDetail;  \n" +
                "				SELECT IsSuccess INTO v_successId FROM temp_ScanUIDValidationDetail LIMIT 1;  \n" +
                "				IF (v_successId = 1) THEN  \n" +
                "					SELECT id INTO v_componentId FROM temp_ScanUIDComponentDetail LIMIT 1;  \n" +
                "					IF (v_componentId = v_refcompid) THEN  \n" +
                "						SET uidVerified = 1;  \n" +
                "					END IF;  \n" +
                "				ELSE  \n" +
                "					SET uidVerified = 0;  \n" +
                "				END IF;  \n" +
                "			-- END IF;  \n" +
                "		ELSEIF (pScanPID IS NOT NULL OR pScanCPN IS NOT NULL) THEN  \n" +
                "			SELECT 	c.id, 		c.mfgcodeID, 		c.mfgPN  \n" +
                "			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
                "			FROM 	component c  \n" +
                "			WHERE 	c.PIDCode = IFNULL(pScanPID,pScanCPN);  \n" +
                "			IF EXISTS (SELECT 1 FROM component c WHERE c.PIDCode = IFNULL(pScanPID,pScanCPN) AND c.mfgcodeID = v_mfgcodeID AND c.mfgPN = v_mfgPN LIMIT 1) THEN  \n" +
                "				SET uidVerified = 1;  \n" +
                "			END IF	;  \n" +
                "		ELSEIF (pUID = pScanUID) THEN  \n" +
                "			SELECT 	c.refcompid, 		c.mfgcodeID, 		c.mfgPN  \n" +
                "			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
                "			FROM 	tempUIDDet c;  \n" +
                "			SET uidVerified = 1;  \n" +
                "		ELSEIF (pScanMFGPN IS NOT NULL) THEN  \n" +
                "			IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.mfgPN = pScanMFGPN LIMIT 1) THEN  \n" +
                "				SELECT 	c.refcompid, 	c.mfgcodeID, 		c.mfgPN  \n" +
                "				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
                "				FROM 	tempUIDDet c;  \n" +
                "				SET uidVerified = 1;  \n" +
                "			ELSE  \n" +
                "				SELECT 	c.id, 			c.mfgcodeID, 		c.mfgPN  \n" +
                "				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
                "				FROM 	component c  \n" +
                "				WHERE 	c.mfgPN = pScanMFGPN;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		UPDATE 	tempUIDHistory  \n" +
                "		SET 	string2PartID = v_string2PartID,  \n" +
                "			scanString2MFG = v_scanString2MFG,  \n" +
                "			scanString2MFGPNID = v_scanString2MFGPNID;  \n" +
                "	ELSE  \n" +
                "		INSERT INTO `tempUIDHistory`(`scanString1`, `scanString2`)  \n" +
                "				VALUES (pUID, IFNULL(pScanMFGPNLabel,IFNULL(pScanPID,IFNULL(pScanCPN,pScanUID))));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(	`scanString1`,		`scanString2`,		`verificationType`,  \n" +
                "						`string1PartID`,	`scanString1MFG`,	`scanString1MFGPNID`,  \n" +
                "						`string2PartID`,	`scanString2MFG`,	`scanString2MFGPNID`,  \n" +
                "						`status`,  \n" +
                "						`isDeleted`,		`createdBy`,		`createdAt`)  \n" +
                "	SELECT 	UH.scanString1, 	UH.scanString2,		pVerificationType,  \n" +
                "		UH.string1PartID, 	(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString1MFG),  \n" +
                "		UH.scanString1MFGPNID,	UH.string2PartID,  \n" +
                "		(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString2MFG),	UH.scanString2MFGPNID,  \n" +
                "		CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                "		0,	IFNULL(pCreatedBy,''),	fun_DatetimetoUTCDateTime() `createdAt`  \n" +
                "	FROM 	tempUIDHistory UH;  \n" +
                "  \n" +
                "	SELECT 	*, 			v_mfgcodeID mfgcodeID, 	v_mfgCode mfgCode, v_mfgName mfgName, v_mfgType mfgType, v_documentPath documentPath,  \n" +
                "		v_PIDCode PIDCode,	v_PartDescription partDescription,	v_RoHSStatusID RoHSStatusID, 	v_compStockID compStockID,  \n" +
                "        fun_getMountingTypeNameByID(v_mountingTypeID) mountingType, v_partPackage partPackage,  \n" +
                "		v_spq spq, 			v_orgQty orgQty,	v_orgPkgUnit orgPkgUnit, v_imageURL imageURL, v_mfgPN mfgPN,  \n" +
                "		v_pkgQty pkgQty,	v_pkgUnit pkgUnit, 		v_uom uom,    v_uomClassID uomClassID,  \n" +
                "		v_packingSlipId packingSlipId,				v_packingSlipNumber packingSlipNumber,  \n" +
                "		v_packingSlipSupplierId packingSlipSupplierId,		v_packingSlipSupplierCode packingSlipSupplierCode, v_refcompid refcompid,  \n" +
                "		v_cOfCValue cOfCValue,	v_isCustom isCustom  \n" +
                "	FROM 	uid_verification_history  \n" +
                "	WHERE 	id = LAST_INSERT_ID();  \n" +
                "  \n" +
                "	IF (pScanMFGPNLabel IS NOT NULL AND uidVerified = 0) THEN  \n" +
                "		SELECT * FROM tempUIDSuccessDetail;  \n" +
                "	ELSE  \n" +
                "		SELECT 1;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5664,'2.00','V1',' Tune Sproc_verify_UID and fix COFC issue & Created new view vu_umid_packingslipmapping_det -DP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5664:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-12-2021 *********************************** */
                "DROP function IF EXISTS `fun_getUMIDPackingSlipIdByID`;  \n" +
                "CREATE FUNCTION `fun_getUMIDPackingSlipIdByID`(  \n" +
                "	pUIDId INT(11)  \n" +
                ") RETURNS int  \n" +
                "BEGIN  \n" +
                "	DECLARE vRefPackingSlip INT;  \n" +
                "  \n" +
                "	SELECT 		ps.id INTO vRefPackingSlip  \n" +
                "	FROM 		component_sid_stock_packing_detail cspd  \n" +
                "	INNER JOIN 	packing_slip_material_receive_det psd ON cspd.refPackingSlipDetailID = psd.id AND psd.isDeleted = 0  \n" +
                "	INNER JOIN 	packing_slip_material_receive ps ON psd.refPackingSlipMaterialRecID = ps.id AND ps.isDeleted = 0  \n" +
                "	/*INNER JOIN 	mfgcodemst mcm ON mcm.id = ps.mfgCodeID AND mcm.isDeleted = 0  */  \n" +
                "	WHERE 		cspd.refComponentSidStockID = pUIDId  ;  \n" +
                "  \n" +
                "	RETURN vRefPackingSlip;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5665,'2.00','V1','Tune fun_getUMIDPackingSlipIdByID DP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5665:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetUMIDDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUMIDDetailForElastic`(  \n" +
                "	IN pumID INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "     IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM component_sid_stock css  \n" +
                "			/*INNER JOIN 	component c ON css.refcompid = c.id  \n" +
                "			LEFT JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
                "			WHERE (css.isdeleted IS NULL OR css.isdeleted = 0) AND css.id = IFNULL(pumID, css.id);  */  \n" +
                "			WHERE css.isdeleted = 0 AND css.id = IFNULL(pumID, css.id);  \n" +
                "	ELSE  \n" +
                "		SELECT css.id,  \n" +
                "				css.uid,  \n" +
                "                parentUIDId,  \n" +
                "                parentUID,  \n" +
                "                fromUIDId,  \n" +
                "                fromUID,  \n" +
                "				css.receiveMaterialType,  \n" +
                "				css.refcompid AS partID,  \n" +
                "				CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfgCode,  \n" +
                "				m.mfgType mfgType,  \n" +
                "				c.mfgPN,  \n" +
                "				c.PIDCode,  \n" +
                "				css.pkgQty,  \n" +
                "				css.pkgUnit,  \n" +
                "                css.orgQty,  \n" +
                "                css.orgPkgUnit,  \n" +
                "				fun_getUnitNameByID(css.uom) uomName,  \n" +
                "				css.dateCode,  \n" +
                "				css.lotCode,  \n" +
                "				fun_getCostCategoryNameByIDForElasticSearch(css.costCategoryID, TRUE) costCategory,  \n" +
                "				fun_getMSLLevelByID(c.mslID, FALSE) mslLevel,  \n" +
                "				fun_getFileCountByTransIDAndType('component_sid_stock', css.id) pictureCount,  \n" +
                "				c.mfgPNDescription,  \n" +
                "				IF(css.customerConsign = 0 , 'No', 'Yes') AS customerConsign,  \n" +
                "                IF(css.isReservedStock = 0 , 'No', 'Yes') AS reservedStock,  \n" +
                "				fun_getPackagingNameByID(css.packaging) packagingName,  \n" +
                "                pd.refPackingSlipMaterialRecID AS packingSlipID,  \n" +
                "				FUN_GETPACKINGSLIPNUMBERBYID(pd.refPackingSlipMaterialRecID) AS packingSlipNumber,  \n" +
                "				css.binID,  \n" +
                "				fun_getBinNameByID(css.binID) location,  \n" +
                "				fun_getWarehouseNameByBinID(css.binID) warehouse,  \n" +
                "				fun_getDepartmentNameByBinID(css.binID) department,  \n" +
                "				css.expiryDate,  \n" +
                "				(CASE WHEN (css.expiryDate < CURRENT_TIMESTAMP ) THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "				css.isDeleted  \n" +
                "		FROM component_sid_stock css  \n" +
                "		INNER JOIN component c ON css.refcompid = c.id  \n" +
                "		LEFT JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
                "        LEFT JOIN component_sid_stock_packing_detail cp ON cp.refComponentSidStockID = css.id AND cp.isDeleted = 0  \n" +
                "		LEFT JOIN packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetailID AND pd.isDeleted = 0  \n" +
                "		WHERE css.id = IFNULL(pumID, css.id) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(css.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(css.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END) GROUP BY css.id;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5666,'2.00','V1',' Tune Procedure Sproc_GetUMIDDetailForElastic DP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5666:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-12-2021 *********************************** */
                "CREATE or replace VIEW `vu_umid_packingslipmapping_det` AS  \n" +
                "    SELECT DISTINCT  \n" +
                "        `cspd`.`refComponentSidStockID` AS `refComponentSidStockID`,  \n" +
                "        `ps`.`id` AS `PackingslipID`,  \n" +
                "        `ps`.`packingSlipNumber` AS `packingSlipNumber`,  \n" +
                "        `ps`.`mfgCodeID` AS `packingslipsupplierid`,  \n" +
                "        `mcm`.`mfgCode` AS `packingslipSupplierCode`  \n" +
                "    FROM  \n" +
                "        (((`component_sid_stock_packing_detail` `cspd`  \n" +
                "        JOIN `packing_slip_material_receive_det` `psd` ON (((`cspd`.`refPackingSlipDetailID` = `psd`.`id`)  \n" +
                "            AND (`psd`.`isDeleted` = 0))))  \n" +
                "        JOIN `packing_slip_material_receive` `ps` ON (((`psd`.`refPackingSlipMaterialRecID` = `ps`.`id`)  \n" +
                "            AND (`ps`.`isDeleted` = 0))))  \n" +
                "        JOIN `mfgcodemst` `mcm` ON (((`mcm`.`id` = `ps`.`mfgCodeID`)  \n" +
                "            AND (`mcm`.`isDeleted` = 0))));  \n" +
                "DROP procedure IF EXISTS `Sproc_verify_UID`;  \n" +
                "CREATE PROCEDURE `Sproc_verify_UID`(  \n" +
                "	IN pVerificationType VARCHAR(100),  \n" +
                "	IN pUID VARCHAR(15),  \n" +
                "	IN pScanMFGPNLabel VARCHAR(1000),  \n" +
                "	IN pScanPID VARCHAR(50),  \n" +
                "	IN pScanCPN VARCHAR(50),  \n" +
                "	IN pScanUID VARCHAR(15),  \n" +
                "	IN pScanMFGPN VARCHAR(100),  \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "	IN pMFRId INT,  \n" +
                "	IN pBarcodeId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE uidVerified TINYINT(1) DEFAULT 0;  \n" +
                "	DECLARE v_mfgcodeID INT;  \n" +
                "	DECLARE v_mfgPN VARCHAR(100);  \n" +
                " 	DECLARE v_PIDCode VARCHAR(100);  \n" +
                " 	DECLARE v_PartDescription VARCHAR(2000);  \n" +
                "	DECLARE v_RoHSStatusID INT;  \n" +
                "	DECLARE v_compStockID INT;  \n" +
                "	DECLARE	v_pkgQty DECIMAL(18,8);  \n" +
                "	DECLARE v_pkgUnit DECIMAL(18,8);  \n" +
                " 	DECLARE v_uom VARCHAR(255);  \n" +
                " 	DECLARE v_string2PartID INT;  \n" +
                " 	DECLARE v_scanString2MFG VARCHAR(100);  \n" +
                " 	DECLARE v_scanString2MFGPNID VARCHAR(100);  \n" +
                " 	DECLARE v_packingSlipId INT;  \n" +
                "	DECLARE	v_packingSlipNumber VARCHAR(255);  \n" +
                "	DECLARE	v_packingSlipSupplierId INT;  \n" +
                "	DECLARE	v_packingSlipSupplierCode VARCHAR(10);  \n" +
                "	DECLARE	v_cOfCValue VARCHAR(100);  \n" +
                "	DECLARE v_isCustom TINYINT(1) DEFAULT 0;  \n" +
                "	DECLARE v_componentId INT;  \n" +
                "	DECLARE v_successId INT;  \n" +
                "	DECLARE v_refcompid INT;  \n" +
                "    DECLARE v_mountingTypeID INT;  \n" +
                "    DECLARE v_partPackage VARCHAR(255);  \n" +
                "    DECLARE v_uomClassID INT;  \n" +
                "    DECLARE v_spq DECIMAL(18,8);  \n" +
                "    DECLARE v_orgQty DECIMAL(18,8);  \n" +
                "	DECLARE v_orgPkgUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_imageURL VARCHAR(1000);  \n" +
                "    DECLARE v_documentPath VARCHAR(1000);  \n" +
                "    DECLARE v_mfgCode VARCHAR(255);  \n" +
                "    DECLARE v_mfgName VARCHAR(255);  \n" +
                "    DECLARE v_mfgType VARCHAR(20);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUIDDet;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUIDHistory;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDDet AS  \n" +
                "  \n" +
                "    SELECT  \n" +
                "						a.* , (CASE WHEN fun_getCofCDocumentCount(IFNULL(parentUIDId,id), packingSlipId) > 0 THEN  \n" +
                "											(  \n" +
                "												CASE  \n" +
                "													WHEN stockInventoryType = 'NI' THEN  \n" +
                "													      CONCAT(a.supplierCode,a.packingSlipNumber)  \n" +
                "													WHEN stockInventoryType = 'SI' THEN  \n" +
                "												       ifnull(CONCAT(a.supplierCode,a.packingSlipNumber),IFNULL(parentUID,uid))  \n" +
                "													ELSE  \n" +
                "														uid  \n" +
                "												END  \n" +
                "											)ELSE NULL END) cOfCValue  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		cs.id, 		cs.uid, 	cs.parentUID,	cs.scanlabel, 	cs.refcompid, 	c.mfgcodeID, 	c.mfgPN, cs.stockInventoryType, c.imageURL, c.documentPath,  \n" +
                "											cs.spq, 	cs.orgQty,	cs.orgPkgUnit,	c.mountingTypeID, IFNULL(c.partPackage, fun_getPackageCaseNameByID(c.partPackageID)) partPackage,  \n" +
                "										c.PIDCode, 	c.RoHSStatusID,	cs.pkgQty,	cs.pkgUnit,	cs.uom,   um.unitName,   um.measurementTypeID uomClassID,   c.isCustom,  c.mfgPNDescription,  \n" +
                "									   vps.PackingslipID PackingslipID,  \n" +
                "                                       vps.packingSlipNumber packingSlipNumber,vps.packingSlipSupplierId, vps.packingslipSupplierCode supplierCode,  \n" +
                "                                        m.mfgCode, m.mfgName, m.mfgType  ,cs.parentUIDId  \n" +
                "								FROM 		component_sid_stock cs  \n" +
                "								INNER JOIN 	component c ON cs.refcompid = c.id  \n" +
                "								INNER JOIN 	mfgcodemst m ON c.mfgcodeID = m.id  \n" +
                "								INNER JOIN 	uoms um ON cs.uom = um.id  \n" +
                "                                Left join vu_umid_packingslipmapping_det vps on case when stockInventoryType ='SI' THEN cs.parentUIDId else  cs.id end =  refComponentSidStockID  \n" +
                "								WHERE 		cs.uid  = pUID  \n" +
                "								AND 		cs.isDeleted = 0  \n" +
                "								-- LIMIT 		1  \n" +
                "							) AS a;  \n" +
                "    /* Old Query commented by DP on 14th-dec-2021 keep this query upto next 1 month till we not give final release on production  \n" +
                "	SELECT 		*,  \n" +
                "				fun_getMfgCodeByID(packingSlipSupplierId) supplierCode  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		*,  \n" +
                "							fun_getPackingSlipNumberById(packingSlipId) packingSlipNumber,  \n" +
                "							fun_getPackingSlipSupplierIdBySlipId(packingSlipId) packingSlipSupplierId,  \n" +
                "                            (CASE WHEN fun_getCofCDocumentCount(IFNULL(parentUIDId,id), packingSlipId) > 0 THEN  \n" +
                "											(  \n" +
                "												CASE  \n" +
                "													WHEN stockInventoryType = 'NI' THEN  \n" +
                "														fun_getUMIDPackingSlipNameByID(id)  \n" +
                "													WHEN stockInventoryType = 'SI' THEN  \n" +
                "														IFNULL(fun_getUMIDPackingSlipNameByID(id),uid)  \n" +
                "													ELSE  \n" +
                "														uid  \n" +
                "												END  \n" +
                "											)ELSE NULL END) cOfCValue  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		cs.id, 		cs.uid, 	cs.parentUIDId,	cs.scanlabel, 	cs.refcompid, 	c.mfgcodeID, 	c.mfgPN, cs.stockInventoryType, c.imageURL, c.documentPath,  \n" +
                "											cs.spq, 	cs.orgQty,	cs.orgPkgUnit,	c.mountingTypeID, IFNULL(c.partPackage, fun_getPackageCaseNameByID(c.partPackageID)) partPackage,  \n" +
                "										c.PIDCode, 	c.RoHSStatusID,	cs.pkgQty,	cs.pkgUnit,	cs.uom,   um.unitName,   um.measurementTypeID uomClassID,   c.isCustom,  c.mfgPNDescription,  \n" +
                "										fun_getUMIDPackingSlipIdByID(cs.id) packingSlipId, m.mfgCode, m.mfgName, m.mfgType  \n" +
                "								FROM 		component_sid_stock cs  \n" +
                "								INNER JOIN 	component c ON cs.refcompid = c.id  \n" +
                "								INNER JOIN 	mfgcodemst m ON c.mfgcodeID = m.id  \n" +
                "								INNER JOIN 	uoms um ON cs.uom = um.id  \n" +
                "								WHERE 		cs.uid =  pUID  \n" +
                "								AND 		cs.isDeleted = 0  \n" +
                "								LIMIT 		1  \n" +
                "							) AS a  \n" +
                "				) AS b;  */  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDHistory (  \n" +
                "		scanString1 VARCHAR(1000) NULL,  \n" +
                "		scanString2 VARCHAR(1000) NULL,  \n" +
                "		string1PartID INT(11) NULL,  \n" +
                "		scanString1MFG VARCHAR(100) NULL,  \n" +
                "		scanString1MFGPNID VARCHAR(100) NULL,  \n" +
                "		string2PartID INT(11) NULL,  \n" +
                "		scanString2MFG VARCHAR(100) NULL,  \n" +
                "		scanString2MFGPNID VARCHAR(100) NULL,  \n" +
                "		STATUS VARCHAR(100) NULL,  \n" +
                "		packingSlipId INT(11) NULL,  \n" +
                "		packingSlipNumber VARCHAR(255) NULL,  \n" +
                "		packingSlipSupplierId INT(11) NULL,  \n" +
                "		packingSlipSupplierCode VARCHAR(10) NULL,  \n" +
                "		cOfCValue VARCHAR(100) NULL,  \n" +
                "		isDeleted TINYINT(1) DEFAULT '0',  \n" +
                "		createdBy VARCHAR(255) NULL,  \n" +
                "		createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP  \n" +
                "	);  \n" +
                "  \n" +
                "	INSERT INTO `tempUIDHistory`(	`scanString1`, 		`scanString2`, 		`string1PartID`,  \n" +
                "					`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                "					`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                "					`packingSlipId`,	`packingSlipNumber`,	`packingSlipSupplierId`,  \n" +
                "					`packingSlipSupplierCode`,			`cOfCValue`)  \n" +
                "	SELECT 	pUID 				scanString1, 			IFNULL(pScanMFGPNLabel,		IFNULL(pScanPID,IFNULL(pScanCPN,IFNULL(pScanUID,pScanMFGPN)))) scanString2,  \n" +
                "		UH.refcompid string1PartID, 	UH.mfgcodeID scanString1MFG, 	UH.mfgPN scanString1MFGPNID,  \n" +
                "		NULL string2PartID,  \n" +
                "		NULL scanString2MFG,		NULL scanString2MFGPNID,	NULL STATUS,  \n" +
                "		packingSlipId,			packingSlipNumber,		packingSlipSupplierId,  \n" +
                "		supplierCode,			cOfCValue  \n" +
                "	FROM 	tempUIDDet UH;  \n" +
                "  \n" +
                "	SELECT 	u.mfgcodeID,	u.mfgPN,	u.PIDCode, 	u.mfgPNDescription,	u.RoHSStatusID,	u.mountingTypeID, u.partPackage, u.documentPath,  \n" +
                "			u.spq, 	u.orgQty,	u.orgPkgUnit, 	u.id,		u.pkgQty,	u.pkgUnit,	u.unitName,	u.uomClassID,	u.packingSlipId, u.mfgCode, u.mfgName, u.mfgType,  \n" +
                "            u.packingSlipNumber, 	u.packingSlipSupplierId, 	u.supplierCode, 		u.cOfCValue,	u.isCustom,	u.refcompid, u.imageURL  \n" +
                "	INTO 	v_mfgcodeID,	v_mfgPN, 	v_PIDCode, 	v_PartDescription,	v_RoHSStatusID,	v_mountingTypeID, v_partPackage, v_documentPath,  \n" +
                "			v_spq, 			v_orgQty,	v_orgPkgUnit,	v_compStockID,	v_pkgQty,	v_pkgUnit, 	v_uom, 	v_uomClassID,   v_packingSlipId,	v_mfgCode, v_mfgName, v_mfgType,  \n" +
                "            v_packingSlipNumber,	v_packingSlipSupplierId,	v_packingSlipSupplierCode,	v_cOfCValue, 	v_isCustom,	v_refcompid, v_imageURL  \n" +
                "	FROM 	tempUIDDet u;  \n" +
                "  \n" +
                "	IF EXISTS(SELECT 1 FROM tempUIDDet LIMIT 1) THEN  \n" +
                "		IF (pScanMFGPNLabel IS NOT NULL) THEN  \n" +
                "			-- IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.scanlabel = pScanMFGPNLabel LIMIT 1) THEN  \n" +
                "				CALL Sproc_MatchBarCodeAndSaveDelimiters (pScanMFGPNLabel,1,NULL,NULL,false,pMFRId,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,pBarcodeId,NULL,NULL,'M',NULL,NULL,NULL,NULL);  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDValidationDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDValidationDetail AS  \n" +
                "				SELECT * FROM tempUIDSuccessDetail;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDComponentDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDComponentDetail AS  \n" +
                "				SELECT * FROM tempUIDComponentDetail;  \n" +
                "				SELECT IsSuccess INTO v_successId FROM temp_ScanUIDValidationDetail LIMIT 1;  \n" +
                "				IF (v_successId = 1) THEN  \n" +
                "					SELECT id INTO v_componentId FROM temp_ScanUIDComponentDetail LIMIT 1;  \n" +
                "					IF (v_componentId = v_refcompid) THEN  \n" +
                "						SET uidVerified = 1;  \n" +
                "					END IF;  \n" +
                "				ELSE  \n" +
                "					SET uidVerified = 0;  \n" +
                "				END IF;  \n" +
                "			-- END IF;  \n" +
                "		ELSEIF (pScanPID IS NOT NULL OR pScanCPN IS NOT NULL) THEN  \n" +
                "			SELECT 	c.id, 		c.mfgcodeID, 		c.mfgPN  \n" +
                "			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
                "			FROM 	component c  \n" +
                "			WHERE 	c.PIDCode = IFNULL(pScanPID,pScanCPN);  \n" +
                "			IF EXISTS (SELECT 1 FROM component c WHERE c.PIDCode = IFNULL(pScanPID,pScanCPN) AND c.mfgcodeID = v_mfgcodeID AND c.mfgPN = v_mfgPN LIMIT 1) THEN  \n" +
                "				SET uidVerified = 1;  \n" +
                "			END IF	;  \n" +
                "		ELSEIF (pUID = pScanUID) THEN  \n" +
                "			SELECT 	c.refcompid, 		c.mfgcodeID, 		c.mfgPN  \n" +
                "			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
                "			FROM 	tempUIDDet c;  \n" +
                "			SET uidVerified = 1;  \n" +
                "		ELSEIF (pScanMFGPN IS NOT NULL) THEN  \n" +
                "			IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.mfgPN = pScanMFGPN LIMIT 1) THEN  \n" +
                "				SELECT 	c.refcompid, 	c.mfgcodeID, 		c.mfgPN  \n" +
                "				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
                "				FROM 	tempUIDDet c;  \n" +
                "				SET uidVerified = 1;  \n" +
                "			ELSE  \n" +
                "				SELECT 	c.id, 			c.mfgcodeID, 		c.mfgPN  \n" +
                "				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
                "				FROM 	component c  \n" +
                "				WHERE 	c.mfgPN = pScanMFGPN;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		UPDATE 	tempUIDHistory  \n" +
                "		SET 	string2PartID = v_string2PartID,  \n" +
                "			scanString2MFG = v_scanString2MFG,  \n" +
                "			scanString2MFGPNID = v_scanString2MFGPNID;  \n" +
                "	ELSE  \n" +
                "		INSERT INTO `tempUIDHistory`(`scanString1`, `scanString2`)  \n" +
                "				VALUES (pUID, IFNULL(pScanMFGPNLabel,IFNULL(pScanPID,IFNULL(pScanCPN,pScanUID))));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(	`scanString1`,		`scanString2`,		`verificationType`,  \n" +
                "						`string1PartID`,	`scanString1MFG`,	`scanString1MFGPNID`,  \n" +
                "						`string2PartID`,	`scanString2MFG`,	`scanString2MFGPNID`,  \n" +
                "						`status`,  \n" +
                "						`isDeleted`,		`createdBy`,		`createdAt`)  \n" +
                "	SELECT 	UH.scanString1, 	UH.scanString2,		pVerificationType,  \n" +
                "		UH.string1PartID, 	(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString1MFG),  \n" +
                "		UH.scanString1MFGPNID,	UH.string2PartID,  \n" +
                "		(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString2MFG),	UH.scanString2MFGPNID,  \n" +
                "		CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                "		0,	IFNULL(pCreatedBy,''),	fun_DatetimetoUTCDateTime() `createdAt`  \n" +
                "	FROM 	tempUIDHistory UH;  \n" +
                "  \n" +
                "	SELECT 	*, 			v_mfgcodeID mfgcodeID, 	v_mfgCode mfgCode, v_mfgName mfgName, v_mfgType mfgType, v_documentPath documentPath,  \n" +
                "		v_PIDCode PIDCode,	v_PartDescription partDescription,	v_RoHSStatusID RoHSStatusID, 	v_compStockID compStockID,  \n" +
                "        fun_getMountingTypeNameByID(v_mountingTypeID) mountingType, v_partPackage partPackage,  \n" +
                "		v_spq spq, 			v_orgQty orgQty,	v_orgPkgUnit orgPkgUnit, v_imageURL imageURL, v_mfgPN mfgPN,  \n" +
                "		v_pkgQty pkgQty,	v_pkgUnit pkgUnit, 		v_uom uom,    v_uomClassID uomClassID,  \n" +
                "		v_packingSlipId packingSlipId,				v_packingSlipNumber packingSlipNumber,  \n" +
                "		v_packingSlipSupplierId packingSlipSupplierId,		v_packingSlipSupplierCode packingSlipSupplierCode, v_refcompid refcompid,  \n" +
                "		v_cOfCValue cOfCValue,	v_isCustom isCustom  \n" +
                "	FROM 	uid_verification_history  \n" +
                "	WHERE 	id = LAST_INSERT_ID();  \n" +
                "  \n" +
                "	IF (pScanMFGPNLabel IS NOT NULL AND uidVerified = 0) THEN  \n" +
                "		SELECT * FROM tempUIDSuccessDetail;  \n" +
                "	ELSE  \n" +
                "		SELECT 1;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5667,'2.00','V1',' Bug 39470: COFC Document link should be display in split UMID [Tune by DP]'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5667:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-12-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report`;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`rmaNumber` AS `rmaNumber`,  \n" +
                "        `a`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "        `a`.`debitedByCustText` AS `debitedByCustText`,  \n" +
                "        `a`.`rmaOrgPONumber` AS `rmaOrgPONumber`,  \n" +
                "        `a`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "        `a`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "        `a`.`reworkReqText` AS `reworkReqText`,  \n" +
                "        `a`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "        `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "        `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "        `a`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "        `a`.`blanketPOOptionText` AS `blanketPOOptionText`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                `sm`.`rmaNumber` AS `rmaNumber`,  \n" +
                "                `sm`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isDebitedByCustomer` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `debitedByCustText`,  \n" +
                "                `sm`.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "                `sm`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "                `sm`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isReworkRequired` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `reworkReqText`,  \n" +
                "                `sm`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                `sm`.`createdAt` AS `createdDate`,  \n" +
                "                `sm`.`updatedAt` AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                IFNULL((CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN `sqt`.`BPOShippedQty`  \n" +
                "                    ELSE `sq`.`ShippedQty`  \n" +
                "                END), 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "                `sm`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 1) THEN 'Use Blanket PO# for All Releases'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN 'Link Blanket PO to Future PO(s)'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 3) THEN 'Use Blanket PO# and Release#'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `blanketPOOptionText`  \n" +
                "        FROM  \n" +
                "            (((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            IFNULL(SUM(`sbt`.`ShippedQty`), 0) AS `BPOShippedQty`,  \n" +
                "                `sbt`.`refBlanketPOID` AS `blanketPOSoDetID`  \n" +
                "        FROM  \n" +
                "            (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                `sdd`.`refBlanketPOID` AS `refBlanketPOID`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            ((`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        JOIN `salesorderdet` `sdd` ON (((`sdd`.`id` = `cpd`.`refSalesorderDetid`)  \n" +
                "            AND (`sdd`.`isDeleted` = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid` , `sdd`.`refBlanketPOID`) `sbt`  \n" +
                "        GROUP BY `sbt`.`refBlanketPOID`) `sqt` ON ((`sqt`.`blanketPOSoDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refBlanketPOID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refBlanketPOID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID` , `s`.`refAssyId`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** Add Script Version -> 15-12-2021 **************************** */
                "DROP VIEW IF EXISTS `vu_kit_allocation_detail`;  \n" +
                "CREATE VIEW `vu_kit_allocation_detail` AS  \n" +
                "    SELECT  \n" +
                "        `k`.`refSalesorderdetid` AS `refSalesorderdetid`,  \n" +
                "        `k`.`assyID` AS `assyID`,  \n" +
                "        `k`.`lineID` AS `lineID`,  \n" +
                "        `k`.`totalAssyBuildQty` AS `totalAssyBuildQty`,  \n" +
                "        `k`.`kitQty` AS `kitQty`,  \n" +
                "        `k`.`mrpQty` AS `mrpQty`,  \n" +
                "        `k`.`refRfqLineitem` AS `refRfqLineitem`,  \n" +
                "        `k`.`qpa` AS `qpa`,  \n" +
                "        `k`.`dnpQty` AS `dnpQty`,  \n" +
                "        `k`.`qpaWithDnp` AS `qpaWithDnp`,  \n" +
                "        `k`.`isPurchase` AS `isPurchase`,  \n" +
                "        `k`.`isInstall` AS `isInstall`,  \n" +
                "        `k`.`isBuyDNPQty` AS `isBuyDNPQty`,  \n" +
                "        `k`.`numOfPosition` AS `numOfPosition`,  \n" +
                "        `k`.`reqQty` AS `reqQty`,  \n" +
                "        `k`.`reqUnits` AS `reqUnits`,  \n" +
                "        `k`.`reqPins` AS `reqPins`,  \n" +
                "        `k`.`uomid` AS `uomid`,  \n" +
                "        `k`.`connecterTypeID` AS `connecterTypeID`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`k`.`isNotRequiredKitAllocation` <> 1) THEN `k`.`allocatedQty`  \n" +
                "            ELSE 0  \n" +
                "        END) AS `allocatedQty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`k`.`isNotRequiredKitAllocation` <> 1) THEN `k`.`allocatedunit`  \n" +
                "            ELSE 0  \n" +
                "        END) AS `allocatedunit`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`k`.`isNotRequiredKitAllocation` <> 1) THEN `k`.`allocatedpin`  \n" +
                "            ELSE 0  \n" +
                "        END) AS `allocatedpin`,  \n" +
                "        (CASE  \n" +
                "            WHEN  \n" +
                "                (`k`.`isNotRequiredKitAllocation` <> 1)  \n" +
                "            THEN  \n" +
                "                (CASE  \n" +
                "                    WHEN ((`k`.`reqUnits` - `k`.`allocatedunit`) > 0) THEN (`k`.`reqUnits` - `k`.`allocatedunit`)  \n" +
                "                    ELSE 0  \n" +
                "                END)  \n" +
                "            ELSE 0  \n" +
                "        END) AS `shortage`,  \n" +
                "        (CASE  \n" +
                "            WHEN  \n" +
                "                (`k`.`isNotRequiredKitAllocation` <> 1)  \n" +
                "            THEN  \n" +
                "                (CASE  \n" +
                "                    WHEN ((`k`.`reqPins` - `k`.`allocatedpin`) > 0) THEN (`k`.`reqPins` - `k`.`allocatedpin`)  \n" +
                "                    ELSE 0  \n" +
                "                END)  \n" +
                "            ELSE 0  \n" +
                "        END) AS `shortagePins`,  \n" +
                "        (CASE  \n" +
                "            WHEN  \n" +
                "                ((CASE  \n" +
                "                    WHEN  \n" +
                "                        (`k`.`isNotRequiredKitAllocation` <> 1)  \n" +
                "                    THEN  \n" +
                "                        (CASE  \n" +
                "                            WHEN ((`k`.`reqUnits` - `k`.`allocatedunit`) > 0) THEN (`k`.`reqUnits` - `k`.`allocatedunit`)  \n" +
                "                            ELSE 0  \n" +
                "                        END)  \n" +
                "                    ELSE 0  \n" +
                "                END) > 0)  \n" +
                "            THEN  \n" +
                "                1  \n" +
                "            ELSE 0  \n" +
                "        END) AS `shortageLine`,  \n" +
                "        (CASE  \n" +
                "            WHEN  \n" +
                "                ((CASE  \n" +
                "                    WHEN  \n" +
                "                        (`k`.`isNotRequiredKitAllocation` <> 1)  \n" +
                "                    THEN  \n" +
                "                        (CASE  \n" +
                "                            WHEN ((`k`.`reqPins` - `k`.`allocatedpin`) > 0) THEN (`k`.`reqPins` - `k`.`allocatedpin`)  \n" +
                "                            ELSE 0  \n" +
                "                        END)  \n" +
                "                    ELSE 0  \n" +
                "                END) > 0)  \n" +
                "            THEN  \n" +
                "                1  \n" +
                "            ELSE 0  \n" +
                "        END) AS `shortagelinePins`,  \n" +
                "        (CASE  \n" +
                "            WHEN  \n" +
                "                (`k`.`connecterTypeID` = -(2))  \n" +
                "            THEN  \n" +
                "                ((`k`.`allocatedpin` / (CASE  \n" +
                "                    WHEN (IFNULL(`k`.`reqPins`, 0) = 0) THEN 1  \n" +
                "                    ELSE `k`.`reqPins`  \n" +
                "                END)) * 100)  \n" +
                "            ELSE ((`k`.`allocatedunit` / (CASE  \n" +
                "                WHEN (IFNULL(`k`.`reqUnits`, 0) = 0) THEN 1  \n" +
                "                ELSE `k`.`reqUnits`  \n" +
                "            END)) * 100)  \n" +
                "        END) AS `AllocationPercPerLine`,  \n" +
                "        `k`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`,  \n" +
                "        `k`.`bomNumOfPosition` AS `bomNumOfPosition`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `k`.`refSalesorderdetid` AS `refSalesorderdetid`,  \n" +
                "                `k`.`assyID` AS `assyID`,  \n" +
                "                `k`.`lineID` AS `lineID`,  \n" +
                "                `k`.`totalAssyBuildQty` AS `totalAssyBuildQty`,  \n" +
                "                `k`.`kitQty` AS `kitQty`,  \n" +
                "                `k`.`mrpQty` AS `mrpQty`,  \n" +
                "                `k`.`refRfqLineitem` AS `refRfqLineitem`,  \n" +
                "                `k`.`qpa` AS `qpa`,  \n" +
                "                `k`.`dnpQty` AS `dnpQty`,  \n" +
                "                `k`.`qpaWithDnp` AS `qpaWithDnp`,  \n" +
                "                `k`.`numOfPosition` AS `numOfPosition`,  \n" +
                "                IFNULL((`k`.`totalAssyBuildQty` * IFNULL(`k`.`qpaWithDnp`, 0)), 0) AS `reqQty`,  \n" +
                "                IFNULL((`k`.`totalAssyBuildQty` * IFNULL(`k`.`qpaWithDnp`, 0)), 0) AS `reqUnits`,  \n" +
                "                IFNULL(((`k`.`totalAssyBuildQty` * IFNULL(`k`.`qpaWithDnp`, 0)) * IFNULL(`k`.`bomNumOfPosition`, 0)), 0) AS `reqPins`,  \n" +
                "                `k`.`uomid` AS `uomid`,  \n" +
                "                `k`.`connecterTypeID` AS `connecterTypeID`,  \n" +
                "                `k`.`allocatedQty` AS `allocatedQty`,  \n" +
                "                `k`.`allocatedunit` AS `allocatedunit`,  \n" +
                "                `k`.`allocatedpin` AS `allocatedpin`,  \n" +
                "                `k`.`isPurchase` AS `isPurchase`,  \n" +
                "                `k`.`isInstall` AS `isInstall`,  \n" +
                "                `k`.`isBuyDNPQty` AS `isBuyDNPQty`,  \n" +
                "                `k`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`,  \n" +
                "                `k`.`bomNumOfPosition` AS `bomNumOfPosition`  \n" +
                "        FROM  \n" +
                "            (SELECT  \n" +
                "            `a`.`refSalesOrderDetID` AS `refSalesorderdetid`,  \n" +
                "                `a`.`partId` AS `assyID`,  \n" +
                "                `b`.`lineID` AS `lineID`,  \n" +
                "                `a`.`totalAssyBuildQty` AS `totalAssyBuildQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `b`.`refRfqLineitem` AS `refRfqLineitem`,  \n" +
                "                `b`.`qpa` AS `qpa`,  \n" +
                "                `b`.`dnpQty` AS `dnpQty`,  \n" +
                "                (CASE  \n" +
                "                    WHEN  \n" +
                "                        ((`b`.`isPurchase` = 1)  \n" +
                "                            OR (`b`.`isInstall` = 1))  \n" +
                "                    THEN  \n" +
                "                        (IFNULL(`b`.`qpa`, 0) + IF(((`b`.`isBuyDNPQty` = 'Y')  \n" +
                "                            OR (`b`.`isBuyDNPQty` = 'C')), IFNULL(`b`.`dnpQty`, 0), 0))  \n" +
                "                    ELSE IF(((`b`.`isBuyDNPQty` = 'Y')  \n" +
                "                        OR (`b`.`isBuyDNPQty` = 'C')), IFNULL(`b`.`dnpQty`, 0), 0)  \n" +
                "                END) AS `qpaWithDnp`,  \n" +
                "                `b`.`numOfPosition` AS `numOfPosition`,  \n" +
                "                `b`.`uomID` AS `uomid`,  \n" +
                "                `c`.`connecterTypeID` AS `connecterTypeID`,  \n" +
                "                IFNULL(`c`.`allocatedQty`, 0) AS `allocatedQty`,  \n" +
                "                IFNULL(`c`.`allocatedunit`, 0) AS `allocatedunit`,  \n" +
                "                IFNULL(`c`.`allocatedpin`, 0) AS `allocatedpin`,  \n" +
                "                `b`.`isPurchase` AS `isPurchase`,  \n" +
                "                `b`.`isInstall` AS `isInstall`,  \n" +
                "                `b`.`isBuyDNPQty` AS `isBuyDNPQty`,  \n" +
                "                `b`.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`,  \n" +
                "                `b`.`numOfPosition` AS `bomNumOfPosition`  \n" +
                "        FROM  \n" +
                "            ((`kit_allocation_assy_detail` `a`  \n" +
                "        JOIN `kit_allocation_lineitems` `b` ON (((`a`.`refSalesOrderDetID` = `b`.`refSalesOrderDetID`)  \n" +
                "            AND (`a`.`partId` = `b`.`partID`)  \n" +
                "            AND (`b`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ka`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "                `ka`.`assyID` AS `assyid`,  \n" +
                "                `ka`.`refBOMLineID` AS `refBOMLineID`,  \n" +
                "                SUM((CASE  \n" +
                "                    WHEN (`ka`.`STATUS` = 'R') THEN `ka`.`consumeQty`  \n" +
                "                    WHEN (`ka`.`STATUS` = 'D') THEN 0  \n" +
                "                    ELSE `ka`.`allocatedQty`  \n" +
                "                END)) AS `allocatedQty`,  \n" +
                "                SUM((CASE  \n" +
                "                    WHEN (`ka`.`STATUS` = 'R') THEN `ka`.`consumeUnit`  \n" +
                "                    WHEN (`ka`.`STATUS` = 'D') THEN 0  \n" +
                "                    ELSE `ka`.`allocatedUnit`  \n" +
                "                END)) AS `allocatedunit`,  \n" +
                "                SUM((CASE  \n" +
                "                    WHEN (`ka`.`STATUS` = 'R') THEN (`ka`.`consumeUnit` * IFNULL(`c`.`noOfPosition`, 0))  \n" +
                "                    WHEN (`ka`.`STATUS` = 'D') THEN 0  \n" +
                "                    ELSE (`ka`.`allocatedUnit` * IFNULL(`c`.`noOfPosition`, 0))  \n" +
                "                END)) AS `allocatedpin`,  \n" +
                "                `c`.`connecterTypeID` AS `connecterTypeID`  \n" +
                "        FROM  \n" +
                "            (`kit_allocation` `ka`  \n" +
                "        JOIN `component` `c` ON ((`c`.`id` = `ka`.`partId`)))  \n" +
                "        WHERE  \n" +
                "            (`c`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ka`.`refSalesOrderDetID` , `ka`.`assyID` , `ka`.`refBOMLineID` , `c`.`connecterTypeID`) `c` ON (((`a`.`refSalesOrderDetID` = `c`.`refSalesOrderDetID`)  \n" +
                "            AND (`a`.`partId` = `c`.`assyid`)  \n" +
                "            AND (`b`.`refRfqLineitem` = `c`.`refBOMLineID`))))  \n" +
                "        WHERE  \n" +
                "            ((`a`.`isDeleted` = 0)  \n" +
                "                AND EXISTS( SELECT  \n" +
                "                    'Y'  \n" +
                "                FROM  \n" +
                "                    `kit_allocation_lineitems_alternatepart` `d`  \n" +
                "                WHERE  \n" +
                "                    (EXISTS( SELECT  \n" +
                "                            'Y'  \n" +
                "                        FROM  \n" +
                "                            `component` `e`  \n" +
                "                        WHERE  \n" +
                "                            ((`e`.`id` = `d`.`mfgPNID`)  \n" +
                "                                AND (`e`.`category` <> 3)))  \n" +
                "                        AND (`b`.`refSalesOrderDetID` = `d`.`refSalesOrderDetID`)  \n" +
                "                        AND (`b`.`refRfqLineitem` = `d`.`refRfqLineitem`)  \n" +
                "                        AND (`b`.`partID` = `d`.`partID`))))) `k`) `k`;  \n" +
                /* **************************** Add Script Version -> 15-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitReleaseSummaryAndStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleaseSummaryAndStatus`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pMainAssyID INT,  \n" +
                "	IN pIsConsolidated TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    SELECT  c.PartID,	c.releaseCount, 	c.kitReturnStatus,		c.salesOrderCompletedStatus,	c.shortageQty,		c.toBeRelease,		c.totalReleased,  \n" +
                "			FUN_GETKITRELEASESTATUS(allocPerWithSubAssy,totalReleaseQty,totalPOQty,assyKitQty,assyPOQty,releaseCount,pendingCount) releaseStatus  \n" +
                "	FROM  \n" +
                "		(SELECT vuss.PartID,  \n" +
                "                p.releaseCount,  \n" +
                "				p.pendingCount,  \n" +
                "				ka.allocPerWithSubAssy,  \n" +
                "				FUN_GETKITRETURNSTATUS(pendingReleaseCount, releasedNotReturnedCount, returnedCount, readyToreturnCount, shortageReturnCount) kitReturnStatus,  \n" +
                "				IFNULL(`vuss`.`kitQty`, 0) * IFNULL(perAssyBuildQty, 0) AS assyKitQty,  \n" +
                "				IFNULL(`vuss`.`PO Qty`, 0) * IFNULL(perAssyBuildQty, 0) AS assyPOQty,  \n" +
                "				p.totalReleased,  \n" +
                "                p.totalReleaseQty,  \n" +
                "                p.totalPOQty,  \n" +
                "				IFNULL(p.totalReleaseQty, 0) - IFNULL(totalReleased, 0) AS toBeRelease,  \n" +
                "				IFNULL(p.totalReleaseQty, 0) - IFNULL(ka.totalBuildFesibility, 0) AS shortageQty,  \n" +
                "				vuss.`Status` salesOrderCompletedStatus  \n" +
                "		FROM  \n" +
                "			vu_salesorder_updatedlist_report vuss  \n" +
                "		JOIN (  \n" +
                "				SELECT  \n" +
                "					perAssyBuildQty, refSalesOrderDetID, partID AS refAssyId  \n" +
                "				FROM kit_allocation_assy_detail  \n" +
                "				WHERE refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "				AND partID = pAssyID AND isDeleted = 0  \n" +
                "				GROUP BY refSalesOrderDetID , partID, perAssyBuildQty  \n" +
                "			) AS a ON a.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "		LEFT JOIN (  \n" +
                "					SELECT  \n" +
                "							salesOrderDetID, refAssyId,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releaseCount,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN kitReleaseQty ELSE 0 END) totalReleased,  \n" +
                "							SUM(CASE WHEN kitStatus = 'P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "							SUM(kitReleaseQty) totalReleaseQty,  \n" +
                "							SUM(poQty) totalPOQty  \n" +
                "					FROM salesorder_plan_detailsmst  \n" +
                "					WHERE (CASE WHEN (pIsConsolidated = 1 OR pAssyID = pMainAssyID) THEN subAssyID IS NULL ELSE subAssyID = pAssyID END)  \n" +
                "					AND isDeleted = 0  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p ON p.salesOrderDetID = `vuss`.`salesOrderDetailId` AND p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "						SELECT  \n" +
                "								salesOrderDetID, refAssyId,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'RR' THEN 1 ELSE 0 END) readyToreturnCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "						FROM 	vu_release_plan_release_return_status_det  \n" +
                "						WHERE  /* salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pMainAssyID  \n" +
                "								AND */ (CASE WHEN (pIsConsolidated = 1) THEN 1 = 1 WHEN (pAssyID IS NOT NULL AND pAssyID != pMainAssyID) THEN subAssyID = pAssyID ELSE subAssyID IS NULL END)  \n" +
                "						GROUP BY salesOrderDetID , refAssyId  \n" +
                "					) AS vrr ON vrr.salesOrderDetID = vuss.salesOrderDetailId AND vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "						SELECT  k.refSalesOrderDetID,  mainAssy AS assyID,  min(k.totalBuildFesibility) as totalBuildFesibility,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`  \n" +
                "						FROM (  \n" +
                "								SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN IFNULL((vk.allocatedpin/(vk.qpaWithDnp * vk.bomNumOfPosition)),0) ELSE IFNULL((vk.allocatedunit/vk.qpaWithDnp),0) END) AS totalBuildFesibility,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "								FROM  	`vu_kit_allocation_detail` vk  \n" +
                "								Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  AND sd.isDeleted = 0  \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1 and vk.qpaWithDnp != 0  \n" +
                "							) `k`  \n" +
                "							GROUP BY k.refSalesOrderDetID, k.mainAssy  \n" +
                "			) AS ka ON ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` AND ka.assyID = `vuss`.`PartID`  \n" +
                "		WHERE vuss.SalesOrderDetailId = pRefSalesOrderDetID  \n" +
                "	) AS c;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetSalesorderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 and vuss.blanketPOOption=2 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				vuss.blanketPOOption,  \n" +
                "				vuss.blanketPOOptionText,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToReturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount ,  \n" +
                "				vuss.rmaNumber,vuss.isDebitedByCustomer, vuss.debitedByCustText,  \n" +
                "				vuss.rmaOrgPONumber,vuss.orgSalesOrderID,vuss.isReworkRequired,  \n" +
                "				vuss.reworkReqText, vuss.reworkPONumber,vuss.custOrgPOLineNumber \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID, w.woID  \n" +
                "					ORDER BY w.woID ASC ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToReturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'' OR rmaNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''' OR rmaNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "    IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsRmaPO = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isRmaPO = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-12-2021 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5668,'2.00','V1',' Task #39597 Resolved Group By issue for Kit List and Kit Alocation and UMID Management rendering screen'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5668:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 15-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitReleaseSummaryAndStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleaseSummaryAndStatus`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pMainAssyID INT,  \n" +
                "	IN pIsConsolidated TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    SELECT  c.PartID,	c.releaseCount, 	c.kitReturnStatus,		c.salesOrderCompletedStatus,	c.shortageQty,		c.toBeRelease,		c.totalReleased,  \n" +
                "			FUN_GETKITRELEASESTATUS(allocPerWithSubAssy,totalReleaseQty,totalPOQty,assyKitQty,assyPOQty,releaseCount,pendingCount) releaseStatus  \n" +
                "	FROM  \n" +
                "		(SELECT vuss.PartID,  \n" +
                "                p.releaseCount,  \n" +
                "				p.pendingCount,  \n" +
                "				ka.allocPerWithSubAssy,  \n" +
                "				FUN_GETKITRETURNSTATUS(pendingReleaseCount, releasedNotReturnedCount, returnedCount, readyToreturnCount) kitReturnStatus,  \n" +
                "				IFNULL(`vuss`.`kitQty`, 0) * IFNULL(perAssyBuildQty, 0) AS assyKitQty,  \n" +
                "				IFNULL(`vuss`.`PO Qty`, 0) * IFNULL(perAssyBuildQty, 0) AS assyPOQty,  \n" +
                "				p.totalReleased,  \n" +
                "                p.totalReleaseQty,  \n" +
                "                p.totalPOQty,  \n" +
                "				IFNULL(p.totalReleaseQty, 0) - IFNULL(totalReleased, 0) AS toBeRelease,  \n" +
                "				IFNULL(p.totalReleaseQty, 0) - IFNULL(ka.totalBuildFesibility, 0) AS shortageQty,  \n" +
                "				vuss.`Status` salesOrderCompletedStatus  \n" +
                "		FROM  \n" +
                "			vu_salesorder_updatedlist_report vuss  \n" +
                "		JOIN (  \n" +
                "				SELECT  \n" +
                "					perAssyBuildQty, refSalesOrderDetID, partID AS refAssyId  \n" +
                "				FROM kit_allocation_assy_detail  \n" +
                "				WHERE refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "				AND partID = pAssyID AND isDeleted = 0  \n" +
                "				GROUP BY refSalesOrderDetID , partID, perAssyBuildQty  \n" +
                "			) AS a ON a.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "		LEFT JOIN (  \n" +
                "					SELECT  \n" +
                "							salesOrderDetID, refAssyId,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releaseCount,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN kitReleaseQty ELSE 0 END) totalReleased,  \n" +
                "							SUM(CASE WHEN kitStatus = 'P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "							SUM(kitReleaseQty) totalReleaseQty,  \n" +
                "							SUM(poQty) totalPOQty  \n" +
                "					FROM salesorder_plan_detailsmst  \n" +
                "					WHERE (CASE WHEN (pIsConsolidated = 1 OR pAssyID = pMainAssyID) THEN subAssyID IS NULL ELSE subAssyID = pAssyID END)  \n" +
                "					AND isDeleted = 0  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p ON p.salesOrderDetID = `vuss`.`salesOrderDetailId` AND p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "						SELECT  \n" +
                "								salesOrderDetID, refAssyId,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "						FROM 	vu_release_plan_release_return_status_det  \n" +
                "						WHERE  /* salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pMainAssyID  \n" +
                "								AND */ (CASE WHEN (pIsConsolidated = 1) THEN 1 = 1 WHEN (pAssyID IS NOT NULL AND pAssyID != pMainAssyID) THEN subAssyID = pAssyID ELSE subAssyID IS NULL END)  \n" +
                "						GROUP BY salesOrderDetID , refAssyId  \n" +
                "					) AS vrr ON vrr.salesOrderDetID = vuss.salesOrderDetailId AND vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "						SELECT  k.refSalesOrderDetID,  mainAssy AS assyID,  min(k.totalBuildFesibility) as totalBuildFesibility,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`  \n" +
                "						FROM (  \n" +
                "								SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN IFNULL((vk.allocatedpin/(vk.qpaWithDnp * vk.bomNumOfPosition)),0) ELSE IFNULL((vk.allocatedunit/vk.qpaWithDnp),0) END) AS totalBuildFesibility,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "								FROM  	`vu_kit_allocation_detail` vk  \n" +
                "								Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  AND sd.isDeleted = 0  \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1 and vk.qpaWithDnp != 0  \n" +
                "							) `k`  \n" +
                "							GROUP BY k.refSalesOrderDetID, k.mainAssy  \n" +
                "			) AS ka ON ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` AND ka.assyID = `vuss`.`PartID`  \n" +
                "		WHERE vuss.SalesOrderDetailId = pRefSalesOrderDetID  \n" +
                "	) AS c;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-12-2021 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5669,'2.00','V1',' Task #39597 Resolved Group By issue for Kit List and Kit Alocation and UMID Management rendering screen'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5669:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDetailPerLine;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDetailPerLine`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       ss.releaseNumber,  \n" +
                "		       ss.qty as releaseLineQty,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cpd.internalComment,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "            cpd.poReleaseNumber,  \n" +
                "			cpd.refBlanketPONumber,  \n" +
                "            cpd.partId,  \n" +
                "            fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "            `cpd`.assyDescription,  \n" +
                "            fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "            c.mfgPN as assyName ,  \n" +
                "            c.PIDCode as assyId,  \n" +
                "            c.mfgCodeID,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgCodeID) mfrName,  \n" +
                "			fun_getMfgCodeByID(cd.customerID) custCode,  \n" +
                "			case when som.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
                "			som.isBlanketPO,  \n" +
                "			ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "			case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "			case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "			cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
                "			cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,  \n" +
                "			case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "			fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "			concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "		(CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  createdAt,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt ,  \n" +
                "		if(cd.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
                "        if(cd.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
                "        if(cd.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "		if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "        if(cd.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "        if(cd.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "        if(cd.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "		if(cd.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "		(case when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText,  \n" +
                "        (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "        cd.revision,  \n" +
                "		(select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "			where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "			from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "		c.isCustom,   c.custAssyPN customPartNumber  ,        cpd.remainingQty ,  \n" +
                "			som.rmaNumber,som.isRmaPO,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'YES' when som.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'Yes' when som.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp  \n" +
                "		FROM customer_packingslip cd  \n" +
                "		JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0  \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0 and invoice.transType ='I'  \n" +
                "        LEFT JOIN salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "        LEFT JOIN salesordermst som on som.id = cd.refSalesOrderID and som.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "    if (pfilterStatus = '0') then  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    else  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    end if;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgPartID IS NOT NULL)THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cpd.partId in ( ',pmfgPartID,')');  \n" +
                "  END IF;  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or som.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'' or som.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "	 SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                " -- select   @temp_Sproc_RetrieveCustomerPackingSlipDetails ,pWhereClause ;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5670,'2.00','V1','Sproc_RetrieveCustomerPackingSlipDetailPerLine-Bug 39606: Blanket PO label not proper displayed  - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5670:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BU_purchase_order_det`;  \n" +
                "CREATE TRIGGER `Trg_BU_purchase_order_det` BEFORE UPDATE ON `purchase_order_det` FOR EACH ROW BEGIN  \n" +
                "	IF(NEW.isdeleted = 0) THEN  \n" +
                "		IF (SELECT COUNT(1) FROM purchase_order_mst WHERE id = NEW.refPurchaseOrderID AND isdeleted = true) = 1 THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 20-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_UK_MANUAL_BI_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `TRG_UK_MANUAL_BI_packing_slip_material_receive` BEFORE INSERT ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMessage varchar(500) default '';  \n" +
                "	IF ((NEW.CreditMemoType = 'RC' or NEW.receiptType = 'I') AND /*Invoice Created VAlidation from PS*/  \n" +
                "		( SELECT COUNT(1)  \n" +
                "			FROM packing_slip_material_receive  \n" +
                "		   WHERE packingSlipNumber = NEW.packingSlipNumber  \n" +
                "			 AND mfgCodeID = New.mfgCodeID  \n" +
                "			 AND receiptType = (CASE WHEN NEW.CreditMemoType = 'RC' THEN 'C' ELSE 'I' END)  \n" +
                "			 AND isdeleted = 0  \n" +
                "		) > 0 )  \n" +
                "	THEN  \n" +
                "		set vMessage = concat('Packing slip# ' ,NEW.packingSlipNumber,'s supplier invoice is already created.');  \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /*Invoice Number Duplicate VAlidation*/  \n" +
                "    if NEW.receiptType = 'I' AND ( (select count(1)  \n" +
                "								  from packing_slip_material_receive  \n" +
                "								 where receiptType = 'I'  \n" +
                "								   and invoiceNumber = NEW.invoiceNumber  \n" +
                "                                   and mfgCodeID = NEW.mfgCodeID  \n" +
                "								   and isDeleted = 0) > 0)  \n" +
                "    then  \n" +
                "		set vMessage = concat('This Invoice# ', NEW.invoiceNumber ,' is already exists. Please enter unique Invoice#.');  \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
                "    end  if;  \n" +
                "  \n" +
                "    /*Packing Slip nmber duplicate validation*/  \n" +
                "    if NEW.receiptType = 'P' AND ( (select count(1)  \n" +
                "								  from packing_slip_material_receive  \n" +
                "								 where receiptType = 'P'  \n" +
                "								   and packingSlipNumber  = NEW.packingSlipNumber  \n" +
                "								   and mfgCodeID = NEW.mfgCodeID  \n" +
                "								   and isDeleted = 0) > 0)  \n" +
                "    then  \n" +
                "		set vMessage = concat('This packing slip# ', NEW.packingSlipNumber ,' is already exists. Please enter unique packing slip#.');  \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
                "    end  if;  \n" +
                "  \n" +
                "     /*Credit memo# duplicate validation*/  \n" +
                "     if NEW.receiptType = 'C' AND ( (select count(1)  \n" +
                "								  from packing_slip_material_receive  \n" +
                "								 where ((creditMemoNumber = NEW.creditMemoNumber AND receiptType = 'C')  \n" +
                "										OR (refSupplierCreditMemoNumber = NEW.creditMemoNumber AND receiptType = 'D'))  \n" +
                "								   and mfgCodeID = NEW.mfgCodeID  \n" +
                "								   and isDeleted = 0) > 0)  \n" +
                "    then  \n" +
                "		set vMessage = concat('This Credit Memo# ', NEW.creditMemoNumber ,' is already exists. Please enter unique Credit Memo#.');  \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
                "    end  if;  \n" +
                "  \n" +
                "    /*ref Supplier Credit memo# duplicate validation*/  \n" +
                "     if NEW.receiptType = 'D' and NEW.refSupplierCreditMemoNumber is not null  \n" +
                "		AND ((select count(1)  \n" +
                "			    from packing_slip_material_receive  \n" +
                "			   where ((creditMemoNumber = NEW.refSupplierCreditMemoNumber AND receiptType = 'C')  \n" +
                "						OR (refSupplierCreditMemoNumber = NEW.refSupplierCreditMemoNumber AND receiptType = 'D'))  \n" +
                "			     and mfgCodeID = NEW.mfgCodeID  \n" +
                "			     and isDeleted = 0) > 0)  \n" +
                "    then  \n" +
                "		set vMessage = concat('This Credit Memo# ', NEW.refSupplierCreditMemoNumber ,' is already exists. Please enter unique Credit Memo#.');  \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
                "    end  if;  \n" +
                "  \n" +
                "     /*Debit memo# duplicate validation*/  \n" +
                "     if NEW.receiptType = 'D' AND ( (select count(1)  \n" +
                "								  from packing_slip_material_receive  \n" +
                "								 where debitMemoNumber = NEW.debitMemoNumber  \n" +
                "								   AND receiptType = 'D'  \n" +
                "								   and mfgCodeID = NEW.mfgCodeID  \n" +
                "								   and isDeleted = 0) > 0)  \n" +
                "    then  \n" +
                "		set vMessage = concat('This Debit Memo# ', NEW.debitMemoNumber ,' is already exists. Please enter unique Debit Memo#.');  \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT = vMessage;  \n" +
                "    end  if;  \n" +
                "	IF (NEW.receiptType = 'P' AND NEW.refPurchaseOrderID IS NOT NULL) THEN  \n" +
                "		IF (SELECT COUNT(1) FROM purchase_order_mst WHERE id = NEW.refPurchaseOrderID AND isdeleted = true) = 1 THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                " END;  \n" +
                /* **************************** Add Script Version -> 20-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5671,'2.00','V1',' purchase order triggers - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5671:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_purchase_order_line_othercharges`;  \n" +
                "CREATE TRIGGER `Trg_BI_purchase_order_line_othercharges` BEFORE INSERT ON `purchase_order_line_othercharges` FOR EACH ROW BEGIN  \n" +
                "	IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = NEW.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
                "		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 20-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BU_purchase_order_line_othercharges`;  \n" +
                "CREATE TRIGGER `Trg_BU_purchase_order_line_othercharges` BEFORE UPDATE ON `purchase_order_line_othercharges` FOR EACH ROW BEGIN  \n" +
                "	IF(NEW.isdeleted = 0) THEN  \n" +
                "		IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = NEW.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5672,'2.00','V1',' purchase order triggers - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5672:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_purchase_order_line_release_det`;  \n" +
                "CREATE TRIGGER `Trg_BI_purchase_order_line_release_det` BEFORE INSERT ON `purchase_order_line_release_det` FOR EACH ROW BEGIN  \n" +
                "	IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = NEW.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
                "		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 20-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_BU_purchase_order_line_release_det`;  \n" +
                "CREATE TRIGGER `TRG_BU_purchase_order_line_release_det` BEFORE UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN  \n" +
                "	IF(NEW.isdeleted = 0) THEN  \n" +
                "		IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = NEW.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (NEW.qty = NEW.receivedQty AND NEW.poLineWorkingStatus='P') THEN  \n" +
                "			SET NEW.poLineWorkingStatus='C';  \n" +
                "			SET NEW.poLineCompleteType='Auto';  \n" +
                "		ELSEIF ((NEW.qty > NEW.receivedQty AND NEW.poLineCompleteType != 'Manual') OR (NEW.qty != OLD.qty AND New.poLineCompleteType = 'Manual' AND NEW.poLineWorkingStatus='C')) THEN  \n" +
                "			SET NEW.poLineWorkingStatus='P';  \n" +
                "			SET NEW.poLineCompleteType=null;  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5673,'2.00','V1',' purchase order triggers - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5673:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BI_purchase_order_line_requirement_det`;  \n" +
                "CREATE TRIGGER `Trg_BI_purchase_order_line_requirement_det` BEFORE INSERT ON `purchase_order_line_requirement_det` FOR EACH ROW BEGIN  \n" +
                "	IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = New.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
                "		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 20-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_BU_purchase_order_line_requirement_det`;  \n" +
                "CREATE TRIGGER `Trg_BU_purchase_order_line_requirement_det` BEFORE UPDATE ON `purchase_order_line_requirement_det` FOR EACH ROW BEGIN  \n" +
                "	IF(NEW.isdeleted = 0) THEN  \n" +
                "		IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = NEW.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5674,'2.00','V1',' purchase order triggers - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5674:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-12-2021 *********************************** */
                "ALTER TABLE `operations` ADD COLUMN `shortDescription` VARCHAR(2000);  \n" +
                "ALTER TABLE `workorder_operation` ADD COLUMN `shortDescription` VARCHAR(2000);  \n" +
                /* **************************** Add Script Version -> 21-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5675,'2.00','V1',' User Story 39458: Operation Master: Improvement Points Suggested By Client. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5675:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_AddDuplicateOperation`;  \n" +
                "CREATE PROCEDURE `Sproc_AddDuplicateOperation`(  \n" +
                "	IN pfromOpID INT,  \n" +
                "	IN pisCheckUnique tinyint,  \n" +
                "	IN pIsCopyDoDont tinyint,  \n" +
                "	IN pIsCopyDocuments tinyint,  \n" +
                "	IN pIsCopyDataFields tinyint,  \n" +
                "	IN pIsCopyParts tinyint,  \n" +
                "	IN pIsCopyEquipments tinyint,  \n" +
                "	IN pIsCopyEmployees tinyint,  \n" +
                "	IN pIsCopyTemplates tinyint,  \n" +
                "    IN popName VARCHAR(255),  \n" +
                "	IN popNumber DECIMAL(7,3),  \n" +
                "    IN pcolorCode VARCHAR(100),  \n" +
                "	IN puserID VARCHAR(255),  \n" +
                "	IN puserRoleId INT,  \n" +
                "	IN popDescription longtext,  \n" +
                "    IN popWorkingCondition longtext,  \n" +
                "    IN popManagementInstruction longtext,  \n" +
                "    IN popDeferredInstruction longtext,  \n" +
                "    IN popDoes longtext,  \n" +
                "    IN popDonts longtext,  \n" +
                "	IN popOrder DECIMAL(7,3),  \n" +
                "	IN popStatus INT,  \n" +
                "	IN poperationTypeID INT,  \n" +
                "	IN pparentOPID INT,  \n" +
                "	IN pprocessTime INT,  \n" +
                "	IN psetupTime INT,  \n" +
                "	IN pperPieceTime INT,  \n" +
                "	IN pqtyControl tinyint,  \n" +
                "	IN ptabLimitAtTraveler INT,  \n" +
                "	IN pisTeamOperation tinyint,  \n" +
                "	IN pisIssueQty tinyint,  \n" +
                "	IN pisRework tinyint,  \n" +
                "	IN pisMoveToStock tinyint,  \n" +
                "	IN pmountingTypeID INT,  \n" +
                "	IN pisPlacementTracking tinyint,  \n" +
                "	IN pisLoopOperation tinyint,  \n" +
                "	IN pisAllowMissingPartQty tinyint,  \n" +
                "	IN pisAllowBypassQty tinyint,  \n" +
                "	IN pisEnablePreProgrammingPart tinyint,  \n" +
                "	IN pisWaterSoluble tinyint,  \n" +
                "	IN pisNoClean tinyint,  \n" +
                "	IN pisFluxNotApplicable tinyint,  \n" +
                "	IN pshortDescription VARCHAR(2000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    DECLARE vValidationPassed tinyint;  \n" +
                "	DECLARE vCount INT;  \n" +
                "    DECLARE vinsertedOPID INT;  \n" +
                "	DECLARE vUTCDateTime datetime;  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	START TRANSACTION;  \n" +
                "	IF (popNumber IS NULL OR popNumber = 0) THEN  \n" +
                "		SELECT 'EC01' errorCode;    /* Operation number must not blank. */  \n" +
                "	ELSEIF (popName IS NULL OR popName = '') THEN  \n" +
                "		SELECT 'EC02' errorCode;    /* Operation Name must not blank. */  \n" +
                "	END IF;  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "    IF pisCheckUnique THEN  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_operation_table AS (select opNumber,colorCode,isDeleted from operations  \n" +
                "			where opNumber = popNumber OR (pcolorCode IS NOT NULL AND pcolorCode <> '' AND colorCode = pcolorCode));  \n" +
                "		IF (EXISTS (SELECT 1 FROM temp_operation_table)) THEN  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			set vCount = 0;  \n" +
                "			select count(1),opNumber into vCount, @opNumber from temp_operation_table where isDeleted = 0 group by opNumber LIMIT 1;  \n" +
                "			IF vCount > 0 THEN  \n" +
                "				SELECT case when @opNumber = popNumber then 'Operation number' else 'Color Code' END as errorCode;  \n" +
                "			ELSE  \n" +
                "				SELECT 'EC03' errorCode;    /* Confirmation message for create new if found deleted record. */  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_operation_table;  \n" +
                "	ELSE  \n" +
                "		set vCount = 0;  \n" +
                "			select count(1),opNumber into vCount, @opNumber from operations  \n" +
                "				where (opNumber = popNumber OR (pcolorCode IS NOT NULL AND pcolorCode <> '' AND colorCode = pcolorCode)) AND isDeleted = 0  group by opNumber LIMIT 1;  \n" +
                "		IF vCount > 0 THEN  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			SELECT case when @opNumber = popNumber then 'Operation number' else 'Color Code' END as errorCode;  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF vValidationPassed = 1 then  \n" +
                "		SELECT fun_DatetimetoUTCDateTime() into vUTCDateTime;  \n" +
                "		IF pfromOpID > 0 THEN  \n" +
                "			# [S] - copy Operation Detail AND  Do/does  \n" +
                "			insert into operations (opName, opNumber,colorCode,opDescription,opDoes,opDonts, opOrder,opStatus,documentPath, operationTypeID,parentOPID,processTime,setupTime,perPieceTime,qtyControl,opWorkingCondition,opManagementInstruction,opDeferredInstruction,isTeamOperation,isIssueQty,isRework,  \n" +
                "						tabLimitAtTraveler,isMoveToStock,mountingTypeID,isPlacementTracking,isLoopOperation,isAllowMissingPartQty,isAllowBypassQty,isEnablePreProgrammingPart,isWaterSoluble,  \n" +
                "						isNoClean,isFluxNotApplicable,createdBy,createdAt, createByRoleId, shortDescription)  \n" +
                "				select popName, popNumber,pcolorCode, opDescription, case when pIsCopyDoDont then opDoes else NULL end , case when pIsCopyDoDont then opDonts else NULL end , popNumber, 0, documentPath, operationTypeID,parentOPID,processTime,setupTime,perPieceTime,qtyControl,opWorkingCondition,opManagementInstruction,opDeferredInstruction,isTeamOperation,isIssueQty,isRework,  \n" +
                "						tabLimitAtTraveler,isMoveToStock,mountingTypeID,isPlacementTracking,isLoopOperation,isAllowMissingPartQty,isAllowBypassQty,isEnablePreProgrammingPart,isWaterSoluble,  \n" +
                "						isNoClean,isFluxNotApplicable, pUserID, vUTCDateTime, pUserRoleId, shortDescription  \n" +
                "				from operations  \n" +
                "				where opID = pfromOpID and isDeleted = 0;  \n" +
                "			# [E] - copy Operation DetailAND  Do/does  \n" +
                "        ELSE  \n" +
                "			 # [E] - Insert Operation Detail(Add operation)  \n" +
                "			 insert into operations (opName, opNumber,colorCode,opDescription,opOrder, opStatus, operationTypeID,parentOPID,processTime,setupTime,perPieceTime,qtyControl,opWorkingCondition,opManagementInstruction,opDeferredInstruction,isTeamOperation,isIssueQty,isRework,  \n" +
                "						tabLimitAtTraveler,isMoveToStock,mountingTypeID,isPlacementTracking,isLoopOperation,isAllowMissingPartQty,isAllowBypassQty,isEnablePreProgrammingPart,isWaterSoluble,  \n" +
                "						isNoClean,isFluxNotApplicable,createdBy,createdAt, createByRoleId, shortDescription)  \n" +
                "					VALUES( popName, popNumber,pcolorCode, popDescription,popOrder, popStatus, poperationTypeID,pparentOPID,pprocessTime,psetupTime,pperPieceTime,pqtyControl,popWorkingCondition,popManagementInstruction,popDeferredInstruction,pisTeamOperation,pisIssueQty,pisRework,  \n" +
                "						ptabLimitAtTraveler,pisMoveToStock,pmountingTypeID,pisPlacementTracking,pisLoopOperation,pisAllowMissingPartQty,pisAllowBypassQty,pisEnablePreProgrammingPart,pisWaterSoluble,  \n" +
                "						pisNoClean,pisFluxNotApplicable, pUserID, vUTCDateTime, pUserRoleId, pshortDescription);  \n" +
                "			# [E] - Insert Operation Detail(Add operation)  \n" +
                "		END IF;  \n" +
                "		SET vinsertedOPID = LAST_INSERT_ID();  \n" +
                "		SELECT op.opID AS opID, op.opNumber, op.documentPath FROM operations op WHERE op.opID = vinsertedOPID;  \n" +
                "		# [S] - copy Data Fields  \n" +
                "			IF pIsCopyDataFields THEN  \n" +
                "				insert into operation_dataelement (opID, dataElementID, displayOrder, description, createdBy,createdAt, createByRoleId)  \n" +
                "					select vinsertedOPID, dataElementID, displayOrder, description, pUserID, vUTCDateTime, pUserRoleId  \n" +
                "						from operation_dataelement  \n" +
                "						where opID = pfromOpID and isDeleted = false;  \n" +
                "            END IF;  \n" +
                "		# [E] - copy Data Fields  \n" +
                "		# [S] - copy Supplier,amterials & tools(parts)  \n" +
                "			IF pIsCopyParts THEN  \n" +
                "				insert into operation_part (opID, partID, createdBy,createdAt, createByRoleId)  \n" +
                "					select vinsertedOPID, partID, pUserID, vUTCDateTime, pUserRoleId  \n" +
                "						from operation_part  \n" +
                "						where opID = pfromOpID and isDeleted = false;  \n" +
                "            END IF;  \n" +
                "		# [E] - copy Supplier,amterials & tools(parts)  \n" +
                "		# [S] - copy Equipments  \n" +
                "			IF pIsCopyEquipments THEN  \n" +
                "				insert into operation_equipment (opID, eqpID, createdBy,createdAt, createByRoleId)  \n" +
                "					select vinsertedOPID, eqpID, pUserID, vUTCDateTime, pUserRoleId  \n" +
                "						from operation_equipment  \n" +
                "						where opID = pfromOpID and isDeleted = false;  \n" +
                "            END IF;  \n" +
                "		# [E] - copy Equipments  \n" +
                "		# [S] - copy Personnel  \n" +
                "			IF pIsCopyEmployees THEN  \n" +
                "				insert into operation_employee (opID, employeeID, createdBy,createdAt, createByRoleId)  \n" +
                "					select vinsertedOPID, employeeID, pUserID, vUTCDateTime, pUserRoleId  \n" +
                "						from operation_employee  \n" +
                "						where opID = pfromOpID and isDeleted = false;  \n" +
                "            END IF;  \n" +
                "		# [E] - copy Personnel  \n" +
                "		# [S] - copy Master template  \n" +
                "			IF pIsCopyTemplates THEN  \n" +
                "				insert into operation_master_templates (operationId, masterTemplateId,isActive, createdBy,createdAt, createByRoleId)  \n" +
                "					select vinsertedOPID, masterTemplateId,isActive, pUserID, vUTCDateTime, pUserRoleId  \n" +
                "						from operation_master_templates  \n" +
                "						where operationId = pfromOpID and isDeleted = false;  \n" +
                "            END IF;  \n" +
                "		# [E] - copy Master template  \n" +
                " 		# [S] - copy document_folder  \n" +
                "			IF pIsCopyDocuments then  \n" +
                "				INSERT INTO generic_folder  \n" +
                "						(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "						`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "				SELECT  a.gencFolderName, vinsertedOPID refTransID, '-1' , 'operations' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "						0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "						a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "				FROM generic_folder a  \n" +
                "				WHERE a.refTransID = pfromOpID  \n" +
                "				AND a.gencFileOwnerType = 'operations' AND entityID = -1 AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "				UPDATE generic_folder gf1,  \n" +
                "				(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "					FROM generic_folder a WHERE a.refTransID = vinsertedOPID  \n" +
                "					AND a.gencFileOwnerType = 'operations' AND entityID = -1 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "				) gf2  \n" +
                "				SET gf1.refParentId = gf2.gencFolderID  \n" +
                "				WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "				AND gf1.refTransID = vinsertedOPID  \n" +
                "				AND gf1.gencFileOwnerType = 'operations' AND entityID = -1 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "  \n" +
                "				INSERT INTO genericfiles  \n" +
                "					(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "					entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "					refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "				select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vinsertedOPID,  \n" +
                "					entityID,gencFileOwnerType,isActive,genFilePath,vUTCDateTime,pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "					pfromOpID,gencFileOwnerType,pUserRoleId  \n" +
                "				from genericfiles where refTransID = pfromOpID and entityID = -1 and isRecycle = 0 and isDeleted = 0;  \n" +
                "				UPDATE genericfiles gf1,  \n" +
                "				(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "					FROM generic_folder a WHERE a.refTransID = vinsertedOPID  \n" +
                "					AND a.gencFileOwnerType = 'operations' AND entityID = -1 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "				) gf2  \n" +
                "				SET gf1.refParentId = gf2.gencFolderID  \n" +
                "				WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "				AND gf1.refTransID = vinsertedOPID  \n" +
                "				AND gf1.gencFileOwnerType = 'operations' AND entityID = -1 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('operations',vinsertedOPID,true);  /* Get New Path and Update in Operation table.  */  \n" +
                "			END IF;  \n" +
                "		# [E] - copy generic_folder  \n" +
                "		COMMIT;  \n" +
                "	END if;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveOperation`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveOperation`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	        DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	        SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	        SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "  \n" +
                "		SET @temp_Sproc_RetrieveOperation = CONCAT(\"  \n" +
                "			SELECT op.opID,op.opName,op.opNumber,  \n" +
                "            fun_getTextAngularData(op.opDescription,'\" , vTextAngularKeyCode , \"') opDescription,  \n" +
                "            fun_getTextAngularData(op.opDoes,'\", vTextAngularKeyCode ,\"') opDoes,  \n" +
                "            fun_getTextAngularData(op.opDonts, '\" ,vTextAngularKeyCode ,\"') opDonts,  \n" +
                "            fun_getTextAngularData(op.opWorkingCondition,'\", vTextAngularKeyCode ,\"') opWorkingCondition,  \n" +
                "            fun_getTextAngularData(op.opManagementInstruction,'\", vTextAngularKeyCode,\"') opManagementInstruction,  \n" +
                "            fun_getTextAngularData(op.opDeferredInstruction,'\", vTextAngularKeyCode,\"') opDeferredInstruction,  \n" +
                "			op.opOrder,op.isDeleted,op.opStatus,  \n" +
                "			op.operationTypeID,op.parentOPID,op.processTime,  \n" +
                "			op.setupTime,op.perPieceTime,op.qtyControl,  \n" +
                "			op.isTeamOperation,op.isIssueQty,op.isRework,  \n" +
                "			op.colorCode,op.tabLimitAtTraveler,op.isMoveToStock,  \n" +
                "			op.isLoopOperation ,  op.isAllowMissingPartQty  , op.isAllowBypassQty ,  \n" +
                "			op.isEnablePreProgrammingPart , op.mountingTypeID,  \n" +
                "			fun_getMountingTypeNameByID(op.mountingTypeID) mountingType,  \n" +
                "			(CASE WHEN (`op`.`qtyControl` = 0) THEN 'No'  \n" +
                "			WHEN (`op`.`qtyControl` = 1) THEN 'Yes' ELSE '' END) AS `qtyControlConvertedValue`,  \n" +
                "			(CASE WHEN (`op`.`isIssueQty` = 0) THEN 'No'  \n" +
                "			WHEN (`op`.`isIssueQty` = 1) THEN 'Yes' ELSE '' END) AS `isIssueQtyConvertedValue`,  \n" +
                "			(CASE WHEN (`op`.`isTeamOperation` = 0) THEN 'No'  \n" +
                "			WHEN (`op`.`isTeamOperation` = 1) THEN 'Yes' ELSE '' END) AS `isTeamOperationConvertedValue`,  \n" +
                "			(CASE WHEN (`op`.`isRework` = 0) THEN 'No'  \n" +
                "			WHEN (`op`.`isRework` = 1) THEN 'Yes' ELSE '' END) AS `isReworkConvertedValue`,  \n" +
                "			(CASE WHEN (`op`.`isMoveToStock` = 0) THEN 'No'  \n" +
                "			WHEN (`op`.`isMoveToStock` = 1) THEN 'Yes' ELSE '' END) AS `isMoveToStockConvertedValue`,  \n" +
                "			(CASE WHEN (`op`.`isLoopOperation` = 0) THEN 'No'  \n" +
                "				WHEN (`op`.`isLoopOperation` = 1) THEN 'Yes' ELSE '' END) AS `isLoopOperationConvertedValue`,  \n" +
                "			(CASE WHEN (`op`.`isAllowMissingPartQty` = 0) THEN 'No'  \n" +
                "				WHEN (`op`.`isAllowMissingPartQty` = 1) THEN 'Yes' ELSE '' END) AS `isAllowMissingPartQtyConvertedValue`,  \n" +
                "			(CASE WHEN (`op`.`isAllowBypassQty` = 0) THEN 'No'  \n" +
                "				WHEN (`op`.`isAllowBypassQty` = 1) THEN 'Yes' ELSE '' END) AS `isAllowBypassQtyConvertedValue`,  \n" +
                "			(CASE WHEN (`op`.`isEnablePreProgrammingPart` = 0) THEN 'No'  \n" +
                "				WHEN (`op`.`isEnablePreProgrammingPart` = 1) THEN 'Yes' ELSE '' END) AS `isEnablePreProgrammingPartConvertedValue`,  \n" +
                "			fun_getUserNameByID(op.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(op.createdBy) createdby,  \n" +
                "			fun_getRoleByID(op.updateByRoleId) updatedbyRole,  \n" +
                "			fun_getRoleByID(op.createByRoleId) createdbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(op.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(op.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getOpStatusNameByID(op.opStatus) AS `opStatusConvertedValue` ,  \n" +
                "            op.isNoClean,op.isWaterSoluble, op.isFluxNotApplicable, op.shortDescription,  \n" +
                "            (CASE WHEN op.isFluxNotApplicable = 1 THEN 'NA'  \n" +
                "				  WHEN op.isNoClean = 0 AND op.isWaterSoluble = 1 THEN 'WS'  \n" +
                "                  WHEN op.isNoClean = 1 AND op.isWaterSoluble = 0 THEN 'NC'  \n" +
                "                  WHEN op.isNoClean = 1 AND op.isWaterSoluble = 1 THEN 'BOTH' ELSE 'NA'  END) fluxType,  \n" +
                "            (CASE WHEN op.isFluxNotApplicable = 1 THEN 'Not Applicable'  \n" +
                "				  WHEN op.isNoClean = 0 AND op.isWaterSoluble = 1 THEN 'Water-Soluble'  \n" +
                "                  WHEN op.isNoClean = 1 AND op.isWaterSoluble = 0 THEN 'No-Clean'  \n" +
                "                  WHEN op.isNoClean = 1 AND op.isWaterSoluble = 1 THEN 'Water-Soluble and No-Clean'END ) fluxTypeConvertedValue  \n" +
                "		FROM `operations` op  \n" +
                "		WHERE op.`deletedAt` IS NULL  \n" +
                "		\");  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY opNumber ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveOperation,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveOperation,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 21-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_AddOperationInWorkOrder`;  \n" +
                "CREATE PROCEDURE `Sproc_AddOperationInWorkOrder`(  \n" +
                "	IN pwoID INT,  \n" +
                "	IN popID VARCHAR(5000),  \n" +
                "	IN puserID VARCHAR(50),  \n" +
                "    IN puserRoleId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE t_lv_woOPID INT;  \n" +
                "DECLARE i INT DEFAULT 0;  \n" +
                "DECLARE totWoOPIDs INT DEFAULT 0;  \n" +
                "DECLARE lv_woNumber VARCHAR(50);  \n" +
                "DECLARE opNumberFromTrackBySerial INT ;  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	SELECT woNumber INTO lv_woNumber FROM workorder WHERE deletedAt IS NULL AND woID = pwoID ;  \n" +
                "  \n" +
                "IF (NOT EXISTS (SELECT 1 FROM workorder wo WHERE wo.deletedAt IS NULL AND wo.woID = pwoID))  \n" +
                "	THEN SELECT 'woNumber' errorCode;  \n" +
                "ELSEIF (EXISTS (SELECT 1 FROM assemblystock WHERE deletedAt IS NULL AND `type` = 'WS' AND woNumber = lv_woNumber)) THEN  \n" +
                "		SELECT 'EC51' errorCode;  \n" +
                "	/* already added ready to ship qty - move to stock from last op done so not allowed to add operation */  \n" +
                "ELSE  \n" +
                "	/*Generate Dummy data from string to row */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS t;  \n" +
                "	CREATE TEMPORARY TABLE t( txt TEXT );  \n" +
                "	INSERT INTO t VALUES(popID);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp;  \n" +
                "	CREATE TEMPORARY TABLE temp( val CHAR(255) );  \n" +
                "	SET @SQL = CONCAT(\"insert into temp (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t), \",\", \"'),('\"),\"');\");  \n" +
                "	PREPARE stmt1 FROM @SQL;  \n" +
                "	EXECUTE stmt1;  \n" +
                "	-- SELECT DISTINCT(val) FROM temp;  \n" +
                "	/*Generate Dummy data from string to row */  \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "	/*Delete old operation from workorder */  \n" +
                "	UPDATE  workorder_operation_equipment_dataelement  \n" +
                "	SET isDeleted = 1,  \n" +
                "	    deletedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "	    deletedBy = puserID , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID  \n" +
                "	WHERE woOPid IN (SELECT woopid FROM workorder_operation  \n" +
                "			WHERE woid = pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp))AND deletedAt IS NULL;  \n" +
                "	UPDATE  workorder_operation_equipment  \n" +
                "	SET isDeleted = 1,  \n" +
                "	    deletedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "	    deletedBy = puserID  , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID  \n" +
                "	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;  \n" +
                "	UPDATE workorder_operation_employee  \n" +
                "	SET isDeleted = 1,  \n" +
                "	    deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "	    deletedBy = puserID , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID  \n" +
                "	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;  \n" +
                "	UPDATE workorder_operation_part  \n" +
                "	SET isDeleted = 1,  \n" +
                "	    deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "	    deletedBy = puserID , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID  \n" +
                "	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;  \n" +
                "	UPDATE workorder_operation_dataelement  \n" +
                "	SET isDeleted = 1,  \n" +
                "	    deletedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "	    deletedBy = puserID , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID  \n" +
                "	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;  \n" +
                "    UPDATE workorder_operation_cluster  \n" +
                "	SET isDeleted = 1,  \n" +
                "	    deletedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "	    deletedBy = puserID , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID  \n" +
                "	WHERE clusterID IN (SELECT clusterID FROM workorder_cluster WHERE woID = pwoID) AND opid NOT IN (SELECT DISTINCT(val) FROM temp)AND deletedAt IS NULL;  \n" +
                "	UPDATE workorder_operation  \n" +
                "	SET isDeleted = 1,  \n" +
                "	    deletedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "	    deletedBy = puserID , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID  \n" +
                "	WHERE woid =  pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp) AND deletedAt IS NULL;  \n" +
                "  \n" +
                " 	UPDATE  genericfiles  \n" +
                "	SET isDeleted = 1,  \n" +
                "	    deletedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "	    deletedBy = puserID , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID  \n" +
                "	WHERE refTransID IN (SELECT woOPID FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woid = pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp))  \n" +
                "	AND deletedAt IS NULL  \n" +
                "	AND gencFileOwnerType = 'workorder_operation' ;  \n" +
                "  \n" +
                "	UPDATE  generic_folder  \n" +
                "	SET isDeleted = 1,  \n" +
                "	    deletedAt = fun_DatetimetoUTCDateTime() ,  \n" +
                "	    deletedBy = puserID , updatedAt = fun_DatetimetoUTCDateTime() , updatedBy = puserID  \n" +
                "	WHERE refTransID IN (SELECT woOPID FROM workorder_operation WHERE deletedAt IS NULL  \n" +
                "				AND woid = pwoID AND opid NOT IN (SELECT DISTINCT(val) FROM temp))  \n" +
                "	AND deletedAt IS NULL  \n" +
                "	AND gencFileOwnerType = 'workorder_operation' ;  \n" +
                "	/*Delete old operation from workorder*/  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_newAddedOpIDList;  /* all these opIDs are new to adding as woOPID */  \n" +
                "	CREATE TEMPORARY TABLE temp_newAddedOpIDList AS  \n" +
                "	SELECT op.opID FROM operations op  \n" +
                "	WHERE op.deletedAt IS NULL  \n" +
                "	AND op.opID IN(SELECT DISTINCT(val) FROM temp)  \n" +
                "	AND op.opID NOT IN (SELECT woop.opID FROM workorder_operation woop  \n" +
                "				WHERE woop.woid = pwoid AND  woop.deletedAt IS NULL);  \n" +
                "  \n" +
                "    INSERT INTO workorder_operation  \n" +
                "	(`woID`,`opID`,`createdAt`,`createdBy`,`opName`,`opNumber`,  \n" +
                "	`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,  \n" +
                "	`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,  \n" +
                "	opVersion, isIssueQty, isRework,`colorCode`,`tabLimitAtTraveler`, isMoveToStock,mountingTypeID, isPlacementTracking ,  \n" +
                "	`isLoopOperation` , `isAllowMissingPartQty` , `isAllowBypassQty` , `isEnablePreProgrammingPart`,  \n" +
                "    `isFluxNotApplicable`,`isNoClean`,`isWaterSoluble`, `shortDescription`)  \n" +
                "	SELECT   pwoID WOID ,`opID`,fun_DatetimetoUTCDateTime() `createdAt`,puserID `createdBy`,`opName`,`opNumber`,  \n" +
                "	`opDescription`,`opDoes`,`opDonts`,`opOrder`,`opStatus`,`operationTypeID`,`parentOPID`,`processTime`,  \n" +
                "	`setupTime`,`perPieceTime`,`qtyControl`,`opWorkingCondition`,`opManagementInstruction`,`opDeferredInstruction`, `isDeleted`,'A' opVersion, `isIssueQty`, `isRework`,  \n" +
                "	`colorCode`, IFNULL(`tabLimitAtTraveler`,1) tabLimitAtTraveler, IFNULL(`isMoveToStock`,0) isMoveToStock,wo.mountingTypeID, isPlacementTracking  ,  \n" +
                "	   `isLoopOperation` , `isAllowMissingPartQty` , `isAllowBypassQty` ,`isEnablePreProgrammingPart`,`isFluxNotApplicable`,`isNoClean`,`isWaterSoluble`,`shortDescription`  \n" +
                "	 FROM operations wo  \n" +
                "	 WHERE opid IN(SELECT DISTINCT(val) FROM temp)  AND  \n" +
                "		opid NOT IN (SELECT opid FROM workorder_operation WHERE woid = pwoid AND  deletedAt IS NULL) AND  \n" +
                "		wo.deletedAt IS NULL ;  \n" +
                "  \n" +
                "	INSERT INTO workorder_operation_dataelement  \n" +
                "	(`woID`,`opID`,`dataElementID`, `displayOrder`,`createdAt`,`createdBy`,`woOPID`,`isDeleted`)  \n" +
                "	SELECT a.woID ,b.opID ,b.dataElementID, b.displayOrder ,a.createdAt, a.createdBy,a.woOPID, a.isDeleted  \n" +
                "	FROM workorder_operation a JOIN operation_dataelement b ON a.opID = b.opID AND a.deletedAt IS NULL AND b.deletedAt IS NULL  \n" +
                "	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND  \n" +
                "		a.deletedAt IS NULL AND b.deletedAt IS NULL AND  \n" +
                "		NOT EXISTS (SELECT 'Y' FROM  workorder_operation_dataelement c  \n" +
                "				WHERE c.woid = a.woid AND  \n" +
                "				      c.opid = a.opid AND  \n" +
                "				      c.dataElementID = b.dataElementID AND  \n" +
                "				      c.deletedAt IS NULL);  \n" +
                "  \n" +
                "	INSERT INTO workorder_operation_part  \n" +
                "	(`woID`,`opID`,`partID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)  \n" +
                "	SELECT a.woID,b.opID,b.partID,a.createdAt, a.createdBy,a.woOPID, a.isDeleted  \n" +
                "	FROM workorder_operation a JOIN operation_part b ON a.opID = b.opID AND a.deletedAt IS NULL AND b.deletedAt IS NULL  \n" +
                "	WHERE a.woid = pwoID  \n" +
                "	AND a.opid IN(SELECT DISTINCT(val) FROM temp)  \n" +
                "	AND a.deletedAt IS NULL AND b.deletedAt IS NULL  \n" +
                "	AND NOT EXISTS (SELECT 'Y' FROM  workorder_operation_part c  \n" +
                "				WHERE c.woid = a.woid AND  \n" +
                "				      c.opid = a.opid AND  \n" +
                "				      c.partid = b.partid AND  \n" +
                "				      c.deletedAt IS NULL)  \n" +
                "	AND b.partID NOT IN (  \n" +
                "				SELECT id FROM component  \n" +
                "				WHERE (restrictUSEwithpermission = 1 OR restrictPackagingUseWithpermission = 1  \n" +
                "					OR restrictUsePermanently = 1 OR restrictPackagingUsePermanently = 1)  \n" +
                "				AND deletedAt IS NULL  \n" +
                "			 )  \n" +
                "	AND b.partID NOT IN (  \n" +
                "				SELECT mfgPNID FROM rfq_lineitems_alternatepart  \n" +
                "				WHERE partID IN (SELECT partID FROM workorder WHERE woID = pwoID AND deletedAt IS NULL)  \n" +
                "				AND (restrictUseInBOMWithPermissionStep = 1 OR restrictUseInBOMStep = 1)  \n" +
                "				AND deletedAt IS NULL  \n" +
                "				)  \n" +
                "				;  \n" +
                "  \n" +
                "	INSERT INTO workorder_operation_employee  \n" +
                "	(`woID`,`opID`,`employeeID`,`createdAt`,`createdBy`,`woOPID`, `isDeleted`)  \n" +
                "	SELECT a.woID,a.opID,b.employeeID,fun_DatetimetoUTCDateTime() `createdAt`,a.createdBy,a.woOPID, a.isDeleted  \n" +
                "	FROM workorder_operation a JOIN  operation_employee   b ON a.opID = b.opID AND a.deletedAt IS NULL AND b.deletedAt IS NULL  \n" +
                "	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND  \n" +
                "		NOT EXISTS (SELECT 'Y' FROM workorder_operation_employee c  \n" +
                "					WHERE c.woid = a.woid AND  \n" +
                "					      c.opid = a.opid AND  \n" +
                "					      c.employeeid = b.employeeid AND  \n" +
                "					      c.deletedAt IS NULL) AND  \n" +
                "	       a.deletedAt IS NULL AND b.deletedAt IS NULL ;  \n" +
                "  \n" +
                "	INSERT INTO workorder_operation_equipment  \n" +
                "	(`woID`,`opID`,`eqpID`,`createdAt`,`createdBy`,`woOPID`,  `isDeleted`)  \n" +
                "	SELECT a.woID,a.opID,b.eqpID,fun_DatetimetoUTCDateTime() `createdAt`,a.createdBy,a.woOPID, a.isDeleted  \n" +
                "	FROM workorder_operation a JOIN  operation_equipment  b ON a.opID = b.opID AND a.deletedAt IS NULL AND b.deletedAt IS NULL  \n" +
                "	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND  \n" +
                "		NOT EXISTS (SELECT 'Y' FROM workorder_operation_equipment c  \n" +
                "				 WHERE c.woid = a.woid AND  \n" +
                "					c.opid = a.opid AND  \n" +
                "					c.eqpid = b.eqpid AND  \n" +
                "					c.deletedAt IS NULL) AND  \n" +
                "	       a.deletedAt IS NULL AND b.deletedAt IS NULL ;  \n" +
                "  \n" +
                "        INSERT INTO workorder_operation_equipment_dataelement  \n" +
                "        (woid,eqpid,opid,woopid,dataElementID,displayorder,createdAt,createdBy,isDeleted)  \n" +
                "	SELECT a.woID,a.eqpid,a.opid,a.woopid,b.dataElementID,b.displayOrder,fun_DatetimetoUTCDateTime() `createdAt`,a.createdBy, a.isDeleted  \n" +
                "	FROM workorder_operation_equipment a JOIN  equipment_dataelement  b  \n" +
                "	 ON a.eqpid = b.eqpid AND a.deletedAt IS NULL AND b.deletedAt IS NULL  \n" +
                "	 AND b.dataelementID IN (SELECT dataElementID FROM dataelement WHERE dataelement_use_at IN ('Both', 'Operation'))  \n" +
                "	WHERE a.woid = pwoID AND a.opid IN(SELECT DISTINCT(val) FROM temp) AND  \n" +
                "		NOT EXISTS (SELECT 'Y' FROM workorder_operation_equipment_dataelement c  \n" +
                "				WHERE c.woid = a.woid AND  \n" +
                "				      c.opid = a.opid AND  \n" +
                "				      c.woopid = a.woopid AND  \n" +
                "				      c.eqpid = a.eqpid AND  \n" +
                "				      c.dataElementID = b.dataElementID  AND  \n" +
                "				      c.deletedAt IS NULL) AND  \n" +
                "	       a.deletedAt IS NULL AND b.deletedAt IS NULL ;  \n" +
                "	UPDATE workorder SET updatedby=puserID, isOperationsVerified=0,  \n" +
                "			updatedat= fun_DatetimetoUTCDateTime() WHERE woid=pwoID;  \n" +
                "  \n" +
                "  \n" +
                "	/* copy all op master folder to wo op level */  \n" +
                "	/* if already added folder for woOPID then no need to copy in case of added single single op from wo op page */  \n" +
                "	INSERT INTO generic_folder  \n" +
                "	(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "	`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`)  \n" +
                "	SELECT  gf.gencFolderName, ( SELECT woopt1.woOPID FROM workorder_operation woopt1 WHERE woopt1.deletedAt IS NULL  \n" +
                " 					AND woopt1.woID = pwoID AND woopt1.opID = gf.refTransID) refTransID ,  \n" +
                "	NULL, 'workorder_operation' gencFileOwnerType, gf.roleId, gf.refParentId,  \n" +
                "	0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, puserID createdBy, gf.gencFolderID copyGencFolderID ,  \n" +
                " 	gf.refTransID refCopyTransID, gf.gencFileOwnerType refCopyGencFileOwnerType  \n" +
                "	FROM generic_folder gf  \n" +
                "	WHERE gf.refTransID IN ( SELECT * FROM temp_newAddedOpIDList )  \n" +
                "	AND gf.gencFileOwnerType = 'operations'  \n" +
                "	AND gf.entityID = -1  \n" +
                "    AND gf.isRecycle = 0  \n" +
                "	AND gf.deletedAt IS NULL ;  \n" +
                "  \n" +
                "	# update refParentId - parent folder for work order each operation  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_woOPIDs;  \n" +
                "  \n" +
                "		 CREATE TEMPORARY TABLE temp_woOPIDs AS  \n" +
                "		 SELECT DISTINCT refTransID  \n" +
                "		 FROM generic_folder WHERE deletedAt IS NULL  \n" +
                "		 AND gencFileOwnerType = 'workorder_operation'  \n" +
                "		 AND refTransID IN (SELECT woopt3.woOPID FROM workorder_operation woopt3  \n" +
                "					WHERE woopt3.deletedAt IS NULL  \n" +
                "					AND woopt3.woID = pwoID  \n" +
                "					AND woopt3.opID IN ( SELECT * FROM temp_newAddedOpIDList )  \n" +
                "				  ) ;  \n" +
                "  \n" +
                "		 SELECT COUNT(*) FROM temp_woOPIDs INTO totWoOPIDs;  \n" +
                "  \n" +
                "		 WHILE i < totWoOPIDs DO  \n" +
                "  \n" +
                "		 	SET t_lv_woOPID = NULL;  \n" +
                "		 	SELECT * INTO t_lv_woOPID FROM temp_woOPIDs LIMIT i,1 ;  \n" +
                "  \n" +
                "			 UPDATE generic_folder gf1,  \n" +
                "			 	(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "			 		FROM generic_folder a WHERE a.refTransID = t_lv_woOPID  \n" +
                "			 		AND a.gencFileOwnerType = 'workorder_operation' AND a.deletedAt IS NULL  \n" +
                "			 	) gf2  \n" +
                "			 	SET gf1.refParentId = gf2.gencFolderID  \n" +
                "			 WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "			 AND gf1.refTransID = t_lv_woOPID  \n" +
                "			 AND gf1.gencFileOwnerType = 'workorder_operation' AND gf1.deletedAt IS NULL ;  \n" +
                "  \n" +
                "		 SET i = i + 1;  \n" +
                "		 END WHILE;  \n" +
                "  \n" +
                "	/* END of copy doc case */  \n" +
                "	/** Start Set trackby serial no for new Operations ****/  \n" +
                "    SELECT IFNULL((SELECT opNumber  \n" +
                "					FROM workorder_operation  \n" +
                "					Where woID = pwoID  \n" +
                "					AND isDeleted = 0  \n" +
                "					AND isTrackBySerialFromWOOP = 1) , 0) INTO opNumberFromTrackBySerial;  \n" +
                "    IF opNumberFromTrackBySerial > 0 THEN  \n" +
                "		UPDATE workorder_operation wo  \n" +
                "		SET wo.isTrackBySerialNo = 1,  \n" +
                "			updatedBy = puserID,  \n" +
                "            updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "            updateByRoleId = puserRoleId  \n" +
                "			WHERE wo.woID = pwoID  \n" +
                "			AND wo.isDeleted = 0  \n" +
                "			AND wo.opNumber > opNumberFromTrackBySerial  \n" +
                "			AND wo.qtyControl = 1;  \n" +
                "     END IF;  \n" +
                "	/** End Set trackby serial no for new Operations ****/  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_woOPIDs;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS t;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_newAddedOpIDList;  \n" +
                "  \n" +
                "	COMMIT;  \n" +
                "END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveWorkorderOperation`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveWorkorderOperation`(  \n" +
                "	IN pWOID INT(11),  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255);  \n" +
                "		SET @temp_Sproc_RetrieveWorkorderOperation = CONCAT(\"  \n" +
                "			SELECT woop.woOPID, woop.opID, woop.opName, woop.opNumber,  \n" +
                "            fun_getOperationNameByWOOPID(woop.woOPID) opFullName,  \n" +
                "			woop.opVersion,woop.isStopOperation,woop.isTerminated,  \n" +
                "			woop.opStatus, woop.colorCode, woop.tabLimitAtTraveler,  \n" +
                "			woop.qtyControl, woop.isTeamOperation, woop.isIssueQty,  \n" +
                "			woop.isRework, woop.isMoveToStock, woop.isTrackBySerialNo,  \n" +
                "			woop.isAllowFinalSerialMapping, woop.isLoopOperation,  \n" +
                "			woop.isPreProgrammingComponent,  \n" +
                "            (CASE WHEN woop.isFluxNotApplicable = 1 THEN 'NA'  \n" +
                "				  WHEN woop.isNoClean = 0 AND woop.isWaterSoluble = 1 THEN 'WS'  \n" +
                "                  WHEN woop.isNoClean = 1 AND woop.isWaterSoluble = 0 THEN 'NC'  \n" +
                "                  WHEN woop.isNoClean = 1 AND woop.isWaterSoluble = 1 THEN 'BOTH' ELSE 'NA'  END) fluxType,  \n" +
                "            woop.isPlacementTracking,  \n" +
                "			woop.isAllowMissingPartQty  , woop.isAllowBypassQty ,  \n" +
                "			woop.isEnablePreProgrammingPart ,  \n" +
                "            woop.isRequireMachineVerification,  \n" +
                "            woop.doNotReqApprovalForScan,  \n" +
                "            woop.addRefDesig,  \n" +
                "            woop.isRequireRefDesWithUMID,  \n" +
                "            woop.isStrictlyLimitRefDes,  \n" +
                "            woop.shortDescription,  \n" +
                "			fun_getOperationNameByWOOPID(woop.refLoopWOOPID) loopToOperationName,  \n" +
                "			fun_getGenericCategoryNameByID(woop.operationTypeID) operationType,  \n" +
                "			fun_getMountingTypeNameByID(woop.mountingTypeId) mountingType,  \n" +
                "			(CASE WHEN (`woop`.`qtyControl` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`qtyControl` = 1) THEN 'Yes' ELSE '' END) AS `qtyControlConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isIssueQty` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isIssueQty` = 1) THEN 'Yes' ELSE '' END) AS `isIssueQtyConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isTeamOperation` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isTeamOperation` = 1) THEN 'Yes' ELSE '' END) AS `isTeamOperationConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isRework` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isRework` = 1) THEN 'Yes' ELSE '' END) AS `isReworkConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isMoveToStock` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isMoveToStock` = 1) THEN 'Yes' ELSE '' END) AS `isMoveToStockConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isTrackBySerialNo` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isTrackBySerialNo` = 1) THEN 'Yes' ELSE '' END) AS `isTrackBySerialNoConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isAllowFinalSerialMapping` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isAllowFinalSerialMapping` = 1) THEN 'Yes' ELSE '' END) AS `isAllowFinalSerialMappingConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isLoopOperation` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isLoopOperation` = 1) THEN 'Yes' ELSE '' END) AS `isLoopOperationConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isPlacementTracking` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isPlacementTracking` = 1) THEN 'Yes' ELSE '' END) AS `isPlacementTrackingConvertedValue`,  \n" +
                "			(CASE WHEN woop.isFluxNotApplicable = 1 THEN 'Not Applicable'  \n" +
                "				  WHEN woop.isNoClean = 0 AND woop.isWaterSoluble = 1 THEN 'Water-Soluble'  \n" +
                "                  WHEN woop.isNoClean = 1 AND woop.isWaterSoluble = 0 THEN 'No-Clean'  \n" +
                "                  WHEN woop.isNoClean = 1 AND woop.isWaterSoluble = 1 THEN 'Water-Soluble and No-Clean'END ) fluxTypeConvertedValue,  \n" +
                "			(CASE WHEN (`woop`.`isPreProgrammingComponent` = 0) THEN 'No'  \n" +
                "			WHEN (`woop`.`isPreProgrammingComponent` = 1) THEN 'Yes' ELSE '' END) AS `isPreProgrammingComponentConvertedValue`,  \n" +
                "			fun_getOpStatusNameByID(woop.opStatus) AS `opStatusConvertedValue`  ,  \n" +
                "			(CASE WHEN (`woop`.`isAllowMissingPartQty` = 0) THEN 'No'  \n" +
                "				WHEN (`woop`.`isAllowMissingPartQty` = 1) THEN 'Yes' ELSE '' END) AS `isAllowMissingPartQtyConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isAllowBypassQty` = 0) THEN 'No'  \n" +
                "				WHEN (`woop`.`isAllowBypassQty` = 1) THEN 'Yes' ELSE '' END) AS `isAllowBypassQtyConvertedValue` ,  \n" +
                "			(CASE WHEN (`woop`.`isEnablePreProgrammingPart` = 0) THEN 'No'  \n" +
                "				WHEN (`woop`.`isEnablePreProgrammingPart` = 1) THEN 'Yes' ELSE '' END) AS `isEnablePreProgrammingPartConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`addRefDesig` = 0) THEN 'No'  \n" +
                "				WHEN (`woop`.`addRefDesig` = 1) THEN 'Yes' ELSE '' END) AS `addRefDesigConvertedValue`  ,  \n" +
                "			(CASE WHEN (`woop`.`isRequireMachineVerification` = 'NA') THEN 'N/A'  \n" +
                "				WHEN (`woop`.`isRequireMachineVerification` = 'NO') THEN 'No'  \n" +
                "                WHEN (`woop`.`isRequireMachineVerification` = 'YES') THEN 'Yes' ELSE '' END) AS `isRequireMachineVerificationConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`doNotReqApprovalForScan` = 'NA') THEN 'N/A'  \n" +
                "				WHEN (`woop`.`doNotReqApprovalForScan` = 'NO') THEN 'No'  \n" +
                "                WHEN (`woop`.`doNotReqApprovalForScan` = 'YES') THEN 'Yes' ELSE '' END) AS `doNotReqApprovalForScanConvertedValue`  ,  \n" +
                "			(CASE WHEN (`woop`.`isRequireRefDesWithUMID` = 0) THEN 'No'  \n" +
                "				WHEN (`woop`.`isRequireRefDesWithUMID` = 1) THEN 'Yes' ELSE '' END) AS `isRequireRefDesWithUMIDConvertedValue`,  \n" +
                "			(CASE WHEN (`woop`.`isStrictlyLimitRefDes` = 0) THEN 'No'  \n" +
                "				WHEN (`woop`.`isStrictlyLimitRefDes` = 1) THEN 'Yes' ELSE '' END) AS `isStrictlyLimitRefDesConvertedValue`  \n" +
                "			FROM `workorder_operation` woop  \n" +
                "			WHERE woop.`deletedAt` IS NULL and woop.woID=\",pWOID);  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"opNumber ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveWorkorderOperation,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveWorkorderOperation,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "        set @SQLStatement2 = CONCAT(\"select woOPID,refDesig From workorder_operation_refdesig wor Where wor.woID = \",pWOID,\" and wor.isDeleted = 0\");  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "        EXECUTE query1;  \n" +
                "        DEALLOCATE PREPARE query1;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 21-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5676,'2.00','V1',' User Story 39458: Operation Master: Improvement Points Suggested By Client. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5676:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-12-2021 *********************************** */
                "DROP function IF EXISTS `fun_convertUOM`;  \n" +
                "CREATE FUNCTION `fun_convertUOM`(  \n" +
                "	pFromUOM INT(11),  \n" +
                "	pToUOM INT(11),  \n" +
                "	pFromValue DECIMAL(28,8)  \n" +
                ") RETURNS decimal(28,8)  \n" +
                "BEGIN  \n" +
                "	DECLARE vConvertValue DECIMAL(28,8);  \n" +
                "	DECLARE vFromUnitBaseUnitValue DECIMAL(28,8);  \n" +
                "	DECLARE vToUnitBaseUnitValue DECIMAL(28,8);  \n" +
                "	DECLARE vConvertValueIntoBasedValue DECIMAL(28,8);  \n" +
                "	DECLARE vFromMeasurementTypeID INT;  \n" +
                "	DECLARE vToMeasurementTypeID INT;  \n" +
                "  \n" +
                "	IF (pFromUOM = pToUOM) THEN  \n" +
                "		SET vConvertValue = pFromValue;  \n" +
                "	ELSE  \n" +
                "		SELECT measurementTypeID,baseUnitConvertValue INTO vFromMeasurementTypeID,vFromUnitBaseUnitValue FROM uoms WHERE isdeleted =0 AND id = pFromUOM;  \n" +
                "		SELECT measurementTypeID,baseUnitConvertValue INTO vToMeasurementTypeID,vToUnitBaseUnitValue FROM uoms WHERE isdeleted = 0 AND id = pToUOM;  \n" +
                "  \n" +
                "		IF (vFromMeasurementTypeID = vToMeasurementTypeID) THEN  \n" +
                "		/*	SELECT baseUnitConvertValue INTO  FROM uoms WHERE id = pFromUOM AND isdeleted = 0;  \n" +
                "			SELECT baseUnitConvertValue INTO  FROM uoms WHERE id = pToUOM AND isdeleted  = 0;          */  \n" +
                "			SET vConvertValueIntoBasedValue = ROUND((pFromValue / vFromUnitBaseUnitValue),8);  \n" +
                "			SET vConvertValue = ROUND(vConvertValueIntoBasedValue * vToUnitBaseUnitValue,8);  \n" +
                "		ELSE  \n" +
                "			SET vConvertValue = 0;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	RETURN ROUND(vConvertValue,8);  \n" +
                "END;  \n" +
                "DROP function IF EXISTS `fun_convertUOMForUOMList`;  \n" +
                "CREATE FUNCTION `fun_convertUOMForUOMList`(  \n" +
                "	pFromUOM INT(11),  \n" +
                "	pToUOM INT(11),  \n" +
                "	pFromValue DECIMAL(18,8)  \n" +
                ") RETURNS float  \n" +
                "BEGIN  \n" +
                "	DECLARE vConvertValue FLOAT;  \n" +
                "  \n" +
                "	IF (pFromUOM = pToUOM) THEN  \n" +
                "		SET vConvertValue = pFromValue;  \n" +
                "	ELSE  \n" +
                "		SET vConvertValue = (pFromValue / (SELECT baseUnitConvertValue FROM uoms WHERE id = pFromUOM AND isdeleted = 0 )) * (SELECT baseUnitConvertValue FROM uoms WHERE id = pToUOM AND isdeleted = 0);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	RETURN vConvertValue;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5677,'2.00','V1',' Tune Function fun_convertUOM fun_convertUOMForUOMList - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5677:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetLineItemAvailableStock`;  \n" +
                "CREATE PROCEDURE `Sproc_GetLineItemAvailableStock`(  \n" +
                "	pconsolidateID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "      CREATE TEMPORARY TABLE IF NOT EXISTS tempStockDet AS  \n" +
                "        SELECT cp.componentID FROM component_packagingalias cp  LEFT JOIN component c ON c.packaginggroupID=cp.aliasgroupid  \n" +
                "LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate rml ON rml.mfgpnid=c.id  \n" +
                "WHERE rml.consolidateid=pconsolidateID AND rml.isdeleted=0  \n" +
                "UNION  \n" +
                "SELECT mfgpnid AS componentID FROM rfq_consolidated_mfgpn_lineitem_alternate  \n" +
                "WHERE consolidateid=pconsolidateID AND isdeleted=0;  \n" +
                "	 SELECT SUM(Availablestock)AS availableStock FROM vu_deducted_allocation_available_stock  \n" +
                " WHERE refcompid IN (  \n" +
                "	 SELECT componentID FROM tempStockDet  \n" +
                "	 );  \n" +
                "	 DROP temporary TABLE tempStockDet;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5678,'2.00','V1',' drop VIEW vu_availablestocks as no need of it instead of that use vu_deducted_allocation_available_stock and after drop change SP  Sproc_GetLineItemAvailableStock- DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5678:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 21-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetSalesorderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 and vuss.blanketPOOption=2 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				vuss.blanketPOOption,  \n" +
                "				vuss.blanketPOOptionText,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToReturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount ,  \n" +
                "				vuss.rmaNumber,vuss.isDebitedByCustomer, vuss.debitedByCustText,  \n" +
                "				vuss.rmaOrgPONumber,vuss.orgSalesOrderID,vuss.isReworkRequired,  \n" +
                "				vuss.reworkReqText, vuss.reworkPONumber,vuss.custOrgPOLineNumber \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToReturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'' OR rmaNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''' OR rmaNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "    IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsRmaPO = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isRmaPO = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-12-2021 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5679,'2.00','V1',' Task 39510: Manage kit list global points and filter changes - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5679:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-12-2021 *********************************** */
                "drop view vu_salesorder_shipped_summary;  \n" +
                "DROP procedure IF EXISTS `Sys_DB_FindKeywordInDB`;  \n" +
                "CREATE PROCEDURE `Sys_DB_FindKeywordInDB`(  \n" +
                "	IN ptblName VARCHAR(5000),  \n" +
                "	IN pcolumnName VARCHAR(5000),  \n" +
                "	IN prefColumnName VARCHAR(5000) ,  \n" +
                "    IN pviewNameforMISReport VARCHAR(5000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE dbName VARCHAR(1000);  \n" +
                "	SELECT DATABASE() INTO dbName;  \n" +
                "	IF (ptblName IS NOT NULL) THEN  \n" +
                "		SET @whereClause4 = NULL;  \n" +
                "		IF (prefColumnName IS NOT NULL) THEN  \n" +
                "			SET @whereClause4 = '';  \n" +
                "			SET @whereClause4 = CONCAT(@whereClause4, \" AND LOWER(REFERENCED_COLUMN_NAME) = '\", LOWER(prefColumnName) ,\"'\");  \n" +
                "		END IF;  \n" +
                "		IF (@whereClause4 IS NULL) THEN  \n" +
                "			SET @SQLStatement4 = CONCAT(\"SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE LOWER(REFERENCED_TABLE_SCHEMA) = '\",LOWER(dbName),\"' AND LOWER(REFERENCED_TABLE_NAME) = '\", LOWER(ptblName) ,\"';\");  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement4 = CONCAT(\"SELECT * FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE WHERE LOWER(REFERENCED_TABLE_SCHEMA) = '\",LOWER(dbName),\"' AND LOWER(REFERENCED_TABLE_NAME) = '\", LOWER(ptblName) ,\"'\",@whereClause4, \";\");  \n" +
                "		END IF;  \n" +
                "		PREPARE query4 FROM @SQLStatement4;  \n" +
                "		EXECUTE query4;  \n" +
                "		DEALLOCATE PREPARE query4;  \n" +
                "	END IF;  \n" +
                "	IF (pcolumnName IS NOT NULL) THEN  \n" +
                "		SET @orderBy5 = \"ORDER BY table_name\";  \n" +
                "		SET @SQLStatement5 = CONCAT(\"SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE LOWER(table_schema) = '\",LOWER(dbName),\"' AND LOWER(column_name) = '\", LOWER(pcolumnName) ,\"'\", @orderBy5, \";\");  \n" +
                "		PREPARE query5 FROM @SQLStatement5;  \n" +
                "		EXECUTE query5;  \n" +
                "		DEALLOCATE PREPARE query5;  \n" +
                "	END IF;  \n" +
                "	IF (ptblName IS NOT NULL OR pcolumnName IS NOT NULL) THEN  \n" +
                "		/* check in sp or function */  \n" +
                "		SET @orderBy1 = \"ORDER BY ROUTINE_NAME\";  \n" +
                "		SET @whereClause1 = NULL;  \n" +
                "		SET @whereClause11 = NULL;  \n" +
                "		SET @whereClause12 = NULL;  \n" +
                "		IF (ptblName IS NOT NULL) THEN  \n" +
                "			SET @whereClause11 = '';  \n" +
                "			SET @whereClause11 = CONCAT(@whereClause11, \" LOWER(ROUTINE_DEFINITION) LIKE '%\", LOWER(ptblName), \"%'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pcolumnName IS NOT NULL) THEN  \n" +
                "			SET @whereClause12 = '';  \n" +
                "			SET @whereClause12 = CONCAT(@whereClause12, \" LOWER(ROUTINE_DEFINITION) LIKE '%\", LOWER(pcolumnName), \"%'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (@whereClause11 IS NOT NULL AND @whereClause12 IS NOT NULL) THEN  \n" +
                "			SET @whereClause1 = CONCAT(@whereClause11, \" OR\" ,@whereClause12);  \n" +
                "		ELSEIF (@whereClause11 IS NULL AND @whereClause12 IS NOT NULL) THEN  \n" +
                "			SET @whereClause1 = @whereClause12;  \n" +
                "		ELSEIF (@whereClause11 IS NOT NULL AND @whereClause12 IS NULL) THEN  \n" +
                "			SET @whereClause1 = @whereClause11;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ( \",@whereClause1,\" ) AND LOWER(ROUTINE_SCHEMA) = '\",LOWER(dbName),\"'\",@orderBy1,\";\");  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		/* check in trigger */  \n" +
                "		SET @orderBy2 = \"ORDER BY trigger_name\";  \n" +
                "		SET @whereClause2 = NULL;  \n" +
                "		SET @whereClause21 = NULL;  \n" +
                "		SET @whereClause22 = NULL;  \n" +
                "  \n" +
                "		IF (ptblName IS NOT NULL) THEN  \n" +
                "			SET @whereClause21 = '';  \n" +
                "			SET @whereClause21 = CONCAT(@whereClause21, \" LOWER(ACTION_statement) LIKE '%\", LOWER(ptblName), \"%'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pcolumnName IS NOT NULL) THEN  \n" +
                "			SET @whereClause22 = '';  \n" +
                "			SET @whereClause22 = CONCAT(@whereClause22, \" LOWER(ACTION_statement) LIKE '%\", LOWER(pcolumnName), \"%'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (@whereClause21 IS NOT NULL AND @whereClause22 IS NOT NULL) THEN  \n" +
                "			SET @whereClause2 = CONCAT(@whereClause21, \" OR\" ,@whereClause22);  \n" +
                "		ELSEIF (@whereClause21 IS NULL AND @whereClause22 IS NOT NULL) THEN  \n" +
                "			SET @whereClause2 = @whereClause22;  \n" +
                "		ELSEIF (@whereClause21 IS NOT NULL AND @whereClause22 IS NULL) THEN  \n" +
                "			SET @whereClause2 = @whereClause21;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"SELECT * FROM INFORMATION_SCHEMA.triggers WHERE ( \",@whereClause2,\" ) AND LOWER(trigger_SCHEMA) = '\",LOWER(dbName),\"'\", @orderBy2, \";\");  \n" +
                "  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		/* check in view */  \n" +
                "		SET @orderBy3 = \"ORDER BY TABLE_NAME\";  \n" +
                "		SET @whereClause3 = NULL;  \n" +
                "		SET @whereClause31 = NULL;  \n" +
                "		SET @whereClause32 = NULL;  \n" +
                "  \n" +
                "		IF (ptblName IS NOT NULL) THEN  \n" +
                "			SET @whereClause31 = '';  \n" +
                "			SET @whereClause31 = CONCAT(@whereClause31, \" LOWER(VIEW_DEFINITION) LIKE '%\", LOWER(ptblName), \"%'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pcolumnName IS NOT NULL) THEN  \n" +
                "			SET @whereClause32 = '';  \n" +
                "			SET @whereClause32 = CONCAT(@whereClause32, \" LOWER(VIEW_DEFINITION) LIKE '%\", LOWER(pcolumnName), \"%'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (@whereClause31 IS NOT NULL AND @whereClause32 IS NOT NULL) THEN  \n" +
                "			SET @whereClause3 = CONCAT(@whereClause31, \" OR\" ,@whereClause32);  \n" +
                "		ELSEIF (@whereClause31 IS NULL AND @whereClause32 IS NOT NULL) THEN  \n" +
                "			SET @whereClause3 = @whereClause32;  \n" +
                "		ELSEIF (@whereClause31 IS NOT NULL AND @whereClause32 IS NULL) THEN  \n" +
                "			SET @whereClause3 = @whereClause31;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET @SQLStatement3 = CONCAT(\"SELECT * FROM INFORMATION_SCHEMA.VIEWS WHERE ( \",@whereClause3,\" ) AND LOWER(table_SCHEMA) = '\",LOWER(dbName),\"'\", @orderBy3, \";\");  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "        select * from chart_rawdata_category where  lower(dbViewName) = lower(pviewNameforMISReport);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                "DROP procedure IF EXISTS `Sproc_RetrieveChartRawDataCatByAccessRole`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveChartRawDataCatByAccessRole`(  \n" +
                "	IN pRoleID INT(11)  ,  \n" +
                "	IN pSelectedChartRawDataCatID INT(11)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	SELECT `chartRawDataCatID`, `name`, `dbViewName`  \n" +
                "	FROM chart_rawdata_category  \n" +
                "	WHERE isdeleted = 0  \n" +
                "	AND chartRawDataCatID IN (SELECT chartRawDataCatID FROM chart_rawdata_category_access_role  \n" +
                "				   WHERE isdeleted = 0 AND roleID = pRoleID)  \n" +
                "  \n" +
                "	UNION  \n" +
                "  \n" +
                "	SELECT `chartRawDataCatID`, `name`, `dbViewName`  \n" +
                "	FROM chart_rawdata_category  \n" +
                "	WHERE isdeleted = 0  \n" +
                "	AND chartRawDataCatID = pSelectedChartRawDataCatID ;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 21-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5680,'2.00','V1',' ADDED new Para in Sys_DB_FindKeywordInDB,Tune Sproc_RetrieveChartRawDataCatByAccessRole, drop view vu_salesorder_shipped_summary  - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5680:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-12-2021 *********************************** */
                "CREATE or replace VIEW `vu_gettotalprice` AS  \n" +
                "    SELECT  \n" +
                "        `rq`.`qtyID` AS `qtyID`,  \n" +
                "        IFNULL(`cqty`.`consolidatedQty`,  \n" +
                "                `rl`.`requestQty`) AS `requestQty`,  \n" +
                "        SUM(((`rq`.`unitPrice` * `ra`.`qpa`) * (CASE  \n" +
                "            WHEN (`c`.`connecterTypeID` = -(2)) THEN IFNULL(`ra`.`numOfPosition`, 1)  \n" +
                "            ELSE 1  \n" +
                "        END))) AS `TotalExtendedPrice`,  \n" +
                "        SUM((`rq`.`unitPrice` * (CASE  \n" +
                "            WHEN (`c`.`connecterTypeID` = -(2)) THEN IFNULL(`ra`.`numOfPosition`, 1)  \n" +
                "            ELSE 1  \n" +
                "        END))) AS `TotalUnitPrice`,  \n" +
                "        (SUM(((`rq`.`unitPrice` * `ra`.`qpa`) * (CASE  \n" +
                "            WHEN (`c`.`connecterTypeID` = -(2)) THEN IFNULL(`ra`.`numOfPosition`, 1)  \n" +
                "            ELSE 1  \n" +
                "        END))) * IFNULL(`rl`.`requestQty`, 0)) AS `TotalAssemblyPrice`,  \n" +
                "        SUM(((IFNULL(`rq`.`quoteQty`, 0) - ((`rl`.`requestQty` * IFNULL(`ra`.`qpa`, 1)) * (CASE  \n" +
                "            WHEN (`c`.`connecterTypeID` = -(2)) THEN IFNULL(`ra`.`numOfPosition`, 1)  \n" +
                "            ELSE 1  \n" +
                "        END))) * IFNULL(`rq`.`unitPrice`, 0))) AS `TotalExcessPrice`,  \n" +
                "        `rl`.`rfqPriceGroupId` AS `rfqPriceGroupId`,  \n" +
                "        `rl`.`requestQty` AS `qty`,  \n" +
                "        `pg`.`name` AS `priceGroupName`,  \n" +
                "        `rl`.`rfqAssyID` AS `rfqAssyid`  \n" +
                "    FROM  \n" +
                "        (((((`rfq_consolidate_mfgpn_lineitem_quantity` `rq`  \n" +
                "        JOIN `rfq_assy_quantity` `rl` ON (((`rq`.`qtyID` = `rl`.`id`)  \n" +
                "            AND (`rl`.`isDeleted` = 0))))  \n" +
                "        JOIN `rfq_consolidated_mfgpn_lineitem` `ra` ON (((`rq`.`consolidateID` = `ra`.`id`)  \n" +
                "            AND (`ra`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `c` ON ((`c`.`id` = `rq`.`componentID`)))  \n" +
                "        LEFT JOIN `rfq_consolidate_price_group_mfgpn_lineitem_quantity` `cqty` ON ((`cqty`.`refConsolidateLineitemQtyId` = `rq`.`id`)))  \n" +
                "        LEFT JOIN `rfq_price_group` `pg` ON ((`pg`.`id` = `rl`.`rfqPriceGroupId`)))  \n" +
                "    WHERE  \n" +
                "        ((`rq`.`isDeleted` = 0)  \n" +
                "            AND (`ra`.`isPurchase` = 1))  \n" +
                "    GROUP BY `rq`.`qtyID` , `rl`.`requestQty` , `rl`.`rfqPriceGroupId` , `pg`.`name`,`cqty`.`consolidatedQty`;  \n" +
                /* **************************** Add Script Version -> 15-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5681,'2.00','V1',' Resolve grouping issue from view vu_gettotalprice - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5681:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-12-2021 *********************************** */
                "CREATE OR REPLACE VIEW `vu_getrestrictedparts` AS  \n" +
                "    SELECT  \n" +
                "        (CASE  \n" +
                "            WHEN (`rla`.`mfgPNID` <> IFNULL(`d`.`id`, 0)) THEN IFNULL(`d`.`mfgPN`, `c`.`mfgPN`)  \n" +
                "            ELSE `c`.`mfgPN`  \n" +
                "        END) AS `mfgPN`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`rla`.`mfgPNID` <> IFNULL(`d`.`id`, 0)) THEN IFNULL(`d`.`id`, `c`.`id`)  \n" +
                "            ELSE `c`.`id`  \n" +
                "        END) AS `mfgPNID`,  \n" +
                "        `rla`.`consolidateID` AS `consolidateID`,  \n" +
                "        `rl`.`rfqAssyID` AS `rfqAssyID`  \n" +
                "    FROM  \n" +
                "        (((`rfq_consolidated_mfgpn_lineitem_alternate` `rla`  \n" +
                "        JOIN `rfq_consolidated_mfgpn_lineitem` `rl` ON (((`rl`.`id` = `rla`.`consolidateID`)  \n" +
                "            AND (`rl`.`deletedAt` IS NULL))))  \n" +
                "        JOIN `component` `c` ON (((`c`.`id` = `rla`.`mfgPNID`)  \n" +
                "            AND (`c`.`deletedAt` IS NULL))))  \n" +
                "        LEFT JOIN `component` `d` ON ((`c`.`packaginggroupID` = `d`.`packaginggroupID`)))  \n" +
                "    WHERE  \n" +
                "        ((`rla`.`isDeleted` = 0)  \n" +
                "            AND ((IFNULL(`rla`.`restrictUseInBOMStep`, 0) = 1)  \n" +
                "            OR (`rla`.`restrictUseWithPermissionStep` = 0)  \n" +
                "            OR (`rla`.`restrictUsePermanentlyStep` = 0)  \n" +
                "            OR (`c`.`restrictPackagingUsePermanently` = 1)  \n" +
                "            OR (`rla`.`restrictUseInBOMExcludingAliasStep` = 1)  \n" +
                "            OR (`rla`.`restrictUseInBOMExcludingAliasWithPermissionStep` = 1)  \n" +
                "            OR ((IFNULL(`rla`.`customerApproval`, 'A') <> 'A')  \n" +
                "            AND (`c`.`restrictPackagingUseWithpermission` = 1))))  \n" +
                "    GROUP BY `rla`.`mfgPN` , `rla`.`mfgPNID` , `rla`.`consolidateID` , `rl`.`rfqAssyID` , (CASE  \n" +
                "        WHEN (`rla`.`mfgPNID` <> IFNULL(`d`.`id`, 0)) THEN IFNULL(`d`.`mfgPN`, `c`.`mfgPN`)  \n" +
                "        ELSE `c`.`mfgPN`  \n" +
                "    END) , (CASE  \n" +
                "        WHEN (`rla`.`mfgPNID` <> IFNULL(`d`.`id`, 0)) THEN IFNULL(`d`.`id`, `c`.`id`)  \n" +
                "        ELSE `c`.`id`  \n" +
                "    END);  \n" +
                /* **************************** Add Script Version -> 21-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5682,'2.00','V1','Resolve grouping issue from view vu_getrestrictedparts - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5682:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-12-2021 *********************************** */
                "ALTER ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "SELECT `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,`a`.`salesOrderId` AS `Sales Order ID`,`a`.`salesOrderNumber` AS `Sales Order`,`a`.`poNumber` AS `Po Number`,`a`.`poDate` AS `Po Date`,`a`.`customerID` AS `Customer ID`,`a`.`contactPersonID` AS `ContactPerson ID`,`a`.`shippingMethodID` AS `ShippingMethod ID`,`a`.`status` AS `Sales Order Status`,`a`.`revision` AS `Revision`,`a`.`shippingComment` AS `Shipping Comment`,`a`.`termsID` AS `Terms ID`,`a`.`soDate` AS `So Date`,`a`.`partID` AS `PartID`,`a`.`PIDCode` AS `Assy ID`,`a`.`mfgPN` AS `Assy Name`,`a`.`rev` AS `Assy Revision`,`a`.`nickName` AS `NickName`,`a`.`liveVersion` AS `liveVersion`,`a`.`mfgPNDescription` AS `AssyDescr`,`a`.`isCustomPart` AS `isCustomPart`,`a`.`qty` AS `PO Qty`,`a`.`ShippedQty` AS `Shipped Qty`,`a`.`shippingQty` AS `shippingQty`,`a`.`companyName` AS `Company Name`,`a`.`internalPO` AS `internalPO`,`a`.`mfgCode` AS `mfgCode`,`a`.`fullName` AS `Full Name`,`a`.`gencCategoryCode` AS `GencCategory Code`,`a`.`isCancle` AS `isCancle`,`a`.`cancleReason` AS `cancleReason`,`a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,`a`.`materialDueDate` AS `materialDueDate`,`a`.`shippingDate` AS `shippingDate`,`a`.`prcNumberofWeek` AS `prcNumberofWeek`,`a`.`remark` AS `remark`,`a`.`price` AS `price`,`a`.`mrpQty` AS `mrpQty`,`a`.`kitQty` AS `kitQty`,`a`.`isHotJob` AS `isHotJob`,`a`.`RoHSStatusID` AS `RoHSStatusID`,`a`.`RoHSName` AS `RoHSName`,`a`.`rohsIcon` AS `RohsIcon`,`a`.`lineID` AS `lineID`,`a`.`mfgcodeID` AS `mfgcodeID`,`a`.`manufacturerName` AS `manufacturerName`,(IFNULL(`a`.`qty`,0) - IFNULL(`a`.`ShippedQty`,0)) AS `Balanced Due Qty`,(CASE WHEN (`a`.`isCancle` = 1) THEN 'Canceled' WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed' ELSE 'In Progress' END) AS `Status`,`a`.`modifyDate` AS `modifyDate`,`a`.`createdDate` AS `createdDate`,`a`.`soModifiedBy` AS `soModifiedBy`,`a`.`soCreatedBy` AS `soCreatedBy`,`a`.`updatedbyRole` AS `updatedbyRole`,`a`.`createdbyRole` AS `createdbyRole`,`a`.`deletedbyRole` AS `deletedbyRole`,`a`.`salesOrderDetailId` AS `SalesOrderDetailId`,`a`.`releasedWorkorder` AS `releasedWorkorder`,`a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,`a`.`kitnumber` AS `kitnumber`,`a`.`isSkipKitCreation` AS `isSkipKitCreation`,`a`.`partDescription` AS `partDescription`,`a`.`custPOLineNumber` AS `custPOLineNumber`,`a`.`freeOnBoardId` AS `Free On Board`,`a`.`intermediateShipmentId` AS `intermediateShipmentId`,`a`.`billingAddressID` AS `billingAddressID`,`a`.`shippingAddressID` AS `shippingAddressID`,`a`.`internalCommentSo` AS `internalCommentSo`,`a`.`internalComment` AS `internalComment`,`a`.`partCategory` AS `partCategory`,`a`.`serialNumber` AS `serialNumber`,`a`.`isBlanketPO` AS `isBlanketPO`,`a`.`blanketPOText` AS `blanketPOText`,`a`.`rmaNumber` AS `rmaNumber`,`a`.`isDebitedByCustomer` AS `isDebitedByCustomer`,`a`.`debitedByCustText` AS `debitedByCustText`,`a`.`rmaOrgPONumber` AS `rmaOrgPONumber`,`a`.`orgSalesOrderID` AS `orgSalesOrderID`,`a`.`isReworkRequired` AS `isReworkRequired`,`a`.`reworkReqText` AS `reworkReqText`,`a`.`reworkPONumber` AS `reworkPONumber`,`a`.`poRevision` AS `poRevision`,`a`.`partType` AS `partType`,(CASE WHEN (`a`.`isCancle` = 1) THEN -(1) ELSE `a`.`salesOrderDetStatus` END) AS `salesOrderDetStatus`,`a`.`completeStatusReason` AS `completeStatusReason`,`a`.`frequency` AS `frequency`,`a`.`refSODetID` AS `refSODetID`,`a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,`a`.`originalPODate` AS `originalPODate`,`a`.`isRmaPO` AS `isRmaPO`,`a`.`rmaPOText` AS `rmaPOText`,`a`.`isLegacyPO` AS `isLegacyPO`,`a`.`legacyPOText` AS `legacyPOText`,`a`.`originalPOQty` AS `originalPOQty`,`a`.`frequencyType` AS `frequencyType`,`a`.`assignQty` AS `assignQty`,`a`.`poRevisionDate` AS `poRevisionDate`,`a`.`releaseLevelComment` AS `releaseLevelComment`,`a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,`a`.`blanketPOOption` AS `blanketPOOption`,`a`.`blanketPOOptionText` AS `blanketPOOptionText` FROM (SELECT `sm`.`id` AS `salesOrderId`,`sm`.`salesOrderNumber` AS `salesOrderNumber`,`sm`.`poNumber` AS `poNumber`,`sm`.`poDate` AS `poDate`,`sm`.`customerID` AS `customerID`,`sm`.`contactPersonID` AS `contactPersonID`,`sm`.`shippingMethodID` AS `shippingMethodID`,`sm`.`status` AS `status`,`sm`.`revision` AS `revision`,`sm`.`shippingComment` AS `shippingComment`,`sm`.`termsID` AS `termsID`,`sm`.`soDate` AS `soDate`,`sm`.`billingAddressID` AS `billingAddressID`,`sm`.`shippingAddressID` AS `shippingAddressID`,`sm`.`freeOnBoardId` AS `freeOnBoardId`,`sm`.`intermediateShipmentId` AS `intermediateShipmentId`,`sm`.`internalComment` AS `internalCommentSo`,`sm`.`serialNumber` AS `serialNumber`,`sm`.`isBlanketPO` AS `isBlanketPO`,`sm`.`rmaNumber` AS `rmaNumber`,`sm`.`isDebitedByCustomer` AS `isDebitedByCustomer`,(CASE WHEN (`sm`.`isDebitedByCustomer` = 1) THEN 'Yes' ELSE 'No' END) AS `debitedByCustText`,`sm`.`orgPONumber` AS `rmaOrgPONumber`,`sm`.`orgSalesOrderID` AS `orgSalesOrderID`,`sm`.`isReworkRequired` AS `isReworkRequired`,(CASE WHEN (`sm`.`isReworkRequired` = 1) THEN 'Yes' ELSE 'No' END) AS `reworkReqText`,`sm`.`reworkPONumber` AS `reworkPONumber`,(CASE WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes' ELSE 'No' END) AS `blanketPOText`,`sm`.`poRevision` AS `poRevision`,`FUN_GETUSERNAMEBYID`(`sm`.`updatedBy`) AS `soModifiedBy`,`FUN_GETUSERNAMEBYID`(`sm`.`createdBy`) AS `soCreatedBy`,`FUN_GETROLEBYID`(`sm`.`updateByRoleId`) AS `updatedbyRole`,`FUN_GETROLEBYID`(`sm`.`createByRoleId`) AS `createdbyRole`,`FUN_GETROLEBYID`(`sm`.`deleteByRoleId`) AS `deletedbyRole`,`sm`.`createdAt` AS `createdDate`,`sm`.`updatedAt` AS `modifyDate`,`co`.`PIDCode` AS `PIDCode`,`co`.`mfgPN` AS `mfgPN`,`co`.`rev` AS `rev`,`co`.`nickName` AS `nickName`,`co`.`liveVersion` AS `liveVersion`,`co`.`mfgPNDescription` AS `mfgPNDescription`,`co`.`isCustom` AS `isCustomPart`,`co`.`partType` AS `partType`,`co`.`mfgcodeID` AS `mfgcodeID`,CONCAT('(',`cu`.`mfgCode`,') ',`cu`.`mfgName`) AS `companyName`,`cu`.`mfgCode` AS `mfgCode`,`cu`.`isCompany` AS `internalPO`,`mg`.`mfgName` AS `manufacturerName`,CONCAT(`cc`.`firstName`,' ',`cc`.`lastName`) AS `fullName`,`gc`.`gencCategoryCode` AS `gencCategoryCode`,`co`.`RoHSStatusID` AS `RoHSStatusID`,`roh`.`name` AS `RoHSName`,`roh`.`rohsIcon` AS `rohsIcon`,`a`.`qty` AS `qty`,`a`.`id` AS `salesOrderDetailId`,`a`.`kitNumber` AS `kitnumber`,`a`.`isSkipKitCreation` AS `isSkipKitCreation`,`a`.`partDescription` AS `partDescription`,`a`.`partID` AS `partID`,`a`.`isCancle` AS `isCancle`,`a`.`isHotJob` AS `isHotJob`,`a`.`cancleReason` AS `cancleReason`,`a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,`sh`.`shippingDate` AS `shippingDate`,`wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,`a`.`materialDueDate` AS `materialDueDate`,`a`.`prcNumberofWeek` AS `prcNumberofWeek`,`a`.`remark` AS `remark`,`a`.`price` AS `price`,`a`.`mrpQty` AS `mrpQty`,`a`.`kitQty` AS `kitQty`,`a`.`shippingQty` AS `shippingQty`,`a`.`custPOLineNumber` AS `custPOLineNumber`,`a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,`a`.`completeStatusReason` AS `completeStatusReason`,`a`.`internalComment` AS `internalComment`,`a`.`partCategory` AS `partCategory`,`a`.`lineID` AS `lineID`,`sm`.`originalPODate` AS `originalPODate`,`a`.`originalPOQty` AS `originalPOQty`,`sm`.`isRmaPO` AS `isRmaPO`,`sm`.`poRevisionDate` AS `poRevisionDate`,`a`.`releaseLevelComment` AS `releaseLevelComment`,`soh`.`assignQty` AS `assignQty`,`a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,(CASE WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes' ELSE 'NO' END) AS `rmaPOText`,`sm`.`isLegacyPO` AS `isLegacyPO`,(CASE WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes' ELSE 'NO' END) AS `legacyPOText`,(CASE WHEN (`a`.`frequency` = 1) THEN 'Every' WHEN (`a`.`frequency` = 2) THEN 'First' WHEN (`a`.`frequency` = 3) THEN 'Last' ELSE '' END) AS `frequency`,(CASE WHEN (`a`.`frequencyType` = 1) THEN 'Release' WHEN (`a`.`frequencyType` = 2) THEN 'Shipment' ELSE '' END) AS `frequencyType`,`a`.`refSODetID` AS `refSODetID`,`a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,IFNULL((CASE WHEN (`sm`.`blanketPOOption` = 2) THEN `sqt`.`BPOShippedQty` ELSE `sq`.`ShippedQty` END),0) AS `ShippedQty`,`k`.`releasedWorkorder` AS `releasedWorkorder`,`k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,`sm`.`blanketPOOption` AS `blanketPOOption`,(CASE WHEN (`sm`.`blanketPOOption` = 1) THEN 'Use This Blanket PO# for All Releases' WHEN (`sm`.`blanketPOOption` = 2) THEN 'Link Future PO(s) to This Blanket PO' WHEN (`sm`.`blanketPOOption` = 3) THEN 'Use Blanket PO# and Release#' ELSE '' END) AS `blanketPOOptionText` FROM (((((((((((((`salesordermst` `sm` LEFT JOIN `salesorderdet` `a` ON(((`sm`.`id` = `a`.`refSalesOrderID`) AND (`a`.`isDeleted` = 0) AND (`sm`.`isDeleted` = 0)))) LEFT JOIN `mfgcodemst` `cu` ON(((`sm`.`customerID` = `cu`.`id`) AND (`cu`.`isDeleted` = 0)))) LEFT JOIN `component` `co` ON((`a`.`partID` = `co`.`id`))) LEFT JOIN `mfgcodemst` `mg` ON(((`mg`.`id` = `co`.`mfgcodeID`) AND (`mg`.`isDeleted` = 0)))) LEFT JOIN `rfq_rohsmst` `roh` ON(((`roh`.`id` = `co`.`RoHSStatusID`) AND (`roh`.`isDeleted` = 0)))) LEFT JOIN `customer_contactperson` `cc` ON(((`sm`.`contactPersonID` = `cc`.`personId`) AND (`cc`.`isDeleted` = 0)))) LEFT JOIN `genericcategory` `gc` ON(((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`) AND (`gc`.`isDeleted` = 0)))) LEFT JOIN (SELECT IFNULL(SUM(`sbt`.`ShippedQty`),0) AS `BPOShippedQty`,`sbt`.`refBlanketPOID` AS `blanketPOSoDetID` FROM (SELECT `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,`sdd`.`refBlanketPOID` AS `refBlanketPOID`,IFNULL(SUM(`cpd`.`shipQty`),0) AS `ShippedQty` FROM ((`customer_packingslip_det` `cpd` JOIN `customer_packingslip` `cps` ON((`cps`.`id` = `cpd`.`refCustPackingSlipID`))) JOIN `salesorderdet` `sdd` ON(((`sdd`.`id` = `cpd`.`refSalesorderDetid`) AND (`sdd`.`isDeleted` = 0)))) WHERE ((`cps`.`transType` = 'P') AND (`cpd`.`isDeleted` = 0)) GROUP BY `cpd`.`refSalesorderDetid`,`sdd`.`refBlanketPOID`) `sbt` GROUP BY `sbt`.`refBlanketPOID`) `sqt` ON((`sqt`.`blanketPOSoDetID` = `a`.`id`))) LEFT JOIN (SELECT `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,IFNULL(SUM(`cpd`.`shipQty`),0) AS `ShippedQty` FROM (`customer_packingslip_det` `cpd` JOIN `customer_packingslip` `cps` ON((`cps`.`id` = `cpd`.`refCustPackingSlipID`))) WHERE ((`cps`.`transType` = 'P') AND (`cpd`.`isDeleted` = 0)) GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON((`sq`.`refSalesorderDetid` = `a`.`id`))) LEFT JOIN (SELECT `x`.`salesOrderDetailID` AS `salesOrderDetailID`,IF((COUNT(1) > 0),1,0) AS `wosalesOrderDetail` FROM `workorder_salesorder_details` `x` WHERE (`x`.`isDeleted` = 0) GROUP BY `x`.`salesOrderDetailID`) `wsd` ON((`wsd`.`salesOrderDetailID` = `a`.`id`))) LEFT JOIN (SELECT `ssm`.`sDetID` AS `sDetID`,MIN(IFNULL(`ssm`.`requestedDockDate`,`ssm`.`shippingDate`)) AS `shippingDate` FROM `salesshippingmst` `ssm` WHERE (`ssm`.`isDeleted` = 0) GROUP BY `ssm`.`sDetID`) `sh` ON((`sh`.`sDetID` = `a`.`id`))) LEFT JOIN (SELECT SUM(`sod`.`qty`) AS `assignQty`,`sod`.`refBlanketPOID` AS `refsalesOrderID` FROM `salesorderdet` `sod` WHERE (`sod`.`isDeleted` = 0) GROUP BY `sod`.`refBlanketPOID`) `soh` ON((`soh`.`refsalesOrderID` = `a`.`id`))) LEFT JOIN (SELECT `s`.`salesOrderDetID` AS `salesOrderDetID`,`s`.`refAssyId` AS `refAssyId`,GROUP_CONCAT(DISTINCT ' ',`wo`.`woNumber` SEPARATOR ',') AS `releasedWorkorder`,GROUP_CONCAT(DISTINCT ' ',CONCAT(`wo`.`woID`,'###',`wo`.`woNumber`) SEPARATOR ',') AS `releasedWorkorderNmberAndId` FROM (`salesorder_plan_detailsmst` `s` LEFT JOIN `workorder` `wo` ON((`wo`.`woID` = `s`.`woID`))) GROUP BY `s`.`salesOrderDetID`,`s`.`refAssyId`) `k` ON((`k`.`salesOrderDetID` = `a`.`id`))) WHERE (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** Add Script Version -> 22-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5683,'2.00','V1','Alter view-vu_salesorder_updatedlist_report-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5683:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-12-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_umidcofcdetail`;  \n" +
                "CREATE VIEW `vu_umidcofcdetail` AS  \n" +
                "    SELECT  \n" +
                "        `cspd`.`refComponentSidStockID` AS `refComponentSidStockID`,  \n" +
                "        `mcm`.`mfgCode` AS `mfgCode`,  \n" +
                "        `ps`.`packingSlipNumber` AS `packingSlipNumber`,  \n" +
                "        `mcm`.`mfgName` AS `mfgName`,  \n" +
                "        `ps`.`id` AS `packingSlipId`,  \n" +
                "        `ps`.`mfgCodeID` AS `packingSlipSupplierId`,  \n" +
                "        `g`.`cofcCount` AS `cofcCount`  \n" +
                "    FROM  \n" +
                "        ((((`component_sid_stock_packing_detail` `cspd`  \n" +
                "        JOIN `packing_slip_material_receive_det` `psd` FORCE INDEX (PRIMARY) ON (((`cspd`.`refPackingSlipDetailID` = `psd`.`id`)  \n" +
                "            AND (`psd`.`isDeleted` = 0))))  \n" +
                "        JOIN `packing_slip_material_receive` `ps` FORCE INDEX (PRIMARY) ON (((`psd`.`refPackingSlipMaterialRecID` = `ps`.`id`)  \n" +
                "            AND (`ps`.`isDeleted` = 0))))  \n" +
                "        JOIN `mfgcodemst` `mcm` ON (((`mcm`.`id` = `ps`.`mfgCodeID`)  \n" +
                "            AND (`mcm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `vu_cofcdocumentcount` `g` ON (((`g`.`refTransID` = `ps`.`id`)  \n" +
                "            AND (`g`.`gencFileOwnerType` = 'packing_slip'))));  \n" +
                /* **************************** Add Script Version -> 22-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5684,'2.00','V1',' Resolve Group by issue from view vu_umidcofcdetail-DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5684:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(10),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchPoSoPsInv VARCHAR(50),  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pReceiveStatus VARCHAR(255),  \n" +
                "    IN pPackingSlipFromDate DATE,  \n" +
                "    IN pPackingSlipToDate DATE,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pMaterialReceiptFromDate DATE,  \n" +
                "    IN pMaterialReceiptToDate DATE,  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pPostingStatusFilter VARCHAR(20),  \n" +
                "    IN pPSComments VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"  \n" +
                "									  \" )  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "	IF (pReceiveStatus IS NOT NULL AND pReceiveStatus != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (\",pReceiveStatus,\")\");  \n" +
                "    END IF;  \n" +
                "    IF pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "    END IF;  \n" +
                "    IF pMaterialReceiptFromDate IS NOT NULL AND pMaterialReceiptToDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (receiptDate BETWEEN '\",pMaterialReceiptFromDate,\"' AND '\",pMaterialReceiptToDate,\"')\");  \n" +
                "	ELSEIF pMaterialReceiptFromDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (receiptDate = '\",pMaterialReceiptFromDate,\"')\");  \n" +
                "    END IF;  \n" +
                "    IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" and lockStatus IN (\", pLockStatusFilter ,\")\");  \n" +
                "	END IF;  \n" +
                "    IF(pPostingStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" and packingSlipModeStatus IN (\", pPostingStatusFilter ,\")\");  \n" +
                "	END IF;  \n" +
                "    IF (pPSComments IS NOT NULL AND pPSComments != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \"  \n" +
                "				AND (internalRemark LIKE '%\",pPSComments,\"%'  \n" +
                "                OR poComment LIKE '%\",pPSComments,\"%'  \n" +
                "                OR shippingComment LIKE '%\",pPSComments,\"%')  \n" +
                "                \");  \n" +
                "    END IF;  \n" +
                "	IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = refPackingSlipNumberForInvoice  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" like '%\", pPaymentNumber, \"%' \") ELSE CONCAT(\" = \", pPaymentNumber ,\" \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"  \n" +
                "			SELECT  *  \n" +
                "			FROM	(  \n" +
                "					SELECT 		p.id,  \n" +
                "							p.systemId,  \n" +
                "							p.poNumber,  \n" +
                "                            p.poDate,  \n" +
                "							p.refPurchaseOrderID poId,  \n" +
                "							p.mfgCodeID,  \n" +
                "							p.supplierSONumber,  \n" +
                "                            p.soDate,  \n" +
                "							p.packingSlipNumber,  \n" +
                "							p.packingSlipDate,  \n" +
                "							p.invoiceNumber,  \n" +
                "							p.invoiceDate,  \n" +
                "							p.creditMemoNumber,  \n" +
                "							p.creditMemoDate,  \n" +
                "							p.debitMemoNumber,  \n" +
                "							p.debitMemoDate,  \n" +
                "							p.receiptDate,  \n" +
                "							p.description,  \n" +
                "							p.billToAddress,  \n" +
                "							p.shipToAddress,  \n" +
                "							p.poVersion,  \n" +
                "							p.isDeleted,  \n" +
                "							p.receiptType,  \n" +
                "							p.`status`,  \n" +
                "							p.packingSlipModeStatus,  \n" +
                "							p.chequeNumber,  \n" +
                "							p.chequeDate,  \n" +
                "							p.chequeAmount,  \n" +
                "							p.applyDate,  \n" +
                "							p.refParentCreditDebitInvoiceno,  \n" +
                "							p.refPackingSlipNumberForInvoice,  \n" +
                "							p.invoiceTotalDue,  \n" +
                "							p.isTariffInvoice,  \n" +
                "							p.bankName,  \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "							fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "							m.mfgCode supplierCode,  \n" +
                "							fun_GetFormattedMfgCode(m.mfgCode , m.mfgName,\",v_mfgNameFormat,\") supplierCodeName,  \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "									WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) packingSlipModeStatusValue,  \n" +
                "							ps.id invoiceId,  \n" +
                "							ps.invoiceNumber refInvoiceNumber,  \n" +
                "                            ps.lockStatus refInvoiceLockStatus,  \n" +
                "							ps.invoiceDate refInvoiceDate,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.status = 'I' THEN 'Investigate'  \n" +
                "									WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
                "									WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
                "									WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "									WHEN p.status = 'P' THEN 'Fully Paid'  \n" +
                "                                    WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) statusValue,  \n" +
                "							IFNULL(g.cnt,0) packingSlipDocCount,  \n" +
                "							psm.TotalLines,  \n" +
                "							psm.PendingLines,  \n" +
                "                            psm.AcceptedWithDeviationLines,  \n" +
                "                            psm.RejectedLines,  \n" +
                "                            psm.AcceptedLines,  \n" +
                "                            p.lockStatus,  \n" +
                "                            (case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "								when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "                                when p.lockStatus = 'LC' then 'Locked'  \n" +
                "                                else null end  \n" +
                "                            ) lockStatusValue,  \n" +
                "                            fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                            p.isCustConsigned,  \n" +
                "                            CASE WHEN p.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "                            p.CustomerID,  \n" +
                "                            fun_GetFormattedMfgCode(mc.mfgcode, mc.mfgName, \",v_mfgNameFormat,\") customerName,  \n" +
                "                            p.isNonUMIDStock,  \n" +
                "                            CASE WHEN p.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                            p.internalRemark,  \n" +
                "                            pom.poComment,  \n" +
                "                            pom.shippingComment  \n" +
                "					FROM		packing_slip_material_receive p  \n" +
                "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	refPackingSlipMaterialRecID,  \n" +
                "										sum(totalLines) as TotalLines,  \n" +
                "                                        sum(pendingLines) as PendingLines,  \n" +
                "                                        sum(acceptedWithDeviationLines) as AcceptedWithDeviationLines,  \n" +
                "                                        sum(rejectedLines) as RejectedLines,  \n" +
                "                                        sum(acceptedLines) as AcceptedLines  \n" +
                "								FROM 		packing_slip_material_receive_det psm  \n" +
                "								WHERE 		isDeleted = 0  \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id  \n" +
                "                    join mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "                    LEFT JOIN mfgcodemst mc ON mc.id = p.CustomerID  \n" +
                "					LEFT JOIN purchase_order_mst pom ON pom.id = p.refPurchaseOrderID AND pom.isDeleted = 0  \n" +
                "					WHERE p.receiptType = 'P' and p.isDeleted = false ) a  \n" +
                "			WHERE \", v_advanceFilterWhereClause  \n" +
                "		);  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "    /* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " END;  \n" +
                /* **************************** New Script -> 23-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(30),  \n" +
                "	IN pMfgCodeIds LONGTEXT,  \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearch TINYINT,  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pInvoiceIds LONGTEXT,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvoiceFromDate DATE,  \n" +
                "    IN pInvoiceToDate DATE,  \n" +
                "    IN pMarkedForRefundStatus LONGTEXT,  \n" +
                "    IN pInvoiceComments VARCHAR(1000),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pSelectedDateType VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentDate DATE;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
                "			SELECT 		p.id,  \n" +
                "					p.systemId,  \n" +
                "					p.poNumber,  \n" +
                "                    p.poDate,  \n" +
                "                    p.refPurchaseOrderID poId,  \n" +
                "					p.mfgCodeID,  \n" +
                "					p.supplierSONumber,  \n" +
                "                    p.soDate,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
                "					p.packingSlipDate,  \n" +
                "					p.invoiceNumber,  \n" +
                "                    p.lockStatus invoiceLockStatus,  \n" +
                "					p.invoiceDate,  \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
                "					p.creditMemoNumber,  \n" +
                "                    p.lockStatus creditMemoLockStatus,  \n" +
                "					p.creditMemoDate,  \n" +
                "					p.debitMemoNumber,  \n" +
                "                    p.refSupplierCreditMemoNumber,  \n" +
                "                    p.lockStatus debitMemoLockStatus,  \n" +
                "					p.debitMemoDate,  \n" +
                "					p.receiptDate,  \n" +
                "					p.description,  \n" +
                "					p.billToAddress,  \n" +
                "					p.shipToAddress,  \n" +
                "					p.poVersion,  \n" +
                "					p.isDeleted,  \n" +
                "					p.receiptType,  \n" +
                "					p.`status`,  \n" +
                "					p.applyDate,  \n" +
                "					p.refParentCreditDebitInvoiceno,  \n" +
                "					p.refPackingSlipNumberForInvoice,  \n" +
                "					p.invoiceTotalDue,  \n" +
                "					p.isTariffInvoice,  \n" +
                "					p.creditMemoType,  \n" +
                "                    (  \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
                "								'Invoice Credit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MC' THEN  \n" +
                "								'MISC Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'RC' THEN  \n" +
                "								'RMA Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'ID' THEN  \n" +
                "								'Invoice Debit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MD' THEN  \n" +
                "								'MISC Debit Memo'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
                "								'Invoice'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
                "								'MISC Invoice'  \n" +
                "						END  \n" +
                "					) subTypeValue,  \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                    m.mfgName supplierName,  \n" +
                "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
                "					m.mfgCode supplierCodeName,  \n" +
                "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
                "					pg.packingSlipDocCount,  \n" +
                "					pd.itemReceived,  \n" +
                "					pd.otherChargesItemReceived,  \n" +
                "					pd.itemDisapproved,  \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
                "					ps.status parentInvoiceStatus,  \n" +
                "					ps.invoiceNumber refInvoiceNumber,  \n" +
                "                    ps.lockStatus refInvoiceLockStatus,  \n" +
                "					ps.creditMemoType parentCreditMemoType,  \n" +
                "					pd.totalExtendedAmount,  \n" +
                "                    pd.totalDiscount,  \n" +
                "					pe.totalCreditAmount,  \n" +
                "					pe.totalDebitAmount,  \n" +
                "					(  \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
                "					) amountToPay,  \n" +
                "                    pd.totalExtendedReceivedPrice,  \n" +
                "					pd.packingDetailNote,  \n" +
                "					pd.approveLineCount,  \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
                "											p.debitMemoDate  \n" +
                "										WHEN p.receiptType = 'C' THEN  \n" +
                "											p.creditMemoDate  \n" +
                "										ELSE p.invoiceDate  \n" +
                "									end), payTerm.termsDays, p.paymentTermsID) paymentDueDate,  \n" +
                "					g.gencCategoryName paymentTermName,  \n" +
                " 					m.paymentTermsID paymentTermsID,  \n" +
                "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
                "                    p.paymentTermsID invPaymentTermsID,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
                "					psm.packingSlipModeStatus,  \n" +
                "                    psPay.paymentDate,  \n" +
                "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
                "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
                "					p.invoiceRequireManagementApproval,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
                "								'Yes'  \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
                "								'No'  \n" +
                "						END  \n" +
                "					) invoiceRequireManagementApprovalValue,  \n" +
                "					p.invoiceApprovalStatus,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
                "								'Approved'  \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
                "								'Pending'  \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
                "								'N/A'  \n" +
                "						END  \n" +
                "					) invoiceApprovalStatusValue,  \n" +
                "					p.invoiceApprovedBy,  \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.invoiceApprovalDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') invoiceApprovalDate,  \n" +
                "					p.invoiceApprovalComment,  \n" +
                "					p.internalRemark,  \n" +
                "                    p.remark,  \n" +
                "					p.lockStatus,  \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "						when p.lockStatus = 'LC' then 'Locked'  \n" +
                "						else null end  \n" +
                "					) lockStatusValue,  \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                    case when p.receiptType = 'I' then  \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
                "					h1.refType as haltRefType,  \n" +
                "                    h1.status as haltStatus,  \n" +
                "                    (CASE WHEN h1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltStatusText,  \n" +
                "                    (CASE  \n" +
                "							WHEN h1.status = 'H' THEN  \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReason,  \n" +
                "                    psh1.refType as haltRefTypeRefInv,  \n" +
                "                    psh1.status as haltStatusRefInv,  \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInvText,  \n" +
                "                    (CASE  \n" +
                "							WHEN psh1.status = 'H' THEN  \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInv,  \n" +
                "                    p.markedForRefund,  \n" +
                "                    (case when p.markedForRefund = 0 then 'N/A'  \n" +
                "						else case when ifnull(psPay.refundAmount,0) = 0 then  \n" +
                "										'Waiting for Refund'  \n" +
                "								when ifnull(psPay.refundAmount,0) <> 0 and ifnull(psPay.refundAmount,0) <> ifnull(p.markedForRefundAmt,0)  then  \n" +
                "										'Partially Refunded'  \n" +
                "								when ifnull(psPay.refundAmount,0) = ifnull(p.markedForRefundAmt,0) then  \n" +
                "										'Fully Refunded'  \n" +
                "								else '' end  \n" +
                "						end  \n" +
                "					) markedForRefundValue,  \n" +
                "                    p.markedForRefundAmt  \n" +
                "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
                "							gFiles.gencFileOwnerType,  \n" +
                "							gFiles.refTransID,  \n" +
                "							gFiles.entityID  \n" +
                "						FROM genericfiles gFiles  \n" +
                "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
                "						and gFiles.entityID in (-13,-15,-16)  \n" +
                "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
                "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
                "																		WHEN p.receiptType = 'D' THEN -16  \n" +
                "																		ELSE -13  \n" +
                "																	END)  \n" +
                "				and psDoc.refTransID = p.id  \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
                "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where h2.refTransId = h1.refTransId  \n" +
                " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
                "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
                "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where psh1.refTransId = h2.refTransId  \n" +
                " 											  and h2.refType = 'SINV'  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
                "            left join (  \n" +
                "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
                "				FROM 	vu_genericfilescount g  \n" +
                "				WHERE 	g.entityID = -14  \n" +
                "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
                "            ) pg on pg.refTransID = psm.id  \n" +
                "			left join (  \n" +
                "							select 	a.refPackingSlipMaterialRecID,  \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
                "								sum(a.itemReceived) itemReceived,  \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
                "								sum(a.itemDisapproved) itemDisapproved,  \n" +
                "								sum(a.approveLineCount) approveLineCount,  \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
                "                                sum(discount) totalDiscount,  \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
                "							from 	(  \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
                "										psm.packingSlipSerialNumber,  \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
                "										extendedPrice,  \n" +
                "                                        discount,  \n" +
                "										extendedReceivedPrice  \n" +
                "									FROM 	packing_slip_material_receive_det psm  \n" +
                "									WHERE 	psm.isDeleted = 0  \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
                "								) a  \n" +
                "							group by a.refPackingSlipMaterialRecID  \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
                "				left join (select b.refPackingslipInvoiceID,  \n" +
                "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount,  \n" +
                "                                    max(case when a.refPaymentMode = 'P' then a.paymentDate else null end) paymentDate  \n" +
                "							  from packingslip_invoice_payment a  \n" +
                "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "							 where a.refPaymentMode IN ('P','RR')  \n" +
                "							   and a.isPaymentVoided = 0  \n" +
                "							   and b.isDeleted = 0  \n" +
                "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
                "				left join (  \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
                "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
                "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
                "							from 		packing_slip_material_receive ps  \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
                "                            left join (select b.refPackingslipInvoiceID,  \n" +
                "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "										 where a.refPaymentMode IN ('P','RR')  \n" +
                "										   and b.isPaymentVoided = 0  \n" +
                "										   and b.isDeleted = 0  \n" +
                "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
                "								  where ps.receiptType in ('C','D')  \n" +
                "									and ps.isDeleted = 0  \n" +
                "									and pd.isDeleted = 0  \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
                "				WHERE p.`status` in ('PE','I','A','P','PP') and p.isDeleted = 0 \",  \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pInvPaymentTermsIds IS NOT NULL AND pInvPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pInvPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and p.lockStatus IN (\", pLockStatusFilter ,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "      IF(pInvoiceComments IS NOT NULL AND pInvoiceComments != '')THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and (p.internalRemark LIKE '%\",pInvoiceComments,\"%' OR p.remark LIKE '%\",pInvoiceComments,\"%')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = p.id  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefundStatus IS NOT NULL and pMarkedForRefundStatus != '' THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.markedForRefundValue in (\",pMarkedForRefundStatus,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
                "													or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		END IF;  \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
                "													   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
                "		IF pIsExactSearch = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
                "				SELECT 1  \n" +
                "				  FROM packing_slip_material_receive_det x  \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "    EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*,  \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "				round(c.paidAmount,2) totalPaidAmount,  \n" +
                "                round(c.refundAmount,2) totalRefundAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5685,'2.00','V1',' User Story 37379: Add some filters in Advance Filter - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5685:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierInvoicePayment`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pSupplierIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "    IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "    IN pRefPaymentMode VARCHAR(2),  \n" +
                "    IN pLockStatusFilter VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause,\" and lockStatus IN (\", pLockStatusFilter ,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "			EXISTS (select 1  \n" +
                "					   from packing_slip_material_receive psd  \n" +
                "					   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "					  where psd.isDeleted = 0  \n" +
                "						and pdet.refPayementid = inv.id  \n" +
                "						AND psd.invoiceNumber = \"',pInvoiceNumber,'\"  \n" +
                "				)'  \n" +
                "		);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"  \n" +
                "		SELECT		inv.id,  \n" +
                "				inv.systemId,  \n" +
                "				inv.mfgcodeID,  \n" +
                "				fun_getMfgCodeByID(inv.mfgcodeID) supplier,  \n" +
                "				fun_getMfgCodeAndNameByID(inv.mfgcodeID) supplierCodeName,  \n" +
                "				inv.isPaymentVoided,  \n" +
                "				case 	when inv.isPaymentVoided = 0 then  \n" +
                "						'Paid'  \n" +
                "					else  \n" +
                "						'Voided'  \n" +
                "				end isPaymentVoidedConvertedValue,  \n" +
                "				inv.voidPaymentReason,  \n" +
                "				inv.refVoidedPaymentNumber,  \n" +
                "                inv.refVoidedPaymentId,  \n" +
                "                (select c.lockStatus from packingslip_invoice_payment c  \n" +
                "					where c.id = inv.refVoidedPaymentId) refVoidedPaymentLockStatus,  \n" +
                "				inv.paymentNumber,  \n" +
                "				inv.bankName,  \n" +
                "				inv.bankAccountNo,  \n" +
                "				inv.paymentType,  \n" +
                "				inv.bankAccountMasID,  \n" +
                "				gc.gencCategoryName paymentMethod,  \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "				inv.paymentDate,  \n" +
                "				invdet.invoiceAmount,  \n" +
                "				inv.paymentAmount,  \n" +
                "				inv.payToAddress payToAddress,  \n" +
                "				inv.payToName,  \n" +
                "                inv.refGencTransModeID,  \n" +
                "                gtm.modeName transactionModeName,  \n" +
                "                gtm.systemGenerated systemGeneratedTransactionMode,  \n" +
                "				inv.accountReference,  \n" +
                "				inv.remark,  \n" +
                "                inv.depositBatchNumber,  \n" +
                "                inv.offsetAmount,  \n" +
                "                inv.acctId,  \n" +
                "                fun_getChartOfAccountsCodeNameByID(inv.acctId) coaName,  \n" +
                "				fun_getUserNameByID(inv.createdBy) createdby,  \n" +
                "				fun_getUserNameByID(inv.updatedBy) updatedby,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,  \n" +
                "				fun_getRoleByID(inv.createByRoleId) createdbyRole,  \n" +
                "				inv.lockStatus,  \n" +
                "				(case when inv.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "					when inv.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "					when inv.lockStatus = 'LC' then 'Locked'  \n" +
                "					else null end  \n" +
                "				) lockStatusValue,  \n" +
                "				fun_getUserNameByID(inv.lockedBy) lockByName,  \n" +
                "				fun_getRoleByID(inv.lockedByRoleId) lockedByRoleName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM	packingslip_invoice_payment inv  \n" +
                "		INNER JOIN 	genericcategory gc ON inv.paymentType = gc.gencCategoryID  \n" +
                "        left join generic_transmode_mst gtm ON gtm.id = inv.refGencTransModeID  \n" +
                "		left JOIN (  \n" +
                "					SELECT 		pid.refPayementid,	SUM(psmd.extendedPrice) invoiceAmount  \n" +
                "					FROM 		packingslip_invoice_payment_det pid  \n" +
                "					LEFT JOIN 	packing_slip_material_receive_det psmd ON psmd.refPackingSlipMaterialRecID = pid.refPackingslipInvoiceID AND psmd.isDeleted = 0  \n" +
                "					WHERE 		pid.isDeleted = 0  \n" +
                "                       and		pid.isPaymentVoided = 0  \n" +
                "					GROUP BY 	pid.refPayementid  \n" +
                "				) invdet ON invdet.refPayementid = inv.id  \n" +
                "		WHERE 		inv.isDeleted = 0  \n" +
                "					AND inv.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "					AND gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveSupplierRMAList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierRMAList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchNumbers VARCHAR(50),  \n" +
                "	IN pSearchType VARCHAR(10),  \n" +
                "	IN pMfrPnId INT,  \n" +
                "     IN pRMAFromDate DATE,  \n" +
                "    IN pRMAToDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pAdvanceSearchNumbers IS NOT NULL) THEN  \n" +
                "		IF (pSearchType = 'contains') THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "												rmaNumber LIKE '%\", pAdvanceSearchNumbers, \"%'  \n" +
                "											OR 	packingSlipNumber LIKE '%\", pAdvanceSearchNumbers, \"%'  \n" +
                "											OR 	refCreditMemoNumber LIKE '%\", pAdvanceSearchNumbers, \"%'\"  \n" +
                "										  \" )  \n" +
                "									\");  \n" +
                "		ELSE  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "												rmaNumber = '\", pAdvanceSearchNumbers, \"'  \n" +
                "											OR 	packingSlipNumber = '\", pAdvanceSearchNumbers, \"'  \n" +
                "											OR 	refCreditMemoNumber = '\", pAdvanceSearchNumbers, \"'\"  \n" +
                "										  \" )  \n" +
                "									\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF pRMAFromDate IS NOT NULL AND pRMAToDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (rmaDate BETWEEN '\",pRMAFromDate,\"' AND '\",pRMAToDate,\"')\");  \n" +
                "	ELSEIF pRMAFromDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (rmaDate = '\",pRMAFromDate,\"')\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierRMAList = CONCAT(\"  \n" +
                "		SELECT	*  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		p.id,  \n" +
                "						p.systemId,  \n" +
                "						p.receiptType,  \n" +
                "						p.packingSlipModeStatus rmaModeStatus,  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "								WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
                "								WHEN p.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "								ELSE NULL  \n" +
                "							END  \n" +
                "						) rmaModeStatusValue,  \n" +
                "						p.`status`,  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN p.status = 'D' THEN 'Draft'  \n" +
                "								WHEN p.status = 'WS' THEN 'Waiting For Shipment'  \n" +
                "								WHEN p.status = 'WC' THEN 'Waiting for Credit Memo'  \n" +
                "								WHEN p.status = 'CR' THEN 'Credit Memo Received'  \n" +
                "								WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "                                WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
                "								WHEN p.status = 'P' THEN 'Paid'  \n" +
                "								ELSE NULL  \n" +
                "							END  \n" +
                "						) statusValue,  \n" +
                "						p.mfgCodeID,  \n" +
                "						fun_getMfgCodeByID(p.mfgCodeID) supplierCode,  \n" +
                "						fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCodeName,  \n" +
                "						p.poNumber rmaNumber,  \n" +
                "						p.poDate rmaDate,  \n" +
                "						p.packingSlipNumber,  \n" +
                "						p.packingSlipDate,  \n" +
                "						p.receiptDate shippedDate,  \n" +
                "						IFNULL(g.cnt,0) rmaDocCount,  \n" +
                "						psm.totalDetailLine itemReturn,  \n" +
                "						ps.id refCreditMemoId,  \n" +
                "						ps.creditMemoNumber refCreditMemoNumber,  \n" +
                "                        ps.lockStatus  refCreditMemoLockStatus,  \n" +
                "						ps.creditMemoDate refCreditMemoDate,  \n" +
                "						p.remark,  \n" +
                "						p.internalRemark,  \n" +
                "						p.shippingMethodId,  \n" +
                "						fun_getGenericCategoryCodeNameByID(p.shippingMethodId) shippingMethod,  \n" +
                "						p.carrierId,  \n" +
                "						fun_getGenericCategoryCodeNameByID(p.carrierId) carrier,  \n" +
                "						p.carrierAccountNumber,  \n" +
                "						p.shippingInsurance,  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN p.shippingInsurance = 1 THEN 'Yes'  \n" +
                "								WHEN p.shippingInsurance = 0 THEN 'No'  \n" +
                "								ELSE NULL  \n" +
                "							END  \n" +
                "						) shippingInsuranceValue,  \n" +
                "						p.rmaShippingAddress,  \n" +
                "						fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "						fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "						fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "						fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                        p.lockStatus,  \n" +
                "						(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "							when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "							when p.lockStatus = 'LC' then 'Locked'  \n" +
                "							else null end  \n" +
                "						) lockStatusValue,  \n" +
                "						fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "						fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "				FROM 		packing_slip_material_receive p  \n" +
                "				LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "				LEFT JOIN 	(  \n" +
                "							SELECT 		refPackingSlipMaterialRecID, COUNT(1) totalDetailLine  \n" +
                "							FROM 		packing_slip_material_receive_det psm  \n" +
                "							WHERE 		isDeleted = 0  \n" +
                "							GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "						) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "				LEFT JOIN vu_genericfilescount g ON g.refTransID = p.id  \n" +
                "						AND	g.gencFileOwnerType = 'supplier_rma' AND g.refTransID = p.id  \n" +
                "				WHERE 		p.receiptType = 'R' AND p.isDeleted = 0  \n" +
                "			) AS a  \n" +
                "		WHERE \", v_advanceFilterWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1=1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetriveSupplierRMAList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveSupplierRMAList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5686,'2.00','V1',' User Story 37379: Add some filters in Advance Filter - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5686:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderSummaryDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderSummaryDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "	IN ppostatus VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN pLockFilterStatus VARCHAR(50),  \n" +
                "    IN pPoPostingStatusFilter VARCHAR(20),  \n" +
                "    IN pPOComments VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(\"  \n" +
                "    SELECT (CASE WHEN(IFNULL((a.poCompletedLine * 100 / a.totalPOLines), 0)) > 100 THEN 100 ELSE IFNULL(round((a.poCompletedLine * 100 / a.totalPOLines), 2), 0) END) poCompletionPercentage, a.* FROM  \n" +
                "		( SELECT  pom.id,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.poDate,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				pom.termsID,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pom.status,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pom.serialNumber,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.carrierID,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				CASE WHEN pom.shippingInsurance=0 THEN 'No' ELSE 'Yes' END shippingInsuranceName,  \n" +
                "				pom.shippingInsurance,  \n" +
                "				pom.supplierAddress,  \n" +
                "				pom.shippingAddress,  \n" +
                "				pom.intermediateAddress,  \n" +
                "				CASE WHEN pom.isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPO,  \n" +
                "				pom.isBlanketPO,  \n" +
                "				m.mfgcode,  \n" +
                "				pom.poCompleteReason,  \n" +
                "				pom.poCompleteType,  \n" +
                "				pom.cancleReason,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				pom.poWorkingStatus,  \n" +
                "                pom.CancellationConfirmed,  \n" +
                "                CASE WHEN pom.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END CancellationConfirmedStatus,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='C') poCompletedLine,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='P') poPendingLine,  \n" +
                "				case when pom.poWorkingStatus='P' then 'In Progress' when  pom.poWorkingStatus='C' then 'Completed' else 'Canceled' end workingStatusName,  \n" +
                "				IFNULL(vgf.cnt, 0) poDocumentCount,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType!=4 and pod.refPurchaseOrderID=pom.id) totalItems,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType=4 and pod.refPurchaseOrderID=pom.id) totalOtherItems,  \n" +
                "				fun_getFOBById(pom.freeOnBoardId) freeOnBoard,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				(select sum((pod.qty * pod.price)+ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)) from purchase_order_det pod where pod.refPurchaseOrderID=pom.id and pod.isdeleted=0) totalAmount,  \n" +
                "				fun_getUserNameByID(pom.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pom.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pom.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pom.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "	            pom.isdeleted,  \n" +
                "                (SELECT COUNT(1) FROM purchase_order_det pod WHERE pod.isdeleted=0 and pod.refPurchaseOrderID=pom.id) totalPOLines,  \n" +
                "                (select id from packing_slip_material_receive where refPurchaseOrderID=pom.id and isdeleted=false order by receiptDate desc limit 1) packingSlipId,  \n" +
                "                ps.packingSlip,  \n" +
                "                ps.MaterialReceiptNumber,  \n" +
                "                pom.isCustConsigned,  \n" +
                "                CASE WHEN pom.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "                pom.customerID,  \n" +
                "                fun_GetFormattedMfgCode(pm.mfgcode, pm.mfgName, \",vMfgCodeFormat,\") customerName,  \n" +
                "                pom.isNonUMIDStock,  \n" +
                "                CASE WHEN pom.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                pom.lockStatus,  \n" +
                "				(case when pom.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "					when pom.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "					when pom.lockStatus = 'LC' then 'Locked'  \n" +
                "					else null end  \n" +
                "				) lockStatusValue,  \n" +
                "				fun_getUserNameByID(pom.lockedBy) lockByName,  \n" +
                "				fun_getRoleByID(pom.lockedByRoleId) lockedByRoleName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM purchase_order_mst pom JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0  \n" +
                "        LEFT JOIN LATERAL (SELECT id, refPurchaseOrderID FROM packing_slip_material_receive WHERE refPurchaseOrderID=pom.id AND isDeleted=0 LIMIT 1) AS psmr ON psmr.refPurchaseOrderID=pom.id  \n" +
                "		LEFT JOIN vu_genericfilescount vgf ON vgf.entityID = -20 AND vgf.refTransID = pom.id  \n" +
                "        LEFT JOIN mfgcodemst pm ON pm.id=pom.customerID and pm.isdeleted = 0  \n" +
                "         LEFT JOIN (select group_concat(distinct psmr.id, '@@@', psmr.packingSlipNumber order by psmr.packingSlipDate desc separator '\",v_GroupConcatSeparator,\"') as packingSlip,  \n" +
                "						group_concat(distinct psmr.packingSlipNumber order by psmr.packingSlipDate desc separator ', ') MaterialReceiptNumber,  \n" +
                "						psmr.refPurchaseOrderID  \n" +
                "                        from packing_slip_material_receive psmr  \n" +
                "						where psmr.receiptType='P' and psmr.isDeleted=false group by psmr.refPurchaseOrderID  \n" +
                "					) ps on ps.refPurchaseOrderID = pom.id ) a  \n" +
                "		WHERE a.isdeleted=0  \n" +
                "	\");  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and a.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and a.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (a.soNumber  like ''%',psearchposotext,'%'' OR a.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (a.soNumber  =''',psearchposotext,''' OR a.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pPOComments IS NOT NULL AND pPOComments != '')THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, \"  \n" +
                "				AND (a.shippingComment LIKE '%\",pPOComments,\"%'  \n" +
                "                OR a.poComment LIKE '%\",pPOComments,\"%')  \n" +
                "                \");  \n" +
                "    END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate>=''',pfromDate,''' and a.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and a.poWorkingStatus IN (\", ppostatus ,\")\"); -- FIND_IN_SET(a.poWorkingStatus,''', ppostatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' AND exists (select 1 from purchase_order_det pod where pod.refPurchaseOrderID = a.id and pod.isDeleted = 0 and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,')))');  \n" +
                "	END IF;  \n" +
                "    IF(pLockFilterStatus IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and a.lockStatus IN (\", pLockFilterStatus ,\")\"); -- FIND_IN_SET(a.lockStatus,''', pLockFilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "    IF(pPoPostingStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and a.status IN (\", pPoPostingStatusFilter ,\")\"); -- FIND_IN_SET(a.status,''', pPoPostingStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "    SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 23-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "    IN ppolinestatus VARCHAR(10),  \n" +
                "	IN ppostatus VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN ponlyOtherPart boolean,  \n" +
                "    IN pwithoutOtherPart boolean,  \n" +
                "    IN pisonlyPendingLines boolean,  \n" +
                "    IN pPOComments VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"  \n" +
                "		SELECT (CASE WHEN(IFNULL((a.totalReceivedQty * 100 / a.qty), 0)) > 100 THEN 100 ELSE IFNULL(round((a.totalReceivedQty * 100 / a.qty), 2), 0) END) poLineCompletionPercentage, a.* from  \n" +
                "		(SELECT  pod.id,  \n" +
                "				pom.id as refPurchaseOrderID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pod.mfgPartID,  \n" +
                "				pod.packagingID,  \n" +
                "				pod.supplierPartID,  \n" +
                "				pod.partDescription,  \n" +
                "				pod.pcbPerArray,  \n" +
                "				pod.rohsStatusID,  \n" +
                "				pod.internalRef,  \n" +
                "				pod.qty,  \n" +
                "				pod.price,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				(pod.qty * pod.price) extPrice,  \n" +
                "				pod.totalRelease,  \n" +
                "				pod.lineComment,  \n" +
                "				pod.lineID,  \n" +
                "				pod.supplierQuoteNumber,  \n" +
                "				pom.poDate,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				c.mfgPN,  \n" +
                "				c.pidCode,  \n" +
                "				c.unit,  \n" +
                "				c.iscustom,  \n" +
                "				c.partType,  \n" +
                "				rr.name AS rohsName,  \n" +
                "				rr.rohsIcon,  \n" +
                "				cp.name AS packagingName,  \n" +
                "				mc.mfgCode,  \n" +
                "				mc.mfgName,  \n" +
                "				mc.id As mfgcodeID,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.status,  \n" +
                "				pom.carrierID,  \n" +
                "				pom.poWorkingStatus,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Closed' else IFNULL(vups.poLineWorkingDisplayStatus,'Open') end poLineWorkingDisplayStatus,  \n" +
                "                case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatusDisplayStatus,  \n" +
                "				vups.totalReceivedQty,  \n" +
                "				vups.totalPendingQty,  \n" +
                "				vups.poLineCompleteReason,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Auto' else  vups.poLineCompleteType end poCompleteType,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				sc.mfgPN supplierPN,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.termsID,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pod.internalLineComment,  \n" +
                "				m.mfgcode as supplierMfgName,  \n" +
                "				fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,  \n" +
                "				(SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,  \n" +
                "				(ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,  \n" +
                "				fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, \",vMfgCodeFormat,\") mfgcodeName,  \n" +
                "				fun_getUserNameByID(pod.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pod.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pod.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pod.updateByRoleId) updatedbyRole,  \n" +
                "				(select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,  \n" +
                "				(select pold.promisedShipDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) promisedShipDate,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, FALSE) packingSlipDate,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, TRUE) packingSlipId,  \n" +
                "                c.custAssyPN ,  \n" +
                "                ps.packingSlip,  \n" +
                "                pod.isdeleted,  \n" +
                "                case when c.partType=4 and pom.poWorkingStatus='C' then 'C' else IFNULL(vups.poLineWorkingStatus,'P') end poLineWorkingStatus,  \n" +
                "                ps.MaterialReceiptNumber,  \n" +
                "                pod.isLineCustConsigned,  \n" +
                "                CASE WHEN pod.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "                pod.lineCustomerID,  \n" +
                "                fun_GetFormattedMfgCode(pm.mfgCode, pm.mfgName, \",vMfgCodeFormat,\") customerName,  \n" +
                "                m.mfgName as POSupplierName,  \n" +
                "                pod.isNonUMIDStock,  \n" +
                "                CASE WHEN pod.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                pom.lockStatus  \n" +
                "		FROM purchase_order_det pod  \n" +
                "		LEFT JOIN purchase_order_mst pom  ON pom.id=pod.refPurchaseOrderID and  pom.isdeleted=0  \n" +
                "		LEFT JOIN vu_purchaseorder_shipping_release vups on vups.refPurchaseOrderDetID= pod.id  \n" +
                "		LEFT JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN component c ON c.id=pod.mfgPartID  \n" +
                "		LEFT JOIN component sc on sc.id=pod.supplierPartID  \n" +
                "		LEFT JOIN mfgcodemst mc ON mc.id=c.mfgcodeID  \n" +
                "        LEFT JOIN mfgcodemst pm ON pm.id=pod.lineCustomerID  \n" +
                "		LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID  \n" +
                "		LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID  \n" +
                "        LEFT JOIN (select group_concat(distinct psmr.id, '@@@', psmr.packingSlipNumber order by psmr.packingSlipDate desc separator '\",v_GroupConcatSeparator,\"') as packingSlip,  \n" +
                "						group_concat(distinct psmr.packingSlipNumber order by psmr.packingSlipDate desc separator ', ') as MaterialReceiptNumber,  \n" +
                "                        psmr.refPurchaseOrderID, psmrd.refPurchaseOrderDetID  \n" +
                "                        from packing_slip_material_receive psmr  \n" +
                "							join packing_slip_material_receive_det psmrd  \n" +
                "								on psmrd.refPackingSlipMaterialRecID=psmr.id and psmrd.isDeleted=false  \n" +
                "						where psmr.receiptType='P' and psmr.isDeleted=false group by psmr.refPurchaseOrderID, psmrd.refPurchaseOrderDetID  \n" +
                "					) ps on ps.refPurchaseOrderID = pom.id and ps.refPurchaseOrderDetID=pod.id ) a  \n" +
                "		WHERE a.isdeleted=0  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  like ''%',psearchposotext,'%'' OR a.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  =''',psearchposotext,''' OR a.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate>=''',pfromDate,''' and a.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "    IF(ppolinestatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" and a.poLineWorkingStatus IN (\", ppolinestatus ,\")\");  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" and a.poWorkingStatus IN (\", ppostatus ,\")\");  \n" +
                "	END IF;  \n" +
                "    IF(pPOComments IS NOT NULL AND pPOComments != '')THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, \"  \n" +
                "				AND (a.shippingComment LIKE '%\",pPOComments,\"%'  \n" +
                "                OR a.partDescription LIKE '%\",pPOComments,\"%'  \n" +
                "                OR a.internalLineComment LIKE '%\",pPOComments,\"%'  \n" +
                "                OR a.lineComment LIKE '%\",pPOComments,\"%'  \n" +
                "                OR a.poComment LIKE '%\",pPOComments,\"%')  \n" +
                "                \");  \n" +
                "    END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.mfgPartID in (',ppartIds,') OR a.supplierPartID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "    IF(pwithoutOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType!=4');  \n" +
                "	END IF;  \n" +
                "    IF(ponlyOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType=4');  \n" +
                "	END IF;  \n" +
                "	IF(pisonlyPendingLines=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.poLineWorkingStatus=\"P\"');  \n" +
                "	END IF;  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5687,'2.00','V1',' User Story 37379: Add some filters in Advance Filter - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5687:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "CREATE TABLE kit_release_return_trans_history(  \n" +
                "                id INT NOT NULL AUTO_INCREMENT,  \n" +
                "                refPlanId INT NOT NULL,  \n" +
                "                salesOrderDetID INT,  \n" +
                "                woID INT,  \n" +
                "                refAssyId INT,  \n" +
                "                plannKitNumber INT,  \n" +
                "                releaseDate DATETIME,  \n" +
                "                releasedBy VARCHAR(255),  \n" +
                "                releaseStatus VARCHAR(10),  \n" +
                "                releasedNote VARCHAR(1000),  \n" +
                "                releaseKitNumber VARCHAR(100),  \n" +
                "                returnStatus VARCHAR(10),  \n" +
                "                returnDate DATETIME,  \n" +
                "                returnBy VARCHAR(255),  \n" +
                "                initiateReturnBy VARCHAR(255),  \n" +
                "                initiateReturnAt DATETIME,  \n" +
                "                createdBy VARCHAR(255) NOT NULL,  \n" +
                "                createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "                updatedBy VARCHAR(255),  \n" +
                "                updatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,  \n" +
                "                updateByRoleId INT,  \n" +
                "                isDeleted TINYINT(1) NOT NULL DEFAULT '0',  \n" +
                "                deletedAt DATETIME,  \n" +
                "                deletedBy VARCHAR(255) ,  \n" +
                "                deleteByRoleId INT,  \n" +
                "                createByRoleId INT,  \n" +
                "                PRIMARY KEY (id),  \n" +
                "         KEY `FK_kit_release_return_trans_history_refPlanId` (`refPlanId`),  \n" +
                "                CONSTRAINT `FK_kit_release_return_trans_history_refPlanId` FOREIGN KEY (`refPlanId`) REFERENCES `salesorder_plan_detailsmst` (`id`)  \n" +
                "                   );  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP TRIGGER IF EXISTS `TRG_AI_salesorder_plan_detailsmst`;  \n" +
                "CREATE TRIGGER `TRG_AI_salesorder_plan_detailsmst` AFTER INSERT ON `salesorder_plan_detailsmst` FOR EACH ROW BEGIN  \n" +
                "	INSERT INTO kit_release_return_trans_history  \n" +
                "		(  \n" +
                "			salesOrderDetID, 	refAssyId, 			refPlanId, 		woID,				plannKitNumber,  \n" +
                "            releaseDate, 		releasedBy, 		releaseStatus, 	releasedNote, 		releaseKitNumber,  \n" +
                "            returnStatus, 		returnDate, 		returnBy, 		initiateReturnBy, 	initiateReturnAt,  \n" +
                "            createdBy, 			createdAt, 			updatedBy, 		updatedAt, 			isDeleted,  \n" +
                "            createByRoleId,		updateByRoleId  \n" +
                "		)  \n" +
                "	VALUES  \n" +
                "		(  \n" +
                "			new.salesOrderDetID, 		IFNULL(new.subAssyID, new.refAssyId), 		new.id, 				new.woID,  \n" +
                "            new.plannKitNumber, 		new.actualKitReleaseDate, 					new.releasedBy, 		new.kitStatus,  \n" +
                "            new.releasedNote, 			new.releaseKitNumber, 						new.kitReturnStatus, 	new.kitReturnDate,  \n" +
                "            new.kitReturnBy, 			new.initiateReturnBy, 						new.initiateReturnAt, 	new.createdBy,  \n" +
                "            new.createdAt, 				new.updatedBy, 								new.updatedAt, 			0,  \n" +
                "            new.createByRoleId,			new.updateByRoleId  \n" +
                "		);  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP TRIGGER IF EXISTS `TRG_AU_salesorder_plan_detailsmst`;  \n" +
                "CREATE TRIGGER `TRG_AU_salesorder_plan_detailsmst` AFTER UPDATE ON `salesorder_plan_detailsmst` FOR EACH ROW BEGIN  \n" +
                "		IF(NEW.woID <> OLD.woID OR NEW.releasedNote <> OLD.releasedNote) THEN  \n" +
                "			INSERT INTO kit_release_return_trans_history  \n" +
                "			(  \n" +
                "					salesOrderDetID, 	refAssyId, 			refPlanId, 		woID,				plannKitNumber,  \n" +
                "					releaseDate, 		releasedBy, 		releaseStatus, 	releasedNote, 		releaseKitNumber,  \n" +
                "					returnStatus, 		returnDate, 		returnBy, 		initiateReturnBy, 	initiateReturnAt,  \n" +
                "					createdBy, 			createdAt, 			updatedBy, 		updatedAt, 			isDeleted,  \n" +
                "					createByRoleId,		updateByRoleId  \n" +
                "				)  \n" +
                "			VALUES  \n" +
                "				(  \n" +
                "					new.salesOrderDetID, 		IFNULL(new.subAssyID, new.refAssyId), 		new.id, 				new.woID,  \n" +
                "					new.plannKitNumber, 		new.actualKitReleaseDate, 					new.releasedBy, 		new.kitStatus,  \n" +
                "					new.releasedNote, 			new.releaseKitNumber, 						new.kitReturnStatus, 	new.kitReturnDate,  \n" +
                "					new.kitReturnBy, 			new.initiateReturnBy, 						new.initiateReturnAt, 	new.createdBy,  \n" +
                "					new.createdAt, 				new.updatedBy, 								new.updatedAt, 			0,  \n" +
                "					new.createByRoleId,			new.updateByRoleId  \n" +
                "				);  \n" +
                "        END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_DeallocateUMIDFromKit`;  \n" +
                "CREATE PROCEDURE `Sproc_DeallocateUMIDFromKit`(  \n" +
                "    IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyId INT,  \n" +
                "	IN pUIDIds LONGTEXT,  \n" +
                "    IN pKitAllocationIds LONGTEXT,  \n" +
                "    IN pRefBOMLineID INT,  \n" +
                "    IN pRemark VARCHAR(500),  \n" +
                "	IN pUserID INT,  \n" +
                "    IN pUserRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pIsUMIDIsInEquipment INT;  \n" +
                "    DECLARE IsSuccess TINYINT DEFAULT 0;  \n" +
                "    DECLARE pCurrentDate DATETIME;  \n" +
                "    SET pCurrentDate = fun_DatetimetoUTCDateTime();  \n" +
                "	IF (pRefBOMLineID IS NOT NULL AND pRefSalesOrderDetID IS NOT NULL AND pAssyId IS NOT NULL) THEN  \n" +
                "		# Kit allocation action view deallocation button  \n" +
                "		SELECT GROUP_CONCAT(id), GROUP_CONCAT(refUIDId) INTO pKitAllocationIds, pUIDIds FROM kit_allocation  \n" +
                "			   WHERE refBOMLineID = pRefBOMLineID and `status` = 'A' AND refSalesOrderDetID = pRefSalesOrderDetID AND assyID = pAssyId;  \n" +
                "	ELSEIF(pRefSalesOrderDetID IS NOT NULL AND pUIDIds IS NOT NULL) THEN  \n" +
                "		# Kit preparation screen  \n" +
                "		SELECT GROUP_CONCAT(id) INTO pKitAllocationIds FROM kit_allocation WHERE refSalesOrderDetID = pRefSalesOrderDetID AND FIND_IN_SET (refUIDId, pUIDIds) AND `status` = 'A';  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    SELECT COUNT(1) INTO pIsUMIDIsInEquipment FROM workorder_trans_umid_details WHERE FIND_IN_SET (refsidid, pUIDIds) AND reelStatus = 'P' AND isDeleted = 0 AND eqpFeederID IS NULL;  \n" +
                "  \n" +
                "    IF(pIsUMIDIsInEquipment > 0) THEN  \n" +
                "		SET IsSuccess = FALSE;  \n" +
                "    ELSE  \n" +
                "		UPDATE kit_allocation SET `status` = 'D', transactionDate = pCurrentDate, updatedBy =  pUserID, updateByRoleId = pUserRoleID, remark = pRemark, updatedAt = pCurrentDate  \n" +
                "			WHERE FIND_IN_SET (id, pKitAllocationIds);  \n" +
                "		SET IsSuccess = TRUE;  \n" +
                "	END IF;  \n" +
                "    SELECT IsSuccess, pKitAllocationIds AS id;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP VIEW  IF EXISTS `vu_salesorder_updatedlist_report`;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`custAssyPN` AS `custAssyPN`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`mfgName` AS `mfgName`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`rmaNumber` AS `rmaNumber`,  \n" +
                "        `a`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "        `a`.`debitedByCustText` AS `debitedByCustText`,  \n" +
                "        `a`.`rmaOrgPONumber` AS `rmaOrgPONumber`,  \n" +
                "        `a`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "        `a`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "        `a`.`reworkReqText` AS `reworkReqText`,  \n" +
                "        `a`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "        `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "        `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "        `a`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "        `a`.`blanketPOOptionText` AS `blanketPOOptionText`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                `sm`.`rmaNumber` AS `rmaNumber`,  \n" +
                "                `sm`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isDebitedByCustomer` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `debitedByCustText`,  \n" +
                "                `sm`.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "                `sm`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "                `sm`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isReworkRequired` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `reworkReqText`,  \n" +
                "                `sm`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                `sm`.`createdAt` AS `createdDate`,  \n" +
                "                `sm`.`updatedAt` AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`custAssyPN` AS `custAssyPN`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`mfgName` AS `mfgName`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                IFNULL((CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN `sqt`.`BPOShippedQty`  \n" +
                "                    ELSE `sq`.`ShippedQty`  \n" +
                "                END), 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "                `sm`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 1) THEN 'Use This Blanket PO# for All Releases'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN 'Link Future PO(s) to This Blanket PO'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 3) THEN 'Use Blanket PO# and Release#'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `blanketPOOptionText`  \n" +
                "        FROM  \n" +
                "            (((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            IFNULL(SUM(`sbt`.`ShippedQty`), 0) AS `BPOShippedQty`,  \n" +
                "                `sbt`.`refBlanketPOID` AS `blanketPOSoDetID`  \n" +
                "        FROM  \n" +
                "            (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                `sdd`.`refBlanketPOID` AS `refBlanketPOID`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            ((`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        JOIN `salesorderdet` `sdd` ON (((`sdd`.`id` = `cpd`.`refSalesorderDetid`)  \n" +
                "            AND (`sdd`.`isDeleted` = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid` , `sdd`.`refBlanketPOID`) `sbt`  \n" +
                "        GROUP BY `sbt`.`refBlanketPOID`) `sqt` ON ((`sqt`.`blanketPOSoDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refBlanketPOID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refBlanketPOID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID` , `s`.`refAssyId`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetSalesorderList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				fun_GetFormattedMfgCode(vuss.mfgCode, vuss.mfgName,\", vMfgCodeFormat ,\") AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 and vuss.blanketPOOption=2 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				vuss.blanketPOOption,  \n" +
                "				vuss.blanketPOOptionText,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "                `vuss`.`custAssyPN` AS custAssyPN,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToReturnCount,vrr.shortageReturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount ,  \n" +
                "				vuss.rmaNumber,vuss.isDebitedByCustomer, vuss.debitedByCustText,  \n" +
                "				vuss.rmaOrgPONumber,vuss.orgSalesOrderID,vuss.isReworkRequired,  \n" +
                "				vuss.reworkReqText, vuss.reworkPONumber,vuss.custOrgPOLineNumber \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID  \n" +
                "				) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToReturnCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'' OR rmaNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''' OR rmaNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "    IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsRmaPO = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isRmaPO = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "       ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE 1 = 1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitReleaseSummaryAndStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleaseSummaryAndStatus`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pMainAssyID INT,  \n" +
                "	IN pIsConsolidated TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    SELECT  c.PartID,	c.releaseCount, 	c.kitReturnStatus,		c.salesOrderCompletedStatus,	c.shortageQty,		c.toBeRelease,		c.totalReleased,  \n" +
                "			FUN_GETKITRELEASESTATUS(allocPerWithSubAssy,totalReleaseQty,totalPOQty,assyKitQty,assyPOQty,releaseCount,pendingCount) releaseStatus  \n" +
                "	FROM  \n" +
                "		(SELECT vuss.PartID,  \n" +
                "                p.releaseCount,  \n" +
                "				p.pendingCount,  \n" +
                "				ka.allocPerWithSubAssy,  \n" +
                "				FUN_GETKITRETURNSTATUS(pendingReleaseCount, releasedNotReturnedCount, returnedCount, readyToreturnCount, shortageReturnCount) kitReturnStatus,  \n" +
                "				IFNULL(`vuss`.`kitQty`, 0) * IFNULL(perAssyBuildQty, 0) AS assyKitQty,  \n" +
                "				IFNULL(`vuss`.`PO Qty`, 0) * IFNULL(perAssyBuildQty, 0) AS assyPOQty,  \n" +
                "				p.totalReleased,  \n" +
                "                p.totalReleaseQty,  \n" +
                "                p.totalPOQty,  \n" +
                "				IFNULL(p.totalReleaseQty, 0) - IFNULL(totalReleased, 0) AS toBeRelease,  \n" +
                "				IFNULL(p.totalReleaseQty, 0) - IFNULL(ka.totalBuildFesibility, 0) AS shortageQty,  \n" +
                "				vuss.`Status` salesOrderCompletedStatus  \n" +
                "		FROM  \n" +
                "			vu_salesorder_updatedlist_report vuss  \n" +
                "		JOIN (  \n" +
                "				SELECT  \n" +
                "					perAssyBuildQty, refSalesOrderDetID, partID AS refAssyId  \n" +
                "				FROM kit_allocation_assy_detail  \n" +
                "				WHERE refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "				AND partID = pAssyID AND isDeleted = 0  \n" +
                "				GROUP BY refSalesOrderDetID , partID, perAssyBuildQty  \n" +
                "			) AS a ON a.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "		LEFT JOIN (  \n" +
                "					SELECT  \n" +
                "							salesOrderDetID, refAssyId,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releaseCount,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN kitReleaseQty ELSE 0 END) totalReleased,  \n" +
                "							SUM(CASE WHEN kitStatus = 'P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "							SUM(kitReleaseQty) totalReleaseQty,  \n" +
                "							SUM(poQty) totalPOQty  \n" +
                "					FROM salesorder_plan_detailsmst  \n" +
                "					WHERE (CASE WHEN (pIsConsolidated = 1 OR pAssyID = pMainAssyID) THEN subAssyID IS NULL ELSE subAssyID = pAssyID END)  \n" +
                "					AND isDeleted = 0  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p ON p.salesOrderDetID = `vuss`.`salesOrderDetailId` AND p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "						SELECT  \n" +
                "								salesOrderDetID, refAssyId,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'RR' THEN 1 ELSE 0 END) readyToreturnCount,  \n" +
                "								SUM(CASE WHEN kitReturnStatus = 'RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "						FROM 	vu_release_plan_release_return_status_det  \n" +
                "						WHERE  /* salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pMainAssyID  \n" +
                "								AND */ (CASE WHEN (pIsConsolidated = 1) THEN 1 = 1 WHEN (pAssyID IS NOT NULL AND pAssyID != pMainAssyID) THEN subAssyID = pAssyID ELSE subAssyID IS NULL END)  \n" +
                "						GROUP BY salesOrderDetID , refAssyId  \n" +
                "					) AS vrr ON vrr.salesOrderDetID = vuss.salesOrderDetailId AND vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "						SELECT  k.refSalesOrderDetID,  mainAssy AS assyID,  min(k.totalBuildFesibility) as totalBuildFesibility,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`  \n" +
                "						FROM (  \n" +
                "								SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN IFNULL((vk.allocatedpin/(vk.qpaWithDnp * vk.bomNumOfPosition)),0) ELSE IFNULL((vk.allocatedunit/vk.qpaWithDnp),0) END) AS totalBuildFesibility,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "								FROM  	`vu_kit_allocation_detail` vk  \n" +
                "								Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  AND sd.isDeleted = 0  \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1 and vk.qpaWithDnp != 0  \n" +
                "							) `k`  \n" +
                "							GROUP BY k.refSalesOrderDetID, k.mainAssy  \n" +
                "			) AS ka ON ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` AND ka.assyID = `vuss`.`PartID`  \n" +
                "		WHERE vuss.SalesOrderDetailId = pRefSalesOrderDetID  \n" +
                "	) AS c;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5688,'2.00','V1',' Task 39510: Manage kit list global points and filter changes - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5688:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP function IF EXISTS `fun_getKitReturnStatus`;  \n" +
                "CREATE FUNCTION `fun_getKitReturnStatus`(  \n" +
                "    pPendingReleaseCount INT,  \n" +
                "	pReleasedNotReturnedCount INT,  \n" +
                "	pReturnedCount INT,  \n" +
                "	pReadyToReturnCount INT,  \n" +
                "    pShortageReturnCount INT  \n" +
                ") RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vKitReturnStatus VARCHAR(50);  \n" +
                "  \n" +
                "	IF (pShortageReturnCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Returned With Shortage';  \n" +
                "	ELSEIF(pPendingReleaseCount = 0 AND  pReleasedNotReturnedCount = 0 AND pReturnedCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Fully Returned';  \n" +
                "	ELSEIF (pReturnedCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Partially Returned';  \n" +
                "	ELSEIF (pReleasedNotReturnedCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Not Returned';  \n" +
                "	ELSEIF (pReadyToReturnCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Ready To Return';  \n" +
                "	ELSE  \n" +
                "		SET vKitReturnStatus = 'N/A';  \n" +
                "	END IF;  \n" +
                "	RETURN vKitReturnStatus;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_CheckWOKitReturn`;  \n" +
                "CREATE PROCEDURE `Sproc_CheckWOKitReturn`(  \n" +
                "	pWoID Int  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vKitReturnCnt INT(10) DEFAULT 0;  \n" +
                "    DECLARE vWoSalesCnt INT(10) DEFAULT 0;  \n" +
                "    DECLARE vIsKitAllocationNotRequired INT(10) DEFAULT 0;  \n" +
                "  \n" +
                "	SELECT isKitAllocationNotRequired INTO  vIsKitAllocationNotRequired  \n" +
                "    FROM workorder wo  \n" +
                "    WHERE wo.woID= pWoID  \n" +
                "    AND isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "	select COUNT(1) INTO vKitReturnCnt  \n" +
                "    from salesorder_plan_detailsmst spd  \n" +
                "	JOIN workorder_salesorder_details wsd ON  wsd.woID = spd.woID  and wsd.salesOrderDetailID  =spd.salesOrderDetID AND wsd.parentPartID = spd.refAssyID AND wsd.isDeleted = 0  \n" +
                "	WHERE IFNULL(spd.isDeleted,0) = 0  \n" +
                "	AND spd.woID = pWoID  \n" +
                "	AND spd.subAssyID IS NULL  \n" +
                "	AND spd.kitReturnStatus = 'FR' ;  \n" +
                "  \n" +
                "  \n" +
                "    select count(1) INTO vWoSalesCnt  \n" +
                "	FROM workorder_salesorder_details wsd  \n" +
                "	WHERE IFNULL(wsd.isDeleted,0) = 0  \n" +
                "	AND wsd.woID = pWoID;  \n" +
                "  \n" +
                "	IF vIsKitAllocationNotRequired = 1 THEN  \n" +
                "		SELECT 1 kitReturnCnt ;  \n" +
                "    ELSE  \n" +
                "		SELECT CASE WHEN vWoSalesCnt = vKitReturnCnt THEN 1 ELSE 0 END kitReturnCnt ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_ValiationAndSaveStockAllocation`;  \n" +
                "CREATE PROCEDURE `Sproc_ValiationAndSaveStockAllocation`(  \n" +
                "		IN pStockDetail JSON,  \n" +
                "		IN pRefSalesOrderDetID INT,  \n" +
                "		IN pAssyID INT,  \n" +
                "		IN pPartIds LONGTEXT,  \n" +
                "		IN pUMIDs LONGTEXT,  \n" +
                "		IN pUserId VARCHAR(50),  \n" +
                "		IN pCheckForSameUmid BOOLEAN,  \n" +
                "		IN pToUOM INT,  \n" +
                "		IN pSubAssyID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountSameUMIDFind INT;  \n" +
                "	DECLARE v_ConcateUMID LONGTEXT;  \n" +
                "	DECLARE v_KitName LONGTEXT;  \n" +
                "	DECLARE v_UMIDForKitName LONGTEXT;  \n" +
                "	DECLARE v_KitIds LONGTEXT;  \n" +
                "	DECLARE v_CountError INT;  \n" +
                "    DECLARE v_CurrentUMIDUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_CurrentAllocatedUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_SameAllocated TINYINT DEFAULT FALSE;  \n" +
                "    DECLARE v_KitReturnStatus VARCHAR(100);  \n" +
                "	SET v_ConcateUMID = NULL;  \n" +
                "	/* create temp table for response */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_Validation_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		UMID LONGTEXT,  \n" +
                "		TransName LONGTEXT,  \n" +
                "		ErrorCode VARCHAR(150),  \n" +
                "		KitIds LONGTEXT,  \n" +
                "        Reason LONGTEXT,  \n" +
                "        StartDate VARCHAR(150)  \n" +
                "	);  \n" +
                "	# Error/Confirmation Codes:  \n" +
                "	# 1. MOUNTING_TYPE_MISMATCHED  \n" +
                "	# 2. FUNCTIONAL_TYPE_MISMATCHED  \n" +
                "	# 3. PO_HALT_ERROR  \n" +
                "	# 4. KIT_ALLOCATION_HALT_ERROR  \n" +
                "	# 5. SAME_UMID_ALLOCATED - Continue confimration in case of same umid is already allocated?  \n" +
                "	# 6. STOCK_NOT_ALLOCATED - UMID(s) could not be allocated, because other UMID(s) is already allocated in this kit and shared with other kit(s).  \n" +
                "	# 7. SOME_UMID_ALLOCATED - Already same UMID allocation is done by other user or by another transaction on same time.  \n" +
                "	# 8. FULLY_KIT_RETUNRED - Kit is Fully Returned then not allow to Allocate UMID(s).  \n" +
                "    # 9. RESERVED_RESTRICTED_UMID - UMID is restricted/reserved then not allow to Allocate UMID(s).  \n" +
                "	SELECT FUN_GETKITRETURNSTATUS(a.pendingReleaseCount, a.releasedNotReturnedCount, a.returnedCount, a.readyToreturnCount, a.shortageReturnCount) AS kitReturnStatus INTO v_KitReturnStatus  \n" +
                "	FROM (  \n" +
                "			SELECT  SUM(CASE WHEN kitReturnStatus = 'NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'RR' THEN 1 ELSE 0 END) readyToreturnCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "			FROM 	vu_release_plan_release_return_status_det  \n" +
                "			WHERE  salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pAssyID  \n" +
                "			AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END)  \n" +
                "		) AS a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Hold;  \n" +
                "	CREATE TEMPORARY TABLE temp_Validation_Hold  \n" +
                "	SELECT  hut.id,  \n" +
                "		hut.refTransId,  \n" +
                "        hut.refType,  \n" +
                "        hut.reason,  \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate) startDate,  \n" +
                "		fun_getEmployeeInitialNameByEmpID(hut.holdEmployeeId) empInitialName  \n" +
                "		FROM holdunholdtrans hut  \n" +
                "		WHERE hut.isDeleted = 0  \n" +
                "		AND hut.id IN (SELECT max(id) from holdunholdtrans ht where ht.isDeleted = 0 AND ht.refType in ('PO','KA') AND ht.refTransId = pRefSalesOrderDetID AND hut.status='H' GROUP BY ht.refType,ht.refTransId);  \n" +
                "	IF(v_KitReturnStatus = 'Fully Returned') THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'FULLY_KIT_RETUNRED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component c WHERE c.isDeleted = 0 AND FIND_IN_SET(id, pPartIds) AND c.mountingTypeID = -1) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'MOUNTING_TYPE_MISMATCHED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component c WHERE c.isDeleted = 0 AND FIND_IN_SET(id, pPartIds) AND c.partType = -1) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'FUNCTIONAL_TYPE_MISMATCHED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM temp_Validation_Hold) > 0) THEN  \n" +
                "		IF((SELECT COUNT(1) FROM temp_Validation_Hold) > 1) THEN  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				SELECT 0, NULL, th.empInitialName,'PO_HALT_ERROR', NULL, th.reason, th.startDate FROM temp_Validation_Hold th WHERE th.refType = 'PO';  \n" +
                "		ELSE  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				SELECT 0, NULL, th.empInitialName, IF(th.refType = 'PO','PO_HALT_ERROR','KIT_ALLOCATION_HALT_ERROR'), NULL, th.reason, th.startDate FROM temp_Validation_Hold th;  \n" +
                "        END IF;  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component_sid_stock cst WHERE FIND_IN_SET(cst.id, pUMIDs) AND (cst.isUMIDRestrict = TRUE OR cst.isReservedStock = TRUE)) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'RESERVED_RESTRICTED_UMID', NULL, NULL, NULL);  \n" +
                "	END IF;  \n" +
                "	IF((SELECT COUNT(1) FROM temp_Validation_Error tmp WHERE tmp.IsSuccess = 0) = 0) THEN  \n" +
                "		/* create temp table for kit allocation details */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempKitAllocationDetail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempKitAllocationDetail AS  \n" +
                "		SELECT 	*  FROM  JSON_TABLE(  \n" +
                "			pStockDetail,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				refSalesOrderDetID INT PATH \"$.refSalesOrderDetID\",  \n" +
                "				assyID INT PATH \"$.assyID\",  \n" +
                "				uid VARCHAR(50) PATH \"$.uid\",  \n" +
                "				refBOMLineID INT PATH \"$.refBOMLineID\",  \n" +
                "				STATUS VARCHAR(50) PATH \"$.status\",  \n" +
                "				refUIDId INT PATH \"$.refUIDId\",  \n" +
                "				partId INT PATH \"$.partId\",  \n" +
                "				allocatedQty DECIMAL(18,8) PATH \"$.allocatedQty\",  \n" +
                "				allocatedUnit DECIMAL(18,8) PATH \"$.allocatedUnit\",  \n" +
                "				allocatedUOM INT PATH \"$.allocatedUOM\",  \n" +
                "				umidUnits INT PATH \"$.umidUnits\",  \n" +
                "				kitAllocationId INT PATH \"$.kitAllocationId\",  \n" +
                "				PIDCode VARCHAR(100) PATH \"$.PIDCode\",  \n" +
                "				restricType VARCHAR(500) PATH \"$.restricType\",  \n" +
                "				transactionType VARCHAR(1000) PATH \"$.transactionType\",  \n" +
                "				refTableName VARCHAR(255) PATH \"$.refTableName\",  \n" +
                "				approveFromPage VARCHAR(255) PATH \"$.approveFromPage\",  \n" +
                "				approvedBy VARCHAR(255) PATH \"$.approvedBy\",  \n" +
                "				approvalReason TEXT PATH \"$.approvalReason\",  \n" +
                "				confirmationType INT PATH \"$.confirmationType\",  \n" +
                "				roHSApprovalReason VARCHAR(1000) PATH \"$.roHSApprovalReason\",  \n" +
                "				allocationRemark VARCHAR(1000) PATH \"$.allocationRemark\"  \n" +
                "				)  \n" +
                "			) AS jt;  \n" +
                "		IF (pCheckForSameUmid = TRUE) THEN  \n" +
                "			SELECT 	COUNT(1), GROUP_CONCAT(uid) INTO v_CountSameUMIDFind, v_ConcateUMID  \n" +
                "			FROM 	kit_allocation  \n" +
                "			WHERE 	refSalesOrderDetID = pRefSalesOrderDetID AND STATUS = 'A' AND assyID = IFNULL(pSubAssyID, pAssyID)  AND partId IN (pPartIds) AND refUIDId IN (pUMIDs);  \n" +
                "		ELSE  \n" +
                "			SET v_CountSameUMIDFind = 0;  \n" +
                "		END IF;  \n" +
                "		IF (v_CountSameUMIDFind = 0) THEN  \n" +
                "			block1: BEGIN  \n" +
                "				DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "				DECLARE v_RefSalesOrderDetID INT;  \n" +
                "				DECLARE v_AssyID INT;  \n" +
                "				DECLARE v_Umid VARCHAR(50);  \n" +
                "				DECLARE v_RefBOMLineID INT;  \n" +
                "				DECLARE v_Status VARCHAR(50);  \n" +
                "				DECLARE v_RefUIDId INT;  \n" +
                "				DECLARE v_PartId INT;  \n" +
                "				DECLARE v_AllocatedQty DECIMAL(18,8);  \n" +
                "				DECLARE v_AllocatedUnit DECIMAL(18,8);  \n" +
                "				DECLARE v_AllocatedUOM INT;  \n" +
                "				DECLARE v_UMIDUnits DECIMAL(18,8);  \n" +
                "				DECLARE v_countKitExist INT;  \n" +
                "				DECLARE v_CountSameUMID INT;  \n" +
                "				DECLARE	v_SameUMID VARCHAR(50);  \n" +
                "				DECLARE v_oldUMIDAllocatedUnit DECIMAL(18,8);  \n" +
                "				DECLARE v_oldUMID VARCHAR(50);  \n" +
                "				DECLARE v_CountSameAllocatedUnit INT;  \n" +
                "				DECLARE v_KitAllocationId INT;  \n" +
                "				DECLARE v_StringSameUMID VARCHAR(10000);  \n" +
                "				DECLARE v_CountUMIDForSame INT;  \n" +
                "				DECLARE v_StringUMIDForKit VARCHAR(10000);  \n" +
                "				DECLARE v_CountSameSalesOrder INT;  \n" +
                "				DECLARE v_PIDCode VARCHAR(100);  \n" +
                "				DECLARE v_RestricType VARCHAR(500);  \n" +
                "				DECLARE v_TransactionType VARCHAR(1000);  \n" +
                "				DECLARE v_RefTableName VARCHAR(255);  \n" +
                "				DECLARE v_ApproveFromPage VARCHAR(255);  \n" +
                "				DECLARE v_ApprovedBy VARCHAR(255);  \n" +
                "				DECLARE v_ConfirmationType INT;  \n" +
                "				DECLARE v_ApprovalReason TEXT;  \n" +
                "				DECLARE v_RefID INT;  \n" +
                "				DECLARE v_RoHSApprovalReason VARCHAR(1000);  \n" +
                "				DECLARE v_AllocationRemark VARCHAR(1000);  \n" +
                "				DECLARE KitAllocationDetail_Cursor CURSOR FOR  \n" +
                "				SELECT 	refSalesOrderDetID, assyID, uid, refBOMLineID, STATUS, refUIDId, partId, allocatedQty, allocatedUnit, allocatedUOM, umidUnits, kitAllocationId,  \n" +
                "						PIDCode, restricType, transactionType, refTableName, approveFromPage, approvedBy, approvalReason, confirmationType, roHSApprovalReason, allocationRemark  \n" +
                "				FROM 	tempKitAllocationDetail;  \n" +
                "				DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "				OPEN KitAllocationDetail_Cursor;  \n" +
                "				KitAllocationDetail_Loop:LOOP  \n" +
                "					FETCH 	KitAllocationDetail_Cursor INTO v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_Status, v_RefUIDId, v_PartId, v_AllocatedQty, v_AllocatedUnit, v_AllocatedUOM, v_UMIDUnits, v_KitAllocationId,  \n" +
                "										v_PIDCode, v_RestricType, v_TransactionType, v_RefTableName, v_ApproveFromPage, v_ApprovedBy, v_ApprovalReason, v_ConfirmationType, v_RoHSApprovalReason, v_AllocationRemark;  \n" +
                "				IF exit_loop THEN  \n" +
                "					LEAVE KitAllocationDetail_Loop;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET v_SameAllocated = FALSE;  \n" +
                "                SELECT fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) INTO v_CurrentUMIDUnit FROM component_sid_stock cst WHERE cst.id = v_RefUIDId;  \n" +
                "                SELECT 	SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) INTO v_CurrentAllocatedUnit FROM kit_allocation ka WHERE ka.status = 'A' AND ka.refUIDId = v_RefUIDId;  \n" +
                "                SET v_CurrentAllocatedUnit = IFNULL(v_CurrentAllocatedUnit,0) + IFNULL(v_AllocatedUnit,0);  \n" +
                "			  IF(IFNULL(v_CurrentUMIDUnit,0) >= IFNULL(v_CurrentAllocatedUnit,0)) THEN  \n" +
                "					IF (CAST(IFNULL(v_KitAllocationId, '0') AS SIGNED) != 0) THEN  \n" +
                "						UPDATE 	kit_allocation  \n" +
                "								SET 	allocatedQty = IFNULL(allocatedQty,0) + IFNULL(v_AllocatedQty,0),  \n" +
                "									allocatedUnit = IFNULL(allocatedUnit,0) + IFNULL(v_AllocatedUnit,0)  \n" +
                "								WHERE	id = v_KitAllocationId;  \n" +
                "					ELSE  \n" +
                "						INSERT INTO kit_allocation (refSalesOrderDetID, assyID, uid, refBOMLineID, allocatedQty, transactionDate, STATUS, createdBy, refUIDId, partId, allocatedUnit, allocatedUOM, roHSApprovalReason, roHSApprovedBy, roHSApprovedOn, allocationRemark)  \n" +
                "								VALUES(v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_AllocatedQty, fun_DatetimetoUTCDateTime(),v_Status, pUserId, v_RefUIDId, v_PartId, v_AllocatedUnit, v_AllocatedUOM,  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE v_RoHSApprovalReason END),  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE pUserId END),  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE fun_DatetimetoUTCDateTime() END),  \n" +
                "								(CASE WHEN (v_AllocationRemark IS NULL OR v_AllocationRemark = '') THEN NULL ELSE v_AllocationRemark END));  \n" +
                "								SET v_RefID = LAST_INSERT_ID();  \n" +
                "						IF(IFNULL(v_RefID, \"\") != \"\") THEN  \n" +
                "							SET v_KitIds = (  \n" +
                "									SELECT 	CASE  \n" +
                "											WHEN ((SELECT IFNULL(v_KitIds, \"\")) = \"\") THEN  \n" +
                "												v_RefID  \n" +
                "											ELSE  \n" +
                "												(SELECT CONCAT(v_KitIds, \",\", v_RefID))  \n" +
                "										END  \n" +
                "									);  \n" +
                "						END IF;  \n" +
                "						IF (v_RestricType IS NOT NULL) THEN  \n" +
                "							INSERT INTO generic_authenticationmst (transactionType, approveFromPage, refID, approvedBy, approvalReason,confirmationType, refTableName, createdBy, updatedBy)  \n" +
                "							VALUES(v_TransactionType, v_ApproveFromPage, v_RefID, v_ApprovedBy, v_ApprovalReason,v_ConfirmationType,v_RefTableName, pUserId, pUserId);  \n" +
                "						END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				SET v_SameAllocated = TRUE;  \n" +
                "				LEAVE KitAllocationDetail_Loop;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			END LOOP KitAllocationDetail_Loop;  \n" +
                "			CLOSE KitAllocationDetail_Cursor;  \n" +
                "			END block1;  \n" +
                "  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				VALUES(IF(v_SameAllocated, 0, 1), NULL, NULL, IF(v_SameAllocated, 'SOME_UMID_ALLOCATED', 'SUCCESS'), NULL, NULL, NULL);  \n" +
                "		ELSE  \n" +
                "			SELECT 	GROUP_CONCAT('(', `Po Number`, ', ', `Sales Order`, ', ', `Assy ID`, ', ', `PO Qty`, ')') INTO v_KitName  \n" +
                "			FROM 	vu_salesorder_shipped_report  \n" +
                "			WHERE 	SalesOrderDetailId IN (  \n" +
                "					SELECT 	refSalesOrderDetID  \n" +
                "					FROM 	kit_allocation  \n" +
                "					WHERE 	FIND_IN_SET(uid, v_UMIDForKitName)  \n" +
                "				);  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				VALUES(0, v_ConcateUMID, v_KitName, 'SAME_UMID_ALLOCATED', v_KitIds, NULL, NULL);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	SELECT IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate FROM temp_Validation_Error;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_ValiationAndSaveStockAllocation`;  \n" +
                "CREATE PROCEDURE `Sproc_ValiationAndSaveStockAllocation`(  \n" +
                "		IN pStockDetail JSON,  \n" +
                "		IN pRefSalesOrderDetID INT,  \n" +
                "		IN pAssyID INT,  \n" +
                "		IN pPartIds LONGTEXT,  \n" +
                "		IN pUMIDs LONGTEXT,  \n" +
                "		IN pUserId VARCHAR(50),  \n" +
                "		IN pCheckForSameUmid BOOLEAN,  \n" +
                "		IN pToUOM INT,  \n" +
                "		IN pSubAssyID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountSameUMIDFind INT;  \n" +
                "	DECLARE v_ConcateUMID LONGTEXT;  \n" +
                "	DECLARE v_KitName LONGTEXT;  \n" +
                "	DECLARE v_UMIDForKitName LONGTEXT;  \n" +
                "	DECLARE v_KitIds LONGTEXT;  \n" +
                "	DECLARE v_CountError INT;  \n" +
                "    DECLARE v_CurrentUMIDUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_CurrentAllocatedUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_SameAllocated TINYINT DEFAULT FALSE;  \n" +
                "    DECLARE v_KitReturnStatus VARCHAR(100);  \n" +
                "	SET v_ConcateUMID = NULL;  \n" +
                "	/* create temp table for response */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_Validation_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		UMID LONGTEXT,  \n" +
                "		TransName LONGTEXT,  \n" +
                "		ErrorCode VARCHAR(150),  \n" +
                "		KitIds LONGTEXT,  \n" +
                "        Reason LONGTEXT,  \n" +
                "        StartDate VARCHAR(150)  \n" +
                "	);  \n" +
                "	# Error/Confirmation Codes:  \n" +
                "	# 1. MOUNTING_TYPE_MISMATCHED  \n" +
                "	# 2. FUNCTIONAL_TYPE_MISMATCHED  \n" +
                "	# 3. PO_HALT_ERROR  \n" +
                "	# 4. KIT_ALLOCATION_HALT_ERROR  \n" +
                "	# 5. SAME_UMID_ALLOCATED - Continue confimration in case of same umid is already allocated?  \n" +
                "	# 6. STOCK_NOT_ALLOCATED - UMID(s) could not be allocated, because other UMID(s) is already allocated in this kit and shared with other kit(s).  \n" +
                "	# 7. SOME_UMID_ALLOCATED - Already same UMID allocation is done by other user or by another transaction on same time.  \n" +
                "	# 8. FULLY_KIT_RETUNRED - Kit is Fully Returned then not allow to Allocate UMID(s).  \n" +
                "    # 9. RESERVED_RESTRICTED_UMID - UMID is restricted/reserved then not allow to Allocate UMID(s).  \n" +
                "	SELECT FUN_GETKITRETURNSTATUS(a.pendingReleaseCount, a.releasedNotReturnedCount, a.returnedCount, a.readyToreturnCount, a.shortageReturnCount) AS kitReturnStatus INTO v_KitReturnStatus  \n" +
                "	FROM (  \n" +
                "			SELECT  SUM(CASE WHEN kitReturnStatus = 'NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'RR' THEN 1 ELSE 0 END) readyToreturnCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "			FROM 	vu_release_plan_release_return_status_det  \n" +
                "			WHERE  salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pAssyID  \n" +
                "			AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END)  \n" +
                "		) AS a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Hold;  \n" +
                "	CREATE TEMPORARY TABLE temp_Validation_Hold  \n" +
                "	SELECT  hut.id,  \n" +
                "		hut.refTransId,  \n" +
                "        hut.refType,  \n" +
                "        hut.reason,  \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate) startDate,  \n" +
                "		fun_getEmployeeInitialNameByEmpID(hut.holdEmployeeId) empInitialName  \n" +
                "		FROM holdunholdtrans hut  \n" +
                "		WHERE hut.isDeleted = 0  \n" +
                "		AND hut.id IN (SELECT max(id) from holdunholdtrans ht where ht.isDeleted = 0 AND ht.refType in ('PO','KA') AND ht.refTransId = pRefSalesOrderDetID AND hut.status='H' GROUP BY ht.refType,ht.refTransId);  \n" +
                "	IF(v_KitReturnStatus = 'Fully Returned') THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'FULLY_KIT_RETUNRED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component c WHERE c.isDeleted = 0 AND FIND_IN_SET(id, pPartIds) AND c.mountingTypeID = -1) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'MOUNTING_TYPE_MISMATCHED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component c WHERE c.isDeleted = 0 AND FIND_IN_SET(id, pPartIds) AND c.partType = -1) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'FUNCTIONAL_TYPE_MISMATCHED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM temp_Validation_Hold) > 0) THEN  \n" +
                "		IF((SELECT COUNT(1) FROM temp_Validation_Hold) > 1) THEN  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				SELECT 0, NULL, th.empInitialName,'PO_HALT_ERROR', NULL, th.reason, th.startDate FROM temp_Validation_Hold th WHERE th.refType = 'PO';  \n" +
                "		ELSE  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				SELECT 0, NULL, th.empInitialName, IF(th.refType = 'PO','PO_HALT_ERROR','KIT_ALLOCATION_HALT_ERROR'), NULL, th.reason, th.startDate FROM temp_Validation_Hold th;  \n" +
                "        END IF;  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component_sid_stock cst WHERE FIND_IN_SET(cst.id, pUMIDs) AND (cst.isUMIDRestrict = TRUE OR cst.isReservedStock = TRUE)) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'RESERVED_RESTRICTED_UMID', NULL, NULL, NULL);  \n" +
                "	END IF;  \n" +
                "	IF((SELECT COUNT(1) FROM temp_Validation_Error tmp WHERE tmp.IsSuccess = 0) = 0) THEN  \n" +
                "		/* create temp table for kit allocation details */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempKitAllocationDetail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempKitAllocationDetail AS  \n" +
                "		SELECT 	*  FROM  JSON_TABLE(  \n" +
                "			pStockDetail,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				refSalesOrderDetID INT PATH \"$.refSalesOrderDetID\",  \n" +
                "				assyID INT PATH \"$.assyID\",  \n" +
                "				uid VARCHAR(50) PATH \"$.uid\",  \n" +
                "				refBOMLineID INT PATH \"$.refBOMLineID\",  \n" +
                "				STATUS VARCHAR(50) PATH \"$.status\",  \n" +
                "				refUIDId INT PATH \"$.refUIDId\",  \n" +
                "				partId INT PATH \"$.partId\",  \n" +
                "				allocatedQty DECIMAL(18,8) PATH \"$.allocatedQty\",  \n" +
                "				allocatedUnit DECIMAL(18,8) PATH \"$.allocatedUnit\",  \n" +
                "				allocatedUOM INT PATH \"$.allocatedUOM\",  \n" +
                "				umidUnits INT PATH \"$.umidUnits\",  \n" +
                "				kitAllocationId INT PATH \"$.kitAllocationId\",  \n" +
                "				PIDCode VARCHAR(100) PATH \"$.PIDCode\",  \n" +
                "				restricType VARCHAR(500) PATH \"$.restricType\",  \n" +
                "				transactionType VARCHAR(1000) PATH \"$.transactionType\",  \n" +
                "				refTableName VARCHAR(255) PATH \"$.refTableName\",  \n" +
                "				approveFromPage VARCHAR(255) PATH \"$.approveFromPage\",  \n" +
                "				approvedBy VARCHAR(255) PATH \"$.approvedBy\",  \n" +
                "				approvalReason TEXT PATH \"$.approvalReason\",  \n" +
                "				confirmationType INT PATH \"$.confirmationType\",  \n" +
                "				roHSApprovalReason VARCHAR(1000) PATH \"$.roHSApprovalReason\",  \n" +
                "				allocationRemark VARCHAR(1000) PATH \"$.allocationRemark\"  \n" +
                "				)  \n" +
                "			) AS jt;  \n" +
                "		IF (pCheckForSameUmid = TRUE) THEN  \n" +
                "			SELECT 	COUNT(1), GROUP_CONCAT(uid) INTO v_CountSameUMIDFind, v_ConcateUMID  \n" +
                "			FROM 	kit_allocation  \n" +
                "			WHERE 	refSalesOrderDetID = pRefSalesOrderDetID AND STATUS = 'A' AND assyID = IFNULL(pSubAssyID, pAssyID)  AND partId IN (pPartIds) AND refUIDId IN (pUMIDs);  \n" +
                "		ELSE  \n" +
                "			SET v_CountSameUMIDFind = 0;  \n" +
                "		END IF;  \n" +
                "		IF (v_CountSameUMIDFind = 0) THEN  \n" +
                "			block1: BEGIN  \n" +
                "				DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "				DECLARE v_RefSalesOrderDetID INT;  \n" +
                "				DECLARE v_AssyID INT;  \n" +
                "				DECLARE v_Umid VARCHAR(50);  \n" +
                "				DECLARE v_RefBOMLineID INT;  \n" +
                "				DECLARE v_Status VARCHAR(50);  \n" +
                "				DECLARE v_RefUIDId INT;  \n" +
                "				DECLARE v_PartId INT;  \n" +
                "				DECLARE v_AllocatedQty DECIMAL(18,8);  \n" +
                "				DECLARE v_AllocatedUnit DECIMAL(18,8);  \n" +
                "				DECLARE v_AllocatedUOM INT;  \n" +
                "				DECLARE v_UMIDUnits DECIMAL(18,8);  \n" +
                "				DECLARE v_countKitExist INT;  \n" +
                "				DECLARE v_CountSameUMID INT;  \n" +
                "				DECLARE	v_SameUMID VARCHAR(50);  \n" +
                "				DECLARE v_oldUMIDAllocatedUnit DECIMAL(18,8);  \n" +
                "				DECLARE v_oldUMID VARCHAR(50);  \n" +
                "				DECLARE v_CountSameAllocatedUnit INT;  \n" +
                "				DECLARE v_KitAllocationId INT;  \n" +
                "				DECLARE v_StringSameUMID VARCHAR(10000);  \n" +
                "				DECLARE v_CountUMIDForSame INT;  \n" +
                "				DECLARE v_StringUMIDForKit VARCHAR(10000);  \n" +
                "				DECLARE v_CountSameSalesOrder INT;  \n" +
                "				DECLARE v_PIDCode VARCHAR(100);  \n" +
                "				DECLARE v_RestricType VARCHAR(500);  \n" +
                "				DECLARE v_TransactionType VARCHAR(1000);  \n" +
                "				DECLARE v_RefTableName VARCHAR(255);  \n" +
                "				DECLARE v_ApproveFromPage VARCHAR(255);  \n" +
                "				DECLARE v_ApprovedBy VARCHAR(255);  \n" +
                "				DECLARE v_ConfirmationType INT;  \n" +
                "				DECLARE v_ApprovalReason TEXT;  \n" +
                "				DECLARE v_RefID INT;  \n" +
                "				DECLARE v_RoHSApprovalReason VARCHAR(1000);  \n" +
                "				DECLARE v_AllocationRemark VARCHAR(1000);  \n" +
                "				DECLARE KitAllocationDetail_Cursor CURSOR FOR  \n" +
                "				SELECT 	refSalesOrderDetID, assyID, uid, refBOMLineID, STATUS, refUIDId, partId, allocatedQty, allocatedUnit, allocatedUOM, umidUnits, kitAllocationId,  \n" +
                "						PIDCode, restricType, transactionType, refTableName, approveFromPage, approvedBy, approvalReason, confirmationType, roHSApprovalReason, allocationRemark  \n" +
                "				FROM 	tempKitAllocationDetail;  \n" +
                "				DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "				OPEN KitAllocationDetail_Cursor;  \n" +
                "				KitAllocationDetail_Loop:LOOP  \n" +
                "					FETCH 	KitAllocationDetail_Cursor INTO v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_Status, v_RefUIDId, v_PartId, v_AllocatedQty, v_AllocatedUnit, v_AllocatedUOM, v_UMIDUnits, v_KitAllocationId,  \n" +
                "										v_PIDCode, v_RestricType, v_TransactionType, v_RefTableName, v_ApproveFromPage, v_ApprovedBy, v_ApprovalReason, v_ConfirmationType, v_RoHSApprovalReason, v_AllocationRemark;  \n" +
                "				IF exit_loop THEN  \n" +
                "					LEAVE KitAllocationDetail_Loop;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET v_SameAllocated = FALSE;  \n" +
                "                SELECT fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit) INTO v_CurrentUMIDUnit FROM component_sid_stock cst WHERE cst.id = v_RefUIDId;  \n" +
                "                SELECT 	SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) INTO v_CurrentAllocatedUnit FROM kit_allocation ka WHERE ka.status = 'A' AND ka.refUIDId = v_RefUIDId;  \n" +
                "                SET v_CurrentAllocatedUnit = IFNULL(v_CurrentAllocatedUnit,0) + IFNULL(v_AllocatedUnit,0);  \n" +
                "			  IF(IFNULL(v_CurrentUMIDUnit,0) >= IFNULL(v_CurrentAllocatedUnit,0)) THEN  \n" +
                "					IF (CAST(IFNULL(v_KitAllocationId, '0') AS SIGNED) != 0) THEN  \n" +
                "						UPDATE 	kit_allocation  \n" +
                "								SET 	allocatedQty = IFNULL(allocatedQty,0) + IFNULL(v_AllocatedQty,0),  \n" +
                "									allocatedUnit = IFNULL(allocatedUnit,0) + IFNULL(v_AllocatedUnit,0)  \n" +
                "								WHERE	id = v_KitAllocationId;  \n" +
                "					ELSE  \n" +
                "						INSERT INTO kit_allocation (refSalesOrderDetID, assyID, uid, refBOMLineID, allocatedQty, transactionDate, STATUS, createdBy, refUIDId, partId, allocatedUnit, allocatedUOM, roHSApprovalReason, roHSApprovedBy, roHSApprovedOn, allocationRemark)  \n" +
                "								VALUES(v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_AllocatedQty, fun_DatetimetoUTCDateTime(),v_Status, pUserId, v_RefUIDId, v_PartId, v_AllocatedUnit, v_AllocatedUOM,  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE v_RoHSApprovalReason END),  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE pUserId END),  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE fun_DatetimetoUTCDateTime() END),  \n" +
                "								(CASE WHEN (v_AllocationRemark IS NULL OR v_AllocationRemark = '') THEN NULL ELSE v_AllocationRemark END));  \n" +
                "								SET v_RefID = LAST_INSERT_ID();  \n" +
                "						IF(IFNULL(v_RefID, \"\") != \"\") THEN  \n" +
                "							SET v_KitIds = (  \n" +
                "									SELECT 	CASE  \n" +
                "											WHEN ((SELECT IFNULL(v_KitIds, \"\")) = \"\") THEN  \n" +
                "												v_RefID  \n" +
                "											ELSE  \n" +
                "												(SELECT CONCAT(v_KitIds, \",\", v_RefID))  \n" +
                "										END  \n" +
                "									);  \n" +
                "						END IF;  \n" +
                "						IF (v_RestricType IS NOT NULL) THEN  \n" +
                "							INSERT INTO generic_authenticationmst (transactionType, approveFromPage, refID, approvedBy, approvalReason,confirmationType, refTableName, createdBy, updatedBy)  \n" +
                "							VALUES(v_TransactionType, v_ApproveFromPage, v_RefID, v_ApprovedBy, v_ApprovalReason,v_ConfirmationType,v_RefTableName, pUserId, pUserId);  \n" +
                "						END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				SET v_SameAllocated = TRUE;  \n" +
                "				LEAVE KitAllocationDetail_Loop;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			END LOOP KitAllocationDetail_Loop;  \n" +
                "			CLOSE KitAllocationDetail_Cursor;  \n" +
                "			END block1;  \n" +
                "  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				VALUES(IF(v_SameAllocated, 0, 1), NULL, NULL, IF(v_SameAllocated, 'SOME_UMID_ALLOCATED', 'SUCCESS'), NULL, NULL, NULL);  \n" +
                "		ELSE  \n" +
                "			SELECT 	GROUP_CONCAT('(', `Po Number`, ', ', `Sales Order`, ', ', `Assy ID`, ', ', `PO Qty`, ')') INTO v_KitName  \n" +
                "			FROM 	vu_salesorder_shipped_report  \n" +
                "			WHERE 	SalesOrderDetailId IN (  \n" +
                "					SELECT 	refSalesOrderDetID  \n" +
                "					FROM 	kit_allocation  \n" +
                "					WHERE 	FIND_IN_SET(uid, v_UMIDForKitName)  \n" +
                "				);  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				VALUES(0, v_ConcateUMID, v_KitName, 'SAME_UMID_ALLOCATED', v_KitIds, NULL, NULL);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	SELECT IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate FROM temp_Validation_Error;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_KitRelease`;  \n" +
                "CREATE PROCEDURE `Sproc_KitRelease`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pSubAssyID INT,  \n" +
                "	IN pPlanDetID INT,  \n" +
                "	IN pWOID INT,  \n" +
                "	IN pToDeptId INT,  \n" +
                "	IN pDescription VARCHAR(1000),  \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "	IN pCreateByRoleId INT,  \n" +
                "	IN pIsReRelease TINYINT,  \n" +
                "    IN pIsMainKitRelease TINYINT,  \n" +
                "    IN pIsCurrentKitRelease TINYINT,  \n" +
                "    IN pPlanKitNumber TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);  \n" +
                "	DECLARE vSubAssyQPA DECIMAL(18,8);  \n" +
                "	DECLARE vNickname VARCHAR(50);  \n" +
                "	DECLARE vReleaseKitNumber VARCHAR(60);  \n" +
                "	DECLARE vTotalPlan INT;  \n" +
                "	DECLARE vReleasedPlan INT;  \n" +
                "	DECLARE vKitQty INT;  \n" +
                "	DECLARE vIsReleaseKit TINYINT;  \n" +
                "	DECLARE vPlanExists INT;  \n" +
                "    DECLARE vActualKitReleaseDate DATETIME;  \n" +
                "    DECLARE vSubAssyPlanExists INT;  \n" +
                "    DECLARE vKitReturnStatus VARCHAR(100);  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "  \n" +
                "    SELECT FUN_GETKITRETURNSTATUS(a.pendingReleaseCount, a.releasedNotReturnedCount, a.returnedCount, a.readyToreturnCount, a.shortageReturnCount) AS kitReturnStatus INTO vKitReturnStatus  \n" +
                "	FROM (  \n" +
                "			SELECT  SUM(CASE WHEN kitReturnStatus = 'NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'RR' THEN 1 ELSE 0 END) readyToreturnCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "			FROM 	vu_release_plan_release_return_status_det  \n" +
                "			WHERE  salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pAssyID  \n" +
                "			AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END)  \n" +
                "		) AS a;  \n" +
                "  \n" +
                "	IF(vKitReturnStatus = 'Fully Returned') THEN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	ELSE  \n" +
                "		SET vActualKitReleaseDate = fun_DatetimetoUTCDateTime();  \n" +
                "  \n" +
                "		SELECT 	COUNT(1) INTO vPlanExists  \n" +
                "			FROM 	salesorder_plan_detailsmst  \n" +
                "			WHERE 	id = pPlanDetID  \n" +
                "				AND kitStatus = 'R'  \n" +
                "				AND salesOrderDetID = pRefSalesOrderDetID  \n" +
                "				AND refAssyId = pAssyID  \n" +
                "				AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END);  \n" +
                "  \n" +
                "		IF (pSubAssyID IS nOT NULL) THEN  \n" +
                "		SELECT 	COUNT(1) INTO vSubAssyPlanExists  \n" +
                "			FROM 	salesorder_plan_detailsmst  \n" +
                "			WHERE 	id = pPlanDetID  \n" +
                "				AND salesOrderDetID = pRefSalesOrderDetID  \n" +
                "				AND refAssyId = pAssyID  \n" +
                "				AND subAssyID = pSubAssyID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(vPlanExists = 1 AND pIsReRelease = 0) THEN  \n" +
                "			UPDATE 	salesorder_plan_detailsmst  \n" +
                "			SET 	woID = pWOID,  \n" +
                "				releasedNote = pDescription,  \n" +
                "				updatedBy = pCreatedBy,  \n" +
                "				updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				updateByRoleId = pCreateByRoleId  \n" +
                "			WHERE 	id = pPlanDetID;  \n" +
                "  \n" +
                "			SELECT pRefSalesOrderDetID refSalesOrderDetID, IFNULL(pSubAssyID, pAssyID) assyID, TRUE isUpdateRelease;  \n" +
                "		ELSE  \n" +
                "			SET vIsReleaseKit = 1;  \n" +
                "  \n" +
                "			SELECT 	(  \n" +
                "						MIN(CASE  \n" +
                "							WHEN connecterTypeID = -2 THEN  \n" +
                "								ROUND(allocatedpin/(qpaWithDnp * bomNumOfPosition), 8)  \n" +
                "							ELSE  \n" +
                "								ROUND(allocatedunit/qpaWithDnp, 8)  \n" +
                "						END  \n" +
                "					) )  \n" +
                "				INTO 	vFeasibilityWithAllocatedQty  \n" +
                "				FROM 	vu_kit_allocation_detail  \n" +
                "				WHERE 	refSalesorderdetid = pRefSalesOrderDetID  \n" +
                "						AND assyID = IFNULL(pSubAssyID, pAssyID);  \n" +
                "  \n" +
                "				# get nickname of assembly selected for release kit which is used further to generate kit release number  \n" +
                "				SELECT nickname INTO vNickname FROM component WHERE id = IFNULL(pSubAssyID, pAssyID);  \n" +
                "  \n" +
                "				# generate release kit number based on nickname i.e., <nickname>-<auto increment number which is left padded with 0 upto 5 digit>  \n" +
                "				# e.g., CA277-00001  \n" +
                "				SELECT 		CONCAT(vNickname, '-', LPAD((COUNT(DISTINCT s.id) + 1), 5, \"0\"))  INTO vReleaseKitNumber  \n" +
                "				FROM 		salesorder_plan_detailsmst s  \n" +
                "				INNER JOIN 	component c ON s.subassyid = c.id OR s.refAssyId = c.id  \n" +
                "				WHERE  		c.nickname = vNickname  \n" +
                "							AND s.kitStatus = 'R'  \n" +
                "							AND s.isDeleted = 0;  \n" +
                "  \n" +
                "		IF(pIsMainKitRelease = 1 OR pIsCurrentKitRelease = 1) THEN  \n" +
                "				IF(pIsMainKitRelease = 1) THEN  \n" +
                "					# Update release detail in case Re-Release [Maintain Current Kit Planning] for Selected plan  \n" +
                "					UPDATE salesorder_plan_detailsmst  \n" +
                "					SET actualKitReleaseDate = vActualKitReleaseDate,  \n" +
                "						releasedBy = pCreatedBy,  \n" +
                "						releaseTimeFeasibility = vFeasibilityWithAllocatedQty,  \n" +
                "						kitStatus = 'R',  \n" +
                "						woID = pWOID,  \n" +
                "						releasedNote = pDescription,  \n" +
                "						kitReturnStatus = 'NR',  \n" +
                "						kitReturnDate = NULL,  \n" +
                "						kitReturnBy = NULL,  \n" +
                "						updatedBy = pCreatedBy,  \n" +
                "						updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "						updateByRoleId = pCreateByRoleId,  \n" +
                "						releaseKitNumber = vReleaseKitNumber  \n" +
                "					WHERE 	plannKitNumber = pPlanKitNumber  \n" +
                "						AND salesOrderDetID = pRefSalesOrderDetID  \n" +
                "						AND refAssyId = pAssyID  \n" +
                "						AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END);  \n" +
                "  \n" +
                "					# Update release detail in case of Re-Release [Maintain Current Kit Planning] for Subsequent plans  \n" +
                "					UPDATE salesorder_plan_detailsmst  \n" +
                "					SET kitStatus = 'P',  \n" +
                "						kitReturnDate = NULL,  \n" +
                "						kitReturnBy = NULL,  \n" +
                "						woID = NULL,  \n" +
                "						releasedNote = NULL,  \n" +
                "						kitReturnStatus = 'NA',  \n" +
                "						updatedBy = pCreatedBy,  \n" +
                "						updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "						updateByRoleId = pCreateByRoleId,  \n" +
                "						releaseKitNumber = NULL,  \n" +
                "						actualKitReleaseDate = NULL,  \n" +
                "						releaseTimeFeasibility = NULL,  \n" +
                "						releasedBy = NULL  \n" +
                "					WHERE 	plannKitNumber > pPlanKitNumber  \n" +
                "						AND salesOrderDetID = pRefSalesOrderDetID  \n" +
                "						AND refAssyId = pAssyID  \n" +
                "						AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END);  \n" +
                "  \n" +
                "					SELECT pRefSalesOrderDetID refSalesOrderDetID, IFNULL(pSubAssyID, pAssyID) assyID, TRUE isUpdateRelease;  \n" +
                "  \n" +
                "					# Transfer inventory from Main Material Warehouse to Main Production Warehouse  \n" +
                "					CALL Sproc_transfer_stock('Department Transfer', NULL, NULL, NULL ,NULL, NULL, pCreatedBy, pRefSalesOrderDetID, IFNULL(pSubAssyID, pAssyID), NULL, pToDeptId, 'M', NULL, NULL, NULL, NULL, NULL, NULL, 'Kit Transfer', 'Release Kit (Kit Allocation)', NULL, TRUE, pDescription, NULL, NULL,NULL);  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				IF(pIsCurrentKitRelease = 1) THEN  \n" +
                "					 # Update release detail in case of Re-Release [Allow to Change Current Kit Planning]  \n" +
                "					UPDATE salesorder_plan_detailsmst  \n" +
                "					SET kitStatus = 'P',  \n" +
                "						kitReturnStatus = 'NA',  \n" +
                "						kitReturnDate = NULL,  \n" +
                "						kitReturnBy = NULL,  \n" +
                "						woID = NULL,  \n" +
                "						releasedNote = NULL,  \n" +
                "						kitReturnDate = NULL,  \n" +
                "						kitReturnBy = NULL,  \n" +
                "						updatedBy = pCreatedBy,  \n" +
                "						updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "						updateByRoleId = pCreateByRoleId,  \n" +
                "						releaseKitNumber = NULL,  \n" +
                "						actualKitReleaseDate = NULL,  \n" +
                "						releaseTimeFeasibility = NULL,  \n" +
                "						releasedBy = NULL  \n" +
                "					WHERE 	plannKitNumber >= pPlanKitNumber  \n" +
                "						AND salesOrderDetID = pRefSalesOrderDetID  \n" +
                "						AND refAssyId = pAssyID  \n" +
                "						AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END);  \n" +
                "  \n" +
                "					SELECT pRefSalesOrderDetID refSalesOrderDetID, IFNULL(pSubAssyID, pAssyID) assyID, TRUE isCurrentKitPlan;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				# add plan details for sub assembly only if plan not exists  \n" +
                "				IF(pSubAssyID IS NOT NULL AND vSubAssyPlanExists <> 1) THEN  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempSubAssyPlanDet;  \n" +
                "  \n" +
                "					# get qpa for sub assembly to calculate kit qty and PO qty  \n" +
                "					SELECT  perAssyBuildQty  \n" +
                "					INTO 	vSubAssyQPA  \n" +
                "					FROM 	kit_allocation_assy_detail  \n" +
                "					WHERE 	refSalesorderdetid = pRefSalesOrderDetID  \n" +
                "							AND partId = pSubAssyID  \n" +
                "							AND isDeleted = 0;  \n" +
                "  \n" +
                "					# For sub-assembly we will make entry for release plan based on main assembly plan  \n" +
                "					INSERT INTO salesorder_plan_detailsmst  \n" +
                "					(	salesOrderDetID, 				refAssyId, 			subAssyID, 		poQty, 						poDueDate,  \n" +
                "						materialDockDate,				kitReleaseQty, 						mfrLeadTime, 				kitReleaseDate,  \n" +
                "						plannKitNumber,  \n" +
                "						actualKitReleaseDate, 			releasedBy, 		releaseTimeFeasibility, 					kitStatus,  \n" +
                "						woID, 							refPlanId, 			releasedNote,	 releaseKitNumber,			isDeleted,  \n" +
                "						createdAt,   					createdBy, 			updatedAt, 									updatedBy,  \n" +
                "						createByRoleId, 				updateByRoleId  \n" +
                "					)  \n" +
                "					SELECT  \n" +
                "						pRefSalesOrderDetID, 			pAssyID, 			pSubAssyID, 		(vSubAssyQPA * poQty), 	poDueDate,  \n" +
                "						materialDockDate,				(vSubAssyQPA * kitReleaseQty), 			mfrLeadTime, 			kitReleaseDate,  \n" +
                "						plannKitNumber,  \n" +
                "						vActualKitReleaseDate, 	pCreatedBy, 		vFeasibilityWithAllocatedQty, 				'R',  \n" +
                "						pWOID, 							pPlanDetID, 		pDescription,	vReleaseKitNumber,			0,  \n" +
                "						fun_DatetimetoUTCDateTime(),   	pCreatedBy, 		fun_DatetimetoUTCDateTime(), 				pCreatedBy,  \n" +
                "						pCreateByRoleId, 				pCreateByRoleId  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	id = pPlanDetID;  \n" +
                "				ELSE  \n" +
                "					# Update release detail for assembly plan - Release Case  \n" +
                "					UPDATE salesorder_plan_detailsmst  \n" +
                "					SET actualKitReleaseDate = vActualKitReleaseDate,  \n" +
                "						releasedBy = pCreatedBy,  \n" +
                "						releaseTimeFeasibility = vFeasibilityWithAllocatedQty,  \n" +
                "						kitStatus = 'R',  \n" +
                "						woID = pWOID,  \n" +
                "						releasedNote = pDescription,  \n" +
                "						kitReturnStatus = NULL,  \n" +
                "						kitReturnDate = NULL,  \n" +
                "						kitReturnBy = NULL,  \n" +
                "						initiateReturnBy = NULL,  \n" +
                "						initiateReturnAt = NULL,  \n" +
                "						updatedBy = pCreatedBy,  \n" +
                "						updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "						updateByRoleId = pCreateByRoleId,  \n" +
                "						releaseKitNumber = vReleaseKitNumber  \n" +
                "					WHERE 	id = pPlanDetID;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				# Transfer inventory from Main Material Warehouse to Main Production Warehouse  \n" +
                "				CALL Sproc_transfer_stock('Department Transfer', NULL, NULL, NULL ,NULL, NULL, pCreatedBy, pRefSalesOrderDetID, IFNULL(pSubAssyID, pAssyID), NULL, pToDeptId, 'M', NULL, NULL, NULL, NULL, NULL, NULL, 'Kit Transfer', 'Release Kit (Kit Allocation)', NULL, TRUE, pDescription, NULL, NULL,NULL);  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		COMMIT;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetActiveSalesOrderDetailList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetActiveSalesOrderDetailList`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pWOID INT,  \n" +
                "	IN pCustomerID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE whereClause VARCHAR(500);  \n" +
                "	SET whereClause = \"AND co.category = 3 AND co.deletedAt IS NULL\";  \n" +
                "  \n" +
                "	-- fca then default get all assy  \n" +
                "	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id = pCustomerID AND isCompany = 1) > 0 THEN  \n" +
                "	 	SET pCustomerID = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND (co.mfgcodeID in ( select buyTo from acquireCustomers) or co.mfgcodeID in(select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\"  and smm.isCustMapping=0)) and  \n" +
                "		(sm.customerID=\",pCustomerID,\" or sm.customerID in (select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and  smm.supplierID=\",pCustomerID,\" and smm.isCustMapping=0)  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "		SELECT  	sd.id id,  \n" +
                "				sd.refSalesOrderID refSalesOrderID,  \n" +
                "				sd.qty qty,  \n" +
                "				sd.price price,  \n" +
                "				sd.mrpQty mrpQty,  \n" +
                "				sd.shippingQty shippingQty,  \n" +
                "				sd.remark remark,  \n" +
                "				sd.isHotJob isHotJob,  \n" +
                "				sd.partID partID,  \n" +
                "				sd.lineID lineID,  \n" +
                "				sd.isCancle isCancle,  \n" +
                "				sm.salesOrderNumber salesOrderNumber,  \n" +
                "				sm.poNumber poNumber,  \n" +
                "				sm.poDate poDate,  \n" +
                "				sm.customerID customerID,  \n" +
                "				sm.revision revision,  \n" +
                "				sm.status `status`,  \n" +
                "				sm.soDate soDate,  \n" +
                "				co.PIDCODE AS PIDCode,  \n" +
                "				co.mfgPN AS mfgPN,  \n" +
                "				ro.rohsIcon,  \n" +
                "				`ro`.`name` AS `rohsName` ,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	sd.partID = \",pPartID,\" THEN  \n" +
                "								1  \n" +
                "						ELSE  \n" +
                "								2  \n" +
                "					END  \n" +
                "				) AS AssyType,  \n" +
                "				(  \n" +
                "					SELECT perAssyBuildQty  \n" +
                "					FROM 	kit_allocation_assy_detail  \n" +
                "					WHERE 	refSalesorderdetid = sd.id  \n" +
                "							AND partId = \",pPartID,\"  \n" +
                "							AND isDeleted = 0  \n" +
                "				) AS qpaa,  \n" +
                "				(  \n" +
                "					CASE 	WHEN 	\",IFNULL(pWOID,0),\" = 0 THEN 0  \n" +
                "						ELSE 	(  \n" +
                "								SELECT 	IFNULL(SUM(wsd.poQty),0) - IFNULL(SUM(wsd.scrapQty),0)  \n" +
                "								FROM 	workorder_salesorder_details wsd  \n" +
                "								WHERE 	wsd.salesOrderDetailID = sd.id  \n" +
                "										AND wsd.parentPartID = sd.partID  \n" +
                "										AND wsd.deletedAt IS NULL  \n" +
                "										AND IFNULL(wsd.isDeleted,0)= 0  \n" +
                "										AND wsd.woID <> \",IFNULL(pWOID,0),\"  \n" +
                "							)  \n" +
                "					END  \n" +
                "				) AS totalAssignedQty , astk.initialStockCount  \n" +
                "		FROM 		salesorderdet sd  \n" +
                "		LEFT JOIN 	salesordermst sm ON (sm.id = sd.refSalesOrderID AND sm.deletedAt IS NULL AND IFNULL(sm.isDeleted,0)=0)  \n" +
                "		LEFT JOIN 	component co ON sd.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "		LEFT JOIN 	rfq_rohsmst ro ON co.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "		LEFT JOIN 	mfgcodemst mfg ON co.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "        LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
                "		WHERE 		sd.isDeleted =0  \n" +
                "					AND sd.partCategory=3  \n" +
                "					AND IFNULL(sd.isCancle,0) = 0  \n" +
                "					AND sd.partID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\",pPartID,\")\",  \n" +
                "                    \"AND sd.salesOrderDetStatus = 1 \", whereClause,'  \n" +
                "		order by 	co.PIDCode  \n" +
                "	');  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetSOPIDList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSOPIDList`(  \n" +
                "	IN pCustomerID INT,  \n" +
                "	IN pPartID INT  ,  \n" +
                "	IN psubAssyID INT ,  \n" +
                "    IN pSearchObj VARCHAR(500),  \n" +
                "    IN pSalesOrderDetID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE mfgCodeID INT;  \n" +
                "	DECLARE whereClause VARCHAR(2000);  \n" +
                "	DECLARE partStatusID INT;  \n" +
                "    DECLARE mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into mfgNameFormat;  \n" +
                "	SELECT cp.id INTO partStatusID FROM component_partstatusmst cp WHERE cp.name= \"Obsolete\";  \n" +
                "	SET whereClause = \" a.partCategory = 3 \";  \n" +
                "  \n" +
                "	-- fca then default get all assy  \n" +
                "	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany=1)>0 THEN  \n" +
                "		SET pCustomerID=NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND (a.mfgcodeID in ( select buyTo from acquireCustomers) or a.mfgcodeid in  \n" +
                "		(select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and smm.isCustMapping=0 and  smm.supplierID=\",pCustomerID,\")) and  \n" +
                "		(a.customerID=\",pCustomerID,\" or a.customerID in (select smm.refMfgCodeMstID from supplier_mapping_mst smm where smm.isDeleted=0 and smm.isCustMapping=0 and  smm.supplierID=\",pCustomerID,\")  \n" +
                "		)\");  \n" +
                "		-- SET whereClause = CONCAT(whereClause,\" AND c.mfgcodeID = \", pCustomerID);  \n" +
                "	END IF;  \n" +
                "  -- Added to search  Sales order number  \n" +
                "    IF pSearchObj IS NOT NULL THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) like '%\",pSearchObj,\"%'\");  \n" +
                "    END IF;  \n" +
                "    IF pSalesOrderDetID IS NOT NULL THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND a.id = \",pSalesOrderDetID);  \n" +
                "    END IF;  \n" +
                "	IF(pPartID IS NOT NULL) THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND a.partID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\",pPartID,\") \");  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
                "		c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
                "		c.partStatus, c.isGoodPart,  \n" +
                "		ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName,sm.customerID,  \n" +
                "        fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
                "		CASE WHEN sd.partID = \",pPartID,\" THEN 1 ELSE 2 END AS AssyType,  \n" +
                "		(SELECT  perAssyBuildQty  \n" +
                "			FROM 	kit_allocation_assy_detail  \n" +
                "			WHERE 	refSalesorderdetid = sd.id  \n" +
                "		AND 	partId = \",pPartID,\"  \n" +
                "			AND 	isDeleted = 0) AS qpaa,  \n" +
                "		CASE c.partStatus WHEN \", partStatusID, \" THEN FALSE ELSE TRUE END AS isActive,  \n" +
                "        sd.partCategory,  \n" +
                "        astk.initialStockCount  ,  \n" +
                "        fun_getPOTypeByID(sm.id) POType  \n" +
                "		FROM salesorderdet sd  \n" +
                "		LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.isDeleted = 0)  \n" +
                "		LEFT JOIN component c ON (c.id = sd.partID AND c.isDeleted = 0)  \n" +
                "		LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.isDeleted = 0)  \n" +
                "		LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "		LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
                "		WHERE IFNULL(sd.isCancle,0)=0 AND sd.isDeleted = 0 AND IFNULL(sm.status,0)=1  \n" +
                "		AND sd.salesOrderDetStatus = 1 \",' order by c.PIDCode');  \n" +
                "	        -- SELECT @SQLStatement2;  \n" +
                "  \n" +
                "        SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
                "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
                "		-- 	 SELECT @SQLStatement2;  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1 = CONCAT(\"SELECT sd.refSalesOrderID, sd.id, sd.lineID, sm.salesOrderNumber, sm.poNumber, sd.qty, sd.partID, sd.isCancle, sd.isHotJob, c.PIDCode,  \n" +
                "			c.rev, c.nickName, c.assyCode, c.mfgPN,c.mfgPNDescription AS description,c.specialNote, c.liveVersion, c.RoHSStatusID,  \n" +
                "			ro.rohsIcon, ro.name AS rohsName, mfg.mfgCode , mfg.mfgName, sm.customerID,  \n" +
                "            fun_GetFormattedMfgCode(mfg.mfgCode , mfg.mfgName,\",mfgNameFormat,\") mfgFormattedName,c.mfgcodeID,  \n" +
                "			1 AssyType,  \n" +
                "			(SELECT  perAssyBuildQty  \n" +
                "				FROM 	kit_allocation_assy_detail  \n" +
                "				WHERE 	refSalesorderdetid = sd.id  \n" +
                "			AND 	partId = sd.partID  \n" +
                "				AND 	isDeleted = 0) AS qpaa,  \n" +
                "			CASE c.partStatus  \n" +
                "			WHEN \", partStatusID, \" THEN FALSE  \n" +
                "			ELSE TRUE  \n" +
                "			END AS isActive ,  \n" +
                "            sd.partCategory , c.partStatus , astk.initialStockCount ,  \n" +
                "			fun_getPOTypeByID(sm.id) POType  \n" +
                "			FROM salesorderdet sd  \n" +
                "			LEFT JOIN salesordermst sm ON (sd.refSalesOrderID = sm.id AND sm.isDeleted = 0)  \n" +
                "			LEFT JOIN component c ON (c.id = sd.partID AND c.isDeleted = 0)  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON (c.RoHSStatusID = ro.id AND ro.isDeleted = 0 AND ro.isDeleted = 0)  \n" +
                "			LEFT JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id and mfg.isDeleted = 0  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "					from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                    Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "			ON astk.refSalesOrderDetID = sd.id and astk.refSalesOrderID = sd.refSalesOrderID and astk.partID = sd.partID  \n" +
                "			WHERE IFNULL(sd.isCancle,0)=0 AND sd.isDeleted = 0 AND IFNULL(sm.status,0)=1 AND sd.partCategory=3  \n" +
                "				AND sd.salesOrderDetStatus = 1  \",' order by c.PIDCode');  \n" +
                "			SET @SQLStatement2 = CONCAT( \"select a.* , concat(a.salesOrderNumber,' | ', a.poNumber,(case when a.POType <> '' then ' | ' else '' end), a.poType, ' | ' , a.mfgFormattedName,' | ' ,a.PIDCode,' | ', a.mfgPN,' | ',a.qty, ' | ', a.lineID) formattedSalesOrder \",  \n" +
                "									\"from  (\", @SQLStatement1 ,\") a where\" , whereClause);  \n" +
                "	END IF;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5689,'2.00','V1',' Task 39510: Manage kit list global points and filter changes - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5689:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetPOSOAssemblyList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPOSOAssemblyList`(  \n" +
                "	pExcludeCanceled TINYINT,  \n" +
                "	pSalesOrderDetailID INT,  \n" +
                "	pSearch VARCHAR(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	 DECLARE vMfgCodeFormat INT;  \n" +
                "	 SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"	SELECT  k.*,  \n" +
                "								IF(numberOfSubAssy > 0 ,  CONCAT(searchQuery,', (', numberOfSubAssy , ')') , searchQuery)  AS salescolumn  \n" +
                "						FROM (  \n" +
                "								SELECT  \n" +
                "									`Sales Order ID`,  `Sales Order`, 	    `Po Number`,    `Assy ID`,    `Sales Order Status`,  \n" +
                "									AssyDescr,			AssySpecialNote,  \n" +
                "                                    fun_replaceSpecialCharacters(`Po Number`) poNumwithoutSpecialChar,  \n" +
                "                                    fun_replaceSpecialCharacters(`Assy ID`) AssyIDwithoutSpecialChar,  \n" +
                "                                    fun_replaceSpecialCharacters(`Assy Name`) AssyNamewithoutSpecialChar,  \n" +
                "                                    fun_replaceSpecialCharacters(`kitNumber`) kitNumberwithoutSpecialChar,  \n" +
                "									`Status`, 	   `SalesOrderDetailId`, 	`PartID`, `Customer ID`,      `Assy Name`,  \n" +
                "									`NickName`,    `PO Qty`,             	`mrpQty`,     `kitQty`,       `RoHSName`,  \n" +
                "									`RohsIcon`,   `materialDueDate`,  `shippingDate`,  	  `Po Date`,  \n" +
                "									`kitNumber`,   `isSkipKitCreation`,  `Company Code`,  \n" +
                "									fun_GetFormattedMfgCode(`vusr`.`Company Code`, `vusr`.`companyMfgName`,\", vMfgCodeFormat ,\") AS companyName,  \n" +
                "									CONCAT(`Assy ID`, ', ',`Po Number`,', ',`Sales Order`,', ',`PO Qty`,', ',`kitNumber`) searchQuery,  \n" +
                "									(SELECT COUNT(1) FROM kit_allocation_assy_detail kasd WHERE kasd.refSalesOrderDetID = vusr.SalesOrderDetailId AND deletedAt IS NULL AND bomAssyLevel > 0) numberOfSubAssy  \n" +
                "									FROM 	vu_salesorder_shipped_report vusr WHERE isSkipKitCreation !=1 ) as k WHERE 1 = 1\");  \n" +
                "  \n" +
                "    IF(pExcludeCanceled=1) THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1,\" AND `Status` != 'Canceled'\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pSalesOrderDetailID IS NOT NULL) THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1,\" AND `SalesOrderDetailId` = \",pSalesOrderDetailID,\" \");  \n" +
                "    END IF;  \n" +
                "	IF(pSearch IS NOT NULL AND pSearch != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT  s.* FROM (  \n" +
                "								\",@SQLStatement1,\"	) as s WHERE  \n" +
                "							salescolumn LIKE '%\", pSearch ,\"%' \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	PREPARE mainQuery FROM @SQLStatement1;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP VIEW  IF EXISTS `vu_salesorder_shipped_report`;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyCode` AS `Company Code`,  \n" +
                "        `a`.`companyMfgName` AS `companyMfgName`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`kitNumber` AS `kitNumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`isLegacyPOText` AS `IsLegacyPOText`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`isRmaPOText` AS `isRmaPOText`,  \n" +
                "        `a`.`specialNote` AS `AssySpecialNote`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
                "                (SELECT  \n" +
                "                        1  \n" +
                "                    FROM  \n" +
                "                        `workorder_salesorder_details` `x`  \n" +
                "                    WHERE  \n" +
                "                        ((`x`.`salesOrderDetailID` = `a`.`id`)  \n" +
                "                            AND (`x`.`isDeleted` = 0))  \n" +
                "                    LIMIT 1) AS `wosalesOrderDetail`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `cu`.`mfgCode` AS `companyCode`,  \n" +
                "                `cu`.`mfgName` AS `companyMfgName`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitNumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                (SELECT  \n" +
                "                        MIN(`ssm`.`shippingDate`)  \n" +
                "                    FROM  \n" +
                "                        `salesshippingmst` `ssm`  \n" +
                "                    WHERE  \n" +
                "                        ((`ssm`.`sDetID` = `a`.`id`)  \n" +
                "                            AND (`ssm`.`isDeleted` = 0))) AS `shippingDate`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                (SELECT  \n" +
                "                        IFNULL(SUM(`shippedassembly`.`shippedqty`), 0)  \n" +
                "                    FROM  \n" +
                "                        `shippedassembly`  \n" +
                "                    WHERE  \n" +
                "                        ((`shippedassembly`.`partID` = `a`.`partID`)  \n" +
                "                            AND (`shippedassembly`.`isDeleted` = 0)  \n" +
                "                            AND `shippedassembly`.`shippingId` IN (SELECT  \n" +
                "                                `salesshippingmst`.`shippingID`  \n" +
                "                            FROM  \n" +
                "                                `salesshippingmst`  \n" +
                "                            WHERE  \n" +
                "                                ((`salesshippingmst`.`sDetID` = `a`.`id`)  \n" +
                "                                    AND (IFNULL(`salesshippingmst`.`isDeleted`, 0) = 0))))) AS `ShippedQty`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                FUN_GETINTTOTEXT(`sm`.`isLegacyPO`) AS `isLegacyPOText`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                FUN_GETINTTOTEXT(`sm`.`isRmaPO`) AS `isRmaPOText`,  \n" +
                "                `co`.`specialNote` AS `specialNote`  \n" +
                "        FROM  \n" +
                "            ((((((`salesorderdet` `a`  \n" +
                "        JOIN `salesordermst` `sm` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (IFNULL(`sm`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (IFNULL(`cu`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON (((`a`.`partID` = `co`.`id`)  \n" +
                "            AND (IFNULL(`co`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (IFNULL(`roh`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (IFNULL(`cc`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (IFNULL(`gc`.`isDeleted`, 0) = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`a`.`isDeleted` = 0)  \n" +
                "                AND (`a`.`partCategory` = 3))) `a`;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetAssyBOMGlanceDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMGlanceDetails`(  \n" +
                "	IN ppartID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	 DECLARE vMfgCodeFormat INT;  \n" +
                "	 SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "   # Create Temporary table for Assembly and its sub Assembly RoHS Status and Deviation  \n" +
                "		DROP temporary table if exists temp_AssyRohsStatusWithDeviation;  \n" +
                "		create temporary table temp_AssyRohsStatusWithDeviation as  \n" +
                "		select com.id, com.RoHSStatusID, ro.name as RoHSName, com.rohsDeviation from component com  \n" +
                "		Join rfq_rohsmst ro on ro.id = com.RoHSStatusID  \n" +
                "		where com.id in (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0);  \n" +
                "	# For get Mounting type wise glance Detail  \n" +
                "		SELECT  a.partID , 	a.AssyID, 											a.AssyPN, 				a.rohsConvertibleValue, 	a.rohsIcon,  \n" +
                "			a.`level`,	fun_getAssyTypeByID(a.assemblyType)  as assyType,	sum(a.qpa) AS `QPA`, 	SUM(a.dnpQty) `DNPQPA`,		SUM(a.dnpItemCount) `DNPItemCount`,  \n" +
                "			COUNT(a.id) AS `ItemCount`,										sum(a.KitCount) kitItemCount ,  \n" +
                "			b.mountingType  \n" +
                "		FROM  \n" +
                "			(  \n" +
                "				select 	rl.id,			rl.partID,				assypart.PIDCode AS AssyID,	assypart.mfgPN AS AssyPN,	ro.name AS rohsConvertibleValue,  \n" +
                "						ro.rohsIcon,	assypart.assemblyType,	(1-rl.isNotRequiredKitAllocation) KitCount  ,  \n" +
                "						(SELECT MAX(psar.`level`)+1 FROM part_sub_assy_relationship psar WHERE psar.partID = ppartID AND psar.prPerPartID = rl.partID) AS `level` ,  \n" +
                "						(case when rl.isInstall = 1 then ifnull(rl.qpa,0) else 0 end) qpa,  \n" +
                "						(case when rl.isInstall = 0 then ifnull(rl.dnpQty,0) + ifnull(rl.qpa,0) else ifnull(rl.dnpQty,0) end) dnpQty,  \n" +
                "						(case when rl.isInstall = 0 then 1 when ifnull(rl.dnpQty,0) > 0 then 1 else 0 end) dnpItemCount  \n" +
                "				FROM rfq_lineitems rl  \n" +
                "				INNER JOIN component assypart ON assypart.id = rl.partID  \n" +
                "				INNER JOIN rfq_rohsmst ro ON ro.id = assypart.RoHSStatusID  \n" +
                "				where rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "			) a  \n" +
                "			INNER JOIN  \n" +
                "			(  \n" +
                "				SELECT 	rl.id,  \n" +
                "				case when ifnull(max(com.mountingtypeID),'Unknown') = ifnull(min(com.mountingtypeID),'Unknown')  and ifnull(max(com.mountingtypeID),'Unknown') = 'Unknown' then  \n" +
                "						'Unknown'  \n" +
                "					when ifnull(max(com.mountingtypeID),'Unknown') = ifnull(min(com.mountingtypeID),'Unknown')  then  \n" +
                "						fun_getMountingTypeNameByID(max(com.mountingtypeID))  \n" +
                "					else 'Mismatched' end  as mountingType  \n" +
                "				FROM rfq_lineitems rl  \n" +
                "				Inner JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0  \n" +
                "				LEFT JOIN component com ON com.id = ra.mfgPNID  \n" +
                "				WHERE rl.partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "				AND rl.isDeleted = 0 and com.isGoodPart <> 2  \n" +
                "				GROUP BY rl.id,rl.partID  \n" +
                "			) b on a.id = b.id  \n" +
                "			GROUP BY a.partID , a.AssyID, a.AssyPN, a.rohsConvertibleValue, a.rohsIcon, a.`level`, b.mountingType;  \n" +
                "  \n" +
                "  # For get RoHS type wise glance Detail  \n" +
                "  SELECT  a.partID , 	a.AssyID, 											a.AssyPN, 				a.rohsConvertibleValue, 	a.rohsIcon,  \n" +
                "		a.`level`,	fun_getAssyTypeByID(a.assemblyType)  as assyType,	sum(a.qpa) AS `QPA`, 	SUM(a.dnpQty) `DNPQPA`,		SUM(a.dnpItemCount) `DNPItemCount`,  \n" +
                "		COUNT(a.id) AS `ItemCount`,										sum(a.KitCount) kitItemCount ,  \n" +
                "		b.RoHSStatus  \n" +
                "	FROM  \n" +
                "		(  \n" +
                "			select 	rl.id,			rl.partID,				assypart.PIDCode AS AssyID,	assypart.mfgPN AS AssyPN,	ro.name AS rohsConvertibleValue,  \n" +
                "					ro.rohsIcon,	assypart.assemblyType,	(1-rl.isNotRequiredKitAllocation) KitCount  ,  \n" +
                "					(SELECT MAX(psar.`level`)+1 FROM part_sub_assy_relationship psar WHERE psar.partID = ppartID AND psar.prPerPartID = rl.partID) AS `level` ,  \n" +
                "					(case when rl.isInstall = 1 then ifnull(rl.qpa,0) else 0 end) qpa,  \n" +
                "					(case when rl.isInstall = 0 then ifnull(rl.dnpQty,0) + ifnull(rl.qpa,0) else ifnull(rl.dnpQty,0) end) dnpQty,  \n" +
                "					(case when rl.isInstall = 0 then 1 when ifnull(rl.dnpQty,0) > 0 then 1 else 0 end) dnpItemCount  \n" +
                "			FROM rfq_lineitems rl  \n" +
                "			INNER JOIN component assypart ON assypart.id = rl.partID  \n" +
                "			INNER JOIN rfq_rohsmst ro ON ro.id = assypart.RoHSStatusID  \n" +
                "			where rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "		) a  \n" +
                "		INNER JOIN  \n" +
                "		(  \n" +
                "			SELECT 	rl.id,  \n" +
                "			case when ifnull(max(com.RoHSStatusID),'Unknown') = ifnull(min(com.RoHSStatusID),'Unknown')  and ifnull(max(com.RoHSStatusID),'Unknown') = 'Unknown' then  \n" +
                "					'Unknown'  \n" +
                "				when ifnull(max(com.RoHSStatusID),'Unknown') = ifnull(min(com.RoHSStatusID),'Unknown')  then  \n" +
                "					fun_getRoHSNameByID(max(com.RoHSStatusID))  \n" +
                "				else 'Mismatched' end  as RoHSStatus  \n" +
                "			FROM rfq_lineitems rl  \n" +
                "			Inner JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0  \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID  \n" +
                "			WHERE rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "			AND rl.isDeleted = 0  and com.isGoodPart <> 2  \n" +
                "			GROUP BY rl.id,rl.partID  \n" +
                "		) b on a.id = b.id  \n" +
                "		GROUP BY a.partID , a.AssyID, a.AssyPN, a.rohsConvertibleValue, a.rohsIcon,a.`level`, b.RoHSStatus;  \n" +
                "  \n" +
                "    # get Assembly Standard detail for glance  \n" +
                "        SELECT sc.className, sc.colorCode, cs.fullName AS standardName,csd.*  \n" +
                "		FROM component_standard_details csd  \n" +
                "		INNER JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isDeleted = 0  \n" +
                "		LEFT JOIN standard_class sc ON sc.classID = csd.ClassID AND sc.isDeleted = 0  \n" +
                "		WHERE csd.isDeleted = 0 AND csd.componentID = ppartID  \n" +
                "		ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC;  \n" +
                "  \n" +
                "    # Assembly detail  \n" +
                "	   SELECT com.id partID, com.PIDCode, com.mfgPN, com.mfgcodeID AS customerID,  \n" +
                "       fun_GetFormattedMfgCode(mf.mfgCode, mf.mfgName, vMfgCodeFormat) AS Customer,  \n" +
                "       com.mfgPNDescription,com.totalSolderPoints,  \n" +
                "		ro.name,ro.rohsIcon  \n" +
                "	   FROM component com  \n" +
                "       JOIN mfgcodemst mf ON com.mfgcodeID = mf.id  \n" +
                "	   JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID AND ro.isDeleted = 0  \n" +
                "	   WHERE com.id = ppartID;  \n" +
                "  \n" +
                "	# get RoHS Status by Part  \n" +
                "		SELECT 	rla.partID, count(1) partCount,  (case when com.RoHSStatusID is null then 'Unknown' else ro.name end) as RoHSStatus,  \n" +
                "		(case when tar.RoHSStatusID = com.RoHSStatusID then 'Yes' else 'No' end) as complientWithAssy  \n" +
                "		FROM rfq_lineitems_alternatepart rla  \n" +
                "        Join temp_AssyRohsStatusWithDeviation tar on tar.id = rla.partID  \n" +
                "		Left JOIN component com ON com.id = rla.mfgPNID  \n" +
                "        left Join rfq_rohsmst ro on ro.id = com.RoHSStatusID  \n" +
                "		WHERE rla.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "		AND rla.isDeleted = 0  \n" +
                "		GROUP BY rla.partID,com.RoHSStatusID, tar.RoHSStatusID  \n" +
                "        order by RoHSStatus;  \n" +
                "  \n" +
                "	# Get RoHS Status By Item with All Complient parts with in Item(Compared with Assembly RoHS Requirement)  \n" +
                "		SELECT COUNT(1) AS `ItemCount`, a.partID,  \n" +
                "			(CASE WHEN MIN(RoHSStatus) = MAX(RoHSStatus) THEN RoHSStatus ELSE 'Mismatched' END) rohs,  \n" +
                "			(CASE WHEN MIN(complientWithAssy) = 1 THEN 'Yes' ELSE 'No' END) complientWithAssy  \n" +
                "		FROM  \n" +
                "			(SELECT rla.partID,  \n" +
                "					(CASE WHEN MIN(com.RoHSStatusID) = MAX(com.RoHSStatusID)  \n" +
                "						THEN  \n" +
                "							(CASE WHEN tar.RoHSStatusID = MAX(com.RoHSStatusID)  \n" +
                "								THEN ro.name  \n" +
                "								ELSE 'Mismatched'  \n" +
                "							END)  \n" +
                "						ELSE 'Mismatched'  \n" +
                "					END) RoHSStatus,  \n" +
                "					(CASE WHEN tar.RoHSStatusID = com.RoHSStatusID THEN 1 ELSE 0 END) AS complientWithAssy,  \n" +
                "					rla.rfqLineItemsID  \n" +
                "			FROM rfq_lineitems_alternatepart rla  \n" +
                "			JOIN temp_AssyRohsStatusWithDeviation tar ON tar.id = rla.partID  \n" +
                "			JOIN component com ON com.id = rla.mfgPNID  \n" +
                "			JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID  \n" +
                "			WHERE rla.partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "			AND rla.isDeleted = 0  \n" +
                "            GROUP BY rla.partID , rla.rfqLineItemsID, tar.RoHSStatusID, ro.name, com.RoHSStatusID  \n" +
                "            order by complientWithAssy) a  \n" +
                "		GROUP BY a.partID , a.RoHSStatus  \n" +
                "        order by complientWithAssy;  \n" +
                "  \n" +
                "	# RoHS Status By Item with minimum one compliant part within item ( Compared to assembly RoHS requirement)  \n" +
                "		SELECT  COUNT(1) AS `ItemCount`, b.partID, b.rohs, b.complientWithAssy, sum(deviationApproveCount) deviationApproveCount  \n" +
                "		FROM  \n" +
                "			(SELECT  a.partID,  \n" +
                "					(CASE WHEN MAX(complientWithAssy) = 1  \n" +
                "						THEN  \n" +
                "							(CASE WHEN MAX(LineRoHSStatus) = - 15 THEN 'Mismatched'    /* -15 added as Static value for Check mismatched*/  \n" +
                "									WHEN MAX(LineRoHSStatus) = - 10 THEN 'RoHS Deviation (Allowed w/ Eng. Approval)'  /* -10 added as Static value for Check RoHS Deviation*/  \n" +
                "									ELSE FUN_GETROHSNAMEBYID(MAX(LineRoHSStatus))  \n" +
                "							END)  \n" +
                "						ELSE 'Mismatched'  \n" +
                "					END) rohs,  \n" +
                "					(CASE WHEN MAX(complientWithAssy) = 1 THEN 'Yes'  \n" +
                "							ELSE 'No'  \n" +
                "					END) complientWithAssy,  \n" +
                "					sum(deviationApproveCount) deviationApproveCount,  \n" +
                "					a.rfqLineItemsID  \n" +
                "			FROM  \n" +
                "				(SELECT  rla.partID,  \n" +
                "					(CASE WHEN tar.RoHSStatusID = com.RoHSStatusID THEN com.RoHSStatusID  \n" +
                "							ELSE (CASE WHEN tar.rohsDeviation = - 2 AND rla.customerApproval = 'A' THEN - 10 ELSE - 15  END) /* -15 & -10 added as Static value for Check mismatched and RoHS Deviation*/  \n" +
                "					END) LineRoHSStatus,  \n" +
                "					ro.name AS RoHSStatus,  \n" +
                "					(CASE WHEN tar.RoHSStatusID = com.RoHSStatusID THEN 1 ELSE  \n" +
                "						(CASE WHEN tar.rohsDeviation = - 2 AND rla.customerApproval = 'A' THEN 1 ELSE 0  END)  \n" +
                "					 END) AS complientWithAssy,  \n" +
                "					 (CASE WHEN tar.rohsDeviation = - 2 AND rla.customerApproval = 'A' THEN 1 ELSE 0  END) deviationApproveCount,  \n" +
                "					rla.rfqLineItemsID  \n" +
                "				FROM rfq_lineitems_alternatepart rla  \n" +
                "				JOIN temp_AssyRohsStatusWithDeviation tar ON tar.id = rla.partID  \n" +
                "				JOIN component com ON com.id = rla.mfgPNID  \n" +
                "				JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID  \n" +
                "				WHERE rla.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "				AND rla.isDeleted = 0  \n" +
                "				ORDER BY rfqLineItemsID ASC , complientWithAssy DESC , LineRoHSStatus ASC  \n" +
                "				) a  \n" +
                "				GROUP BY a.partID , a.rfqLineItemsID  \n" +
                "				ORDER BY complientWithAssy  \n" +
                "			) b  \n" +
                "		GROUP BY b.partID , b.rohs, b.complientWithAssy  \n" +
                "		ORDER BY complientWithAssy;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP VIEW  IF EXISTS `vu_release_plan_detail`;  \n" +
                "CREATE VIEW `vu_release_plan_detail` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`id` AS `id`,  \n" +
                "        `a`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "        `a`.`refAssyId` AS `refAssyId`,  \n" +
                "        `a`.`subAssyID` AS `subAssyID`,  \n" +
                "        `a`.`plannKitNumber` AS `plannKitNumber`,  \n" +
                "        `a`.`poQty` AS `poQty`,  \n" +
                "        `a`.`poDueDate` AS `poDueDate`,  \n" +
                "        `a`.`mfrLeadTime` AS `mfrLeadTime`,  \n" +
                "        `a`.`materialDockDate` AS `materialDockDate`,  \n" +
                "        `a`.`kitReleaseQty` AS `kitReleaseQty`,  \n" +
                "        `a`.`kitReleaseDate` AS `kitReleaseDate`,  \n" +
                "        (SELECT  \n" +
                "                MIN((CASE  \n" +
                "                        WHEN  \n" +
                "                            (`k`.`connecterTypeID` = -(2))  \n" +
                "                        THEN  \n" +
                "                            IFNULL((`k`.`allocatedpin` / (`k`.`qpaWithDnp` * `k`.`bomNumOfPosition`)),  \n" +
                "                                    0)  \n" +
                "                        ELSE IFNULL((`k`.`allocatedunit` / `k`.`qpaWithDnp`),  \n" +
                "                                0)  \n" +
                "                    END))  \n" +
                "            FROM  \n" +
                "                `vu_kit_allocation_detail` `k`  \n" +
                "            WHERE  \n" +
                "                ((`k`.`refSalesorderdetid` = `a`.`salesOrderDetID`)  \n" +
                "                    AND (`k`.`assyID` = IFNULL(`a`.`subAssyID`, `a`.`refAssyId`)))) AS `feasibilityWithAllocatedQty`,  \n" +
                "        `a`.`actualKitReleaseDate` AS `actualKitReleaseDate`,  \n" +
                "        `a`.`releasedBy` AS `releasedBy`,  \n" +
                "        FUN_GETUSERNAMEBYID(`a`.`releasedBy`) AS `releasedByName`,  \n" +
                "        `a`.`releaseTimeFeasibility` AS `releaseTimeFeasibility`,  \n" +
                "        `a`.`kitStatus` AS `kitStatus`,  \n" +
                "        (CASE  \n" +
                "            WHEN  \n" +
                "                ((`a`.`kitStatus` = 'P')  \n" +
                "                    AND (`a`.`kitReleaseDate` <= STR_TO_DATE(FUN_CONVERTUTCDATETODATAKEYTIMEZONE(FUN_DATETIMETOUTCDATETIME()),  \n" +
                "                        '%m/%d/%Y')))  \n" +
                "            THEN  \n" +
                "                TRUE  \n" +
                "            ELSE FALSE  \n" +
                "        END) AS `rushJob`,  \n" +
                "        `a`.`woID` AS `woID`,  \n" +
                "        `w`.`woNumber` AS `workorderNumber`,  \n" +
                "        `w`.`woStatus` AS `woStatusID`,  \n" +
                "        `w`.`woSubStatus` AS `woSubStatusID`,  \n" +
                "        `a`.`refPlanId` AS `refPlanId`,  \n" +
                "        `a`.`releasedNote` AS `releasedNote`,  \n" +
                "        `a`.`releaseKitNumber` AS `releaseKitNumber`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`kitReturnStatus` IS NOT NULL) THEN `a`.`kitReturnStatus`  \n" +
                "            WHEN (`a`.`kitStatus` = 'R') THEN 'NR'  \n" +
                "            ELSE 'NA'  \n" +
                "        END) AS `kitReturnStatus`,  \n" +
                "        `a`.`kitReturnDate` AS `kitReturnDate`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`subAssyID` IS NOT NULL) THEN 0  \n" +
                "            ELSE (SELECT  \n" +
                "                    COUNT(1)  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sassy`  \n" +
                "                WHERE  \n" +
                "                    ((`sassy`.`salesOrderDetID` = `a`.`salesOrderDetID`)  \n" +
                "                        AND (`sassy`.`refAssyId` = `a`.`refAssyId`)  \n" +
                "                        AND (`sassy`.`subAssyID` IS NOT NULL)  \n" +
                "                        AND (`sassy`.`plannKitNumber` = `a`.`plannKitNumber`)))  \n" +
                "        END) AS `subAssyReleaseCount`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`subAssyID` IS NOT NULL) THEN 0  \n" +
                "            ELSE (SELECT  \n" +
                "                    COUNT(1)  \n" +
                "                FROM  \n" +
                "                    `salesorder_plan_detailsmst` `sassy`  \n" +
                "                WHERE  \n" +
                "                    ((`sassy`.`salesOrderDetID` = `a`.`salesOrderDetID`)  \n" +
                "                        AND (`sassy`.`refAssyId` = `a`.`refAssyId`)  \n" +
                "                        AND (`sassy`.`subAssyID` IS NOT NULL)  \n" +
                "                        AND (`sassy`.`plannKitNumber` = `a`.`plannKitNumber`)  \n" +
                "                        AND (`sassy`.`kitStatus` = 'R')))  \n" +
                "        END) AS `subAssyReleasedCount`  \n" +
                "    FROM  \n" +
                "        (`vu_kit_plans` `a`  \n" +
                "        LEFT JOIN `workorder` `w` ON ((`a`.`woID` = `w`.`woID`)));  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetReleaseReturnHistoryList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReleaseReturnHistoryList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pSalesOrderDetID INT,  \n" +
                "    IN pRefAssyId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetReleaseReturnHistoryList = CONCAT(\"  \n" +
                "		SELECT 	rrh.id, rrh.refPlanId, rrh.salesOrderDetID, rrh.woID, rrh.refAssyId, rrh.plannKitNumber,  \n" +
                "                rrh.releaseStatus, rrh.releasedNote, rrh.releaseKitNumber, rrh.returnStatus,  \n" +
                "                (CASE WHEN returnStatus = 'FR' THEN  \n" +
                "						'Fully Returned'  \n" +
                "					WHEN returnStatus = 'RS' THEN  \n" +
                "							'Returned With Shortage'  \n" +
                "					WHEN returnStatus = 'PR' THEN  \n" +
                "							'Partially Returned'  \n" +
                "					WHEN returnStatus = 'RR' THEN  \n" +
                "							'Ready To Return'  \n" +
                "					WHEN returnStatus = 'NR' THEN  \n" +
                "							'Not Returned'  \n" +
                "				ELSE 'N/A' END) AS returnStatusValue,  \n" +
                "                IF(returnStatus = 'R', 'Released', 'Pending') AS releaseStatusValue,  \n" +
                "                fun_getWorkorderNumberByID(rrh.woID) woNumber,  \n" +
                "                fun_getUserNameByID(rrh.releasedBy) releasedBy,  \n" +
                "                fun_getUserNameByID(rrh.returnBy) returnBy,  \n" +
                "				fun_getUserNameByID(rrh.updatedBy) updatedby,  \n" +
                "				fun_getRoleByID(rrh.updateByRoleId) updatedbyRole,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(rrh.releaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') releaseDate,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(rrh.returnDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') returnDate,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(rrh.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "		FROM 	kit_release_return_trans_history rrh  \n" +
                "		WHERE   rrh.isDeleted = 0 AND rrh.salesOrderDetID = \",pSalesOrderDetID,\" AND  rrh.refAssyId = \",pRefAssyId,\"  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY id DESC \") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1=1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetReleaseReturnHistoryList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT a.* FROM ( \", @temp_Sproc_GetReleaseReturnHistoryList,\" ) a WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveKitAllocationList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveKitAllocationList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pRefSalesOrderDetailId INT,  \n" +
                "	IN pLineId INT,  \n" +
                "    IN pShortageLines BOOLEAN,  \n" +
                "	IN pPackagingAlias BOOLEAN,  \n" +
                "	IN pFunctionalType VARCHAR(1000),  \n" +
                "	IN pMountingType VARCHAR(1000),  \n" +
                "	IN pCartType VARCHAR(1000),  \n" +
                "	IN pWarehouse VARCHAR(1000),  \n" +
                "	IN pFeasibilityQty INT,  \n" +
                "	IN pIsCallFromFeasibility BOOLEAN,  \n" +
                "	IN pCustomerId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE pAllocatedSharedCount INT;  \n" +
                "	DECLARE pKitQty INT DEFAULT 0;  \n" +
                "	DECLARE pWhereLineId VARCHAR(500);  \n" +
                "	DECLARE vCartLineId VARCHAR(16383);  \n" +
                "	DECLARE vWHLineId VARCHAR(16383);  \n" +
                "	DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	SET vFilterWhereClause = '';  \n" +
                "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	IF (pLineId != 0) THEN  \n" +
                "		SET pWhereLineId = CONCAT(\" AND k.lineID = \", pLineId);  \n" +
                "	ELSE  \n" +
                "		SET pWhereLineId = ' AND 1 = 1';  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineID ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1 = 1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pFunctionalType IS NOT NULL AND pFunctionalType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND parttypeID in (', pFunctionalType, ') ');  \n" +
                "	END IF;  \n" +
                "	IF(pMountingType IS NOT NULL AND pMountingType != '') THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND mountingtypeID in (', pMountingType, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pShortageLines = 1) THEN  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND shortagePerBuildQty > 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF((pCartType IS NOT NULL AND pCartType != '') OR (pWarehouse IS NOT NULL AND pWarehouse != '')) THEN  \n" +
                "		SELECT 		GROUP_CONCAT(ka.refBOMLineID) INTO vCartLineId  \n" +
                "		FROM 		kit_allocation ka  \n" +
                "		INNER JOIN 	component_sid_stock css ON css.id = ka.refUIDId  \n" +
                "		INNER JOIN	binmst b ON css.binID = b.id  \n" +
                "		INNER JOIN 	warehousemst w ON b.WarehouseID = w.ID  \n" +
                "		WHERE 		ka.refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "		AND 		ka.assyID = pPartId  \n" +
                "		AND 		ka.`status` = 'A'  \n" +
                "        AND			(CASE WHEN (pWarehouse IS NOT NULL AND pWarehouse != '')  \n" +
                "							THEN FIND_IN_SET( w.ID, pWarehouse)  \n" +
                "                            ELSE FIND_IN_SET(IFNULL(w.cartMfr, '-1'), pCartType)  \n" +
                "					END)  \n" +
                "		AND 		css.isDeleted = 0 ;  \n" +
                "  \n" +
                "		IF (vCartLineId IS NOT NULL AND vCartLineId != '') THEN  \n" +
                "			SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND refRfqLineitem in (', vCartLineId, ') ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	IF (pIsCallFromFeasibility AND pFeasibilityQty IS NOT NULL) THEN  \n" +
                "		SET pKitQty = IFNULL(pFeasibilityQty, 0);  \n" +
                "		SET vFilterWhereClause = CONCAT(vFilterWhereClause, ' AND ShortagePerBuildWithAvailableQty > 0 ');  \n" +
                "	ELSE  \n" +
                "		SELECT 	IFNULL(totalAssyBuildQty, 0)  \n" +
                "		INTO 	pKitQty  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	partId = pPartId  \n" +
                "				AND refSalesOrderDetID = pRefSalesOrderDetailId  \n" +
                "				AND isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "	SET @vFromSQLQuery = CONCAT('  \n" +
                "		SELECT	*, IF(scrappedUnit > 0, ROUND(((IFNULL(scrappedUnit ,0)/requiredQtyBuild) * 100), 2), 0) perScrapQty  \n" +
                "		FROM	(  \n" +
                "				SELECT 		c.id, 				refSalesOrderDetID, 		partID, 			qpa, 			dnpQty,  \n" +
                "							lineID,     		uomID,						unitName,			uomClassID,  	isPurchase,  \n" +
                "                            parttypeID,			partTypeName, 	            c.mountingtypeID,  \n" +
                "                            (IFNULL(consumeUnits,0) -  IFNULL(c.requiredQtyBuild,0)) scrappedUnit,  \n" +
                "                            IF(isPurchase  = 1,\"No\" ,\"Yes\") AS isCustConsignValue,  \n" +
                "                            mountingTypeName as name,						requiredQtyBuild,  \n" +
                "                            requirePinsBuild,	mfgPN,    		            mfgPNIdsWithPackaging,				allocatedQty,  \n" +
                "                            c.allocatedUnit,	allocatedPins,				scrapedPins,                        allocated_shared,  \n" +
                "                            freeToShareAmongOtherKits,						allocatedSTKPosition,   			consumeUnits,  \n" +
                "                            consumeQty,        consumePin, 					isInstall,							isBuyDNPQty,  \n" +
                "                            description,	   custPNID,                    custPN,  							custPIDCode,  \n" +
                "                            custIsCustom,      restrictCPNUseWithPermissionStep, 			                    restrictCPNUsePermanentlyStep,  \n" +
                "                            restrictCPNUseInBOMStep,        				restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,          	cpnRoHsIcon,							cpnRoHsName,  \n" +
                "                            uomMismatchedStep,      						isNotRequiredKitAllocation, 			isNotRequiredKitAllocationValue,  \n" +
                "                            notRequiredKitAllocationReason,                 refRfqLineitem, 						rfqLineItemsId,  \n" +
                "                            c.numOfPosition,								mfgPart, 								c.connecterTypeID,  \n" +
                "							(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits)) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + + c.consumeUnits)) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildQty,  \n" +
                "                            (  \n" +
                "								CASE  \n" +
                "                                    WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 OR c.connecterTypeID <> -2 OR c.connecterTypeID IS NULL THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + c.consumePin)) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(qpa, 0) * ', pKitQty ,' * IFNULL(c.numOfPosition, 0)) - (c.allocatedPins + + c.consumePin)) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildPins,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 THEN 0  \n" +
                "									ELSE  \n" +
                "										 CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "										 ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedUnit + c.consumeUnits) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailableQty,  \n" +
                "                            (  \n" +
                "								CASE  \n" +
                "                                    WHEN c.uomMismatchedStep = 0 OR c.isNotRequiredKitAllocation = 1 OR c.connecterTypeID <> -2 OR c.connecterTypeID IS NULL THEN 0  \n" +
                "									ELSE  \n" +
                "										CASE WHEN (((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedPins + c.consumePin) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) < 0) THEN 0  \n" +
                "										ELSE ((IFNULL(c.qpa, 0) * ', pKitQty ,') - (c.allocatedPins + c.consumePin) - (SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0 OR (d.customerConsign = 1 AND d.customerID = ', pCustomerId ,'),IFNULL(d.availableStock, 0),0)),0)))) END  \n" +
                "								END  \n" +
                "							) shortagePerBuildWithAvailablePins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID = ', pCustomerId ,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins  \n" +
                "					FROM	(  \n" +
                "							SELECT 		a.id, 			refSalesOrderDetID, 			partID, 			qpa, 			dnpQty,  \n" +
                "										lineID,     	uomID,							unitName,			uomClassID,		parttypeID,  \n" +
                "										partTypeName, 	mountingtypeID,					mountingTypeName,  	isPurchase,  \n" +
                "										(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(', pKitQty, ', 0)) END) requiredQtyBuild,  \n" +
                "										(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)  \n" +
                "											THEN 0  \n" +
                "											ELSE (qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0))  \n" +
                "										END) requirePinsBuild,  \n" +
                "										mfgPN AS mfgPN,  \n" +
                "										mfgPNIdsWithPackaging AS mfgPNIdsWithPackaging    ,  \n" +
                "										IFNULL(allocatedQty, 0) allocatedQty,			IFNULL(allocatedUnit, 0) allocatedUnit,  \n" +
                "                                        IFNULL(allocatedPins, 0) allocatedPins,  \n" +
                "										IFNULL(scrapedPins, 0) scrapedPins,          	allocated_shared,  \n" +
                "										(  \n" +
                "											CASE  \n" +
                "												WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) != -2) AND ((allocatedUnit - ((qpa * IFNULL(', pKitQty, ', 0)) - consumeUnits)) > 0) THEN  \n" +
                "													allocatedUnit - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   < 0 then 0 else  ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0)) - consumeUnits)   end)  \n" +
                "												WHEN (IFNULL(connecterTypeID, 0) = -2) AND ((allocatedPins - ((qpa * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin)) > 0) THEN  \n" +
                "													allocatedPins - (case when ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) < 0 then 0 else ((ifnull(qpa,0) * IFNULL(', pKitQty, ', 0) * IFNULL(numOfPosition, 0)) - consumePin) end)  \n" +
                "												ELSE 0  \n" +
                "											END  \n" +
                "										) freeToShareAmongOtherKits,  \n" +
                "									allocatedSTKPosition,   	consumeUnits, 		consumeQty,       consumePin, 		isInstall,  \n" +
                "									isBuyDNPQty,				description,		custPNID,         custPN,  			custPIDCode,  \n" +
                "                                    custIsCustom,              	restrictCPNUseWithPermissionStep, 	  restrictCPNUsePermanentlyStep,  \n" +
                "									restrictCPNUseInBOMStep,    restrictPackagingUsePermanently, 	  restrictPackagingUseWithpermission,  \n" +
                "									cpnRoHsIcon,				cpnRoHsName,		uomMismatchedStep,                   isNotRequiredKitAllocation,  \n" +
                "									isNotRequiredKitAllocationValue, 				notRequiredKitAllocationReason,  \n" +
                "									a.refRfqLineitem, 			rfqLineItemsId, 	numOfPosition,	  mfgPart, 			connecterTypeID  \n" +
                "						FROM  \n" +
                "						(  \n" +
                "								SELECT 	k.id,				k.refSalesOrderDetID, 					k.partID,  k.isPurchase,  \n" +
                "										(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "												THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "												ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "										END) AS qpa,  		IFNULL(k.dnpQty, 0) dnpQty,          	k.lineID,  \n" +
                "										k.uomID,			u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "										kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,  \n" +
                "										kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,  \n" +
                "										k.refRfqLineitem,	k.refRfqLineitem AS rfqLineItemsId,   	k.numOfPosition,  \n" +
                "										IFNULL(ka.allocatedQty,0) allocatedQty,						IFNULL(ka.allocatedUnit,0) allocatedUnit,  \n" +
                "										IFNULL(ka.allocatedPins,0) allocatedPins,					IFNULL(ka.scrapedPins,0) scrapedPins,  \n" +
                "										IFNULL(ka.allocated_shared, 0) allocated_shared,       		IFNULL(ka.allocatedSTKPosition, 0) allocatedSTKPosition,  \n" +
                "										IFNULL(ka.consumeUnits, 0) consumeUnits, 					IFNULL(ka.consumeQty, 0) consumeQty,  \n" +
                "                                        IFNULL(ka.consumePin, 0) consumePin,  \n" +
                "										k.isInstall,		k.isBuyDNPQty,          				CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,  \n" +
                "										k.restrictCPNUseWithPermissionStep,	                        k.restrictCPNUsePermanentlyStep,  \n" +
                "                                        k.restrictCPNUseInBOMStep,				                    k.isNotRequiredKitAllocation,  \n" +
                "                                        (CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "										k.notRequiredKitAllocationReason,							k.custPNID, 					k.custPN,  \n" +
                "										FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,				cpnCom.isCustom custIsCustom,	cpnCom.restrictPackagingUsePermanently,  \n" +
                "										cpnCom.restrictPackagingUseWithpermission,					FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,  \n" +
                "										FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,		kl.uomMismatchedStep,			kl.connecterTypeID,  \n" +
                "										(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	kal.refSalesOrderDetID,		 kal.partID, 	kal.refRfqLineitem, 	group_concat(c.id) mfgPart,  \n" +
                "												max(c.connecterTypeID) connecterTypeID,  \n" +
                "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */  \n" +
                "														then min(c.functionalCategoryID)  \n" +
                "                                                        when min(c.functionalCategoryID) !=  max(c.functionalCategoryID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.functionalCategoryID ELSE null END))  \n" +
                "														else -1 /* MisMatched */  \n" +
                "												end) parttypeID,  \n" +
                "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "															then  min(c.mountingTypeID)  \n" +
                "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))  \n" +
                "														else  -1  \n" +
                "												end) mountingTypeID,  \n" +
                "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "												group_concat(kal.description) AS description  \n" +
                "										FROM 	kit_allocation_lineitems_alternatepart kal  \n" +
                "										JOIN 	component c on kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "										WHERE	kal.refSalesOrderDetID =  ', pRefSalesOrderDetailId , '  \n" +
                "												AND 	kal.partID =  ', pPartId, '  \n" +
                "												AND 	kal.isDeleted = 0  \n" +
                "												AND		c.isDeleted = 0  \n" +
                "										GROUP BY  kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "									) AS kl  \n" +
                "							inner join 	kit_allocation_lineitems k on k.refSalesOrderDetID = kl.refSalesOrderDetID and k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem ', pWhereLineId ,'  \n" +
                "							INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "							left join 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0  \n" +
                "							left outer join vu_kit_allocation_summary ka on kl.refSalesOrderDetID = ka.refSalesOrderDetID  \n" +
                "												AND kl.partID = ka.assyID  \n" +
                "												AND kl.refRfqLineitem = ka.refBOMLineID  \n" +
                "							where 		 k.isDeleted = 0  \n" +
                "						) AS a      inner join  \n" +
                "									(                        SELECT        a.id, a.refRfqLineitem  ,  \n" +
                "                GROUP_CONCAT(a.mfgPNID)  AS mfgPNIdsWithPackaging        ,  \n" +
                "			GROUP_CONCAT(  \n" +
                "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
                "				a.RoHSStatusID,''@@@'',  \n" +
                "				IFNULL(a.name,\"\"),''@@@'',  \n" +
                "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
                "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
                "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
                "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
                "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
                "				a.mfgCode,''@@@'',  \n" +
                "				a.mfgPNID,''@@@'',  \n" +
                "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
                "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
                "                IFNULL(a.mismatchFunctionalCategoryStep,0) ,''@@@'' ,  \n" +
                "                IFNULL(a.leadTime,0)  \n" +
                "                SEPARATOR \"', v_GroupConcatSeparator ,'\")     mfgpn  \n" +
                "			FROM  \n" +
                "			( select z.id,z.refRfqLineitem,z.mfgPNID,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
                "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
                "                        approvedMountingType,  \n" +
                "                        mismatchMountingTypeStep,  \n" +
                "                        mismatchFunctionalCategoryStep,  \n" +
                "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
                "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
                "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
                "                        z.feature, z.mfgpn,z.isDocumentUpload,  z.leadTime,  \n" +
                "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
                "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
                "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
                "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
                "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
                "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
                "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
                "						  from  \n" +
                "							(SELECT l.id,l.refRfqLineitem ,  \n" +
                "                            IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
                "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
                "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
                "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
                "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
                "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
                "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
                "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
                "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
                "									ELSE    /*Packaging Alias*/  \n" +
                "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                "									END AS restrictUsePermanentlyStep,  \n" +
                "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
                "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
                "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
                "									ELSE     /*Packaging Alias*/  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
                "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
                "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
                "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
                "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
                "									IFNULL(d.leadTime,c.leadTime) AS leadTime,  \n" +
                "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
                "									FROM kit_allocation_lineitems_alternatepart  al  \n" +
                "									JOIN kit_allocation_lineitems l ON  l.refRfqLineitem = al.refRfqLineitem  \n" +
                "									JOIN component c ON al.mfgPNID = c.id  \n" +
                "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
                "									and  not exists ( select 1  from  kit_allocation_lineitems_alternatepart x  \n" +
                "													where  x.refRfqLineitem  =  al.refRfqLineitem  \n" +
                "															 and x.mfgpnid = d.id  \n" +
                "															 and d.id != c.id and x.isdeleted = 0)  \n" +
                "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID =', pCustomerId ,' AND ccl.isDeleted = 0  \n" +
                "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID =', pCustomerId ,' AND ccld.isDeleted = 0  \n" +
                "									WHERE l.refSalesOrderDetid = ', pRefSalesOrderDetailId , '  \n" +
                "									 AND al.isDeleted = 0 AND c.isGoodPart = 1 ',  \n" +
                "									CASE WHEN (pPackagingAlias = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
                "							) z group by z.id,z.refRfqLineitem , z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload, z.leadTime  \n" +
                "							) a group by a.id, a.refRfqLineitem  \n" +
                "							) as mfgpartdetail  on a.id = mfgpartdetail.id  \n" +
                "					) AS c  \n" +
                "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))  \n" +
                "					GROUP BY 	c.id, 				refSalesOrderDetID, 		partID, 				qpa, 					dnpQty,  \n" +
                "								lineID,     		uomID,						unitName,				parttypeID,				partTypeName,  \n" +
                "								c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,   	requirePinsBuild,		mfgPN,  \n" +
                "								mfgPNIdsWithPackaging,							allocatedQty,			allocatedUnit,			allocatedPins,  \n" +
                "                                scrapedPins,        allocated_shared,			freeToShareAmongOtherKits,						allocatedSTKPosition,  \n" +
                "                                consumeUnits, 		consumeQty,          		consumePin, 			isInstall,				isBuyDNPQty,  \n" +
                "                                description,		custPNID,                   custPN,  				custPIDCode, 			custIsCustom,  \n" +
                "                                restrictCPNUseWithPermissionStep, 				restrictCPNUsePermanentlyStep, 					restrictCPNUseInBOMStep,  \n" +
                "                                restrictPackagingUsePermanently, 		        restrictPackagingUseWithpermission,          	cpnRoHsIcon,  \n" +
                "                                cpnRoHsName,		uomMismatchedStep,          isNotRequiredKitAllocation, 					isNotRequiredKitAllocationValue,  \n" +
                "                                notRequiredKitAllocationReason,                 refRfqLineitem, 		rfqLineItemsId, 		c.numOfPosition,  \n" +
                "                                mfgPart, 			c.connecterTypeID,			uomClassID,				scrappedUnit  \n" +
                "		) As mainData  \n" +
                "			WHERE 1 = 1 ', vFilterWhereClause  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_rfqLineItemsKitsResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_rfqLineItemsKitsResult AS \", @vFromSQLQuery, \" \" , pOrderBy, \" \", rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "    SET @SQLStatement1 = CONCAT(\"SELECT COUNT(1) as 'COUNT(*)' from temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT * FROM temp_rfqLineItemsKitsResult WHERE \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "    SET @SQLStatement3 = CONCAT(\"SELECT GROUP_CONCAT(TRIM(lineID)+0) AS 'UOMMismatchLine' from temp_rfqLineItemsKitsResult  WHERE \", pWhereClause,\" AND uomMismatchedStep = 0\");  \n" +
                "  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) AS 'BOMLineCount' FROM rfq_lineitems_alternatepart WHERE partID = \", pPartId ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE temp_rfqLineItemsKitsResult;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5690,'2.00','V1',' Task 39510: Manage kit list global points and filter changes - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5690:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-12-2021 *********************************** */
                "ALTER VIEW `vu_workorder_summary_stk` AS  \n" +
                "  SELECT  \n" +
                "    `a`.`woid` AS `woid`,  \n" +
                "    `a`.`woNumber` AS `woNumber`,  \n" +
                "    `a`.`woVersion` AS `woVersion`,  \n" +
                "    `a`.`partID` AS `partID`,  \n" +
                "    `a`.`buildQty` AS `buildQty`,  \n" +
                "    `a`.`customerID` AS `customerID`,  \n" +
                "    IFNULL (SUM(`a`.`buildOverageQty`), 0) AS `buildOverageQty`,  \n" +
                "    IFNULL (SUM(`a`.`POQty`), 0) AS `poQty`,  \n" +
                "    IFNULL (SUM(`a`.`initialStockPoQty`), 0) AS `initialStockPoQty`,  \n" +
                "    IFNULL (SUM(`a`.`ShippedQty`), 0) AS `shippedQty`,  \n" +
                "    IFNULL (SUM(`a`.`ScrapQty`), 0) AS `scrapQty`,  \n" +
                "    (  \n" +
                "      IFNULL (SUM(`a`.`readytoShipQty`), 0) - IFNULL (SUM(`a`.`stockAdjustmentQty`), 0)  \n" +
                "    ) AS `readytoShipQty`,  \n" +
                "    IFNULL (SUM(`a`.`readytoShipQty`), 0) AS `readytoShipQtyWithStockAdjustment`,  \n" +
                "    IFNULL (SUM(`a`.`stockAdjustmentQty`), 0) AS `stockAdjustmentQty`,  \n" +
                "    IFNULL (  \n" +
                "      SUM(  \n" +
                "        `a`.`stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "      ),  \n" +
                "      0  \n" +
                "    ) AS `stockAdjustmentQtyWithFinalAdjustment`,  \n" +
                "    SUM(`a`.`wipQty`) AS `wipQty`,  \n" +
                "    SUM(`a`.`firstOPtotalQty`) AS `firstOPtotalQty`  \n" +
                "  FROM  \n" +
                "    (SELECT  \n" +
                "      `wo`.`woID` AS `woid`,  \n" +
                "      `wo`.`woNumber` AS `woNumber`,  \n" +
                "      `wo`.`woVersion` AS `woVersion`,  \n" +
                "      `wo`.`partID` AS `partID`,  \n" +
                "      `wo`.`buildQty` AS `buildQty`,  \n" +
                "      `wo`.`customerID` AS `customerID`,  \n" +
                "      SUM(`wo`.`excessQty`) AS `buildOverageQty`,  \n" +
                "      IFNULL (SUM(`wsd`.`Poqty`), 0) AS `POQty`,  \n" +
                "      0 AS `initialStockPoQty`,  \n" +
                "      IFNULL (SUM(`scrp`.`ScrapQty`), 0) AS `ScrapQty`,  \n" +
                "      IFNULL (SUM(`sh`.`shippedqty`), 0) AS `ShippedQty`,  \n" +
                "      (  \n" +
                "        IFNULL (  \n" +
                "          SUM(  \n" +
                "            `res`.`stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "          ),  \n" +
                "          0  \n" +
                "        ) - IFNULL (SUM(`sh`.`shippedqty`), 0)  \n" +
                "      ) AS `readytoShipQty`,  \n" +
                "      IFNULL (SUM(`res`.`openingstock`), 0) AS `stockAdjustmentQty`,  \n" +
                "      IFNULL (  \n" +
                "        SUM(  \n" +
                "          `res`.`stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "        ),  \n" +
                "        0  \n" +
                "      ) AS `stockAdjustmentQtyWithFinalAdjustment`,  \n" +
                "      IFNULL (SUM(`fpq`.`firstOPtotalQty`), 0) AS `firstOPtotalQty`,  \n" +
                "      (  \n" +
                "        CASE  \n" +
                "          WHEN (  \n" +
                "            (  \n" +
                "              IFNULL (`wo`.`buildQty`, 0) - (  \n" +
                "                IFNULL (SUM(`scrp`.`ScrapQty`), 0) + IFNULL (  \n" +
                "                  SUM(  \n" +
                "                    `res`.`stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "                  ),  \n" +
                "                  0  \n" +
                "                )  \n" +
                "              )  \n" +
                "            ) < 0  \n" +
                "          )  \n" +
                "          THEN 0  \n" +
                "          ELSE (  \n" +
                "            IFNULL (`wo`.`buildQty`, 0) - (  \n" +
                "              IFNULL (SUM(`scrp`.`ScrapQty`), 0) + IFNULL (  \n" +
                "                SUM(  \n" +
                "                  `res`.`stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "                ),  \n" +
                "                0  \n" +
                "              )  \n" +
                "            )  \n" +
                "          )  \n" +
                "        END  \n" +
                "      ) AS `wipQty`  \n" +
                "    FROM  \n" +
                "      (  \n" +
                "        (  \n" +
                "          (  \n" +
                "            (  \n" +
                "              (  \n" +
                "                `workorder` `wo`  \n" +
                "                LEFT JOIN  \n" +
                "                  (SELECT  \n" +
                "                    `workorder_salesorder_details`.`woID` AS `woid`,  \n" +
                "                    SUM(  \n" +
                "                      `workorder_salesorder_details`.`poQty`  \n" +
                "                    ) AS `Poqty`  \n" +
                "                  FROM  \n" +
                "                    `workorder_salesorder_details`  \n" +
                "                  WHERE (  \n" +
                "                      `workorder_salesorder_details`.`isDeleted` = 0  \n" +
                "                    )  \n" +
                "                  GROUP BY `workorder_salesorder_details`.`woID`) `wsd`  \n" +
                "                  ON ((`wsd`.`woid` = `wo`.`woID`))  \n" +
                "              )  \n" +
                "              LEFT JOIN  \n" +
                "                (SELECT  \n" +
                "                  `wt`.`woID` AS `woid`,  \n" +
                "                  SUM(`wp`.`scrapQty`) AS `ScrapQty`  \n" +
                "                FROM  \n" +
                "                  (  \n" +
                "                    `workorder_trans` `wt`  \n" +
                "                    JOIN `workorder_trans_production` `wp`  \n" +
                "                      ON (  \n" +
                "                        (  \n" +
                "                          `wt`.`woTransID` = `wp`.`woTransID`  \n" +
                "                        )  \n" +
                "                      )  \n" +
                "                  )  \n" +
                "                WHERE (  \n" +
                "                    (`wt`.`isDeleted` = 0)  \n" +
                "                    AND (`wp`.`isDeleted` = 0)  \n" +
                "                  )  \n" +
                "                GROUP BY `wt`.`woID`) `scrp`  \n" +
                "                ON ((`scrp`.`woid` = `wo`.`woID`))  \n" +
                "            )  \n" +
                "            LEFT JOIN  \n" +
                "              (SELECT  \n" +
                "                `shippedassembly`.`workorderID` AS `workorderid`,  \n" +
                "                SUM(`shippedassembly`.`shippedqty`) AS `shippedqty`  \n" +
                "              FROM  \n" +
                "                `shippedassembly`  \n" +
                "              WHERE (  \n" +
                "                  `shippedassembly`.`isDeleted` = 0  \n" +
                "                )  \n" +
                "              GROUP BY `shippedassembly`.`workorderID`) `sh`  \n" +
                "              ON ((`sh`.`workorderid` = `wo`.`woID`))  \n" +
                "          )  \n" +
                "          LEFT JOIN  \n" +
                "            (SELECT  \n" +
                "              `astock`.`woID` AS `woid`,  \n" +
                "              IFNULL (  \n" +
                "                SUM(  \n" +
                "                  (  \n" +
                "                    CASE  \n" +
                "                      WHEN (`astock`.`type` = 'AS')  \n" +
                "                      THEN `astock`.`openingStock`  \n" +
                "                      ELSE 0  \n" +
                "                    END  \n" +
                "                  )  \n" +
                "                ),  \n" +
                "                0  \n" +
                "              ) AS `openingstock`,  \n" +
                "              IFNULL (SUM(`astock`.`openingStock`), 0) AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "            FROM  \n" +
                "              `assemblystock` `astock`  \n" +
                "            WHERE (  \n" +
                "                (`astock`.`isDeleted` = 0)  \n" +
                "                AND (`astock`.`woID` IS NOT NULL)  \n" +
                "              )  \n" +
                "            GROUP BY `astock`.`woID`,  \n" +
                "              `astock`.`woNumber`,  \n" +
                "              `astock`.`partID`) `res`  \n" +
                "            ON ((`res`.`woid` = `wo`.`woID`))  \n" +
                "        )  \n" +
                "        LEFT JOIN  \n" +
                "          (SELECT  \n" +
                "            `workorder_trans`.`woID` AS `woID`,  \n" +
                "            SUM(  \n" +
                "              `workorder_trans_production`.`totalQty`  \n" +
                "            ) AS `firstOPtotalQty`  \n" +
                "          FROM  \n" +
                "            (  \n" +
                "              `workorder_trans_production`  \n" +
                "              JOIN `workorder_trans`  \n" +
                "                ON (  \n" +
                "                  (  \n" +
                "                    (  \n" +
                "                      `workorder_trans_production`.`woTransID` = `workorder_trans`.`woTransID`  \n" +
                "                    )  \n" +
                "                    AND `workorder_trans`.`opID` IN  \n" +
                "                    (SELECT  \n" +
                "                      `FUN_GETFIRSTOPERATIONID` (`workorder_trans`.`woID`))  \n" +
                "                  )  \n" +
                "                )  \n" +
                "            )  \n" +
                "          WHERE (  \n" +
                "              (  \n" +
                "                `workorder_trans_production`.`isDeleted` = 0  \n" +
                "              )  \n" +
                "              AND (  \n" +
                "                `workorder_trans`.`isDeleted` = 0  \n" +
                "              )  \n" +
                "            )  \n" +
                "          GROUP BY `workorder_trans`.`woID`) `fpq`  \n" +
                "          ON ((`fpq`.`woID` = `wo`.`woID`))  \n" +
                "      )  \n" +
                "    WHERE (`wo`.`isDeleted` = 0)  \n" +
                "    GROUP BY `wo`.`woID`,  \n" +
                "      `wo`.`woNumber`,  \n" +
                "      `wo`.`woVersion`,  \n" +
                "      `wo`.`partID`,  \n" +
                "      `wo`.`buildQty`,  \n" +
                "      `wo`.`customerID`  \n" +
                "    UNION  \n" +
                "    ALL  \n" +
                "    SELECT  \n" +
                "      `a`.`woid` AS `woid`,  \n" +
                "      `a`.`woNumber` AS `woNumber`,  \n" +
                "      NULL AS `woVersion`,  \n" +
                "      `a`.`partID` AS `partID`,  \n" +
                "      0 AS `buildQty`,  \n" +
                "      NULL AS `customerID`,  \n" +
                "      0 AS `buildOverageQty`,  \n" +
                "      0 AS `POQty`,  \n" +
                "      MAX(`a`.`initialStockPoQty`) AS `initialStockPoQty`,  \n" +
                "      0 AS `ScrapQty`,  \n" +
                "      SUM(`a`.`ShippedQty`) AS `ShippedQty`,  \n" +
                "      (  \n" +
                "        SUM(  \n" +
                "          `a`.`stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "        ) - SUM(`a`.`ShippedQty`)  \n" +
                "      ) AS `readytoShipQty`,  \n" +
                "      SUM(`a`.`stockAdjustmentQty`) AS `stockAdjustmentQty`,  \n" +
                "      SUM(  \n" +
                "        `a`.`stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "      ) AS `stockAdjustmentQtyWithFinalAdjustment`,  \n" +
                "      0 AS `firstOPtotalQty`,  \n" +
                "      0 AS `wipQty`  \n" +
                "    FROM  \n" +
                "      (SELECT  \n" +
                "        `sh`.`workorderID` AS `woid`,  \n" +
                "        `sh`.`woNumber` AS `woNumber`,  \n" +
                "        `sh`.`partID` AS `partID`,  \n" +
                "        0 AS `initialStockPoQty`,  \n" +
                "        SUM(`sh`.`shippedqty`) AS `ShippedQty`,  \n" +
                "        0 AS `readytoShipQty`,  \n" +
                "        0 AS `stockAdjustmentQty`,  \n" +
                "        0 AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "      FROM  \n" +
                "        `shippedassembly` `sh`  \n" +
                "      WHERE (  \n" +
                "          (`sh`.`isDeleted` = 0)  \n" +
                "          AND (`sh`.`workorderID` IS NULL)  \n" +
                "          AND (`sh`.`woNumber` IS NOT NULL)  \n" +
                "        )  \n" +
                "      GROUP BY `sh`.`workorderID`, `sh`.`woNumber`,  \n" +
                "        `sh`.`partID`  \n" +
                "      UNION  \n" +
                "      ALL  \n" +
                "      SELECT  \n" +
                "        `astock`.`woID` AS `woid`,  \n" +
                "        `astock`.`woNumber` AS `woNumber`,  \n" +
                "        `astock`.`partID` AS `partID`,  \n" +
                "        SUM(`astock`.`poQty`) AS `initialStockPoQty`,  \n" +
                "        0 AS `ShippedQty`,  \n" +
                "        0 AS `readytoShipQty`,  \n" +
                "        IFNULL (  \n" +
                "          SUM(  \n" +
                "            (  \n" +
                "              CASE  \n" +
                "                WHEN (`astock`.`type` = 'AS')  \n" +
                "                THEN `astock`.`openingStock`  \n" +
                "                ELSE 0  \n" +
                "              END  \n" +
                "            )  \n" +
                "          ),  \n" +
                "          0  \n" +
                "        ) AS `stockAdjustmentQty`,  \n" +
                "        IFNULL (SUM(`astock`.`openingStock`), 0) AS `stockAdjustmentQtyWithFinalAdjustment`  \n" +
                "      FROM  \n" +
                "        `assemblystock` `astock`  \n" +
                "      WHERE (  \n" +
                "          (`astock`.`isDeleted` = 0)  \n" +
                "          AND (`astock`.`woID` IS NULL)  \n" +
                "          AND (`astock`.`woNumber` IS NOT NULL)  \n" +
                "        )  \n" +
                "      GROUP BY `astock`.`woID`,`astock`.`woNumber`,  \n" +
                "        `astock`.`partID`) `a`  \n" +
                "    GROUP BY `a`.`woid`, `a`.`woNumber`,  \n" +
                "      `a`.`partID`) `a`  \n" +
                "  GROUP BY `a`.`woid`,  \n" +
                "    `a`.`woNumber`,  \n" +
                "    `a`.`woVersion`,  \n" +
                "    `a`.`partID`,  \n" +
                "    `a`.`buildQty`,  \n" +
                "    `a`.`customerID` ;  \n" +
                /* **************************** Add Script Version -> 24-12-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblyWOStockDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyWOStockDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pWoID INT ,  \n" +
                "    IN pPONumber VARCHAR(255),  \n" +
                "    IN pIsShowAllWO TINYINT,  \n" +
                "    IN pSONumber VARCHAR(255))  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE whereClause1 VARCHAR(500);  \n" +
                "	SET whereClause1 = \"where 1=1\";  \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "    IF pPartID IS NOT NULL THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND PartID = \", pPartID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pWoID IS NOT NULL THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND vu_wss.woID = \", pWoID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPONumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND c.poNumber like \"%' ,pPONumber,'%\" and c.soNumbers like \"%' ,pSONumber,'%\" ' );  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF (pIsShowAllWO IS NOT NULL)  THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND remaningtotalQty > 0 ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @Sproc_GetAssemblyWOStockDetails = CONCAT(\"SELECT vu_wss.* ,  \n" +
                "						(vu_wss.readytoShipQty + vu_wss.shippedQty) AS movedToStockQty ,  \n" +
                "						vu_wosod.totalPOQty, vu_wosod.POQtyValues soPOQty,  \n" +
                "						 vu_wosod.totalMRPQty, vu_wosod.MRPQtyValues soMRPQty,  \n" +
                "                         (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.initialStockPoQty ELSE vu_wss.poQty END) AS initialWOStockPOQty ,  \n" +
                "						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
                "							(SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT poNumber SEPARATOR ',')  \n" +
                "								else GROUP_CONCAT(DISTINCT poNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end	)  \n" +
                "								 FROM `assemblystock`  \n" +
                "								 WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS'  \n" +
                "								 GROUP BY refSalesOrderID, poNumber)  \n" +
                "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.poNumber ELSE parentSaleDtl.poNumber END)  \n" +
                "						   END) poNumber,  \n" +
                "						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
                "							(SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT soNumber SEPARATOR ', ')  \n" +
                "									 else GROUP_CONCAT(DISTINCT soNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end)  \n" +
                "									FROM `assemblystock`  \n" +
                "									WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS'  \n" +
                "								 GROUP BY refSalesOrderID, poNumber)  \n" +
                "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END)  \n" +
                "                            END) soNumbers,  \n" +
                "						vu_wosod.lineID, vu_wosod.salesOrderMstIDs, vu_wosod.SOPOQtyValues ,  \n" +
                "						(CASE WHEN vu_wss.woid IS NULL THEN 'Initial Stock' ELSE 'Work Order Stock' END) AS stockTypeName ,  \n" +
                "                        (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.stockAdjustmentQty ELSE ((vu_wss.buildQty - vu_wss.scrapQty - vu_wss.poQty) + vu_wss.stockAdjustmentQty) END) AS excessFreetoUseQty,  \n" +
                "                        (CASE WHEN vu_wss.woid IS NULL THEN ((vu_wss.readytoShipQty + vu_wss.shippedQty + vu_wss.stockAdjustmentQty) - (vu_wss.shippedQty)) ELSE ((vu_wss.buildQty) - (vu_wss.scrapQty + vu_wss.shippedQty + vu_wss.readytoShipQty)) END) AS remaningtotalQty  \n" +
                "					FROM vu_workorder_summary_stk vu_wss  \n" +
                "						LEFT JOIN (SELECT woID AS woMstID, terminateWOID, isRevisedWO FROM workorder WHERE deletedAt IS NULL) AS wo  \n" +
                "								ON vu_wss.woid = wo.woMstID  \n" +
                "						LEFT JOIN vu_workorder_salesorder_details vu_wosod ON vu_wss.woid =  vu_wosod.woID  \n" +
                "						LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON wo.terminateWOID = parentSaleDtl.woID  \n" +
                "					\", whereClause1);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY woid ASC\");  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyWOStockDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyWOStockDetails,\" ) c where \" , pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "-- select @SQLStatement2;  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-12-2021 *********************************** */
                "ALTER VIEW `vu_customer_packing_slip_qty` AS  \n" +
                " SELECT  \n" +
                "		`a`.`soNumber` AS `soNumbers`,  \n" +
                "         `a`.`poQty` AS `poQty`,  \n" +
                "		`a`.`partID` AS `partID`,  \n" +
                "        `a`.`assyID` AS `assyID`,  \n" +
                "        `a`.`mfgPN` AS `mfgPN`,  \n" +
                "        `a`.`rohsIcon` AS `rohsIcon`,  \n" +
                "        `a`.`rohsName` AS `rohsName`,  \n" +
                "        `a`.`woID` AS `woID`,  \n" +
                "        `a`.`woNumber` AS `woNumber`,  \n" +
                "        `a`.`opStock` AS `opStock`,  \n" +
                "        FUN_GETLASTWOOPIDBYWONUMBER(`a`.`woNumber`) AS `lastWOOPID`,  \n" +
                "        `a`.`availableQty` AS `availableQty`,  \n" +
                "        `a`.`availableQtyWithUMIDStock` AS `availableQtyWithUMIDStock`,  \n" +
                "        `a`.`availableQty` AS `actualAvalilableQty`,  \n" +
                "        NULL AS `selectedQty`,  \n" +
                "        `a`.`totalUMIDCount` AS `totalUMIDCount`,  \n" +
                "        `a`.`totalUMIDCountAfterShipped` AS `totalUMIDCountAfterShipped`,  \n" +
                "        `a`.`departmentName` AS `departmentName`,  \n" +
                "        `a`.`stockType` AS `stockType`,  \n" +
                "        `a`.`stockTypeName` AS `stockTypeName`,  \n" +
                "        `a`.`poNumbers` AS `poNumbers`,  \n" +
                "        `a`.`warehouseName` AS `warehouseName`,  \n" +
                "        `a`.`binName` AS `binName`,  \n" +
                "        `a`.`binID` AS `binID`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            (SUM(`atk`.`openingStock`) - (IFNULL(`css`.`pkgQty`, 0) + (SELECT  \n" +
                "                        IFNULL(SUM(`ss`.`shippedqty`), 0)  \n" +
                "                    FROM  \n" +
                "                        `shippedassembly` `ss`  \n" +
                "                    WHERE  \n" +
                "                        ((`ss`.`isDeleted` = 0)  \n" +
                "                            AND (`ss`.`woNumber` = `atk`.`woNumber`)  \n" +
                "                            AND (`ss`.`partID` = `atk`.`partID`)  \n" +
                "                            AND (`ss`.`stockType` = 'US'))))) AS `opStock`,  \n" +
                "                `atk`.`partID` AS `partID`,  \n" +
                "                `atk`.`woID` AS `woID`,  \n" +
                "                `atk`.`woNumber` AS `woNumber`,  \n" +
                "               MAX(CASE  \n" +
                "                    WHEN (`atk`.`type` = 'AS') THEN 'Adjustment Stock'  \n" +
                "                    WHEN (`atk`.`type` = 'WS') THEN 'Work Order Stock'  \n" +
                "                    WHEN (`atk`.`type` = 'OS') THEN 'Initial Stock'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `stockTypeName`,  \n" +
                "                MAX(`atk`.`type`) AS `stockType`,  \n" +
                "                FUN_GETASSYPIDCODEBYID(`atk`.`partID`) AS `assyID`,  \n" +
                "                FUN_GETROHSICONBYPARTID(`atk`.`partID`) AS `rohsIcon`,  \n" +
                "                FUN_GETROHSNAMEBYPARTID(`atk`.`partID`) AS `rohsName`,  \n" +
                "                FUN_GETCOMPONENTNAMEBYID(`atk`.`partID`) AS `mfgPN`,  \n" +
                "                FUN_GETWAREHOUSENAMEBYID(`atk`.`whID`) AS `warehouseName`,  \n" +
                "                FUN_GETBINNAMEBYID(`atk`.`binID`) AS `binName`,  \n" +
                "                `atk`.`binID` AS `binID`,  \n" +
                "                IFNULL(`css`.`pkgQty`, 0) AS `totalUMIDCount`,  \n" +
                "                FUN_GETDEPARTMENTNAMEBYBINID(`atk`.`binID`) AS `departmentName`,  \n" +
                "                IFNULL(`css`.`pkgQty`, 0) AS `totalUMIDCountAfterShipped`,  \n" +
                "                (SUM(`atk`.`openingStock`) - (SELECT  \n" +
                "                        IFNULL(SUM(`ss`.`shippedqty`), 0)  \n" +
                "                    FROM  \n" +
                "                        `shippedassembly` `ss`  \n" +
                "                    WHERE  \n" +
                "                        ((`ss`.`isDeleted` = 0)  \n" +
                "                            AND (`ss`.`woNumber` = `atk`.`woNumber`)  \n" +
                "                            AND (`ss`.`partID` = `atk`.`partID`)))) AS `availableQtyWithUMIDStock`,  \n" +
                "                ((SUM(`atk`.`openingStock`) - (SELECT  \n" +
                "                        IFNULL(SUM(`ss`.`shippedqty`), 0)  \n" +
                "                    FROM  \n" +
                "                        `shippedassembly` `ss`  \n" +
                "                    WHERE  \n" +
                "                        ((`ss`.`isDeleted` = 0)  \n" +
                "                            AND (`ss`.`woNumber` = `atk`.`woNumber`)  \n" +
                "                            AND (`ss`.`partID` = `atk`.`partID`)))) - IFNULL(`css`.`pkgQty`, 0)) AS `availableQty`,  \n" +
                "                GROUP_CONCAT(DISTINCT `atk`.`poNumber`  \n" +
                "                    SEPARATOR ', ') AS `poNumbers`,  \n" +
                "                `atk`.`poQty` AS `poQty`,  \n" +
                "                `atk`.`soNumber` AS `soNumber`  \n" +
                "        FROM  \n" +
                "            (`assemblystock` `atk`  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `css`.`woID` AS `woId`,  \n" +
                "                `css`.`woNumber` AS `woNumber`,  \n" +
                "                SUM(`css`.`pkgQty`) AS `pkgQty`  \n" +
                "        FROM  \n" +
                "            `component_sid_stock` `css`  \n" +
                "        WHERE  \n" +
                "            ((`css`.`isDeleted` = 0)  \n" +
                "                AND (`css`.`woNumber` IS NOT NULL))  \n" +
                "        GROUP BY `css`.`woID` , `css`.`woNumber`) `css` ON ((`css`.`woNumber` = `atk`.`woNumber`)))  \n" +
                "        WHERE  \n" +
                "            (`atk`.`isDeleted` = 0)  \n" +
                "        GROUP BY `atk`.`woNumber` , `atk`.`partID` , `atk`.`whID` , `atk`.`binID` , `atk`.`woID` , `atk`.`woNumber` , `css`.`pkgQty`,atk.poqty,atk.sonumber) `a`  \n" +
                "    WHERE  \n" +
                "        (`a`.`availableQty` > 0);  \n" +
                /* **************************** Add Script Version -> 24-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5691,'2.00','V1','View Changes vu_workorder_summary_stk, vu_customer_packing_slip_qty, Sproc_GetAssemblyWOStockDetails - VS '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5691:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetReleaseReturnHistoryList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReleaseReturnHistoryList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pSalesOrderDetID INT,  \n" +
                "    IN pRefAssyId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetReleaseReturnHistoryList = CONCAT(\"  \n" +
                "		SELECT 	rrh.id, rrh.refPlanId, rrh.salesOrderDetID, rrh.woID, rrh.refAssyId, rrh.plannKitNumber,  \n" +
                "                rrh.releaseStatus, rrh.releasedNote, rrh.releaseKitNumber, rrh.returnStatus,  \n" +
                "                (CASE WHEN returnStatus = 'FR' THEN  \n" +
                "						'Fully Returned'  \n" +
                "					WHEN returnStatus = 'RS' THEN  \n" +
                "							'Returned With Shortage'  \n" +
                "					WHEN returnStatus = 'PR' THEN  \n" +
                "							'Partially Returned'  \n" +
                "					WHEN returnStatus = 'RR' THEN  \n" +
                "							'Ready To Return'  \n" +
                "					WHEN returnStatus = 'NR' THEN  \n" +
                "							'Not Returned'  \n" +
                "				ELSE 'N/A' END) AS returnStatusValue,  \n" +
                "                IF(returnStatus = 'R', 'Released', 'In Progress') AS releaseStatusValue,  \n" +
                "                fun_getWorkorderNumberByID(rrh.woID) woNumber,  \n" +
                "                fun_getUserNameByID(rrh.releasedBy) releasedBy,  \n" +
                "                fun_getUserNameByID(rrh.returnBy) returnBy,  \n" +
                "				fun_getUserNameByID(rrh.updatedBy) updatedby,  \n" +
                "				fun_getRoleByID(rrh.updateByRoleId) updatedbyRole,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(rrh.releaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') releaseDate,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(rrh.returnDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') returnDate,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(rrh.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "		FROM 	kit_release_return_trans_history rrh  \n" +
                "		WHERE   rrh.isDeleted = 0 AND rrh.salesOrderDetID = \",pSalesOrderDetID,\" AND  rrh.refAssyId = \",pRefAssyId,\"  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY id DESC \") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1=1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetReleaseReturnHistoryList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT a.* FROM ( \", @temp_Sproc_GetReleaseReturnHistoryList,\" ) a WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-12-2021 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5692,'2.00','V1',' User Story 34796: Kit Released And Return Flow changes for Re-released Kit Plan - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5692:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-12-2021 *********************************** */
                "drop procedure if exists `Sproc_SavePackingSlipMaterialReceiveDetStock`;  \n" +
                "CREATE PROCEDURE `Sproc_SavePackingSlipMaterialReceiveDetStock`(  \n" +
                "	IN pRMAStockList JSON,  \n" +
                "	IN pUserID VARCHAR(50),  \n" +
                "	IN pUserRoleID VARCHAR(50)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE v_TotalRMAStock INT;  \n" +
                "    DECLARE v_stockId INT;  \n" +
                "	DECLARE v_TransactionAction VARCHAR(10);  \n" +
                "	DECLARE v_RefRMAId INT;  \n" +
                "	DECLARE v_RefRMADetailId INT;  \n" +
                "	DECLARE v_Type VARCHAR(5);  \n" +
                "	DECLARE v_RefSidId INT;  \n" +
                "	DECLARE v_RefPackingSlipId INT;  \n" +
                "	DECLARE v_RefPackingSlipDetId INT;  \n" +
                "	DECLARE v_PartId INT;  \n" +
                "	DECLARE v_PackagingId INT;  \n" +
                "	DECLARE v_BinId INT;  \n" +
                "    DECLARE v_OLDRMAStock DECIMAL(18,8);  \n" +
                "	DECLARE v_Qty DECIMAL(18,8);  \n" +
                "    DECLARE v_availableQtyAtRMA DECIMAL(18,8);  \n" +
                "    DECLARE v_availableUnitAtRMA DECIMAL(18,8);  \n" +
                "	DECLARE v_TransferBinId INT;  \n" +
                "	DECLARE v_TransferWarehouseId INT;  \n" +
                "	DECLARE v_TransferParentWarehouseId INT;  \n" +
                "	DECLARE v_QtyOfLastConsume DECIMAL(18,8);  \n" +
                "    DECLARE v_UnitsOfLastConsume DECIMAL(18,8);  \n" +
                "    DECLARE v_ErorrCode VARCHAR(100) default null;  \n" +
                "    DECLARE v_CurrentStockQty DECIMAL(18,8);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_RMAStockList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_RMAStockList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pRMAStockList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`stockId` INT PATH \"$.stockId\",  \n" +
                "				`transactionAction` VARCHAR(10) PATH \"$.transactionAction\",  \n" +
                "				`refRMAId` INT PATH \"$.refRMAId\",  \n" +
                "				`refRMADetailId` INT PATH \"$.refRMADetailId\",  \n" +
                "				`type` VARCHAR(5) PATH \"$.type\",  \n" +
                "				`refSidId` INT PATH \"$.refSidId\",  \n" +
                "				`refPackingSlipId` INT PATH \"$.refPackingSlipId\",  \n" +
                "				`refPackingSlipDetId` INT PATH \"$.refPackingSlipDetId\",  \n" +
                "				`partId` INT PATH \"$.partId\",  \n" +
                "				`packagingId` INT PATH \"$.packagingId\",  \n" +
                "				`binId` VARCHAR(20) PATH \"$.binId\",  \n" +
                "				`qty` DECIMAL(18,8) PATH \"$.qty\",  \n" +
                "                `availableQtyAtRMA` DECIMAL(18,8) PATH \"$.availableQtyAtRMA\",  \n" +
                "                `availableUnitAtRMA` DECIMAL(18,8) PATH \"$.availableUnitAtRMA\",  \n" +
                "				`transferBinId` INT path \"$.transferBinId\",  \n" +
                "				`transferWarehouseId` INT path \"$.transferWarehouseId\",  \n" +
                "				`transferParentWarehouseId` INT path \"$.transferParentWarehouseId\"  \n" +
                "			)  \n" +
                "		) AS RMAStockList_JT;  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_TotalRMAStock FROM temp_RMAStockList;  \n" +
                "		SET i = 0;  \n" +
                "		temp_RMAStockListLabel: WHILE i < v_TotalRMAStock DO  \n" +
                "  \n" +
                "            if v_ErorrCode is null or v_ErorrCode = '' then  \n" +
                "  \n" +
                "				SET v_stockId = NULL;  \n" +
                "                SET v_OLDRMAStock = NULL;  \n" +
                "				SET v_TransactionAction = NULL;  \n" +
                "				SET v_RefRMAId = NULL;  \n" +
                "				SET v_RefRMADetailId = NULL;  \n" +
                "				SET v_Type = NULL;  \n" +
                "				SET v_RefSidId = NULL;  \n" +
                "				SET v_RefPackingSlipId = NULL;  \n" +
                "				SET v_RefPackingSlipDetId = NULL;  \n" +
                "				SET v_PartId = NULL;  \n" +
                "				SET v_PackagingId = NULL;  \n" +
                "				SET v_BinId = NULL;  \n" +
                "				SET v_Qty = NULL;  \n" +
                "                SET v_availableQtyAtRMA = NULL;  \n" +
                "                SET v_availableUnitAtRMA = NULL;  \n" +
                "				SET v_QtyOfLastConsume = NULL;  \n" +
                "                SET v_UnitsOfLastConsume = NULL;  \n" +
                "  \n" +
                "				SELECT 	stockId, transactionAction, refRMAId, refRMADetailId, `type`, refSidId, refPackingSlipId, refPackingSlipDetId, partId, packagingId, binId, qty, transferBinId, transferWarehouseId, transferParentWarehouseId, availableQtyAtRMA, availableUnitAtRMA  \n" +
                "				INTO 	v_stockId, v_TransactionAction, v_RefRMAId, v_RefRMADetailId, v_Type, v_RefSidId, v_RefPackingSlipId, v_RefPackingSlipDetId, v_PartId, v_PackagingId, v_BinId, v_Qty, v_TransferBinId, v_TransferWarehouseId, v_TransferParentWarehouseId, v_availableQtyAtRMA, v_availableUnitAtRMA  \n" +
                "				FROM 	temp_RMAStockList  \n" +
                "				LIMIT 	i, 1;  \n" +
                "				IF (v_TransactionAction = 'Add') THEN  \n" +
                "					if v_RefSidId is null then /*non UMID stock*/  \n" +
                "						/*fetching non UMID stock*/  \n" +
                "						SELECT SUM(IFNULL(vu.BalanceQty,0))  \n" +
                "                          into v_CurrentStockQty  \n" +
                "							FROM vu_umid_creation_pending vu  \n" +
                "							WHERE vu.packagingID = v_PackagingId  \n" +
                "							  AND vu.partID = v_PartId  \n" +
                "							  and vu.BinID = v_BinId;  \n" +
                "                    else /*UMID stock*/  \n" +
                "						/*Fetching UMID current stock*/  \n" +
                "                        select availableQty into v_CurrentStockQty  \n" +
                "                          from (SELECT c.pkgQty availableQty  \n" +
                "								  FROM component_sid_stock c  \n" +
                "								 INNER JOIN packing_slip_material_receive_det_stock cp ON cp.refSidId = c.id  \n" +
                "								 WHERE c.id = v_RefSidId  \n" +
                "								   and c.refcompid = v_PartId  \n" +
                "								   AND cp.type = 'U'  \n" +
                "								   AND cp.isDeleted = 0  \n" +
                "								   AND c.isDeleted = 0  \n" +
                "								UNION  \n" +
                "								SELECT c.pkgQty availableQty  \n" +
                "								  FROM component_sid_stock c  \n" +
                "								 INNER JOIN component_sid_stock_packing_detail cp ON cp.refComponentSidStockID = c.id  \n" +
                "								 WHERE c.pkgQty > 0  \n" +
                "								   and c.id = v_RefSidId  \n" +
                "								   and c.refcompid = v_PartId  \n" +
                "								   AND cp.isDeleted = 0  \n" +
                "								   AND c.isDeleted = 0) a;  \n" +
                "                    end if;  \n" +
                "  \n" +
                "                    if (case when v_Type = 'U' then v_availableQtyAtRMA else v_Qty end) > v_CurrentStockQty then  \n" +
                "						set v_ErorrCode = 'AVAILABLE_STOCK_ISSUE';  \n" +
                "					else  \n" +
                "						INSERT INTO packing_slip_material_receive_det_stock (refRMAId, refRMADetailId, `type`, refSidId, refPackingSlipId, refPackingSlipDetId, partId, packagingId, binId, qty, createdBy, createByRoleId, updatedBy, updateByRoleId, availableQtyAtRMA, availableUnitAtRMA)  \n" +
                "						VALUES (v_RefRMAId, v_RefRMADetailId, v_Type, v_RefSidId, v_RefPackingSlipId, v_RefPackingSlipDetId, v_PartId, v_PackagingId, v_BinId, v_Qty, pUserID, pUserRoleID, pUserID, pUserRoleID, v_availableQtyAtRMA, v_availableUnitAtRMA);  \n" +
                "  \n" +
                "                        IF (v_RefSidId IS NOT NULL) THEN /*umid stock*/  \n" +
                "							INSERT INTO component_sid_stock_history  \n" +
                "								(transType, 	actionPerformed, 	refUIDId, 	uid, 	refcompid, 	binID,  \n" +
                "                                warehouseID, 	deptWHID,  \n" +
                "								orgQty, 	orgUnit,  \n" +
                "                                currentQty, 	currentUnit, 		uom, 		consumedQty, 		consumedUnit,  \n" +
                "								refTrans, 	refTransID, 		refTransTable,	createdBy, 		updatedBy,	createByRoleId,		updateByRoleId)  \n" +
                "							SELECT 	'Supplier RMA - Returned', 	'UMID Zero Out',	c.id,		c.uid,		c.refcompid,		-1,  \n" +
                "									-3,				fun_getDepartmentIDByBinID(-1),  \n" +
                "                                    c.orgQty,	c.orgPkgUnit,  \n" +
                "									case when v_Type = 'U' then (c.pkgQty - v_availableQtyAtRMA) else (c.pkgQty - v_Qty) end,  \n" +
                "                                    case when v_Type = 'U' then (c.pkgUnit - v_availableUnitAtRMA) else (c.pkgUnit - (v_Qty * com.unit)) end,  \n" +
                "                                    c.uom,		v_Qty,			(v_Qty * com.unit),  \n" +
                "									fun_getRMANumberById(v_RefRMAId),					v_RefRMAId,	'packing_slip_material_receive',  \n" +
                "									pUserID,			pUserID,				pUserRoleID,	pUserRoleID  \n" +
                "							FROM 		component_sid_stock c  \n" +
                "							INNER JOIN 	component com ON com.id = c.refcompid  \n" +
                "							WHERE 		c.id =  v_RefSidId  \n" +
                "										AND c.isDeleted = 0  \n" +
                "										AND com.isDeleted = 0;  \n" +
                "  \n" +
                "							UPDATE 		component_sid_stock c  \n" +
                "							INNER JOIN 	component com ON com.id = c.refcompid  \n" +
                "								SET c.pkgQty = case when v_Type = 'U' then (c.pkgQty - v_availableQtyAtRMA) else (c.pkgQty - v_Qty) end,  \n" +
                "									c.pkgUnit = case when v_Type = 'U' then (c.pkgUnit - v_availableUnitAtRMA) else (c.pkgUnit - (v_Qty * com.unit)) end,  \n" +
                "                                    c.isinStk = false,  \n" +
                "                                    c.binID =  -1 /*Empty Bin id (system generated bin)*/  \n" +
                "							WHERE	c.id = v_RefSidId AND c.isDeleted = 0;  \n" +
                "						else /*non-umid stock*/  \n" +
                "                            UPDATE 	packing_slip_material_receive_det  \n" +
                "							SET 	umidCreated = ((IFNULL(umidCreatedQty,0) + IFNULL(rmaCreatedQty,0) + v_Qty)=receivedQty),  \n" +
                "									rmaCreatedQty = (IFNULL(rmaCreatedQty,0) + v_Qty)  \n" +
                "							WHERE   id = v_RefPackingSlipDetId;  \n" +
                "						END IF;  \n" +
                "                    end if;  \n" +
                "				ELSEIF (v_TransactionAction = 'Edit' AND v_Type = 'PU') THEN  \n" +
                "						/*fetching non UMID stock*/  \n" +
                "						select sum(stockQty) into v_CurrentStockQty  \n" +
                "						from  \n" +
                "							(SELECT SUM(IFNULL(vu.BalanceQty,0)) stockQty  \n" +
                "								FROM vu_umid_creation_pending vu  \n" +
                "								WHERE vu.packagingID = v_PackagingId  \n" +
                "								  AND vu.partID = v_PartId  \n" +
                "								  and vu.BinID = v_BinId  \n" +
                "								union all  \n" +
                "								select qty stockQty  \n" +
                "								from packing_slip_material_receive_det_stock  \n" +
                "							   where id = v_stockId  \n" +
                "								 and isDeleted = 0) a;  \n" +
                "						if v_Qty > v_CurrentStockQty then  \n" +
                "							set v_ErorrCode = 'AVAILABLE_STOCK_ISSUE';  \n" +
                "						else  \n" +
                "							select qty into v_OLDRMAStock  \n" +
                "                              from packing_slip_material_receive_det_stock  \n" +
                "							 WHERE id = v_stockId AND isDeleted = 0;  \n" +
                "  \n" +
                "                            UPDATE packing_slip_material_receive_det_stock  \n" +
                "							   SET qty = v_Qty,  \n" +
                "									updatedBy = pUserID,  \n" +
                "									updateByRoleId = pUserRoleID,  \n" +
                "									updatedAt = CURRENT_TIMESTAMP  \n" +
                "							 WHERE id = v_stockId AND isDeleted = 0;  \n" +
                "  \n" +
                "                             UPDATE 	packing_slip_material_receive_det  \n" +
                "								SET 	umidCreated = ((IFNULL(umidCreatedQty,0) + IFNULL(rmaCreatedQty,0) - IFNULL(v_OLDRMAStock,0) + IFNULL(v_Qty,0))=receivedQty),  \n" +
                "										rmaCreatedQty = (IFNULL(rmaCreatedQty,0) - IFNULL(v_OLDRMAStock,0) + IFNULL(v_Qty,0))  \n" +
                "								WHERE   id = v_RefPackingSlipDetId;  \n" +
                "                        end if;  \n" +
                "				ELSEIF (v_TransactionAction = 'Delete') THEN  \n" +
                "					IF v_Type = 'PU' then  \n" +
                "						select qty into v_OLDRMAStock  \n" +
                "						  from packing_slip_material_receive_det_stock  \n" +
                "						 WHERE id = v_stockId AND isDeleted = 0;  \n" +
                "  \n" +
                "						 UPDATE 	packing_slip_material_receive_det  \n" +
                "							SET 	umidCreated = ((IFNULL(umidCreatedQty,0) + IFNULL(rmaCreatedQty,0) - IFNULL(v_OLDRMAStock,0))=receivedQty),  \n" +
                "									rmaCreatedQty = (IFNULL(rmaCreatedQty,0) - IFNULL(v_OLDRMAStock,0))  \n" +
                "							WHERE   id = v_RefPackingSlipDetId;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive_det_stock  \n" +
                "					SET 	isDeleted = 1,  \n" +
                "							deletedBy = pUserID,  \n" +
                "							deleteByRoleId = pUserRoleID,  \n" +
                "							deletedAt = CURRENT_TIMESTAMP  \n" +
                "					WHERE 	id = v_stockId AND isDeleted = 0;  \n" +
                "  \n" +
                "					IF (v_Type = 'U' AND v_TransferBinId IS NOT NULL) THEN  \n" +
                "						SELECT ifnull(availableQtyAtRMA,0), ifnull(availableUnitAtRMA,0)  \n" +
                "						  INTO v_QtyOfLastConsume, v_UnitsOfLastConsume  \n" +
                "                          FROM packing_slip_material_receive_det_stock WHERE id = v_stockId;  \n" +
                "  \n" +
                "						INSERT INTO component_sid_stock_history  \n" +
                "							(transType, 	actionPerformed,  \n" +
                "                            refUIDId, 	uid, 	refcompid, 	binID, 		warehouseID, 		deptWHID,  \n" +
                "							orgQty, 	orgUnit, 		currentQty, 	currentUnit,		uom,  \n" +
                "                            consumedQty,  \n" +
                "                            consumedUnit,  \n" +
                "							refTrans, 	refTransID, 		refTransTable,	createdBy, 		updatedBy,	createByRoleId,		updateByRoleId)  \n" +
                "						SELECT 	'Supplier RMA - Corrected', 	'UMID Count Material (Adjust Material: Add/Append Count)',  \n" +
                "								c.id,		c.uid,		c.refcompid, 	v_TransferBinId,	v_TransferWarehouseId,		v_TransferParentWarehouseId,  \n" +
                "								c.orgQty,	c.orgPkgUnit,	v_QtyOfLastConsume,		v_UnitsOfLastConsume,	c.uom,  \n" +
                "                                (IFNULL(c.orgQty,0) - v_QtyOfLastConsume),  \n" +
                "                                (IFNULL(c.orgPkgUnit,0) - v_UnitsOfLastConsume),  \n" +
                "								fun_getRMANumberById(v_RefRMAId),  \n" +
                "								v_RefRMAId,		'packing_slip_material_receive',  \n" +
                "								pUserID,		pUserID,  \n" +
                "								pUserRoleID,		pUserRoleID  \n" +
                "						FROM 	component_sid_stock c  \n" +
                "						WHERE 	c.id =  v_RefSidId  \n" +
                "						AND 	c.isDeleted = 0;  \n" +
                "  \n" +
                "						UPDATE 		component_sid_stock c  \n" +
                "							SET		c.pkgQty = v_QtyOfLastConsume,  \n" +
                "									c.pkgUnit = v_UnitsOfLastConsume,  \n" +
                "									c.binID = v_TransferBinId  \n" +
                "							WHERE  	c.id = v_RefSidId AND c.isDeleted = 0;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "             end if;  \n" +
                "  \n" +
                "			SET i = i + 1;  \n" +
                "		END WHILE temp_RMAStockListLabel;  \n" +
                "  \n" +
                "		SELECT ifnull(v_ErorrCode,'1') AS 'spStatus';  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_RMAStockList;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 24-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5693,'2.00','V1','Bug 39780: [Main Branch] Empty stock should not get transfer while Bin to Bin transfer - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5693:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(  \n" +
                "	IN pGoodPart VARCHAR(100),  \n" +
                "	IN pSearch VARCHAR(500),  \n" +
                "	IN pId INT,  \n" +
                "	IN pMfgType VARCHAR(50),  \n" +
                "	IN pRoHSStatusID VARCHAR(100),  \n" +
                "	IN pMfgCodeId INT,  \n" +
                "	IN pMountingType VARCHAR(50),  \n" +
                "	IN pMountingTypeId INT,  \n" +
                "	IN pCategoryID INT,  \n" +
                "	IN pIsContainCPN TINYINT,  \n" +
                "	IN pRohsMainCategoryID INT,  \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
                "	IN prefSupplierMfgpnComponentID INT ,  \n" +
                "	IN ppackagingID INT,  \n" +
                "	IN pstrictCustomPart TINYINT,  \n" +
                "	IN psupplierID INT,  \n" +
                "    IN pPartType int,  \n" +
                "    IN pExcludeStatus INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vRohsMainCategoryID INT;  \n" +
                "  \n" +
                "  \n" +
                "	 SET @SQLStatement1=CONCAT(\" SELECT *  \n" +
                "		FROM  \n" +
                "		(  \n" +
                "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,  \n" +
                "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,  \n" +
                "					c.mfgcodeID,          					c.rev,  \n" +
                "					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
                "					c.category,								c.imageURL,						c.documentPath,  \n" +
                "					c.mfgPNDescription,				c.minOperatingTemp,				c.maxOperatingTemp,  \n" +
                "					c.value,								c.partPackage,					c.powerRating,  \n" +
                "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,  \n" +
                "					c.noOfPosition,							c.noOfRows,						c.pitch,  \n" +
                "					c.pitchMating,							c.length,						c.width,  \n" +
                "					c.height,								c.voltage,						c.weight,  \n" +
                "					c.feature,								c.color,						c.partStatus,  \n" +
                "					c.uom,									c.uomClassID,					c.unit,  \n" +
                "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,				u.unitName AS  unitName,  \n" +
                "					r.rohsIcon,								r.name AS rohsName,  \n" +
                "					c.partPackageID,						c.bomLock,						c.businessRisk,  \n" +
                "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,  \n" +
                "					c.eau,									c.epicorType,					c.functionalTestingRequired,  \n" +
                "					c.heightText,							c.isCPN,						c.isCustom,  \n" +
                "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,							c.minimum,						c.mult,  \n" +
                "					c.packageQty,							c.partType,						c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,  \n" +
                "					c.plannedValuePerBuild,					c.programingRequired,  \n" +
                "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,  \n" +
                "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,  \n" +
                "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,  \n" +
                "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \");  \n" +
                "  if  pId is not null then  \n" +
                "    		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND c.id = \" ,pId );  \n" +
                "    end if;  \n" +
                "  \n" +
                "    if  pMfgType is not null then  \n" +
                "    		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND m.mfgType = '\",pMfgType,\"' \");  \n" +
                "    end if;  \n" +
                "  \n" +
                "    if  pRoHSStatusID is not null then  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.RoHSStatusID = \", pRoHSStatusID );  \n" +
                "	 end if;  \n" +
                "	if  pMfgCodeId is not null then  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.mfgcodeID = \",pMfgCodeId );  \n" +
                "	 end if;  \n" +
                "	if  pMountingType is not null then  \n" +
                "    	SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND mt.name = '\",pMountingType,\"' \");  \n" +
                "	 end if;  \n" +
                "	if  pMountingTypeId is not null then  \n" +
                "				SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mountingTypeID = \",pMountingTypeId );  \n" +
                "	 end if;  \n" +
                "	if  pCategoryID is not null then  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.category = \", pCategoryID  );  \n" +
                "	 end if;  \n" +
                "	if  ifnull(pIsContainCPN,false) = false  then  \n" +
                "      #(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" andc.isCPN = FALSE \");  \n" +
                "	 end if;  \n" +
                "	if  pRohsMainCategoryID is not null then  \n" +
                "		 SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
                "		/*===>this logic is added to compare invert rohs category*/  \n" +
                "		IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
                "			IF pRohsMainCategoryID = -1 THEN  \n" +
                "				SET vRohsMainCategoryID = -2;  \n" +
                "			ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
                "				SET vRohsMainCategoryID = -1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "        /*<===this logic is added to compare invert rohs category*/  \n" +
                "		#AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "   		if vRohsMainCategoryID is not null then  \n" +
                "        SET @SQLStatement1=CONCAT(@SQLStatement1,\" and  r.refMainCategoryID  = \",vRohsMainCategoryID );  \n" +
                "        end if;  \n" +
                "	 end if;  \n" +
                "	if  prefSupplierMfgpnComponentID is not null then  \n" +
                "    	#AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" c.refSupplierMfgpnComponentID <=> IFNULL(\",prefSupplierMfgpnComponentID,\", c.refSupplierMfgpnComponentID)  \");  \n" +
                "	 end if;  \n" +
                "	if  pPartType is not null then  \n" +
                "        #AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.partType = '\",pPartType,\"' \");  \n" +
                "	 end if;  \n" +
                "	if  ppackagingID is not null then  \n" +
                "    	#AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.packagingID <=> IFNULL(\",ppackagingID,\",c.packagingID) \");  \n" +
                "	 end if;  \n" +
                "	if  pstrictCustomPart is not null then  \n" +
                "			#AND c.category != 3  AND c.iscustom = 1  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.category != 3  AND c.iscustom = 1 \");  \n" +
                "	 end if;  \n" +
                "	if  psupplierID is not null and pstrictCustomPart  = 1 then  \n" +
                "		/* Old logic  \n" +
                "        (c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
                "									FROM supplier_mapping_mst smm  \n" +
                "									WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)  \n" +
                "			)  \n" +
                "        */  \n" +
                "        SET @SQLStatement1=CONCAT(@SQLStatement1,\"  AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
                "																			FROM supplier_mapping_mst smm  \n" +
                "																			WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(\",psupplierID,\",smm.supplierID)  \n" +
                "																		union all /*get mfg which set as company*/  \n" +
                "																		SELECT mc.id  \n" +
                "																				FROM mfgcodemst mc  \n" +
                "																				WHERE mc.iscompany = 1 AND mc.isdeleted = 0  \n" +
                "																		union all /* get All Customer code */  \n" +
                "																		SELECT mc.id  \n" +
                "																				FROM mfgcodemst mc  \n" +
                "																				WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0  \n" +
                "																		)  \");  \n" +
                "	 end if;  \n" +
                "	if  pExcludeStatus is not null then  \n" +
                "    #AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.partStatus != '\",pExcludeStatus,\"' \");  \n" +
                "	 end if;  \n" +
                "     /*Close Inner query section */  \n" +
                "     SET @SQLStatement1=CONCAT(@SQLStatement1,\" ) AS a  where 1= 1 \");  \n" +
                "  \n" +
                "     if  pSearch is not null then  \n" +
                "     /* old query(  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                "													WHERE opn.refcomponentid = a.id  \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)  \n" +
                "		)  \n" +
                "     */  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and  exists ( select 1 from ( select a.id, a.mfgpn name from dual  \n" +
                "																					union all  \n" +
                "																					select opn.refcomponentid ,opn.name from component_otherpn opn where opn.refcomponentid = a.id  \n" +
                "																				) x where x.id  = a.id and x.name  LIKE CONCAT('%\", pSearch , \"%')  ) \");  \n" +
                "	 end if;  \n" +
                "  \n" +
                "     	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ORDER BY mfgPN For update\");  \n" +
                "  -- select @SQLStatement1;  \n" +
                "     PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    /* this logic used in purchase order when supplier is strictly custom part */  \n" +
                "   /*  \n" +
                "	IF(pstrictCustomPart = 1)THEN  \n" +
                "		SELECT *  \n" +
                "		FROM  \n" +
                "		(  \n" +
                "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,  \n" +
                "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,  \n" +
                "					c.mfgcodeID,          					c.rev,  \n" +
                "					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
                "					c.category,								c.imageURL,						c.documentPath,  \n" +
                "					c.mfgPNDescription,						c.minOperatingTemp,				c.maxOperatingTemp,  \n" +
                "					c.value,								c.partPackage,					c.powerRating,  \n" +
                "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,  \n" +
                "					c.noOfPosition,							c.noOfRows,						c.pitch,  \n" +
                "					c.pitchMating,							c.length,						c.width,  \n" +
                "					c.height,								c.voltage,						c.weight,  \n" +
                "					c.feature,								c.color,						c.partStatus,  \n" +
                "					c.uom,									c.uomClassID,					c.unit,  \n" +
                "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,				u.unitName AS  unitName,  \n" +
                "					r.rohsIcon,								r.name AS rohsName,  \n" +
                "					c.partPackageID,						c.bomLock,						c.businessRisk,  \n" +
                "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,  \n" +
                "					c.eau,									c.epicorType,					c.functionalTestingRequired,  \n" +
                "					c.heightText,							c.isCPN,						c.isCustom,  \n" +
                "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,							c.minimum,						c.mult,  \n" +
                "					c.packageQty,							c.partType,						c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,  \n" +
                "					c.plannedValuePerBuild,					c.programingRequired,  \n" +
                "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,  \n" +
                "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,  \n" +
                "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,  \n" +
                "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "			AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
                "									FROM supplier_mapping_mst smm  \n" +
                "									WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)  \n" +
                "			)  \n" +
                "			AND c.category != 3  \n" +
                "			AND c.iscustom = 1  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                "													WHERE opn.refcomponentid = a.id  \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "  \n" +
                "	ELSEIF(pMountingType IS NOT NULL AND pstrictCustomPart = 0) THEN  */  \n" +
                "	/* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
                "    Reports, Price Break Update, Customer Part, Good-Bad Mapping Part, Supplier Quote, Supplier RMA */  \n" +
                "	/*	SELECT * FROM  \n" +
                "		(  \n" +
                "			 SELECT c.id,							CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN, 					c.packaginggroupID, 					c.PIDCode,  \n" +
                "					c.isGoodPart, 						c.RoHSStatusID, 						c.rohsgroupID,  \n" +
                "					c.mfgcodeID,					    c.rev,  \n" +
                "					m.mfgCode, 							m.mfgType,								m.mfgName,  \n" +
                "					c.category,							c.imageURL,								c.documentPath,  \n" +
                "					c.mfgPNDescription,					c.minOperatingTemp,        				c.maxOperatingTemp,  \n" +
                "					c.value,							c.partPackage,							c.powerRating,  \n" +
                "					c.functionalCategoryID,         	c.mountingTypeID,						c.connecterTypeID,  \n" +
                "					c.noOfPosition,        				c.noOfRows,								c.pitch,  \n" +
                "					c.pitchMating,        				c.length,								c.width,  \n" +
                "					c.height,        					c.voltage,								c.weight,  \n" +
                "					c.feature,        					c.color,								c.partStatus,  \n" +
                "					c.uom,					        	c.uomClassID,							c.unit,  \n" +
                "					c.restrictUsePermanently,			c.restrictUSEwithpermission,			c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,			u.unitName AS  unitName,  \n" +
                "					r.rohsIcon,							r.name AS rohsName,  \n" +
                "					c.partPackageID,        			c.bomLock,								c.businessRisk,  \n" +
                "					c.costCategoryID,					c.deviceMarking,						c.driverToolRequired,  \n" +
                "					c.eau,								c.epicorType,							c.functionalTestingRequired,  \n" +
                "					c.heightText,						c.isCPN,								c.isCustom,  \n" +
                "					c.leadTime,							c.matingPartRquired,					c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,						c.minimum,								c.mult,  \n" +
                "					c.packageQty,						c.partType,								c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,				c.plannedOverRunPercentagePerBuild, 	c.plannedValuePerBuild,  \n" +
                "					c.programingRequired,				c.rfqOnly,								c.saftyStock,  \n" +
                "					c.scrapRatePercentagePerBuild, 		c.scrapValuePerBuild,					c.selfLifeDays,  \n" +
                "					c.shelfListDaysThresholdPercentage, c.temperatureCoefficient,				c.temperatureCoefficientUnit,  \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,					c.refSupplierMfgpnComponentID,  \n" +
                "					c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName, 	vu.mfgPN supplierPartMfgPn, 			vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,        			c.isNoClean,        					c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 				c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND (m.isdeleted = 0 AND  m.mfgType = IFNULL(pMfgType, m.mfgType))  \n" +
                "			JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND mt.name = pMountingType  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND		c.id = IFNULL(pId, c.id) AND c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                "													WHERE opn.refcomponentid = a.id  \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "  \n" +
                "	ELSE  */  \n" +
                "	  /* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
                "	  Reports,  Price Break Update,  Customer Part,  Good-Bad Mapping Part,  Supplier Quote,  Supplier RMAb*/  \n" +
                "  /*  \n" +
                "		select *  \n" +
                "		from  \n" +
                "		(  \n" +
                "			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,			c.packaginggroupID,					c.PIDCode,  \n" +
                "					c.isGoodPart,				c.RoHSStatusID,						c.rohsgroupID,  \n" +
                "					c.mfgcodeID,          		c.rev,  \n" +
                "					m.mfgCode,					m.mfgName,							m.mfgType,  \n" +
                "					c.tolerance,				c.category,							c.imageURL,  \n" +
                "					c.documentPath,				c.mfgPNDescription,					c.minOperatingTemp,  \n" +
                "					c.maxOperatingTemp,			c.value,							c.partPackage,  \n" +
                "					c.powerRating,				c.functionalCategoryID,				c.mountingTypeID,  \n" +
                "					c.connecterTypeID,			c.noOfPosition,           	 		c.noOfRows,  \n" +
                "					c.pitch,            		c.pitchMating,            			c.length,  \n" +
                "					c.width,            		c.height,							c.voltage,  \n" +
                "					c.weight,            		c.feature,            				c.color,  \n" +
                "					c.partStatus,            	c.uom,            					c.uomClassID,  \n" +
                "					c.unit,            			c.restrictUsePermanently,			c.restrictUSEwithpermission,  \n" +
                "					c.restrictPackagingUsePermanently,								c.restrictPackagingUseWithpermission,  \n" +
                "					c.packagingID,				c.packaging,  \n" +
                "					u.abbreviation AS uomName,	u.unitName AS unitName,  \n" +
                "					r.rohsIcon,					r.name AS rohsName,  \n" +
                "					c.partPackageID,			c.bomLock,							c.businessRisk,  \n" +
                "					c.costCategoryID,			c.deviceMarking,					c.driverToolRequired,  \n" +
                "					c.eau,						c.epicorType,						c.functionalTestingRequired,  \n" +
                "					c.heightText,				c.isCPN,							c.isCustom,  \n" +
                "					c.leadTime,            		c.matingPartRquired,				c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,           	c.minimum,							c.mult,  \n" +
                "					c.packageQty,            	c.partType,							c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,		c.plannedOverRunPercentagePerBuild, c.plannedValuePerBuild,  \n" +
                "					c.programingRequired,		c.rfqOnly,							c.saftyStock,  \n" +
                "					c.scrapRatePercentagePerBuild,		c.scrapValuePerBuild,		c.selfLifeDays,  \n" +
                "					c.shelfListDaysThresholdPercentage,	c.temperatureCoefficient,	c.temperatureCoefficientUnit,  \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,		c.refSupplierMfgpnComponentID,  \n" +
                "					c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,  \n" +
                "					vu.mfgPN supplierPartMfgPn,  \n" +
                "					vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,			c.isNoClean,						c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,		c.isHazmatMaterial, 				c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,		c.isReceiveBulkItem  \n" +
                "			from component c  \n" +
                "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "			INNER JOIN uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID = IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID, c.packagingID)  \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN = c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "			AND 	(CASE WHEN pstrictCustomPart = 0 THEN c.iscustom = 0 ELSE 1 = 1 END)  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND  \n" +
                "					(  \n" +
                "						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
                "						EXISTS( SELECT  1  \n" +
                "								FROM 	component_otherpn opn  \n" +
                "								WHERE 	opn.refcomponentid = a.id  \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
                "					)  \n" +
                "				)  \n" +
                "			)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "	END IF;   */  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5694,'2.00','V1',' Tune SP Sproc_GetComponentMFGAliasSearch- DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5694:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_AddDuplicateOperation`;  \n" +
                "CREATE PROCEDURE `Sproc_AddDuplicateOperation`(  \n" +
                "	IN pfromOpID INT,  \n" +
                "	IN pisCheckUnique tinyint,  \n" +
                "	IN pIsCopyDoDont tinyint,  \n" +
                "	IN pIsCopyDocuments tinyint,  \n" +
                "	IN pIsCopyDataFields tinyint,  \n" +
                "	IN pIsCopyParts tinyint,  \n" +
                "	IN pIsCopyEquipments tinyint,  \n" +
                "	IN pIsCopyEmployees tinyint,  \n" +
                "	IN pIsCopyTemplates tinyint,  \n" +
                "    IN popName VARCHAR(255),  \n" +
                "	IN popNumber DECIMAL(7,3),  \n" +
                "    IN pcolorCode VARCHAR(100),  \n" +
                "	IN puserID VARCHAR(255),  \n" +
                "	IN puserRoleId INT,  \n" +
                "	IN popDescription longtext,  \n" +
                "    IN popWorkingCondition longtext,  \n" +
                "    IN popManagementInstruction longtext,  \n" +
                "    IN popDeferredInstruction longtext,  \n" +
                "    IN popDoes longtext,  \n" +
                "    IN popDonts longtext,  \n" +
                "	IN popOrder DECIMAL(7,3),  \n" +
                "	IN popStatus INT,  \n" +
                "	IN poperationTypeID INT,  \n" +
                "	IN pparentOPID INT,  \n" +
                "	IN pprocessTime INT,  \n" +
                "	IN psetupTime INT,  \n" +
                "	IN pperPieceTime INT,  \n" +
                "	IN pqtyControl tinyint,  \n" +
                "	IN ptabLimitAtTraveler INT,  \n" +
                "	IN pisTeamOperation tinyint,  \n" +
                "	IN pisIssueQty tinyint,  \n" +
                "	IN pisRework tinyint,  \n" +
                "	IN pisMoveToStock tinyint,  \n" +
                "	IN pmountingTypeID INT,  \n" +
                "	IN pisPlacementTracking tinyint,  \n" +
                "	IN pisLoopOperation tinyint,  \n" +
                "	IN pisAllowMissingPartQty tinyint,  \n" +
                "	IN pisAllowBypassQty tinyint,  \n" +
                "	IN pisEnablePreProgrammingPart tinyint,  \n" +
                "	IN pisWaterSoluble tinyint,  \n" +
                "	IN pisNoClean tinyint,  \n" +
                "	IN pisFluxNotApplicable tinyint,  \n" +
                "	IN pshortDescription VARCHAR(2000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    DECLARE vValidationPassed tinyint;  \n" +
                "    DECLARE vinsertedOPID INT;  \n" +
                "	DECLARE vUTCDateTime datetime;  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	START TRANSACTION;  \n" +
                "	IF (popNumber IS NULL OR popNumber = 0) THEN  \n" +
                "		SELECT 'EC01' errorCode;    /* Operation number must not blank. */  \n" +
                "	ELSEIF (popName IS NULL OR popName = '') THEN  \n" +
                "		SELECT 'EC02' errorCode;    /* Operation Name must not blank. */  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "    IF pisCheckUnique THEN  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_operation_table AS (select opNumber,colorCode,isDeleted from operations  \n" +
                "			where opNumber = popNumber OR (pcolorCode IS NOT NULL AND pcolorCode <> '' AND colorCode = pcolorCode));  \n" +
                "		IF (EXISTS (SELECT 1 FROM temp_operation_table)) THEN  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			IF(EXISTS (select 1 from temp_operation_table where isDeleted = 0)) THEN  \n" +
                "				SELECT opNumber into @opNumber from temp_operation_table where isDeleted = 0 group by opNumber LIMIT 1;  \n" +
                "                SELECT case when @opNumber = popNumber then 'Operation number' else 'Color Code' END as errorCode;  \n" +
                "			ELSE  \n" +
                "				SELECT 'EC03' errorCode;    /* Confirmation message for create new if found deleted record. */  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_operation_table;  \n" +
                "	ELSE  \n" +
                "		IF (EXISTS (select 1 from operations where (opNumber = popNumber OR (pcolorCode IS NOT NULL AND pcolorCode <> '' AND colorCode = pcolorCode)) AND isDeleted = 0)) THEN  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			select opNumber into @opNumber from operations  \n" +
                "				where (opNumber = popNumber OR (pcolorCode IS NOT NULL AND pcolorCode <> '' AND colorCode = pcolorCode)) AND isDeleted = 0  group by opNumber LIMIT 1;  \n" +
                "			SELECT case when @opNumber = popNumber then 'Operation number' else 'Color Code' END as errorCode;  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF vValidationPassed = 1 then  \n" +
                "		SELECT fun_DatetimetoUTCDateTime() into vUTCDateTime;  \n" +
                "		IF pfromOpID > 0 THEN  \n" +
                "			# [S] - copy Operation Detail AND  Do/does  \n" +
                "			insert into operations (opName, opNumber,colorCode,opDescription,opDoes,opDonts, opOrder,opStatus,documentPath, operationTypeID,parentOPID,processTime,setupTime,perPieceTime,qtyControl,opWorkingCondition,opManagementInstruction,opDeferredInstruction,isTeamOperation,isIssueQty,isRework,  \n" +
                "						tabLimitAtTraveler,isMoveToStock,mountingTypeID,isPlacementTracking,isLoopOperation,isAllowMissingPartQty,isAllowBypassQty,isEnablePreProgrammingPart,isWaterSoluble,  \n" +
                "						isNoClean,isFluxNotApplicable,createdBy,createdAt, createByRoleId, shortDescription)  \n" +
                "				select popName, popNumber,pcolorCode, opDescription, case when pIsCopyDoDont then opDoes else NULL end , case when pIsCopyDoDont then opDonts else NULL end , popNumber, 0, documentPath, poperationTypeID,pparentOPID,processTime,setupTime,perPieceTime,pqtyControl,opWorkingCondition,opManagementInstruction,opDeferredInstruction,pisTeamOperation,pisIssueQty,pisRework,  \n" +
                "						ptabLimitAtTraveler,pisMoveToStock,pmountingTypeID,pisPlacementTracking,pisLoopOperation,pisAllowMissingPartQty,pisAllowBypassQty,pisEnablePreProgrammingPart,pisWaterSoluble,  \n" +
                "						pisNoClean,pisFluxNotApplicable, pUserID, vUTCDateTime, pUserRoleId, pshortDescription  \n" +
                "				from operations  \n" +
                "				where opID = pfromOpID and isDeleted = 0;  \n" +
                "			# [E] - copy Operation DetailAND  Do/does  \n" +
                "        ELSE  \n" +
                "			 # [E] - Insert Operation Detail(Add operation)  \n" +
                "			 insert into operations (opName, opNumber,colorCode,opDescription,opOrder, opStatus, operationTypeID,parentOPID,processTime,setupTime,perPieceTime,qtyControl,opWorkingCondition,opManagementInstruction,opDeferredInstruction,isTeamOperation,isIssueQty,isRework,  \n" +
                "						tabLimitAtTraveler,isMoveToStock,mountingTypeID,isPlacementTracking,isLoopOperation,isAllowMissingPartQty,isAllowBypassQty,isEnablePreProgrammingPart,isWaterSoluble,  \n" +
                "						isNoClean,isFluxNotApplicable,createdBy,createdAt, createByRoleId, shortDescription)  \n" +
                "					VALUES( popName, popNumber,pcolorCode, popDescription,popOrder, popStatus, poperationTypeID,pparentOPID,pprocessTime,psetupTime,pperPieceTime,pqtyControl,popWorkingCondition,popManagementInstruction,popDeferredInstruction,pisTeamOperation,pisIssueQty,pisRework,  \n" +
                "						ptabLimitAtTraveler,pisMoveToStock,pmountingTypeID,pisPlacementTracking,pisLoopOperation,pisAllowMissingPartQty,pisAllowBypassQty,pisEnablePreProgrammingPart,pisWaterSoluble,  \n" +
                "						pisNoClean,pisFluxNotApplicable, pUserID, vUTCDateTime, pUserRoleId, pshortDescription);  \n" +
                "			# [E] - Insert Operation Detail(Add operation)  \n" +
                "		END IF;  \n" +
                "		SET vinsertedOPID = LAST_INSERT_ID();  \n" +
                "		SELECT op.opID AS opID, op.opNumber, op.documentPath FROM operations op WHERE op.opID = vinsertedOPID;  \n" +
                "		# [S] - copy Data Fields  \n" +
                "			IF pIsCopyDataFields THEN  \n" +
                "				insert into operation_dataelement (opID, dataElementID, displayOrder, description, createdBy,createdAt, createByRoleId)  \n" +
                "					select vinsertedOPID, dataElementID, displayOrder, description, pUserID, vUTCDateTime, pUserRoleId  \n" +
                "						from operation_dataelement  \n" +
                "						where opID = pfromOpID and isDeleted = false;  \n" +
                "            END IF;  \n" +
                "		# [E] - copy Data Fields  \n" +
                "		# [S] - copy Supplier,amterials & tools(parts)  \n" +
                "			IF pIsCopyParts THEN  \n" +
                "				insert into operation_part (opID, partID, createdBy,createdAt, createByRoleId)  \n" +
                "					select vinsertedOPID, partID, pUserID, vUTCDateTime, pUserRoleId  \n" +
                "						from operation_part  \n" +
                "						where opID = pfromOpID and isDeleted = false;  \n" +
                "            END IF;  \n" +
                "		# [E] - copy Supplier,amterials & tools(parts)  \n" +
                "		# [S] - copy Equipments  \n" +
                "			IF pIsCopyEquipments THEN  \n" +
                "				insert into operation_equipment (opID, eqpID, createdBy,createdAt, createByRoleId)  \n" +
                "					select vinsertedOPID, eqpID, pUserID, vUTCDateTime, pUserRoleId  \n" +
                "						from operation_equipment  \n" +
                "						where opID = pfromOpID and isDeleted = false;  \n" +
                "            END IF;  \n" +
                "		# [E] - copy Equipments  \n" +
                "		# [S] - copy Personnel  \n" +
                "			IF pIsCopyEmployees THEN  \n" +
                "				insert into operation_employee (opID, employeeID, createdBy,createdAt, createByRoleId)  \n" +
                "					select vinsertedOPID, employeeID, pUserID, vUTCDateTime, pUserRoleId  \n" +
                "						from operation_employee  \n" +
                "						where opID = pfromOpID and isDeleted = false;  \n" +
                "            END IF;  \n" +
                "		# [E] - copy Personnel  \n" +
                "		# [S] - copy Master template  \n" +
                "			IF pIsCopyTemplates THEN  \n" +
                "				insert into operation_master_templates (operationId, masterTemplateId,isActive, createdBy,createdAt, createByRoleId)  \n" +
                "					select vinsertedOPID, masterTemplateId,isActive, pUserID, vUTCDateTime, pUserRoleId  \n" +
                "						from operation_master_templates  \n" +
                "						where operationId = pfromOpID and isDeleted = false;  \n" +
                "            END IF;  \n" +
                "		# [E] - copy Master template  \n" +
                " 		# [S] - copy document_folder  \n" +
                "			IF pIsCopyDocuments then  \n" +
                "				INSERT INTO generic_folder  \n" +
                "						(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "						`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "				SELECT  a.gencFolderName, vinsertedOPID refTransID, '-1' , 'operations' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "						0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "						a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "				FROM generic_folder a  \n" +
                "				WHERE a.refTransID = pfromOpID  \n" +
                "				AND a.gencFileOwnerType = 'operations' AND entityID = -1 AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "				UPDATE generic_folder gf1,  \n" +
                "				(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "					FROM generic_folder a WHERE a.refTransID = vinsertedOPID  \n" +
                "					AND a.gencFileOwnerType = 'operations' AND entityID = -1 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "				) gf2  \n" +
                "				SET gf1.refParentId = gf2.gencFolderID  \n" +
                "				WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "				AND gf1.refTransID = vinsertedOPID  \n" +
                "				AND gf1.gencFileOwnerType = 'operations' AND entityID = -1 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "  \n" +
                "				INSERT INTO genericfiles  \n" +
                "					(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "					entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "					refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "				select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vinsertedOPID,  \n" +
                "					entityID,gencFileOwnerType,isActive,genFilePath,vUTCDateTime,pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "					pfromOpID,gencFileOwnerType,pUserRoleId  \n" +
                "				from genericfiles where refTransID = pfromOpID and entityID = -1 and isRecycle = 0 and isDeleted = 0;  \n" +
                "				UPDATE genericfiles gf1,  \n" +
                "				(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "					FROM generic_folder a WHERE a.refTransID = vinsertedOPID  \n" +
                "					AND a.gencFileOwnerType = 'operations' AND entityID = -1 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "				) gf2  \n" +
                "				SET gf1.refParentId = gf2.gencFolderID  \n" +
                "				WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "				AND gf1.refTransID = vinsertedOPID  \n" +
                "				AND gf1.gencFileOwnerType = 'operations' AND entityID = -1 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('operations',vinsertedOPID,true);  /* Get New Path and Update in Operation table.  */  \n" +
                "			END IF;  \n" +
                "		# [E] - copy generic_folder  \n" +
                "		COMMIT;  \n" +
                "	END if;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveDraftOperationsbyMasterTemplate`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveDraftOperationsbyMasterTemplate`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pmasterTemplateId INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "		SET @temp_Sproc_RetrieveOperation = CONCAT(\"  \n" +
                "			Select a.* from (SELECT op.opID,op.opName,op.opNumber, op.isDeleted,op.opStatus,  \n" +
                "				op.operationTypeID,op.isMoveToStock,op.mountingTypeID,op.shortDescription,  \n" +
                "				fun_getMountingTypeNameByID(op.mountingTypeID) mountingType,  \n" +
                "				fun_getOpStatusNameByID(op.opStatus) AS `opStatusConvertedValue` ,  \n" +
                "				fun_getGenericCategoryNameByID(op.operationTypeID) AS operationType,  \n" +
                "                (CASE WHEN (`op`.`isMoveToStock` = 0) THEN 'No' WHEN (`op`.`isMoveToStock` = 1) THEN 'Yes' ELSE '' END) AS `isMoveToStockConvertedValue`  \n" +
                "			FROM `operations` op  \n" +
                "			WHERE op.opStatus= 0 AND op.isDeleted =0 AND op.opID in (SELECT omt.operationId FROM operation_master_templates as omt WHERE omt.masterTemplateId = \",pmasterTemplateId,\" AND omt.isdeleted=0)) a  \n" +
                "            where 1=1  \n" +
                "		\");  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY opNumber ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveOperation,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveOperation,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 24-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveOperation`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveOperation`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	        DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	        SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	        SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "  \n" +
                "		SET @temp_Sproc_RetrieveOperation = CONCAT(\"  \n" +
                "			SELECT op.opID,op.opName,op.opNumber,  \n" +
                "            fun_getTextAngularData(op.opDescription,'\" , vTextAngularKeyCode , \"') opDescription,  \n" +
                "            fun_getTextAngularData(op.opDoes,'\", vTextAngularKeyCode ,\"') opDoes,  \n" +
                "            fun_getTextAngularData(op.opDonts, '\" ,vTextAngularKeyCode ,\"') opDonts,  \n" +
                "            fun_getTextAngularData(op.opWorkingCondition,'\", vTextAngularKeyCode ,\"') opWorkingCondition,  \n" +
                "            fun_getTextAngularData(op.opManagementInstruction,'\", vTextAngularKeyCode,\"') opManagementInstruction,  \n" +
                "            fun_getTextAngularData(op.opDeferredInstruction,'\", vTextAngularKeyCode,\"') opDeferredInstruction,  \n" +
                "			op.opOrder,op.isDeleted,op.opStatus,  \n" +
                "			op.operationTypeID,op.parentOPID,op.processTime,  \n" +
                "			op.setupTime,op.perPieceTime,op.qtyControl,  \n" +
                "			op.isTeamOperation,op.isIssueQty,op.isRework,  \n" +
                "			op.colorCode,op.tabLimitAtTraveler,op.isMoveToStock,  \n" +
                "			op.isLoopOperation ,  op.isAllowMissingPartQty  , op.isAllowBypassQty ,  \n" +
                "			op.isEnablePreProgrammingPart , op.mountingTypeID,  \n" +
                "			fun_getMountingTypeNameByID(op.mountingTypeID) mountingType,  \n" +
                "			(CASE WHEN (`op`.`qtyControl` = 0) THEN 'No'  \n" +
                "			WHEN (`op`.`qtyControl` = 1) THEN 'Yes' ELSE '' END) AS `qtyControlConvertedValue`,  \n" +
                "			(CASE WHEN (`op`.`isIssueQty` = 0) THEN 'No'  \n" +
                "			WHEN (`op`.`isIssueQty` = 1) THEN 'Yes' ELSE '' END) AS `isIssueQtyConvertedValue`,  \n" +
                "			(CASE WHEN (`op`.`isTeamOperation` = 0) THEN 'No'  \n" +
                "			WHEN (`op`.`isTeamOperation` = 1) THEN 'Yes' ELSE '' END) AS `isTeamOperationConvertedValue`,  \n" +
                "			(CASE WHEN (`op`.`isRework` = 0) THEN 'No'  \n" +
                "			WHEN (`op`.`isRework` = 1) THEN 'Yes' ELSE '' END) AS `isReworkConvertedValue`,  \n" +
                "			(CASE WHEN (`op`.`isMoveToStock` = 0) THEN 'No'  \n" +
                "			WHEN (`op`.`isMoveToStock` = 1) THEN 'Yes' ELSE '' END) AS `isMoveToStockConvertedValue`,  \n" +
                "			(CASE WHEN (`op`.`isLoopOperation` = 0) THEN 'No'  \n" +
                "				WHEN (`op`.`isLoopOperation` = 1) THEN 'Yes' ELSE '' END) AS `isLoopOperationConvertedValue`,  \n" +
                "			(CASE WHEN (`op`.`isAllowMissingPartQty` = 0) THEN 'No'  \n" +
                "				WHEN (`op`.`isAllowMissingPartQty` = 1) THEN 'Yes' ELSE '' END) AS `isAllowMissingPartQtyConvertedValue`,  \n" +
                "			(CASE WHEN (`op`.`isAllowBypassQty` = 0) THEN 'No'  \n" +
                "				WHEN (`op`.`isAllowBypassQty` = 1) THEN 'Yes' ELSE '' END) AS `isAllowBypassQtyConvertedValue`,  \n" +
                "			(CASE WHEN (`op`.`isEnablePreProgrammingPart` = 0) THEN 'No'  \n" +
                "				WHEN (`op`.`isEnablePreProgrammingPart` = 1) THEN 'Yes' ELSE '' END) AS `isEnablePreProgrammingPartConvertedValue`,  \n" +
                "			fun_getUserNameByID(op.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(op.createdBy) createdby,  \n" +
                "			fun_getRoleByID(op.updateByRoleId) updatedbyRole,  \n" +
                "			fun_getRoleByID(op.createByRoleId) createdbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(op.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(op.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getOpStatusNameByID(op.opStatus) AS `opStatusConvertedValue` ,  \n" +
                "            op.isNoClean,op.isWaterSoluble, op.isFluxNotApplicable, op.shortDescription,  \n" +
                "            (CASE WHEN op.isFluxNotApplicable = 1 THEN 'NA'  \n" +
                "				  WHEN op.isNoClean = 0 AND op.isWaterSoluble = 1 THEN 'WS'  \n" +
                "                  WHEN op.isNoClean = 1 AND op.isWaterSoluble = 0 THEN 'NC'  \n" +
                "                  WHEN op.isNoClean = 1 AND op.isWaterSoluble = 1 THEN 'BOTH' ELSE 'NA'  END) fluxType,  \n" +
                "            (CASE WHEN op.isFluxNotApplicable = 1 THEN 'Not Applicable'  \n" +
                "				  WHEN op.isNoClean = 0 AND op.isWaterSoluble = 1 THEN 'Water-Soluble'  \n" +
                "                  WHEN op.isNoClean = 1 AND op.isWaterSoluble = 0 THEN 'No-Clean'  \n" +
                "                  WHEN op.isNoClean = 1 AND op.isWaterSoluble = 1 THEN 'Water-Soluble and No-Clean'END ) fluxTypeConvertedValue  \n" +
                "		FROM `operations` op  \n" +
                "		WHERE op.`deletedAt` IS NULL  \n" +
                "		\");  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY opNumber ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveOperation,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveOperation,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 24-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_GetWorkOrderOperationDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkOrderOperationDetailForElastic`(  \n" +
                "	IN pWOOPID INT(11),  \n" +
                "    IN pWOID INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		from workorder_operation as wo  \n" +
                "/*		left join workorder w on wo.woID = w.woID and IFNULL(w.isDeleted,0) = 0  \n" +
                "		left join genericcategory gc on wo.operationTypeID = gc.gencCategoryId and IFNULL(gc.isDeleted,0) = 0      */  \n" +
                "	/*  left join operations o on o.opID = wo.opID and IFNULL(o.isDeleted,0) = 0  \n" +
                "		left join operations po on po.opID = wo.parentOPID and IFNULL(po.isDeleted,0) = 0          */  \n" +
                "		where IFNULL(wo.isDeleted,0) = 0;  \n" +
                "    ELSE  \n" +
                "		select  \n" +
                "			wo.woOPID  \n" +
                "			, wo.woID  \n" +
                "			, w.woNumber  \n" +
                "			, wo.opNumber woOpNumber  \n" +
                "			, wo.opName woOpName  \n" +
                "			, wo.opID  \n" +
                "			, o.opNumber opNumber  \n" +
                "			, o.opName opName  \n" +
                "			, wo.opVersion  \n" +
                "			, gc.gencCategoryName as OperationType  \n" +
                "			, wo.operationTypeID  \n" +
                "			, po.opName as parentOperation  \n" +
                "			, wo.parentOPID  \n" +
                "			, wo.tabLimitAtTraveler  \n" +
                "			, wo.processTime  \n" +
                "			, wo.setupTime  \n" +
                "			, wo.perPieceTime  \n" +
                "			, wo.qtyControl  \n" +
                "			, wo.isPreProgrammingComponent  \n" +
                "			, wo.isRework  \n" +
                "			, wo.isTeamOperation  \n" +
                "			, wo.isIssueQty  \n" +
                "			, wo.cleaningType  \n" +
                "			, wo.opDescription  \n" +
                "			, wo.opWorkingCondition  \n" +
                "			, wo.opManagementInstruction  \n" +
                "			, wo.opDeferredInstruction  \n" +
                "			, wo.opDoes  \n" +
                "			, wo.opDonts  \n" +
                "            , wo.isDeleted  \n" +
                "            , wo.shortDescription  \n" +
                "            , (select group_concat(refDesig) from workorder_operation_refdesig wor where wor.woID = wo.woID and wor.woOpID = wo.woOPID and wor.isDeleted = 0) refDesigList  \n" +
                "		from workorder_operation as wo  \n" +
                "		left join workorder w on wo.woID = w.woID and IFNULL(w.isDeleted,0) = 0  \n" +
                "		left join genericcategory gc on wo.operationTypeID = gc.gencCategoryId and IFNULL(gc.isDeleted,0) = 0  \n" +
                "		left join operations o on o.opID = wo.opID and IFNULL(o.isDeleted,0) = 0  \n" +
                "		left join operations po on po.opID = wo.parentOPID and IFNULL(po.isDeleted,0) = 0  \n" +
                "		where  wo.woOPID  = IFNULL(pWOOPID,wo.woOPID) and wo.woID  = IFNULL(pWOID,wo.woID) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(wo.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(wo.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_GetOperationDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetOperationDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM  \n" +
                "			operations  \n" +
                "		WHERE (isDeleted = FALSE);  \n" +
                "    ELSE  \n" +
                "		SELECT  \n" +
                "			opID,  \n" +
                "			opName,  \n" +
                "			opNumber,  \n" +
                "			opStatus,  \n" +
                "            shortDescription,  \n" +
                "			opDescription,  \n" +
                "			opWorkingCondition,  \n" +
                "			opManagementInstruction,  \n" +
                "			opDeferredInstruction,  \n" +
                "            isDeleted  \n" +
                "		FROM  \n" +
                "			operations  \n" +
                "		WHERE  \n" +
                "			opID = IFNULL(pId,opID) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "					or (DATE(fun_CovnertDateTimeByTimezoneValue(updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_copyMasterTemplate`;  \n" +
                "CREATE PROCEDURE `Sproc_copyMasterTemplate`(  \n" +
                "	IN pcopyTemplate INT(11),  \n" +
                "	IN puserID INT,  \n" +
                "	IN pTemplateID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	INSERT INTO operation_master_templates (masterTemplateId,operationId,isActive,createdBy)  \n" +
                "		SELECT pTemplateID,operationId,isActive,puserID from (SELECT omt.operationId,omt.isActive, exists (select 1 from operations as op where op.opID = omt.operationId and op.opStatus = 1 and op.isdeleted = 0) publishedOP FROM operation_master_templates as omt  \n" +
                "			WHERE omt.masterTemplateId = pcopyTemplate AND omt.isdeleted=0) a where a.publishedOP = 1;  \n" +
                "	select pTemplateID;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveMasterTemplate`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveMasterTemplate`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN poperationIds VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	        DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	        SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	        SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SET @SQL = NULL;  \n" +
                "  \n" +
                "  		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  		IF(poperationIds IS NULL OR poperationIds = '') THEN  \n" +
                "			SET poperationIds = 'operationId' ;  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND operaionExists = 1 ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"  \n" +
                "			 select * from (SELECT mt.id,mt.masterTemplate,mt.description,mt.isActive,mt.isMasterTemplate,mt.masterTemplateStatus, mt.systemGenerated,  \n" +
                "				fun_getUserNameByID(mt.updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(mt.createdBy) createdby,  \n" +
                "				fun_getRoleByID(mt.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(mt.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(mt.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(mt.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                (CASE WHEN (mt.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (mt.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,  \n" +
                "				(CASE WHEN (`mt`.`isMasterTemplate` = 0) THEN 'No'  \n" +
                "					WHEN (`mt`.`isMasterTemplate` = 1) THEN 'Yes' ELSE '' END) AS `isMasterTemplateValue`,  \n" +
                "			   (SELECT COUNT(*) FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateID = mt.id  \n" +
                "				AND operationId IN (SELECT opID FROM operations WHERE deletedAt IS NULL)) AS operationCount /* 1 - published op */  ,  \n" +
                "				fun_getGenericStatusNameByID(masterTemplateStatus) AS `masterTemplateStatusText`,  \n" +
                "                Exists (SELECT 1 FROM operation_master_templates omt where omt.masterTemplateId = mt.id AND omt.operationId in (\",poperationIds,\") AND omt.`isActive`= 1 AND omt.`deletedAt` IS NULL) as operaionExists  \n" +
                "			FROM master_templates mt  \n" +
                "			WHERE mt.`deletedAt` IS NULL) a  where 1=1  \n" +
                "		\");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY masterTemplate ASC\" ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		 /* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveMasterTemplate,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveMasterTemplate,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 24-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5695,'2.00','V1',' User Story 39452: Operation Template: Improvement Points Suggested By Client - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5695:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_bin_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_bin_to_transfer`(  \n" +
                "	pPageIndex INT(11),  \n" +
                "	pRecordPerPage INT(11),  \n" +
                "	pWarehouseID INT(11),  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchBinString VARCHAR(1000),  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchClusterWHID INT(11),  \n" +
                "        pKitSalesOrderDetID INT(11),  \n" +
                "        pKitAssyID INT(11),  \n" +
                "        pDeptID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_GlobalSearchUIDBinId VARCHAR(10000);  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		SELECT  GROUP_CONCAT(c.binID)  \n" +
                "		INTO 	v_GlobalSearchUIDBinId  \n" +
                "		FROM 	component_sid_stock c  \n" +
                "		WHERE 	isdeleted = 0 and  \n" +
                "				uid LIKE CONCAT(\"%\", pGlobalSearchUIDString ,\"%\")  ;  \n" +
                "  END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitBinIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempKitBinIDs (  \n" +
                "		binID INT(11)  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitBinDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempKitBinDet (  \n" +
                "		binID INT(11),  \n" +
                "		uidCount INT(11),  \n" +
                "		PIDCount INT(11)  \n" +
                "	);  \n" +
                "  \n" +
                "	SET @vWhere = \"\";  \n" +
                "	SET @vUIDCountWhere = \"\";  \n" +
                "	SET @vInnerJoinQuery=\"\";  \n" +
                "  \n" +
                "	IF (pGlobalSearchBinString IS NOT NULL ) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND `Name` LIKE '%\", pGlobalSearchBinString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  	IF ( pSearchBinString IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND `Name` LIKE '%\", pSearchBinString ,\"%' \");  \n" +
                "	END IF;  \n" +
                "	IF (v_GlobalSearchUIDBinId IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND FIND_IN_SET(b.id, '\", v_GlobalSearchUIDBinId ,\"')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
                "  \n" +
                "		INSERT INTO tempKitBinIDs  \n" +
                "		SELECT DISTINCT csd.binID  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		INNER JOIN component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "		INNER JOIN binmst b ON b.id = csd.binID  \n" +
                "		INNER JOIN warehousemst w ON w.id = b.warehouseID  \n" +
                "		WHERE 	k.status = 'A'  \n" +
                "				AND k.refSalesOrderDetID = pKitSalesOrderDetID  \n" +
                "				AND k.assyID = pKitAssyID  \n" +
                "				AND w.parentWHID = IFNULL(pDeptID, w.parentWHID)  \n" +
                "				AND csd.isDeleted = 0;  \n" +
                "  \n" +
                "		-- SET @vWhere = CONCAT(@vWhere, \" AND b.id IN (SELECT binID FROM tempKitBinIDs)\");  \n" +
                "		SET @vInnerJoinQuery = \"inner join kit_allocation k on csd.id = k.refUIDId and k.status = 'A'\";  \n" +
                "		SET @vUIDCountWhere = CONCAT(@vUIDCountWhere, \" AND csd.binID IN (SELECT binID FROM tempKitBinIDs)\");  \n" +
                "		SET @vUIDCountWhere = CONCAT(@vUIDCountWhere, \" and k.refSalesOrderDetID = \",pKitSalesOrderDetID,\" AND k.assyID = \",pKitAssyID);  \n" +
                "  \n" +
                "		-- Store bin's UMID and PID Count  \n" +
                "		  INSERT INTO tempKitBinDet  \n" +
                "		SELECT 	bin.binID,  \n" +
                "			SUM(bin.uidCount) uidCount,  \n" +
                "			COUNT(1) PIDCount  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		csd.binID, csd.refcompid, COUNT(1) uidCount  \n" +
                "				FROM 		component_sid_stock  csd  \n" +
                "				WHERE 		csd.isDeleted = 0  \n" +
                "							AND csd.binID IN (SELECT binID FROM tempKitBinIDs)  \n" +
                "				GROUP BY 	csd.binID, csd.refcompid  \n" +
                "			) BIN  \n" +
                "		GROUP BY bin.binID  \n" +
                "		ORDER BY bin.binid;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWarehouseID IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND b.warehouseID = \", pWarehouseID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchClusterWHID IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND b.warehouseID = \", pGlobalSearchClusterWHID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchString IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND  b.name like '%\", pSearchString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"  \n" +
                "		SELECT 	b.id,  \n" +
                "			b.name,  \n" +
                "			b.isPermanentBin,  \n" +
                "			b.warehouseID,  \n" +
                "			cast(NULL as char(50)) warehouseName,  \n" +
                "			0 departmentID,  \n" +
                "			cast(NULL as char(50)) deptName,  \n" +
                "			0 uidCount,  \n" +
                "			0 PIDCount,  \n" +
                "			0 mismatchUMID,  \n" +
                "			0 mismatchPID,  \n" +
                "			CAST(NULL AS char(50)) warehouseType,  \n" +
                "			CAST(NULL AS char(15000)) kitName,  \n" +
                "			0 numberTotalKit,  \n" +
                "			0 unallocatedUMID  \n" +
                "			-- b.updatedAt  \n" +
                "		FROM 	binmst b  \n" +
                "		WHERE 	b.isDeleted = 0  \n" +
                "		AND 	b.isActive = 1  \n" +
                "	\", @vWhere ,\" ORDER BY updatedAt DESC \");  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@SQLStatement1,\" ) c \");  \n" +
                "	PREPARE queryCount FROM @SQLStatementCount;  \n" +
                "	EXECUTE queryCount;  \n" +
                "	DEALLOCATE PREPARE queryCount;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempBinDet;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS \", @SQLStatement1, \" \", rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempActiveBinIDs;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS  \n" +
                "		SELECT  csd.binID,  \n" +
                "			csd.refcompid,  \n" +
                "			sum(uidCount) uidCount ,  \n" +
                "            count(1) PIDCount  \n" +
                "		FROM 	(  \n" +
                "				SELECT  csd.binID,  \n" +
                "					csd.refcompid , count(1) uidcount  \n" +
                "				FROM 	component_sid_stock  csd \",@vInnerJoinQuery,\"  \n" +
                "				WHERE 	csd.isDeleted = 0  \n" +
                "						AND csd.isinStk = 1  \n" +
                "			\", @vUIDCountWhere,\"  \n" +
                "             group by csd.binID, csd.refcompid  \n" +
                "		) as csd group by csd.binID, csd.refcompid \");  \n" +
                " select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "/* Will use direct tempActiveBinIDs no need to create this temp table.  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempBinCounts;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinCounts AS  \n" +
                "	SELECT 		b.binID,  \n" +
                "			SUM(b.uidCount) uidCount,  \n" +
                "			COUNT(1) PIDCount  \n" +
                "	FROM 		tempActiveBinIDs b  \n" +
                "	GROUP BY 	b.binID  \n" +
                "	ORDER BY 	b.binid;    */  \n" +
                "  \n" +
                "  \n" +
                "	-- Update UMID Count  / PID Count  \n" +
                "	UPDATE tempBinDet t, tempActiveBinIDs c  \n" +
                "	SET t.uidCount = c.uidCount ,  \n" +
                "    t.PIDCount = c.PIDCount  \n" +
                "	WHERE t.id = c.binID;  \n" +
                "  \n" +
                "	-- Update mismatch UMID Count  \n" +
                "	UPDATE tempBinDet t, tempKitBinDet k  \n" +
                "	SET t.mismatchUMID =  (k.uidCount - t.uidCount)  ,  \n" +
                "    t.mismatchPID =  (k.PIDCount - t.PIDCount)  \n" +
                "	WHERE t.id = k.binID;  \n" +
                "  \n" +
                "	-- SET warehouse name  \n" +
                "	UPDATE 	tempBinDet t, warehousemst w  \n" +
                "	SET   	t.warehouseName = w.Name,  \n" +
                "		t.departmentID = w.parentWHID,  \n" +
                "		t.warehouseType = w.warehouseType  \n" +
                "	WHERE	t.warehouseID = w.id;  \n" +
                "  \n" +
                "	-- SET department name  \n" +
                "	UPDATE 	tempBinDet t, warehousemst w  \n" +
                "	SET   	t.deptName = w.Name  \n" +
                "	WHERE	t.departmentID = w.id;  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t  \n" +
                "	SET   	t.kitName = (  \n" +
                "					SELECT 	GROUP_CONCAT(DISTINCT CONCAT(refSalesOrderDetID, '###', assyID, '###', TRIM(fun_getKitNameBySalesOrderSetIDAndAssyID(refSalesOrderDetID, assyID))) SEPARATOR '@@@')  \n" +
                "					FROM 	(  \n" +
                "							SELECT 	refSalesOrderDetID, assyID  \n" +
                "							FROM 	kit_allocation  \n" +
                "							WHERE 	`status` = 'A'  \n" +
                "									AND refUIDId IN (  \n" +
                "										SELECT 	id  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	isdeleted =0  \n" +
                "												AND binID = t.id  \n" +
                "									)  \n" +
                "									AND (CASE WHEN pKitSalesOrderDetID IS NOT NULL THEN refSalesOrderDetID != pKitSalesOrderDetID ELSE 1 = 1 END)  \n" +
                "									AND (CASE WHEN pKitAssyID IS NOT NULL THEN assyID != pKitAssyID ELSE 1 = 1 END)  \n" +
                "							GROUP BY 	refSalesOrderDetID, AssyID  \n" +
                "						) a  \n" +
                "				);  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t  \n" +
                "	SET   	t.numberTotalKit = (  \n" +
                "					SELECT 	COUNT(1)  \n" +
                "					FROM 	(  \n" +
                "							SELECT 	refSalesOrderDetID, assyID  \n" +
                "							FROM 	kit_allocation  \n" +
                "							WHERE 	`status` = 'A'  \n" +
                "									AND refUIDId IN (  \n" +
                "										SELECT 	id  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	isdeleted = 0  \n" +
                "												AND binID = t.id  \n" +
                "									)  \n" +
                "									AND (CASE WHEN pKitSalesOrderDetID IS NOT NULL THEN refSalesOrderDetID != pKitSalesOrderDetID ELSE 1 = 1 END)  \n" +
                "									AND (CASE WHEN pKitAssyID IS NOT NULL THEN assyID != pKitAssyID ELSE 1 = 1 END)  \n" +
                "							GROUP BY 	refSalesOrderDetID, AssyID  \n" +
                "						) a  \n" +
                "				);  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t  \n" +
                "	SET   	t.unallocatedUMID = (  \n" +
                "					SELECT 	COUNT(1)  \n" +
                "					FROM 	(  \n" +
                "							SELECT 	id  \n" +
                "							FROM 	component_sid_stock c  \n" +
                "							WHERE	isdeleted = 0  \n" +
                "									AND binID = t.id  \n" +
                "									AND NOT EXISTS (  \n" +
                "										SELECT 	refUIDId  \n" +
                "										FROM 	kit_allocation k  \n" +
                "										WHERE	`status` = 'A'  \n" +
                "												AND c.id = k.refUIDId  \n" +
                "									)  \n" +
                "						) a  \n" +
                "				);  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempClusterBin;  \n" +
                "	CREATE TEMPORARY TABLE tempClusterBin  \n" +
                "	SELECT 	*,  \n" +
                "		1 binCount,  \n" +
                "		FALSE isCluster  \n" +
                "	FROM tempBinDet  \n" +
                "	WHERE isPermanentBin = 0;  \n" +
                "  \n" +
                "	INSERT INTO tempClusterBin  \n" +
                "	SELECT  0,  \n" +
                "		warehouseName,  \n" +
                "		isPermanentBin,  \n" +
                "		warehouseID,  \n" +
                "		warehouseName,  \n" +
                "		departmentID,  \n" +
                "		deptName,  \n" +
                "		SUM(uidCount),  \n" +
                "		SUM(PIDCount),  \n" +
                "		SUM(mismatchUMID),  \n" +
                "		SUM(mismatchPID),  \n" +
                "		warehouseType,  \n" +
                "		kitName,  \n" +
                "		numberTotalKit,  \n" +
                "		unallocatedUMID,  \n" +
                "		COUNT(1) binCount,  \n" +
                "		TRUE isCluster  \n" +
                "		-- updatedAt  \n" +
                "	FROM 	tempBinDet  \n" +
                "	WHERE 	isPermanentBin = 1  \n" +
                "	GROUP BY warehouseName, isPermanentBin, warehouseID, departmentID, deptName, isCluster;  \n" +
                "  \n" +
                "	-- Update UMID and PID count for bin cluster  \n" +
                "	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempBinClusterNotInKit;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempBinClusterNotInKit AS  \n" +
                "		SELECT 	csd.warehouseID,  \n" +
                "			SUM(uidCount) uidCount,  \n" +
                "			COUNT(1) PIDCount  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		csd.binID,  \n" +
                "						w.id  warehouseID,  \n" +
                "						csd.refcompid,  \n" +
                "						COUNT(1) uidCount  \n" +
                "				FROM 		component_sid_stock  csd  \n" +
                "				INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "				INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "				WHERE 		csd.isDeleted = 0  \n" +
                "							AND binid NOT IN (SELECT id FROM tempBinDet WHERE isPermanentBin = 1)  \n" +
                "							AND w.id IN (SELECT warehouseID FROM tempClusterBin WHERE isPermanentBin = 1)  \n" +
                "				GROUP BY 	csd.binID, w.id, csd.refcompid  \n" +
                "			) csd  \n" +
                "		GROUP BY csd.warehouseID;  \n" +
                "  \n" +
                "		-- Update mismatch UMID Count  \n" +
                "		UPDATE tempClusterBin t, tempBinClusterNotInKit k  \n" +
                "		SET t.mismatchUMID =  (t.mismatchUMID + k.uidCount)  \n" +
                "		WHERE t.warehouseID = k.warehouseID;  \n" +
                "  \n" +
                "		-- Update mismatch PID Count  \n" +
                "		UPDATE tempClusterBin t, tempBinClusterNotInKit k  \n" +
                "		SET t.mismatchPID =  (t.mismatchPID + k.PIDCount)  \n" +
                "		WHERE t.warehouseID = k.warehouseID;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT 		t.*,  \n" +
                "			COUNT(v.PartId) umidPendingParts  \n" +
                "	FROM 		tempClusterBin t  \n" +
                "	LEFT JOIN 	vu_umid_creation_pending v ON v.binID = t.id AND v.BalanceQty > 0  \n" +
                "	GROUP BY 	t.id;  \n" +
                "	-- order by 	t.updatedAt desc;  \n" +
                "END;  \n" +
                "DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pBinID INT,  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pClusterWHID INT,  \n" +
                "	pKitSalesOrderDetID INT,  \n" +
                "	pKitAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_Where VARCHAR(10000);  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "  \n" +
                "	SET v_Where = \"\";  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "    IF (pGlobalSearchUIDString IS NOT NULL ) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND `css.uid` LIKE '%\", pGlobalSearchUIDString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  	IF ( pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND `css.uid` LIKE '%\", pSearchUIDString ,\"%' \");  \n" +
                "	END IF;  \n" +
                "	/* old Logic  \n" +
                "    IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND (css.id IN (  \n" +
                "				SELECT 	id  \n" +
                "				FROM 	component_sid_stock  \n" +
                "				WHERE 	isdeleted = 0  \n" +
                "						AND (uid LIKE '%\", pGlobalSearchUIDString ,\"%' AND uid LIKE '%\", pSearchUIDString ,\"%')  \n" +
                "			)  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
                "			SELECT 	id  \n" +
                "			FROM 	component_sid_stock  \n" +
                "			WHERE 	deletedAt IS NULL  \n" +
                "					AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchUIDString IS NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
                "			SELECT 	id  \n" +
                "			FROM 	component_sid_stock  \n" +
                "			WHERE 	deletedAt IS NULL  \n" +
                "					AND uid LIKE '%\", pSearchUIDString ,\"%'  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  */  \n" +
                "	IF (pBinID IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.binID  = \", pBinID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pClusterWHID IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.binID  in (SELECT id FROM binmst WHERE WarehouseID = \", pClusterWHID, \" AND css.isdeleted = 0)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.uid like '%\", pSearchString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"  \n" +
                "				SELECT 		css.id,  \n" +
                "						css.scanlabel,  \n" +
                "						css.pkgQty,  \n" +
                "						css.uid,  \n" +
                "						c.PIDCode,  \n" +
                "						c.mfgcodeID,  \n" +
                "						c.mfgPN,  \n" +
                "						mfg.mfgCode,  \n" +
                "						mfg.mfgName,  \n" +
                "						ro.rohsIcon,  \n" +
                "						ro.name AS rohsName,  \n" +
                "						css.nickName,  \n" +
                "						css.binID,  \n" +
                "						cast(NULL as char(50)) binName,  \n" +
                "						0 warehouseID,  \n" +
                "						cast(NULL as char(50)) warehouseName,  \n" +
                "						0 parentWHID,  \n" +
                "						cast(NULL as char(50)) deptName,  \n" +
                "						css.uom,  \n" +
                "						cast('' as char(100)) uomName,  \n" +
                "						false isAllocatedToKit,  \n" +
                "						css.receiveMaterialType,  \n" +
                "						css.refcompid,  \n" +
                "						css.pkgUnit,  \n" +
                "						false isBelongsToSameKit,  \n" +
                "						fun_getMountingTypeNameByID(c.mountingTypeID) mountingTypeName,  \n" +
                "						0 refSalesOrderDetID, 	0 assyID,  \n" +
                "						fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKits,  \n" +
                "						cast(NULL as char(50)) warehouseType,  \n" +
                "						c.isCustom,  \n" +
                "						css.updatedAt  \n" +
                "				FROM 		component_sid_stock css  \n" +
                "				LEFT OUTER JOIN component c ON c.id=css.refcompid AND c.isdeleted=0  \n" +
                "				LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND ro.isdeleted=0  \n" +
                "				LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND mfg.isdeleted=0  \n" +
                "				WHERE	css.isdeleted = 0  \n" +
                "							AND css.isinStk = 1  \n" +
                "			\", v_Where , \" ORDER BY css.updatedAt DESC \"  \n" +
                "		);  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@SQLStatement1,\" ) c \");  \n" +
                "	PREPARE query1 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS Results AS \", @SQLStatement1, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @SQLStatement1;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	-- SET Bin name  \n" +
                "	UPDATE 	Results r, binmst b  \n" +
                "	SET   	r.binName = b.Name, r.warehouseID = b.WarehouseID  \n" +
                "	WHERE	r.binID = b.id;  \n" +
                "  \n" +
                "	-- SET warehouse name  \n" +
                "	UPDATE 	Results r, warehousemst w  \n" +
                "	SET   	r.warehouseName = w.Name, r.parentWHID = w.parentWHID, r.warehouseType = w.warehouseType  \n" +
                "	WHERE	r.warehouseID = w.id;  \n" +
                "  \n" +
                "	-- SET department name  \n" +
                "	UPDATE 	Results r, warehousemst w  \n" +
                "	SET   	r.deptName = w.Name  \n" +
                "	WHERE	r.parentWHID = w.id;  \n" +
                "  \n" +
                "	-- Set UOM  \n" +
                "	UPDATE 	Results r, uoms u  \n" +
                "	SET   	r.uomName = u.unitName  \n" +
                "	WHERE	r.uom = u.id;  \n" +
                "  \n" +
                "	-- Set UMID is allocated to kit  \n" +
                "	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
                "		UPDATE 	Results r, kit_allocation k  \n" +
                "		SET   	r.isAllocatedToKit = TRUE,  \n" +
                "			r.refSalesOrderDetID = k.refSalesOrderDetID,  \n" +
                "			r.assyID = k.assyID,  \n" +
                "			r.isBelongsToSameKit = (CASE WHEN k.refSalesOrderDetID = pKitSalesOrderDetID AND k.assyID = pKitAssyID THEN TRUE ELSE FALSE END)  \n" +
                "		WHERE	r.id = k.refUIDId  \n" +
                "		AND 	k.status = 'A'  \n" +
                "		AND 	k.refSalesOrderDetID = pKitSalesOrderDetID  \n" +
                "		AND 	k.assyID = pKitAssyID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results \"); -- order by isBelongsToSameKit desc  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5696,'2.00','V1',' Tune SP Sproc_retrive_bin_to_transfer, Sproc_retrive_UID_to_transfer - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5696:
            allDbChangesArray.push(
                /* **************************** new script -> 28-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(10),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchPoSoPsInv VARCHAR(50),  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pReceiveStatus VARCHAR(255),  \n" +
                "    IN pPackingSlipFromDate DATE,  \n" +
                "    IN pPackingSlipToDate DATE,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pPostingStatusFilter VARCHAR(10),  \n" +
                "    IN pPSComments VARCHAR(1000),  \n" +
                "    IN pSelectedDateType VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"  \n" +
                "									  \" )  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "	IF (pReceiveStatus IS NOT NULL AND pReceiveStatus != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (\",pReceiveStatus,\")\");  \n" +
                "    END IF;  \n" +
                "    IF pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (receiptDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (poDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "        END IF;  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "    	IF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (receiptDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (poDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "    IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" and lockStatus IN (\", pLockStatusFilter ,\")\");  \n" +
                "	END IF;  \n" +
                "    IF(pPostingStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" and packingSlipModeStatus = '\", pPostingStatusFilter,\"'\");  \n" +
                "	END IF;  \n" +
                "    IF (pPSComments IS NOT NULL AND pPSComments != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \"  \n" +
                "				AND (internalRemark LIKE '%\",pPSComments,\"%'  \n" +
                "                OR poComment LIKE '%\",pPSComments,\"%'  \n" +
                "                OR shippingComment LIKE '%\",pPSComments,\"%')  \n" +
                "                \");  \n" +
                "    END IF;  \n" +
                "	IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = refPackingSlipNumberForInvoice  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" like '%\", pPaymentNumber, \"%' \") ELSE CONCAT(\" = \", pPaymentNumber ,\" \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"  \n" +
                "			SELECT  *  \n" +
                "			FROM	(  \n" +
                "					SELECT 		p.id,  \n" +
                "							p.systemId,  \n" +
                "							p.poNumber,  \n" +
                "                            p.poDate,  \n" +
                "							p.refPurchaseOrderID poId,  \n" +
                "							p.mfgCodeID,  \n" +
                "							p.supplierSONumber,  \n" +
                "                            p.soDate,  \n" +
                "							p.packingSlipNumber,  \n" +
                "							p.packingSlipDate,  \n" +
                "							p.invoiceNumber,  \n" +
                "							p.invoiceDate,  \n" +
                "							p.creditMemoNumber,  \n" +
                "							p.creditMemoDate,  \n" +
                "							p.debitMemoNumber,  \n" +
                "							p.debitMemoDate,  \n" +
                "							p.receiptDate,  \n" +
                "							p.description,  \n" +
                "							p.billToAddress,  \n" +
                "							p.shipToAddress,  \n" +
                "							p.poVersion,  \n" +
                "							p.isDeleted,  \n" +
                "							p.receiptType,  \n" +
                "							p.`status`,  \n" +
                "							p.packingSlipModeStatus,  \n" +
                "							p.chequeNumber,  \n" +
                "							p.chequeDate,  \n" +
                "							p.chequeAmount,  \n" +
                "							p.applyDate,  \n" +
                "							p.refParentCreditDebitInvoiceno,  \n" +
                "							p.refPackingSlipNumberForInvoice,  \n" +
                "							p.invoiceTotalDue,  \n" +
                "							p.isTariffInvoice,  \n" +
                "							p.bankName,  \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "							fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "							m.mfgCode supplierCode,  \n" +
                "							fun_GetFormattedMfgCode(m.mfgCode , m.mfgName,\",v_mfgNameFormat,\") supplierCodeName,  \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "									WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) packingSlipModeStatusValue,  \n" +
                "							ps.id invoiceId,  \n" +
                "							ps.invoiceNumber refInvoiceNumber,  \n" +
                "                            ps.lockStatus refInvoiceLockStatus,  \n" +
                "							ps.invoiceDate refInvoiceDate,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.status = 'I' THEN 'Investigate'  \n" +
                "									WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
                "									WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
                "									WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "									WHEN p.status = 'P' THEN 'Fully Paid'  \n" +
                "                                    WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) statusValue,  \n" +
                "							IFNULL(g.cnt,0) packingSlipDocCount,  \n" +
                "							psm.TotalLines,  \n" +
                "							psm.PendingLines,  \n" +
                "                            psm.AcceptedWithDeviationLines,  \n" +
                "                            psm.RejectedLines,  \n" +
                "                            psm.AcceptedLines,  \n" +
                "                            p.lockStatus,  \n" +
                "                            (case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "								when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "                                when p.lockStatus = 'LC' then 'Locked'  \n" +
                "                                else null end  \n" +
                "                            ) lockStatusValue,  \n" +
                "                            fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                            p.isCustConsigned,  \n" +
                "                            CASE WHEN p.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "                            p.CustomerID,  \n" +
                "                            fun_GetFormattedMfgCode(mc.mfgcode, mc.mfgName, \",v_mfgNameFormat,\") customerName,  \n" +
                "                            p.isNonUMIDStock,  \n" +
                "                            CASE WHEN p.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                            p.internalRemark,  \n" +
                "                            pom.poComment,  \n" +
                "                            pom.shippingComment  \n" +
                "					FROM		packing_slip_material_receive p  \n" +
                "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	refPackingSlipMaterialRecID,  \n" +
                "										sum(totalLines) as TotalLines,  \n" +
                "                                        sum(pendingLines) as PendingLines,  \n" +
                "                                        sum(acceptedWithDeviationLines) as AcceptedWithDeviationLines,  \n" +
                "                                        sum(rejectedLines) as RejectedLines,  \n" +
                "                                        sum(acceptedLines) as AcceptedLines  \n" +
                "								FROM 		packing_slip_material_receive_det psm  \n" +
                "								WHERE 		isDeleted = 0  \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id  \n" +
                "                    join mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "                    LEFT JOIN mfgcodemst mc ON mc.id = p.CustomerID  \n" +
                "					LEFT JOIN purchase_order_mst pom ON pom.id = p.refPurchaseOrderID AND pom.isDeleted = 0  \n" +
                "					WHERE p.receiptType = 'P' and p.isDeleted = false ) a  \n" +
                "			WHERE \", v_advanceFilterWhereClause  \n" +
                "		);  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "    /* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " END;  \n" +
                /* **************************** new script -> 28-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(30),  \n" +
                "	IN pMfgCodeIds LONGTEXT,  \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearch TINYINT,  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pInvoiceIds LONGTEXT,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvoiceFromDate DATE,  \n" +
                "    IN pInvoiceToDate DATE,  \n" +
                "    IN pMarkedForRefundStatus LONGTEXT,  \n" +
                "    IN pInvoiceComments VARCHAR(1000),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pSelectedDateType VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentDate DATE;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
                "			SELECT 		p.id,  \n" +
                "					p.systemId,  \n" +
                "					p.poNumber,  \n" +
                "                    p.poDate,  \n" +
                "                    p.refPurchaseOrderID poId,  \n" +
                "					p.mfgCodeID,  \n" +
                "					p.supplierSONumber,  \n" +
                "                    p.soDate,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
                "					p.packingSlipDate,  \n" +
                "					p.invoiceNumber,  \n" +
                "                    p.lockStatus invoiceLockStatus,  \n" +
                "					p.invoiceDate,  \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
                "					p.creditMemoNumber,  \n" +
                "                    p.lockStatus creditMemoLockStatus,  \n" +
                "					p.creditMemoDate,  \n" +
                "					p.debitMemoNumber,  \n" +
                "                    p.refSupplierCreditMemoNumber,  \n" +
                "                    p.lockStatus debitMemoLockStatus,  \n" +
                "					p.debitMemoDate,  \n" +
                "					p.receiptDate,  \n" +
                "					p.description,  \n" +
                "					p.billToAddress,  \n" +
                "					p.shipToAddress,  \n" +
                "					p.poVersion,  \n" +
                "					p.isDeleted,  \n" +
                "					p.receiptType,  \n" +
                "					p.`status`,  \n" +
                "					p.applyDate,  \n" +
                "					p.refParentCreditDebitInvoiceno,  \n" +
                "					p.refPackingSlipNumberForInvoice,  \n" +
                "					p.invoiceTotalDue,  \n" +
                "					p.isTariffInvoice,  \n" +
                "					p.creditMemoType,  \n" +
                "                    (  \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
                "								'Invoice Credit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MC' THEN  \n" +
                "								'MISC Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'RC' THEN  \n" +
                "								'RMA Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'ID' THEN  \n" +
                "								'Invoice Debit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MD' THEN  \n" +
                "								'MISC Debit Memo'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
                "								'Invoice'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
                "								'MISC Invoice'  \n" +
                "						END  \n" +
                "					) subTypeValue,  \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                    m.mfgName supplierName,  \n" +
                "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
                "					m.mfgCode supplierCodeName,  \n" +
                "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
                "					pg.packingSlipDocCount,  \n" +
                "					pd.itemReceived,  \n" +
                "					pd.otherChargesItemReceived,  \n" +
                "					pd.itemDisapproved,  \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
                "					ps.status parentInvoiceStatus,  \n" +
                "					ps.invoiceNumber refInvoiceNumber,  \n" +
                "                    ps.lockStatus refInvoiceLockStatus,  \n" +
                "					ps.creditMemoType parentCreditMemoType,  \n" +
                "					pd.totalExtendedAmount,  \n" +
                "                    pd.totalDiscount,  \n" +
                "					pe.totalCreditAmount,  \n" +
                "					pe.totalDebitAmount,  \n" +
                "					(  \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
                "					) amountToPay,  \n" +
                "                    pd.totalExtendedReceivedPrice,  \n" +
                "					pd.packingDetailNote,  \n" +
                "					pd.approveLineCount,  \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
                "											p.debitMemoDate  \n" +
                "										WHEN p.receiptType = 'C' THEN  \n" +
                "											p.creditMemoDate  \n" +
                "										ELSE p.invoiceDate  \n" +
                "									end), payTerm.termsDays, p.paymentTermsID) paymentDueDate,  \n" +
                "					g.gencCategoryName paymentTermName,  \n" +
                " 					m.paymentTermsID paymentTermsID,  \n" +
                "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
                "                    p.paymentTermsID invPaymentTermsID,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
                "					psm.packingSlipModeStatus,  \n" +
                "                    psPay.paymentDate,  \n" +
                "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
                "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
                "					p.invoiceRequireManagementApproval,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
                "								'Yes'  \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
                "								'No'  \n" +
                "						END  \n" +
                "					) invoiceRequireManagementApprovalValue,  \n" +
                "					p.invoiceApprovalStatus,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
                "								'Approved'  \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
                "								'Pending'  \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
                "								'N/A'  \n" +
                "						END  \n" +
                "					) invoiceApprovalStatusValue,  \n" +
                "					p.invoiceApprovedBy,  \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.invoiceApprovalDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') invoiceApprovalDate,  \n" +
                "					p.invoiceApprovalComment,  \n" +
                "					p.internalRemark,  \n" +
                "                    p.remark,  \n" +
                "					p.lockStatus,  \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "						when p.lockStatus = 'LC' then 'Locked'  \n" +
                "						else null end  \n" +
                "					) lockStatusValue,  \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                    case when p.receiptType = 'I' then  \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
                "					h1.refType as haltRefType,  \n" +
                "                    h1.status as haltStatus,  \n" +
                "                    (CASE WHEN h1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltStatusText,  \n" +
                "                    (CASE  \n" +
                "							WHEN h1.status = 'H' THEN  \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReason,  \n" +
                "                    psh1.refType as haltRefTypeRefInv,  \n" +
                "                    psh1.status as haltStatusRefInv,  \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInvText,  \n" +
                "                    (CASE  \n" +
                "							WHEN psh1.status = 'H' THEN  \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInv,  \n" +
                "                    p.markedForRefund,  \n" +
                "                    (case when p.markedForRefund = 0 then 'N/A'  \n" +
                "						else case when ifnull(psPay.refundAmount,0) = 0 then  \n" +
                "										'Waiting for Refund'  \n" +
                "								when ifnull(psPay.refundAmount,0) <> 0 and ifnull(psPay.refundAmount,0) <> ifnull(p.markedForRefundAmt,0)  then  \n" +
                "										'Partially Refunded'  \n" +
                "								when ifnull(psPay.refundAmount,0) = ifnull(p.markedForRefundAmt,0) then  \n" +
                "										'Fully Refunded'  \n" +
                "								else '' end  \n" +
                "						end  \n" +
                "					) markedForRefundValue,  \n" +
                "                    p.markedForRefundAmt  \n" +
                "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
                "							gFiles.gencFileOwnerType,  \n" +
                "							gFiles.refTransID,  \n" +
                "							gFiles.entityID  \n" +
                "						FROM genericfiles gFiles  \n" +
                "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
                "						and gFiles.entityID in (-13,-15,-16)  \n" +
                "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
                "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
                "																		WHEN p.receiptType = 'D' THEN -16  \n" +
                "																		ELSE -13  \n" +
                "																	END)  \n" +
                "				and psDoc.refTransID = p.id  \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
                "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where h2.refTransId = h1.refTransId  \n" +
                " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
                "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
                "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where psh1.refTransId = h2.refTransId  \n" +
                " 											  and h2.refType = 'SINV'  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
                "            left join (  \n" +
                "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
                "				FROM 	vu_genericfilescount g  \n" +
                "				WHERE 	g.entityID = -14  \n" +
                "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
                "            ) pg on pg.refTransID = psm.id  \n" +
                "			left join (  \n" +
                "							select 	a.refPackingSlipMaterialRecID,  \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
                "								sum(a.itemReceived) itemReceived,  \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
                "								sum(a.itemDisapproved) itemDisapproved,  \n" +
                "								sum(a.approveLineCount) approveLineCount,  \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
                "                                sum(discount) totalDiscount,  \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
                "							from 	(  \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
                "										psm.packingSlipSerialNumber,  \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
                "										extendedPrice,  \n" +
                "                                        discount,  \n" +
                "										extendedReceivedPrice  \n" +
                "									FROM 	packing_slip_material_receive_det psm  \n" +
                "									WHERE 	psm.isDeleted = 0  \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
                "								) a  \n" +
                "							group by a.refPackingSlipMaterialRecID  \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
                "				left join (select b.refPackingslipInvoiceID,  \n" +
                "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount,  \n" +
                "                                    max(case when a.refPaymentMode = 'P' then a.paymentDate else null end) paymentDate  \n" +
                "							  from packingslip_invoice_payment a  \n" +
                "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "							 where a.refPaymentMode IN ('P','RR')  \n" +
                "							   and a.isPaymentVoided = 0  \n" +
                "							   and b.isDeleted = 0  \n" +
                "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
                "				left join (  \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
                "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
                "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
                "							from 		packing_slip_material_receive ps  \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
                "                            left join (select b.refPackingslipInvoiceID,  \n" +
                "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "										 where a.refPaymentMode IN ('P','RR')  \n" +
                "										   and b.isPaymentVoided = 0  \n" +
                "										   and b.isDeleted = 0  \n" +
                "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
                "								  where ps.receiptType in ('C','D')  \n" +
                "									and ps.isDeleted = 0  \n" +
                "									and pd.isDeleted = 0  \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
                "				WHERE p.`status` in ('PE','I','A','P','PP') and p.isDeleted = 0 \",  \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pInvPaymentTermsIds IS NOT NULL AND pInvPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pInvPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and p.lockStatus IN (\", pLockStatusFilter ,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "      IF(pInvoiceComments IS NOT NULL AND pInvoiceComments != '')THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and (p.internalRemark LIKE '%\",pInvoiceComments,\"%' OR p.remark LIKE '%\",pInvoiceComments,\"%')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = p.id  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = \", pPaymentNumber ,\" \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefundStatus IS NOT NULL and pMarkedForRefundStatus != '' THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.markedForRefundValue in (\",pMarkedForRefundStatus,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
                "													or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		END IF;  \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
                "													   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
                "		IF pIsExactSearch = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
                "				SELECT 1  \n" +
                "				  FROM packing_slip_material_receive_det x  \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "    EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*,  \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "				round(c.paidAmount,2) totalPaidAmount,  \n" +
                "                round(c.refundAmount,2) totalRefundAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** new script -> 28-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierInvoicePayment`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pSupplierIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "    IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "    IN pRefPaymentMode VARCHAR(2),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pSelectedDateType VARCHAR(10),  \n" +
                "    IN pPaymentComments VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPaymentComments IS NOT NULL AND pPaymentComments != '')THEN  \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause,\" AND remark LIKE '%\",pPaymentComments,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause,\" AND lockStatus = '\", pLockStatusFilter ,\"'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "			EXISTS (select 1  \n" +
                "					   from packing_slip_material_receive psd  \n" +
                "					   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "					  where psd.isDeleted = 0  \n" +
                "						and pdet.refPayementid = inv.id  \n" +
                "						AND psd.invoiceNumber = \"',pInvoiceNumber,'\"  \n" +
                "				)'  \n" +
                "		);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pFromDate IS NOT NULL AND pToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.poDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.receiptDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.packingSlipDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		END IF;  \n" +
                "	ELSEIF pFromDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.poDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.receiptDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.packingSlipDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.invoiceDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate = '\",pFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"  \n" +
                "		SELECT		inv.id,  \n" +
                "				inv.systemId,  \n" +
                "				inv.mfgcodeID,  \n" +
                "				fun_getMfgCodeByID(inv.mfgcodeID) supplier,  \n" +
                "				fun_getMfgCodeAndNameByID(inv.mfgcodeID) supplierCodeName,  \n" +
                "				inv.isPaymentVoided,  \n" +
                "				case 	when inv.isPaymentVoided = 0 then  \n" +
                "						'Paid'  \n" +
                "					else  \n" +
                "						'Voided'  \n" +
                "				end isPaymentVoidedConvertedValue,  \n" +
                "				inv.voidPaymentReason,  \n" +
                "				inv.refVoidedPaymentNumber,  \n" +
                "                inv.refVoidedPaymentId,  \n" +
                "                (select c.lockStatus from packingslip_invoice_payment c  \n" +
                "					where c.id = inv.refVoidedPaymentId) refVoidedPaymentLockStatus,  \n" +
                "				inv.paymentNumber,  \n" +
                "				inv.bankName,  \n" +
                "				inv.bankAccountNo,  \n" +
                "				inv.paymentType,  \n" +
                "				inv.bankAccountMasID,  \n" +
                "				gc.gencCategoryName paymentMethod,  \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "				inv.paymentDate,  \n" +
                "				invdet.invoiceAmount,  \n" +
                "				inv.paymentAmount,  \n" +
                "				inv.payToAddress payToAddress,  \n" +
                "				inv.payToName,  \n" +
                "                inv.refGencTransModeID,  \n" +
                "                gtm.modeName transactionModeName,  \n" +
                "                gtm.systemGenerated systemGeneratedTransactionMode,  \n" +
                "				inv.accountReference,  \n" +
                "				inv.remark,  \n" +
                "                inv.depositBatchNumber,  \n" +
                "                inv.offsetAmount,  \n" +
                "                inv.acctId,  \n" +
                "                fun_getChartOfAccountsCodeNameByID(inv.acctId) coaName,  \n" +
                "				fun_getUserNameByID(inv.createdBy) createdby,  \n" +
                "				fun_getUserNameByID(inv.updatedBy) updatedby,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,  \n" +
                "				fun_getRoleByID(inv.createByRoleId) createdbyRole,  \n" +
                "				inv.lockStatus,  \n" +
                "				(case when inv.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "					when inv.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "					when inv.lockStatus = 'LC' then 'Locked'  \n" +
                "					else null end  \n" +
                "				) lockStatusValue,  \n" +
                "				fun_getUserNameByID(inv.lockedBy) lockByName,  \n" +
                "				fun_getRoleByID(inv.lockedByRoleId) lockedByRoleName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM	packingslip_invoice_payment inv  \n" +
                "		INNER JOIN 	genericcategory gc ON inv.paymentType = gc.gencCategoryID  \n" +
                "        left join generic_transmode_mst gtm ON gtm.id = inv.refGencTransModeID  \n" +
                "		left JOIN (  \n" +
                "					SELECT 		pid.refPayementid,	SUM(psmd.extendedPrice) invoiceAmount  \n" +
                "					FROM 		packingslip_invoice_payment_det pid  \n" +
                "					LEFT JOIN 	packing_slip_material_receive_det psmd ON psmd.refPackingSlipMaterialRecID = pid.refPackingslipInvoiceID AND psmd.isDeleted = 0  \n" +
                "					WHERE 		pid.isDeleted = 0  \n" +
                "                       and		pid.isPaymentVoided = 0  \n" +
                "					GROUP BY 	pid.refPayementid  \n" +
                "				) invdet ON invdet.refPayementid = inv.id  \n" +
                "		WHERE 		inv.isDeleted = 0  \n" +
                "					AND inv.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "					AND gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** add script version -> 28-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5697,'2.00','V1',' User Story 37379: Add some filters in Advance Filter - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5697:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitAllocationForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitAllocationForElastic`(  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE pWhereClause VARCHAR(1000);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount\");  \n" +
                "		SET pWhereClause = ' sd.isDeleted = 0 ' ;  \n" +
                "	ELSE  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			  k.id  \n" +
                "				,k.refSalesOrderDetID  \n" +
                "                ,sd.refSalesOrderID  \n" +
                "				,s.poNumber  \n" +
                "				,s.salesOrderNumber  \n" +
                "				,k.assyId  \n" +
                "                ,assy.mfgcodeID  \n" +
                "                ,assy_mcm.mfgType assyMfgType  \n" +
                "				,assy.PIDCode AssyPIdCode  \n" +
                "				,assy.mfgPN assyMfgPN  \n" +
                "				,k.partId  \n" +
                "                ,c_mcm.mfgType partMfgType  \n" +
                "				,c.PIDCode partCode  \n" +
                "				,assy.mfgPN partMfgPn  \n" +
                "				,c.assyCode part  \n" +
                "				,k.UID  \n" +
                "				,k.refUIDId  \n" +
                "                ,k.allocatedQty  \n" +
                "                ,k.consumeQty  \n" +
                "                ,k.scrapExpiredQty  \n" +
                "                ,CASE WHEN k.STATUS = 'A' THEN 'Allocated'  \n" +
                "					WHEN k.STATUS = 'R' THEN 'Return'  \n" +
                "					WHEN k.STATUS = 'D' THEN 'Deallocated'  \n" +
                "					ELSE 'Consumed' END KitStatus  \n" +
                "                ,k.returnQty  \n" +
                "                ,sd.isDeleted,  \n" +
                "                sd.kitNumber\");  \n" +
                "  \n" +
                "			/*IF(pId IS NULL OR pId = '') THEN  \n" +
                "				SET pWhereClause = ' 1=1 ' ;  \n" +
                "			ELSE */  \n" +
                "				SET pWhereClause = CONCAT(\"k.id IN (select pId from tempKitAllocation)\");  \n" +
                "			/*END IF;*/  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(@temp_Sproc_GetKitAllocationForElastic, \"  \n" +
                "			from kit_allocation k  \n" +
                "			inner join salesorderdet sd on k.refSalesOrderDetID = sd.id and sd.partCategory=3  \n" +
                "			left JOIN salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "			left join component assy on k.assyId = assy.Id  \n" +
                "			left join component c on k.partId = c.Id  \n" +
                "            left join mfgcodemst assy_mcm on assy.mfgcodeId = assy_mcm.id  \n" +
                "            left join mfgcodemst c_mcm on c.mfgcodeId = c_mcm.id  \n" +
                "            where  \n" +
                "	\");  \n" +
                "  \n" +
                "    IF (pFromdate IS NOT NULL OR pTodate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause,\"  AND (((DATE(fun_CovnertDateTimeByTimezoneValue(k.createdAt,'\",v_TimeZone,\"'))  \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(k.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"'))  \n" +
                "        OR ((DATE(fun_CovnertDateTimeByTimezoneValue(sd.createdAt,'\",v_TimeZone,\"'))  \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(sd.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"')));\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@temp_Sproc_GetKitAllocationForElastic, pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempKitAllocation;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5698,'2.00','V1','Bug 39950: [Main Branch] Gives Error log while Allocating too many UMIDs together from Elastic Search for Kit allocation - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5698:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_warehouse_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_warehouse_to_transfer`(  \n" +
                "	pPageIndex INT(11),  \n" +
                "	pRecordPerPage INT(11),  \n" +
                "	pDeptID INT(11),  \n" +
                "	pGlobalSearchWHString VARCHAR(1000),  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pParamSearchWHId INT,  \n" +
                "	pSearchWHString VARCHAR(1000),  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchClusterWHID INT(11),  \n" +
                "	pRefSalesOrderDetID INT(11),  \n" +
                "	pAssyId INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_CurrentKit VARCHAR(1000);  \n" +
                "	DECLARE v_GlobalSearchBinWHId VARCHAR(10000);  \n" +
                "  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	IF(pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "  \n" +
                "		SELECT  GROUP_CONCAT(b.WarehouseID)  \n" +
                "		INTO 	v_GlobalSearchBinWHId  \n" +
                "		FROM 	binmst b WHERE b.id IN (  \n" +
                "			SELECT 	c.binID  \n" +
                "			FROM 	component_sid_stock c  \n" +
                "			WHERE 	isdeleted  = 0  \n" +
                "			AND uid LIKE CONCAT(\"%\", pGlobalSearchUIDString ,\"%\")  \n" +
                "            group by c.binID  \n" +
                "			);  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pGlobalSearchBinString IS NOT NULL) THEN  \n" +
                "		SELECT GROUP_CONCAT(b.WarehouseID) INTO v_GlobalSearchBinWHId FROM binmst b WHERE  `Name` LIKE CONCAT(\"%\", pGlobalSearchBinString ,\"%\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  \"  \n" +
                "			SELECT 	w.id,  \n" +
                "				w.name,  \n" +
                "				w.isPermanentWH,  \n" +
                "				w.uniqueCartID,  \n" +
                "				w.parentWHID,  \n" +
                "				pw.parentWHType,  \n" +
                "				pw.name deptName,  \n" +
                "				0 binCount,  \n" +
                "				0 uidCount,  \n" +
                "				0 totalEmptyBin,  \n" +
                "				0 anotherKitStock,  \n" +
                "				0 unallocatekitStock,  \n" +
                "				0 numberTotalKit,  \n" +
                "				0 unallocatedUMID,  \n" +
                "				w.allMovableBin,  \n" +
                "				w.warehouseType,  \n" +
                "				fun_getWarehouseTypeByKey(w.warehouseType) warehouseTypeValue,  \n" +
                "				CAST(NULL AS CHAR(10000)) kitName,  \n" +
                "				CAST(NULL AS CHAR(15000)) emptyBinName,  \n" +
                "				CAST(w.updatedAt AS DATETIME) updatedAt  \n" +
                "			FROM 	warehousemst w,  warehousemst pw  \n" +
                "			WHERE 	w.isDepartment != 1  and w.parentWHID = pw.id  \n" +
                "					AND 	w.isDeleted = 0  \n" +
                "					AND 	w.isActive = 1  \n" +
                "					AND	w.id > 0  \n" +
                "			\";  \n" +
                "  \n" +
                "	IF (pRefSalesOrderDetID IS NOT NULL AND pAssyId IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id IN (  \n" +
                "									SELECT 	 b.WarehouseID  \n" +
                "									FROM 	component_sid_stock a inner join binmst b on  a.binid = b.id  \n" +
                "									WHERE 	a.isdeleted = 0  \n" +
                "										AND a.id IN (  \n" +
                "											SELECT 	refUIDId  \n" +
                "											FROM 	kit_allocation  \n" +
                "											WHERE 	`status` = 'A'  \n" +
                "													AND refSalesOrderDetID = \", pRefSalesOrderDetID ,\"  \n" +
                "													AND assyID = \", pAssyId ,\"  \n" +
                "										)  \n" +
                "                                      group by b.WarehouseID  \n" +
                "									)\");  \n" +
                "	END IF;  \n" +
                "    iF pGlobalSearchWHString IS NOT NULL  then  \n" +
                "		SET @vSQLMainQuery =CONCAT(@vSQLMainQuery, \"and  w.`Name` LIKE '%\", pGlobalSearchWHString ,\"%' \");  \n" +
                "	end if;  \n" +
                "	if pSearchWHString IS NOT NULL then  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"   AND w.Name LIKE '%\", pSearchWHString ,\"%')  \");  \n" +
                "	end if;  \n" +
                "  \n" +
                "	IF(v_GlobalSearchBinWHId IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND FIND_IN_SET(w.id, '\", v_GlobalSearchBinWHId ,\"')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pGlobalSearchClusterWHID IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id = \",pGlobalSearchClusterWHID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pDeptID IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.parentWHID = \",pDeptID);  \n" +
                "	END IF;  \n" +
                "	IF(pSearchString IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND w.name like '%\", pSearchString ,\"%' \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_GlobalSearchBinWHId IS NULL AND (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL)) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id = NULL\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pParamSearchWHId IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id = \",pParamSearchWHId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" ORDER BY w.updatedAt DESC \");  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempWarehouseDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempWarehouseDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "select  @vSQLMainQuery;  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempBinDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS  \n" +
                "	SELECT 	b.id, b.name, 0 uidCount, b.warehouseID  \n" +
                "	FROM 	binmst b  \n" +
                "	WHERE 	b.warehouseID IN (SELECT w.id FROM tempWarehouseDet w)  \n" +
                "		AND 	b.isActive = 1  \n" +
                "		AND 	b.isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempActiveBinIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS  \n" +
                "	SELECT 	 binID, COUNT(1) uidCount  \n" +
                "	FROM 	component_sid_stock  \n" +
                "	WHERE 	binID IN  (SELECT b.id FROM tempBinDet b)  \n" +
                "		AND		isDeleted = 0  \n" +
                "		AND		isinStk = 1  \n" +
                "	GROUP BY binID;  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t,  tempActiveBinIDs c  \n" +
                "	SET    	t.uidCount = c.uidCount  \n" +
                "	WHERE   t.id = c.binID;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempActiveWarehouseIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveWarehouseIDs AS  \n" +
                "	SELECT 	 warehouseID, COUNT(1) binCount, SUM(uidCount) uidCount  \n" +
                "	FROM 	tempBinDet  \n" +
                "	GROUP BY warehouseID;  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t,   tempActiveWarehouseIDs c  \n" +
                "	SET   	t.binCount = c.binCount,  \n" +
                "			t.uidCount = c.uidCount  \n" +
                "	WHERE  	t.id = c.warehouseID;  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.totalEmptyBin = (SELECT COUNT(1) FROM tempBinDet tb WHERE uidCount = 0 AND tb.warehouseID = t.id);  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.emptyBinName = (SELECT GROUP_CONCAT(`name`) FROM tempBinDet tb WHERE uidCount = 0 AND tb.warehouseID = t.id);  \n" +
                "  \n" +
                "	SELECT TRIM(fun_getKitNameBySalesOrderSetIDAndAssyID(pRefSalesOrderDetID, pAssyId)) INTO v_CurrentKit;  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.anotherKitStock = (SELECT COUNT(1)  \n" +
                "				FROM 	(  \n" +
                "						SELECT 	*  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.binID , GROUP_CONCAT(DISTINCT a.allocatedToKit) allocatedToKit, COUNT(DISTINCT a.allocatedToKit) kitCount  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	id, binID, fun_getAllocatedKitsNameByID(id, 'A') allocatedToKit  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "												AND isDeleted = 0  \n" +
                "												AND isinStk = 1  \n" +
                "									) a  \n" +
                "								WHERE 	a.allocatedToKit IS NOT NULL  \n" +
                "								GROUP BY a.binID  \n" +
                "							) b  \n" +
                "						WHERE b.allocatedToKit LIKE CONCAT('%', v_CurrentKit, '%')  \n" +
                "							AND kitCount > 1  \n" +
                "					) c  \n" +
                "				);  \n" +
                "  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.unallocatekitStock = (SELECT COUNT(1)  \n" +
                "					FROM 	(  \n" +
                "						SELECT 	*  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.binID, GROUP_CONCAT(DISTINCT a.allocatedToKit) allocatedToKit  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	id, binID, fun_getAllocatedKitsNameByID(id, 'A') allocatedToKit  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "												AND isDeleted = 0  \n" +
                "												AND isinStk = 1  \n" +
                "									) a  \n" +
                "								WHERE 	a.allocatedToKit IS NOT NULL  \n" +
                "								GROUP BY a.binID  \n" +
                "							) b  \n" +
                "						WHERE b.allocatedToKit NOT LIKE CONCAT('%', v_CurrentKit, '%')  \n" +
                "					) c  \n" +
                "				);  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.kitName = (  \n" +
                "			SELECT 	GROUP_CONCAT(DISTINCT CONCAT(refSalesOrderDetID, '###', assyID, '###', fun_getAllocatedKitsNameByID(refUIDId, 'A')) SEPARATOR '@@@') allocatedToKit  \n" +
                "			FROM 	kit_allocation  \n" +
                "			WHERE	`status` = 'A'  \n" +
                "					AND refUIDId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	component_sid_stock  \n" +
                "						WHERE	isdeleted = 0  \n" +
                "								AND binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "					)  \n" +
                "					AND (CASE WHEN pRefSalesOrderDetID IS NOT NULL THEN refSalesOrderDetID != pRefSalesOrderDetID ELSE 1=1 END)  \n" +
                "					AND (CASE WHEN pAssyId IS NOT NULL THEN assyID != pAssyId ELSE 1=1 END)  \n" +
                "			);  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.numberTotalKit = (  \n" +
                "			SELECT 	COUNT(1)  \n" +
                "			FROM 	(  \n" +
                "					SELECT   refSalesOrderDetID, assyID  \n" +
                "					FROM 	kit_allocation  \n" +
                "					WHERE	`status` = 'A'  \n" +
                "							AND refUIDId IN (  \n" +
                "								SELECT 	id  \n" +
                "								FROM 	component_sid_stock  \n" +
                "								WHERE	isdeleted = 0  \n" +
                "										AND binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "							)  \n" +
                "					  GROUP BY refSalesOrderDetID, assyID  \n" +
                "				) a  \n" +
                "			);  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.unallocatedUMID = (  \n" +
                "			SELECT 	COUNT(1)  \n" +
                "			FROM 	(  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock c  \n" +
                "					WHERE	isdeleted = 0  \n" +
                "							AND binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "							AND NOT EXISTS (  \n" +
                "								SELECT 	refUIDId  \n" +
                "								FROM 	kit_allocation k  \n" +
                "								WHERE	`status` = 'A'  \n" +
                "										AND c.id = k.refUIDId  \n" +
                "							)  \n" +
                "				) a  \n" +
                "			);  \n" +
                "  \n" +
                "	SELECT 	t.*,  \n" +
                "		a.partCount umidPendingParts  \n" +
                "	FROM tempWarehouseDet t  \n" +
                "	LEFT JOIN (  \n" +
                "					SELECT b.warehouseID, COUNT(v.PartId) partCount  \n" +
                "					FROM vu_umid_creation_pending v  \n" +
                "					INNER JOIN binmst b ON b.id = v.binID  \n" +
                "					WHERE BalanceQty > 0  \n" +
                "					GROUP BY b.warehouseID  \n" +
                "				) AS a ON a.warehouseID = t.id  \n" +
                "	-- GROUP BY  t.id  \n" +
                "	ORDER BY  t.updatedAt DESC;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5699,'2.00','V1',' Tune SP Sproc_retrive_warehouse_to_transfer  - DP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5699:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_warehouse_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_warehouse_to_transfer`(  \n" +
                "	pPageIndex INT(11),  \n" +
                "	pRecordPerPage INT(11),  \n" +
                "	pDeptID INT(11),  \n" +
                "	pGlobalSearchWHString VARCHAR(1000),  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pParamSearchWHId INT,  \n" +
                "	pSearchWHString VARCHAR(1000),  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchClusterWHID INT(11),  \n" +
                "	pRefSalesOrderDetID INT(11),  \n" +
                "	pAssyId INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_CurrentKit VARCHAR(1000);  \n" +
                "	DECLARE v_GlobalSearchBinWHId VARCHAR(10000);  \n" +
                "  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	IF(pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "  \n" +
                "		SELECT  GROUP_CONCAT(b.WarehouseID)  \n" +
                "		INTO 	v_GlobalSearchBinWHId  \n" +
                "		FROM 	binmst b WHERE b.id IN (  \n" +
                "			SELECT 	c.binID  \n" +
                "			FROM 	component_sid_stock c  \n" +
                "			WHERE 	isdeleted  = 0  \n" +
                "			AND uid LIKE CONCAT(\"%\", pGlobalSearchUIDString ,\"%\")  \n" +
                "            group by c.binID  \n" +
                "			);  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pGlobalSearchBinString IS NOT NULL) THEN  \n" +
                "		SELECT GROUP_CONCAT(b.WarehouseID) INTO v_GlobalSearchBinWHId FROM binmst b WHERE  `Name` LIKE CONCAT(\"%\", pGlobalSearchBinString ,\"%\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  \"  \n" +
                "			SELECT 	w.id,  \n" +
                "				w.name,  \n" +
                "				w.isPermanentWH,  \n" +
                "				w.uniqueCartID,  \n" +
                "				w.parentWHID,  \n" +
                "				pw.parentWHType,  \n" +
                "				pw.name deptName,  \n" +
                "				0 binCount,  \n" +
                "				0 uidCount,  \n" +
                "				0 totalEmptyBin,  \n" +
                "				0 anotherKitStock,  \n" +
                "				0 unallocatekitStock,  \n" +
                "				0 numberTotalKit,  \n" +
                "				0 unallocatedUMID,  \n" +
                "				w.allMovableBin,  \n" +
                "				w.warehouseType,  \n" +
                "				fun_getWarehouseTypeByKey(w.warehouseType) warehouseTypeValue,  \n" +
                "				CAST(NULL AS CHAR(10000)) kitName,  \n" +
                "				CAST(NULL AS CHAR(15000)) emptyBinName,  \n" +
                "				CAST(w.updatedAt AS DATETIME) updatedAt  \n" +
                "			FROM 	warehousemst w,  warehousemst pw  \n" +
                "			WHERE 	w.isDepartment != 1  and w.parentWHID = pw.id  \n" +
                "					AND 	w.isDeleted = 0  \n" +
                "					AND 	w.isActive = 1  \n" +
                "					AND	w.id > 0  \n" +
                "			\";  \n" +
                "  \n" +
                "	IF (pRefSalesOrderDetID IS NOT NULL AND pAssyId IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id IN (  \n" +
                "									SELECT 	 b.WarehouseID  \n" +
                "									FROM 	component_sid_stock a inner join binmst b on  a.binid = b.id  \n" +
                "									WHERE 	a.isdeleted = 0  \n" +
                "										AND a.id IN (  \n" +
                "											SELECT 	refUIDId  \n" +
                "											FROM 	kit_allocation  \n" +
                "											WHERE 	`status` = 'A'  \n" +
                "													AND refSalesOrderDetID = \", pRefSalesOrderDetID ,\"  \n" +
                "													AND assyID = \", pAssyId ,\"  \n" +
                "										)  \n" +
                "                                      group by b.WarehouseID  \n" +
                "									)\");  \n" +
                "	END IF;  \n" +
                "    iF pGlobalSearchWHString IS NOT NULL  then  \n" +
                "		SET @vSQLMainQuery =CONCAT(@vSQLMainQuery, \"and  w.`Name` LIKE '%\", pGlobalSearchWHString ,\"%' \");  \n" +
                "	end if;  \n" +
                "	if pSearchWHString IS NOT NULL then  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"   AND w.Name LIKE '%\", pSearchWHString ,\"%')  \");  \n" +
                "	end if;  \n" +
                "  \n" +
                "	IF(v_GlobalSearchBinWHId IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND FIND_IN_SET(w.id, '\", v_GlobalSearchBinWHId ,\"')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pGlobalSearchClusterWHID IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id = \",pGlobalSearchClusterWHID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pDeptID IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.parentWHID = \",pDeptID);  \n" +
                "	END IF;  \n" +
                "	IF(pSearchString IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND w.name like '%\", pSearchString ,\"%' \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_GlobalSearchBinWHId IS NULL AND (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL)) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id = NULL\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pParamSearchWHId IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id = \",pParamSearchWHId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" ORDER BY w.updatedAt DESC \");  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempWarehouseDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempWarehouseDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempBinDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS  \n" +
                "	SELECT 	b.id, b.name, 0 uidCount, b.warehouseID  \n" +
                "	FROM 	binmst b  \n" +
                "	WHERE 	b.warehouseID IN (SELECT w.id FROM tempWarehouseDet w)  \n" +
                "		AND 	b.isActive = 1  \n" +
                "		AND 	b.isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempActiveBinIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS  \n" +
                "	SELECT 	 binID, COUNT(1) uidCount  \n" +
                "	FROM 	component_sid_stock  \n" +
                "	WHERE 	binID IN  (SELECT b.id FROM tempBinDet b)  \n" +
                "		AND		isDeleted = 0  \n" +
                "		AND		isinStk = 1  \n" +
                "	GROUP BY binID;  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t,  tempActiveBinIDs c  \n" +
                "	SET    	t.uidCount = c.uidCount  \n" +
                "	WHERE   t.id = c.binID;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempActiveWarehouseIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveWarehouseIDs AS  \n" +
                "	SELECT 	 warehouseID, COUNT(1) binCount, SUM(uidCount) uidCount  \n" +
                "	FROM 	tempBinDet  \n" +
                "	GROUP BY warehouseID;  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t,   tempActiveWarehouseIDs c  \n" +
                "	SET   	t.binCount = c.binCount,  \n" +
                "			t.uidCount = c.uidCount  \n" +
                "	WHERE  	t.id = c.warehouseID;  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.totalEmptyBin = (SELECT COUNT(1) FROM tempBinDet tb WHERE uidCount = 0 AND tb.warehouseID = t.id);  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.emptyBinName = (SELECT GROUP_CONCAT(`name`) FROM tempBinDet tb WHERE uidCount = 0 AND tb.warehouseID = t.id);  \n" +
                "  \n" +
                "	SELECT TRIM(fun_getKitNameBySalesOrderSetIDAndAssyID(pRefSalesOrderDetID, pAssyId)) INTO v_CurrentKit;  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.anotherKitStock = (SELECT COUNT(1)  \n" +
                "				FROM 	(  \n" +
                "						SELECT 	*  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.binID , GROUP_CONCAT(DISTINCT a.allocatedToKit) allocatedToKit, COUNT(DISTINCT a.allocatedToKit) kitCount  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	id, binID, fun_getAllocatedKitsNameByID(id, 'A') allocatedToKit  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "												AND isDeleted = 0  \n" +
                "												AND isinStk = 1  \n" +
                "									) a  \n" +
                "								WHERE 	a.allocatedToKit IS NOT NULL  \n" +
                "								GROUP BY a.binID  \n" +
                "							) b  \n" +
                "						WHERE b.allocatedToKit LIKE CONCAT('%', v_CurrentKit, '%')  \n" +
                "							AND kitCount > 1  \n" +
                "					) c  \n" +
                "				);  \n" +
                "  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.unallocatekitStock = (SELECT COUNT(1)  \n" +
                "					FROM 	(  \n" +
                "						SELECT 	*  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.binID, GROUP_CONCAT(DISTINCT a.allocatedToKit) allocatedToKit  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	id, binID, fun_getAllocatedKitsNameByID(id, 'A') allocatedToKit  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "												AND isDeleted = 0  \n" +
                "												AND isinStk = 1  \n" +
                "									) a  \n" +
                "								WHERE 	a.allocatedToKit IS NOT NULL  \n" +
                "								GROUP BY a.binID  \n" +
                "							) b  \n" +
                "						WHERE b.allocatedToKit NOT LIKE CONCAT('%', v_CurrentKit, '%')  \n" +
                "					) c  \n" +
                "				);  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.kitName = (  \n" +
                "			SELECT 	GROUP_CONCAT(DISTINCT CONCAT(refSalesOrderDetID, '###', assyID, '###', fun_getAllocatedKitsNameByID(refUIDId, 'A')) SEPARATOR '@@@') allocatedToKit  \n" +
                "			FROM 	kit_allocation  \n" +
                "			WHERE	`status` = 'A'  \n" +
                "					AND refUIDId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	component_sid_stock  \n" +
                "						WHERE	isdeleted = 0  \n" +
                "								AND binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "					)  \n" +
                "					AND (CASE WHEN pRefSalesOrderDetID IS NOT NULL THEN refSalesOrderDetID != pRefSalesOrderDetID ELSE 1=1 END)  \n" +
                "					AND (CASE WHEN pAssyId IS NOT NULL THEN assyID != pAssyId ELSE 1=1 END)  \n" +
                "			);  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.numberTotalKit = (  \n" +
                "			SELECT 	COUNT(1)  \n" +
                "			FROM 	(  \n" +
                "					SELECT   refSalesOrderDetID, assyID  \n" +
                "					FROM 	kit_allocation  \n" +
                "					WHERE	`status` = 'A'  \n" +
                "							AND refUIDId IN (  \n" +
                "								SELECT 	id  \n" +
                "								FROM 	component_sid_stock  \n" +
                "								WHERE	isdeleted = 0  \n" +
                "										AND binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "							)  \n" +
                "					  GROUP BY refSalesOrderDetID, assyID  \n" +
                "				) a  \n" +
                "			);  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.unallocatedUMID = (  \n" +
                "			SELECT 	COUNT(1)  \n" +
                "			FROM 	(  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock c  \n" +
                "					WHERE	isdeleted = 0  \n" +
                "							AND binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "							AND NOT EXISTS (  \n" +
                "								SELECT 	refUIDId  \n" +
                "								FROM 	kit_allocation k  \n" +
                "								WHERE	`status` = 'A'  \n" +
                "										AND c.id = k.refUIDId  \n" +
                "							)  \n" +
                "				) a  \n" +
                "			);  \n" +
                "  \n" +
                "	SELECT 	t.*,  \n" +
                "		a.partCount umidPendingParts  \n" +
                "	FROM tempWarehouseDet t  \n" +
                "	LEFT JOIN (  \n" +
                "					SELECT b.warehouseID, COUNT(v.PartId) partCount  \n" +
                "					FROM vu_umid_creation_pending v  \n" +
                "					INNER JOIN binmst b ON b.id = v.binID  \n" +
                "					WHERE BalanceQty > 0  \n" +
                "					GROUP BY b.warehouseID  \n" +
                "				) AS a ON a.warehouseID = t.id  \n" +
                "	-- GROUP BY  t.id  \n" +
                "	ORDER BY  t.updatedAt DESC;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5700,'2.00','V1','  Tune SP Sproc_retrive_warehouse_to_transfer  - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5700:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_bin_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_bin_to_transfer`(  \n" +
                "	pPageIndex INT(11),  \n" +
                "	pRecordPerPage INT(11),  \n" +
                "	pWarehouseID INT(11),  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchBinString VARCHAR(1000),  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchClusterWHID INT(11),  \n" +
                "        pKitSalesOrderDetID INT(11),  \n" +
                "        pKitAssyID INT(11),  \n" +
                "        pDeptID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_GlobalSearchUIDBinId VARCHAR(10000);  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		SELECT  GROUP_CONCAT(c.binID)  \n" +
                "		INTO 	v_GlobalSearchUIDBinId  \n" +
                "		FROM 	component_sid_stock c  \n" +
                "		WHERE 	isdeleted = 0 and  \n" +
                "				uid LIKE CONCAT(\"%\", pGlobalSearchUIDString ,\"%\")  ;  \n" +
                "  END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitBinIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempKitBinIDs (  \n" +
                "		binID INT(11)  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitBinDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempKitBinDet (  \n" +
                "		binID INT(11),  \n" +
                "		uidCount INT(11),  \n" +
                "		PIDCount INT(11)  \n" +
                "	);  \n" +
                "  \n" +
                "	SET @vWhere = \"\";  \n" +
                "	SET @vUIDCountWhere = \"\";  \n" +
                "	SET @vInnerJoinQuery=\"\";  \n" +
                "  \n" +
                "	IF (pGlobalSearchBinString IS NOT NULL ) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND `Name` LIKE '%\", pGlobalSearchBinString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  	IF ( pSearchBinString IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND `Name` LIKE '%\", pSearchBinString ,\"%' \");  \n" +
                "	END IF;  \n" +
                "	IF (v_GlobalSearchUIDBinId IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND FIND_IN_SET(b.id, '\", v_GlobalSearchUIDBinId ,\"')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
                "  \n" +
                "		INSERT INTO tempKitBinIDs  \n" +
                "		SELECT DISTINCT csd.binID  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		INNER JOIN component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "		INNER JOIN binmst b ON b.id = csd.binID  \n" +
                "		INNER JOIN warehousemst w ON w.id = b.warehouseID  \n" +
                "		WHERE 	k.status = 'A'  \n" +
                "				AND k.refSalesOrderDetID = pKitSalesOrderDetID  \n" +
                "				AND k.assyID = pKitAssyID  \n" +
                "				AND w.parentWHID = IFNULL(pDeptID, w.parentWHID)  \n" +
                "				AND csd.isDeleted = 0;  \n" +
                "  \n" +
                "		-- SET @vWhere = CONCAT(@vWhere, \" AND b.id IN (SELECT binID FROM tempKitBinIDs)\");  \n" +
                "		SET @vInnerJoinQuery = \"inner join kit_allocation k on csd.id = k.refUIDId and k.status = 'A'\";  \n" +
                "		SET @vUIDCountWhere = CONCAT(@vUIDCountWhere, \" AND csd.binID IN (SELECT binID FROM tempKitBinIDs)\");  \n" +
                "		SET @vUIDCountWhere = CONCAT(@vUIDCountWhere, \" and k.refSalesOrderDetID = \",pKitSalesOrderDetID,\" AND k.assyID = \",pKitAssyID);  \n" +
                "  \n" +
                "		-- Store bin's UMID and PID Count  \n" +
                "		  INSERT INTO tempKitBinDet  \n" +
                "		SELECT 	bin.binID,  \n" +
                "			SUM(bin.uidCount) uidCount,  \n" +
                "			COUNT(1) PIDCount  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		csd.binID, csd.refcompid, COUNT(1) uidCount  \n" +
                "				FROM 		component_sid_stock  csd  \n" +
                "				WHERE 		csd.isDeleted = 0  \n" +
                "							AND csd.binID IN (SELECT binID FROM tempKitBinIDs)  \n" +
                "				GROUP BY 	csd.binID, csd.refcompid  \n" +
                "			) BIN  \n" +
                "		GROUP BY bin.binID  \n" +
                "		ORDER BY bin.binid;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWarehouseID IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND b.warehouseID = \", pWarehouseID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchClusterWHID IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND b.warehouseID = \", pGlobalSearchClusterWHID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchString IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND  b.name like '%\", pSearchString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"  \n" +
                "		SELECT 	b.id,  \n" +
                "			b.name,  \n" +
                "			b.isPermanentBin,  \n" +
                "			b.warehouseID,  \n" +
                "			cast(NULL as char(50)) warehouseName,  \n" +
                "			0 departmentID,  \n" +
                "			cast(NULL as char(50)) deptName,  \n" +
                "			0 uidCount,  \n" +
                "			0 PIDCount,  \n" +
                "			0 mismatchUMID,  \n" +
                "			0 mismatchPID,  \n" +
                "			CAST(NULL AS char(50)) warehouseType,  \n" +
                "			CAST(NULL AS char(15000)) kitName,  \n" +
                "			0 numberTotalKit,  \n" +
                "			0 unallocatedUMID  \n" +
                "			-- b.updatedAt  \n" +
                "		FROM 	binmst b  \n" +
                "		WHERE 	b.isDeleted = 0  \n" +
                "		AND 	b.isActive = 1  \n" +
                "	\", @vWhere ,\" ORDER BY updatedAt DESC \");  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@SQLStatement1,\" ) c \");  \n" +
                "	PREPARE queryCount FROM @SQLStatementCount;  \n" +
                "	EXECUTE queryCount;  \n" +
                "	DEALLOCATE PREPARE queryCount;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempBinDet;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS \", @SQLStatement1, \" \", rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempActiveBinIDs;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS  \n" +
                "		SELECT  csd.binID,  \n" +
                "			csd.refcompid,  \n" +
                "			sum(uidCount) uidCount ,  \n" +
                "            count(1) PIDCount  \n" +
                "		FROM 	(  \n" +
                "				SELECT  csd.binID,  \n" +
                "					csd.refcompid , count(1) uidcount  \n" +
                "				FROM 	component_sid_stock  csd \",@vInnerJoinQuery,\"  \n" +
                "				WHERE 	csd.isDeleted = 0  \n" +
                "						AND csd.isinStk = 1  \n" +
                "			\", @vUIDCountWhere,\"  \n" +
                "             group by csd.binID, csd.refcompid  \n" +
                "		) as csd group by csd.binID, csd.refcompid \");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "/* Will use direct tempActiveBinIDs no need to create this temp table.  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempBinCounts;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinCounts AS  \n" +
                "	SELECT 		b.binID,  \n" +
                "			SUM(b.uidCount) uidCount,  \n" +
                "			COUNT(1) PIDCount  \n" +
                "	FROM 		tempActiveBinIDs b  \n" +
                "	GROUP BY 	b.binID  \n" +
                "	ORDER BY 	b.binid;    */  \n" +
                "  \n" +
                "  \n" +
                "	-- Update UMID Count  / PID Count  \n" +
                "	UPDATE tempBinDet t, tempActiveBinIDs c  \n" +
                "	SET t.uidCount = c.uidCount ,  \n" +
                "    t.PIDCount = c.PIDCount  \n" +
                "	WHERE t.id = c.binID;  \n" +
                "  \n" +
                "	-- Update mismatch UMID Count  \n" +
                "	UPDATE tempBinDet t, tempKitBinDet k  \n" +
                "	SET t.mismatchUMID =  (k.uidCount - t.uidCount)  ,  \n" +
                "    t.mismatchPID =  (k.PIDCount - t.PIDCount)  \n" +
                "	WHERE t.id = k.binID;  \n" +
                "  \n" +
                "	-- SET warehouse name  \n" +
                "	UPDATE 	tempBinDet t, warehousemst w  \n" +
                "	SET   	t.warehouseName = w.Name,  \n" +
                "		t.departmentID = w.parentWHID,  \n" +
                "		t.warehouseType = w.warehouseType  \n" +
                "	WHERE	t.warehouseID = w.id;  \n" +
                "  \n" +
                "	-- SET department name  \n" +
                "	UPDATE 	tempBinDet t, warehousemst w  \n" +
                "	SET   	t.deptName = w.Name  \n" +
                "	WHERE	t.departmentID = w.id;  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t  \n" +
                "	SET   	t.kitName = (  \n" +
                "					SELECT 	GROUP_CONCAT(DISTINCT CONCAT(refSalesOrderDetID, '###', assyID, '###', TRIM(fun_getKitNameBySalesOrderSetIDAndAssyID(refSalesOrderDetID, assyID))) SEPARATOR '@@@')  \n" +
                "					FROM 	(  \n" +
                "							SELECT 	refSalesOrderDetID, assyID  \n" +
                "							FROM 	kit_allocation  \n" +
                "							WHERE 	`status` = 'A'  \n" +
                "									AND refUIDId IN (  \n" +
                "										SELECT 	id  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	isdeleted =0  \n" +
                "												AND binID = t.id  \n" +
                "									)  \n" +
                "									AND (CASE WHEN pKitSalesOrderDetID IS NOT NULL THEN refSalesOrderDetID != pKitSalesOrderDetID ELSE 1 = 1 END)  \n" +
                "									AND (CASE WHEN pKitAssyID IS NOT NULL THEN assyID != pKitAssyID ELSE 1 = 1 END)  \n" +
                "							GROUP BY 	refSalesOrderDetID, AssyID  \n" +
                "						) a  \n" +
                "				);  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t  \n" +
                "	SET   	t.numberTotalKit = (  \n" +
                "					SELECT 	COUNT(1)  \n" +
                "					FROM 	(  \n" +
                "							SELECT 	refSalesOrderDetID, assyID  \n" +
                "							FROM 	kit_allocation  \n" +
                "							WHERE 	`status` = 'A'  \n" +
                "									AND refUIDId IN (  \n" +
                "										SELECT 	id  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	isdeleted = 0  \n" +
                "												AND binID = t.id  \n" +
                "									)  \n" +
                "									AND (CASE WHEN pKitSalesOrderDetID IS NOT NULL THEN refSalesOrderDetID != pKitSalesOrderDetID ELSE 1 = 1 END)  \n" +
                "									AND (CASE WHEN pKitAssyID IS NOT NULL THEN assyID != pKitAssyID ELSE 1 = 1 END)  \n" +
                "							GROUP BY 	refSalesOrderDetID, AssyID  \n" +
                "						) a  \n" +
                "				);  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t  \n" +
                "	SET   	t.unallocatedUMID = (  \n" +
                "					SELECT 	COUNT(1)  \n" +
                "					FROM 	(  \n" +
                "							SELECT 	id  \n" +
                "							FROM 	component_sid_stock c  \n" +
                "							WHERE	isdeleted = 0  \n" +
                "									AND binID = t.id  \n" +
                "									AND NOT EXISTS (  \n" +
                "										SELECT 	refUIDId  \n" +
                "										FROM 	kit_allocation k  \n" +
                "										WHERE	`status` = 'A'  \n" +
                "												AND c.id = k.refUIDId  \n" +
                "									)  \n" +
                "						) a  \n" +
                "				);  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempClusterBin;  \n" +
                "	CREATE TEMPORARY TABLE tempClusterBin  \n" +
                "	SELECT 	*,  \n" +
                "		1 binCount,  \n" +
                "		FALSE isCluster  \n" +
                "	FROM tempBinDet  \n" +
                "	WHERE isPermanentBin = 0;  \n" +
                "  \n" +
                "	INSERT INTO tempClusterBin  \n" +
                "	SELECT  0,  \n" +
                "		warehouseName,  \n" +
                "		isPermanentBin,  \n" +
                "		warehouseID,  \n" +
                "		warehouseName,  \n" +
                "		departmentID,  \n" +
                "		deptName,  \n" +
                "		SUM(uidCount),  \n" +
                "		SUM(PIDCount),  \n" +
                "		SUM(mismatchUMID),  \n" +
                "		SUM(mismatchPID),  \n" +
                "		warehouseType,  \n" +
                "		kitName,  \n" +
                "		numberTotalKit,  \n" +
                "		unallocatedUMID,  \n" +
                "		COUNT(1) binCount,  \n" +
                "		TRUE isCluster  \n" +
                "		-- updatedAt  \n" +
                "	FROM 	tempBinDet  \n" +
                "	WHERE 	isPermanentBin = 1  \n" +
                "	GROUP BY warehouseName, isPermanentBin, warehouseID, departmentID, deptName, isCluster;  \n" +
                "  \n" +
                "	-- Update UMID and PID count for bin cluster  \n" +
                "	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempBinClusterNotInKit;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempBinClusterNotInKit AS  \n" +
                "		SELECT 	csd.warehouseID,  \n" +
                "			SUM(uidCount) uidCount,  \n" +
                "			COUNT(1) PIDCount  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		csd.binID,  \n" +
                "						w.id  warehouseID,  \n" +
                "						csd.refcompid,  \n" +
                "						COUNT(1) uidCount  \n" +
                "				FROM 		component_sid_stock  csd  \n" +
                "				INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "				INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "				WHERE 		csd.isDeleted = 0  \n" +
                "							AND binid NOT IN (SELECT id FROM tempBinDet WHERE isPermanentBin = 1)  \n" +
                "							AND w.id IN (SELECT warehouseID FROM tempClusterBin WHERE isPermanentBin = 1)  \n" +
                "				GROUP BY 	csd.binID, w.id, csd.refcompid  \n" +
                "			) csd  \n" +
                "		GROUP BY csd.warehouseID;  \n" +
                "  \n" +
                "		-- Update mismatch UMID Count  \n" +
                "		UPDATE tempClusterBin t, tempBinClusterNotInKit k  \n" +
                "		SET t.mismatchUMID =  (t.mismatchUMID + k.uidCount)  \n" +
                "		WHERE t.warehouseID = k.warehouseID;  \n" +
                "  \n" +
                "		-- Update mismatch PID Count  \n" +
                "		UPDATE tempClusterBin t, tempBinClusterNotInKit k  \n" +
                "		SET t.mismatchPID =  (t.mismatchPID + k.PIDCount)  \n" +
                "		WHERE t.warehouseID = k.warehouseID;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT 		t.*,  \n" +
                "			COUNT(v.PartId) umidPendingParts  \n" +
                "	FROM 		tempClusterBin t  \n" +
                "	LEFT JOIN 	vu_umid_creation_pending v ON v.binID = t.id AND v.BalanceQty > 0  \n" +
                "	GROUP BY 	t.id;  \n" +
                "	-- order by 	t.updatedAt desc;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5701,'2.00','V1',' Tune SP Sproc_retrive_bin_to_transfer  - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5701:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-12-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_retrive_bin_to_transfer`;\n" +
                "CREATE PROCEDURE `Sproc_retrive_bin_to_transfer`(  \n" +
                "	pPageIndex INT(11),  \n" +
                "	pRecordPerPage INT(11),  \n" +
                "	pWarehouseID INT(11),  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchBinString VARCHAR(1000),  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchClusterWHID INT(11),  \n" +
                "        pKitSalesOrderDetID INT(11),  \n" +
                "        pKitAssyID INT(11),  \n" +
                "        pDeptID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_GlobalSearchUIDBinId VARCHAR(10000);  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		SELECT  GROUP_CONCAT(c.binID)  \n" +
                "		INTO 	v_GlobalSearchUIDBinId  \n" +
                "		FROM 	component_sid_stock c  \n" +
                "		WHERE 	isdeleted = 0 and  \n" +
                "				uid LIKE CONCAT(\"%\", pGlobalSearchUIDString ,\"%\")  ;  \n" +
                "  END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitBinIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempKitBinIDs (  \n" +
                "		binID INT(11)  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitBinDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempKitBinDet (  \n" +
                "		binID INT(11),  \n" +
                "		uidCount INT(11),  \n" +
                "		PIDCount INT(11)  \n" +
                "	);  \n" +
                "  \n" +
                "	SET @vWhere = \"\";  \n" +
                "	SET @vUIDCountWhere = \"\";  \n" +
                "	SET @vInnerJoinQuery=\"\";  \n" +
                "  \n" +
                "	IF (pGlobalSearchBinString IS NOT NULL ) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND `Name` LIKE '%\", pGlobalSearchBinString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  	IF ( pSearchBinString IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND `Name` LIKE '%\", pSearchBinString ,\"%' \");  \n" +
                "	END IF;  \n" +
                "	IF (v_GlobalSearchUIDBinId IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND FIND_IN_SET(b.id, '\", v_GlobalSearchUIDBinId ,\"')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
                "  \n" +
                "		INSERT INTO tempKitBinIDs  \n" +
                "		SELECT DISTINCT csd.binID  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		INNER JOIN component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "		INNER JOIN binmst b ON b.id = csd.binID  \n" +
                "		INNER JOIN warehousemst w ON w.id = b.warehouseID  \n" +
                "		WHERE 	k.status = 'A'  \n" +
                "				AND k.refSalesOrderDetID = pKitSalesOrderDetID  \n" +
                "				AND k.assyID = pKitAssyID  \n" +
                "				AND w.parentWHID = IFNULL(pDeptID, w.parentWHID)  \n" +
                "				AND csd.isDeleted = 0;  \n" +
                "  \n" +
                "		-- SET @vWhere = CONCAT(@vWhere, \" AND b.id IN (SELECT binID FROM tempKitBinIDs)\");  \n" +
                "		SET @vInnerJoinQuery = \"inner join kit_allocation k on csd.id = k.refUIDId and k.status = 'A'\";  \n" +
                "		SET @vUIDCountWhere = CONCAT(@vUIDCountWhere, \" AND csd.binID IN (SELECT binID FROM tempKitBinIDs)\");  \n" +
                "		SET @vUIDCountWhere = CONCAT(@vUIDCountWhere, \" and k.refSalesOrderDetID = \",pKitSalesOrderDetID,\" AND k.assyID = \",pKitAssyID);  \n" +
                "  \n" +
                "		-- Store bin's UMID and PID Count  \n" +
                "		INSERT INTO tempKitBinDet  \n" +
                "		SELECT 	bin.binID,  \n" +
                "			SUM(bin.uidCount) uidCount,  \n" +
                "			COUNT(1) PIDCount  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		csd.binID, csd.refcompid, COUNT(1) uidCount  \n" +
                "				FROM 		component_sid_stock  csd  \n" +
                "				WHERE 		csd.isDeleted = 0  \n" +
                "							AND csd.binID IN (SELECT binID FROM tempKitBinIDs)  \n" +
                "				GROUP BY 	csd.binID, csd.refcompid  \n" +
                "			) BIN  \n" +
                "		GROUP BY bin.binID  \n" +
                "		ORDER BY bin.binid;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWarehouseID IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND b.warehouseID = \", pWarehouseID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchClusterWHID IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND b.warehouseID = \", pGlobalSearchClusterWHID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchString IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND  b.name like '%\", pSearchString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"  \n" +
                "		SELECT 	b.id,  \n" +
                "			b.name,  \n" +
                "			b.isPermanentBin,  \n" +
                "			b.warehouseID,  \n" +
                "			cast(NULL as char(50)) warehouseName,  \n" +
                "			0 departmentID,  \n" +
                "			cast(NULL as char(50)) deptName,  \n" +
                "			0 uidCount,  \n" +
                "			0 PIDCount,  \n" +
                "			0 mismatchUMID,  \n" +
                "			0 mismatchPID,  \n" +
                "			CAST(NULL AS char(50)) warehouseType,  \n" +
                "			CAST(NULL AS char(15000)) kitName,  \n" +
                "			0 numberTotalKit,  \n" +
                "			0 unallocatedUMID  \n" +
                "			-- b.updatedAt  \n" +
                "		FROM 	binmst b  \n" +
                "		WHERE 	b.isDeleted = 0  \n" +
                "		AND 	b.isActive = 1  \n" +
                "	\", @vWhere ,\" ORDER BY updatedAt DESC \");  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@SQLStatement1,\" ) c \");  \n" +
                "	PREPARE queryCount FROM @SQLStatementCount;  \n" +
                "	EXECUTE queryCount;  \n" +
                "	DEALLOCATE PREPARE queryCount;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempBinDet;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS \", @SQLStatement1, \" \", rowNumWhere);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempActiveBinIDs;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS  \n" +
                "		SELECT  csd.binID,  \n" +
                "			csd.refcompid,  \n" +
                "			sum(uidCount) uidCount ,  \n" +
                "            count(1) PIDCount  \n" +
                "		FROM 	(  \n" +
                "				SELECT  csd.binID,  \n" +
                "					csd.refcompid , count(1) uidcount  \n" +
                "				FROM 	component_sid_stock  csd \",@vInnerJoinQuery,\"  \n" +
                "				WHERE 	csd.isDeleted = 0  \n" +
                "						AND csd.isinStk = 1  \n" +
                "			\", @vUIDCountWhere,\"  \n" +
                "             group by csd.binID, csd.refcompid  \n" +
                "		) as csd group by csd.binID, csd.refcompid \");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "/* Will use direct tempActiveBinIDs no need to create this temp table.  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempBinCounts;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinCounts AS  \n" +
                "	SELECT 		b.binID,  \n" +
                "			SUM(b.uidCount) uidCount,  \n" +
                "			COUNT(1) PIDCount  \n" +
                "	FROM 		tempActiveBinIDs b  \n" +
                "	GROUP BY 	b.binID  \n" +
                "	ORDER BY 	b.binid;    */  \n" +
                "  \n" +
                "  \n" +
                "	-- Update UMID Count  / PID Count  \n" +
                "	UPDATE tempBinDet t,  (select binid ,sum(c.uidcount) uidcount, sum(c.pidcount) pidcount from tempActiveBinIDs c group by binid ) c  \n" +
                "	SET t.uidCount = c.uidCount ,  \n" +
                "    t.PIDCount = c.PIDCount  \n" +
                "	WHERE t.id = c.binID;  \n" +
                "  \n" +
                "	-- Update mismatch UMID Count  \n" +
                "	UPDATE tempBinDet t, tempKitBinDet k  \n" +
                "	SET t.mismatchUMID =  (k.uidCount - t.uidCount)  ,  \n" +
                "    t.mismatchPID =  (k.PIDCount - t.PIDCount)  \n" +
                "	WHERE t.id = k.binID;  \n" +
                "  \n" +
                "	-- SET warehouse name  \n" +
                "	UPDATE 	tempBinDet t, warehousemst w  \n" +
                "	SET   	t.warehouseName = w.Name,  \n" +
                "		t.departmentID = w.parentWHID,  \n" +
                "		t.warehouseType = w.warehouseType  \n" +
                "	WHERE	t.warehouseID = w.id;  \n" +
                "  \n" +
                "	-- SET department name  \n" +
                "	UPDATE 	tempBinDet t, warehousemst w  \n" +
                "	SET   	t.deptName = w.Name  \n" +
                "	WHERE	t.departmentID = w.id;  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t  \n" +
                "	SET   	t.kitName = (  \n" +
                "					SELECT 	GROUP_CONCAT(DISTINCT CONCAT(refSalesOrderDetID, '###', assyID, '###', TRIM(fun_getKitNameBySalesOrderSetIDAndAssyID(refSalesOrderDetID, assyID))) SEPARATOR '@@@')  \n" +
                "					FROM 	(  \n" +
                "							SELECT 	refSalesOrderDetID, assyID  \n" +
                "							FROM 	kit_allocation  \n" +
                "							WHERE 	`status` = 'A'  \n" +
                "									AND refUIDId IN (  \n" +
                "										SELECT 	id  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	isdeleted =0  \n" +
                "												AND binID = t.id  \n" +
                "									)  \n" +
                "									AND (CASE WHEN pKitSalesOrderDetID IS NOT NULL THEN refSalesOrderDetID != pKitSalesOrderDetID ELSE 1 = 1 END)  \n" +
                "									AND (CASE WHEN pKitAssyID IS NOT NULL THEN assyID != pKitAssyID ELSE 1 = 1 END)  \n" +
                "							GROUP BY 	refSalesOrderDetID, AssyID  \n" +
                "						) a  \n" +
                "				);  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t  \n" +
                "	SET   	t.numberTotalKit = (  \n" +
                "					SELECT 	COUNT(1)  \n" +
                "					FROM 	(  \n" +
                "							SELECT 	refSalesOrderDetID, assyID  \n" +
                "							FROM 	kit_allocation  \n" +
                "							WHERE 	`status` = 'A'  \n" +
                "									AND refUIDId IN (  \n" +
                "										SELECT 	id  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	isdeleted = 0  \n" +
                "												AND binID = t.id  \n" +
                "									)  \n" +
                "									AND (CASE WHEN pKitSalesOrderDetID IS NOT NULL THEN refSalesOrderDetID != pKitSalesOrderDetID ELSE 1 = 1 END)  \n" +
                "									AND (CASE WHEN pKitAssyID IS NOT NULL THEN assyID != pKitAssyID ELSE 1 = 1 END)  \n" +
                "							GROUP BY 	refSalesOrderDetID, AssyID  \n" +
                "						) a  \n" +
                "				);  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t  \n" +
                "	SET   	t.unallocatedUMID = (  \n" +
                "					SELECT 	COUNT(1)  \n" +
                "					FROM 	(  \n" +
                "							SELECT 	id  \n" +
                "							FROM 	component_sid_stock c  \n" +
                "							WHERE	isdeleted = 0  \n" +
                "									AND binID = t.id  \n" +
                "									AND NOT EXISTS (  \n" +
                "										SELECT 	refUIDId  \n" +
                "										FROM 	kit_allocation k  \n" +
                "										WHERE	`status` = 'A'  \n" +
                "												AND c.id = k.refUIDId  \n" +
                "									)  \n" +
                "						) a  \n" +
                "				);  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempClusterBin;  \n" +
                "	CREATE TEMPORARY TABLE tempClusterBin  \n" +
                "	SELECT 	*,  \n" +
                "		1 binCount,  \n" +
                "		FALSE isCluster  \n" +
                "	FROM tempBinDet  \n" +
                "	WHERE isPermanentBin = 0;  \n" +
                "  \n" +
                "	INSERT INTO tempClusterBin  \n" +
                "	SELECT  0,  \n" +
                "		warehouseName,  \n" +
                "		isPermanentBin,  \n" +
                "		warehouseID,  \n" +
                "		warehouseName,  \n" +
                "		departmentID,  \n" +
                "		deptName,  \n" +
                "		SUM(uidCount),  \n" +
                "		SUM(PIDCount),  \n" +
                "		SUM(mismatchUMID),  \n" +
                "		SUM(mismatchPID),  \n" +
                "		warehouseType,  \n" +
                "		kitName,  \n" +
                "		numberTotalKit,  \n" +
                "		unallocatedUMID,  \n" +
                "		COUNT(1) binCount,  \n" +
                "		TRUE isCluster  \n" +
                "		-- updatedAt  \n" +
                "	FROM 	tempBinDet  \n" +
                "	WHERE 	isPermanentBin = 1  \n" +
                "	GROUP BY warehouseName, isPermanentBin, warehouseID, departmentID, deptName, isCluster;  \n" +
                "  \n" +
                "	-- Update UMID and PID count for bin cluster  \n" +
                "	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempBinClusterNotInKit;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempBinClusterNotInKit AS  \n" +
                "		SELECT 	csd.warehouseID,  \n" +
                "			SUM(uidCount) uidCount,  \n" +
                "			COUNT(1) PIDCount  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		csd.binID,  \n" +
                "						w.id  warehouseID,  \n" +
                "						csd.refcompid,  \n" +
                "						COUNT(1) uidCount  \n" +
                "				FROM 		component_sid_stock  csd  \n" +
                "				INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "				INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "				WHERE 		csd.isDeleted = 0  \n" +
                "							AND binid NOT IN (SELECT id FROM tempBinDet WHERE isPermanentBin = 1)  \n" +
                "							AND w.id IN (SELECT warehouseID FROM tempClusterBin WHERE isPermanentBin = 1)  \n" +
                "				GROUP BY 	csd.binID, w.id, csd.refcompid  \n" +
                "			) csd  \n" +
                "		GROUP BY csd.warehouseID;  \n" +
                "  \n" +
                "		-- Update mismatch UMID Count  \n" +
                "		UPDATE tempClusterBin t, tempBinClusterNotInKit k  \n" +
                "		SET t.mismatchUMID =  (t.mismatchUMID + k.uidCount)  \n" +
                "		WHERE t.warehouseID = k.warehouseID;  \n" +
                "  \n" +
                "		-- Update mismatch PID Count  \n" +
                "		UPDATE tempClusterBin t, tempBinClusterNotInKit k  \n" +
                "		SET t.mismatchPID =  (t.mismatchPID + k.PIDCount)  \n" +
                "		WHERE t.warehouseID = k.warehouseID;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT 		t.*,  \n" +
                "			COUNT(v.PartId) umidPendingParts  \n" +
                "	FROM 		tempClusterBin t  \n" +
                "	LEFT JOIN 	vu_umid_creation_pending v ON v.binID = t.id AND v.BalanceQty > 0  \n" +
                "	GROUP BY 	t.id;  \n" +
                "	-- order by 	t.updatedAt desc;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5702,'2.00','V1',' Correction in Sproc_retrive_bin_to_transfer umid count was coming wrong - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5702:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_HistoryByTableName`;  \n" +
                "CREATE PROCEDURE `Sproc_HistoryByTableName`(  \n" +
                "	IN pID INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pTableName VARCHAR(255)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET @temp_Sproc_HistoryByTableName = CONCAT(\"SELECT  \n" +
                "		ID,  \n" +
                "		Tablename,  \n" +
                "		RefTransID,  \n" +
                "		Colname,  \n" +
                "		Oldval,  \n" +
                "		Newval,  \n" +
                "		valueDataType,  \n" +
                "		fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(createdBy) createdby,  \n" +
                "		fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "		FROM dataentrychange_auditlog WHERE (RefTransID='\",pID,\"' AND Tablename='\",pTableName,\"')  \n" +
                "	\");  \n" +
                "    /*This logic configure for supplier/manufacturer/customer page*/  \n" +
                "    IF pTableName = 'MFGCODEMST' THEN  \n" +
                "		SET @temp_Sproc_HistoryByTableName = CONCAT(@temp_Sproc_HistoryByTableName,  \n" +
                "			\"UNION  \n" +
                "			SELECT  \n" +
                "				ID,  \n" +
                "				Tablename,  \n" +
                "				RefTransID,  \n" +
                "				Colname,  \n" +
                "				Oldval,  \n" +
                "				Newval,  \n" +
                "				valueDataType,  \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(createdBy) createdby,  \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "			FROM dataentrychange_auditlog  \n" +
                "            WHERE (RefTransID IN (SELECT id FROM mfgcodealias WHERE mfgcodeId='\",pID,\"')  \n" +
                "				AND Tablename='MFGCODEALIAS')  \n" +
                "  \n" +
                "			UNION  \n" +
                "			SELECT  \n" +
                "				ID,  \n" +
                "				Tablename,  \n" +
                "				RefTransID,  \n" +
                "				Colname,  \n" +
                "				Oldval,  \n" +
                "				Newval,  \n" +
                "				valueDataType,  \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(createdBy) createdby,  \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "			FROM dataentrychange_auditlog  \n" +
                "            WHERE (RefTransID IN (SELECT id FROM who_bought_who WHERE buyTo='\",pID,\"')  \n" +
                "				AND Tablename='WHOBOUGHTWHO')  \n" +
                "  \n" +
                "            UNION  \n" +
                "			SELECT  \n" +
                "				ID,  \n" +
                "				Tablename,  \n" +
                "				RefTransID,  \n" +
                "				Colname,  \n" +
                "				Oldval,  \n" +
                "				Newval,  \n" +
                "				valueDataType,  \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(createdBy) createdby,  \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "			FROM dataentrychange_auditlog  \n" +
                "            WHERE (RefTransID IN (SELECT id FROM supplier_mapping_mst WHERE supplierID='\",pID,\"')  \n" +
                "				AND Tablename='SUPPLIERMAPPINGMST')  \n" +
                "  \n" +
                "			UNION  \n" +
                "			SELECT  \n" +
                "				ID,  \n" +
                "				Tablename,  \n" +
                "				RefTransID,  \n" +
                "				Colname,  \n" +
                "				Oldval,  \n" +
                "				Newval,  \n" +
                "				valueDataType,  \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(createdBy) createdby,  \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "			FROM dataentrychange_auditlog  \n" +
                "            WHERE (RefTransID IN (SELECT id FROM invalid_mfgmappingmst WHERE refmfgAliasID IN (SELECT id FROM mfgcodealias WHERE mfgcodeId='\",pID,\"'))  \n" +
                "				AND Tablename='INVALIDMFGMAPPINGMST')  \n" +
                "		\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	/*This logic configure for Operation / Operation Management page*/  \n" +
                "    IF (pTableName = 'MASTER_TEMPLATES' OR pTableName = 'OPERATIONS') THEN  \n" +
                "		SET @temp_Sproc_HistoryByTableName = CONCAT(@temp_Sproc_HistoryByTableName,  \n" +
                "			\"UNION  \n" +
                "			SELECT  \n" +
                "				ID,  \n" +
                "				Tablename,  \n" +
                "				RefTransID,  \n" +
                "				Colname,  \n" +
                "				Oldval,  \n" +
                "				Newval,  \n" +
                "				valueDataType,  \n" +
                "				fun_getUserNameByID(updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(createdBy) createdby,  \n" +
                "				fun_getRoleByID(createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
                "			FROM dataentrychange_auditlog  \n" +
                "            WHERE (RefTransID = '\",pID,\"' AND Tablename= CONCAT('OPERATION_MASTER_TEMPLATES','_\",pTableName,\"'))  \n" +
                "		\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_HistoryByTableName,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_HistoryByTableName,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 28-12-2021 *********************************** */
                "Drop function if exists `fun_getOperationNameByID`;  \n" +
                "CREATE FUNCTION `fun_getOperationNameByID`(  \n" +
                "	pOperationID INT(11)  \n" +
                ") RETURNS varchar(255) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vOperationID VARCHAR(255);  \n" +
                "	SELECT op.opName INTO vOperationID FROM operations op WHERE op.opID = pOperationID;  \n" +
                "	RETURN vOperationID;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 28-12-2021 *********************************** */
                "Drop function if exists `fun_getMasterTemplateNameByID`;  \n" +
                "CREATE FUNCTION `fun_getMasterTemplateNameByID`(  \n" +
                "	pMasterTemplateID INT(11)  \n" +
                ") RETURNS varchar(255) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vMasterTemplateID VARCHAR(255);  \n" +
                "	SELECT  \n" +
                "    mt.masterTemplate  \n" +
                "INTO vMasterTemplateID FROM  \n" +
                "    master_templates mt  \n" +
                "WHERE  \n" +
                "    mt.id = pMasterTemplateID;  \n" +
                "	RETURN vMasterTemplateID;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 28-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_master_templates`;  \n" +
                "CREATE TRIGGER `Trg_AU_master_templates` AFTER UPDATE ON `master_templates` FOR EACH ROW  \n" +
                "BEGIN  \n" +
                "	DECLARE v_createdAt DATETIME DEFAULT fun_DatetimetoUTCDateTime();  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"master_templates\";  \n" +
                "	IF IFNULL(OLD.masterTemplate,0) != IFNULL(NEW.masterTemplate,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('MASTER_TEMPLATES',CAST(new.id AS CHAR),'Template',CAST(OLD.masterTemplate AS CHAR), CAST(NEW.masterTemplate AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'masterTemplate'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.description,0) != IFNULL(NEW.description,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('MASTER_TEMPLATES',CAST(new.id AS CHAR),'Description',CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'description'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 28-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_operation_master_templates`;  \n" +
                "CREATE TRIGGER `Trg_AU_operation_master_templates` AFTER UPDATE ON `operation_master_templates` FOR EACH ROW  \n" +
                "BEGIN  \n" +
                "	DECLARE v_createdAt DATETIME DEFAULT fun_DatetimetoUTCDateTime();  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('OPERATION_MASTER_TEMPLATES_MASTER_TEMPLATES',CAST(OLD.masterTemplateId AS CHAR),\"Removed Operation\",CAST(fun_getOperationNameByID(OLD.operationId) AS CHAR), CAST('' AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
                "  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('OPERATION_MASTER_TEMPLATES_OPERATIONS',CAST(OLD.operationId AS CHAR),\"Removed Template\",CAST(fun_getMasterTemplateNameByID(OLD.masterTemplateId) AS CHAR), CAST('' AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 28-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AI_operation_master_templates`;  \n" +
                "CREATE TRIGGER `Trg_AI_operation_master_templates` AFTER INSERT ON `operation_master_templates` FOR EACH ROW  \n" +
                "BEGIN  \n" +
                "	DECLARE v_createdAt DATETIME DEFAULT fun_DatetimetoUTCDateTime();  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "	VALUES('OPERATION_MASTER_TEMPLATES_MASTER_TEMPLATES',CAST(NEW.masterTemplateId AS CHAR),\"Added Operation\",CAST('' AS CHAR), CAST(fun_getOperationNameByID(NEW.operationId) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
                "  \n" +
                "    INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "	VALUES('OPERATION_MASTER_TEMPLATES_OPERATIONS',CAST(NEW.operationId AS CHAR),\"Added Template\",CAST('' AS CHAR), CAST(fun_getMasterTemplateNameByID(NEW.masterTemplateId) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5703,'2.00','V1',' User Story 39459: Manage History: Operation Template Master - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5703:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveSupplierRMAList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierRMAList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchNumbers VARCHAR(50),  \n" +
                "	IN pSearchType VARCHAR(10),  \n" +
                "	IN pMfrPnId INT,  \n" +
                "     IN pRMAFromDate DATE,  \n" +
                "    IN pRMAToDate DATE ,  \n" +
                "    IN pPostingStatus VARCHAR(50),  \n" +
                "    IN pLockStatusFilter VARCHAR(20),  \n" +
                "    IN pRMAComments VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pAdvanceSearchNumbers IS NOT NULL) THEN  \n" +
                "		IF (pSearchType = 'contains') THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "												rmaNumber LIKE '%\", pAdvanceSearchNumbers, \"%'  \n" +
                "											OR 	packingSlipNumber LIKE '%\", pAdvanceSearchNumbers, \"%'  \n" +
                "											OR 	refCreditMemoNumber LIKE '%\", pAdvanceSearchNumbers, \"%'\"  \n" +
                "										  \" )  \n" +
                "									\");  \n" +
                "		ELSE  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "												rmaNumber = '\", pAdvanceSearchNumbers, \"'  \n" +
                "											OR 	packingSlipNumber = '\", pAdvanceSearchNumbers, \"'  \n" +
                "											OR 	refCreditMemoNumber = '\", pAdvanceSearchNumbers, \"'\"  \n" +
                "										  \" )  \n" +
                "									\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF pRMAFromDate IS NOT NULL AND pRMAToDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (rmaDate BETWEEN '\",pRMAFromDate,\"' AND '\",pRMAToDate,\"')\");  \n" +
                "	ELSEIF pRMAFromDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (rmaDate = '\",pRMAFromDate,\"')\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" and lockStatus IN (\", pLockStatusFilter ,\")\");  \n" +
                "	END IF;  \n" +
                "	IF(pPostingStatus IS NOT NULL)THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" and rmaModeStatus IN (\", pPostingStatus,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pRMAComments IS NOT NULL AND pRMAComments != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \"  \n" +
                "				AND (internalRemark LIKE '%\",pRMAComments,\"%'  \n" +
                "                OR remark LIKE '%\",pRMAComments,\"%')  \n" +
                "                \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierRMAList = CONCAT(\"  \n" +
                "		SELECT	*  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		p.id,  \n" +
                "						p.systemId,  \n" +
                "						p.receiptType,  \n" +
                "						p.packingSlipModeStatus rmaModeStatus,  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "								WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
                "								WHEN p.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "								ELSE NULL  \n" +
                "							END  \n" +
                "						) rmaModeStatusValue,  \n" +
                "						p.`status`,  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN p.status = 'D' THEN 'Draft'  \n" +
                "								WHEN p.status = 'WS' THEN 'Waiting For Shipment'  \n" +
                "								WHEN p.status = 'WC' THEN 'Waiting for Credit Memo'  \n" +
                "								WHEN p.status = 'CR' THEN 'Credit Memo Received'  \n" +
                "								WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "                                WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
                "								WHEN p.status = 'P' THEN 'Paid'  \n" +
                "								ELSE NULL  \n" +
                "							END  \n" +
                "						) statusValue,  \n" +
                "						p.mfgCodeID,  \n" +
                "						fun_getMfgCodeByID(p.mfgCodeID) supplierCode,  \n" +
                "						fun_getMfgCodeAndNameByID(p.mfgCodeID) supplierCodeName,  \n" +
                "						p.poNumber rmaNumber,  \n" +
                "						p.poDate rmaDate,  \n" +
                "						p.packingSlipNumber,  \n" +
                "						p.packingSlipDate,  \n" +
                "						p.receiptDate shippedDate,  \n" +
                "						IFNULL(g.cnt,0) rmaDocCount,  \n" +
                "						psm.totalDetailLine itemReturn,  \n" +
                "						ps.id refCreditMemoId,  \n" +
                "						ps.creditMemoNumber refCreditMemoNumber,  \n" +
                "                        ps.lockStatus  refCreditMemoLockStatus,  \n" +
                "						ps.creditMemoDate refCreditMemoDate,  \n" +
                "						p.remark,  \n" +
                "						p.internalRemark,  \n" +
                "						p.shippingMethodId,  \n" +
                "						fun_getGenericCategoryCodeNameByID(p.shippingMethodId) shippingMethod,  \n" +
                "						p.carrierId,  \n" +
                "						fun_getGenericCategoryCodeNameByID(p.carrierId) carrier,  \n" +
                "						p.carrierAccountNumber,  \n" +
                "						p.shippingInsurance,  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN p.shippingInsurance = 1 THEN 'Yes'  \n" +
                "								WHEN p.shippingInsurance = 0 THEN 'No'  \n" +
                "								ELSE NULL  \n" +
                "							END  \n" +
                "						) shippingInsuranceValue,  \n" +
                "						p.rmaShippingAddress,  \n" +
                "						fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "						fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "						fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "						fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                        p.lockStatus,  \n" +
                "						(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "							when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "							when p.lockStatus = 'LC' then 'Locked'  \n" +
                "							else null end  \n" +
                "						) lockStatusValue,  \n" +
                "						fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "						fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "				FROM 		packing_slip_material_receive p  \n" +
                "				LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "				LEFT JOIN 	(  \n" +
                "							SELECT 		refPackingSlipMaterialRecID, COUNT(1) totalDetailLine  \n" +
                "							FROM 		packing_slip_material_receive_det psm  \n" +
                "							WHERE 		isDeleted = 0  \n" +
                "							GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "						) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "				LEFT JOIN vu_genericfilescount g ON g.refTransID = p.id  \n" +
                "						AND	g.gencFileOwnerType = 'supplier_rma' AND g.refTransID = p.id  \n" +
                "				WHERE 		p.receiptType = 'R' AND p.isDeleted = 0  \n" +
                "			) AS a  \n" +
                "		WHERE \", v_advanceFilterWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1=1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetriveSupplierRMAList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveSupplierRMAList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5704,'2.00','V1',' User Story 37379: Add some filters in Advance Filter - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5704:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_warehouse_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_warehouse_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pGlobalSearchWHString VARCHAR(1000),  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pParamSearchWHId INT,  \n" +
                "	pSearchWHString VARCHAR(1000),  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchClusterWHID INT,  \n" +
                "	pRefSalesOrderDetID INT,  \n" +
                "	pAssyId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_CurrentKit VARCHAR(1000);  \n" +
                "	DECLARE v_GlobalSearchBinWHId VARCHAR(10000);  \n" +
                "  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	IF(pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "  \n" +
                "		SELECT  GROUP_CONCAT(b.WarehouseID)  \n" +
                "		INTO 	v_GlobalSearchBinWHId  \n" +
                "		FROM 	binmst b WHERE b.id IN (  \n" +
                "			SELECT 	c.binID  \n" +
                "			FROM 	component_sid_stock c  \n" +
                "			WHERE 	isdeleted  = 0  \n" +
                "			AND uid LIKE CONCAT(\"%\", pGlobalSearchUIDString ,\"%\")  \n" +
                "            group by c.binID  \n" +
                "			);  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pGlobalSearchBinString IS NOT NULL) THEN  \n" +
                "		SELECT GROUP_CONCAT(b.WarehouseID) INTO v_GlobalSearchBinWHId FROM binmst b WHERE  `Name` LIKE CONCAT(\"%\", pGlobalSearchBinString ,\"%\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  \"  \n" +
                "			SELECT 	w.id,  \n" +
                "				w.name,  \n" +
                "				w.isPermanentWH,  \n" +
                "				w.uniqueCartID,  \n" +
                "				w.parentWHID,  \n" +
                "				pw.parentWHType,  \n" +
                "				pw.name deptName,  \n" +
                "				0 binCount,  \n" +
                "				0 uidCount,  \n" +
                "				0 totalEmptyBin,  \n" +
                "				0 anotherKitStock,  \n" +
                "				0 unallocatekitStock,  \n" +
                "				0 numberTotalKit,  \n" +
                "				0 unallocatedUMID,  \n" +
                "				w.allMovableBin,  \n" +
                "				w.warehouseType,  \n" +
                "				fun_getWarehouseTypeByKey(w.warehouseType) warehouseTypeValue,  \n" +
                "				CAST(NULL AS CHAR(10000)) kitName,  \n" +
                "				CAST(NULL AS CHAR(15000)) emptyBinName,  \n" +
                "				CAST(w.updatedAt AS DATETIME) updatedAt  \n" +
                "			FROM 	warehousemst w,  warehousemst pw  \n" +
                "			WHERE 	w.isDepartment != 1  and w.parentWHID = pw.id  \n" +
                "					AND 	w.isDeleted = 0  \n" +
                "					AND 	w.isActive = 1  \n" +
                "					AND	w.id > 0  \n" +
                "			\";  \n" +
                "  \n" +
                "	IF (pRefSalesOrderDetID IS NOT NULL AND pAssyId IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id IN (  \n" +
                "									SELECT 	 b.WarehouseID  \n" +
                "									FROM 	component_sid_stock a inner join binmst b on  a.binid = b.id  \n" +
                "									WHERE 	a.isdeleted = 0  \n" +
                "										AND a.id IN (  \n" +
                "											SELECT 	refUIDId  \n" +
                "											FROM 	kit_allocation  \n" +
                "											WHERE 	`status` = 'A'  \n" +
                "													AND refSalesOrderDetID = \", pRefSalesOrderDetID ,\"  \n" +
                "													AND assyID = \", pAssyId ,\"  \n" +
                "										)  \n" +
                "                                      group by b.WarehouseID  \n" +
                "									)\");  \n" +
                "	END IF;  \n" +
                "    iF pGlobalSearchWHString IS NOT NULL  then  \n" +
                "		SET @vSQLMainQuery =CONCAT(@vSQLMainQuery, \"and  w.`Name` LIKE '%\", pGlobalSearchWHString ,\"%' \");  \n" +
                "	end if;  \n" +
                "	if pSearchWHString IS NOT NULL then  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"   AND w.Name LIKE '%\", pSearchWHString ,\"%' \");  \n" +
                "	end if;  \n" +
                "  \n" +
                "	IF(v_GlobalSearchBinWHId IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND FIND_IN_SET(w.id, '\", v_GlobalSearchBinWHId ,\"')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pGlobalSearchClusterWHID IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id = \",pGlobalSearchClusterWHID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pDeptID IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.parentWHID = \",pDeptID);  \n" +
                "	END IF;  \n" +
                "	IF(pSearchString IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND w.name like '%\", pSearchString ,\"%' \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_GlobalSearchBinWHId IS NULL AND (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL)) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id = NULL\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pParamSearchWHId IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id = \",pParamSearchWHId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "   SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" ORDER BY w.updatedAt DESC \");  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempWarehouseDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempWarehouseDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "-- select  @vSQLMainQuery;  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	/* old logic  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempBinDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS  \n" +
                "	SELECT 	b.id, b.name, 0 uidCount, b.warehouseID  \n" +
                "	FROM 	binmst b  \n" +
                "	WHERE 	b.warehouseID IN (SELECT w.id FROM tempWarehouseDet w)  \n" +
                "		AND 	b.isActive = 1  \n" +
                "		AND 	b.isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempActiveBinIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS  \n" +
                "	SELECT 	 binID, COUNT(1) uidCount  \n" +
                "	FROM 	component_sid_stock  \n" +
                "	WHERE 	binID IN  (SELECT b.id FROM tempBinDet b)  \n" +
                "		AND		isDeleted = 0  \n" +
                "		AND		isinStk = 1  \n" +
                "	GROUP BY binID;  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t,  tempActiveBinIDs c  \n" +
                "	SET    	t.uidCount = c.uidCount  \n" +
                "	WHERE   t.id = c.binID;    */  \n" +
                "    /*new logic */  \n" +
                "      DROP TEMPORARY TABLE IF EXISTS tempBinDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS  \n" +
                "    SELECT 	b.id, b.name,  b.warehouseID   , ifnull(c.uidCount,0)    uidCount  \n" +
                "	FROM 	binmst b Left join (select binid , count(1) uidcount from   component_sid_stock where isdeleted = 0 and isinstk  = 1 group by binid)  c on b.id =    c.binid  \n" +
                "	WHERE 	b.warehouseID IN (SELECT w.id FROM tempWarehouseDet w)  \n" +
                "		AND 	b.isActive = 1  \n" +
                "		AND 	b.isDeleted = 0  \n" +
                "        group by b.id,b.WarehouseID;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempActiveWarehouseIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveWarehouseIDs AS  \n" +
                "	SELECT 	 warehouseID, COUNT(1) binCount, SUM(uidCount) uidCount  \n" +
                "	FROM 	tempBinDet  \n" +
                "	GROUP BY warehouseID;  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t,   tempActiveWarehouseIDs c  \n" +
                "	SET   	t.binCount = c.binCount,  \n" +
                "			t.uidCount = c.uidCount  \n" +
                "	WHERE  	t.id = c.warehouseID;  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.totalEmptyBin = (SELECT COUNT(1) FROM tempBinDet tb WHERE uidCount = 0 AND tb.warehouseID = t.id);  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.emptyBinName = (SELECT GROUP_CONCAT(`name`) FROM tempBinDet tb WHERE uidCount = 0 AND tb.warehouseID = t.id);  \n" +
                "  \n" +
                "	-- SELECT TRIM(fun_getKitNameBySalesOrderSetIDAndAssyID(pRefSalesOrderDetID, pAssyId)) INTO v_CurrentKit;  \n" +
                "  \n" +
                "	/* - Old query and wrong comparision on kit  \n" +
                "    UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.anotherKitStock = (SELECT COUNT(1)  \n" +
                "				FROM 	(  \n" +
                "						SELECT 	*  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.binID , GROUP_CONCAT(DISTINCT a.allocatedToKit) allocatedToKit, COUNT(DISTINCT a.allocatedToKit) kitCount  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	id, binID, fun_getAllocatedKitsNameByID(id, 'A') allocatedToKit  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "												AND isDeleted = 0  \n" +
                "												AND isinStk = 1  \n" +
                "									) a  \n" +
                "								WHERE 	a.allocatedToKit IS NOT NULL  \n" +
                "								GROUP BY a.binID  \n" +
                "							) b  \n" +
                "						WHERE b.allocatedToKit LIKE CONCAT('%', v_CurrentKit, '%')  \n" +
                "							AND kitCount > 1  \n" +
                "					) c  \n" +
                "				);  \n" +
                "  */  \n" +
                "  /*new query */  \n" +
                "   UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.anotherKitStock = (select count(1)  \n" +
                "									from (  \n" +
                "											select binID,concat(',',GROUP_CONCAT(DISTINCT a.allocatedToKit),',') allocatedToKit ,count(DISTINCT a.allocatedToKit) kitCount  \n" +
                "											from (SELECT	cs.id, binID,  ka.allocatedToKit  \n" +
                "													FROM 	component_sid_stock cs  \n" +
                "															Left join (select refuidid, GROUP_CONCAT(refsalesorderdetid) allocatedToKit  from kit_allocation ka where ka.status = 'A'  group by refuidid) ka  \n" +
                "															on cs.id = ka.refuidid  \n" +
                "													WHERE 	 cs.binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)   and isDeleted = 0 AND isinStk = 1  \n" +
                "													) a  \n" +
                "											WHERE 	 a.allocatedToKit IS NOT NULL  \n" +
                "											group by a.binID  \n" +
                "											having   count(DISTINCT a.allocatedToKit) > 1  and  \n" +
                "													concat(',',GROUP_CONCAT(DISTINCT a.allocatedToKit),',') like CONCAT('%,', pRefSalesOrderDetID, ',%')  \n" +
                "										)  a  \n" +
                "								);  \n" +
                " /*old query and its wrong as currentkit and select query kit not match in any case  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.unallocatekitStock = (SELECT COUNT(1)  \n" +
                "					FROM 	(  \n" +
                "						SELECT 	*  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.binID, GROUP_CONCAT(DISTINCT a.allocatedToKit) allocatedToKit  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	id, binID, fun_getAllocatedKitsNameByID(id, 'A') allocatedToKit  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "												AND isDeleted = 0  \n" +
                "												AND isinStk = 1  \n" +
                "									) a  \n" +
                "								WHERE 	a.allocatedToKit IS NOT NULL  \n" +
                "								GROUP BY a.binID  \n" +
                "							) b  \n" +
                "						WHERE b.allocatedToKit NOT LIKE CONCAT('%', v_CurrentKit, '%')  \n" +
                "					) c  \n" +
                "				);   */  \n" +
                "/*new query */  \n" +
                "  UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.unallocatekitStock = (select count(1)  \n" +
                "									from (  \n" +
                "											select binID,concat(',',GROUP_CONCAT(DISTINCT a.allocatedToKit),',') allocatedToKit ,count(DISTINCT a.allocatedToKit) kitCount  \n" +
                "											from (SELECT	cs.id, binID,  ka.allocatedToKit  \n" +
                "													FROM 	component_sid_stock cs  \n" +
                "															Left join (select refuidid, GROUP_CONCAT(refsalesorderdetid) allocatedToKit  from kit_allocation ka where ka.status = 'A'  group by refuidid) ka  \n" +
                "															on cs.id = ka.refuidid  \n" +
                "													WHERE 	 cs.binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)   and isDeleted = 0 AND isinStk = 1  \n" +
                "													) a  \n" +
                "											WHERE 	 a.allocatedToKit IS NOT NULL  \n" +
                "											group by a.binID  \n" +
                "											having   count(DISTINCT a.allocatedToKit) > 1  and  \n" +
                "													concat(',',GROUP_CONCAT(DISTINCT a.allocatedToKit),',') not like CONCAT('%,', pRefSalesOrderDetID, ',%')  \n" +
                "										)  a  \n" +
                "								);  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.kitName = (  \n" +
                "			SELECT 	GROUP_CONCAT(DISTINCT CONCAT(refSalesOrderDetID, '###', assyID, '###', fun_getAllocatedKitsNameByID(refUIDId, 'A')) SEPARATOR '@@@') allocatedToKit  \n" +
                "			FROM 	kit_allocation  \n" +
                "			WHERE	`status` = 'A'  \n" +
                "					AND refUIDId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	component_sid_stock  \n" +
                "						WHERE	isdeleted = 0  \n" +
                "								AND binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "					)  \n" +
                "					AND (CASE WHEN pRefSalesOrderDetID IS NOT NULL THEN refSalesOrderDetID != pRefSalesOrderDetID ELSE 1=1 END)  \n" +
                "					AND (CASE WHEN pAssyId IS NOT NULL THEN assyID != pAssyId ELSE 1=1 END)  \n" +
                "			);  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.numberTotalKit = (  \n" +
                "			SELECT 	COUNT(1)  \n" +
                "			FROM 	(  \n" +
                "					SELECT   refSalesOrderDetID, assyID  \n" +
                "					FROM 	kit_allocation  \n" +
                "					WHERE	`status` = 'A'  \n" +
                "							AND refUIDId IN (  \n" +
                "								SELECT 	id  \n" +
                "								FROM 	component_sid_stock  \n" +
                "								WHERE	isdeleted = 0  \n" +
                "										AND binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "							)  \n" +
                "					  GROUP BY refSalesOrderDetID, assyID  \n" +
                "				) a  \n" +
                "			);  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.unallocatedUMID = (  \n" +
                "			SELECT 	COUNT(1)  \n" +
                "			FROM 	(  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock c  \n" +
                "					WHERE	isdeleted = 0  \n" +
                "							AND binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "							AND NOT EXISTS (  \n" +
                "								SELECT 	refUIDId  \n" +
                "								FROM 	kit_allocation k  \n" +
                "								WHERE	`status` = 'A'  \n" +
                "										AND c.id = k.refUIDId  \n" +
                "							)  \n" +
                "				) a  \n" +
                "			);  \n" +
                "  \n" +
                "	SELECT 	t.*,  \n" +
                "		a.partCount umidPendingParts  \n" +
                "	FROM tempWarehouseDet t  \n" +
                "	LEFT JOIN (  \n" +
                "					SELECT b.warehouseID, COUNT(v.PartId) partCount  \n" +
                "					FROM vu_umid_creation_pending v  \n" +
                "					INNER JOIN binmst b ON b.id = v.binID  \n" +
                "					WHERE BalanceQty > 0  \n" +
                "					GROUP BY b.warehouseID  \n" +
                "				) AS a ON a.warehouseID = t.id  \n" +
                "	-- GROUP BY  t.id  \n" +
                "	ORDER BY  t.updatedAt DESC;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5705,'2.00','V1',' Tune SP Sproc_retrive_warehouse_to_transfer- DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5705:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-12-2021 *********************************** */
                "ALTER TABLE `customer_addresses`  \n" +
                "ADD COLUMN additionalComment VARCHAR(2000) ;  \n" +
                "  \n" +
                "ALTER TABLE `customer_addresses`  \n" +
                "ADD COLUMN defaultContactPersonID INT ;  \n" +
                "  \n" +
                "ALTER TABLE `customer_addresses`  \n" +
                "ADD CONSTRAINT FK_customer_addresses_defaultContactPersonID  \n" +
                "FOREIGN KEY (defaultContactPersonID) REFERENCES `customer_contactperson`(personId) ;  \n" +
                "  \n" +
                "ALTER TABLE `customer_contactperson`  \n" +
                "ADD COLUMN refTransID INT AFTER `customerID` ;  \n" +
                "  \n" +
                "ALTER TABLE `customer_contactperson`  \n" +
                "ADD COLUMN refTableName VARCHAR(255) AFTER `refTransID` ;  \n" +
                "  \n" +
                "ALTER TABLE `customer_contactperson`  \n" +
                "MODIFY `email` LONGTEXT ;  \n" +
                "  \n" +
                "  \n" +
                "ALTER TABLE `customer_contactperson`  \n" +
                "ADD COLUMN isDefault TINYINT DEFAULT 0 ;  \n" +
                "  \n" +
                "ALTER TABLE `customer_contactperson`  \n" +
                "ADD COLUMN systemGenerated TINYINT DEFAULT 0 ;  \n" +
                "  \n" +
                "ALTER TABLE `customer_contactperson`  \n" +
                "ADD COLUMN additionalComment VARCHAR(2000) ;  \n" +
                "  \n" +
                "ALTER TABLE `customer_contactperson`  \n" +
                "ADD COLUMN isPrimary TINYINT DEFAULT 0 ;  \n" +
                /* **************************** Add Script Version -> 29-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5706,'2.00','V1',' add new field for customer address and contact table - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5706:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-12-2021 *********************************** */
                "INSERT INTO systemconfigrations (`key`, `values`,`isActive`, `createdBy`, `createdAt` , `updatedBy` , `updatedAt` ,  \n" +
                "`displayName`,`isEditable`,`description`,`createByRoleId`,`updateByRoleId`)  \n" +
                "VALUES ('ContactPersonDisplayNameFormat', 1 ,1, 1, fun_DatetimetoUTCDateTime(), 1 , fun_DatetimetoUTCDateTime(),  \n" +
                "'Contact Person Display Name Format',1,  \n" +
                "'Contact Person Name format which we use and display person name globally with defined format.',1,1) ;  \n" +
                /* **************************** Add Script Version -> 29-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5707,'2.00','V1',' add data key entry for contact person - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5707:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-12-2021 *********************************** */
                "RENAME TABLE  `customer_contactperson` TO  `contactperson` ;  \n" +
                /* **************************** Add Script Version -> 29-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5708,'2.00','V1',' RENAME TABLE `customer_contactperson` TO  `contactperson` - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5708:
            allDbChangesArray.push(
                /* **************************** New Script -> 29-12-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customers` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customers`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempCustomers as  \n" +
                "			SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
                "			FROM  \n" +
                "			(  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"contactperson\" else \"\" end as msg FROM contactperson WHERE deletedAt IS NULL AND refTransID IN(',IDs,') AND refTableName = \"mfgcodemst\" LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"certificate_standards\" ELSE \"\" END AS msg FROM  certificate_standards cs WHERE cs.deletedAt IS NULL AND cs.certificateSupplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "			) q');  \n" +
                "  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "  \n" +
                "		IF (SELECT TotalCount FROM tempCustomers)=0 THEN  \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customers set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in(',IDs,') and deletedAt is NULL');  \n" +
                "			SET @SQl2 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL) and deletedAt is NULL');  \n" +
                "			SET @SQl3 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			PREPARE stmt2 FROM @SQL2;  \n" +
                "			PREPARE stmt3 FROM @SQL3;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			EXECUTE stmt2;  \n" +
                "			EXECUTE stmt3;  \n" +
                "  \n" +
                "			SELECT * FROM tempCustomers;  \n" +
                "  \n" +
                "			COMMIT;  \n" +
                "		ELSE  \n" +
                "			SELECT * FROM tempCustomers;  \n" +
                "		END IF;  \n" +
                "    DROP TEMPORARY TABLE tempCustomers;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-12-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_mfgcodemst` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_mfgcodemst`(  \n" +
                "  IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempMFGCodeMst;  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as  \n" +
                "			        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mfgcodeID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND mfgcodeid IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employees WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND certificateSupplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyTo IN(',IDs,') OR buyBy IN(',IDs,')) LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_attribute_template_mst\" else \"\" end as msg FROM supplier_attribute_template_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_mst\" else \"\" end as msg FROM component_approved_supplier_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_mapping_mst\" else \"\" end as msg FROM supplier_mapping_mst WHERE deletedAt IS NULL AND refMfgCodeMstID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_priority_detail\" else \"\" end as msg FROM component_approved_supplier_priority_detail WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"invalid_mfgmappingmst\" else \"\" end as msg FROM invalid_mfgmappingmst WHERE isdeleted = 0 AND refmfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE deletedAt IS NULL AND CustomerID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_det WHERE deletedAt IS NULL AND lineCustomerID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_material_receipt\" else \"\" end as msg FROM packing_slip_material_receive WHERE deletedAt IS NULL AND CustomerID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_material_receipt\" else \"\" end as msg FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND LineCustomerID IN(',IDs,') LIMIT 1)  \n" +
                "		 ');  \n" +
                "                   -- (SELECT COUNT(1) cnt , CASE WHEN COUNT(1) > 0 THEN \"rfq_consolidated_mfgpn_lineitem_alternate\" ELSE \"\" END AS msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE mfgCodeID IN(',IDs,')  LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"billing_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') AND addressType=\"B\"  LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') AND addressType=\"S\" LIMIT 1)  \n" +
                "	           -- UNION ALL  \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"contactperson\" else \"\" end as msg FROM contactperson WHERE deletedAt IS NULL AND refTransID IN(',IDs,') AND refTableName = \"mfgcodemst\" LIMIT 1)  \n" +
                "	           -- UNION ALL  \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyBy IN(',IDs,') OR buyTo IN(',IDs,')) LIMIT 1)  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempMFGCodeMst t)=0 THEN  \n" +
                "				START TRANSACTION;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "  \n" +
                "				SET @SQl2 = CONCAT('update mfgcodealias set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE mfgcodeId IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt2 FROM @SQL2;  \n" +
                "						EXECUTE stmt2;  \n" +
                "				SELECT * FROM tempMFGCodeMst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "				COMMIT;  \n" +
                "			ELSE  \n" +
                "				SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempMFGCodeMst t;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "			   FROM tempMFGCodeMst t1  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "				ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "  \n" +
                " DROP TEMPORARY TABLE IF EXISTS tempMFGCodeMst;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-12-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SOChangeHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_SOChangeHistory`(  \n" +
                "	IN psoID INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pTableName VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_SOChangeHistory = CONCAT(\"  \n" +
                "  \n" +
                "		SELECT dca.ID,  \n" +
                "		 CASE  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Oldval) > 0  AND dca.Colname ='SHIPPINGMETHODID') THEN  \n" +
                "		  (SELECT CONCAT('(', gencCategoryCode , ')',' ',gencCategoryName) AS OldValue FROM genericcategory WHERE gencCategoryID =dca.Oldval)  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Oldval) > 0  AND dca.Colname ='TERMSID') THEN  \n" +
                "		  (SELECT gencCategoryName AS OldValue FROM genericcategory WHERE gencCategoryID =dca.Oldval)  \n" +
                "		WHEN dca.Colname = 'PARTID' THEN  \n" +
                "		  (SELECT CONCAT(nickName,' ',rev) AS OldValue FROM component WHERE id =dca.Oldval)  \n" +
                "		 WHEN  dca.Colname = 'SODATE' OR dca.Colname='PODATE' OR dca.Colname='MATERIALTENTITVEDOCDATE' OR dca.Colname='MATERIALDUEDATE'  THEN  \n" +
                "		       DATE_FORMAT(dca.Oldval,'%m/%d/%Y %H:%i %p')  \n" +
                "		WHEN dca.Colname = 'CONTACTPERSONID' THEN  \n" +
                "		 (SELECT CONCAT(firstName , ' ' ,IFNULL(middleName,''),' ' , lastName) AS OldValue FROM contactperson WHERE personId =dca.Oldval)  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Oldval=0 THEN  \n" +
                "			 'Draft'  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Oldval=1 THEN  \n" +
                "			 'Published'  \n" +
                "		-- Get shipping address details  \n" +
                "		WHEN dca.Colname='SHIPPINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Oldval AND ca.isDeleted = 0 AND ca.addressType = 'S'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='BILLINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Oldval AND ca.isDeleted = 0 AND ca.addressType = 'B'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='CUSTOMERID' THEN  \n" +
                "		(SELECT CONCAT('(',mfgCode,') ',mfgName) AS customer FROM mfgcodemst WHERE id=dca.Oldval)  \n" +
                "		ELSE  \n" +
                "		dca.Oldval  \n" +
                "		END AS Oldval,  \n" +
                "		CASE  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Newval) > 0 AND dca.Colname ='SHIPPINGMETHODID') THEN  \n" +
                "		  (SELECT CONCAT('(', gencCategoryCode , ')',' ',gencCategoryName) AS Newval FROM genericcategory WHERE gencCategoryID =dca.Newval)  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Newval) > 0 AND dca.Colname ='TERMSID') THEN  \n" +
                "		  (SELECT gencCategoryName AS Newval FROM genericcategory WHERE gencCategoryID =dca.Newval)  \n" +
                "		WHEN dca.Colname = 'PARTID' THEN  \n" +
                "		  (SELECT CONCAT(nickName,' ',rev) AS Newval FROM component WHERE id =dca.Newval)  \n" +
                "		 WHEN  dca.Colname = 'SODATE' OR dca.Colname='PODATE' OR dca.Colname='MATERIALTENTITVEDOCDATE' OR dca.Colname='MATERIALDUEDATE'  THEN  \n" +
                "		       DATE_FORMAT(dca.Newval,'%m/%d/%Y %H:%i %p')  \n" +
                "		  WHEN dca.Colname = 'CONTACTPERSONID' THEN  \n" +
                "		 (SELECT CONCAT(firstName , ' ' ,IFNULL(middleName,''),' ' , lastName) AS Newval FROM contactperson WHERE personId =dca.Newval)  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Newval=0 THEN  \n" +
                "			 'Draft'  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Newval=1 THEN  \n" +
                "		       'Published'  \n" +
                "		 WHEN dca.Colname='ISDELETED' AND dca.Newval=0 THEN  \n" +
                "			 'No'  \n" +
                "		WHEN dca.Colname='ISDELETED' AND dca.Newval=1 THEN  \n" +
                "		       'Yes'  \n" +
                "		-- Get shipping address details  \n" +
                "		WHEN dca.Colname='SHIPPINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Newval AND ca.isDeleted = 0 AND ca.addressType = 'S'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='BILLINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Newval AND ca.isDeleted = 0 AND ca.addressType = 'B'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='CUSTOMERID' THEN  \n" +
                "		(SELECT CONCAT('(',mfgCode,') ',mfgName) AS customer FROM mfgcodemst WHERE id=dca.Newval)  \n" +
                "		ELSE  \n" +
                "			dca.Newval  \n" +
                "		END AS Newval,  \n" +
                "			dca.Colname,dca.RefTransID,  \n" +
                "			-- (SELECT username FROM users WHERE id = dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,  \n" +
                "  \n" +
                "		fun_getUserNameByID(dca.updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(dca.createdBy) createdby,  \n" +
                "		fun_getRoleByID(dca.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(dca.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(dca.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "		FROM `dataentrychange_auditlog`  AS dca  \n" +
                "		WHERE `Tablename`='\",pTableName,\"'  AND `RefTransID`=\",psoID,\"  \n" +
                "  \n" +
                "		    UNION ALL  \n" +
                "  \n" +
                "		SELECT dca.ID,  \n" +
                "		 CASE  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Oldval) > 0 AND dca.Colname ='SHIPPINGMETHODID') THEN  \n" +
                "		  (SELECT CONCAT('(', gencCategoryCode , ')',' ',gencCategoryName) AS OldValue FROM genericcategory WHERE gencCategoryID =dca.Oldval)  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Oldval) > 0 AND dca.Colname ='TERMSID') THEN  \n" +
                "		  (SELECT gencCategoryName AS OldValue FROM genericcategory WHERE gencCategoryID =dca.Oldval)  \n" +
                "		 WHEN dca.Colname = 'PARTID' THEN  \n" +
                "		  (SELECT CONCAT(nickName,' ',rev) AS OldValue FROM component WHERE id =dca.Oldval)  \n" +
                "		 WHEN  dca.Colname = 'SODATE' OR dca.Colname='PODATE' OR dca.Colname='MATERIALTENTITVEDOCDATE' OR dca.Colname='MATERIALDUEDATE'  THEN  \n" +
                "		       DATE_FORMAT(dca.Oldval,'%m/%d/%Y %H:%i %p')  \n" +
                "		 WHEN dca.Colname = 'CONTACTPERSONID' THEN  \n" +
                "		(SELECT CONCAT(firstName , ' ' ,IFNULL(middleName,''),' ' , lastName) AS OldValue FROM contactperson WHERE personId =dca.Oldval)  \n" +
                "	       WHEN dca.Colname='STATUS' AND dca.Oldval=0 THEN  \n" +
                "			 'Draft'  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Oldval=1 THEN  \n" +
                "			 'Published'  \n" +
                "		WHEN dca.Colname='ISDELETED' AND dca.Oldval=0 THEN  \n" +
                "			 'No'  \n" +
                "		WHEN dca.Colname='ISDELETED' AND dca.Oldval=1 THEN  \n" +
                "		       'Yes'  \n" +
                "		-- Get shipping address details  \n" +
                "		WHEN dca.Colname='SHIPPINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Oldval AND ca.isDeleted = 0 AND ca.addressType = 'S'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='BILLINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Oldval AND ca.isDeleted = 0 AND ca.addressType = 'B'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='CUSTOMERID' THEN  \n" +
                "		(SELECT CONCAT('(',mfgCode,') ',mfgName) AS customer FROM mfgcodemst WHERE id=dca.Oldval)  \n" +
                "		ELSE  \n" +
                "			dca.Oldval  \n" +
                "		END AS Oldval,  \n" +
                "		CASE  \n" +
                "		WHEN (SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Newval) > 0 AND dca.Colname ='SHIPPINGMETHODID' THEN  \n" +
                "		  (SELECT CONCAT('(', gencCategoryCode , ')',' ',gencCategoryName) AS Newval FROM genericcategory WHERE gencCategoryID =dca.Newval)  \n" +
                "		WHEN (SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Newval) > 0 AND dca.Colname ='TERMSID' THEN  \n" +
                "		  (SELECT gencCategoryName AS Newval FROM genericcategory WHERE gencCategoryID =dca.Newval)  \n" +
                "		WHEN dca.Colname = 'PARTID' THEN  \n" +
                "		  (SELECT CONCAT(nickName,' ',rev) AS Newval FROM component WHERE id =dca.Newval)  \n" +
                "		WHEN  dca.Colname = 'SODATE' OR dca.Colname='PODATE' OR dca.Colname='MATERIALTENTITVEDOCDATE' OR dca.Colname='MATERIALDUEDATE'  THEN  \n" +
                "		       DATE_FORMAT(dca.Newval,'%m/%d/%Y %H:%i %p')  \n" +
                "		WHEN dca.Colname = 'CONTACTPERSONID' THEN  \n" +
                "		(SELECT CONCAT(firstName , ' ' ,IFNULL(middleName,''),' ' , lastName) AS Newval FROM contactperson WHERE personId =dca.Newval)  \n" +
                "		 WHEN dca.Colname='STATUS' AND dca.Newval=0 THEN  \n" +
                "			 'Draft'  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Newval=1 THEN  \n" +
                "			 'Published'  \n" +
                "		WHEN dca.Colname='ISDELETED' AND dca.Newval=0 THEN  \n" +
                "			 'No'  \n" +
                "		WHEN dca.Colname='ISDELETED' AND dca.Newval=1 THEN  \n" +
                "		       'Yes'  \n" +
                "		-- Get shipping address details  \n" +
                "		WHEN dca.Colname='SHIPPINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Newval AND  ca.isDeleted = 0 AND ca.addressType = 'S'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='BILLINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Newval AND  ca.isDeleted = 0 AND ca.addressType = 'B'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='CUSTOMERID' THEN  \n" +
                "		(SELECT CONCAT('(',mfgCode,') ',mfgName) AS customer FROM mfgcodemst WHERE id=dca.Newval)  \n" +
                "		ELSE  \n" +
                "			dca.Newval  \n" +
                "		END AS Newval,  \n" +
                "			dca.Colname,dca.RefTransID,  \n" +
                "			-- (SELECT username FROM users WHERE id = dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,  \n" +
                "  \n" +
                "		fun_getUserNameByID(dca.updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(dca.createdBy) createdby,  \n" +
                "		fun_getRoleByID(dca.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(dca.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(dca.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "	        FROM dataentrychange_auditlog dca  \n" +
                "		WHERE tablename ='salesorderdet'  \n" +
                "	        AND RefTransID IN (SELECT id FROM salesorderdet t WHERE refSalesOrderID = \",psoID,\"  AND t.id = dca.RefTransID)  \n" +
                "         \");  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_SOChangeHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_SOChangeHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 29-12-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_TruncateDatabase` ;  \n" +
                "CREATE PROCEDURE `Sproc_TruncateDatabase`(  \n" +
                "	IN pPassword VARCHAR(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	IF (pPassword='DELETE_ALL') THEN  \n" +
                "  \n" +
                "		#Start - Delete Role  \n" +
                "		TRUNCATE TABLE rolepagedetail;  \n" +
                "		TRUNCATE TABLE workorder_operation_dataelement_role;  \n" +
                "		TRUNCATE TABLE standard_role;  \n" +
                "  \n" +
                "		#Start - Delete Features of roles  \n" +
                "		DELETE FROM feature_role_mapping;  \n" +
                "		#End - Delete Features of roles  \n" +
                "  \n" +
                "		#Start - Delete Generic Folder  \n" +
                "		UPDATE genericfiles SET refParentId = NULL WHERE refParentId IN (SELECT gencFolderID FROM generic_folder WHERE roleId IN (SELECT id FROM roles WHERE IFNULL(systemGenerated,0)=0));  \n" +
                "		DELETE FROM generic_folder WHERE roleId IN (SELECT id FROM roles WHERE IFNULL(systemGenerated,0)=0);  \n" +
                "  \n" +
                "		UPDATE genericfiles SET refParentId = NULL WHERE refParentId IN (SELECT gencFolderID FROM generic_folder WHERE refTransID != 0 OR refTransID IS NULL);  \n" +
                "		DELETE FROM generic_folder WHERE refTransID != 0 OR refTransID IS NULL;  \n" +
                "  \n" +
                "		#End - Delete Generic Folder  \n" +
                "  \n" +
                "		#Start - Delete Generic Files  \n" +
                "		TRUNCATE TABLE genericfiles;  \n" +
                "		#End - Delete Generic Files  \n" +
                "  \n" +
                "		DELETE FROM users_roles WHERE userid NOT IN ('1') OR roleID IN (SELECT id FROM roles WHERE IFNULL(systemGenerated,0)=0);  \n" +
                "		UPDATE users SET defaultLoginRoleID = NULL WHERE defaultLoginRoleID IN (SELECT id FROM roles WHERE IFNULL(systemGenerated,0)=0);  \n" +
                "		TRUNCATE TABLE userpagedetail;  \n" +
                "		DELETE FROM roles WHERE IFNULL(systemGenerated,0)=0;  \n" +
                "		#End - Delete Role  \n" +
                "		#Start - Delete Generic Category  \n" +
                "			TRUNCATE TABLE employee_department;  \n" +
                "			#Start - Delete Part  \n" +
                "			TRUNCATE TABLE operation_part;  \n" +
                "			TRUNCATE TABLE workorder_operation_part;  \n" +
                "			#End - Delete Part  \n" +
                "			#Start - Delete Equipment  \n" +
                "				TRUNCATE TABLE operation_equipment;  \n" +
                "				TRUNCATE TABLE workorder_trans_umid_verification_history;  \n" +
                "				DELETE FROM workorder_trans_umid_details;  \n" +
                "				DELETE FROM workorder_operation_feeder_lineitem_details;  \n" +
                "				DELETE FROM workorder_operation_equipment_feeder_details;  \n" +
                "				DELETE FROM workorder_operation_equipment;  \n" +
                "				TRUNCATE TABLE equipment_dataelement;  \n" +
                "				TRUNCATE TABLE workorder_operation_equipment_dataelement;  \n" +
                "  \n" +
                "				#Start - Delete Equipment Task  \n" +
                "				TRUNCATE TABLE equipment_task_schedule;  \n" +
                "				DELETE FROM equipment_task;  \n" +
                "				#End - Delete Equipment Task  \n" +
                "  \n" +
                "				# Start - Delete Workorder Trans Serial Master  \n" +
                "				TRUNCATE TABLE workorder_trans_packagingdetail;  \n" +
                "				DELETE FROM workorder_serialmst;  \n" +
                "				# End - Delete Workorder Trans Serial Master  \n" +
                "  \n" +
                "				#Start - Delete Workorder Transaction InOut Detail  \n" +
                "				TRUNCATE TABLE workorder_trans_emp_pausedet;  \n" +
                "				DELETE FROM workorder_trans_empinout;  \n" +
                "				#End - Delete Workorder Transaction InOut Detail  \n" +
                "  \n" +
                "				# Start - Delete Workorder Transaction  \n" +
                "				TRUNCATE TABLE workorder_trans_assy_defectdet;  \n" +
                "				TRUNCATE TABLE workorder_trans_production;  \n" +
                "				TRUNCATE TABLE workorder_trans_serialno;  \n" +
                "				TRUNCATE TABLE workorder_trans_operation_hold_unhold;  \n" +
                "				TRUNCATE TABLE workorder_trans_dataelement_values;  \n" +
                "				TRUNCATE TABLE workorder_trans_preprogramcomp;  \n" +
                "				TRUNCATE TABLE workorder_trans_equipment_dataelement_values;  \n" +
                "				TRUNCATE TABLE workorder_trans_narrative_history;  \n" +
                "				DELETE FROM workorder_trans;  \n" +
                "				# End - Delete Workorder Transaction  \n" +
                "  \n" +
                "				TRUNCATE TABLE employee_equipment;  \n" +
                "				TRUNCATE TABLE component_functionaltestingequipment;  \n" +
                "				TRUNCATE TABLE binmst_history;  \n" +
                "				TRUNCATE TABLE component_sid_stock_dataelement_values;  \n" +
                "				TRUNCATE TABLE component_sid_stock_history;  \n" +
                "				TRUNCATE TABLE component_sid_stock_packing_detail;  \n" +
                "				TRUNCATE TABLE kit_allocation;  \n" +
                "				UPDATE component_sid_stock SET refRestrictUMIDId = NULL;  \n" +
                "				DELETE FROM component_sid_stock_restrict_umid;  \n" +
                "				DELETE FROM component_sid_stock;  \n" +
                "				DELETE FROM packing_slip_material_receive_det;  \n" +
                "				DELETE FROM binmst;  \n" +
                "				UPDATE warehousemst SET `parentWHID`=NULL;  \n" +
                "				TRUNCATE TABLE warehousemst_history;  \n" +
                "				DELETE FROM warehousemst WHERE id > 0;  \n" +
                "				DELETE FROM equipment;  \n" +
                "			#End - Delete Equipment  \n" +
                "			# Start - Delete Operation  \n" +
                "			TRUNCATE TABLE operation_equipment;  \n" +
                "  \n" +
                "			# Start - Delete Workorder Operation Data Element  \n" +
                "			TRUNCATE TABLE workorder_operation_dataelement_role;  \n" +
                "			DELETE FROM workorder_operation_dataelement;  \n" +
                "			# End - Delete Workorder Operation Data Element  \n" +
                "  \n" +
                "			TRUNCATE TABLE operation_employee;  \n" +
                "			TRUNCATE TABLE workorder_operation_employee;  \n" +
                "			TRUNCATE TABLE operation_master_templates;  \n" +
                "  \n" +
                "			# Start - Delete Workorder Operation  \n" +
                "				# Start - Delete ECO Request  \n" +
                "					# Start - Delete ECO Request Approval  \n" +
                "					TRUNCATE TABLE eco_request_department_employee;  \n" +
                "					DELETE FROM eco_request_department_approval;  \n" +
                "					# End - Delete ECO Request Approval  \n" +
                "  \n" +
                "				TRUNCATE TABLE eco_request_type_values;  \n" +
                "				DELETE FROM eco_request;  \n" +
                "				# End - Delete ECO Request  \n" +
                "  \n" +
                "			# Start - Delete Shipping Details  \n" +
                "			TRUNCATE TABLE shippedassembly;  \n" +
                "			DELETE FROM salesshippingmst;  \n" +
                "			DELETE FROM salesorder_plan_detailsmst;  \n" +
                "			DELETE FROM workorder_salesorder_details;  \n" +
                "  \n" +
                "			TRUNCATE TABLE component_sid_stock_dataelement_values;  \n" +
                "			TRUNCATE TABLE component_sid_stock_history;  \n" +
                "			TRUNCATE TABLE kit_allocation;  \n" +
                "  \n" +
                "			TRUNCATE TABLE component_sid_stock_packing_detail;  \n" +
                "			DELETE FROM component_sid_stock;  \n" +
                "			TRUNCATE TABLE kit_allocation_assy_detail;  \n" +
                "			TRUNCATE TABLE kit_allocation_lineitems_alternatepart;  \n" +
                "			DELETE FROM kit_allocation_lineitems;  \n" +
                "			TRUNCATE TABLE kit_allocation;  \n" +
                "			DELETE FROM salesorderdet;  \n" +
                "			DELETE FROM salesordermst;  \n" +
                "			# End - Delete Shipping Details  \n" +
                "  \n" +
                "			# Start - Delete Workorder Request Review  \n" +
                "			TRUNCATE TABLE workorder_reqrevinvitedemp;  \n" +
                "			TRUNCATE TABLE workorder_reqrevcomments;  \n" +
                "			TRUNCATE TABLE workorder_reqforreview_values;  \n" +
                "			DELETE FROM workorder_reqforreview;  \n" +
                "			# End - Delete Workorder Request Review  \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_operation_cluster;  \n" +
                "			TRUNCATE TABLE workorder_trans_firstpcsdet;  \n" +
                "  \n" +
                "			# Start - Delete Workorder Tran PreProgramming  \n" +
                "			TRUNCATE TABLE workorder_trans_preprogramcomp;  \n" +
                "			--  DELETE FROM workorder_preprogcomp_designator;  \n" +
                "			DELETE FROM workorder_preprogcomp;  \n" +
                "			# End - Delete Workorder Tran PreProgramming  \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_transfer;  \n" +
                "  \n" +
                "			DELETE FROM workorder_operation;  \n" +
                "			# End - Delete Workorder Operation  \n" +
                "  \n" +
                "			TRUNCATE TABLE operation_dataelement;  \n" +
                "  \n" +
                "			#Start - Delete Chart  \n" +
                "			TRUNCATE TABLE chart_template_operations;  \n" +
                "			TRUNCATE TABLE chart_template_employee_details;  \n" +
                "			TRUNCATE TABLE chart_template_access;  \n" +
                "			DELETE FROM chart_templatemst;  \n" +
                "			#Start - End Chart  \n" +
                "  \n" +
                "  \n" +
                "			DELETE FROM operations;  \n" +
                "			# End - Delete Operation  \n" +
                "			TRUNCATE TABLE standard_message;  \n" +
                "			# Start - Delete Component  \n" +
                "			UPDATE identity SET `maxValue` = 1 WHERE `type`= 'AliasGroupID';  \n" +
                "			TRUNCATE TABLE component_cust_alias_rev_pn;  \n" +
                "			TRUNCATE TABLE rfq_consolidated_mfgpn_lineitem_alternate;  \n" +
                "			TRUNCATE TABLE rfq_lineitems_approval_comment;  \n" +
                "			DELETE FROM rfq_lineitems_alternatepart;  \n" +
                "  \n" +
                "			TRUNCATE TABLE component_alternatepn;  \n" +
                "			UPDATE identity SET `maxValue` = 1 WHERE `type`= 'AlternateGroupID';  \n" +
                "			TRUNCATE TABLE component_rohsalternatepn;  \n" +
                "  \n" +
                "			TRUNCATE TABLE component_packagingalias;  \n" +
                "			UPDATE identity SET `maxValue` = 1 WHERE `type`= 'PackagingGroupID';  \n" +
                "			#TRUNCATE TABLE component_goodbadpartmapping;  \n" +
                "			TRUNCATE TABLE component_processmaterial;  \n" +
                "			TRUNCATE TABLE component_drivetools;  \n" +
                "			TRUNCATE TABLE component_standard_details;  \n" +
                "  \n" +
                "			# Start - Delete Recieving Material  \n" +
                "			TRUNCATE TABLE component_sid_stock_dataelement_values;  \n" +
                "			DELETE FROM component_sid_stock;  \n" +
                "			DELETE FROM cost_category;  \n" +
                "			# End - Delete Recieving Material  \n" +
                "  \n" +
                "			UPDATE COMPONENT SET replacementPartID=NULL;  \n" +
                "  \n" +
                "			TRUNCATE TABLE part_sub_assy_relationship;  \n" +
                "			TRUNCATE TABLE component_customer_loa;  \n" +
                "  \n" +
                "			TRUNCATE TABLE rfq_assy_quantity_price_selection_setting;  \n" +
                "			TRUNCATE TABLE rfq_assy_quotations_additionalcost;  \n" +
                "			DELETE FROM rfq_assy_quotations;  \n" +
                "			DELETE FROM rfq_assy_quantity_turn_time;  \n" +
                "			TRUNCATE TABLE rfq_consolidate_mfgpn_lineitem_quantity;  \n" +
                "			TRUNCATE TABLE rfq_consolidate_mfgpn_lineitem_quantity_history;  \n" +
                "			TRUNCATE TABLE rfq_assy_qtywise_bom_laborcosting_detail;  \n" +
                "			DELETE FROM rfq_assy_quantity;  \n" +
                "			TRUNCATE TABLE rfq_assembly_history;  \n" +
                "			TRUNCATE TABLE rfq_consolidate_mfgpn_lineitem_quantity;  \n" +
                "			TRUNCATE TABLE rfq_consolidated_mfgpn_lineitem_history;  \n" +
                "			TRUNCATE TABLE rfq_lineitem_autopricingstatus;  \n" +
                "			DELETE FROM rfq_consolidated_mfgpn_lineitem;  \n" +
                "  \n" +
                "			TRUNCATE TABLE rfq_assy_quotations_additionalcost;  \n" +
                "			DELETE FROM rfq_assy_quotations;  \n" +
                "			TRUNCATE TABLE rfq_assy_quote_submitted_assydetail;  \n" +
                "			TRUNCATE TABLE rfq_assy_standard_class_detail;  \n" +
                "			TRUNCATE TABLE rfq_assy_quote_submitted_termsconditions;  \n" +
                "			TRUNCATE TABLE rfq_lineitems_alternatepart_history;  \n" +
                "			DELETE FROM rfq_lineitems_history;  \n" +
                "			TRUNCATE TABLE rfq_assywise_part_sub_assy_relationship_history;  \n" +
                "			DELETE FROM rfq_assemblies_quotation_submitted;  \n" +
                "  \n" +
                "			TRUNCATE TABLE rfq_consolidate_mfgpn_lineitem_quantity_history;  \n" +
                "			TRUNCATE TABLE rfq_consolidated_mfgpn_lineitem_alternate_history;  \n" +
                "			DELETE FROM rfq_consolidated_history;  \n" +
                "  \n" +
                "			TRUNCATE TABLE rfq_assy_qtywise_bom_laborcosting_detail;  \n" +
                "			DELETE FROM rfq_assy_labor_bom_mountingtype_qpa_detail;  \n" +
                "			TRUNCATE TABLE rfq_labor_assy_qpa_detail;  \n" +
                "			DELETE FROM rfq_assemblies;  \n" +
                "  \n" +
                "			TRUNCATE TABLE rfq_bom_header_component_configuration;  \n" +
                "			TRUNCATE TABLE rfq_lineitems_additional_comment;  \n" +
                "			TRUNCATE TABLE purchase_parts_details;  \n" +
                "			DELETE FROM rfq_lineitems;  \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_trans_firstpcsdet;  \n" +
                "			DELETE FROM workorder_operation_firstpiece;  \n" +
                "			TRUNCATE TABLE workorder_dataelement;  \n" +
                "			TRUNCATE TABLE shipping_requestdet;  \n" +
                "			TRUNCATE TABLE workorder_operation_cluster;  \n" +
                "			DELETE FROM workorder_cluster;  \n" +
                "  \n" +
                "			UPDATE workorder SET refrenceWOID=NULL;  \n" +
                "			TRUNCATE TABLE workorder_certification;  \n" +
                "			TRUNCATE TABLE workorder_trans_hold_unhold;  \n" +
                "			TRUNCATE TABLE `workorder_trans_assy_defectdet`;  \n" +
                "			DELETE FROM `workorder_assy_designators`;  \n" +
                "			DELETE FROM `workorder`;  \n" +
                "  \n" +
                "			TRUNCATE TABLE component_images;  \n" +
                "			TRUNCATE TABLE component_otherpn;  \n" +
                "			TRUNCATE TABLE assembly_revision_comments;  \n" +
                "			TRUNCATE TABLE component_requirefunctionaltype;  \n" +
                "			TRUNCATE TABLE component_requiremountingtype;  \n" +
                "			TRUNCATE TABLE component_standard_details;  \n" +
                "			TRUNCATE TABLE assemblystock;  \n" +
                "			TRUNCATE TABLE component_history;  \n" +
                "			TRUNCATE TABLE component_sid_stock_packing_detail;  \n" +
                "			DELETE FROM packing_slip_material_receive_det;  \n" +
                "			TRUNCATE TABLE packing_slip_track_number;  \n" +
                "			UPDATE packing_slip_material_receive SET refParentCreditDebitInvoiceno=NULL;  \n" +
                "			DELETE FROM packing_slip_material_receive;  \n" +
                "			TRUNCATE TABLE uid_verification_history;  \n" +
                "			TRUNCATE TABLE component_temperature_sensitive_data;  \n" +
                "			TRUNCATE TABLE component_datasheets;  \n" +
                "			TRUNCATE TABLE reserve_stock_request;  \n" +
                "			TRUNCATE TABLE assembly_trans_history;  \n" +
                "			DELETE FROM COMPONENT WHERE id > 0;  \n" +
                "  \n" +
                "			TRUNCATE TABLE workorder_certification;  \n" +
                "			TRUNCATE TABLE employee_certification;  \n" +
                "			DELETE FROM standard_class;  \n" +
                "			TRUNCATE TABLE rfq_assy_standard_class_detail;  \n" +
                "			DELETE FROM certificate_standards;  \n" +
                "			TRUNCATE TABLE br_label_template_delimiter;  \n" +
                "			DELETE FROM br_label_template;  \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL WHERE IFNULL(systemGenerated,0)=1 AND gencCategoryCode='Equipment & Workstation Ownerships';  \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL WHERE IFNULL(systemGenerated,0)=1 AND gencCategoryCode='Standard Types';  \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL WHERE IFNULL(systemGenerated,0)=1 AND gencCategoryCode='Equipment & Workstation Types';  \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL WHERE IFNULL(systemGenerated,0)=1 AND gencCategoryCode='Operation Types';  \n" +
                "			UPDATE genericcategory SET gencCategoryCode=NULL WHERE IFNULL(systemGenerated,0)=1 AND gencCategoryCode='Responsibilities';  \n" +
                "			DELETE FROM genericcategory WHERE IFNULL(systemGenerated,0)=0;  \n" +
                "			# End - Delete Component  \n" +
                "  \n" +
                "		#End - Delete Generic Category  \n" +
                "		TRUNCATE TABLE rfq_consolidate_mfgpn_lineitem_quantity;  \n" +
                "		TRUNCATE TABLE rfq_lineitem_autopricingstatus;  \n" +
                "		DELETE FROM rfq_consolidated_mfgpn_lineitem;  \n" +
                "  \n" +
                "		TRUNCATE TABLE rfq_lineitems_additional_comment;  \n" +
                "		TRUNCATE TABLE rfq_assembly_history;  \n" +
                "		DELETE FROM rfq_lineitems;  \n" +
                "		TRUNCATE TABLE component_rohsalternatepn;  \n" +
                "		DELETE FROM COMPONENT WHERE id > 0;  \n" +
                "		DELETE FROM rfq_parttypemst WHERE id > 0;  \n" +
                "		DELETE FROM rfq_mountingtypemst WHERE IFNULL(systemGenerated,0)=0;  \n" +
                "		#Start - Delete Entity  \n" +
                "		TRUNCATE TABLE workorder_operation_dataelement_role;  \n" +
                "		DELETE FROM workorder_operation_dataelement;  \n" +
                "		TRUNCATE TABLE dataelement_keyvalues;  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues;  \n" +
                "		DELETE FROM workorder_trans_subform_data;  \n" +
                "  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues_manual;  \n" +
                "		UPDATE identity SET `maxValue` = 0 WHERE `type`= 'EntityRefTransID';  \n" +
                "  \n" +
                "		TRUNCATE TABLE dataelement_transactionvalues;  \n" +
                "		DELETE FROM subform_transaction;  \n" +
                "		UPDATE dataelement SET datasourceDisplayColumnID=NULL;  \n" +
                "		TRUNCATE TABLE workorder_trans_equipment_dataelement_values;  \n" +
                "		DELETE FROM workorder_trans_equipment_subform_data;  \n" +
                "		DELETE FROM dataelement WHERE entityID <> -11;  \n" +
                "		DELETE FROM entity WHERE IFNULL(systemGenerated,0)=0;  \n" +
                "		#End - Delete Entity  \n" +
                "		#Start - Delete UOMS  \n" +
                "		TRUNCATE TABLE rfq_assy_quotations_additionalcost;  \n" +
                "		DELETE FROM rfq_assy_quotations;  \n" +
                "		DELETE FROM quotecharges_dynamic_fields_mst;  \n" +
                "		-- UPDATE uoms SET  baseUnitID=NULL;  \n" +
                "		-- DELETE FROM uoms WHERE isSystemDefault=0;  \n" +
                "		#End - Delete UOMS  \n" +
                "		#Start - Delete MFG  \n" +
                "		TRUNCATE TABLE invalid_mfgmappingmst;  \n" +
                "		DELETE FROM mfgcodealias WHERE mfgcodeid > 0;  \n" +
                "		TRUNCATE TABLE who_bought_who;  \n" +
                "		DELETE FROM rfqforms;  \n" +
                "  \n" +
                "		TRUNCATE TABLE rfq_assy_quotations_additionalcost;  \n" +
                "		TRUNCATE TABLE rfq_quote_issue_history;  \n" +
                "		DELETE FROM rfq_assy_quotations;  \n" +
                "		DELETE FROM rfq_assemblies_quotation_submitted;  \n" +
                "		DELETE FROM customer_addresses WHERE id > 0;  \n" +
                "  \n" +
                "		TRUNCATE TABLE email_addressdetail;  \n" +
                "		DELETE FROM contactperson;  \n" +
                "		DELETE FROM email_schedulemst;  \n" +
                "		UPDATE employees SET supplierID=NULL;  \n" +
                "		DELETE FROM mfgcodemst WHERE id > 0 AND IFNULL(systemGenerated,0)=0;  \n" +
                "		#End - Delete MFG  \n" +
                "		#Start - Delete BOM  \n" +
                "  \n" +
                "		#DELETE FROM component_cust_alias_rev;  \n" +
                "  \n" +
                "		#End - Delete BOM  \n" +
                "		#Start - Delete RFQ  \n" +
                "		DELETE FROM rfq_assy_quantity_turn_time;  \n" +
                "		DELETE FROM rfq_assy_quantity_price_selection_setting;  \n" +
                "		DELETE FROM rfq_assy_quantity;  \n" +
                "  \n" +
                "		DELETE FROM rfq_assemblies;  \n" +
                "		DELETE FROM rfqforms;  \n" +
                "		#End - Delete RFQ  \n" +
                "		DELETE FROM customer_addresses;  \n" +
                "		DELETE FROM contactperson;  \n" +
                "		TRUNCATE TABLE assemblystock;  \n" +
                "		TRUNCATE TABLE workorder_assembly_excessstock_location;  \n" +
                "		#Start - Delete Customer  \n" +
                "		-- TRUNCATE TABLE workorder_trans_assy_det;  \n" +
                "		DELETE FROM workorder_assy_designators;  \n" +
                "		DELETE FROM workorder_cluster;  \n" +
                "		DELETE FROM workorder_operation_firstpiece;  \n" +
                "		UPDATE workorder SET refrenceWOID=NULL;  \n" +
                "		TRUNCATE TABLE shipping_requestdet;  \n" +
                "		TRUNCATE TABLE workorder_trans_hold_unhold;  \n" +
                "		TRUNCATE TABLE workorder_main_assembly_mapping_details;  \n" +
                "		DELETE FROM workorder;  \n" +
                "		TRUNCATE TABLE assembly_revision_comments;  \n" +
                "		DELETE FROM customers;  \n" +
                "		#End - Delete Customer  \n" +
                "		#Start - Delete Employee  \n" +
                "		UPDATE department SET parentDeptID=NULL;  \n" +
                "		TRUNCATE TABLE department_location;  \n" +
                "		DELETE FROM department;  \n" +
                "		TRUNCATE TABLE dynamicreportaccess;  \n" +
                "		UPDATE employees SET `managerID`=NULL;  \n" +
                "		TRUNCATE TABLE notificationdet;  \n" +
                "		DELETE FROM notificationmst;  \n" +
                "		TRUNCATE TABLE group_participant_details;  \n" +
                "		TRUNCATE TABLE group_chat_log;  \n" +
                "		DELETE FROM group_chat;  \n" +
                "		TRUNCATE TABLE chat;  \n" +
                "		TRUNCATE TABLE feature_user_mapping;  \n" +
                "		TRUNCATE TABLE user_agreement;  \n" +
                "		DELETE FROM users WHERE username NOT IN ('admin');  \n" +
                "		TRUNCATE TABLE shipping_request_empdet;  \n" +
                "		DELETE FROM shipping_request;  \n" +
                "		DELETE FROM employees WHERE id NOT IN (SELECT employeeID FROM users WHERE username = 'admin');  \n" +
                "		#End - Delete Employee  \n" +
                "  \n" +
                "		DELETE FROM master_templates WHERE IFNULL(systemGenerated,0)=0;  \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Component Standards  \n" +
                "		TRUNCATE TABLE component_standard_details;  \n" +
                "		#End - Delete Component Standards  \n" +
                "  \n" +
                "		#Start - Delete Data Entry Audit Log  \n" +
                "		TRUNCATE TABLE dataentrychange_auditlog;  \n" +
                "		#End - Delete Data Entry Audit Log  \n" +
                "  \n" +
                "		#Start - Delete Dynamic Report  \n" +
                "		TRUNCATE TABLE dynamicreportfields;  \n" +
                "		DELETE FROM dynamicreportmst;  \n" +
                "		#End - Delete Dynamic Report  \n" +
                "  \n" +
                "		#Start - Delete Job Type  \n" +
                "		DELETE FROM jobtype;  \n" +
                "		#End - Delete Job Type  \n" +
                "  \n" +
                "		#Start - Delete Log Master  \n" +
                "		TRUNCATE TABLE logmst;  \n" +
                "		#End - Delete Log Master  \n" +
                "  \n" +
                "		#Start - Delete Reason  \n" +
                "		DELETE FROM reasonmst;  \n" +
                "		#End - Delete Reason  \n" +
                "  \n" +
                "		#Start - Delete Requirement  \n" +
                "		DELETE FROM requirement;  \n" +
                "		#End - Delete Requirement  \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Assy Auto Pricing Data  \n" +
                "		TRUNCATE TABLE rfq_assy_autopricingstatus;  \n" +
                "		#End - Delete Assy Auto Pricing Data  \n" +
                "  \n" +
                "  \n" +
                "		#Start - Delete Task Confirmation/Quantity Confirmation Log  \n" +
                "		TRUNCATE TABLE taskconfirmation;  \n" +
                "		#End - Delete Task Confirmation/Quantity Confirmation Log  \n" +
                "  \n" +
                "		#Start - Delete All Timeline Log  \n" +
                "		TRUNCATE TABLE timeline;  \n" +
                "		#End - Delete All Timeline Log  \n" +
                "  \n" +
                "		#Start - Delete All Chart Category  \n" +
                "		DELETE FROM chart_category;  \n" +
                "		#End - Delete All Chart Category  \n" +
                "  \n" +
                "		#Start - Delete All Component Generic Alias  \n" +
                "		DELETE FROM component_fields_genericalias_mst WHERE IFNULL(systemGenerated,0)=0;  \n" +
                "		#End - Delete All Component Generic Alias  \n" +
                "  \n" +
                "		#Start - Delete All ECO Category  \n" +
                "		DELETE FROM eco_type_values WHERE IFNULL(systemGenerated,0) = 0;  \n" +
                "		DELETE FROM eco_type_category WHERE IFNULL(systemGenerated,0) = 0;  \n" +
                "		#End - Delete All ECO Category  \n" +
                "  \n" +
                "		DELETE FROM `identity` WHERE IFNULL(systemGenerated,0) = 0;  \n" +
                "  \n" +
                "		TRUNCATE TABLE binmst_history;  \n" +
                "		DELETE FROM binmst;  \n" +
                "		TRUNCATE TABLE component_logicalgroup_detail;  \n" +
                "		DELETE FROM component_partstatusmst WHERE IFNULL(systemGenerated,0)=0;  \n" +
                "		DELETE FROM component_packagingmst WHERE IFNULL(systemGenerated,0)=0;  \n" +
                "		DELETE FROM component_logicalgroup WHERE IFNULL(systemGenerated,0)=0;  \n" +
                "		DELETE FROM master_templates WHERE IFNULL(systemGenerated,0)=0;  \n" +
                "		DELETE FROM rfq_connectertypemst WHERE id > 0 AND IFNULL(systemGenerated,0)=0;  \n" +
                "		UPDATE warehousemst SET parentWHID = NULL;  \n" +
                "		TRUNCATE TABLE warehousemst_history;  \n" +
                "		DELETE FROM warehousemst WHERE id > 0;  \n" +
                "  \n" +
                "		TRUNCATE TABLE external_partverificationrequest_log;  \n" +
                "		TRUNCATE TABLE component_alternatepn_validations;  \n" +
                "		TRUNCATE TABLE chart_rawdata_category_access_role;  \n" +
                "		TRUNCATE TABLE home_menu_cateogory;  \n" +
                "		TRUNCATE TABLE rfq_lineitems_keywords;  \n" +
                "		DELETE FROM rfq_assy_typemst;  \n" +
                "		DELETE FROM rfqtype;  \n" +
                "		TRUNCATE TABLE component_price_break_details;  \n" +
                "		TRUNCATE TABLE component_customer_loa;  \n" +
                "		DELETE FROM rfq_assemblies;  \n" +
                "		DELETE FROM rfq_rohsmst WHERE systemGenerated <> 1;  \n" +
                "		-- DELETE FROM uoms WHERE isSystemDefault=0;  \n" +
                "	ELSE  \n" +
                "		SELECT 'Invalid Argument';  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 29-12-2021 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_customer_packingslip` ;  \n" +
                "CREATE TRIGGER `Trg_AU_customer_packingslip` AFTER UPDATE ON `customer_packingslip`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTransTypeText VARCHAR(20);  \n" +
                "	SET vTransTypeText= IF(NEW.transType='I','Invoice','Credit Memo');  \n" +
                "  \n" +
                "    IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO#',CAST(OLD.soNumber AS CHAR),  \n" +
                "       CAST(NEW.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO#',CAST(OLD.poNumber AS CHAR),  \n" +
                "       CAST(NEW.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO Date',CAST(DATE_FORMAT(OLD.poDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.poDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Date', CAST(DATE_FORMAT(OLD.soDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.soDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Contact Person',(SELECT CONCAT(firstName,' ',lastName) FROM contactperson WHERE personId=OLD.contactPersonId),  \n" +
                "      (SELECT CONCAT(firstName,' ',lastName) FROM contactperson WHERE personId=NEW.contactPersonId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipComment,0) != IFNULL(NEW.packingSlipComment,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Shipping Comments', OLD.packingSlipComment,  \n" +
                "       NEW.packingSlipComment, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.substatus ,0) != IFNULL(NEW.substatus ,0) THEN  \n" +
                "	IF(NEW.transType='P')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft'WHEN OLD.substatus=2 THEN 'Ready To Ship'WHEN OLD.substatus=3 THEN 'Waiting For Shipping Label'WHEN OLD.substatus=4 THEN 'Waiting For Pickup' WHEN OLD.substatus= 6 THEN 'Published' WHEN OLD.substatus= 5 THEN 'Shipped'  ELSE '' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Draft'WHEN NEW.substatus=2 THEN 'Ready To Ship'WHEN NEW.substatus=3 THEN 'Waiting For Shipping Label'WHEN NEW.substatus=4 THEN 'Waiting For Pickup' ELSE 'Shipped' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	ELSEIF (NEW.transType='I')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Shipped - Not Invoiced' WHEN OLD.substatus=2 THEN 'Invoiced' WHEN Old.subStatus=3 THEN 'Corrected and Invoiced'  WHEN Old.subStatus=4 THEN 'Draft' WHEN Old.subStatus=5 THEN 'Published' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Shipped - Not Invoiced' WHEN NEW.substatus=2 THEN 'Invoiced' WHEN NEW.subStatus=3 THEN 'Corrected and Invoiced'  WHEN NEW.subStatus=4 THEN 'Draft' WHEN NEW.subStatus=5 THEN 'Published' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	ELSEIF (NEW.transType='C')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft' WHEN OLD.substatus=2 THEN 'Published' ELSE '' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Draft' WHEN NEW.substatus=2 THEN 'Published' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippingMethodId ,0) != IFNULL(NEW.shippingMethodId ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Shipping Method', fun_getGenericCategoryNameByID(OLD.shippingMethodId),  \n" +
                "       fun_getGenericCategoryNameByID(NEW.shippingMethodId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.sorevision ,0) != IFNULL(NEW.sorevision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Version', CAST(OLD.sorevision AS CHAR),  \n" +
                "       CAST(NEW.sorevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.freeOnBoardId ,0) != IFNULL(NEW.freeOnBoardId ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'FOB',(SELECT `name` FROM freeonboardmst WHERE id=OLD.freeOnBoardId) ,  \n" +
                "     (SELECT `name` FROM freeonboardmst WHERE id=NEW.freeOnBoardId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.invoiceNumber ,0) != IFNULL(NEW.invoiceNumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice#',CAST(OLD.invoiceNumber AS CHAR) ,  \n" +
                "     CAST(NEW.invoiceNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.invoiceDate ,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice Date',CAST(DATE_FORMAT(OLD.invoiceDate, '%m/%d/%y') AS CHAR) ,  \n" +
                "     CAST(DATE_FORMAT(NEW.invoiceDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.headerComment ,0) != IFNULL(NEW.headerComment,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Internal Notes',CAST(OLD.headerComment AS CHAR),  \n" +
                "     CAST(NEW.headerComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip Date',CAST(DATE_FORMAT(OLD.packingSlipDate, '%m/%d/%y') AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.packingSlipDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip#',CAST(OLD.packingSlipNumber AS CHAR),  \n" +
                "		CAST(NEW.packingSlipNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Terms',  \n" +
                "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
                "			FROM genericcategory  WHERE gencCategoryID = OLD.termsID) ,  \n" +
                "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
                "			FROM genericcategory  WHERE gencCategoryID = NEW.termsID) ,  \n" +
                "	fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Sales Commission To',  \n" +
                "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = OLD.salesCommissionTo),  \n" +
                "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = NEW.salesCommissionTo),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.totalAmount ,0) != IFNULL(NEW.totalAmount ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Total Amount ($)',  \n" +
                "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(OLD.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(OLD.totalAmount,2) AS CHAR) END,  \n" +
                "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(NEW.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(NEW.totalAmount,2) AS CHAR) END,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isLocked,0) != IFNULL(NEW.isLocked,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Locked',(CASE WHEN OLD.isLocked=0 THEN 'No' WHEN OLD.isLocked=1 THEN 'Yes' ELSE '' END),  \n" +
                "      (CASE WHEN NEW.isLocked=0 THEN 'No' WHEN NEW.isLocked=1 THEN 'Yes' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedAt ,0) != IFNULL(NEW.lockedAt ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked Date' ELSE 'Locked Date' END),'',  \n" +
                "		(CASE WHEN OLD.isLocked = 1 THEN fun_DatetimetoUTCDateTime() ELSE NEW.lockedAt END),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName(\"CUSTOMER_PACKINGSLIP\",'lockedAt'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedBy ,0) != IFNULL(NEW.lockedBy ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked By' ELSE 'Locked By' END),'',  \n" +
                "		(CASE WHEN OLD.isLocked = 1 THEN fun_getUserNameByID(NEW.updatedBy) ELSE fun_getUserNameByID(NEW.lockedBy) END) ,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "   IF IFNULL(OLD.billingAddress ,0) != IFNULL(NEW.billingAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Bill To',CAST(OLD.billingAddress AS CHAR),  \n" +
                "		CAST(NEW.billingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippingAddress ,0) != IFNULL(NEW.shippingAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ship To',CAST(OLD.shippingAddress AS CHAR),  \n" +
                "		CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.intermediateAddress ,0) != IFNULL(NEW.intermediateAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Mark For',CAST(OLD.intermediateAddress AS CHAR) ,  \n" +
                "		CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.creditMemoNumber ,0) != IFNULL(NEW.creditMemoNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Number',CAST(OLD.creditMemoNumber AS CHAR),  \n" +
                "		CAST(NEW.creditMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Date',CAST(DATE_FORMAT(OLD.creditMemoDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.creditMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refDebitMemoNumber ,0) != IFNULL(NEW.refDebitMemoNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo#',CAST(OLD.refDebitMemoNumber AS CHAR) ,  \n" +
                "		CAST(NEW.refDebitMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refDebitMemoDate,0) != IFNULL(NEW.refDebitMemoDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo Date',CAST(DATE_FORMAT(OLD.refDebitMemoDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.refDebitMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaNumber ,0) != IFNULL(NEW.rmaNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'RMA#',CAST(OLD.rmaNumber AS CHAR) ,  \n" +
                "		CAST(NEW.rmaNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "   IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Revision',OLD.revision  ,  \n" +
                "		NEW.revision , fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),CONCAT('Confirming Zero Value',vTransTypeText),(CASE WHEN OLD.isZeroValue =0 THEN 'False' ELSE 'True' END),  \n" +
                "	   (CASE WHEN NEW.isZeroValue =0 THEN 'False' ELSE 'True' END),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.poRevision,0) != IFNULL(NEW.poRevision,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'PO Revision',OLD.poRevision,NEW.poRevision,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isMarkForRefund,0) != IFNULL(NEW.isMarkForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Mark For Refund',OLD.isMarkForRefund,NEW.isMarkForRefund,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.agreedRefundAmt,0) != IFNULL(NEW.agreedRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Agreed Refund Amt',OLD.agreedRefundAmt,NEW.agreedRefundAmt,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "   END;  \n" +
                /* **************************** New Script -> 29-12-2021 *********************************** */
                "DROP VIEW  IF EXISTS `vu_salesorder_shipped_report`;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyCode` AS `Company Code`,  \n" +
                "        `a`.`companyMfgName` AS `companyMfgName`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`kitNumber` AS `kitNumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`isLegacyPOText` AS `IsLegacyPOText`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`isRmaPOText` AS `isRmaPOText`,  \n" +
                "        `a`.`specialNote` AS `AssySpecialNote`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
                "                (SELECT  \n" +
                "                        1  \n" +
                "                    FROM  \n" +
                "                        `workorder_salesorder_details` `x`  \n" +
                "                    WHERE  \n" +
                "                        ((`x`.`salesOrderDetailID` = `a`.`id`)  \n" +
                "                            AND (`x`.`isDeleted` = 0))  \n" +
                "                    LIMIT 1) AS `wosalesOrderDetail`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `cu`.`mfgCode` AS `companyCode`,  \n" +
                "                `cu`.`mfgName` AS `companyMfgName`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitNumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                (SELECT  \n" +
                "                        MIN(`ssm`.`shippingDate`)  \n" +
                "                    FROM  \n" +
                "                        `salesshippingmst` `ssm`  \n" +
                "                    WHERE  \n" +
                "                        ((`ssm`.`sDetID` = `a`.`id`)  \n" +
                "                            AND (`ssm`.`isDeleted` = 0))) AS `shippingDate`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                (SELECT  \n" +
                "                        IFNULL(SUM(`shippedassembly`.`shippedqty`), 0)  \n" +
                "                    FROM  \n" +
                "                        `shippedassembly`  \n" +
                "                    WHERE  \n" +
                "                        ((`shippedassembly`.`partID` = `a`.`partID`)  \n" +
                "                            AND (`shippedassembly`.`isDeleted` = 0)  \n" +
                "                            AND `shippedassembly`.`shippingId` IN (SELECT  \n" +
                "                                `salesshippingmst`.`shippingID`  \n" +
                "                            FROM  \n" +
                "                                `salesshippingmst`  \n" +
                "                            WHERE  \n" +
                "                                ((`salesshippingmst`.`sDetID` = `a`.`id`)  \n" +
                "                                    AND (IFNULL(`salesshippingmst`.`isDeleted`, 0) = 0))))) AS `ShippedQty`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                FUN_GETINTTOTEXT(`sm`.`isLegacyPO`) AS `isLegacyPOText`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                FUN_GETINTTOTEXT(`sm`.`isRmaPO`) AS `isRmaPOText`,  \n" +
                "                `co`.`specialNote` AS `specialNote`  \n" +
                "        FROM  \n" +
                "            ((((((`salesorderdet` `a`  \n" +
                "        JOIN `salesordermst` `sm` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (IFNULL(`sm`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (IFNULL(`cu`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON (((`a`.`partID` = `co`.`id`)  \n" +
                "            AND (IFNULL(`co`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (IFNULL(`roh`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (IFNULL(`cc`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (IFNULL(`gc`.`isDeleted`, 0) = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`a`.`isDeleted` = 0)  \n" +
                "                AND (`a`.`partCategory` = 3))) `a`;  \n" +
                /* **************************** New Script -> 29-12-2021 *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report`;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`custAssyPN` AS `custAssyPN`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`mfgName` AS `mfgName`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`rmaNumber` AS `rmaNumber`,  \n" +
                "        `a`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "        `a`.`debitedByCustText` AS `debitedByCustText`,  \n" +
                "        `a`.`rmaOrgPONumber` AS `rmaOrgPONumber`,  \n" +
                "        `a`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "        `a`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "        `a`.`reworkReqText` AS `reworkReqText`,  \n" +
                "        `a`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "        `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "        `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "        `a`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "        `a`.`blanketPOOptionText` AS `blanketPOOptionText`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                `sm`.`rmaNumber` AS `rmaNumber`,  \n" +
                "                `sm`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isDebitedByCustomer` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `debitedByCustText`,  \n" +
                "                `sm`.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "                `sm`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "                `sm`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isReworkRequired` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `reworkReqText`,  \n" +
                "                `sm`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                `sm`.`createdAt` AS `createdDate`,  \n" +
                "                `sm`.`updatedAt` AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`custAssyPN` AS `custAssyPN`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`mfgName` AS `mfgName`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                IFNULL((CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN `sqt`.`BPOShippedQty`  \n" +
                "                    ELSE `sq`.`ShippedQty`  \n" +
                "                END), 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "                `sm`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 1) THEN 'Use This Blanket PO# for All Releases'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN 'Link Future PO(s) to This Blanket PO'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 3) THEN 'Use Blanket PO# and Release#'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `blanketPOOptionText`  \n" +
                "        FROM  \n" +
                "            (((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            IFNULL(SUM(`sbt`.`ShippedQty`), 0) AS `BPOShippedQty`,  \n" +
                "                `sbt`.`refBlanketPOID` AS `blanketPOSoDetID`  \n" +
                "        FROM  \n" +
                "            (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                `sdd`.`refBlanketPOID` AS `refBlanketPOID`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            ((`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        JOIN `salesorderdet` `sdd` ON (((`sdd`.`id` = `cpd`.`refSalesorderDetid`)  \n" +
                "            AND (`sdd`.`isDeleted` = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid` , `sdd`.`refBlanketPOID`) `sbt`  \n" +
                "        GROUP BY `sbt`.`refBlanketPOID`) `sqt` ON ((`sqt`.`blanketPOSoDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refBlanketPOID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refBlanketPOID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID` , `s`.`refAssyId`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** New Script -> 29-12-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_Uti_AddExistingCustContactDet` ;  \n" +
                "CREATE PROCEDURE `Sproc_Uti_AddExistingCustContactDet`(  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vCurrUTCDateTime DATETIME;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE totCustContPerson INT DEFAULT 0;  \n" +
                "  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	  BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "  \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() INTO vCurrUTCDateTime;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_CustAddContactList ;  \n" +
                "	CREATE TEMPORARY TABLE temp_CustAddContactList AS  \n" +
                "	SELECT ca.customerId `refTransID` , 'mfgcodemst' `refTableName` ,  \n" +
                "		SUBSTRING_INDEX(SUBSTRING_INDEX(ca.personName, ' ', 1), ' ', -1) `firstName`,  \n" +
                "		IF(LENGTH(personName) - LENGTH(REPLACE(ca.personName, ' ', ''))>1,  SUBSTRING_INDEX(SUBSTRING_INDEX(ca.personName, ' ', 2), ' ', -1) ,NULL) `middleName` ,  \n" +
                "		SUBSTRING_INDEX(SUBSTRING_INDEX(ca.personName, ' ', 3), ' ', -1) `lastName` ,  \n" +
                "		( SELECT JSON_ARRAYAGG(JSON_OBJECT('email', `emailToSet`, 'isprimary', FALSE))  \n" +
                "			FROM (  \n" +
                "				SELECT TRIM(SUBSTRING_INDEX(SUBSTRING_INDEX(cai.email, ',', numbers.n), ',', -1)) emailToSet  \n" +
                "				FROM  \n" +
                "				  (SELECT 1 n UNION ALL  \n" +
                "				   SELECT 2 UNION ALL SELECT 3 UNION ALL  \n" +
                "				   SELECT 4 UNION ALL SELECT 5  \n" +
                "				   ) numbers  \n" +
                "					INNER JOIN customer_addresses cai  \n" +
                "						ON CHAR_LENGTH(cai.email)- CHAR_LENGTH(REPLACE(cai.email, ',', '')) >= numbers.n-1  \n" +
                "				WHERE cai.id = ca.id  \n" +
                "				AND cai.isDeleted = 0  \n" +
                "				-- ORDER BY cai.id, n  \n" +
                "			   ) t  \n" +
                "		   ) `email` ,  \n" +
                "		contact `phone` , NULL `mobile` , division `division` , faxNumber `faxNumber` ,  \n" +
                "		phExtension `phExtension` , contactCountryCode `phoneCountryCode` , faxCountryCode `faxCountryCode` , NULL AS `mobileCountryCode` ,  \n" +
                "		1 `createdBy`, vCurrUTCDateTime `createdAt`, 1 `createByRoleId` ,  \n" +
                "		1 `updatedBy`, vCurrUTCDateTime `updatedAt`, 1 `updateByRoleId` ,  \n" +
                "		ca.id AS custAddMstID  \n" +
                "	FROM `customer_addresses` ca  \n" +
                "	WHERE ca.isDeleted = 0  \n" +
                "	AND ca.personName IS NOT NULL  \n" +
                "	;  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO totCustContPerson  \n" +
                "	FROM temp_CustAddContactList ;  \n" +
                "	WHILE i < totCustContPerson DO  \n" +
                "		INSERT INTO `contactperson` (`refTransID`,`refTableName`,`firstName`,`middleName`,`lastName`,  \n" +
                "			`email`, `phone`,`mobile`,`division`,`faxNumber`,  \n" +
                "			`phExtension`,`phoneCountryCode`,`faxCountryCode`,`mobileCountryCode`,  \n" +
                "			`createdBy`,`createdAt`,`createByRoleId`,  \n" +
                "			`updatedBy`,`updatedAt`,`updateByRoleId`)  \n" +
                "		SELECT  `refTransID` , `refTableName` ,  `firstName`, `middleName` , `lastName` ,  \n" +
                "			 `email` , `phone` ,  `mobile` , `division` ,  `faxNumber` ,  \n" +
                "			 `phExtension` ,  `phoneCountryCode` ,  `faxCountryCode` ,  `mobileCountryCode` ,  \n" +
                "			 `createdBy` ,  `createdAt`, `createByRoleId` ,  \n" +
                "			 `updatedBy` ,  `updatedAt`, `updateByRoleId`  \n" +
                "		FROM temp_CustAddContactList  \n" +
                "		LIMIT i,1  \n" +
                "		;  \n" +
                "  \n" +
                "		UPDATE customer_addresses  \n" +
                "		SET defaultContactPersonID = LAST_INSERT_ID() ,  \n" +
                "			`updatedBy` = 1 ,  `updatedAt` = vCurrUTCDateTime, `updateByRoleId` = 1  \n" +
                "		WHERE id = (SELECT custAddMstID FROM temp_CustAddContactList LIMIT i,1)  \n" +
                "		;  \n" +
                "  \n" +
                "		SET i = i + 1;  \n" +
                "  \n" +
                "	END WHILE ;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_CustAddContactList ;  \n" +
                "  \n" +
                "	COMMIT;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 29-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5709,'2.00','V1',' contactperson SPS Trigger View - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5709:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);  \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);  \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vUTCDateTime datetime;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() into vUTCDateTime;  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "     SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "							select  a.*  \n" +
                "							from  \n" +
                "							(SELECT 	        c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                            c.actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber ,  \n" +
                "                            min(kitreleasedate)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minKitReleaseDate,  \n" +
                "                             min(id)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minkitid  \n" +
                "					FROM     vu_release_plan_detail AS c where c.kitstatus = case when '\",v_ParentWHType,\"' ='M' then 'P' else 'R' end  \n" +
                "                      ) a where a.kitreleasedate = a.minKitReleaseDate  and a.id =a.minkitid \");  \n" +
                "  \n" +
                "  IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
                "				csd.binId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	binmst  \n" +
                "						WHERE 	isdeleted = 0  \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
                "					)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
                "				ka.refUIDId IN (  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock  \n" +
                "					WHERE 	isdeleted = 0  \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "				)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"  \n" +
                "			EXISTS (  \n" +
                "				SELECT 		1  \n" +
                "				FROM 		kit_allocation ka  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "							AND ka.status = 'A'  \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")  \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
                "	END IF;  \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (pIsCheckPRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"  \n" +
                "		SELECT k.* FROM  \n" +
                "			(SELECT	a.*,  \n" +
                "					(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore,  \n" +
                "					FUNC_MISMATCHITEMFORKIT(a.refSalesOrderDetID, IFNULL(a.subAssyID,a.refAssyId), 'M', NULL, NULL) AS mismatchItem,  \n" +
                "					fun_getKitReleaseStatus(a.kitPlanPercentage,totalKitReleaseQty,totalPOReleaseQty,a.assyKitQty,a.assyPOQty,a.totalKitReleasePlan,a.pendingCount) kitReleaseStatus  \n" +
                "				FROM	(  \n" +
                "					SELECT 	sd.id refSalesOrderDetID,  \n" +
                "							sd.kitNumber,  \n" +
                "							IFNULL(kad.partId, sd.partID) assyID,  \n" +
                "							(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
                "							(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
                "							sd.partID assyMainId,  \n" +
                "							c.mfgPN assyMainName,  \n" +
                "							c.PIDCode assyMainPIDCode,  \n" +
                "							kad.partId assySubId,  \n" +
                "							cs.mfgPN assySubName,  \n" +
                "							cs.PIDCode assySubPIDCode,  \n" +
                "							CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
                "							sd.kitNumber kitName,  \n" +
                "							s.id soId,  \n" +
                "							s.poNumber,  \n" +
                "							s.salesOrderNumber,  \n" +
                "							s.poDate,  \n" +
                "							sd.qty,  \n" +
                "							sd.kitQty,  \n" +
                "							kad.totalAssyBuildQty,  \n" +
                "							\", pDeptID ,\" AS deptID,  \n" +
                "							'\", v_ParentWHType ,\"' AS deptType,  \n" +
                "							fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
                "							IFNULL(b.uidCount, 0) uidCount,  \n" +
                "							IFNULL(b.binCount, 0) binCount,  \n" +
                "							ka.totalLines,  \n" +
                "							ka.shortageLines,  \n" +
                "							sd.isHotJob,  \n" +
                "							IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
                "                            r.name as  rohs,  \n" +
                "                         r.rohsIcon as rohsIcon,  \n" +
                "							/*fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
                "							fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
                "							fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  */  \n" +
                "                             ka.minBuild kitBuildFeasibility,  \n" +
                "							fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
                "							sp.totalKitPlan,  \n" +
                "							sp.pendingCount,  \n" +
                "							sp.totalKitReleasePlan,  \n" +
                "                            IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.qty,0) AS assyPOQty,  \n" +
                "							IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.kitQty,0) AS assyKitQty,  \n" +
                "							sp.totalKitReleaseQty,  \n" +
                "							sp.totalPOReleaseQty,  \n" +
                "							(  \n" +
                "								SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
                "								FROM 	holdunholdtrans h  \n" +
                "								WHERE 	h.refTransId = sd.id  \n" +
                "										AND h.refType = 'PO'  \n" +
                "										AND h.`status` = 'H'  \n" +
                "								ORDER BY h.id DESC  \n" +
                "								LIMIT 1  \n" +
                "							) poHalt,  \n" +
                "							(  \n" +
                "								SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	a.haltTooltip  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "												FROM 	holdunholdtrans h  \n" +
                "												WHERE 	h.refTransId = sd.id  \n" +
                "														AND h.refType = 'KR'  \n" +
                "														AND h.`status` = 'H'  \n" +
                "												ORDER BY h.id DESC  \n" +
                "												LIMIT 1  \n" +
                "										) a  \n" +
                "										UNION  \n" +
                "										SELECT 	b.haltTooltip  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "												FROM 	holdunholdtrans h  \n" +
                "												WHERE 	h.refTransId = sd.id  \n" +
                "														AND h.refType = 'KA'  \n" +
                "														AND h.`status` = 'H'  \n" +
                "												ORDER BY h.id DESC  \n" +
                "												LIMIT 1  \n" +
                "										) b  \n" +
                "								) c  \n" +
                "							) kitHalt,  \n" +
                "							p.woID,  \n" +
                "							p.workorderNumber,  \n" +
                "							p.id AS id,  \n" +
                "							p.salesOrderDetID,  \n" +
                "							p.refAssyId,  \n" +
                "							p.subAssyID,  \n" +
                "							p.plannKitNumber,  \n" +
                "							p.poQty,  \n" +
                "							p.poDueDate,  \n" +
                "							p.mfrLeadTime,  \n" +
                "							p.materialDockDate,  \n" +
                "							p.kitReleaseQty,  \n" +
                "							p.kitReleaseDate,  \n" +
                "							(DATEDIFF(fun_ConvertUTCDatetimeToSpecificTimeZone('\",vUTCDateTime,\"','\",v_TimeZone,\"'), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
                "							p.feasibilityWithAllocatedQty,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
                "							p.releasedBy,  \n" +
                "							p.releaseTimeFeasibility,  \n" +
                "							p.kitStatus,  \n" +
                "							p.rushJob,  \n" +
                "							p.woStatusID,  \n" +
                "							p.refPlanId,  \n" +
                "							p.releasedNote,  \n" +
                "							p.releaseKitNumber,  \n" +
                "							p.kitReturnStatus,  \n" +
                "							ka.kitPlanPercentage,  \n" +
                "							fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,'\",vUTCDateTime,\"'), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0), FALSE) kitReleaseIndicator,  \n" +
                "							ka.allocationUMIDCount allocationUMIDCount  \n" +
                "					FROM 		salesorderdet sd  \n" +
                "					INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "					INNER JOIN	component c ON sd.partID = c.id  \n" +
                "					Inner Join rfq_rohsmst r on r.id = c.RoHSStatusID  \n" +
                "					LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
                "					LEFT JOIN  	component cs ON kad.partId = cs.id  \n" +
                "					LEFT JOIN (  \n" +
                "							SELECT  salesOrderDetID, refAssyId, subAssyID,  \n" +
                "									COUNT(1) totalKitPlan,  \n" +
                "									SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) totalKitReleasePlan,  \n" +
                "									SUM(CASE WHEN kitStatus = 'P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "									SUM(kitReleaseQty) totalKitReleaseQty,  \n" +
                "									SUM(poQty) totalPOReleaseQty  \n" +
                "									FROM salesorder_plan_detailsmst WHERE isDeleted = 0  \n" +
                "									GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "						) AS sp ON sp.salesOrderDetID =  sd.id  AND sp.refAssyId = sd.partID  AND (CASE WHEN kad.partId = sd.partID THEN sp.subAssyID IS NULL ELSE sp.subAssyID = kad.partId END)  \n" +
                "					LEFT JOIN	(  \n" +
                "								SELECT 	a.refSalesOrderDetID,  \n" +
                "									a.assyID,  \n" +
                "									a.binID,  \n" +
                "									COUNT(1) binCount,  \n" +
                "									SUM(a.uidCount) uidCount,  \n" +
                "									SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
                "								FROM 	(  \n" +
                "										SELECT 		k.refSalesOrderDetID,  \n" +
                "												k.assyID,  \n" +
                "												csd.binID,  \n" +
                "												COUNT(1) uidCount,  \n" +
                "												(  \n" +
                "													SELECT IF( EXISTS(  \n" +
                "														SELECT 	binId  \n" +
                "														FROM 	component_sid_stock  \n" +
                "														WHERE 	binID = csd.binID  \n" +
                "															AND isdeleted = 0  \n" +
                "															and isinstk  =1  \n" +
                "															AND id NOT IN (  \n" +
                "																SELECT 	refUIDId  \n" +
                "																FROM 	kit_allocation  \n" +
                "																WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
                "																		AND assyID = k.assyID  \n" +
                "																		AND `status` = 'A'  \n" +
                "															)  \n" +
                "													), 1, 0)  \n" +
                "												) mismatchUMIDBin  \n" +
                "											FROM 		kit_allocation k  \n" +
                "											INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "											INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "											INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "											WHERE		k.status = 'A'  \n" +
                "														AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
                "														AND	csd.isDeleted = 0  \n" +
                "														AND	b.isDeleted = 0  \n" +
                "														AND	w.isDeleted = 0  \n" +
                "											GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
                "									) AS a  \n" +
                "								GROUP BY  a.refSalesOrderDetID, a.assyID  \n" +
                "							) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	k.refSalesOrderDetID,  \n" +
                "									k.assyID,  \n" +
                "									k.totalLines,  \n" +
                "									k.shortageLines,  \n" +
                "									k.kitAllocationPercentage kitPlanPercentage,  \n" +
                "									(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  ,  \n" +
                "                                    k.minBuild  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	k.refSalesOrderDetID,  \n" +
                "											k.assyID,  \n" +
                "											COUNT(1) AS totalLines,  \n" +
                "											SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
                "											ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS kitAllocationPercentage  ,  \n" +
                "                                             min(minBuild) minBuild  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	vk.refSalesOrderDetID,  \n" +
                "														vk.assyID,  vk.qpaWithDnp,  \n" +
                "														vk.isNotRequiredKitAllocation AS isNotRequiredKitAllocation,  \n" +
                "														IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "														(CASE WHEN vk.connecterTypeID = -2 THEN vk.shortagePins ELSE vk.shortage END) AS shortage ,  \n" +
                "                                                        (  \n" +
                "															CASE  \n" +
                "																WHEN connecterTypeID = -2 THEN  \n" +
                "																	(IFNULL(allocatedpin, 0) / (IFNULL(qpaWithDnp, 0) * bomNumOfPosition))  \n" +
                "																ELSE  \n" +
                "																	(IFNULL(allocatedunit, 0) / IFNULL(qpaWithDnp, 0))  \n" +
                "  \n" +
                "															END  \n" +
                "														) AS minBuild  \n" +
                "												FROM 	vu_kit_allocation_detail vk  \n" +
                "                                                Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  AND sd.isDeleted = 0  \n" +
                "												WHERE    vk.`isNotRequiredKitAllocation` != 1 and vk.qpaWithDnp != 0  \n" +
                "											) k  GROUP BY k.refSalesOrderDetID, k.assyID  \n" +
                "									) k  \n" +
                "							) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
                "					LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
                "									AND p.refAssyId = sd.partID  \n" +
                "									AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
                "					WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
                "								AND 	s.isDeleted = 0  \n" +
                "								AND 	sd.isCancle != 1  \n" +
                "								AND 	(\", v_WhereClauseFilter ,\")  \n" +
                "								AND 	(\", v_WhereClause ,\")  \n" +
                "					GROUP BY 	sd.id, sd.partID, kad.partId  \n" +
                "				) AS a  \n" +
                "		) AS k WHERE 	(\", v_WhereKitFilterCondition ,\")  \n" +
                "	\");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 kitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 actualKitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "  select @vSQLMainQuery;  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5710,'2.00','V1',' Tune SP Sproc_retrive_kit_to_transfer- DP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5710:
            allDbChangesArray.push(
                /* **************************** New Script -> 30-12-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_master_templates`;  \n" +
                "CREATE TRIGGER `Trg_AU_master_templates` AFTER UPDATE ON `master_templates` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_createdAt DATETIME DEFAULT fun_DatetimetoUTCDateTime();  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"master_templates\";  \n" +
                "	IF IFNULL(OLD.masterTemplate,0) != IFNULL(NEW.masterTemplate,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('MASTER_TEMPLATES',CAST(new.id AS CHAR),'Template',CAST(OLD.masterTemplate AS CHAR), CAST(NEW.masterTemplate AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'masterTemplate'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.description,0) != IFNULL(NEW.description,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('MASTER_TEMPLATES',CAST(new.id AS CHAR),'Description',CAST(OLD.description AS CHAR), CAST(NEW.description AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'description'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.masterTemplateStatus,0) != IFNULL(NEW.masterTemplateStatus,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('MASTER_TEMPLATES',CAST(new.id AS CHAR),'Status',CAST(fun_getGenericStatusNameByID(OLD.masterTemplateStatus) AS CHAR), CAST(fun_getGenericStatusNameByID(NEW.masterTemplateStatus) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'masterTemplateStatus'));  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 30-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5711,'2.00','V1',' Bug 39983: The operation and operation management related issues check the checklist. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5711:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "    IN ppolinestatus VARCHAR(10),  \n" +
                "	IN ppostatus VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN ponlyOtherPart boolean,  \n" +
                "    IN pwithoutOtherPart boolean,  \n" +
                "    IN pisonlyPendingLines boolean,  \n" +
                "    IN pPOComments VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"  \n" +
                "		SELECT (CASE WHEN(IFNULL((a.totalReceivedQty * 100 / a.qty), 0)) > 100 THEN 100 ELSE IFNULL(round((a.totalReceivedQty * 100 / a.qty), 2), 0) END) poLineCompletionPercentage, a.* from  \n" +
                "		(SELECT  pod.id,  \n" +
                "				pom.id as refPurchaseOrderID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pod.mfgPartID,  \n" +
                "				pod.packagingID,  \n" +
                "				pod.supplierPartID,  \n" +
                "				pod.partDescription,  \n" +
                "				pod.pcbPerArray,  \n" +
                "				pod.rohsStatusID,  \n" +
                "				pod.internalRef,  \n" +
                "				pod.qty,  \n" +
                "				pod.price,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				(pod.qty * pod.price) extPrice,  \n" +
                "				pod.totalRelease,  \n" +
                "				pod.lineComment,  \n" +
                "				pod.lineID,  \n" +
                "				pod.supplierQuoteNumber,  \n" +
                "				pom.poDate,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				c.mfgPN,  \n" +
                "				c.pidCode,  \n" +
                "				c.unit,  \n" +
                "				c.iscustom,  \n" +
                "				c.partType,  \n" +
                "				rr.name AS rohsName,  \n" +
                "				rr.rohsIcon,  \n" +
                "				cp.name AS packagingName,  \n" +
                "				mc.mfgCode,  \n" +
                "				mc.mfgName,  \n" +
                "				mc.id As mfgcodeID,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.status,  \n" +
                "				pom.carrierID,  \n" +
                "				pom.poWorkingStatus,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Closed' else IFNULL(vups.poLineWorkingDisplayStatus,'Open') end poLineWorkingDisplayStatus,  \n" +
                "                case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatusDisplayStatus,  \n" +
                "				vups.totalReceivedQty,  \n" +
                "				vups.totalPendingQty,  \n" +
                "				vups.poLineCompleteReason,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Auto' else  vups.poLineCompleteType end poCompleteType,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				sc.mfgPN supplierPN,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.termsID,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pod.internalLineComment,  \n" +
                "				m.mfgcode as supplierMfgName,  \n" +
                "				fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,  \n" +
                "				(SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,  \n" +
                "				(ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,  \n" +
                "				fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, \",vMfgCodeFormat,\") mfgcodeName,  \n" +
                "				fun_getUserNameByID(pod.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pod.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pod.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pod.updateByRoleId) updatedbyRole,  \n" +
                "				(select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,  \n" +
                "				(select pold.promisedShipDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) promisedShipDate,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, FALSE) packingSlipDate,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, TRUE) packingSlipId,  \n" +
                "                c.custAssyPN ,  \n" +
                "                ps.packingSlip,  \n" +
                "                pod.isdeleted,  \n" +
                "                case when c.partType=4 and pom.poWorkingStatus='C' then 'C' else IFNULL(vups.poLineWorkingStatus,'P') end poLineWorkingStatus,  \n" +
                "                ps.MaterialReceiptNumber,  \n" +
                "                pod.isLineCustConsigned,  \n" +
                "                CASE WHEN pod.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "                pod.lineCustomerID,  \n" +
                "                fun_GetFormattedMfgCode(pm.mfgCode, pm.mfgName, \",vMfgCodeFormat,\") customerName,  \n" +
                "                m.mfgName as POSupplierName,  \n" +
                "                pod.isNonUMIDStock,  \n" +
                "                CASE WHEN pod.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                pom.lockStatus  \n" +
                "		FROM purchase_order_det pod  \n" +
                "		LEFT JOIN purchase_order_mst pom  ON pom.id=pod.refPurchaseOrderID and  pom.isdeleted=0  \n" +
                "		LEFT JOIN vu_purchaseorder_shipping_release vups on vups.refPurchaseOrderDetID= pod.id  \n" +
                "		LEFT JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN component c ON c.id=pod.mfgPartID  \n" +
                "		LEFT JOIN component sc on sc.id=pod.supplierPartID  \n" +
                "		LEFT JOIN mfgcodemst mc ON mc.id=c.mfgcodeID  \n" +
                "        LEFT JOIN mfgcodemst pm ON pm.id=pod.lineCustomerID  \n" +
                "		LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID  \n" +
                "		LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID  \n" +
                "        LEFT JOIN (select group_concat(distinct psmr.id, '@@@', psmr.packingSlipNumber order by psmr.packingSlipDate desc separator '\",v_GroupConcatSeparator,\"') as packingSlip,  \n" +
                "						group_concat(distinct psmr.packingSlipNumber order by psmr.packingSlipDate desc separator ', ') as MaterialReceiptNumber,  \n" +
                "                        psmr.refPurchaseOrderID, psmrd.refPurchaseOrderDetID  \n" +
                "                        from packing_slip_material_receive psmr  \n" +
                "							join packing_slip_material_receive_det psmrd  \n" +
                "								on psmrd.refPackingSlipMaterialRecID=psmr.id and psmrd.isDeleted=false  \n" +
                "						where psmr.receiptType='P' and psmr.isDeleted=false group by psmr.refPurchaseOrderID, psmrd.refPurchaseOrderDetID  \n" +
                "					) ps on ps.refPurchaseOrderID = pom.id and ps.refPurchaseOrderDetID=pod.id ) a  \n" +
                "		WHERE a.isdeleted=0  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  like ''%',psearchposotext,'%'' OR a.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  =''',psearchposotext,''' OR a.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate>=''',pfromDate,''' and a.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "    IF(ppolinestatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" and a.poLineWorkingStatus = '\", ppolinestatus ,\"'\");  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" and a.poWorkingStatus IN (\", ppostatus ,\")\");  \n" +
                "	END IF;  \n" +
                "    IF(pPOComments IS NOT NULL AND pPOComments != '')THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, \"  \n" +
                "				AND (a.shippingComment LIKE '%\",pPOComments,\"%'  \n" +
                "                OR a.partDescription LIKE '%\",pPOComments,\"%'  \n" +
                "                OR a.internalLineComment LIKE '%\",pPOComments,\"%'  \n" +
                "                OR a.lineComment LIKE '%\",pPOComments,\"%'  \n" +
                "                OR a.poComment LIKE '%\",pPOComments,\"%')  \n" +
                "                \");  \n" +
                "    END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.mfgPartID in (',ppartIds,') OR a.supplierPartID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "    IF(pwithoutOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType!=4');  \n" +
                "	END IF;  \n" +
                "    IF(ponlyOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType=4');  \n" +
                "	END IF;  \n" +
                "	IF(pisonlyPendingLines=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.poLineWorkingStatus=\"P\"');  \n" +
                "	END IF;  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 31-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderSummaryDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderSummaryDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "	IN ppostatus VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN pLockFilterStatus VARCHAR(50),  \n" +
                "    IN pPoPostingStatusFilter VARCHAR(20),  \n" +
                "    IN pPOComments VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(\"  \n" +
                "    SELECT (CASE WHEN(IFNULL((a.poCompletedLine * 100 / a.totalPOLines), 0)) > 100 THEN 100 ELSE IFNULL(round((a.poCompletedLine * 100 / a.totalPOLines), 2), 0) END) poCompletionPercentage, a.* FROM  \n" +
                "		( SELECT  pom.id,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.poDate,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				pom.termsID,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pom.status,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pom.serialNumber,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.carrierID,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				CASE WHEN pom.shippingInsurance=0 THEN 'No' ELSE 'Yes' END shippingInsuranceName,  \n" +
                "				pom.shippingInsurance,  \n" +
                "				pom.supplierAddress,  \n" +
                "				pom.shippingAddress,  \n" +
                "				pom.intermediateAddress,  \n" +
                "				CASE WHEN pom.isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPO,  \n" +
                "				pom.isBlanketPO,  \n" +
                "				m.mfgcode,  \n" +
                "				pom.poCompleteReason,  \n" +
                "				pom.poCompleteType,  \n" +
                "				pom.cancleReason,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				pom.poWorkingStatus,  \n" +
                "                pom.CancellationConfirmed,  \n" +
                "                CASE WHEN pom.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END CancellationConfirmedStatus,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='C') poCompletedLine,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='P') poPendingLine,  \n" +
                "				case when pom.poWorkingStatus='P' then 'In Progress' when  pom.poWorkingStatus='C' then 'Completed' else 'Canceled' end workingStatusName,  \n" +
                "				IFNULL(vgf.cnt, 0) poDocumentCount,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType!=4 and pod.refPurchaseOrderID=pom.id) totalItems,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType=4 and pod.refPurchaseOrderID=pom.id) totalOtherItems,  \n" +
                "				fun_getFOBById(pom.freeOnBoardId) freeOnBoard,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				(select sum((pod.qty * pod.price)+ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)) from purchase_order_det pod where pod.refPurchaseOrderID=pom.id and pod.isdeleted=0) totalAmount,  \n" +
                "				fun_getUserNameByID(pom.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pom.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pom.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pom.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "	            pom.isdeleted,  \n" +
                "                (SELECT COUNT(1) FROM purchase_order_det pod WHERE pod.isdeleted=0 and pod.refPurchaseOrderID=pom.id) totalPOLines,  \n" +
                "                (select id from packing_slip_material_receive where refPurchaseOrderID=pom.id and isdeleted=false order by receiptDate desc limit 1) packingSlipId,  \n" +
                "                ps.packingSlip,  \n" +
                "                ps.MaterialReceiptNumber,  \n" +
                "                pom.isCustConsigned,  \n" +
                "                CASE WHEN pom.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "                pom.customerID,  \n" +
                "                fun_GetFormattedMfgCode(pm.mfgcode, pm.mfgName, \",vMfgCodeFormat,\") customerName,  \n" +
                "                pom.isNonUMIDStock,  \n" +
                "                CASE WHEN pom.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                pom.lockStatus,  \n" +
                "				(case when pom.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "					when pom.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "					when pom.lockStatus = 'LC' then 'Locked'  \n" +
                "					else null end  \n" +
                "				) lockStatusValue,  \n" +
                "				fun_getUserNameByID(pom.lockedBy) lockByName,  \n" +
                "				fun_getRoleByID(pom.lockedByRoleId) lockedByRoleName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM purchase_order_mst pom JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0  \n" +
                "        LEFT JOIN LATERAL (SELECT id, refPurchaseOrderID FROM packing_slip_material_receive WHERE refPurchaseOrderID=pom.id AND isDeleted=0 LIMIT 1) AS psmr ON psmr.refPurchaseOrderID=pom.id  \n" +
                "		LEFT JOIN vu_genericfilescount vgf ON vgf.entityID = -20 AND vgf.refTransID = pom.id  \n" +
                "        LEFT JOIN mfgcodemst pm ON pm.id=pom.customerID and pm.isdeleted = 0  \n" +
                "         LEFT JOIN (select group_concat(distinct psmr.id, '@@@', psmr.packingSlipNumber order by psmr.packingSlipDate desc separator '\",v_GroupConcatSeparator,\"') as packingSlip,  \n" +
                "						group_concat(distinct psmr.packingSlipNumber order by psmr.packingSlipDate desc separator ', ') MaterialReceiptNumber,  \n" +
                "						psmr.refPurchaseOrderID  \n" +
                "                        from packing_slip_material_receive psmr  \n" +
                "						where psmr.receiptType='P' and psmr.isDeleted=false group by psmr.refPurchaseOrderID  \n" +
                "					) ps on ps.refPurchaseOrderID = pom.id ) a  \n" +
                "		WHERE a.isdeleted=0  \n" +
                "	\");  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and a.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and a.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (a.soNumber  like ''%',psearchposotext,'%'' OR a.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (a.soNumber  =''',psearchposotext,''' OR a.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pPOComments IS NOT NULL AND pPOComments != '')THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, \"  \n" +
                "				AND (a.shippingComment LIKE '%\",pPOComments,\"%'  \n" +
                "                OR a.poComment LIKE '%\",pPOComments,\"%')  \n" +
                "                \");  \n" +
                "    END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate>=''',pfromDate,''' and a.poDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate>=''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and a.poWorkingStatus IN (\", ppostatus ,\")\"); -- FIND_IN_SET(a.poWorkingStatus,''', ppostatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' AND exists (select 1 from purchase_order_det pod where pod.refPurchaseOrderID = a.id and pod.isDeleted = 0 and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,')))');  \n" +
                "	END IF;  \n" +
                "    IF(pLockFilterStatus IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and a.lockStatus IN (\", pLockFilterStatus ,\")\");  \n" +
                "	END IF;  \n" +
                "    IF(pPoPostingStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and a.status = '\", pPoPostingStatusFilter ,\"'\");  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "    SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5712,'2.00','V1',' Sample entry - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5712:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-12-2021 *********************************** */
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Parts Supplier Quote',0,0,'app.component.managecomponent.splrquote',  \n" +
                "'/supplierquote/:coid','Manage Parts Supplier Quote',@parentPageID,0,'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "  \n" +
                "INSERT INTO page_detail  \n" +
                "(pageName,RO,RW,pageRoute,pageURL,menuName,parentPageID,hasChild,iconClass,isActive,createdAt,  \n" +
                "createdBy,isDisplay,displayMenuName,isAllowAsHomePage,createByRoleId,isReadOnlyDeveloped) values  \n" +
                "('Manage Supplier Parts Supplier Quote',0,0,'app.component.managedistcomponent.splrquote',  \n" +
                "'/supplierquote/:coid','Manage Supplier Parts Supplier Quote',@parentPageID,0,'icons-manage-parts',1,'2021-10-12 09:32:31',1,1,'Part', 0,1,0);  \n" +
                "  \n" +
                "  \n" +
                "select pageID into @altPageID from page_detail where pageRoute = 'app.component.managecomponent.splrquote';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managecomponent.pricinghistory' and p.isDeleted = 0);  \n" +
                "  \n" +
                "select pageID into @altPageID from page_detail where pageRoute = 'app.component.managedistcomponent.splrquote';  \n" +
                "INSERT INTO `userpagedetail`  \n" +
                "(`userID`,`pageID`,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`)  \n" +
                "select `userID`,@altPageID,`RO`,`RW`,`isActive`,`isDeleted`,`createdAt`,`createdBy`,`IsShortcut`,`roleID`,`IsShowInHomePage`,`displayOrder`,  \n" +
                "`createByRoleId`,`isHelpBlog`  \n" +
                " from userpagedetail where isDeleted = 0 and pageID = (select pageID from page_detail as p where p.pageRoute = 'app.component.managedistcomponent.pricinghistory' and p.isDeleted = 0);  \n" +
                /* **************************** Add Script Version -> 31-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5713,'2.00','V1',' User Story 37420: Part Master: Separate Tab for Supplier Quote and History view changes as per global points - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5713:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-12-2021 *********************************** */
                "drop procedure if exists `Sproc_GetPackingSlipInvoicePaymentToInformation`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipInvoicePaymentToInformation`(  \n" +
                "	IN pPaymentId INT,  \n" +
                "	IN pMfgCodeId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE v_mfgNameFormat int;  \n" +
                "  \n" +
                "SELECT FUN_GETMFGCODENAMEFORMAT() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	IF pPaymentId IS NOT NULL THEN  \n" +
                "  \n" +
                "        SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "		SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SELECT  \n" +
                "    pi.systemId,  \n" +
                "    pi.id paymentId,  \n" +
                "    pi.accountReference,  \n" +
                "    pi.mfgcodeID,  \n" +
                "    m.mfgCode,  \n" +
                "    m.mfgName,  \n" +
                "    FUN_GETFORMATTEDMFGCODE(m.mfgCode, m.mfgName, v_mfgNameFormat) fullMfgName,  \n" +
                "    pi.paymentType,  \n" +
                "    p.gencCategoryName paymentTypeName,  \n" +
                "    pi.paymentNumber,  \n" +
                "    pi.bankAccountMasID,  \n" +
                "    pi.bankName,  \n" +
                "    pi.bankAccountNo,  \n" +
                "    pi.paymentDate,  \n" +
                "    pi.paymentAmount,  \n" +
                "    pi.payToName,  \n" +
                "    pi.payToAddress,  \n" +
                "    pi.remark,  \n" +
                "    pi.isPaymentVoided,  \n" +
                "    pi.voidPaymentReason,  \n" +
                "    pi.billToName,  \n" +
                "    pi.billToAddress,  \n" +
                "    pi.lockStatus,  \n" +
                "    FUN_GETUSERNAMEBYID(pi.lockedBy) lockByName,  \n" +
                "    FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(pi.lockedAt,  \n" +
                "            v_TimeZone,  \n" +
                "            v_DateTimeDisplayFormat) lockedAt,  \n" +
                "    PI.refPaymentMode  \n" +
                "FROM  \n" +
                "    packingslip_invoice_payment PI  \n" +
                "        INNER JOIN  \n" +
                "    mfgcodemst m ON m.id = pi.mfgcodeID  \n" +
                "        INNER JOIN  \n" +
                "    genericcategory p ON p.gencCategoryID = pi.paymentType  \n" +
                "WHERE  \n" +
                "    pi.isDeleted = 0  \n" +
                "        AND PI.refPaymentMode = 'P'  \n" +
                "        AND pi.id = pPaymentId;  \n" +
                "	ELSE  \n" +
                "		SELECT 		m.accountRef accountReference,  \n" +
                "				m.id mfgcodeID,  \n" +
                "				m.mfgCode,  \n" +
                "				m.mfgName,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) fullMfgName,  \n" +
                "				m.paymentMethodID paymentType,  \n" +
                "				p.gencCategoryName paymentTypeName,  \n" +
                "				NULL paymentNumber,  \n" +
                "				b.id bankAccountMasID,  \n" +
                "				b.bankName,  \n" +
                "				b.accountCode bankAccountNo,  \n" +
                "				NULL paymentDate,  \n" +
                "				NULL paymentAmount,  \n" +
                "				ca.bankRemitToName payToName,  \n" +
                "				fun_getAddressbyIDForCheckPrint(ca.id) payToAddress,  \n" +
                "				NULL remark,  \n" +
                "				0 isPaymentVoided,  \n" +
                "				NULL voidPaymentReason,  \n" +
                "				cb.companyName billToName,  \n" +
                "				fun_getAddressbyIDForCheckPrint(cb.id) billToAddress,  \n" +
                "                null lockStatus,  \n" +
                "				null lockByName,  \n" +
                "				null lockedAt  \n" +
                "		FROM 		mfgcodemst m  \n" +
                "		LEFT JOIN 	genericcategory p ON p.gencCategoryID = m.paymentMethodID  \n" +
                "        LEFT JOIN 	bank_mst b ON b.id = p.bankid AND b.isDeleted = 0 AND b.isActive = 1  \n" +
                "		LEFT JOIN 	customer_addresses ca ON ca.customerId = m.id AND ca.isDeleted = 0 AND ca.addressType = 'P' AND ca.isDefault = 1  \n" +
                "		LEFT JOIN 	customer_addresses cb ON cb.customerId = m.id AND cb.isDeleted = 0 AND cb.addressType = 'B' AND cb.isDefault = 1  \n" +
                "		WHERE 		m.isDeleted = 0  \n" +
                "					AND m.id = pMfgCodeId;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_RetrieveSupplierInvoicePayment`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pSupplierIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "    IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "    IN pRefPaymentMode VARCHAR(2),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pSelectedDateType VARCHAR(10),  \n" +
                "    IN pPaymentComments VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPaymentComments IS NOT NULL AND pPaymentComments != '')THEN  \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause,\" AND remark LIKE '%\",pPaymentComments,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause,\" AND lockStatus = '\", pLockStatusFilter ,\"'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "			EXISTS (select 1  \n" +
                "					   from packing_slip_material_receive psd  \n" +
                "					   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "					  where psd.isDeleted = 0  \n" +
                "						and pdet.refPayementid = inv.id  \n" +
                "						AND psd.invoiceNumber = \"',pInvoiceNumber,'\"  \n" +
                "				)'  \n" +
                "		);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pFromDate IS NOT NULL AND pToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.poDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.receiptDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.packingSlipDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		END IF;  \n" +
                "	ELSEIF pFromDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.poDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.receiptDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.packingSlipDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.invoiceDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate = '\",pFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"  \n" +
                "		SELECT	inv.id,  \n" +
                "				inv.systemId,  \n" +
                "				inv.mfgcodeID,  \n" +
                "				m.mfgCode supplier,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') supplierCodeName,  \n" +
                "				inv.isPaymentVoided,  \n" +
                "				case 	when inv.isPaymentVoided = 0 then  \n" +
                "						'Paid'  \n" +
                "					else  \n" +
                "						'Voided'  \n" +
                "				end isPaymentVoidedConvertedValue,  \n" +
                "				inv.voidPaymentReason,  \n" +
                "				inv.refVoidedPaymentNumber,  \n" +
                "                inv.refVoidedPaymentId,  \n" +
                "                (select c.lockStatus from packingslip_invoice_payment c  \n" +
                "					where c.id = inv.refVoidedPaymentId) refVoidedPaymentLockStatus,  \n" +
                "				inv.paymentNumber,  \n" +
                "				inv.bankName,  \n" +
                "				inv.bankAccountNo,  \n" +
                "				inv.paymentType,  \n" +
                "				inv.bankAccountMasID,  \n" +
                "				gc.gencCategoryName paymentMethod,  \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "				inv.paymentDate,  \n" +
                "				invdet.invoiceAmount,  \n" +
                "				inv.paymentAmount,  \n" +
                "				inv.payToAddress payToAddress,  \n" +
                "				inv.payToName,  \n" +
                "                inv.refGencTransModeID,  \n" +
                "                gtm.modeName transactionModeName,  \n" +
                "                gtm.systemGenerated systemGeneratedTransactionMode,  \n" +
                "				inv.accountReference,  \n" +
                "				inv.remark,  \n" +
                "                inv.depositBatchNumber,  \n" +
                "                inv.offsetAmount,  \n" +
                "                inv.acctId,  \n" +
                "                fun_getChartOfAccountsCodeNameByID(inv.acctId) coaName,  \n" +
                "				fun_getUserNameByID(inv.createdBy) createdby,  \n" +
                "				fun_getUserNameByID(inv.updatedBy) updatedby,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,  \n" +
                "				fun_getRoleByID(inv.createByRoleId) createdbyRole,  \n" +
                "				inv.lockStatus,  \n" +
                "				(case when inv.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "					when inv.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "					when inv.lockStatus = 'LC' then 'Locked'  \n" +
                "					else null end  \n" +
                "				) lockStatusValue,  \n" +
                "				fun_getUserNameByID(inv.lockedBy) lockByName,  \n" +
                "				fun_getRoleByID(inv.lockedByRoleId) lockedByRoleName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM	packingslip_invoice_payment inv  \n" +
                "        join mfgcodemst m ON m.id = inv.mfgcodeID  \n" +
                "		INNER JOIN 	genericcategory gc ON inv.paymentType = gc.gencCategoryID  \n" +
                "        left join generic_transmode_mst gtm ON gtm.id = inv.refGencTransModeID  \n" +
                "		left JOIN (  \n" +
                "					SELECT 		pid.refPayementid,	SUM(psmd.extendedPrice) invoiceAmount  \n" +
                "					FROM 		packingslip_invoice_payment_det pid  \n" +
                "					LEFT JOIN 	packing_slip_material_receive_det psmd ON psmd.refPackingSlipMaterialRecID = pid.refPackingslipInvoiceID AND psmd.isDeleted = 0  \n" +
                "					WHERE 		pid.isDeleted = 0  \n" +
                "                       and		pid.isPaymentVoided = 0  \n" +
                "					GROUP BY 	pid.refPayementid  \n" +
                "				) invdet ON invdet.refPayementid = inv.id  \n" +
                "		WHERE 		inv.isDeleted = 0  \n" +
                "					AND inv.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "					AND gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_GetPackingSlipDetailByPackingSlipNumber`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipDetailByPackingSlipNumber`(  \n" +
                "	IN pPackingSlipNumber VARCHAR(100),  \n" +
                "	IN pMFGCodeId INT,  \n" +
                "	IN pCreditMemoType VARCHAR(5)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountOfPSRecord INT;  \n" +
                "	DECLARE v_CountOfPSDraftRecord INT;  \n" +
                "	DECLARE v_CountOfSIRecord INT;  \n" +
                "	DECLARE v_CountOfPSDetailRecord INT;  \n" +
                "	DECLARE v_StringOfMFGCode VARCHAR(1000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_PackingSlip_Validation_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_PackingSlip_Validation_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		ErrorCode INT,  \n" +
                "		FullMFGCode VARCHAR(1000)  \n" +
                "	);  \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_CountOfPSRecord  \n" +
                "	FROM 	packing_slip_material_receive  \n" +
                "	WHERE 	packingSlipNumber = pPackingSlipNumber  \n" +
                "			AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)  \n" +
                "			AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'R' ELSE receiptType = 'P' END)  \n" +
                "			AND isDeleted = 0;  \n" +
                "  \n" +
                "	IF (v_CountOfPSRecord = 0) THEN  \n" +
                "		INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 1, NULL);  \n" +
                "		SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;  \n" +
                "	ELSEIF (v_CountOfPSRecord = 1) THEN  \n" +
                "		SELECT 	COUNT(1) INTO v_CountOfPSDraftRecord  \n" +
                "		FROM 	packing_slip_material_receive  \n" +
                "		WHERE 	packingSlipNumber = pPackingSlipNumber  \n" +
                "			AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)  \n" +
                "			AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'R' ELSE receiptType = 'P' END)  \n" +
                "			AND (CASE WHEN pCreditMemoType = 'RC' THEN (packingSlipModeStatus = 'D' OR packingSlipModeStatus = 'P') ELSE packingSlipModeStatus = 'D' END)  \n" +
                "			AND isDeleted = 0;  \n" +
                "  \n" +
                "		IF (v_CountOfPSDraftRecord = 1) THEN  \n" +
                "			INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 5, NULL);  \n" +
                "			SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;  \n" +
                "		ELSE  \n" +
                "			SELECT 	COUNT(1), GROUP_CONCAT(fullMFGCode) INTO v_CountOfSIRecord, v_StringOfMFGCode  \n" +
                "			FROM 	(  \n" +
                "					SELECT 	p.id, p.packingSlipNumber, fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, fun_getMFGCodeNameFormat()) fullMFGCode  \n" +
                "					FROM 	packing_slip_material_receive p  \n" +
                "                    join mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "					WHERE 	p.packingSlipNumber = pPackingSlipNumber  \n" +
                "							AND p.mfgCodeID = IFNULL(pMFGCodeId, p.mfgCodeID)  \n" +
                "							AND (CASE WHEN pCreditMemoType = 'RC' THEN p.receiptType = 'C' ELSE p.receiptType = 'I' END)  \n" +
                "							AND p.isDeleted = 0  \n" +
                "			) a;  \n" +
                "  \n" +
                "			IF (v_CountOfSIRecord = 0) THEN  \n" +
                "  \n" +
                "				SELECT 	COUNT(1) INTO v_CountOfPSDetailRecord  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	deletedAt IS NULL  \n" +
                "						AND refPackingSlipMaterialRecID IN (  \n" +
                "							SELECT 	id  \n" +
                "							FROM 	packing_slip_material_receive  \n" +
                "							WHERE 	packingSlipNumber = pPackingSlipNumber  \n" +
                "									AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)  \n" +
                "									AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'R' ELSE receiptType = 'P' END)  \n" +
                "									AND deletedAt IS NULL  \n" +
                "						);  \n" +
                "  \n" +
                "				IF (v_CountOfPSDetailRecord = 0) THEN  \n" +
                "					INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 4, v_StringOfMFGCode);  \n" +
                "					SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;  \n" +
                "				ELSE  \n" +
                "					INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (TRUE, 0, NULL);  \n" +
                "					SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;  \n" +
                "  \n" +
                "					-- pr.poNumber, pr.supplierSONumber,  \n" +
                "					SELECT 		pr.id, pr.mfgCodeID,  \n" +
                "							pr.poNumber, pr.poDate, pr.supplierSONumber, pom.poWorkingStatus, pr.soDate,  \n" +
                "							/*(CASE WHEN pCreditMemoType = 'RC' THEN pr.poNumber ELSE null END) poNumber,  \n" +
                "							(CASE WHEN pCreditMemoType = 'RC' THEN pr.poDate ELSE NULL END) poDate, */  \n" +
                "							pr.packingSlipNumber, pr.packingSlipDate,  \n" +
                "							pr.receiptDate, pr.receiptType, pr.`status`, m.paymentTermsID, p.termsDays,  \n" +
                "                            pr.refPurchaseOrderID  \n" +
                "					FROM 		packing_slip_material_receive pr  \n" +
                "					JOIN 		mfgcodemst m ON m.id = pr.mfgCodeID  \n" +
                "                    LEFT JOIN	purchase_order_mst pom ON pom.id = pr.refPurchaseOrderID  \n" +
                "					LEFT JOIN 	genericcategory p ON p.gencCategoryID = m.paymentTermsID  \n" +
                "					WHERE 		pr.packingSlipNumber = pPackingSlipNumber  \n" +
                "								AND pr.mfgCodeID = IFNULL(pMFGCodeId, pr.mfgCodeID)  \n" +
                "								AND (CASE WHEN pCreditMemoType = 'RC' THEN pr.receiptType = 'R' ELSE pr.receiptType = 'P' END)  \n" +
                "								AND pr.isDeleted = 0;  \n" +
                "  \n" +
                "					SELECT 		p.id,						p.refPackingSlipMaterialRecID,  \n" +
                "							CAST(p.packingSlipSerialNumber AS SIGNED) packingSlipSerialNumber,  \n" +
                "							p.nickname, 					p.partID, 						p.scanLabel,  \n" +
                "							p.receivedQty, 					p.packingSlipQty,  \n" +
                "							(CASE WHEN pCreditMemoType = 'RC' THEN (IFNULL(p.invoicePrice, 0) * IFNULL(p.packingSlipQty, 0) * -1) ELSE NULL END) extendedPrice,  \n" +
                "							p.binID, 					p.warehouseID, 						p.parentWarehouseID,  \n" +
                "							p.invoicePrice,					p.disputedPrice,					p.createdBy,  \n" +
                "							p.createdAt, 					p.updatedBy, 						p.updatedAt,  \n" +
                "							p.deletedBy, 					p.deletedAt, 						p.isDeleted,  \n" +
                "							p.approveNote, 					p.otherCharges,  \n" +
                "							p.status, 					p.refCreditDebitInvoiceNo,  \n" +
                "							(IFNULL(p.extendedPrice, 0) - IFNULL(p.extendedReceivedPrice, 0)) lineVariance,  \n" +
                "							(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "							p.difference, 					p.umidCreated, 						p.poReleaseNumber,  \n" +
                "							fun_getMfgCodeByID(c.mfgcodeID) mfgCode,	fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,		fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode,  \n" +
                "							c.mfgcodeID,					c.mfgPN,					        sc.mfgPN supplierPN,  \n" +
                "							c.unit,						c.uom,					  		fun_getUnitNameByID(c.uom) uomName,  \n" +
                "							0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                "							p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                "							fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                "							c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "							sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "							sc.packagingID supplierPackagingId,  \n" +
                "							'Pending' invoiceVerificationStatus,  \n" +
                "							p.receivedStatus,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.receivedStatus = 'P' THEN 'Pending'  \n" +
                "									WHEN p.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "                                    WHEN p.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
                "									WHEN p.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) receivedStatusValue,  \n" +
                "							p.remark,  \n" +
                "							fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt  \n" +
                "					FROM		packing_slip_material_receive_det p  \n" +
                "					LEFT JOIN 	component c ON p.partID = c.id AND c.deletedAt IS NULL  \n" +
                "					LEFT JOIN	component sc ON p.refSupplierPartId = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "					WHERE   	p.refPackingSlipMaterialRecID IN (  \n" +
                "								SELECT 	id  \n" +
                "								FROM 	packing_slip_material_receive  \n" +
                "								WHERE 	packingSlipNumber = pPackingSlipNumber  \n" +
                "										AND mfgCodeID = IFNULL(pMFGCodeId, mfgCodeID)  \n" +
                "										AND (CASE WHEN pCreditMemoType = 'RC' THEN receiptType = 'R' ELSE receiptType = 'P' END)  \n" +
                "										AND isDeleted = 0  \n" +
                "							)  \n" +
                "					AND 		p.isDeleted = 0;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 3, v_StringOfMFGCode);  \n" +
                "				SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	ELSEIF (v_CountOfPSRecord > 1) THEN  \n" +
                "		INSERT INTO temp_PackingSlip_Validation_Error (IsSuccess, ErrorCode, FullMFGCode) VALUES (FALSE, 2, NULL);  \n" +
                "		SELECT IsSuccess, ErrorCode, FullMFGCode FROM temp_PackingSlip_Validation_Error;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5714,'2.00','V1','Bug 39653: MFR Code Data key not working as per selected value in Supplier Invoice to Payment flow - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5714:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-12-2021 *********************************** */
                "drop procedure if exists `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "    IN pInvoiceLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_ParentPackingSlipId INT;  \n" +
                "	DECLARE v_InvoiceSlipId INT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                "	SELECT 	*,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "                WHEN a.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		) AS receivedStatusValue,  \n" +
                "		(  \n" +
                "			SELECT COUNT(id)  \n" +
                "			FROM packing_slip_material_receive_det_stock  \n" +
                "			WHERE refPackingSlipId = a.refPackingSlipMaterialRecID  \n" +
                "				AND partId = a.partID  \n" +
                "				AND packagingId = a.packagingID  \n" +
                "				AND binId = a.binID  \n" +
                "				AND isdeleted = 0  \n" +
                "                Limit 1  \n" +
                "		) AS isRMACreated,  \n" +
                "        (  \n" +
                "			CASE  \n" +
                "				WHEN a.TotalUMIDCount = a.orderedQty THEN TRUE  \n" +
                "				WHEN a.TotalUMIDCount <> a.orderedQty THEN  FALSE  \n" +
                "				ELSE False  \n" +
                "			END  \n" +
                "		) AS isPendingUMIDDisable  \n" +
                "	FROM 	(  \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
                "				p.invoicePrice, 				p.disputedPrice,  \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
                "				p.discount,  \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "				p.refCreditDebitInvoiceNo,  \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
                "				cmc.mfgCode,	fun_GetFormattedMfgCode(cmc.mfgCode, cmc.mfgName, vMfgCodeFormat) mfgName,  \n" +
                "                fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode1,  \n" +
                "                fun_GetFormattedMfgCode(scmc.mfgCode, scmc.mfgName, vMfgCodeFormat) supplierCode,  \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							p.receivedStatus  \n" +
                "						ELSE  \n" +
                "							(SELECT receivedStatus  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0 LIMIT 1)  \n" +
                "					END  \n" +
                "				) receivedStatus,  \n" +
                "				p.remark,  \n" +
                "				p.internalRemark,  \n" +
                "				p.comment,  \n" +
                "				p.internalRef,  \n" +
                "				p.purchaseInspectionComment,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
                "							WHERE EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det pslip  \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "											AND 	pslip.id = psmp.lineId  \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "											AND	pslip.isDeleted = 0)  \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS purchaseRequirementCount,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
                "							WHERE 	EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det psmr  \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "										AND	psmr.id = psm.lineId  \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "										AND 	psmr.isDeleted = 0  \n" +
                "									)  \n" +
                "								AND psm.inspectionStatus = 'R'  \n" +
                "								AND psm.isDeleted = 0  \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS rejectedPurchaseRequirementCount,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
                "				p.umidCreatedQty AS TotalUMIDCount,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
                "				ps.refInvoiceIdForMemo,  \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
                "				ps.refInvoiceNumberForMemo,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT `status`  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT refCreditDebitInvoiceNo  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceLineHasMemo,  \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
                "					AND pd.partId = p.partID) commentCount,  \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
                "				p.refPackingSlipIdForRma,  \n" +
                "				p.refPackingSlipDetIdForRMA,  \n" +
                "				p.refInvoiceIdForRma,  \n" +
                "				p.refPackingSlipForRma,  \n" +
                "				p.refInvoiceForRma,  \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.packingSlipNumber/*fun_getPackingSlipNumberById(p.refPackingSlipIdForRma)*/ ELSE p.refPackingSlipForRma END) refPackingSlipNumber,  \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE p.refInvoiceForRma END) refInvoiceNumber,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.mfgCodeID/*fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma)*/ ELSE NULL END) refPackingSlipSupplierId,  \n" +
                "                ps.packingSlipModeStatus,  \n" +
                "                fun_getBinNameByID(psd.binID) refPackingSlipBinName,  \n" +
                "                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty, p.totalLines, p.pendingLines, p.acceptedWithDeviationLines, p.rejectedLines, p.acceptedLines, c.isReceiveBulkItem,  \n" +
                "                p.isLineCustConsigned, p.isNonUMIDStock,  \n" +
                "                CASE WHEN p.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "                CASE WHEN p.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                p.LineCustomerID as lineCustomerID,  \n" +
                "				fun_GetFormattedMfgCode(mc.mfgcode, mc.mfgName, vMfgCodeFormat) customerName,  \n" +
                "                c.isCPN  \n" +
                "		FROM		packing_slip_material_receive_det p  \n" +
                "        JOIN 	packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
                "        LEFT JOIN	packing_slip_material_receive ps on ps.id = p.refPackingSlipIdForRma and ps.isDeleted = 0 and ps.receiptType = 'P'  \n" +
                "        LEFT JOIN	packing_slip_material_receive_det psd on psd.id = p.refPackingSlipDetIdForRMA and psd.isDeleted = 0  \n" +
                "		JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
                "        join mfgcodemst cmc ON cmc.id = c.mfgCodeID and cmc.mfgType = 'MFG' and cmc.isDeleted = 0  \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.mfgType = 'DIST'  \n" +
                "        left join mfgcodemst scmc ON scmc.id = sc.mfgCodeID and scmc.mfgType = 'DIST' and scmc.isDeleted = 0  \n" +
                "        LEFT JOIN	mfgcodemst mc  on mc.id = p.LineCustomerID  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
                "					FROM 	packing_slip_material_receive_det ps  \n" +
                "					WHERE 	ps.isDeleted = 0  \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
                "		LEFT JOIN 	(  \n" +
                "					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
                "					FROM 	packing_slip_material_receive_det det  \n" +
                "					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
                "		AND 		p.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
                "	SELECT /*ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID*/  \n" +
                "			psm.partID, psm.refPOLineID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty  \n" +
                "	  FROM packing_slip_material_receive_det psm  \n" +
                "	 INNER JOIN packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
                "	 WHERE EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
                "       AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
                "	   AND ps.receiptType = 'P'  \n" +
                "	   AND psm.isDeleted = 0  \n" +
                "	/*GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID*/  \n" +
                "     GROUP BY 	psm.partID, psm.refPOLineID;  \n" +
                "  \n" +
                "	-- Set received qty detail  \n" +
                "	UPDATE packingSlipResult r, tempReceivedQtyResult q  \n" +
                "	   SET r.totalReceivedQty = q.totalReceivedQty,  \n" +
                "			r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
                "	 WHERE r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
                "											invoiceTotalDue As invoiceTotalDue,  \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
                "										 where b.refPackingslipInvoiceID = c.id  \n" +
                "                                           and a.refPaymentMode = 'P'  \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(  \n" +
                "    IN pWhereClause VARCHAR(16383),  \n" +
                "    IN puserID VARCHAR(50),  \n" +
                "    IN pnickName VARCHAR(20),  \n" +
                "    IN pprefix VARCHAR(20),  \n" +
                "    IN pIsFromUID TINYINT,  \n" +
                "    IN pComponentID INT,  \n" +
                "    IN pCustomerID INT,  \n" +
                "    IN pCPN BOOL,  \n" +
                "    IN pMFGAvailabel BOOL,  \n" +
                "    IN pRefCpnMfgID INT,  \n" +
                "    IN pAssyID INT,  \n" +
                "    IN pSalesOrderDetailID INT,  \n" +
                "    IN pReceiveMaterialType VARCHAR(255),  \n" +
                "    IN pkitAssemblyID INT,  \n" +
                "    IN pBarcodeID INT,  \n" +
                "    IN pBOMLineID INT,  \n" +
                "    IN pSupplierID INT,  \n" +
                "    IN pCategory VARCHAR(2),  \n" +
                "    IN pInventoryType VARCHAR(2),  \n" +
                "    IN pCallFrom VARCHAR(50),  \n" +
                "    IN pExcludeStatus INT,  \n" +
                "    IN pBinID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "	DECLARE v_delimiter VARCHAR(10);  \n" +
                "	DECLARE v_length INT;  \n" +
                "	DECLARE v_fieldType INT;  \n" +
                "	DECLARE v_entityId INT;  \n" +
                "	DECLARE v_dataElementId INT;  \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);  \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);  \n" +
                "	DECLARE strLabel VARCHAR(2000);  \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);  \n" +
                "	DECLARE StaticField VARCHAR(100);  \n" +
                "	DECLARE DynamicField VARCHAR(100);  \n" +
                "	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';  \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');  \n" +
                "	DECLARE plen,slen INT;  \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;  \n" +
                "	DECLARE pbr_Separator VARCHAR(50);  \n" +
                "	DECLARE barcode_type_id INT;  \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);  \n" +
                "	DECLARE UpdateValue VARCHAR(16383);  \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';  \n" +
                "	DECLARE v_SupplierID INT;  \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);  \n" +
                "	DECLARE v_barcode_id INT;  \n" +
                "	DECLARE v_barcode_count INT;  \n" +
                "	DECLARE v_NumberOfPart INT;  \n" +
                "	DECLARE v_rfqLineItemsID INT;  \n" +
                "	DECLARE v_componentCount INT;  \n" +
                "	DECLARE v_componentId INT;  \n" +
                "	DECLARE v_mfgPartNO VARCHAR(100);  \n" +
                "	DECLARE v_partMFG INT;  \n" +
                "	DECLARE v_isGoodPart TINYINT;  \n" +
                "	DECLARE v_restrictUsePermanently TINYINT;  \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT;  \n" +
                "	DECLARE v_restrictUseInBOM TINYINT;  \n" +
                "	DECLARE v_isInstall TINYINT;  \n" +
                "	DECLARE v_isBOMLineClean TINYINT;  \n" +
                "	DECLARE v_BOMLineId INT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT;  \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;  \n" +
                "	DECLARE v_PIDCode VARCHAR(110);  \n" +
                "	DECLARE v_isPurchase TINYINT;  \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);  \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);  \n" +
                "	DECLARE v_BOMLineCount INT;  \n" +
                "	DECLARE v_AlternateLineId INT;  \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);  \n" +
                "	DECLARE v_BOMAssyId INT;  \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);  \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT;  \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT;  \n" +
                "	DECLARE v_isCPNFlag TINYINT;  \n" +
                "	DECLARE v_dateCodeFormatID INT;  \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);  \n" +
                "  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);  \n" +
                "	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;  \n" +
                "	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;  \n" +
                "	DECLARE v_MFRList VARCHAR(10000);  \n" +
                "	DECLARE v_barcode_status INT;  \n" +
                "	DECLARE v_category INT;  \n" +
                "	DECLARE v_partType INT;  \n" +
                "    DECLARE v_pendingPartCount INT;  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "	SET v_SupplierQuoteMFRIsNotCustomPart = 0;  \n" +
                "	SET v_MfrNotFoundForSupplierQuote = 0;  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error  \n" +
                "	(  \n" +
                "		errorText LONGTEXT,  \n" +
                "		IsSuccess VARCHAR (2),  \n" +
                "		MFGPart VARCHAR(10000)  \n" +
                "	);  \n" +
                "  \n" +
                "	/* Temp table for Packing Slip */  \n" +
                "	IF (pCategory = 'P') THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;  \n" +
                "		CREATE TEMPORARY TABLE temp_packing_slip_material_receive  \n" +
                "		(  \n" +
                "			scanlabel VARCHAR(1000),  \n" +
                "			poNumber VARCHAR(100),  \n" +
                "			supplierSONumber VARCHAR(100),  \n" +
                "			packingSlipNumber VARCHAR(50),  \n" +
                "			invoiceNumber VARCHAR(50)  \n" +
                "		);  \n" +
                "	ELSE /* Temp table for MFR */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;  \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock  \n" +
                "		(  \n" +
                "			refcompid INT,  \n" +
                "			pkgQty DECIMAL(18,6),  \n" +
                "			dateCode VARCHAR(10),  \n" +
                "			lotCode VARCHAR(255),  \n" +
                "			scanlabel VARCHAR(1000),  \n" +
                "			createdBy VARCHAR(255),  \n" +
                "			uid VARCHAR(14),  \n" +
                "			prefix VARCHAR(20),  \n" +
                "			nickName VARCHAR(50),  \n" +
                "			cpn TINYINT,  \n" +
                "			mfgAvailabel TINYINT,  \n" +
                "			refCPNMFGPNID INT,  \n" +
                "			customerID INT,  \n" +
                "			assyID INT,  \n" +
                "			receiveMaterialType VARCHAR(255),  \n" +
                "			refSupplierPartId INT,  \n" +
                "			mfrDateCode VARCHAR(50),  \n" +
                "			poNumber VARCHAR(50),  \n" +
                "			supplierSONumber VARCHAR(50),  \n" +
                "			packingSlipNumber VARCHAR(50),  \n" +
                "			invoiceNumber VARCHAR(50),  \n" +
                "			binName VARCHAR(100),  \n" +
                "			packaging VARCHAR(100),  \n" +
                "			packingSlipDetailNickname VARCHAR(50)  \n" +
                "		);  \n" +
                "  \n" +
                "		/* Temp table for data element value */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;  \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values  \n" +
                "		(  \n" +
                "			entityid INT,  \n" +
                "			dataelementid INT,  \n" +
                "			`value` LONGTEXT,  \n" +
                "			createdBy VARCHAR(255)  \n" +
                "		);  \n" +
                "    END IF;  \n" +
                "	-- get data from barcode templates with seprator  \n" +
                "	# return error code  \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found  \n" +
                "	# 0: Barcode template does not exist, Please add template  \n" +
                "	# 1: Validation Clear  \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component  \n" +
                "	# 3: Mfgcode is not found  \n" +
                "	# 4: MFG PN does not exist  \n" +
                "	# 5: Multiple MFG PN found  \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code  \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly  \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer  \n" +
                "	# 9:  Multiple barcode template found.  \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check  \n" +
                "	# 11: MFG PN is incorrect part  \n" +
                "	# 12: PID PID1 was restricted part at part master level.  \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.  \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.  \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.  \n" +
                "	# 17: PID is contain more than 1 BOM line.  \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.  \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.  \n" +
                "	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.  \n" +
                "	# 22: You cannot create UMID for assembly from Existing Stock.  \n" +
                "	# 23: In UMID Management screen not allow to scan which part's part type is Other  \n" +
                "    # 24: In UMID Management screen if pending stock is not exists for stockinventory NI then not allow to scan part  \n" +
                "    # 25: In UMID Management screen if pending stock PS status is Draft then not allow to scan part  \n" +
                "    # 24: In UMID Management screen if pending stock PS Line received status is Pending or Rejected then not allow to scan part  \n" +
                "  \n" +
                "	block1: BEGIN  \n" +
                "		SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");   \n" +
                "		IF (pBarcodeID IS NULL) THEN  \n" +
                "			/* Get barcode from labelstring */  \n" +
                "            SELECT COUNT(*) INTO v_barcode_count  \n" +
                "			  FROM br_label_template  \n" +
                "             WHERE isDeleted=0  \n" +
                "               AND barcodeCategory = pCategory  \n" +
                "               AND `status`=1  \n" +
                "               AND pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
                "  \n" +
                "			SELECT id, barcodeType, `name`, `status`  \n" +
                "              INTO v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status  \n" +
                "			  FROM br_label_template  \n" +
                "             WHERE isDeleted=0  \n" +
                "               AND barcodeCategory = pCategory  \n" +
                "               AND `status`=1  \n" +
                "               AND pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) limit 1;  \n" +
                "			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN  \n" +
                "				/* Get More than 1 barcode then give validation */  \n" +
                "				IF (v_barcode_count > 1) THEN  \n" +
                "					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
                "					('Multiple barcode template found.',9,@multiple_barcode_string);  \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				ELSE  \n" +
                "					SET pBarcodeID = v_barcode_id;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			/* Get data from barcode id */  \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* If data not get from barcode then concat none in label string find in table */  \n" +
                "		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN  \n" +
                "			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);  \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name  \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;  \n" +
                "			SET pBarcodeID = v_barcode_id;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */  \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID  \n" +
                "			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '2D';  \n" +
                "		ELSE /* barcode 1D */  \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template  \n" +
                "			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '1D';  \n" +
                "		END IF;  \n" +
                "	END block1;  \n" +
                "	/* If error is not found then continue else select error */  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "		block2: BEGIN  \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found  \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR  \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter  \n" +
                "				WHERE refbrID = pBarcodeID AND isDeleted = 0;  \n" +
                "			-- declare exit loop if data not found  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "			-- if any record match found than  check for delimiter and its value  \n" +
                "			IF (pbr_template_ID > 0) THEN  \n" +
                "				-- create temporary table for deliemeter and component dataelement  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(  \n" +
                "					pentityId INT,  \n" +
                "					pdataElementId INT,  \n" +
                "					pdelimiter_value VARCHAR(200)  \n" +
                "				);  \n" +
                "				-- create temporary table for separator string values  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;  \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));  \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string  \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength  \n" +
                "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;  \n" +
                "				-- open cursor  \n" +
                "				OPEN barcodeMatch_cursor;  \n" +
                "				-- set str label as whereclause  \n" +
                "				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter  \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");  \n" +
                "				-- if prefix is found than remove those from actual string match  \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN  \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));  \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));  \n" +
                "				 END IF;  \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match  \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN  \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
                "				 END IF;  \n" +
                "				-- insert all values after seprator split  \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");  \n" +
                "				PREPARE stmt1 FROM @SQL;  \n" +
                "				EXECUTE stmt1;  \n" +
                "				DEALLOCATE PREPARE stmt1;  \n" +
                "				IF (pCategory = 'P') THEN  \n" +
                "					-- create dynamic query to insert in packing slip  \n" +
                "					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';  \n" +
                "				ELSE  \n" +
                "					-- create dynamic query to insert in recieving material  \n" +
                "					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template  \n" +
                "				barcodeMatch_loop:LOOP  \n" +
                "					-- get all five selected values  \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;  \n" +
                "					-- exit loop if no record found for barcode match  \n" +
                "					IF exit_loop THEN  \n" +
                "						CLOSE barcodeMatch_cursor;  \n" +
                "						LEAVE barcodeMatch_loop;  \n" +
                "					END IF;  \n" +
                "					-- dynamic query to get dellimeter string with values from string  \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');  \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;  \n" +
                "					EXECUTE stmtdelimiter;  \n" +
                "					DEALLOCATE PREPARE stmtdelimiter;  \n" +
                "  \n" +
                "					-- get delimiter values from string  \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));  \n" +
                "					-- check for field type is static or dynamic  \n" +
                "					-- if static field than check for mfg code and mfg part number  \n" +
                "					IF v_fieldType = 0  THEN  \n" +
                "						-- component_sid_stock  \n" +
                "						-- get static field name from barcode table delimiter data element id  \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);  \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys  \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN  \n" +
                "							SET MFG_Part_No = delimiter_value_data;  \n" +
                "							/* If component id is not found */  \n" +
                "							IF(pComponentID = 0)  \n" +
                "                            THEN  \n" +
                "								/* Get component data */  \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;  \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS  \n" +
                "								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM  \n" +
                "								(  \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 	component c  \n" +
                "									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0    AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "									UNION  \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 		component_otherpn co  \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0  \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isGoodPart = 1 AND co.isDeleted = 0  \n" +
                "								) a  \n" +
                "								UNION  \n" +
                "								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM  \n" +
                "								(  \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 	component c  \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isDeleted = 0  \n" +
                "									UNION  \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 		component_otherpn co  \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID  \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  \n" +
                "                                    AND (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND co.isDeleted = 0 AND c.isDeleted = 0  \n" +
                "								) a  \n" +
                "								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;  \n" +
                "  \n" +
                "								IF (pSupplierID IS NOT NULL) THEN  \n" +
                "									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID  AND s.isCustMapping=0  \n" +
                "								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;  \n" +
                "								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail;  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  \n" +
                "								   ELSE  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;  \n" +
                "								END IF;  \n" +
                "  \n" +
                "								IF (v_componentCount > 1) THEN  \n" +
                "									/* If component is more that one then remove supplier from list */  \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;  \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS  \n" +
                "									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;  \n" +
                "  \n" +
                "									/* After remove supplier if get only one record then  */  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;  \n" +
                "									IF (v_componentCount < 2) THEN  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
                "										FROM 	temp_component_supplier_detail;  \n" +
                "									END IF;  \n" +
                "								ELSE  \n" +
                "									IF (pSupplierID IS NULL) THEN  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
                "										FROM 	temp_component_detail;  \n" +
                "									ELSE  \n" +
                "										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN  \n" +
                "											SET v_MfrNotFoundForSupplierQuote = 1;  \n" +
                "										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN  \n" +
                "											SET v_componentCount=0;  \n" +
                "											SET v_SupplierQuoteMFRIsNotCustomPart = 1;  \n" +
                "										ELSE  \n" +
                "											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
                "												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
                "											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);  \n" +
                "										END IF;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							ELSE  \n" +
                "								/* If component id is found */  \n" +
                "								SELECT 	COUNT(1), id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
                "									INTO v_componentCount, v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
                "								FROM 	component  \n" +
                "								WHERE 	id = pComponentID and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Remove from cursor if found more that one component */  \n" +
                "							IF v_componentCount > 1 THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* If inventory is opening inventory and type is assembly */  \n" +
                "							IF(pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* If bad part found */  \n" +
                "							IF (v_isGoodPart != 1) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check all type of restriction */  \n" +
                "							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check all type of restriction with packaging */  \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Barcode MFR and Part MFR mismatch */  \n" +
                "							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN  \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Found DIST then set id of MFR of that DIST */  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
                "							IF (@MFGType = 'DIST') THEN  \n" +
                "								SET v_SupplierID = v_componentId;  \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier and  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END);  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check kit allocation */  \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN  \n" +
                "								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */  \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId  \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	*  \n" +
                "										FROM  \n" +
                "											(  \n" +
                "												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId  \n" +
                "												FROM 		component_packagingalias cp  \n" +
                "												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid  \n" +
                "												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0  \n" +
                "												UNION  \n" +
                "												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
                "												FROM 		rfq_lineitems_alternatepart rla  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0  \n" +
                "												UNION  \n" +
                "												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
                "												FROM 		rfq_lineitems_alternatepart rla  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL  \n" +
                "												GROUP BY 	custPNID, rla.partID  \n" +
                "											) b  \n" +
                "										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)  \n" +
                "										GROUP BY b.lineID, b.assyId  \n" +
                "									) a;  \n" +
                "  \n" +
                "								/* BOM line not found  */  \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								/* Found More then one BOM line */  \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								ELSE  \n" +
                "									/* Restrict use bom */  \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN  \n" +
                "										CLOSE barcodeMatch_cursor;  \n" +
                "										LEAVE barcodeMatch_loop;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									/* BOM line contain any error */  \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;  \n" +
                "									IF (v_isBOMLineClean = 0) THEN  \n" +
                "										CLOSE barcodeMatch_cursor;  \n" +
                "										LEAVE barcodeMatch_loop;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "  \n" +
                "								/* Part not install, purchase and not dnp  */  \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Set dynamic query for component */  \n" +
                "							IF  v_componentCount = 1 THEN  \n" +
                "								IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
                "									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"');  \n" +
                "								ELSE  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
                "									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"');  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Not in use */  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys  \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for pkgQty */  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for lotcode */  \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for mfrdatecode and datecode */  \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN  \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);  \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');  \n" +
                "							ELSE  \n" +
                "								SET exit_loop = FALSE;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for binid */  \n" +
                "						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for packaging */  \n" +
                "						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for nickname */  \n" +
                "						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for po number */  \n" +
                "						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for so number */  \n" +
                "						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for packing slip number */  \n" +
                "						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for invoice number */  \n" +
                "						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "					ELSE  \n" +
                "						/* Set dynamic query for other than system generated */  \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE  \n" +
                "							dataElementID=v_dataElementId AND isDeleted = 0;  \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)  \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);  \n" +
                "					END IF;  \n" +
                "				END LOOP barcodeMatch_loop;  \n" +
                "  \n" +
                "				-- check if mfg and component both found than  \n" +
                "				IF v_componentCount = 0 AND pSupplierID IS NULL THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount > 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MPN found',5,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND pIsFromUID = 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
                "					IF (v_isGoodPart = 2) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
                "					ELSE  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);  \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "					IF (v_isCPNFlag = 1) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
                "					ELSE  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN or CPN is not found in bom of this assembly.',7,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);  \n" +
                "				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount = 1 AND  pInventoryType = 'NI' AND pIsFromUID = 1) THEN  \n" +
                "					SELECT COUNT(1) INTO v_pendingPartCount FROM vu_umid_creation_pending WHERE BalanceQty > 0 AND PartId = v_componentId AND BinID = pBinID;  \n" +
                "                    IF(v_pendingPartCount = 0) THEN  \n" +
                "						SELECT b.Name INTO @binName FROM binmst b WHERE b.id = pBinID;  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('<b>', v_PIDCode ,'</b> does not belong to the bin <b>', @binName ,'</b>. Review Pending UMID list should further investigation required.'),24,v_PIDCode);  \n" +
                "                    ELSEIF(v_pendingPartCount = 1) THEN  \n" +
                "						SELECT  ps.packingSlipModeStatus,  vu.receivedStatus, vu.packingSlipNumber, b.Name,  fun_getPackagingNameByID(vu.packagingID) AS packagingType  \n" +
                "								INTO @packingSlipModeStatus, @receivedStatus, @packingSlipNumber, @binName, @packagingType  \n" +
                "						FROM vu_umid_creation_pending vu  \n" +
                "                                INNER JOIN	packing_slip_material_receive ps on ps.id = vu.packingSlipID AND ps.isdeleted = 0  \n" +
                "                                INNER JOIN 	binmst b on b.id = vu.BinID AND b.isdeleted = 0  \n" +
                "								WHERE 		vu.BalanceQty > 0 AND vu.PartId = v_componentId AND vu.BinID = pBinID;  \n" +
                "						IF(@packingSlipModeStatus = 'D') THEN  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as packing slip# <b>', @packingSlipNumber ,'</b> is in <b>Draft</b> mode for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),25,v_PIDCode);  \n" +
                "                        ELSEIF(@receivedStatus = 'R' OR @receivedStatus = 'P') THEN  \n" +
                "							SET @receivedStatusValue = IF(@receivedStatus = 'P', 'Pending', 'Rejected');  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as line received status of packing slip# <b>', @packingSlipNumber ,'</b> is <b>',@receivedStatusValue,'</b> for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),26,v_PIDCode);  \n" +
                "                        END IF;  \n" +
                "                    END IF;  \n" +
                "                ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN  \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;  \n" +
                "					IF @Mfgmatched = 0  THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN are avialable but not matched in component',2,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSE  \n" +
                "					IF @mfgCount = 0 THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN  \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN is not Found',0,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				IF (pCPN = 1) THEN  \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;  \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;  \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				IF (pIsFromUID = 1) THEN  \n" +
                "					/* If not fire any validation */  \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "  \n" +
                "						-- must call statements in sequence  \n" +
                "						/* Add component sid stock in temp table of stock table and add in temp table */  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel );  \n" +
                "  \n" +
                "						IF (pprefix IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pprefix,'\"');  \n" +
                "                        END IF;  \n" +
                "  \n" +
                "						IF (pnickName IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET @sql2 = UpdateValue;  \n" +
                "						PREPARE stmt2 FROM @SQL2;  \n" +
                "						EXECUTE stmt2;  \n" +
                "						DEALLOCATE PREPARE stmt2;  \n" +
                "  \n" +
                "						/* Add success result in save error table */  \n" +
                "						IF (pkitAssemblyID IS NULL) THEN  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
                "						ELSE  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));  \n" +
                "						END IF;  \n" +
                "						/* Add data in table of delimeter table */  \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN  \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)  \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t;  \n" +
                "						END IF;  \n" +
                "						/* select detail of error table */  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "  \n" +
                "						/* select detail in temp table of component sid stock table  */  \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;  \n" +
                "						/* Select data of component */  \n" +
                "						SELECT 	c.*,  \n" +
                "							mg.mfgcode AS mfgCode,  \n" +
                "							mg.mfgName AS mfgName,  \n" +
                "                            fun_GetFormattedMfgCode(mg.mfgCode, mg.mfgName, v_mfgNameFormat) mfgCodeName,  \n" +
                "							cp.name AS packagingName,  \n" +
                "							cp.sourceName,  \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
                "							csup.packageQty AS supplierPkgQty,  \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
                "							csup.mfgcodeID AS supplierMfgId,  \n" +
                "							mcm.mfgcode AS supplierMFGCode,  \n" +
                "							mcm.mfgName AS supplierMFGName,  \n" +
                "                            fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, v_mfgNameFormat) supplierMFGCodeName,  \n" +
                "							csup.mfgPN AS supplierMFGPN,  \n" +
                "							csup.packagingID AS supplierPackagingId,  \n" +
                "                            csp.name AS supplierPackagingName,  \n" +
                "							csp.sourceName AS supplierSourceName,  \n" +
                "							csup.minimum AS supplierMinimum,  \n" +
                "							ccpn.id AS cpnID,  \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
                "							rfqroh.rohsIcon AS rohsIcon,  \n" +
                "							rfqroh.name AS rohsName,  \n" +
                "							rfqmou.name AS mountingTypeName,  \n" +
                "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
                "							um.unitName AS uomName,  \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
                "						FROM component AS c  \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
                "                        LEFT JOIN component_packagingmst cp on cp.id = c.packagingID AND cp.isdeleted = 0  \n" +
                "                        LEFT JOIN component_packagingmst csp on csp.id = csup.packagingID AND csp.isdeleted = 0  \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
                "						WHERE c.id = v_componentId;  \n" +
                "  \n" +
                "						/* select data of data element of component sid stock */  \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`  \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv  \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl  \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;  \n" +
                "						/* select data of cpn */  \n" +
                "						SELECT 	id, refComponentID, refCPNPartID  \n" +
                "						FROM 	component_cust_alias_rev_pn  \n" +
                "						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;  \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0  \n" +
                "						) AND isDeleted = 0;  \n" +
                "  \n" +
                "						/* select detail of bom */  \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,  \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN  \n" +
                "						FROM 		rfq_lineitems_alternatepart rla  \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                "						WHERE 		rla.isDeleted = 0  \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))  \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)  \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);  \n" +
                "  \n" +
                "					ELSE  \n" +
                "						/* Found any error then select error  */  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "					END IF;  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				ELSE  \n" +
                "					/* generate dynamic query and save in temp in case of packing slip */  \n" +
                "					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					/* Add success data in temp error table */  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
                "  \n" +
                "					/* Add success data in temp table for select in case of call from packing slip packing slip screen */  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "  \n" +
                "					/* In case of MPN then select recod of component and save in temp table in case of call from packing slip scrren */  \n" +
                "					IF (pCategory = 'M') THEN  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "						SELECT 	c.*,  \n" +
                "							fun_GetFormattedMfgCode(mg.mfgCode, mg.mfgName, v_mfgNameFormat) mfgCodeName,  \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
                "							csup.packageQty AS supplierPkgQty,  \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
                "							csup.mfgcodeID AS supplierMfgId,  \n" +
                "							mcm.mfgcode AS supplierMFGCode,  \n" +
                "							mcm.mfgName AS supplierMFGName,  \n" +
                "                            fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, v_mfgNameFormat) supplierMFGCodeName,  \n" +
                "							csup.packagingID AS supplierPackagingId,  \n" +
                "							csup.mfgPN AS supplierMFGPN,  \n" +
                "							csup.id AS supplierMFGPNID,  \n" +
                "							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,  \n" +
                "							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,  \n" +
                "							ccpn.id AS cpnID,  \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
                "							rfqroh.rohsIcon AS rohsIcon,  \n" +
                "							rfqroh.name AS rohsName,  \n" +
                "							rfqmou.name AS mountingTypeName,  \n" +
                "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
                "							um.unitName AS uomName,  \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
                "						FROM component AS c  \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
                "						WHERE c.id = v_componentId;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);  \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "				SELECT 1;  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "				SELECT 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END block2;  \n" +
                "	ELSE  \n" +
                "		IF (pIsFromUID = 1) THEN  \n" +
                "			SELECT * FROM tempUIDSuccessDetail;  \n" +
                "		ELSE  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "			SELECT 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5715,'2.00','V1','Bug 39653: MFR Code Data key not working as per selected value in Supplier Invoice to Payment flow - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5715:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-12-2021 *********************************** */
                "drop procedure if exists `Sproc_GetComponentMFGAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(  \n" +
                "	IN pGoodPart VARCHAR(100),  \n" +
                "	IN pSearch VARCHAR(500),  \n" +
                "	IN pId INT,  \n" +
                "	IN pMfgType VARCHAR(50),  \n" +
                "	IN pRoHSStatusID VARCHAR(100),  \n" +
                "	IN pMfgCodeId INT,  \n" +
                "	IN pMountingType VARCHAR(50),  \n" +
                "	IN pMountingTypeId INT,  \n" +
                "	IN pCategoryID INT,  \n" +
                "	IN pIsContainCPN TINYINT,  \n" +
                "	IN pRohsMainCategoryID INT,  \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
                "	IN prefSupplierMfgpnComponentID INT ,  \n" +
                "	IN ppackagingID INT,  \n" +
                "	IN pstrictCustomPart TINYINT,  \n" +
                "	IN psupplierID INT,  \n" +
                "    IN pPartType int,  \n" +
                "    IN pExcludeStatus INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vRohsMainCategoryID INT;  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "	 SET @SQLStatement1=CONCAT(\" SELECT *  \n" +
                "		FROM  \n" +
                "		(  \n" +
                "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,  \n" +
                "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,  \n" +
                "					c.mfgcodeID,          					c.rev,  \n" +
                "					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
                "                    fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') mfgCodeName,  \n" +
                "					c.category,								c.imageURL,						c.documentPath,  \n" +
                "					c.mfgPNDescription,				c.minOperatingTemp,				c.maxOperatingTemp,  \n" +
                "					c.value,								c.partPackage,					c.powerRating,  \n" +
                "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,  \n" +
                "					c.noOfPosition,							c.noOfRows,						c.pitch,  \n" +
                "					c.pitchMating,							c.length,						c.width,  \n" +
                "					c.height,								c.voltage,						c.weight,  \n" +
                "					c.feature,								c.color,						c.partStatus,  \n" +
                "					c.uom,									c.uomClassID,					c.unit,  \n" +
                "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,				u.unitName AS  unitName,  \n" +
                "					r.rohsIcon,								r.name AS rohsName,  \n" +
                "					c.partPackageID,						c.bomLock,						c.businessRisk,  \n" +
                "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,  \n" +
                "					c.eau,									c.epicorType,					c.functionalTestingRequired,  \n" +
                "					c.heightText,							c.isCPN,						c.isCustom,  \n" +
                "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,							c.minimum,						c.mult,  \n" +
                "					c.packageQty,							c.partType,						c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,  \n" +
                "					c.plannedValuePerBuild,					c.programingRequired,  \n" +
                "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,  \n" +
                "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,  \n" +
                "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,  \n" +
                "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \");  \n" +
                "  if  pId is not null then  \n" +
                "    		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND c.id = \" ,pId );  \n" +
                "    end if;  \n" +
                "  \n" +
                "    if  pMfgType is not null then  \n" +
                "    		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND m.mfgType = '\",pMfgType,\"' \");  \n" +
                "    end if;  \n" +
                "  \n" +
                "    if  pRoHSStatusID is not null then  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.RoHSStatusID = \", pRoHSStatusID );  \n" +
                "	 end if;  \n" +
                "	if  pMfgCodeId is not null then  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.mfgcodeID = \",pMfgCodeId );  \n" +
                "	 end if;  \n" +
                "	if  pMountingType is not null then  \n" +
                "    	SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND mt.name = '\",pMountingType,\"' \");  \n" +
                "	 end if;  \n" +
                "	if  pMountingTypeId is not null then  \n" +
                "				SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mountingTypeID = \",pMountingTypeId );  \n" +
                "	 end if;  \n" +
                "	if  pCategoryID is not null then  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.category = \", pCategoryID  );  \n" +
                "	 end if;  \n" +
                "	if  ifnull(pIsContainCPN,false) = false  then  \n" +
                "      #(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.isCPN = FALSE \");  \n" +
                "	 end if;  \n" +
                "	if  pRohsMainCategoryID is not null then  \n" +
                "		 SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
                "		/*===>this logic is added to compare invert rohs category*/  \n" +
                "		IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
                "			IF pRohsMainCategoryID = -1 THEN  \n" +
                "				SET vRohsMainCategoryID = -2;  \n" +
                "			ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
                "				SET vRohsMainCategoryID = -1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "        /*<===this logic is added to compare invert rohs category*/  \n" +
                "		#AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "   		if vRohsMainCategoryID is not null then  \n" +
                "        SET @SQLStatement1=CONCAT(@SQLStatement1,\" and  r.refMainCategoryID  = \",vRohsMainCategoryID );  \n" +
                "        end if;  \n" +
                "	 end if;  \n" +
                "	if  prefSupplierMfgpnComponentID is not null then  \n" +
                "    	#AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" c.refSupplierMfgpnComponentID <=> IFNULL(\",prefSupplierMfgpnComponentID,\", c.refSupplierMfgpnComponentID)  \");  \n" +
                "	 end if;  \n" +
                "	if  pPartType is not null then  \n" +
                "        #AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.partType = '\",pPartType,\"' \");  \n" +
                "	 end if;  \n" +
                "	if  ppackagingID is not null then  \n" +
                "    	#AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.packagingID <=> IFNULL(\",ppackagingID,\",c.packagingID) \");  \n" +
                "	 end if;  \n" +
                "	if  pstrictCustomPart is not null then  \n" +
                "			#AND c.category != 3  AND c.iscustom = 1  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.category != 3  AND c.iscustom = 1 \");  \n" +
                "	 end if;  \n" +
                "	if  psupplierID is not null and pstrictCustomPart  = 1 then  \n" +
                "		/* Old logic  \n" +
                "        (c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
                "									FROM supplier_mapping_mst smm  \n" +
                "									WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)  \n" +
                "			)  \n" +
                "        */  \n" +
                "        SET @SQLStatement1=CONCAT(@SQLStatement1,\"  AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
                "																			FROM supplier_mapping_mst smm  \n" +
                "																			WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(\",psupplierID,\",smm.supplierID)  \n" +
                "																		union all /*get mfg which set as company*/  \n" +
                "																		SELECT mc.id  \n" +
                "																				FROM mfgcodemst mc  \n" +
                "																				WHERE mc.iscompany = 1 AND mc.isdeleted = 0  \n" +
                "																		union all /* get All Customer code */  \n" +
                "																		SELECT mc.id  \n" +
                "																				FROM mfgcodemst mc  \n" +
                "																				WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0  \n" +
                "																		)  \");  \n" +
                "	 end if;  \n" +
                "	if  pExcludeStatus is not null then  \n" +
                "    #AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.partStatus != '\",pExcludeStatus,\"' \");  \n" +
                "	 end if;  \n" +
                "     /*Close Inner query section */  \n" +
                "     SET @SQLStatement1=CONCAT(@SQLStatement1,\" ) AS a  where 1= 1 \");  \n" +
                "  \n" +
                "     if  pSearch is not null then  \n" +
                "     /* old query(  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                "													WHERE opn.refcomponentid = a.id  \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)  \n" +
                "		)  \n" +
                "     */  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and  exists ( select 1 from ( select a.id, a.mfgpn name from dual  \n" +
                "																					union all  \n" +
                "																					select opn.refcomponentid ,opn.name from component_otherpn opn where opn.refcomponentid = a.id  \n" +
                "																				) x where x.id  = a.id and x.name  LIKE CONCAT('%\", pSearch , \"%')  ) \");  \n" +
                "	 end if;  \n" +
                "  \n" +
                "     	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ORDER BY mfgPN For update\");  \n" +
                "  -- select @SQLStatement1;  \n" +
                "     PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    /* this logic used in purchase order when supplier is strictly custom part */  \n" +
                "   /*  \n" +
                "	IF(pstrictCustomPart = 1)THEN  \n" +
                "		SELECT *  \n" +
                "		FROM  \n" +
                "		(  \n" +
                "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,  \n" +
                "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,  \n" +
                "					c.mfgcodeID,          					c.rev,  \n" +
                "					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
                "					c.category,								c.imageURL,						c.documentPath,  \n" +
                "					c.mfgPNDescription,						c.minOperatingTemp,				c.maxOperatingTemp,  \n" +
                "					c.value,								c.partPackage,					c.powerRating,  \n" +
                "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,  \n" +
                "					c.noOfPosition,							c.noOfRows,						c.pitch,  \n" +
                "					c.pitchMating,							c.length,						c.width,  \n" +
                "					c.height,								c.voltage,						c.weight,  \n" +
                "					c.feature,								c.color,						c.partStatus,  \n" +
                "					c.uom,									c.uomClassID,					c.unit,  \n" +
                "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,				u.unitName AS  unitName,  \n" +
                "					r.rohsIcon,								r.name AS rohsName,  \n" +
                "					c.partPackageID,						c.bomLock,						c.businessRisk,  \n" +
                "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,  \n" +
                "					c.eau,									c.epicorType,					c.functionalTestingRequired,  \n" +
                "					c.heightText,							c.isCPN,						c.isCustom,  \n" +
                "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,							c.minimum,						c.mult,  \n" +
                "					c.packageQty,							c.partType,						c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,  \n" +
                "					c.plannedValuePerBuild,					c.programingRequired,  \n" +
                "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,  \n" +
                "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,  \n" +
                "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,  \n" +
                "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "			AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
                "									FROM supplier_mapping_mst smm  \n" +
                "									WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)  \n" +
                "			)  \n" +
                "			AND c.category != 3  \n" +
                "			AND c.iscustom = 1  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                "													WHERE opn.refcomponentid = a.id  \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "  \n" +
                "	ELSEIF(pMountingType IS NOT NULL AND pstrictCustomPart = 0) THEN  */  \n" +
                "	/* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
                "    Reports, Price Break Update, Customer Part, Good-Bad Mapping Part, Supplier Quote, Supplier RMA */  \n" +
                "	/*	SELECT * FROM  \n" +
                "		(  \n" +
                "			 SELECT c.id,							CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN, 					c.packaginggroupID, 					c.PIDCode,  \n" +
                "					c.isGoodPart, 						c.RoHSStatusID, 						c.rohsgroupID,  \n" +
                "					c.mfgcodeID,					    c.rev,  \n" +
                "					m.mfgCode, 							m.mfgType,								m.mfgName,  \n" +
                "					c.category,							c.imageURL,								c.documentPath,  \n" +
                "					c.mfgPNDescription,					c.minOperatingTemp,        				c.maxOperatingTemp,  \n" +
                "					c.value,							c.partPackage,							c.powerRating,  \n" +
                "					c.functionalCategoryID,         	c.mountingTypeID,						c.connecterTypeID,  \n" +
                "					c.noOfPosition,        				c.noOfRows,								c.pitch,  \n" +
                "					c.pitchMating,        				c.length,								c.width,  \n" +
                "					c.height,        					c.voltage,								c.weight,  \n" +
                "					c.feature,        					c.color,								c.partStatus,  \n" +
                "					c.uom,					        	c.uomClassID,							c.unit,  \n" +
                "					c.restrictUsePermanently,			c.restrictUSEwithpermission,			c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,			u.unitName AS  unitName,  \n" +
                "					r.rohsIcon,							r.name AS rohsName,  \n" +
                "					c.partPackageID,        			c.bomLock,								c.businessRisk,  \n" +
                "					c.costCategoryID,					c.deviceMarking,						c.driverToolRequired,  \n" +
                "					c.eau,								c.epicorType,							c.functionalTestingRequired,  \n" +
                "					c.heightText,						c.isCPN,								c.isCustom,  \n" +
                "					c.leadTime,							c.matingPartRquired,					c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,						c.minimum,								c.mult,  \n" +
                "					c.packageQty,						c.partType,								c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,				c.plannedOverRunPercentagePerBuild, 	c.plannedValuePerBuild,  \n" +
                "					c.programingRequired,				c.rfqOnly,								c.saftyStock,  \n" +
                "					c.scrapRatePercentagePerBuild, 		c.scrapValuePerBuild,					c.selfLifeDays,  \n" +
                "					c.shelfListDaysThresholdPercentage, c.temperatureCoefficient,				c.temperatureCoefficientUnit,  \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,					c.refSupplierMfgpnComponentID,  \n" +
                "					c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName, 	vu.mfgPN supplierPartMfgPn, 			vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,        			c.isNoClean,        					c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 				c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND (m.isdeleted = 0 AND  m.mfgType = IFNULL(pMfgType, m.mfgType))  \n" +
                "			JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND mt.name = pMountingType  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND		c.id = IFNULL(pId, c.id) AND c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                "													WHERE opn.refcomponentid = a.id  \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "  \n" +
                "	ELSE  */  \n" +
                "	  /* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
                "	  Reports,  Price Break Update,  Customer Part,  Good-Bad Mapping Part,  Supplier Quote,  Supplier RMAb*/  \n" +
                "  /*  \n" +
                "		select *  \n" +
                "		from  \n" +
                "		(  \n" +
                "			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,			c.packaginggroupID,					c.PIDCode,  \n" +
                "					c.isGoodPart,				c.RoHSStatusID,						c.rohsgroupID,  \n" +
                "					c.mfgcodeID,          		c.rev,  \n" +
                "					m.mfgCode,					m.mfgName,							m.mfgType,  \n" +
                "					c.tolerance,				c.category,							c.imageURL,  \n" +
                "					c.documentPath,				c.mfgPNDescription,					c.minOperatingTemp,  \n" +
                "					c.maxOperatingTemp,			c.value,							c.partPackage,  \n" +
                "					c.powerRating,				c.functionalCategoryID,				c.mountingTypeID,  \n" +
                "					c.connecterTypeID,			c.noOfPosition,           	 		c.noOfRows,  \n" +
                "					c.pitch,            		c.pitchMating,            			c.length,  \n" +
                "					c.width,            		c.height,							c.voltage,  \n" +
                "					c.weight,            		c.feature,            				c.color,  \n" +
                "					c.partStatus,            	c.uom,            					c.uomClassID,  \n" +
                "					c.unit,            			c.restrictUsePermanently,			c.restrictUSEwithpermission,  \n" +
                "					c.restrictPackagingUsePermanently,								c.restrictPackagingUseWithpermission,  \n" +
                "					c.packagingID,				c.packaging,  \n" +
                "					u.abbreviation AS uomName,	u.unitName AS unitName,  \n" +
                "					r.rohsIcon,					r.name AS rohsName,  \n" +
                "					c.partPackageID,			c.bomLock,							c.businessRisk,  \n" +
                "					c.costCategoryID,			c.deviceMarking,					c.driverToolRequired,  \n" +
                "					c.eau,						c.epicorType,						c.functionalTestingRequired,  \n" +
                "					c.heightText,				c.isCPN,							c.isCustom,  \n" +
                "					c.leadTime,            		c.matingPartRquired,				c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,           	c.minimum,							c.mult,  \n" +
                "					c.packageQty,            	c.partType,							c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,		c.plannedOverRunPercentagePerBuild, c.plannedValuePerBuild,  \n" +
                "					c.programingRequired,		c.rfqOnly,							c.saftyStock,  \n" +
                "					c.scrapRatePercentagePerBuild,		c.scrapValuePerBuild,		c.selfLifeDays,  \n" +
                "					c.shelfListDaysThresholdPercentage,	c.temperatureCoefficient,	c.temperatureCoefficientUnit,  \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,		c.refSupplierMfgpnComponentID,  \n" +
                "					c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,  \n" +
                "					vu.mfgPN supplierPartMfgPn,  \n" +
                "					vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,			c.isNoClean,						c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,		c.isHazmatMaterial, 				c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,		c.isReceiveBulkItem  \n" +
                "			from component c  \n" +
                "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "			INNER JOIN uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID = IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID, c.packagingID)  \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN = c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "			AND 	(CASE WHEN pstrictCustomPart = 0 THEN c.iscustom = 0 ELSE 1 = 1 END)  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND  \n" +
                "					(  \n" +
                "						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
                "						EXISTS( SELECT  1  \n" +
                "								FROM 	component_otherpn opn  \n" +
                "								WHERE 	opn.refcomponentid = a.id  \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
                "					)  \n" +
                "				)  \n" +
                "			)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "	END IF;   */  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_RetriveSupplierRMAList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierRMAList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchNumbers VARCHAR(50),  \n" +
                "	IN pSearchType VARCHAR(10),  \n" +
                "	IN pMfrPnId INT,  \n" +
                "     IN pRMAFromDate DATE,  \n" +
                "    IN pRMAToDate DATE ,  \n" +
                "    IN pPostingStatus VARCHAR(50),  \n" +
                "    IN pLockStatusFilter VARCHAR(20),  \n" +
                "    IN pRMAComments VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pAdvanceSearchNumbers IS NOT NULL) THEN  \n" +
                "		IF (pSearchType = 'contains') THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "												rmaNumber LIKE '%\", pAdvanceSearchNumbers, \"%'  \n" +
                "											OR 	packingSlipNumber LIKE '%\", pAdvanceSearchNumbers, \"%'  \n" +
                "											OR 	refCreditMemoNumber LIKE '%\", pAdvanceSearchNumbers, \"%'\"  \n" +
                "										  \" )  \n" +
                "									\");  \n" +
                "		ELSE  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "												rmaNumber = '\", pAdvanceSearchNumbers, \"'  \n" +
                "											OR 	packingSlipNumber = '\", pAdvanceSearchNumbers, \"'  \n" +
                "											OR 	refCreditMemoNumber = '\", pAdvanceSearchNumbers, \"'\"  \n" +
                "										  \" )  \n" +
                "									\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF pRMAFromDate IS NOT NULL AND pRMAToDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (rmaDate BETWEEN '\",pRMAFromDate,\"' AND '\",pRMAToDate,\"')\");  \n" +
                "	ELSEIF pRMAFromDate IS NOT NULL THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (rmaDate = '\",pRMAFromDate,\"')\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" and lockStatus IN (\", pLockStatusFilter ,\")\");  \n" +
                "	END IF;  \n" +
                "	IF(pPostingStatus IS NOT NULL)THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" and rmaModeStatus IN (\", pPostingStatus,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pRMAComments IS NOT NULL AND pRMAComments != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \"  \n" +
                "				AND (internalRemark LIKE '%\",pRMAComments,\"%'  \n" +
                "                OR remark LIKE '%\",pRMAComments,\"%')  \n" +
                "                \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierRMAList = CONCAT(\"  \n" +
                "		SELECT	*  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		p.id,  \n" +
                "						p.systemId,  \n" +
                "						p.receiptType,  \n" +
                "						p.packingSlipModeStatus rmaModeStatus,  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "								WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
                "								WHEN p.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "								ELSE NULL  \n" +
                "							END  \n" +
                "						) rmaModeStatusValue,  \n" +
                "						p.`status`,  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN p.status = 'D' THEN 'Draft'  \n" +
                "								WHEN p.status = 'WS' THEN 'Waiting For Shipment'  \n" +
                "								WHEN p.status = 'WC' THEN 'Waiting for Credit Memo'  \n" +
                "								WHEN p.status = 'CR' THEN 'Credit Memo Received'  \n" +
                "								WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "                                WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
                "								WHEN p.status = 'P' THEN 'Paid'  \n" +
                "								ELSE NULL  \n" +
                "							END  \n" +
                "						) statusValue,  \n" +
                "						p.mfgCodeID,  \n" +
                "						m.mfgCode supplierCode,  \n" +
                "						fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') supplierCodeName,  \n" +
                "						p.poNumber rmaNumber,  \n" +
                "						p.poDate rmaDate,  \n" +
                "						p.packingSlipNumber,  \n" +
                "						p.packingSlipDate,  \n" +
                "						p.receiptDate shippedDate,  \n" +
                "						IFNULL(g.cnt,0) rmaDocCount,  \n" +
                "						psm.totalDetailLine itemReturn,  \n" +
                "						ps.id refCreditMemoId,  \n" +
                "						ps.creditMemoNumber refCreditMemoNumber,  \n" +
                "                        ps.lockStatus  refCreditMemoLockStatus,  \n" +
                "						ps.creditMemoDate refCreditMemoDate,  \n" +
                "						p.remark,  \n" +
                "						p.internalRemark,  \n" +
                "						p.shippingMethodId,  \n" +
                "						fun_getGenericCategoryCodeNameByID(p.shippingMethodId) shippingMethod,  \n" +
                "						p.carrierId,  \n" +
                "						fun_getGenericCategoryCodeNameByID(p.carrierId) carrier,  \n" +
                "						p.carrierAccountNumber,  \n" +
                "						p.shippingInsurance,  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN p.shippingInsurance = 1 THEN 'Yes'  \n" +
                "								WHEN p.shippingInsurance = 0 THEN 'No'  \n" +
                "								ELSE NULL  \n" +
                "							END  \n" +
                "						) shippingInsuranceValue,  \n" +
                "						p.rmaShippingAddress,  \n" +
                "						fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "						fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "						fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "						fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                        p.lockStatus,  \n" +
                "						(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "							when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "							when p.lockStatus = 'LC' then 'Locked'  \n" +
                "							else null end  \n" +
                "						) lockStatusValue,  \n" +
                "						fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "						fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "				FROM 		packing_slip_material_receive p  \n" +
                "                join mfgcodemst m ON m.id = p.mfgCodeID and m.mfgType = 'DIST' and m.isDeleted = 0  \n" +
                "				LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "				LEFT JOIN 	(  \n" +
                "							SELECT 		refPackingSlipMaterialRecID, COUNT(1) totalDetailLine  \n" +
                "							FROM 		packing_slip_material_receive_det psm  \n" +
                "							WHERE 		isDeleted = 0  \n" +
                "							GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "						) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "				LEFT JOIN vu_genericfilescount g ON g.refTransID = p.id  \n" +
                "						AND	g.gencFileOwnerType = 'supplier_rma' AND g.refTransID = p.id  \n" +
                "				WHERE 		p.receiptType = 'R' AND p.isDeleted = 0  \n" +
                "			) AS a  \n" +
                "		WHERE \", v_advanceFilterWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1=1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetriveSupplierRMAList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveSupplierRMAList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5716,'2.00','V1','Bug 39653: MFR Code Data key not working as per selected value in Supplier Invoice to Payment flow - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5716:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_GetManufacturerWithFormattedCodeList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturerWithFormattedCodeList`(  \n" +
                "	IN pMfgType varchar(10),  \n" +
                "    IN pIsCodeFirst TINYINT,  \n" +
                "    IN pIsPricingApi TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "        select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "		SELECT fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) mfgCodeName,  \n" +
                "				m.mfgCode, m.id, m.mfgType, m.mfgName, m.isCustOrDisty, m.isCompany, m.displayOrder  \n" +
                "		 FROM mfgCodemst AS m  \n" +
                "		 WHERE m.mfgType = pMfgType  \n" +
                "		 and m.isdeleted = 0  \n" +
                "		 AND m.isPricingApi  = ifnull(pIsPricingApi,m.isPricingApi)  \n" +
                "		 ORDER BY m.displayOrder IS NULL, m.displayOrder ASC, mfgCodeName ASC;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5717,'2.00','V1','Bug 39653: MFR Code Data key not working as per selected value in Supplier Invoice to Payment flow - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5717:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentProgressiveFilters`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentProgressiveFilters`(  \n" +
                "IN pMfgType varchar(10),  \n" +
                "IN pIsCodeFirst TINYINT(1),  \n" +
                "IN pExcludeSupplier varchar(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    -- Manufacure List  \n" +
                "	select  \n" +
                "			fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, vMfgCodeFormat) mfgCodeName  \n" +
                "				,m.mfgCode, m.id, m.mfgType, m.mfgName, m.isCustOrDisty, m.isCompany, m.displayOrder  \n" +
                "		 FROM mfgCodemst AS m  \n" +
                "		 WHERE m.mfgType = 'MFG'  \n" +
                "		 and m.isdeleted = 0  \n" +
                "		 ORDER BY m.displayOrder IS NULL, m.displayOrder ASC, mfgCodeName ASC;  \n" +
                "  \n" +
                "	-- Supplier List  \n" +
                "	IF(pExcludeSupplier = 0)  \n" +
                "    THEN  \n" +
                "		select  \n" +
                "			fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, vMfgCodeFormat) mfgCodeName  \n" +
                "            ,m.mfgCode, m.id, m.mfgType, m.mfgName, m.isCustOrDisty, m.isCompany, m.displayOrder  \n" +
                "		 FROM mfgCodemst AS m  \n" +
                "		 WHERE m.mfgType = 'DIST'  \n" +
                "		 and m.isdeleted = 0  \n" +
                "		 ORDER BY m.displayOrder IS NULL, m.displayOrder ASC, mfgCodeName ASC;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    -- Part Status List  \n" +
                "    SELECT id, name, isActive, colorCode  \n" +
                "		FROM component_partstatusmst cp  \n" +
                "		WHERE  cp.isdeleted = 0  \n" +
                "	ORDER BY cp.displayOrder ASC, cp.name ASC;  \n" +
                "  \n" +
                "    -- Packaging List  \n" +
                "   SELECT id, name as `value`, name, isActive  \n" +
                "		FROM component_packagingmst AS cpm  \n" +
                "	WHERE cpm.isDeleted = 0  \n" +
                "    ORDER BY cpm.displayOrder ASC, cpm.name ASC;  \n" +
                "	-- Functional Type List  \n" +
                "	select id, partTypeName, isActive, isTemperatureSensitive  \n" +
                "    from rfq_parttypemst  \n" +
                "    where isDeleted = 0  \n" +
                "	order by displayOrder is null , displayOrder, partTypeName;  \n" +
                "  \n" +
                "    -- External Function Type  \n" +
                "    select alias functionalCategoryText  \n" +
                "		 from component_fields_genericalias_mst  \n" +
                "		where refTableName = 'rfq_parttypemst'  \n" +
                "		  and isDeleted = 0  \n" +
                "		order by alias;  \n" +
                "  \n" +
                "	-- External Mounting Type  \n" +
                "	select alias mountingTypeText  \n" +
                "		 from component_fields_genericalias_mst  \n" +
                "		where refTableName = 'rfq_mountingtypemst'  \n" +
                "		  and isDeleted = 0  \n" +
                "		order by alias;  \n" +
                "  \n" +
                "	-- External ROHS Type  \n" +
                "	select alias rohsText  \n" +
                "		 from component_fields_genericalias_mst  \n" +
                "		where refTableName = 'rfq_rohsmst'  \n" +
                "		  and isDeleted = 0  \n" +
                "		order by alias;  \n" +
                "  \n" +
                "	-- Package/Case(Shape) Type List  \n" +
                "	SELECT id, name as `value`, name, isActive, isXrayRequired  \n" +
                "		FROM rfq_packagecasetypemst AS rpc  \n" +
                "    WHERE isDeleted = 0  \n" +
                "    ORDER BY name ASC;  \n" +
                "  \n" +
                "	-- Mounting Type List  \n" +
                "	SELECT id, name, isActive, colorCode, isCountTypeEach  \n" +
                "    FROM rfq_mountingtypemst  \n" +
                "    WHERE isDeleted = 0  \n" +
                "    ORDER BY ISNULL(displayOrder), displayOrder ASC, name ASC;  \n" +
                "  \n" +
                "    -- ROHS Type List  \n" +
                "    SELECT id, name as `value`, name, description, isActive, systemGenerated  \n" +
                "    ,rohsIcon, refMainCategoryID, displayOrder, refParentID  \n" +
                "    FROM rfq_rohsmst  \n" +
                "    WHERE isDeleted = 0  \n" +
                "    ORDER BY ISNULL(displayOrder), displayOrder ASC, name ASC;  \n" +
                "  \n" +
                "    -- Part Type List  \n" +
                "	SELECT id, categoryName as `Value`, categoryName, colorCode, partCategory, epicorType  \n" +
                "    FROM rfq_partcategory  \n" +
                "    WHERE isDeleted = 0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5718,'2.00','V1',' Bug 39758: MFR Code Data key not working as per selected value in Part Master - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5718:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-12-2021 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveMasterTemplate`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveMasterTemplate`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN poperationIds VARCHAR(16383),  \n" +
                "	IN pdescription VARCHAR(2000),  \n" +
                "	IN pfilterStatus VARCHAR(255)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	        DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	        SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	        SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SET @SQL = NULL;  \n" +
                "  \n" +
                "  		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  		IF(poperationIds IS NULL OR poperationIds = '') THEN  \n" +
                "			SET poperationIds = 'operationId' ;  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND operaionExists = 1 ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pdescription IS NOT NULL AND  pdescription != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND description LIKE '%\",pdescription,\"%' \");  \n" +
                "		END IF;  \n" +
                "		IF(pfilterStatus IS NOT NULL AND  pfilterStatus != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND masterTemplateStatusText IN ('\",pfilterStatus,\"') \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"  \n" +
                "			 select * from (SELECT mt.id,mt.masterTemplate,mt.description,mt.isActive,mt.isMasterTemplate,mt.masterTemplateStatus, mt.systemGenerated,  \n" +
                "				fun_getUserNameByID(mt.updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(mt.createdBy) createdby,  \n" +
                "				fun_getRoleByID(mt.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(mt.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(mt.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(mt.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                (CASE WHEN (mt.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (mt.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,  \n" +
                "				(CASE WHEN (`mt`.`isMasterTemplate` = 0) THEN 'No'  \n" +
                "					WHEN (`mt`.`isMasterTemplate` = 1) THEN 'Yes' ELSE '' END) AS `isMasterTemplateValue`,  \n" +
                "			   (SELECT COUNT(*) FROM operation_master_templates WHERE deletedAt IS NULL AND masterTemplateID = mt.id  \n" +
                "				AND operationId IN (SELECT opID FROM operations WHERE deletedAt IS NULL)) AS operationCount /* 1 - published op */  ,  \n" +
                "				fun_getGenericStatusNameByID(masterTemplateStatus) AS `masterTemplateStatusText`,  \n" +
                "                Exists (SELECT 1 FROM operation_master_templates omt where omt.masterTemplateId = mt.id AND omt.operationId in (\",poperationIds,\") AND omt.`isActive`= 1 AND omt.`deletedAt` IS NULL) as operaionExists  \n" +
                "			FROM master_templates mt  \n" +
                "			WHERE mt.`deletedAt` IS NULL) a  where 1=1  \n" +
                "		\");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY masterTemplate ASC\" ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		 /* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveMasterTemplate,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveMasterTemplate,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 31-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5719,'2.00','V1',' Task 40079: Add Description and Status Advanced filter on Operation template Page. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5719:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-12-2021 *********************************** */
                "drop procedure if exists `Sproc_GetAllSupplierMemoListForRefund`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllSupplierMemoListForRefund`(  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentID INT,  \n" +
                "    IN pIsVoidAndReissuePayment tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vIsPaymentVoided tinyint;  \n" +
                "    DECLARE vMfgCodeID int;  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE v_mfgNameFormat int;  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "	if pPaymentID is not null then  \n" +
                "		SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "		SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		select isPaymentVoided, mfgCodeID into vIsPaymentVoided, vMfgCodeID  \n" +
                "          from packingslip_invoice_payment x  \n" +
                "         where x.id = pPaymentID;  \n" +
                "  \n" +
                "        if pIsVoidAndReissuePayment = 1 then  \n" +
                "			set vIsPaymentVoided = true;  \n" +
                "		end if;  \n" +
                "  \n" +
                "		select true isSelected, a.*, (a.markedForRefundAmt - a.totalRefundAmount) balanceToRefundAmt  \n" +
                "			  from (select pid.id, a.systemId, a.receiptType, a.id refPackingslipInvoiceID,  \n" +
                "							case when a.receiptType = 'C' then 'Credit Memo'  \n" +
                "								when a.receiptType = 'D' then 'Debit Memo'  \n" +
                "									else '' end memoType,  \n" +
                "							case when a.receiptType = 'C' then a.creditMemoNumber  \n" +
                "								when a.receiptType = 'D' then a.debitMemoNumber  \n" +
                "									else '' end memoNumber,  \n" +
                "							case when a.receiptType = 'C' then a.creditMemoDate  \n" +
                "								when a.receiptType = 'D' then a.debitMemoDate  \n" +
                "									else '' end memoDate,  \n" +
                "							a.markedForRefundAmt,  \n" +
                "							get_totalSupplierInvoiceRefundAmountById(a.id) totalRefundAmount,  \n" +
                "                            paymentAmount paymentAmountForSelectedInvoice  \n" +
                "					  from packing_slip_material_receive a  \n" +
                "					  JOIN packingslip_invoice_payment_det pid ON pid.refPackingslipInvoiceID = a.id  \n" +
                "					 where a.receiptType in ('C','D')  \n" +
                "					   and a.mfgCodeID = vMfgCodeID  \n" +
                "					   and pid.refPayementid = pPaymentID  \n" +
                "					   and exists (SELECT 1 FROM packingslip_invoice_payment X WHERE x.id = pid.refPayementid AND x.refPaymentMode = 'RR')  \n" +
                "					   and a.markedForRefund = 1  \n" +
                "					   and a.isDeleted = 0  \n" +
                "                       and pid.isDeleted = 0) a  \n" +
                "		union all  \n" +
                "		select false isSelected, a.*, (a.markedForRefundAmt - a.totalRefundAmount) balanceToRefundAmt  \n" +
                "			  from (select null id, a.systemId, a.receiptType, a.id refPackingslipInvoiceID,  \n" +
                "							case when a.receiptType = 'C' then 'Credit Memo'  \n" +
                "								when a.receiptType = 'D' then 'Debit Memo'  \n" +
                "									else '' end memoType,  \n" +
                "							case when a.receiptType = 'C' then a.creditMemoNumber  \n" +
                "								when a.receiptType = 'D' then a.debitMemoNumber  \n" +
                "									else '' end memoNumber,  \n" +
                "							case when a.receiptType = 'C' then a.creditMemoDate  \n" +
                "								when a.receiptType = 'D' then a.debitMemoDate  \n" +
                "									else '' end memoDate,  \n" +
                "							a.markedForRefundAmt,  \n" +
                "							get_totalSupplierInvoiceRefundAmountById(a.id) totalRefundAmount,  \n" +
                "                            0 paymentAmountForSelectedInvoice  \n" +
                "					  from packing_slip_material_receive a  \n" +
                "					 where a.receiptType in ('C','D')  \n" +
                "					   and a.mfgCodeID = vMfgCodeID  \n" +
                "					   and not exists (select 1  \n" +
                "										 from packingslip_invoice_payment x  \n" +
                "										 join packingslip_invoice_payment_det pid ON pid.refPayementid = x.id  \n" +
                "										where pid.refPackingslipInvoiceID = a.id  \n" +
                "										  AND x.refPaymentMode = 'RR'  \n" +
                "										  and x.isPaymentVoided = 0  \n" +
                "                                          and x.isDeleted = 0  \n" +
                "                                          and pid.isDeleted=0)  \n" +
                "					   and a.markedForRefund = 1  \n" +
                "					   /*bellow case added to ignore new rows if payment is voided*/  \n" +
                "					   and case when vIsPaymentVoided = 0 then  \n" +
                "									1=1  \n" +
                "								when vIsPaymentVoided = 1 then  \n" +
                "									1=2  \n" +
                "								end  \n" +
                "					   and a.isDeleted = 0) a  \n" +
                "					 where (a.markedForRefundAmt - a.totalRefundAmount) != 0;  \n" +
                "		select p.id, p.systemId, p.mfgcodeID, fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) mfgName,  \n" +
                "				p.paymentNumber, p.paymentDate, p.paymentAmount, p.paymentType, p.accountReference, p.bankAccountMasID, p.bankAccountNo,  \n" +
                "                p.bankName, p.remark, p.isPaymentVoided, p.voidPaymentReason, p.refVoidedPaymentNumber, p.refVoidedPaymentId, p.refPaymentMode,  \n" +
                "                p.documentPath, p.depositBatchNumber, p.offsetAmount, p.refGencTransModeID, p.acctId,  \n" +
                "                p.lockStatus, fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) lockedAt,  \n" +
                "                g.modeName as transactionModeName  \n" +
                "		 from packingslip_invoice_payment p  \n" +
                "         join mfgcodemst m ON m.id = p.mfgcodeID  \n" +
                "         join generic_transmode_mst g on g.id = p.refGencTransModeID and g.modeType = 'RR'  \n" +
                "		where p.id = pPaymentID;  \n" +
                "    else  \n" +
                "		select a.*, (a.markedForRefundAmt - a.totalRefundAmount) balanceToRefundAmt  \n" +
                "		  from (select null id, a.systemId, a.receiptType, a.id refPackingslipInvoiceID,  \n" +
                "						case when a.receiptType = 'C' then 'Credit Memo'  \n" +
                "							when a.receiptType = 'D' then 'Debit Memo'  \n" +
                "								else '' end memoType,  \n" +
                "						case when a.receiptType = 'C' then a.creditMemoNumber  \n" +
                "							when a.receiptType = 'D' then a.debitMemoNumber  \n" +
                "								else '' end memoNumber,  \n" +
                "						case when a.receiptType = 'C' then a.creditMemoDate  \n" +
                "							when a.receiptType = 'D' then a.debitMemoDate  \n" +
                "								else '' end memoDate,  \n" +
                "						a.markedForRefundAmt,  \n" +
                "						get_totalSupplierInvoiceRefundAmountById(a.id) totalRefundAmount  \n" +
                "				  from packing_slip_material_receive a  \n" +
                "				 where a.receiptType in ('C','D')  \n" +
                "                   and a.mfgCodeID = pMfgcodeID  \n" +
                "				   and a.markedForRefund = 1  \n" +
                "				   and a.isDeleted = 0) a  \n" +
                "				 where (a.markedForRefundAmt - a.totalRefundAmount) != 0;  \n" +
                "	end if;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5720,'2.00','V1','Bug 39653: MFR Code Data key not working as per selected value in Supplier Invoice to Payment flow - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5720:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderSummaryDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderSummaryDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "	IN ppostatus VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN pLockFilterStatus VARCHAR(50),  \n" +
                "    IN pPoPostingStatusFilter VARCHAR(20),  \n" +
                "    IN pPOComments VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(\"  \n" +
                "    SELECT (CASE WHEN(IFNULL((a.poCompletedLine * 100 / a.totalPOLines), 0)) > 100 THEN 100 ELSE IFNULL(round((a.poCompletedLine * 100 / a.totalPOLines), 2), 0) END) poCompletionPercentage, a.* FROM  \n" +
                "		( SELECT  pom.id,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.poDate,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				pom.termsID,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pom.status,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pom.serialNumber,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.carrierID,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				CASE WHEN pom.shippingInsurance=0 THEN 'No' ELSE 'Yes' END shippingInsuranceName,  \n" +
                "				pom.shippingInsurance,  \n" +
                "				pom.supplierAddress,  \n" +
                "				pom.shippingAddress,  \n" +
                "				pom.intermediateAddress,  \n" +
                "				CASE WHEN pom.isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPO,  \n" +
                "				pom.isBlanketPO,  \n" +
                "				m.mfgcode,  \n" +
                "				pom.poCompleteReason,  \n" +
                "				pom.poCompleteType,  \n" +
                "				pom.cancleReason,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				pom.poWorkingStatus,  \n" +
                "                pom.CancellationConfirmed,  \n" +
                "                CASE WHEN pom.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END CancellationConfirmedStatus,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='C') poCompletedLine,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='P') poPendingLine,  \n" +
                "				case when pom.poWorkingStatus='P' then 'In Progress' when  pom.poWorkingStatus='C' then 'Completed' else 'Canceled' end workingStatusName,  \n" +
                "				IFNULL(vgf.cnt, 0) poDocumentCount,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType!=4 and pod.refPurchaseOrderID=pom.id) totalItems,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType=4 and pod.refPurchaseOrderID=pom.id) totalOtherItems,  \n" +
                "				fun_getFOBById(pom.freeOnBoardId) freeOnBoard,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				(select sum((pod.qty * pod.price)+ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)) from purchase_order_det pod where pod.refPurchaseOrderID=pom.id and pod.isdeleted=0) totalAmount,  \n" +
                "				fun_getUserNameByID(pom.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pom.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pom.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pom.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "	            pom.isdeleted,  \n" +
                "                (SELECT COUNT(1) FROM purchase_order_det pod WHERE pod.isdeleted=0 and pod.refPurchaseOrderID=pom.id) totalPOLines,  \n" +
                "                (select id from packing_slip_material_receive where refPurchaseOrderID=pom.id and isdeleted=false order by receiptDate desc limit 1) packingSlipId,  \n" +
                "                ps.packingSlip,  \n" +
                "                ps.MaterialReceiptNumber,  \n" +
                "                pom.isCustConsigned,  \n" +
                "                CASE WHEN pom.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "                pom.customerID,  \n" +
                "                fun_GetFormattedMfgCode(pm.mfgcode, pm.mfgName, \",vMfgCodeFormat,\") customerName,  \n" +
                "                pom.isNonUMIDStock,  \n" +
                "                CASE WHEN pom.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                pom.lockStatus,  \n" +
                "				(case when pom.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "					when pom.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "					when pom.lockStatus = 'LC' then 'Locked'  \n" +
                "					else null end  \n" +
                "				) lockStatusValue,  \n" +
                "				fun_getUserNameByID(pom.lockedBy) lockByName,  \n" +
                "				fun_getRoleByID(pom.lockedByRoleId) lockedByRoleName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM purchase_order_mst pom JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0  \n" +
                "        LEFT JOIN LATERAL (SELECT id, refPurchaseOrderID FROM packing_slip_material_receive WHERE refPurchaseOrderID=pom.id AND isDeleted=0 LIMIT 1) AS psmr ON psmr.refPurchaseOrderID=pom.id  \n" +
                "		LEFT JOIN vu_genericfilescount vgf ON vgf.entityID = -20 AND vgf.refTransID = pom.id  \n" +
                "        LEFT JOIN mfgcodemst pm ON pm.id=pom.customerID and pm.isdeleted = 0  \n" +
                "         LEFT JOIN (select group_concat(distinct psmr.id, '@@@', psmr.packingSlipNumber order by psmr.packingSlipDate desc separator '\",v_GroupConcatSeparator,\"') as packingSlip,  \n" +
                "						group_concat(distinct psmr.packingSlipNumber order by psmr.packingSlipDate desc separator ', ') MaterialReceiptNumber,  \n" +
                "						psmr.refPurchaseOrderID  \n" +
                "                        from packing_slip_material_receive psmr  \n" +
                "						where psmr.receiptType='P' and psmr.isDeleted=false group by psmr.refPurchaseOrderID  \n" +
                "					) ps on ps.refPurchaseOrderID = pom.id ) a  \n" +
                "		WHERE a.isdeleted=0  \n" +
                "	\");  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and a.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and a.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (a.soNumber  like ''%',psearchposotext,'%'' OR a.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (a.soNumber  =''',psearchposotext,''' OR a.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pPOComments IS NOT NULL AND pPOComments != '')THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, \"  \n" +
                "				AND (a.shippingComment LIKE '%\",pPOComments,\"%'  \n" +
                "                OR a.poComment LIKE '%\",pPOComments,\"%')  \n" +
                "                \");  \n" +
                "    END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate  BETWEEN ''',pfromDate,''' AND ''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate = ''',pfromDate,''')');  \n" +
                "	END IF;  \n" +
                "    IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and a.poWorkingStatus IN (\", ppostatus ,\")\");  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' AND exists (select 1 from purchase_order_det pod where pod.refPurchaseOrderID = a.id and pod.isDeleted = 0 and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,')))');  \n" +
                "	END IF;  \n" +
                "    IF(pLockFilterStatus IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and a.lockStatus IN (\", pLockFilterStatus ,\")\");  \n" +
                "	END IF;  \n" +
                "    IF(pPoPostingStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and a.status = '\", pPoPostingStatusFilter ,\"'\");  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "    SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "    IN ppolinestatus VARCHAR(10),  \n" +
                "	IN ppostatus VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN ponlyOtherPart boolean,  \n" +
                "    IN pwithoutOtherPart boolean,  \n" +
                "    IN pisonlyPendingLines boolean,  \n" +
                "    IN pPOComments VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"  \n" +
                "		SELECT (CASE WHEN(IFNULL((a.totalReceivedQty * 100 / a.qty), 0)) > 100 THEN 100 ELSE IFNULL(round((a.totalReceivedQty * 100 / a.qty), 2), 0) END) poLineCompletionPercentage, a.* from  \n" +
                "		(SELECT  pod.id,  \n" +
                "				pom.id as refPurchaseOrderID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pod.mfgPartID,  \n" +
                "				pod.packagingID,  \n" +
                "				pod.supplierPartID,  \n" +
                "				pod.partDescription,  \n" +
                "				pod.pcbPerArray,  \n" +
                "				pod.rohsStatusID,  \n" +
                "				pod.internalRef,  \n" +
                "				pod.qty,  \n" +
                "				pod.price,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				(pod.qty * pod.price) extPrice,  \n" +
                "				pod.totalRelease,  \n" +
                "				pod.lineComment,  \n" +
                "				pod.lineID,  \n" +
                "				pod.supplierQuoteNumber,  \n" +
                "				pom.poDate,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				c.mfgPN,  \n" +
                "				c.pidCode,  \n" +
                "				c.unit,  \n" +
                "				c.iscustom,  \n" +
                "				c.partType,  \n" +
                "				rr.name AS rohsName,  \n" +
                "				rr.rohsIcon,  \n" +
                "				cp.name AS packagingName,  \n" +
                "				mc.mfgCode,  \n" +
                "				mc.mfgName,  \n" +
                "				mc.id As mfgcodeID,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.status,  \n" +
                "				pom.carrierID,  \n" +
                "				pom.poWorkingStatus,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Closed' else IFNULL(vups.poLineWorkingDisplayStatus,'Open') end poLineWorkingDisplayStatus,  \n" +
                "                case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatusDisplayStatus,  \n" +
                "				vups.totalReceivedQty,  \n" +
                "				vups.totalPendingQty,  \n" +
                "				vups.poLineCompleteReason,  \n" +
                "				case when c.partType=4 and pom.poWorkingStatus='C' then 'Auto' else  vups.poLineCompleteType end poCompleteType,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				sc.mfgPN supplierPN,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.termsID,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pod.internalLineComment,  \n" +
                "				m.mfgcode as supplierMfgName,  \n" +
                "				fun_getOtherChargesByPurchaseOrderDetID(pod.id) otherExpense,  \n" +
                "				(SELECT GROUP_CONCAT(polr.instruction SEPARATOR  '<br/>') FROM purchase_order_line_requirement_det polr WHERE polr.refPurchaseOrderDetID=pod.id AND polr.isDeleted=0) purchaseRequirement,  \n" +
                "				(ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)+(pod.qty * pod.price)) totalExtPrice,  \n" +
                "				fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, \",vMfgCodeFormat,\") mfgcodeName,  \n" +
                "				fun_getUserNameByID(pod.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pod.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pod.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pod.updateByRoleId) updatedbyRole,  \n" +
                "				(select pold.shippingDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) shipDate,  \n" +
                "				(select pold.promisedShipDate from purchase_order_line_release_det pold where pold.refPurchaseOrderDetID=pod.id AND pold.isDeleted=0 limit 1) promisedShipDate,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, FALSE) packingSlipDate,  \n" +
                "				fun_getLatestPackingSlipDateByPOId(pod.id, TRUE) packingSlipId,  \n" +
                "                c.custAssyPN ,  \n" +
                "                ps.packingSlip,  \n" +
                "                pod.isdeleted,  \n" +
                "                case when c.partType=4 and pom.poWorkingStatus='C' then 'C' else IFNULL(vups.poLineWorkingStatus,'P') end poLineWorkingStatus,  \n" +
                "                ps.MaterialReceiptNumber,  \n" +
                "                pod.isLineCustConsigned,  \n" +
                "                CASE WHEN pod.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "                pod.lineCustomerID,  \n" +
                "                fun_GetFormattedMfgCode(pm.mfgCode, pm.mfgName, \",vMfgCodeFormat,\") customerName,  \n" +
                "                m.mfgName as POSupplierName,  \n" +
                "                pod.isNonUMIDStock,  \n" +
                "                CASE WHEN pod.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                pom.lockStatus  \n" +
                "		FROM purchase_order_det pod  \n" +
                "		LEFT JOIN purchase_order_mst pom  ON pom.id=pod.refPurchaseOrderID and  pom.isdeleted=0  \n" +
                "		LEFT JOIN vu_purchaseorder_shipping_release vups on vups.refPurchaseOrderDetID= pod.id  \n" +
                "		LEFT JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN component c ON c.id=pod.mfgPartID  \n" +
                "		LEFT JOIN component sc on sc.id=pod.supplierPartID  \n" +
                "		LEFT JOIN mfgcodemst mc ON mc.id=c.mfgcodeID  \n" +
                "        LEFT JOIN mfgcodemst pm ON pm.id=pod.lineCustomerID  \n" +
                "		LEFT JOIN rfq_rohsmst rr ON rr.id=pod.rohsStatusID  \n" +
                "		LEFT JOIN component_packagingmst cp ON cp.id=pod.packagingID  \n" +
                "        LEFT JOIN (select group_concat(distinct psmr.id, '@@@', psmr.packingSlipNumber order by psmr.packingSlipDate desc separator '\",v_GroupConcatSeparator,\"') as packingSlip,  \n" +
                "						group_concat(distinct psmr.packingSlipNumber order by psmr.packingSlipDate desc separator ', ') as MaterialReceiptNumber,  \n" +
                "                        psmr.refPurchaseOrderID, psmrd.refPurchaseOrderDetID  \n" +
                "                        from packing_slip_material_receive psmr  \n" +
                "							join packing_slip_material_receive_det psmrd  \n" +
                "								on psmrd.refPackingSlipMaterialRecID=psmr.id and psmrd.isDeleted=false  \n" +
                "						where psmr.receiptType='P' and psmr.isDeleted=false group by psmr.refPurchaseOrderID, psmrd.refPurchaseOrderDetID  \n" +
                "					) ps on ps.refPurchaseOrderID = pom.id and ps.refPurchaseOrderDetID=pod.id ) a  \n" +
                "		WHERE a.isdeleted=0  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  like ''%',psearchposotext,'%'' OR a.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.soNumber  =''',psearchposotext,''' OR a.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate BETWEEN ''',pfromDate,''' AND ''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (a.poDate =''',pfromDate,''')');  \n" +
                "	END IF;  \n" +
                "    IF(ppolinestatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" and a.poLineWorkingStatus = '\", ppolinestatus ,\"'\");  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" and a.poWorkingStatus IN (\", ppostatus ,\")\");  \n" +
                "	END IF;  \n" +
                "    IF(pPOComments IS NOT NULL AND pPOComments != '')THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, \"  \n" +
                "				AND (a.shippingComment LIKE '%\",pPOComments,\"%'  \n" +
                "                OR a.partDescription LIKE '%\",pPOComments,\"%'  \n" +
                "                OR a.internalLineComment LIKE '%\",pPOComments,\"%'  \n" +
                "                OR a.lineComment LIKE '%\",pPOComments,\"%'  \n" +
                "                OR a.poComment LIKE '%\",pPOComments,\"%')  \n" +
                "                \");  \n" +
                "    END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (a.mfgPartID in (',ppartIds,') OR a.supplierPartID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "    IF(pwithoutOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType!=4');  \n" +
                "	END IF;  \n" +
                "    IF(ponlyOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.partType=4');  \n" +
                "	END IF;  \n" +
                "	IF(pisonlyPendingLines=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and a.poLineWorkingStatus=\"P\"');  \n" +
                "	END IF;  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5721,'2.00','V1',' Bug 40078: QA Testing for advance filter findings of PO and RMA Pages - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5721:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetManufacturer`;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturer`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	-- IN pIsMFG TINYINT(1),  \n" +
                "	IN pmfgType VARCHAR(20),  \n" +
                "	IN pisCustOrDisty TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(\"  \n" +
                "  \n" +
                "       SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,mc.legalName,mc.customerType, (case when  mc.customerType='B'  then 'Broker' when   mc.customerType='E' then 'End Customer'  else '' end) as customerTypeName,  \n" +
                "       (CASE WHEN (mc.isPricingApi = 1 OR mc.systemGenerated = 1) THEN 1 ELSE 0 END) isDisabledDelete, mc.isPricingApi , mc.systemGenerated,fun_getDateCodeFormatById(mc.dateCodeFormatID) dateCodeFormat,  \n" +
                "		fun_getUserNameByEmployeID(mc.salesCommissionTo) salesCommissionTo,  \n" +
                "		mc.isSupplierEnable,  \n" +
                "		mc.externalSupplierOrder,  \n" +
                "		mc.systemID,mc.customerSystemID,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.carrierID) carrierName,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmaCarrierID) rmacarrierName,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmashippingMethodId) rmaShippingName,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.shippingMethodId) ShippingName,  \n" +
                "		mc.carrierAccount,mc.rmaCarrierAccount,case when mc.shippingInsurence =1 then 'Yes' else 'No' end shippingInsuranceName,  \n" +
                "	        case when mc.rmaShippingInsurence =1 then 'Yes' else 'No' end rmashippingInsuranceName,  \n" +
                "	        case when mc.isPricingApi =1 and mc.isSupplierEnable=1 then 'Yes' else 'No' end supplierEnableText,  \n" +
                "	        mc.shippingInsurence, mc.rmaShippingInsurence,  \n" +
                "		fun_getUserNameByID(mc.updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(mc.createdBy) createdby,  \n" +
                "		fun_getRoleByID(mc.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(mc.updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		smm.mappingMfr,  \n" +
                "        cmm.customerMapping,  \n" +
                "       CASE WHEN mc.authorizeType=1 THEN 'Authorized'  \n" +
                "            WHEN mc.authorizeType=2 THEN 'Independent'  \n" +
                "            WHEN mc.authorizeType=3 THEN 'Authorized & Independent'  \n" +
                "            ELSE '' END   authorizeTypeTxt,mc.authorizeType,  \n" +
                "		     wbw.buyBy,wbw.buyDate,wbw.description,wbw.id AS `acquiredID`,  \n" +
                "            wbw.acquired,  \n" +
                "		(SELECT GROUP_CONCAT(CONCAT(alias, '@@@',fun_getMappingManufacturerCount(id),  \n" +
                "        '@@@',fun_getUserNameByID(createdBy),  \n" +
                "        '@@@',fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"')  \n" +
                "        ) SEPARATOR '!!!!')  FROM mfgcodealias  \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist  ,  \n" +
                "		mc.primaryContactName, mc.email , mc.website, mc.contact, mc.comments , mc.phExtension,  \n" +
                "		mc.contactCountryCode,mc.faxNumber, mc.faxCountryCode,mc.isActive, mc.isCompany,  \n" +
                "        (CASE WHEN (mc.`isCompany` = 0) THEN 'No'  \n" +
                "				WHEN (mc.`isCompany` = 1) THEN 'Yes' ELSE '' END) AS `isCompanyConvertedValue`,  \n" +
                "		(CASE WHEN (mc.systemGenerated = 0) THEN 'No'  \n" +
                "				WHEN (mc.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,  \n" +
                "		(CASE WHEN (mc.`isActive` = 0) THEN 'Inactive'  \n" +
                "				WHEN (mc.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`  \n" +
                "		 ,gc.gencCategoryName,  \n" +
                "		 CASE WHEN mc.isCustOrDisty = 1 THEN 'Both'  \n" +
                "			WHEN mc.isCustOrDisty = 0 OR mc.isCustOrDisty IS NULL THEN 'Manufacturer Only'  \n" +
                "		END AS isCustOrDistyText,  \n" +
                "        mc.displayOrder,  \n" +
                "        mc.invoicesRequireManagementApproval,  \n" +
                "        (CASE WHEN (mc.invoicesRequireManagementApproval = 0) THEN 'No'  \n" +
                "				WHEN (mc.invoicesRequireManagementApproval = 1) THEN 'Yes' ELSE '' END) AS `invoicesRequireManagementApprovalValue`,  \n" +
                "		mc.taxID,  \n" +
                "        mc.accountRef,  \n" +
                "        mc.paymentMethodID,  \n" +
                "		pc.gencCategoryName paymentMethodName,  \n" +
                "        pc.systemGenerated systemGeneratedPaymentMethod  ,  \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS ChartOfAccounts,  \n" +
                "		mc.acctId  \n" +
                "	FROM mfgcodemst mc  \n" +
                "    LEFT JOIN  \n" +
                "		(SELECT supplierid,GROUP_CONCAT(fun_getMfgCodeAndNameByID(smm.refmfgcodemstid) SEPARATOR '##$$') mappingmfr  \n" +
                "				FROM supplier_mapping_mst smm inner join mfgcodemst mfg on smm.refmfgcodemstid = mfg.id  where  smm.isCustMapping=0 and smm.isDeleted= 0  \n" +
                "		group by supplierid)smm on smm.supplierid=mc.id  \n" +
                "	LEFT JOIN  \n" +
                "		(SELECT supplierid,GROUP_CONCAT(fun_getMfgCodeAndNameByID(smm.refmfgcodemstid) SEPARATOR '##$$') customerMapping  \n" +
                "				FROM supplier_mapping_mst smm inner join mfgcodemst mfg on smm.refmfgcodemstid = mfg.id  where  smm.isCustMapping=1 and smm.isDeleted= 0  \n" +
                "			group by supplierid) cmm on cmm.supplierid=mc.id  \n" +
                "    LEFT JOIN acct_acctmst aam ON aam.acct_id = mc.acctId AND aam.isDeleted=0  \n" +
                "    LEFT JOIN genericcategory gc ON gc.gencCategoryID = mc.paymentTermsID AND gc.isDeleted = 0  \n" +
                "    LEFT JOIN genericcategory pc ON pc.gencCategoryID = mc.paymentMethodID AND pc.isDeleted = 0  \n" +
                "	LEFT JOIN (SELECT wbwi.buyBy,wbwi.buyDate,wbwi.description,wbwi.id , wbwi.buyTo ,  \n" +
                "				CONCAT('(', mci.mfgcode,')' , ' ' ,mci.mfgName ) AS `acquired`  \n" +
                "			FROM  who_bought_who wbwi  \n" +
                "            JOIN mfgcodemst mci ON wbwi.buyBy = mci.id  \n" +
                "            AND wbwi.isDeleted = 0) wbw  \n" +
                "			ON wbw.buyTo = mc.id  \n" +
                "	WHERE mc.isdeleted = 0  \n" +
                "	AND mc.mfgType = '\", pmfgType , \"' \");  \n" +
                "  \n" +
                "	IF(pisCustOrDisty IS NOT NULL OR pisCustOrDisty != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(@temp_Sproc_RetriveWhereUsedComponents,\" and mc.isCustOrDisty = \",pisCustOrDisty);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" ,\"displayOrder IS NULL, displayOrder ASC ,mfgName ASC\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetriveWhereUsedComponents,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveWhereUsedComponents,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	 PREPARE query1 FROM @SQLStatement2;  \n" +
                "	 EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 03-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5722,'2.00','V1',' Bug 39728: QA Testing findings for MFGCodeNameFormat datakeys configuration in Manufacturer, Customer and Supplier masters - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5722:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentNoneProgressiveFilters`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentNoneProgressiveFilters`(  \n" +
                "IN pMfgType varchar(10),  \n" +
                "IN pIsCodeFirst TINYINT(1),  \n" +
                "IN pDisApprovedMFG varchar(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    -- Assembly Type List  \n" +
                "	SELECT id, name, isActive, noOfSide  \n" +
                "		FROM rfq_assy_typemst AS RFQAssyTypeMst  \n" +
                "	WHERE isdeleted = 0  \n" +
                "    ORDER BY ISNULL(displayOrder), displayOrder ASC, name ASC;  \n" +
                "  \n" +
                "    -- Acceptable Shipping Country  \n" +
                "    SELECT countryID, countryName, isActive  \n" +
                "		FROM countryMst  \n" +
                "	WHERE isDeleted = 0  \n" +
                "    ORDER BY ISNULL(displayOrder), displayOrder ASC, countryName ASC;  \n" +
                "  \n" +
                "    -- Operational Attribute  \n" +
                "    SELECT id, attributeName, fieldType, defaultValue, icon, description, isActive  \n" +
                "    FROM component_dynamic_attribute  \n" +
                "    WHERE isDeleted = 0  \n" +
                "    ORDER BY ISNULL(displayOrder), displayOrder ASC, attributeName ASC;  \n" +
                "	-- Standards  \n" +
                "	select * from  \n" +
                "		(  \n" +
                "			select certificateStandardID, fullName, displayOrder  \n" +
                "			from certificate_standards where isDeleted = 0  \n" +
                "			UNION  \n" +
                "			select concat(cs.certificateStandardID,':',sc.classID) as certificateStandardID,  \n" +
                "			concat(cs.fullName,':',sc.className ) as fullName, cs.displayOrder  \n" +
                "			from standard_class sc join certificate_standards cs on sc.certificateStandardID = cs.certificateStandardID and cs.isDeleted = 0  \n" +
                "			where sc.isDeleted = 0  \n" +
                "		) as a order by (a.displayOrder IS NULL), a.displayOrder,a.fullName;  \n" +
                "  \n" +
                "	-- DisApproved Supplier/MFG Type List  \n" +
                "    select fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, vMfgCodeFormat) mfgCodeName  \n" +
                "				,m.mfgCode, m.id, m.mfgType, m.mfgName, m.isCustOrDisty, m.isCompany, m.displayOrder  \n" +
                "	FROM mfgCodemst AS m  \n" +
                "	WHERE m.mfgType = pDisApprovedMFG  \n" +
                "	and m.isdeleted = 0  \n" +
                "	ORDER BY m.displayOrder IS NULL, m.displayOrder ASC, mfgCodeName ASC;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetComponentPackagingAliasGroup`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentPackagingAliasGroup`(  \n" +
                "    IN pPartId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET @temp_Sproc_GetComponentPackagingAliasGroup= CONCAT(\"select a.* from (SELECT  \n" +
                "							cpa.id,  \n" +
                "							co.id as componentID,  \n" +
                "							cpa.aliasgroupID,  \n" +
                "							co.id AS partID,  \n" +
                "							co.mfgPN AS mfgPN,  \n" +
                "							co.isCustom AS isCustom,  \n" +
                "							co.mfgType,  \n" +
                "							m.id AS mfgCodeID,  \n" +
                "							m.mfgCode AS mfgCode  \n" +
                "						FROM  \n" +
                "							component AS co  \n" +
                "								LEFT OUTER JOIN  \n" +
                "							component_packagingalias  \n" +
                "							 AS cpa ON cpa.componentID = co.id  \n" +
                "								AND (cpa.isDeleted = FALSE )  \n" +
                "								LEFT OUTER JOIN  \n" +
                "							mfgCodemst AS m ON co.mfgcodeID = m.id  \n" +
                "								AND m.isDeleted = FALSE  \n" +
                "							where co.isDeleted = 0 and  \n" +
                "                             cpa.aliasgroupID = (select packaginggroupID from component c where c.id = \",pPartId,\")  \n" +
                "                           and co.id != \",pPartId,\") as a\");  \n" +
                "  \n" +
                "		PREPARE query1 FROM @temp_Sproc_GetComponentPackagingAliasGroup;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_RetriveWhereUsedComponentsOther`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveWhereUsedComponentsOther`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pPartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS componentWhereUsedOther;  \n" +
                "    CREATE TEMPORARY TABLE componentWhereUsedOther AS  \n" +
                "    select ca.id, ca.id rfqLineItemsID, c.mfgPN, c.PIDCode, c.nickName, c.id partID, c.custAssyPN, c.rev, c.liveVersion,  \n" +
                "			m.id MID, 		m.mfgCode,		m.mfgType,  \n" +
                "            fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) mfrCode,  \n" +
                "			c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,  \n" +
                "			ro.rohsIcon,	ro.name rohsName,  \n" +
                "			case when ca.Type=1 then  \n" +
                "					'Alternate Parts'  \n" +
                "				  when ca.Type=2 then  \n" +
                "					'Pickup Pad'  \n" +
                "				  when ca.Type=3 then  \n" +
                "					'Program'  \n" +
                "				  when ca.Type=4 then  \n" +
                "					'Functional Testing Tools'  \n" +
                "				  when ca.Type=5 then  \n" +
                "					'Require Mating Parts'  \n" +
                "					end whereUsed,  \n" +
                "			case when ca.Type=1 then  \n" +
                "					1  \n" +
                "				  when ca.Type=2 then  \n" +
                "					7  \n" +
                "				  when ca.Type=4 then  \n" +
                "					8  \n" +
                "				  when ca.Type=5 then  \n" +
                "					6  \n" +
                "					end whereUsedOrder,  \n" +
                "			false isBOM,  \n" +
                "            c.isCustom,  \n" +
                "            c.mfgcodeID,  \n" +
                "			c.mfgPNDescription,  \n" +
                "			c.isGoodPart,  \n" +
                "            c.restrictUsePermanently,  \n" +
                "			c.restrictUSEwithpermission,  \n" +
                "			c.restrictPackagingUsePermanently,  \n" +
                "			c.restrictPackagingUseWithpermission  \n" +
                "		from component_alternatepn ca  \n" +
                "		join component c ON c.id = ca.refComponentID  \n" +
                "		JOIN mfgCodemst AS m ON c.mfgcodeID = m.id  \n" +
                "		JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "	  where ca.componentID = pPartID  \n" +
                "         and ca.isDeleted = 0  \n" +
                "         and c.isDeleted = 0  \n" +
                "		 union all  \n" +
                "		 select cp.id, cp.id rfqLineItemsID, c.mfgPN, c.PIDCode, c.nickName, c.id partID,  c.custAssyPN, c.rev, c.liveVersion,  \n" +
                "				m.id MID, 		m.mfgCode,		m.mfgType,  \n" +
                "                fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) mfrCode,  \n" +
                "				c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,  \n" +
                "				ro.rohsIcon,  \n" +
                "				ro.name rohsName,  \n" +
                "				'Process Material' whereUsed,  \n" +
                "                4 whereUsedOrder,  \n" +
                "				false isBOM,  \n" +
                "				c.isCustom,  \n" +
                "			c.mfgPNDescription,  \n" +
                "			c.isGoodPart,  \n" +
                "            c.mfgcodeID,  \n" +
                "            c.restrictUsePermanently,  \n" +
                "			c.restrictUSEwithpermission,  \n" +
                "			c.restrictPackagingUsePermanently,  \n" +
                "			c.restrictPackagingUseWithpermission  \n" +
                "		   from component_processmaterial cp  \n" +
                "		   join component c ON c.id = cp.refComponentID  \n" +
                "		   JOIN mfgCodemst AS m ON c.mfgcodeID = m.id AND m.isDeleted = 0  \n" +
                "		   JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "		  where cp.componentID = pPartID  \n" +
                "            and cp.isDeleted = 0  \n" +
                "		    and c.isDeleted = 0  \n" +
                "		union all  \n" +
                "        select cd.id, cd.id rfqLineItemsID, c.mfgPN, c.PIDCode, c.nickName, c.id partID,      c.custAssyPN, c.rev, c.liveVersion,  \n" +
                "				m.id MID, 		m.mfgCode,		m.mfgType,  \n" +
                "                fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) mfrCode,  \n" +
                "				c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,  \n" +
                "				ro.rohsIcon,  \n" +
                "				ro.name rohsName,  \n" +
                "				'Drive Tools' whereUsed,  \n" +
                "                3 whereUsedOrder,  \n" +
                "				false isBOM,  \n" +
                "				c.isCustom ,  \n" +
                "            c.mfgcodeID,  \n" +
                "			c.mfgPNDescription,  \n" +
                "			c.isGoodPart,  \n" +
                "            c.restrictUsePermanently,  \n" +
                "			c.restrictUSEwithpermission,  \n" +
                "			c.restrictPackagingUsePermanently,  \n" +
                "			c.restrictPackagingUseWithpermission  \n" +
                "		   from component_drivetools cd  \n" +
                "		   join component c ON c.id = cd.refComponentID  \n" +
                "			JOIN mfgCodemst AS m ON c.mfgcodeID = m.id AND m.isDeleted = 0  \n" +
                "			JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "		  where cd.componentID = pPartID  \n" +
                "            and cd.isDeleted = 0  \n" +
                "		    and c.isDeleted = 0  \n" +
                "		union all  \n" +
                "        select cc.id, cc.id rfqLineItemsID, c.mfgPN, c.PIDCode, c.nickName, c.id partID,    c.custAssyPN, c.rev, c.liveVersion,  \n" +
                "				m.id MID, 		m.mfgCode,		m.mfgType,  \n" +
                "                fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) mfrCode,  \n" +
                "				c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,  \n" +
                "				ro.rohsIcon,  \n" +
                "				ro.name rohsName,  \n" +
                "				'Customer CPN' whereUsed,  \n" +
                "                5 whereUsedOrder,  \n" +
                "				false isBOM,  \n" +
                "				c.isCustom   ,  \n" +
                "            c.mfgcodeID,  \n" +
                "			c.mfgPNDescription,  \n" +
                "			c.isGoodPart,  \n" +
                "            c.restrictUsePermanently,  \n" +
                "			c.restrictUSEwithpermission,  \n" +
                "			c.restrictPackagingUsePermanently,  \n" +
                "			c.restrictPackagingUseWithpermission  \n" +
                "		   from component_cust_alias_rev_pn cc  \n" +
                "		   join component c ON c.id = cc.refCPNPartID  \n" +
                "			JOIN mfgCodemst AS m ON c.mfgcodeID = m.id AND m.isDeleted = 0  \n" +
                "			JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "		  where cc.refComponentID = pPartID  \n" +
                "            and cc.isDeleted = 0  \n" +
                "			and c.isDeleted = 0;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"whereUsedOrder ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM componentWhereUsedOther where \", pWhereClause );  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	SET @SQLStatement5 = CONCAT(\" SELECT * FROM  componentWhereUsedOther where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query5 FROM @SQLStatement5;  \n" +
                "	EXECUTE query5;  \n" +
                "	DEALLOCATE PREPARE query5;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS componentWhereUsedOther;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5723,'2.00','V1',' Bug 39758: MFR Code Data key not working as per selected value in Part Master- SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5723:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWOHeaderDisplayDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pwoOPID INT,  \n" +
                "	IN pwoTransID INT,  \n" +
                "	IN pWaterSolubleCleanType VARCHAR(5),  \n" +
                "	IN pNoCleanCleanType VARCHAR(5),  \n" +
                "	IN pwoAssyID INT ,  \n" +
                "	IN pemployeeIDOfWOOP INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgNameFormat INT;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgNameFormat;  \n" +
                "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN  \n" +
                "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`, `wo`.`woStatus`, `wo`.`woSubStatus`,  \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`, `wo`.`woVersion`,  \n" +
                "			`wo`.`isOperationTrackBySerialNo`,  \n" +
                "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,  \n" +
                "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,  \n" +
                "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,  \n" +
                "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount,  \n" +
                "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,  \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`, `wo`.`isFluxNotApplicable`, `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`, `wo`.`isRevisedWO`,  \n" +
                "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout  \n" +
                "				WHERE woTransEmpinout.isDeleted=0  \n" +
                "				AND woTransEmpinout.woID=pwoID  \n" +
                "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,  \n" +
                "			`wocerti`.woAllStandardsWithClass , `wo`.createdAt,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
                "				AND woID = `wo`.woID AND isWaterSoluble = 1) isWatersolubleOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
                "				AND woID = `wo`.woID AND isFluxNotApplicable = 1) isFluxNotAppOpNumbers ,  \n" +
                "			`ca`.`PIDCode` ,  IFNULL(`vusalesorderdet`.`partDescription`,  `ca`.`mfgPNDescription`) AS partDescription,  \n" +
                "			`ca`.`liveVersion` AS liveVersion,  \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`, `ca`.`RoHSStatusID` ,  \n" +
                "			`ca`.specialNote, ca.totalSolderPoints, `ca`.isCustom ,  \n" +
                "			`ro`.`rohsIcon`,`ro`.`name` AS `rohsName`,  \n" +
                "			    `ca`.`isFluxNotApplicable` AS `assyFluxNotApplicable`,  \n" +
                "			    `ca`.`isNoClean` AS `assyNoClean`,  \n" +
                "			    `ca`.`isWaterSoluble` AS `assyWaterSoluble`,  \n" +
                "			    `mf`.mfgType,  \n" +
                "			    fun_getSamplePicturesUploadCount(`ca`.id) sampleImageCnt,  \n" +
                "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,  \n" +
                "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
                "   			 CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
                "			     CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
                "			     CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.soType ELSE parentSaleDtl.soType END soType,  \n" +
                "			     vusalesorderdet.lineID,  \n" +
                "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues,  \n" +
                "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL  \n" +
                "					THEN `wo`.isHotJob  \n" +
                "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,  \n" +
                "   			 (CASE WHEN `ca`.totalSolderPoints IS NOT NULL  \n" +
                "					THEN fun_calculateDPMOForWO(`wo`.woID)  \n" +
                "				ELSE NULL END) AS DPMO,  \n" +
                "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID  \n" +
                "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details  \n" +
                "				WHERE refWOID = pwoID)  \n" +
                "			) AS parentWorkorders  ,  \n" +
                "			wo.terminateWOID refWOId,  \n" +
                "			fun_getWorkorderNumberWithRevByID(wo.terminateWOID) refWONumber,  \n" +
                "			    fun_getOperationNameByWOOPID(wo.terminateWOOPID) terminatedFromOp ,  \n" +
                "			    wo.customerID,  \n" +
                "			    fun_GetFormattedMfgCode(mf.mfgCode,mf.mfgName,vMfgNameFormat)  formattedCustomerName  \n" +
                "		FROM workorder AS `wo`  \n" +
                "			LEFT OUTER JOIN  \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName,' ' ,  \n" +
                "				CASE WHEN a.classIDs IS NULL THEN ''  \n" +
                "					ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END  \n" +
                "				ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass  \n" +
                "			FROM `workorder_certification` a  \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
                "			 WHERE a.isDeleted=0 AND a.woID = pwoID  \n" +
                "			 GROUP BY a.woID  \n" +
                "			) AS `wocerti`  \n" +
                "			ON `wo`.`woID` = `wocerti`.`woID`  \n" +
                "			LEFT OUTER JOIN `component` AS `ca`  \n" +
                "			ON `wo`.`partID` = `ca`.`id` AND `ca`.`isDeleted`=0  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "			AND `ro`.`isDeleted`=0  \n" +
                "			LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID  \n" +
                "			LEFT OUTER JOIN mfgCodeMst mf ON ca.mfgcodeID = mf.id  \n" +
                "			LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
                "		WHERE `wo`.`isDeleted`=0 AND `wo`.`woID` = pwoID;  \n" +
                "		-- GROUP BY `wo`.`woID` ;  \n" +
                "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN  \n" +
                "		SELECT  \n" +
                "			`wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,`wo`.`woStatus`, `wo`.`woSubStatus`, `wo`.`isRevisedWO`,  \n" +
                "			`wo`.`isOperationTrackBySerialNo`,  \n" +
                "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,  \n" +
                "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,  \n" +
                "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,  \n" +
                "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout  \n" +
                "				WHERE woTransEmpinout.isDeleted=0  \n" +
                "				AND woTransEmpinout.woID=pwoID  \n" +
                "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,  \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`,`wo`.`woVersion`,  \n" +
                "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount,  \n" +
                "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,  \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble` ,`wo`.`isFluxNotApplicable` , `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`,  \n" +
                "			 `wocerti`.woAllStandardsWithClass , `wo`.createdAt,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
                "				AND woID = `wo`.woID AND isWaterSoluble = 1) isWatersolubleOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
                "				AND woID = `wo`.woID AND isFluxNotApplicable = 1) isFluxNotAppOpNumbers,  \n" +
                "			`woop`.opName , `woop`.opNumber, `woop`.opVersion, `woop`.opStatus,  `woop`.`opID`,  \n" +
                "			`woop`.isTeamOperation , `woop`.isRework, `woop`.isIssueQty,  \n" +
                "			`woop`.qtyControl , `woop`.isStopOperation, `woop`.isPreProgrammingComponent, `woop`.isMoveToStock,  \n" +
                "			`woop`.isPlacementTracking,  \n" +
                "			`woop`.isLoopOperation,  \n" +
                "			`woop`.isAllowFinalSerialMapping,  \n" +
                "			`woop`.isTrackBySerialNo,  `woop`.isEnablePreProgrammingPart ,  \n" +
                "			`woop`.colorCode,  \n" +
                "			`woop`.`isFluxNotApplicable` AS `opFluxNotApplicable`,  \n" +
                "			`woop`.`isNoClean` AS `opNoClean`,  \n" +
                "			`woop`.`isWaterSoluble` AS `opWaterSoluble`,  \n" +
                "			`ca`.`PIDCode`,  IFNULL(`vusalesorderdet`.`partDescription`,  `ca`.`mfgPNDescription`) AS partDescription,  \n" +
                "			`ca`.`liveVersion` AS liveVersion,  \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`,   `ca`.specialNote ,  \n" +
                "			`ca`.`RoHSStatusID`, `ca`.isCustom ,  \n" +
                "			`ca`.`isFluxNotApplicable` AS `assyFluxNotApplicable`,  \n" +
                "			`ca`.`isNoClean` AS `assyNoClean`,  \n" +
                "			`ca`.`isWaterSoluble` AS `assyWaterSoluble`,  \n" +
                "			`ro`.`rohsIcon`, ca.totalSolderPoints,`ro`.`name` AS `rohsName`,  \n" +
                "			`mf`.mfgType,  \n" +
                "			fun_getSamplePicturesUploadCount(`ca`.id) sampleImageCnt,  \n" +
                "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,/*wo-so-po-qty*/  \n" +
                "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
                "   			 CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
                "			CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
                "			vusalesorderdet.lineID,  \n" +
                "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues, /*so-po-qty*/  \n" +
                "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL  \n" +
                "					THEN `wo`.isHotJob  \n" +
                "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,  \n" +
                "			 (SELECT wc.isParellelOperation FROM workorder_cluster wc  \n" +
                "				WHERE wc.clusterID  \n" +
                "					IN (SELECT clusterID FROM workorder_operation_cluster woc  \n" +
                "						WHERE woc.woopid=pwoOPID AND `woc`.isDeleted=0)  \n" +
                "				 AND wc.isDeleted=0 AND wc.woID = pwoID  \n" +
                "			) isParellelOperation,  \n" +
                "			(CASE WHEN `ca`.totalSolderPoints IS NOT NULL  \n" +
                "					THEN fun_calculateDPMOForWO(`wo`.woID)  \n" +
                "				ELSE NULL END) AS DPMO,  \n" +
                "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID  \n" +
                "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details  \n" +
                "				WHERE refWOID = pwoID)  \n" +
                "			) AS parentWorkorders  ,  \n" +
                "			wo.terminateWOID refWOId,  \n" +
                "			fun_getWorkorderNumberWithRevByID(wo.terminateWOID) refWONumber,  \n" +
                "			fun_getOperationNameByWOOPID(wo.terminateWOOPID) terminatedFromOp,  \n" +
                "			fun_getRequireMachineVerificationLogicalValue(woop.woOPID,wo.partID) requireMachineVerification ,  \n" +
                "			wo.customerID,  \n" +
                "			fun_GetFormattedMfgCode(mf.mfgCode,mf.mfgName,vMfgNameFormat)  formattedCustomerName  \n" +
                "		FROM workorder AS `wo`  \n" +
                "			LEFT OUTER JOIN  \n" +
                "				(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' , CASE WHEN a.classIDs IS NULL THEN ''  \n" +
                "								ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END  \n" +
                "								ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass  \n" +
                "				FROM `workorder_certification` a  \n" +
                "				JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
                "				 WHERE a.isDeleted=0 AND a.woID = pwoID  \n" +
                "				GROUP BY a.woID  \n" +
                "				) AS `wocerti`  \n" +
                "			ON `wo`.`woID` = `wocerti`.`woID`  \n" +
                "			LEFT OUTER JOIN `workorder_operation` AS `woop`  \n" +
                "			ON `wo`.`woID` = `woop`.`woID` AND `woop`.isDeleted=0 AND `woop`.`woOPID` = pwoOPID  \n" +
                "			LEFT OUTER JOIN `component` AS `ca`  \n" +
                "			ON `wo`.`partID` = `ca`.`id` AND `ca`.isDeleted=0  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "			AND `ro`.isDeleted=0  \n" +
                "			LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID  \n" +
                "			LEFT OUTER JOIN mfgCodeMst mf  ON ca.mfgcodeID = mf.id  \n" +
                "			LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
                "				WHERE `wo`.isDeleted=0 AND `wo`.`woID` = pwoID ;  \n" +
                "		-- GROUP BY `wo`.`woID` ;  \n" +
                "	END IF ;  \n" +
                "  \n" +
                "	/********************************* 2.current data ****************************************************/  \n" +
                "	CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, NULL);  \n" +
                "	/********************************* 2.current data ****************************************************/  \n" +
                "  \n" +
                "	-- IF(IFNULL(pwoTransID,0) > 0) THEN  \n" +
                "		/********************************** 3.current data ***************************************************/  \n" +
                "		CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, pwoTransID);  \n" +
                "		/********************************** 3.current data ***************************************************/  \n" +
                "        -- END IF;  \n" +
                "  \n" +
                "	# last ECO request data  \n" +
                "        SELECT * FROM eco_request WHERE requestType = 1 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;  \n" +
                "        # last DFM request data  \n" +
                "        SELECT * FROM eco_request WHERE requestType = 2 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;  \n" +
                "  \n" +
                "        # is export controlled assembly  \n" +
                "        SELECT (CASE WHEN  \n" +
                "	(SELECT COUNT(1) FROM certificate_standards  \n" +
                "	WHERE isDeleted=0  \n" +
                "	AND isExportControlled = 1  \n" +
                "	AND certificateStandardID IN (	SELECT certificateStandardID FROM component_standard_details  \n" +
                "					WHERE isDeleted=0  \n" +
                "					AND componentID IN (  \n" +
                "								SELECT DISTINCT mfgPNID AS partMasterID FROM rfq_lineitems_alternatepart  \n" +
                "								WHERE isDeleted=0  \n" +
                "								AND partID IN (SELECT prPerPartID FROM part_sub_assy_relationship  \n" +
                "										WHERE isDeleted=0 AND partID = pwoAssyID)  \n" +
                "								UNION  \n" +
                "								SELECT DISTINCT partID AS partMasterID FROM workorder_operation_part  \n" +
                "								WHERE isDeleted=0 AND woID = pwoID  \n" +
                "								UNION  \n" +
                "								SELECT DISTINCT pwoAssyID AS partMasterID  \n" +
                "							   )  \n" +
                "					) > 0) THEN 1  \n" +
                "		ELSE 0 END) AS isExportControlledAssembly  ;  \n" +
                "  \n" +
                "  \n" +
                "	#  7. get wo op empl wise total time consumption details  \n" +
                "	# include both setup and production activity  \n" +
                "	CALL Sproc_GetWOOPEmpWiseTotTimeConsumptionDet(pWOOPID, pemployeeIDOfWOOP);  \n" +
                "  END;  \n" +
                /* **************************** Add Script Version -> 03-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5724,'2.00','V1',' Bug 40021: MFR code data key should working properly in work order. - VS  '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5724:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllOtherComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllOtherComponentList`(  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "      DECLARE pmfgCodeID INT;  \n" +
                "      DECLARE vMfgCodeIds VARCHAR(50) DEFAULT '';  \n" +
                "      DECLARE v_mfgNameFormat VARCHAR(10);  \n" +
                "  \n" +
                "	  SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "      SELECT id INTO pmfgCodeID FROM mfgcodemst WHERE iscompany=1  AND isdeleted=0;  \n" +
                "  \n" +
                "      SELECT GROUP_CONCAT(refMfgCodeMstID) INTO vMfgCodeIds  \n" +
                "      FROM supplier_mapping_mst  \n" +
                "      WHERE supplierID  = pmfgCodeID AND isDeleted =0 AND isCustMapping=0;  \n" +
                "  \n" +
                "      #get component having mfg as iscompany and part type other  \n" +
                "      SELECT c.pidcode,c.id,c.mfgPN,rr.name AS rohsName,rr.rohsIcon,c.frequency,c.mfgPNDescription,c.category,c.partType,  \n" +
                "      cp.name AS packagingName,  \n" +
                "      c.packagingId,u.unitName,c.rohsStatusID,mc.mfgCode,mc.mfgName,c.mfgcodeid , pmfgCodeID   fcaCompId , c.partStatus,  \n" +
                "      c.frequencyType, fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, v_mfgNameFormat) mfgCodeName  \n" +
                "      FROM component c JOIN rfq_rohsmst rr ON rr.id=c.rohsStatusID  \n" +
                "      LEFT JOIN component_packagingmst cp ON cp.id=c.packagingId  \n" +
                "      LEFT JOIN uoms u ON u.id=c.uom  \n" +
                "      JOIN mfgcodemst mc ON  mc.id=c.mfgcodeid  \n" +
                "      WHERE c.partType=4  \n" +
                "      AND c.isdeleted=0  \n" +
                "      AND (c.mfgcodeid=pmfgCodeID OR FIND_IN_SET(c.mfgcodeid ,vMfgCodeIds))  \n" +
                "      AND c.isGoodPart  = 1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearchPurchaseOrder`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearchPurchaseOrder`(  \n" +
                "	IN pSearch VARCHAR(300),  \n" +
                "	IN pId INT,  \n" +
                "	IN pMfgType VARCHAR(50),  \n" +
                "	IN pRoHSStatusID VARCHAR(100),  \n" +
                "	IN pMfgCodeId INT,  \n" +
                "	IN pCategoryID INT,  \n" +
                "	IN pIsContainCPN TINYINT,  \n" +
                "	IN prefSupplierMfgpnComponentID INT,  \n" +
                "	IN ppackagingID INT,  \n" +
                "	IN pstrictCustomPart TINYINT,  \n" +
                "	IN psupplierID INT,  \n" +
                "	IN pofftheself TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(10);  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	IF (pstrictCustomPart=1) THEN  \n" +
                "		/*<===this logic is added to compare invert rohs category */  \n" +
                "		/* this logic used in purchase order when supplier is strictly custom part */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempcomponent;  \n" +
                "		IF(SELECT COUNT(1) FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.isCustMapping=0 AND smm.supplierID=psupplierID)>0 THEN  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent  \n" +
                "			SELECT smm.refMfgCodeMstID  \n" +
                "				FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.isCustMapping=0 AND smm.supplierID=psupplierID  \n" +
                "			UNION  \n" +
                "			SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0  \n" +
                "			UNION  \n" +
                "			SELECT psupplierID AS refMfgCodeMstID;  \n" +
                "		ELSE  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempcomponent  \n" +
                "			SELECT psupplierID AS refMfgCodeMstID  \n" +
                "			UNION  \n" +
                "			SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.mfgType='MFG' AND mc.isCustOrDisty=1 AND mc.isdeleted=0  \n" +
                "			UNION  \n" +
                "			SELECT mc.id AS refMfgCodeMstID FROM mfgcodemst mc WHERE mc.iscompany=1 AND mc.isdeleted=0  \n" +
                "			UNION  \n" +
                "			SELECT c.mfgcodeid AS refMfgCodeMstID FROM component c WHERE (c.parttype=4 OR c.iscpn=1) AND c.isdeleted=0;  \n" +
                "		END IF;  \n" +
                "		SELECT * FROM  \n" +
                "			(  \n" +
                "				SELECT `com`.`id`,  \n" +
                "					/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/  \n" +
                "					CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
                "					`com`.`mfgPN` orgMfgPN,  \n" +
                "					`com`.`packaginggroupID`,  \n" +
                "					`com`.`packagingID`,  \n" +
                "					`com`.`PIDCode`,  \n" +
                "					`com`.`isGoodPart`,  \n" +
                "					`com`.`RoHSStatusID`,  \n" +
                "					`com`.`rohsgroupID`,  \n" +
                "					`com`.`mfgcodeID`,  \n" +
                "					`mfgCodemst`.`mfgCode` AS `mfgCode`,  \n" +
                "					`mfgCodemst`.`mfgType` AS `mfgType`,  \n" +
                "					`mfgCodemst`.`mfgName` AS `mfgName`,  \n" +
                "                    fun_GetFormattedMfgCode(`mfgCodemst`.`mfgCode`, `mfgCodemst`.`mfgName`, v_mfgNameFormat) mfgCodeName,  \n" +
                "					`com`.`category`,  \n" +
                "					`com`.`imageURL`,  \n" +
                "					`com`.`documentPath`,  \n" +
                "					`com`.`mfgPNDescription`,  \n" +
                "					`com`.`minOperatingTemp`,  \n" +
                "					`com`.`maxOperatingTemp`,  \n" +
                "					`com`.`value`,  \n" +
                "					`com`.`partPackage`,  \n" +
                "					`com`.`powerRating`,  \n" +
                "					`com`.`functionalCategoryID`,  \n" +
                "					`com`.`mountingTypeID`,  \n" +
                "					`com`.`connecterTypeID`,  \n" +
                "					`com`.`noOfPosition`,  \n" +
                "					`com`.`noOfRows`,  \n" +
                "					`com`.`pitch`,  \n" +
                "					`com`.`pitchMating`,  \n" +
                "					`com`.`length`,  \n" +
                "					`com`.`width`,  \n" +
                "					`com`.`height`,  \n" +
                "					`com`.`voltage`,  \n" +
                "					`com`.`weight`,  \n" +
                "					`com`.`feature`,  \n" +
                "					`com`.`color`,  \n" +
                "					`com`.`partStatus`,  \n" +
                "					`com`.`uom`,  \n" +
                "					`com`.`uomClassID`,  \n" +
                "					`com`.`unit`,  \n" +
                "					`com`.`restrictUsePermanently`,  \n" +
                "					`com`.`restrictUSEwithpermission`,  \n" +
                "					`com`.`restrictPackagingUsePermanently`,  \n" +
                "					`com`.`restrictPackagingUseWithpermission`,  \n" +
                "					`u`.`abbreviation` AS uomName,  \n" +
                "					`u`.`unitName` AS  unitName,  \n" +
                "					`r`.`rohsIcon`,  \n" +
                "					`r`.`name` AS rohsName,  \n" +
                "					`com`.`partPackageID`,  \n" +
                "					`com`.`bomLock`,  \n" +
                "					`com`.`businessRisk`,  \n" +
                "					`com`.`costCategoryID`,  \n" +
                "					`com`.`deviceMarking`,  \n" +
                "					`com`.`driverToolRequired`,  \n" +
                "					`com`.`eau`,  \n" +
                "					`com`.`epicorType`,  \n" +
                "					`com`.`functionalTestingRequired`,  \n" +
                "					`com`.`heightText`,  \n" +
                "					`com`.`isCPN`,  \n" +
                "					`com`.`isCustom`,  \n" +
                "					`com`.`leadTime`,  \n" +
                "					`com`.`matingPartRquired`,  \n" +
                "					`com`.`maxPriceLimit`,  \n" +
                "					`com`.`maxQtyonHand`,  \n" +
                "					`com`.`minimum`,  \n" +
                "					`com`.`mult`,  \n" +
                "					`com`.`packageQty`,  \n" +
                "					`com`.`partType`,  \n" +
                "					`com`.`pcbPerArray`,  \n" +
                "					`com`.`pickupPadRequired`,  \n" +
                "					`com`.`plannedOverRunPercentagePerBuild`,  \n" +
                "					`com`.`plannedValuePerBuild`,  \n" +
                "					`com`.`programingRequired`,  \n" +
                "					`com`.`rfqOnly`,  \n" +
                "					`com`.`saftyStock`,  \n" +
                "					`com`.`scrapRatePercentagePerBuild`,  \n" +
                "					`com`.`scrapValuePerBuild`,  \n" +
                "					`com`.`selfLifeDays`,  \n" +
                "					`com`.`shelfListDaysThresholdPercentage`,  \n" +
                "					`com`.`temperatureCoefficient`,  \n" +
                "					`com`.`temperatureCoefficientUnit`,  \n" +
                "					`com`.`temperatureCoefficientValue`,  \n" +
                "					`com`.`trackSerialNumber`,  \n" +
                "					`com`.`refSupplierMfgpnComponentID`,  \n" +
                "					`com`.`refMfgPNMfgCodeId`,  \n" +
                "					`com`.`internalReference`,  \n" +
                "					fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgName,  \n" +
                "					fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgPn,  \n" +
                "					fun_getMfgCodeByID(`com`.`refMfgPNMfgCodeId`) supplierPartMfgCode  \n" +
                "				FROM `component` AS `com`  \n" +
                "				INNER JOIN `mfgCodemst` AS `mfgCodemst`  \n" +
                "					ON `com`.`mfgcodeID` = `mfgCodemst`.`id`  \n" +
                "						AND (`mfgCodemst`.`isDeleted`=0  \n" +
                "                        AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))  \n" +
                "				JOIN `rfq_rohsmst` AS `r`  \n" +
                "					ON `r`.`id` = `com`.`RoHSStatusID`  \n" +
                "				JOIN  `uoms` AS `u`  \n" +
                "					ON `u`.`id`= `com`.`uom` AND `u`.`isdeleted`=0  \n" +
                "				WHERE `com`.`isdeleted`=0  \n" +
                "					AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)  \n" +
                "					AND `com`.`id` = IFNULL(pId, `com`.`id`)  \n" +
                "					AND `com`.`mfgcodeID` = IFNULL(pMfgCodeId, `com`.`mfgcodeID`)  \n" +
                "					AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.`refSupplierMfgpnComponentID`)  \n" +
                "					AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)  \n" +
                "					AND `com`.`mfgcodeid` IN (SELECT refMfgCodeMstID FROM tempcomponent)  \n" +
                "					AND (`com`.`isGoodPart`=1)  \n" +
                "					AND (CASE WHEN pId IS NULL THEN `com`.`partStatus` != -3 ELSE 1=1 END)  \n" +
                "			) AS a  \n" +
                "		WHERE ((pSearch IS NULL AND 1=1)  \n" +
                "			OR (pSearch IS NOT NULL  \n" +
                "				AND (mfgPN LIKE CONCAT('%', pSearch , '%')  \n" +
                "					OR pidcode LIKE CONCAT('%', pSearch , '%')  \n" +
                "					OR EXISTS (SELECT 1 FROM `component_otherpn` AS `opn` WHERE `opn`.`refcomponentid` = `a`.`id` AND `opn`.`name` LIKE CONCAT('%', pSearch , '%'))))  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "	ELSEIF (pofftheself=1 AND pstrictCustomPart=0) THEN  \n" +
                "		/* this logic used in purchase order  \n" +
                "		packing slip  \n" +
                "		UMID management  \n" +
                "		Component Master  \n" +
                "		Reserve Stock  \n" +
                "		Component Assy DFM  \n" +
                "		Reports  \n" +
                "		Price Break Update  \n" +
                "		Customer Part  \n" +
                "		Good-Bad Mapping Part  \n" +
                "		Supplier Quote  \n" +
                "		Supplier RMA */  \n" +
                "		SELECT * FROM  \n" +
                "			(  \n" +
                "				SELECT `com`.`id`,  \n" +
                "					/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/  \n" +
                "					CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
                "					`com`.`mfgPN` orgMfgPN,  \n" +
                "					`com`.`packaginggroupID`,  \n" +
                "					`com`.`packagingID`,  \n" +
                "					`com`.`PIDCode`,  \n" +
                "					`com`.`isGoodPart`,  \n" +
                "					`com`.`RoHSStatusID`,  \n" +
                "					`com`.`rohsgroupID`,  \n" +
                "					`com`.`mfgcodeID`,  \n" +
                "					`mfgCodemst`.`mfgCode` AS mfgCode,  \n" +
                "					`mfgCodemst`.`mfgType` AS mfgType,  \n" +
                "					`mfgCodemst`.`mfgName` AS mfgName,  \n" +
                "                    fun_GetFormattedMfgCode(`mfgCodemst`.`mfgCode`, `mfgCodemst`.`mfgName`, v_mfgNameFormat) mfgCodeName,  \n" +
                "					`com`.`category`,  \n" +
                "					`com`.`imageURL`,  \n" +
                "					`com`.`documentPath`,  \n" +
                "					`com`.`mfgPNDescription`,  \n" +
                "					`com`.`minOperatingTemp`,  \n" +
                "					`com`.`maxOperatingTemp`,  \n" +
                "					`com`.`value`,  \n" +
                "					`com`.`partPackage`,  \n" +
                "					`com`.`powerRating`,  \n" +
                "					`com`.`functionalCategoryID`,  \n" +
                "					`com`.`mountingTypeID`,  \n" +
                "					`com`.`connecterTypeID`,  \n" +
                "					`com`.`noOfPosition`,  \n" +
                "					`com`.`noOfRows`,  \n" +
                "					`com`.`pitch`,  \n" +
                "					`com`.`pitchMating`,  \n" +
                "					`com`.`length`,  \n" +
                "					`com`.`width`,  \n" +
                "					`com`.`height`,  \n" +
                "					`com`.`voltage`,  \n" +
                "					`com`.`weight`,  \n" +
                "					`com`.`feature`,  \n" +
                "					`com`.`color`,  \n" +
                "					`com`.`partStatus`,  \n" +
                "					`com`.`uom`,  \n" +
                "					`com`.`uomClassID`,  \n" +
                "					`com`.`unit`,  \n" +
                "					`com`.`restrictUsePermanently`,  \n" +
                "					`com`.`restrictUSEwithpermission`,  \n" +
                "					`com`.`restrictPackagingUsePermanently`,  \n" +
                "					`com`.`restrictPackagingUseWithpermission`,  \n" +
                "					`u`.`abbreviation` AS uomName,  \n" +
                "					`u`.`unitName` AS unitName,  \n" +
                "					`r`.`rohsIcon`,  \n" +
                "					`r`.`name` AS rohsName,  \n" +
                "					`com`.`partPackageID`,  \n" +
                "					`com`.`bomLock`,  \n" +
                "					`com`.`businessRisk`,  \n" +
                "					`com`.`costCategoryID`,  \n" +
                "					`com`.`deviceMarking`,  \n" +
                "					`com`.`driverToolRequired`,  \n" +
                "					`com`.`eau`,  \n" +
                "					`com`.`epicorType`,  \n" +
                "					`com`.`functionalTestingRequired`,  \n" +
                "					`com`.`heightText`,  \n" +
                "					`com`.`isCPN`,  \n" +
                "					`com`.`isCustom`,  \n" +
                "					`com`.`leadTime`,  \n" +
                "					`com`.`matingPartRquired`,  \n" +
                "					`com`.`maxPriceLimit`,  \n" +
                "					`com`.`maxQtyonHand`,  \n" +
                "					`com`.`minimum`,  \n" +
                "					`com`.`mult`,  \n" +
                "					`com`.`packageQty`,  \n" +
                "					`com`.`partType`,  \n" +
                "					`com`.`pcbPerArray`,  \n" +
                "					`com`.`pickupPadRequired`,  \n" +
                "					`com`.`plannedOverRunPercentagePerBuild`,  \n" +
                "					`com`.`plannedValuePerBuild`,  \n" +
                "					`com`.`programingRequired`,  \n" +
                "					`com`.`rfqOnly`,  \n" +
                "					`com`.`saftyStock`,  \n" +
                "					`com`.`scrapRatePercentagePerBuild`,  \n" +
                "					`com`.`scrapValuePerBuild`,  \n" +
                "					`com`.`selfLifeDays`,  \n" +
                "					`com`.`shelfListDaysThresholdPercentage`,  \n" +
                "					`com`.`temperatureCoefficient`,  \n" +
                "					`com`.`temperatureCoefficientUnit`,  \n" +
                "					`com`.`temperatureCoefficientValue`,  \n" +
                "					`com`.`trackSerialNumber`,  \n" +
                "					`com`.`refSupplierMfgpnComponentID`,  \n" +
                "					`com`.`refMfgPNMfgCodeId`,  \n" +
                "					`com`.`internalReference`,  \n" +
                "					fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgName,  \n" +
                "					fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgPn,  \n" +
                "					fun_getMfgCodeByID(`com`.`refMfgPNMfgCodeId`) supplierPartMfgCode  \n" +
                "				FROM `component` AS `com`  \n" +
                "				INNER JOIN `mfgCodemst` AS `mfgCodemst`  \n" +
                "					ON `com`.`mfgcodeID` = `mfgCodemst`.`id`  \n" +
                "						AND (`mfgCodemst`.`isDeleted`=0  \n" +
                "						AND `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))  \n" +
                "				JOIN `rfq_rohsmst` AS `r`  \n" +
                "					ON `r`.`id` = `com`.`RoHSStatusID`  \n" +
                "				JOIN  `uoms` AS `u`  \n" +
                "					ON `u`.`id`= `com`.`uom` AND `u`.`isdeleted`=0  \n" +
                "				WHERE (`com`.`isdeleted`=0)  \n" +
                "					AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)  \n" +
                "					AND `com`.`id` = IFNULL(pId, `com`.`id`)  \n" +
                "                    AND `com`.`mfgcodeID` = IFNULL(pMfgCodeId, `com`.`mfgcodeID`)  \n" +
                "					AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.`refSupplierMfgpnComponentID`)  \n" +
                "					AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)  \n" +
                "					AND `com`.`iscustom`=0  \n" +
                "                    AND `com`.`category`=2  \n" +
                "                    AND `com`.`iscpn`=FALSE  \n" +
                "					AND (CASE WHEN pId IS NULL THEN `com`.`partStatus` != -3 ELSE 1=1 END)  \n" +
                "			) AS a  \n" +
                "		WHERE ((pSearch IS NULL AND 1=1)  \n" +
                "			OR (pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%')  \n" +
                "				OR (pidcode LIKE CONCAT('%', pSearch , '%'))  \n" +
                "				OR EXISTS (SELECT 1 FROM `component_otherpn` AS `opn` WHERE `opn`.`refcomponentid` = `a`.`id` AND `opn`.`name` LIKE CONCAT('%', pSearch , '%'))))  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "	ELSE  \n" +
                "		/* this logic used in purchase order  \n" +
                "		packing slip  \n" +
                "		UMID management  \n" +
                "		Component Master  \n" +
                "		Reserve Stock  \n" +
                "		Component Assy DFM  \n" +
                "		Reports  \n" +
                "		Price Break Update  \n" +
                "		Customer Part  \n" +
                "		Good-Bad Mapping Part  \n" +
                "		Supplier Quote  \n" +
                "		Supplier RMA */  \n" +
                "		SELECT * FROM  \n" +
                "			(  \n" +
                "				SELECT `com`.`id`,  \n" +
                "					/*CONCAT(`com`.`mfgPN`,' (',`mfgCodemst`.`mfgCode`, ')') mfgPN,*/  \n" +
                "					CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`) mfgPN,  \n" +
                "					`com`.`mfgPN` orgMfgPN,  \n" +
                "					`com`.`packaginggroupID`,  \n" +
                "					`com`.`packagingID`,  \n" +
                "					`com`.`PIDCode`,  \n" +
                "					`com`.`isGoodPart`,  \n" +
                "					`com`.`RoHSStatusID`,  \n" +
                "					`com`.`rohsgroupID`,  \n" +
                "					`com`.`mfgcodeID`,  \n" +
                "					`mfgCodemst`.`mfgCode` AS mfgCode,  \n" +
                "					`mfgCodemst`.`mfgName` AS mfgName,  \n" +
                "					`mfgCodemst`.`mfgType` AS mfgType,  \n" +
                "                    fun_GetFormattedMfgCode(`mfgCodemst`.`mfgCode`, `mfgCodemst`.`mfgName`, v_mfgNameFormat) mfgCodeName,  \n" +
                "					`com`.`tolerance`,  \n" +
                "					`com`.`category`,  \n" +
                "					`com`.`imageURL`,  \n" +
                "					`com`.`documentPath`,  \n" +
                "					`com`.`mfgPNDescription`,  \n" +
                "					`com`.`minOperatingTemp`,  \n" +
                "					`com`.`maxOperatingTemp`,  \n" +
                "					`com`.`value`,  \n" +
                "					`com`.`partPackage`,  \n" +
                "					`com`.`powerRating`,  \n" +
                "					`com`.`functionalCategoryID`,  \n" +
                "					`com`.`mountingTypeID`,  \n" +
                "					`com`.`connecterTypeID`,  \n" +
                "					`com`.`noOfPosition`,  \n" +
                "					`com`.`noOfRows`,  \n" +
                "					`com`.`pitch`,  \n" +
                "					`com`.`pitchMating`,  \n" +
                "					`com`.`length`,  \n" +
                "					`com`.`width`,  \n" +
                "					`com`.`height`,  \n" +
                "					`com`.`voltage`,  \n" +
                "					`com`.`weight`,  \n" +
                "					`com`.`feature`,  \n" +
                "					`com`.`color`,  \n" +
                "					`com`.`partStatus`,  \n" +
                "					`com`.`uom`,  \n" +
                "					`com`.`uomClassID`,  \n" +
                "					`com`.`unit`,  \n" +
                "					`com`.`restrictUsePermanently`,  \n" +
                "					`com`.`restrictUSEwithpermission`,  \n" +
                "					`com`.`restrictPackagingUsePermanently`,  \n" +
                "					`com`.`restrictPackagingUseWithpermission`,  \n" +
                "					`com`.`packaging`,  \n" +
                "					`u`.`abbreviation` AS uomName,  \n" +
                "					`u`.`unitName` AS unitName,  \n" +
                "					`r`.`rohsIcon`,  \n" +
                "					`r`.`name` AS rohsName,  \n" +
                "					`com`.`partPackageID`,  \n" +
                "					`com`.`bomLock`,  \n" +
                "					`com`.`businessRisk`,  \n" +
                "					`com`.`costCategoryID`,  \n" +
                "					`com`.`deviceMarking`,  \n" +
                "					`com`.`driverToolRequired`,  \n" +
                "					`com`.`eau`,  \n" +
                "					`com`.`epicorType`,  \n" +
                "					`com`.`functionalTestingRequired`,  \n" +
                "					`com`.`heightText`,  \n" +
                "					`com`.`isCPN`,  \n" +
                "					`com`.`isCustom`,  \n" +
                "					`com`.`leadTime`,  \n" +
                "					`com`.`matingPartRquired`,  \n" +
                "					`com`.`maxPriceLimit`,  \n" +
                "					`com`.`maxQtyonHand`,  \n" +
                "					`com`.`minimum`,  \n" +
                "					`com`.`mult`,  \n" +
                "					`com`.`packageQty`,  \n" +
                "					`com`.`partType`,  \n" +
                "					`com`.`pcbPerArray`,  \n" +
                "					`com`.`pickupPadRequired`,  \n" +
                "					`com`.`plannedOverRunPercentagePerBuild`,  \n" +
                "					`com`.`plannedValuePerBuild`,  \n" +
                "					`com`.`programingRequired`,  \n" +
                "					`com`.`rfqOnly`,  \n" +
                "					`com`.`saftyStock`,  \n" +
                "					`com`.`scrapRatePercentagePerBuild`,  \n" +
                "					`com`.`scrapValuePerBuild`,  \n" +
                "					`com`.`selfLifeDays`,  \n" +
                "					`com`.`shelfListDaysThresholdPercentage`,  \n" +
                "					`com`.`temperatureCoefficient`,  \n" +
                "					`com`.`temperatureCoefficientUnit`,  \n" +
                "					`com`.`temperatureCoefficientValue`,  \n" +
                "					`com`.`trackSerialNumber`,  \n" +
                "					`com`.`refSupplierMfgpnComponentID`,  \n" +
                "					`com`.`refMfgPNMfgCodeId`,  \n" +
                "					`com`.`internalReference`,  \n" +
                "					fun_getMfgNameByPartID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgName,  \n" +
                "					fun_getMFGPNByID(`com`.`refSupplierMfgpnComponentID`) supplierPartMfgPn,  \n" +
                "					fun_getMfgCodeByID(`com`.`refMfgPNMfgCodeId`) supplierPartMfgCode  \n" +
                "				FROM `component` AS `com`  \n" +
                "				INNER JOIN `mfgCodemst` AS `mfgCodemst`  \n" +
                "					ON `com`.`mfgcodeID` = `mfgCodemst`.`id`  \n" +
                "						AND (`mfgCodemst`.`isdeleted` =0 AND  `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`))  \n" +
                "				JOIN `rfq_rohsmst` AS `r`  \n" +
                "					ON `r`.`id` = `com`.`RoHSStatusID`  \n" +
                "				JOIN `uoms` AS `u`  \n" +
                "					ON `u`.`id`= `com`.`uom`  \n" +
                "						AND `u`.`isdeleted`=0  \n" +
                "				WHERE `com`.`isdeleted`=0  \n" +
                "					AND `com`.`RoHSStatusID`= IFNULL(pRoHSStatusID, `com`.`RoHSStatusID`)  \n" +
                "					AND `com`.`id` = IFNULL(pId, `com`.`id`)  \n" +
                "                    AND `com`.`mfgcodeID` = IFNULL(pMfgCodeId, `com`.`mfgcodeID`)  \n" +
                "					AND `com`.`refSupplierMfgpnComponentID`<=> IFNULL(prefSupplierMfgpnComponentID,`com`.`refSupplierMfgpnComponentID`)  \n" +
                "					AND `com`.`packagingID`<=>IFNULL(ppackagingID,`com`.`packagingID`)  \n" +
                "					AND `com`.`category` = IFNULL(pCategoryID, `com`.`category`)  \n" +
                "					AND (CASE WHEN pIsContainCPN = 1 THEN `com`.`isCPN`= `com`.`isCPN` ELSE `com`.`isCPN` = FALSE END)  \n" +
                "					AND (CASE WHEN pId IS NULL THEN `com`.`partStatus` != -3 ELSE 1=1 END)  \n" +
                "			) AS a  \n" +
                "		WHERE ((pSearch IS NULL AND 1=1)  \n" +
                "			OR (pSearch IS NOT NULL  \n" +
                "				AND (mfgPN LIKE CONCAT('%', pSearch , '%')  \n" +
                "                OR (pidcode LIKE CONCAT('%', pSearch , '%'))  \n" +
                "				OR EXISTS (SELECT 1 FROM `component_otherpn` AS `opn` WHERE `opn`.`refcomponentid` = `a`.`id` AND `opn`.`name` LIKE CONCAT('%', pSearch , '%'))))  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetManufacturerWithFormattedCodeList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturerWithFormattedCodeList`(  \n" +
                "	IN pMfgType varchar(10),  \n" +
                "    IN pIsPricingApi TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "        select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "		SELECT fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) mfgCodeName,  \n" +
                "				m.mfgCode, m.id, m.mfgType, m.mfgName, m.isCustOrDisty, m.isCompany, m.displayOrder  \n" +
                "		 FROM mfgCodemst AS m  \n" +
                "		 WHERE m.mfgType = pMfgType  \n" +
                "		 and m.isdeleted = 0  \n" +
                "		 AND m.isPricingApi  = ifnull(pIsPricingApi,m.isPricingApi)  \n" +
                "		 ORDER BY m.displayOrder IS NULL, m.displayOrder ASC, mfgCodeName ASC;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 04-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_CheckPackingSlipMaterialValidation`;  \n" +
                "CREATE PROCEDURE `Sproc_CheckPackingSlipMaterialValidation`(  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "	IN pPackingSlipMaterialID INT,  \n" +
                "	IN pBinID INT,  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pUpdatedReceivedQty DECIMAL(18,8),  \n" +
                "	IN pPackagingId INT,  \n" +
                "	IN pSpq INT,  \n" +
                "    IN pIsNonUMIDStock boolean  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vOldReceivedQty DECIMAL(18,8);  \n" +
                "	DECLARE vUMIDCreatedQty DECIMAL(18,8);  \n" +
                "	DECLARE vPackagingId INT;  \n" +
                "	DECLARE vPackagingAliesComponentId VARCHAR(5000);  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	-- Return packing slip detail if it's invoice status is Paid  \n" +
                "	SELECT 		1 errorCode,  \n" +
                "			p.id packingSlipID,  \n" +
                "			p.packingSlipNumber,  \n" +
                "			p.packingSlipDate,  \n" +
                "			p.status packingSlipStatus,  \n" +
                "			i.id invoiceID,  \n" +
                "			i.invoiceNumber,  \n" +
                "			i.invoiceDate,  \n" +
                "			i.status invoiceStatus  \n" +
                "	FROM 		packing_slip_material_receive p  \n" +
                "	LEFT JOIN 	packing_slip_material_receive i ON p.refPackingSlipNumberForInvoice = i.id  AND i.isDeleted = 0  \n" +
                "	WHERE 		p.id = pPackingSlipID  \n" +
                "				AND 	i.status = 'P'  \n" +
                "				AND 	p.isDeleted = 0;  \n" +
                "  \n" +
                "	-- Return packing slip line detail if it's invoice line status is Approve or Disapprove  \n" +
                "	SELECT 		6 errorCode,  \n" +
                "			p.id packingSlipID,  \n" +
                "			p.packingSlipNumber,  \n" +
                "			p.packingSlipDate,  \n" +
                "			p.status packingSlipStatus,  \n" +
                "			i.id invoiceID,  \n" +
                "			i.invoiceNumber,  \n" +
                "			i.invoiceDate,  \n" +
                "			i.status invoiceStatus,  \n" +
                "			inv_d.packingSlipSerialNumber invoiceSerialNumber,  \n" +
                "			inv_d.status invoiceLineStatus  \n" +
                "	FROM 		packing_slip_material_receive p  \n" +
                "	LEFT JOIN 	packing_slip_material_receive i ON p.refPackingSlipNumberForInvoice = i.id  AND i.isDeleted = 0  \n" +
                "	LEFT JOIN	packing_slip_material_receive_det pkg_d ON pkg_d.refPackingSlipMaterialRecID = p.id AND pkg_d.id = pPackingSlipMaterialID AND pkg_d.deletedAt IS NULL  \n" +
                "	LEFT JOIN	packing_slip_material_receive_det inv_d ON inv_d.refPackingSlipMaterialRecID = i.id AND pkg_d.packingSlipSerialNumber = inv_d.packingSlipSerialNumber AND inv_d.deletedAt IS NULL  \n" +
                "	WHERE 		p.id = pPackingSlipID  \n" +
                "				AND 	(inv_d.status = 'A' OR inv_d.status = 'D')  \n" +
                "				AND 	p.isDeleted = 0;  \n" +
                "  \n" +
                "	-- Get detail of any UMID is created or not for particular line  \n" +
                "	SELECT packagingID INTO vPackagingId FROM packing_slip_material_receive_det WHERE id = pPackingSlipMaterialID AND deletedAt IS NULL;  \n" +
                "	IF (pPackagingId != vPackagingId) THEN  \n" +
                "		SELECT 	4 errorCode,  \n" +
                "			csspd.refPackingSlipDetailID,  \n" +
                "			csspd.refComponentSidStockID  \n" +
                "		FROM 	component_sid_stock_packing_detail csspd  \n" +
                "		WHERE	deletedAt IS NULL  \n" +
                "				AND refPackingSlipDetailID = pPackingSlipMaterialID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- Get detail of pending UMID part if it is existing in same bin of other packing slip in which new material is going to add then not allow to add material detail  \n" +
                "    IF pIsNonUMIDStock = FALSE THEN  \n" +
                "		SELECT 		2 errorCode,  \n" +
                "				psd.id,  \n" +
                "				p.packingSlipNumber,  \n" +
                "				psd.refPackingSlipMaterialRecID,  \n" +
                "				psd.partID,  \n" +
                "				c.mfgPN,  \n" +
                "				c.PIDCode,  \n" +
                "				p.mfgCodeID,  \n" +
                "				mfg.mfgCode,  \n" +
                "				mfg.mfgName,  \n" +
                "				psd.binID,  \n" +
                "				b.Name binName,  \n" +
                "                fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName, v_mfgNameFormat) mfgCodeName  \n" +
                "		FROM 		packing_slip_material_receive_det psd  \n" +
                "		INNER JOIN 	packing_slip_material_receive p ON psd.refPackingSlipMaterialRecID = p.id AND  p.receiptType = 'P' AND p.deletedAt IS NULL  \n" +
                "		INNER JOIN 	mfgCodemst AS mfg ON p.mfgCodeID = mfg.id AND mfg.deletedAt IS NULL  \n" +
                "		INNER JOIN 	component c ON psd.partID = c.id AND c.partType != 4 AND c.deletedAt IS NULL  \n" +
                "		INNER JOIN 	binMst b ON psd.binID = b.id AND b.deletedAt IS NULL  \n" +
                "		WHERE  		psd.id != IFNULL(pPackingSlipMaterialID, 0)  \n" +
                "					AND 	psd.umidCreated = 0  \n" +
                "					AND	p.id != pPackingSlipID  \n" +
                "					AND 	psd.binID = pBinID  \n" +
                "					AND 	psd.partID = pPartID  \n" +
                "					AND		psd.deletedAt IS NULL  \n" +
                "                    AND		psd.isNonUMIDStock = 0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- Get detail of pending UMID part if it is existing in same bin with packaging alies and same packaging and same spq of other packing slip in which new material is going to add then not allow to add material detail  \n" +
                "	SELECT 	GROUP_CONCAT(componentID)  \n" +
                "	INTO 	vPackagingAliesComponentId  \n" +
                "	FROM 	component_packagingalias  \n" +
                "	WHERE 	aliasgroupID = (SELECT aliasgroupID FROM component_packagingalias WHERE componentID = pPartID AND deletedAt IS NULL LIMIT 1);  \n" +
                "  IF pIsNonUMIDStock = FALSE THEN  \n" +
                "	SELECT 		5 errorCode,  \n" +
                "			psd.id,  \n" +
                "			p.packingSlipNumber,  \n" +
                "			psd.refPackingSlipMaterialRecID,  \n" +
                "			psd.partID,  \n" +
                "			c.mfgPN,  \n" +
                "			c.PIDCode,  \n" +
                "			p.mfgCodeID,  \n" +
                "			mfg.mfgCode,  \n" +
                "			mfg.mfgName,  \n" +
                "			psd.binID,  \n" +
                "			b.Name binName,  \n" +
                "			fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName, v_mfgNameFormat) mfgCodeName  \n" +
                "	FROM 		packing_slip_material_receive_det psd  \n" +
                "	INNER JOIN 	packing_slip_material_receive p ON psd.refPackingSlipMaterialRecID = p.id AND  p.receiptType = 'P' AND p.deletedAt IS NULL  \n" +
                "	INNER JOIN 	mfgCodemst AS mfg ON p.mfgCodeID = mfg.id AND mfg.deletedAt IS NULL  \n" +
                "	INNER JOIN 	component c ON psd.partID = c.id AND c.partType != 4 AND c.deletedAt IS NULL  \n" +
                "	INNER JOIN 	binMst b ON psd.binID = b.id AND b.deletedAt IS NULL  \n" +
                "	WHERE  		psd.id != IFNULL(pPackingSlipMaterialID, 0)  \n" +
                "				AND 	psd.umidCreated = 0  \n" +
                "				AND	p.id != pPackingSlipID  \n" +
                "				AND 	psd.binID = pBinID  \n" +
                "				AND 	FIND_IN_SET(psd.partID, IFNULL(vPackagingAliesComponentId, CAST(pPartID AS CHAR(11))))  \n" +
                "				AND 	c.minimum = pSpq  \n" +
                "				AND		psd.deletedAt IS NULL  \n" +
                "                AND		psd.isNonUMIDStock = 0;  \n" +
                "    END IF;  \n" +
                "        -- Get old received quantity to check further validation  \n" +
                "        SELECT	receivedQty  \n" +
                "        INTO 	vOldReceivedQty  \n" +
                "        FROM 	packing_slip_material_receive_det  \n" +
                "        WHERE 	id = pPackingSlipMaterialID  \n" +
                "			AND isDeleted = 0;  \n" +
                "        IF(pUpdatedReceivedQty > vOldReceivedQty) THEN  \n" +
                "		-- Update UMID created flag to false from API  \n" +
                "		SELECT 	0 errorCode,  \n" +
                "			partID,  \n" +
                "			orderedQty,  \n" +
                "			receivedQty,  \n" +
                "			0 updateUMIDCreated  \n" +
                "		FROM 	packing_slip_material_receive_det  \n" +
                "		WHERE 	id = pPackingSlipMaterialID  \n" +
                "				AND 	isDeleted = 0;  \n" +
                "	ELSEIF(pUpdatedReceivedQty < vOldReceivedQty) THEN  \n" +
                "		-- Get total UMID create qty  \n" +
                "		SELECT 		SUM(orgQty) INTO vUMIDCreatedQty  \n" +
                "		FROM 		component_sid_stock css  \n" +
                "		INNER JOIN 	component_sid_stock_packing_detail cssp ON css.id = cssp.refComponentSidStockID AND cssp.isDeleted = 0  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det psd ON cssp.refPackingSlipDetailID = psd.id  \n" +
                "					AND psd.id = pPackingSlipMaterialID  \n" +
                "					AND psd.isDeleted = 0  \n" +
                "		WHERE 		css.isdeleted = 0;  \n" +
                "  \n" +
                "		IF(vUMIDCreatedQty > pUpdatedReceivedQty) THEN  \n" +
                "			-- Restrict to user if created UMID qty is greater than updated qty  \n" +
                "			SELECT 	3 errorCode,  \n" +
                "				partID,  \n" +
                "				orderedQty,  \n" +
                "				receivedQty,  \n" +
                "				vUMIDCreatedQty umidCreatedQty  \n" +
                "			FROM 	packing_slip_material_receive_det  \n" +
                "			WHERE 	id = pPackingSlipMaterialID  \n" +
                "					AND isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			SELECT 	0 errorCode,  \n" +
                "				partID,  \n" +
                "				orderedQty,  \n" +
                "				receivedQty,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (vUMIDCreatedQty = pUpdatedReceivedQty) THEN  \n" +
                "							1  \n" +
                "						ELSE  \n" +
                "							0  \n" +
                "					END  \n" +
                "				) updateUMIDCreated  \n" +
                "			FROM 	packing_slip_material_receive_det  \n" +
                "			WHERE 	id = pPackingSlipMaterialID  \n" +
                "					AND isDeleted = 0;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT 8 errorCode,  \n" +
                "		qty RMAQty  \n" +
                "	FROM  \n" +
                "		packing_slip_material_receive_det_stock  \n" +
                "	WHERE refPackingSlipId = pPackingSlipID  \n" +
                "        AND partId = pPartID  \n" +
                "        AND packagingId = pPackagingId  \n" +
                "        AND binId = pBinID  \n" +
                "        AND isdeleted = 0  \n" +
                "        and qty > pUpdatedReceivedQty;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5725,'2.00','V1',' Bug 39718: QA Testing findings for MFGCodeNameFormat datakeys configuration in Purchase Order Supplier Packing slip - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5725:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitallocationLineDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitallocationLineDetails`(  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pkitAllocationLineItemId INT,  \n" +
                "    IN pIsConsolidated TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pKitqty INT DEFAULT 0;  \n" +
                "    DECLARE pCustomer VARCHAR(1000);  \n" +
                "    DECLARE pPIDCode VARCHAR(200);  \n" +
                "    DECLARE pCustomerID INT;  \n" +
                "    DECLARE pPartID INT;  \n" +
                "    DECLARE pRoHSName VARCHAR(100);  \n" +
                "    DECLARE pRoHSIcon VARCHAR(255);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    IF(pAssyID = 0) THEN  \n" +
                "		SELECT 	IFNULL(s.kitQty,0),  \n" +
                "					fun_GetFormattedMfgCode(mf.mfgCode, mf.mfgName, vMfgCodeFormat),  \n" +
                "					sm.customerID,	c.PIDCode,	c.id,	r.name, r.rohsIcon  \n" +
                "				INTO pKitqty, pCustomer, pCustomerID, pPIDCode, pPartID, pRoHSName,	pRoHSIcon  \n" +
                "					FROM salesorderdet s  \n" +
                "					JOIN salesordermst sm ON sm.id  = s.refSalesOrderID  \n" +
                "					JOIN component c ON s.partID = c.id AND c.isDeleted = 0  \n" +
                "					JOIN mfgcodemst mf ON sm.customerID = mf.id  AND mf.isDeleted = 0  \n" +
                "                    JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "					WHERE s.id = pRefSalesOrderDetID AND s.isDeleted = 0 AND sm.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT  IFNULL(k.totalAssyBuildQty,0),  \n" +
                "				fun_GetFormattedMfgCode(mf.mfgCode, mf.mfgName, vMfgCodeFormat),  \n" +
                "				sm.customerID,	c.PIDCode,	c.id,	r.name, r.rohsIcon  \n" +
                "			INTO pKitqty, pCustomer, pCustomerID, pPIDCode, pPartID, pRoHSName,	pRoHSIcon  \n" +
                "					FROM kit_allocation_assy_detail k  \n" +
                "					JOIN salesorderdet s ON s.id = k.refSalesOrderDetID  \n" +
                "					JOIN salesordermst sm ON sm.id  = s.refSalesOrderID  \n" +
                "                    JOIN mfgcodemst mf ON sm.customerID = mf.id  AND mf.isDeleted = 0  \n" +
                "                    JOIN component c ON s.partID = c.id AND c.isDeleted = 0  \n" +
                "                    JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "								AND k.partId = pAssyID  \n" +
                "								AND k.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "								AND k.isDeleted = 0  AND s.isDeleted = 0  AND sm.isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsConsolidated = 0) THEN  \n" +
                "		SELECT  \n" +
                "				c.id,			 	refSalesOrderDetID,		mfgPNID,  \n" +
                "                pPartID partID,								pPIDCode PIDCode,  \n" +
                "                pRoHSName rohsName,							pRoHSIcon rohsIcon,  \n" +
                "                pCustomer companyName, 						pCustomerID customerID,  \n" +
                "				lineID,			 	connecterTypeID,		numOfPosition,  \n" +
                "                uomID,			 	unitName,				uomClassID,  \n" +
                "				allocatedQty,		allocatedUnit,			allocatedPins,  \n" +
                "                consumeUnits, 		consumePin,  \n" +
                "				(CASE  \n" +
                "					WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "					ELSE (qpa * IFNULL(pKitQty, 0))  \n" +
                "				END) requiredQtyBuild,  \n" +
                "				(CASE  \n" +
                "					WHEN  \n" +
                "						(uomMismatchedStep = 0  \n" +
                "							OR connecterTypeID != - 2)  \n" +
                "					THEN  \n" +
                "						0  \n" +
                "					ELSE (qpa * IFNULL(pKitQty, 0) * IFNULL(numOfPosition, 0))  \n" +
                "				END) requirePinsBuild,  \n" +
                "                (CASE  \n" +
                "					WHEN  uomMismatchedStep = 0  OR isNotRequiredKitAllocation = 1  THEN  0  \n" +
                "					ELSE  \n" +
                "						CASE  \n" +
                "							WHEN (((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits)) < 0) THEN 0  \n" +
                "							ELSE ((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits))  \n" +
                "						END  \n" +
                "				END) shortagePerBuildQty,  \n" +
                "				(CASE  \n" +
                "									WHEN  uomMismatchedStep = 0  OR isNotRequiredKitAllocation = 1  THEN  0  \n" +
                "									ELSE  \n" +
                "										CASE  \n" +
                "											WHEN (((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + consumePin)) < 0) THEN 0  \n" +
                "											ELSE ((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + + consumePin))  \n" +
                "										END  \n" +
                "				END) shortagePerQtyBuildPins  \n" +
                "			FROM  \n" +
                "				(SELECT  \n" +
                "						k.id,	 		k.refSalesOrderDetID,		kal.mfgPNID,  \n" +
                "                        k.lineID,		cp.connecterTypeID,  		k.numOfPosition,  \n" +
                "                        k.uomID,		u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
                "						(CASE  \n" +
                "							WHEN  \n" +
                "								k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "							THEN  \n" +
                "								(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y'  \n" +
                "									OR k.isBuyDNPQty = 'P'  \n" +
                "									OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "							ELSE (IF(k.isBuyDNPQty = 'Y'  \n" +
                "								OR k.isBuyDNPQty = 'P'  \n" +
                "								OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "						END) AS qpa,  										k.refRfqLineitem AS rfqLineItemsId,  \n" +
                "						k.isNotRequiredKitAllocation,						kal.uomMismatchedStep,  \n" +
                "						IFNULL(ka.allocatedQty, 0) allocatedQty,			IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "						IFNULL(ka.allocatedPins, 0) allocatedPins,			IFNULL(ka.consumeUnits, 0) consumeUnits,  \n" +
                "						IFNULL(ka.consumeQty, 0) consumeQty,				IFNULL(ka.consumePin, 0) consumePin  \n" +
                "				FROM  \n" +
                "					kit_allocation_lineitems k  \n" +
                "					INNER JOIN kit_allocation_lineitems_alternatepart kal ON kal.refKitAllocationLineItemId = k.id AND kal.isDeleted = 0  \n" +
                "					INNER JOIN component cp ON kal.mfgPNID = cp.id AND cp.isGoodPart = 1 AND cp.isDeleted = 0  \n" +
                "                    INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "					LEFT JOIN vu_kit_allocation_summary ka ON k.refSalesOrderDetID = ka.refSalesOrderDetID  AND k.partID = ka.assyID  AND k.refRfqLineitem = ka.refBOMLineID  \n" +
                "					WHERE k.id = pkitAllocationLineItemId AND k.isDeleted = 0) AS c  \n" +
                "			GROUP BY id, refSalesOrderDetID, mfgPNID, qpa, lineID, uomID, unitName, uomClassID,  \n" +
                "					allocatedQty , allocatedUnit, allocatedPins, consumeUnits, connecterTypeID,  \n" +
                "					consumeQty, consumePin, uomMismatchedStep, isNotRequiredKitAllocation,  \n" +
                "					rfqLineItemsId, numOfPosition;  \n" +
                "		ELSE  \n" +
                "			SELECT  \n" +
                "					c.id,			 refSalesOrderDetID,		mfgPNID,  \n" +
                "					pPartID partID,								pPIDCode PIDCode,  \n" +
                "					pRoHSName rohsName,							pRoHSIcon rohsIcon,  \n" +
                "					pCustomer companyName, 						pCustomerID customerID,  \n" +
                "					lineID,			 	connecterTypeID,		numOfPosition,  \n" +
                "					uomID,			 	unitName,				uomClassID,  \n" +
                "					allocatedQty,		allocatedUnit,			allocatedPins,  \n" +
                "					consumeUnits, 		consumePin,  \n" +
                "					(CASE  \n" +
                "						WHEN uomMismatchedStep = 0 THEN 0  \n" +
                "						ELSE (qpa * IFNULL(pKitQty, 0))  \n" +
                "					END) requiredQtyBuild,  \n" +
                "					(CASE  \n" +
                "						WHEN  \n" +
                "							(uomMismatchedStep = 0  \n" +
                "								OR connecterTypeID != - 2)  \n" +
                "						THEN  \n" +
                "							0  \n" +
                "						ELSE (qpa * IFNULL(pKitQty, 0) * IFNULL(numOfPosition, 0))  \n" +
                "					END) requirePinsBuild,  \n" +
                "                    (CASE  \n" +
                "					WHEN  uomMismatchedStep = 0  OR isNotRequiredKitAllocation = 1  THEN  0  \n" +
                "					ELSE  \n" +
                "						CASE  \n" +
                "							WHEN (((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits)) < 0) THEN 0  \n" +
                "							ELSE ((IFNULL(qpa, 0) * pKitQty) - (allocatedUnit + consumeUnits))  \n" +
                "						END  \n" +
                "					END) shortagePerBuildQty,  \n" +
                "					(CASE  \n" +
                "						WHEN  uomMismatchedStep = 0  OR isNotRequiredKitAllocation = 1  THEN  0  \n" +
                "						ELSE  \n" +
                "							CASE  \n" +
                "								WHEN (((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + consumePin)) < 0) THEN 0  \n" +
                "								ELSE ((IFNULL(qpa, 0) * pKitQty * IFNULL(numOfPosition, 0)) - (allocatedPins + + consumePin))  \n" +
                "							END  \n" +
                "					END) shortagePerQtyBuildPins  \n" +
                "				FROM  \n" +
                "					(SELECT  \n" +
                "							k.id,	 		k.refSalesOrderDetID,	 	kal.mfgPNID,  \n" +
                "							k.lineID,		cp.connecterTypeID,  		k.numOfPosition,  \n" +
                "							k.uomID,		u.unitName unitName,		u.measurementTypeID uomClassID,  \n" +
                "							k.kitQPAWithDNP AS qpa,  					k.rfqLineItemsId AS rfqLineItemsId,  \n" +
                "							k.isNotRequiredKitAllocation,				k.uomMismatchedStep,  \n" +
                "							IFNULL(ka.allocatedQty, 0) allocatedQty,	IFNULL(ka.allocatedUnit, 0) allocatedUnit,  \n" +
                "							IFNULL(ka.allocatedPins, 0) allocatedPins,	IFNULL(ka.consumeUnits, 0) consumeUnits,  \n" +
                "							IFNULL(ka.consumeQty, 0) consumeQty,		IFNULL(ka.consumePin, 0) consumePin  \n" +
                "			FROM  \n" +
                "				kit_allocation_consolidate_line_detail k  \n" +
                "			INNER JOIN kit_allocation_consolidate_line_alternatepart kal ON kal.kitConsolidateID = k.id AND kal.isDeleted = 0  \n" +
                "            INNER JOIN component cp ON kal.mfgPNID = cp.id AND cp.isGoodPart = 1 AND cp.isDeleted = 0  \n" +
                "			INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "			LEFT JOIN 	vu_kit_allocation_summary ka ON k.refSalesOrderDetID = ka.refSalesOrderDetID  AND FIND_IN_SET(ka.refBOMLineID, k.consolidatedLineItemIDs)  \n" +
                "			WHERE k.id = pkitAllocationLineItemId AND k.isDeleted = 0) AS c  \n" +
                "		GROUP BY id, refSalesOrderDetID, mfgPNID, qpa, lineID, uomID, unitName, uomClassID,  \n" +
                "				allocatedQty , allocatedUnit, allocatedPins, consumeUnits, connecterTypeID,  \n" +
                "				consumeQty, consumePin, uomMismatchedStep, isNotRequiredKitAllocation,  \n" +
                "				rfqLineItemsId, numOfPosition;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveNonUMIDStockList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveNonUMIDStockList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "    IN pMfgCodeIds LONGTEXT,  \n" +
                "    IN pReceivedStatus VARCHAR(255),  \n" +
                "    IN pIsMPNExactSearch TINYINT,  \n" +
                "    IN pIsBinExactSearch TINYINT,  \n" +
                "    IN pIsPackingSlipExactSearch TINYINT,  \n" +
                "    IN pScanMPNPID LONGTEXT,  \n" +
                "    IN pScanBinWareHouse LONGTEXT,  \n" +
                "    IN pPackingSlip LONGTEXT,  \n" +
                "    IN pPackingSlipFromDate DATE,  \n" +
                "    IN pPackingSlipToDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE advanceFilterWhere VARCHAR(16383);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	SET advanceFilterWhere = ' AND 1 = 1 ';  \n" +
                "	IF(pWHId IS NOT NULL) THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And W.ID = ', pWHId ,' ');  \n" +
                "	END IF;  \n" +
                "	IF(pBinId IS NOT NULL ) THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And b.id = ', pBinId ,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY packingSlipDate DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1 = 1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pReceivedStatus IS NOT NULL) THEN  \n" +
                "       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pReceivedStatus IS NOT NULL) THEN  \n" +
                "       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND packingSlipDate BETWEEN'\", pPackingSlipFromDate ,\"' AND '\", pPackingSlipToDate ,\"'\");  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND packingSlipDate = '\", pPackingSlipFromDate ,\"' \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' AND (supplierCodeID in (',pMfgCodeIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   IF(pScanMPNPID IS NOT NULL) THEN  \n" +
                "		IF (pIsMPNExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,\" AND ( mfgPN LIKE '%\", pScanMPNPID ,\"%' OR pidCode LIKE '%\", pScanMPNPID ,\"%' ) \");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,\" AND ( mfgPN = '\", pScanMPNPID ,\"' OR pidCode = '\", pScanMPNPID ,\"' ) \");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pScanBinWareHouse IS NOT NULL)THEN  \n" +
                "		IF (pIsBinExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( binName LIKE \"%', pScanBinWareHouse ,'%\" OR warehouseName LIKE \"%', pScanBinWareHouse ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( warehouseName = \"', pScanBinWareHouse ,'\" OR binName = \"', pScanBinWareHouse ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPackingSlip IS NOT NULL)THEN  \n" +
                "		IF (pIsPackingSlipExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber LIKE \"%', pPackingSlip ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber = \"', pPackingSlip ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveNonUMIDStockList = CONCAT(\"  \n" +
                "		SELECT 	BinID,      	binName,      		WarehouseID,      		warehouseName,      	departmentId,      	departmentName,  \n" +
                "				PartId,  		packingSlipID, 		packingSlipName,  		poNumber,				poID,				mfgCodeID,  \n" +
                "                packagingType,  packingSlipDate,   	packingSlipNumber,  	supplierCodeID,  \n" +
                "				mfgName,		mfgPN,      		pidCode,     			RoHSStatusID,      		rohsIcon,      		rohsName,  \n" +
                "                nickname,		InQty,  			UMIDCreatedQty,			returnQty,				BalanceQty,    		isCustom,  \n" +
                "                receivedStatus,     				receivedStatusValue,   	packingSlipModeStatus,     					packingSlipModeStatusValue,  \n" +
                "                IF(sourceName = 'Tape & Reel', BalanceQty/umidSPQ, 0) AS noOfPackage,  \n" +
                "				fun_GetFormattedMfgCode(supplierCode, supplierName,\", vMfgCodeFormat ,\") AS supplierCodeName,  \n" +
                "				fun_GetFormattedMfgCode(mfgCode, mfgName,\", vMfgCodeFormat ,\") AS mfgCodeName  \n" +
                "		FROM 	(  \n" +
                "				SELECT	vucp.BinID,      		vucp.warehouseID WarehouseID,      		vucp.parentWarehouseID departmentId,  \n" +
                "						b.Name binName,  		IFNULL(c.umidSPQ, 0) umidSPQ,  \n" +
                "						vucp.packingSlipID,  \n" +
                "                        w.Name warehouseName,  \n" +
                "                        fun_getWarehouseNameByID(vucp.parentWarehouseID) departmentName,  \n" +
                "						vucp.PartId,      		c.mfgPN As mfgPN,      		c.PIDCode As pidCode,  \n" +
                "                        c.RoHSStatusID,  \n" +
                "						fun_getCOFCByPackingSlipID(vucp.packingSlipID) packingSlipName,  \n" +
                "						p.name packagingType,  \n" +
                "                        p.sourceName,  \n" +
                "						ps.packingSlipDate packingSlipDate,  \n" +
                "                        ps.packingSlipNumber,  \n" +
                "                        ps.poNumber,  \n" +
                "                        ps.refPurchaseOrderID as poID,  \n" +
                "						c.mfgCodeID,  \n" +
                "                        mp.mfgName,  \n" +
                "                        mp.mfgCode,  \n" +
                "                        ps.mfgCodeID supplierCodeID,  \n" +
                "                        ms.mfgName AS supplierName,  \n" +
                "                        ms.mfgCode AS supplierCode,  \n" +
                "						fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "						vucp.nickname,  \n" +
                "						vucp.InQty,				vucp.UMIDCreatedQty,      		vucp.returnQty,  \n" +
                "						vucp.BalanceQty,		c.isCustom,						c.partType,  \n" +
                "						vucp.receivedStatus,  \n" +
                "                        fun_getPackingSlipDetailStatusByKey(vucp.receivedStatus) receivedStatusValue,  \n" +
                "                        ps.packingSlipModeStatus,  \n" +
                "                        IF(ps.packingSlipModeStatus = 'D','Draft','Published') AS packingSlipModeStatusValue  \n" +
                "				FROM 		vu_umid_creation_pending vucp  \n" +
                "				INNER JOIN 	component c on vucp.PartId = c.id AND c.partType != 4 AND c.isdeleted = 0  \n" +
                "                INNER JOIN  mfgcodemst mp ON c.mfgCodeID = mp.id AND mp.isdeleted = 0  \n" +
                "				INNER JOIN 	binmst b on b.id = vucp.BinID AND b.isdeleted = 0  \n" +
                "                INNER JOIN 	component_packagingmst p on p.id = vucp.packagingID AND p.isdeleted = 0  \n" +
                "				INNER JOIN 	warehousemst w on w.ID = vucp.warehouseID AND w.isdeleted = 0  \n" +
                "				INNER JOIN	packing_slip_material_receive ps on ps.id = vucp.packingSlipID AND ps.isdeleted = 0  \n" +
                "                INNER JOIN  mfgcodemst ms ON ps.mfgCodeID = ms.id AND ms.isdeleted = 0  \n" +
                "				WHERE 		vucp.BalanceQty > 0 \" ,	advanceFilterWhere , \"  \n" +
                "			) As tempNonUMID  \n" +
                "		WHERE \", pWhereClause  \n" +
                "  \n" +
                "	);  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveNonUMIDStockList,\" ) c\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveNonUMIDStockList,\" ) c \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
                "	IN pAssyIDs VARCHAR(16383),  \n" +
                "	IN pRestrictPart TINYINT,  \n" +
                "	IN pExpireMaterial TINYINT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pIsShowPackagingAlias TINYINT,  \n" +
                "	IN pStandardIDs VARCHAR(16383),  \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),  \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),  \n" +
                "	IN pDateCode VARCHAR(16383),  \n" +
                "	IN pIsAvailableToSell TINYINT,  \n" +
                "	IN pIsRestrictedUMID TINYINT,  \n" +
                "	IN pIsInternalStock TINYINT,  \n" +
                "	IN pIsCustomerStock TINYINT,  \n" +
                "	IN pdepartmentIDs VARCHAR(16383),  \n" +
                "	IN pwarehouseType VARCHAR(255),  \n" +
                "	IN pWarehouse VARCHAR(16383),  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pSearchTextAttribute LONGTEXT,  \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),  \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
                "	IN pInventoryType VARCHAR(255),  \n" +
                "    IN pInnerQueryWhereClause VARCHAR(16383),  \n" +
                "    IN pIsNonCofc TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE attributeSearchString LONGTEXT;  \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "	DECLARE attributeSearchChip  VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);  \n" +
                "    DECLARE v_ExpiryDate datetime;  \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SET v_DescriptionWhereClause = '';  \n" +
                "    SET v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN  \n" +
                "		SET pInnerQueryWhereClause = ' ';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsNonCofc = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  packingSlipName IS NULL ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* Non COFc records filter */  \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN  \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
                "            into	v_PartIDs  \n" +
                "			FROM 	component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 	c.id = pPartId  \n" +
                "			AND 	c.isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			select pPartId into v_PartIDs;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*below query need to refactor*/  \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
                "		SET attributeSearchString = pSearchTextAttribute;  \n" +
                "		do_this:  \n" +
                "		LOOP  \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
                "				LEAVE do_this;  \n" +
                "			END IF;  \n" +
                "		END LOOP do_this;  \n" +
                "	END IF;  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "			AND partId IN (SELECT id FROM component WHERE isDeleted = 0 AND mfgcodeid=pCustomerId);  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;  \n" +
                "    CREATE temporary table temp_component_sid_stock(  \n" +
                "		  id int NOT NULL DEFAULT '0',  \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
                "		  uid varchar(15) DEFAULT NULL,  \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
                "		  fromUIDId int DEFAULT NULL,  \n" +
                "		  fromUID varchar(15) DEFAULT NULL,  \n" +
                "		  parentUIDId int DEFAULT NULL,  \n" +
                "		  parentUID varchar(15) DEFAULT NULL,  \n" +
                "		  mfgcodeID int NOT NULL,  \n" +
                "		  mfg text,  \n" +
                "		  refcompid int DEFAULT NULL,  \n" +
                "		  mfgPN varchar(100) NOT NULL,  \n" +
                "		  PIDCode varchar(109) NOT NULL,  \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,  \n" +
                "		  RoHSStatusID int NOT NULL,  \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
                "		  rohsName varchar(50) DEFAULT NULL,  \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
                "		  spq decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
                "		  uom int DEFAULT NULL,  \n" +
                "          uomClassID int DEFAULT NULL,  \n" +
                "		  uomName varchar(100) NOT NULL,  \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  packaginggroupID int DEFAULT NULL,  \n" +
                "		  packaging int DEFAULT NULL,  \n" +
                "		  packagingName varchar(100) NOT NULL,  \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
                "		  costCategoryID int DEFAULT NULL,  \n" +
                "		  costCategory varchar(147) DEFAULT NULL,  \n" +
                "		  lotCode varchar(255) DEFAULT NULL,  \n" +
                "		  dateCode varchar(10) DEFAULT NULL,  \n" +
                "		  UMIDrohsStatusID int NOT NULL,  \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
                "		  binID int DEFAULT NULL,  \n" +
                "		  location varchar(110) DEFAULT NULL,  \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  warehouseID int DEFAULT NULL,  \n" +
                "		  warehouse varchar(50) NOT NULL,  \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,  \n" +
                "		  department varchar(50) NOT NULL,  \n" +
                "		  departmentID int NOT NULL DEFAULT '0',  \n" +
                "		  fromBin int DEFAULT NULL,  \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,  \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  fromWarehouse int DEFAULT NULL,  \n" +
                "		  fromWHName varchar(50) NOT NULL,  \n" +
                "		  fromDepartment int DEFAULT NULL,  \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,  \n" +
                "		  orgRecBin int DEFAULT NULL,  \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
                "		  orgRecWarehouse int DEFAULT NULL,  \n" +
                "		  orgRecWHName varchar(50) NOT NULL,  \n" +
                "		  orgRecDepartment int DEFAULT NULL,  \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
                "		  expiryDate date DEFAULT NULL,  \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
                "		  pcbPerArray int DEFAULT NULL,  \n" +
                "		  nickName varchar(50) DEFAULT NULL,  \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,  \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,  \n" +
                "		  woNumber varchar(255) DEFAULT NULL,  \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,  \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
                "		  mountingTypeID int NOT NULL,  \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
                "		  partPackage varchar(50) DEFAULT NULL,  \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
                "		  detailDescription text,  \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
                "		  customerID int DEFAULT NULL,  \n" +
                "		  customer text,  \n" +
                "		  assyID int DEFAULT NULL,  \n" +
                "		  assembly varchar(109),  \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
                "          cpnMFGCodeID INT DEFAULT NULL,  \n" +
                "		  cpnMFGCode text,  \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,  \n" +
                "		  cpnMFGPN varchar(100),  \n" +
                "		  refSupplierPartId int DEFAULT NULL,  \n" +
                "		  supplierMFGCode text,  \n" +
                "		  supplieMFGPN varchar(100),  \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
                "		  isTransit varchar(10) DEFAULT NULL,  \n" +
                "		  searchUser varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
                "		  createdAt varchar(50) DEFAULT NULL,  \n" +
                "		  createdBy varchar(255) NOT NULL,  \n" +
                "		  createdByName varchar(50) DEFAULT NULL,  \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,  \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,  \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  allocatedToKit text,  \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
                "		  packingSupplierName text,  \n" +
                "		  packingSlipId int DEFAULT NULL,  \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,  \n" +
                "          packingSlipNumber VARCHAR(100) DEFAULT NULL,  \n" +
                "          cocDocumentCount int default 0,  \n" +
                "          parentCofCDocumentCount int default 0,  \n" +
                "          createByRoleId int default null,  \n" +
                "          updateByRoleId int default null,  \n" +
                "          isReservedStock TINYINT DEFAULT FALSE,  \n" +
                "          reservedStock VARCHAR(10)  \n" +
                "		);  \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
                "					(		id, 				scanlabel, 			umidPrefix, 			uid,					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType, 					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "                            parentUID, 			mfgcodeID, 			mfg, 					refcompid, 				mfgPN, 					PIDCode,  \n" +
                "                            packageQty, 		mslLevel, 			RoHSStatusID, 			rohsIcon, 				rohsName, 				mfgPNDescription,  \n" +
                "                            spq, 				pkgQty, 			pkgUnit, 				uom, 					uomClassID, 			uomName,  \n" +
                "                            orgPkgUnit, 		orgQty, 			packaginggroupID, 		packaging, 				packagingName, 			printStatus,  \n" +
                "                            tentativePrice, 	costScrapQty, 		costCategoryID, 		costCategory, 			lotCode, 				dateCode,  \n" +
                "                            UMIDrohsStatusID, 	UMIDrohsStatus, 	binID, 					location, 				side, 					warehouseID,  \n" +
                "                            warehouse, 			warehouseType, 		department, 			departmentID, 			fromBin, 				fromBinName,  \n" +
                "                            fromSide, 			fromWarehouse, 		fromWHName, 			fromDepartment, 		fromDepartmentName, 	orgRecBin,  \n" +
                "                            orgRecBinName, 		orgRecWarehouse, 	orgRecWHName, 			orgRecDepartment, 		orgRecDepartmentName, 	expiryDate,  \n" +
                "                            expiredStatus, 		pcbPerArray, 		nickName, 				specialNote, 			isinStk, 				woNumber,  \n" +
                "                            refRestrictUMIDId, 	isUMIDRestrict, 	UMIDRestricted, 		restrictUsePermanently, restrictUSEwithpermission,  \n" +
                "                            restrictPackagingUsePermanently, 		restrictPackagingUseWithpermission, 			reasonUMIDRestricted, 	countOfRestrictUMID,  \n" +
                "                            mountingTypeID, 	mountingTypeName, 	externalPartPackage, 	partPackage, 			internalPartPackage, 	isCustom,  \n" +
                "                            detailDescription, 	pictureCount, 		customerID, 			customer, 				assyID,					assembly,  \n" +
                "                            cpn, 				mfgAvailable, 		customerConsign, 		cpnMFGCodeID, 			cpnMFGCode, 			refCPNMFGPNID,  \n" +
                "                            cpnMFGPN, 			refSupplierPartId, 	supplierMFGCode, 		supplieMFGPN, 			totalScrapUnit, 		perScrapQty,  \n" +
                "                            isTransit, 			searchUser, 		mfrDateCodeFormatID, 	mfrDateCode, 			mfrDateCodeFormat, 		createdAt,  \n" +
                "                            createdBy, 			createdByName, 		createdbyRole, 			createdUserCode, 		createByRoleId, 		updatedAt,  \n" +
                "                            updatedBy, 			umidModifiedBy, 	updatedbyRole, 			updateByRoleId, 		allocatedToKit, 		packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId, 		packingSlipSupplierId, 	packingSlipNumber,		isReservedStock,		reservedStock)  \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomClassID,				uomName,  \n" +
                "                            orgPkgUnit,      	orgQty, 			packaginggroupID,		packaging,				packagingName,  		printStatus,  \n" +
                "                            tentativePrice,   	costScrapQty,		costCategoryID,			costCategory,			lotCode,  \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,  \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin,  \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName,  \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,  \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,  \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,  \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,  \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,  \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly,  \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCodeID,			cpnMFGCode, 		 	refCPNMFGPNID,  \n" +
                "                            cpnMFGPN,  			refSupplierPartId,	supplierMFGCode,		supplieMFGPN,			totalScrapUnit,			perScrapQty,  \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt,  \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt,  \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId,	packingSlipNumber,		isReservedStock,		reservedStock  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,  \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'  \n" +
                "										WHEN css.receiveMaterialType = 'CP' THEN 'Customer Consigned Part'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayReceiveMaterialType,  \n" +
                "								css.stockInventoryType,  \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Incoming Stock'  \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Move Non-Q2C to Q2C Stock'  \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Non-UMID Assembly Stock'  \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayStockInventoryType,  \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,  \n" +
                "								fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat ,\") AS mfg,			css.refcompid,				c.mfgPN,					c.PIDCode,  \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,  \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,  \n" +
                "								css.pkgUnit,				css.uom,					u.measurementTypeID uomClassID,							u.unitName uomName,  \n" +
                "                                IFNULL(css.orgPkgUnit, 0) orgPkgUnit, 					css.orgQty,					c.packaginggroupID,			css.packaging,  \n" +
                "                                cp.name packagingName,		css.printStatus, 			IFNULL(c.price, 0) tentativePrice,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * IFNULL(c.price, 0)), 2) costScrapQty,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * 100), 2) perScrapQty,  \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,  \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,  \n" +
                "								fun_GetFormattedMfgCode(cust.mfgCode, cust.mfgName,\", vMfgCodeFormat ,\") AS customer,  \n" +
                "								css.assyID,					assy.PIDCode assembly,  \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,  \n" +
                "								css.refCPNMFGPNID,	 m_cpn.id cpnMFGCodeID,  \n" +
                "                                fun_GetFormattedMfgCode(m_cpn.mfgCode, m_cpn.mfgName,\", vMfgCodeFormat ,\") AS cpnMFGCode,  \n" +
                "                                cpn_comp.mfgPN cpnMFGPN,  \n" +
                "                                css.refSupplierPartId,  \n" +
                "								fun_GetFormattedMfgCode(m_supp.mfgCode, m_supp.mfgName,\", vMfgCodeFormat ,\") AS supplierMFGCode,  \n" +
                "                                supp_comp.mfgPN supplieMFGPN,  \n" +
                "								(IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0)) totalScrapUnit,  \n" +
                "								null isTransit,  \n" +
                "								null searchUser,  \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,  \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,  \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
                "								kit.kitname allocatedToKit,  \n" +
                "								null packingSlipName,  \n" +
                "								null packingSupplierName,  \n" +
                "								null packingSlipId,  \n" +
                "								null packingSlipSupplierId,  \n" +
                "                                NULL packingSlipNumber,  \n" +
                "                                css.isReservedStock,  \n" +
                "                                IF(css.isReservedStock = 0,'No','Yes') AS reservedStock  \n" +
                "					FROM 		component_sid_stock css  \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
                "								else ''  \n" +
                "                        end),  \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
                "                        /*below query need to refactor*/  \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN  \n" +
                "							' AND not exists (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	rfq_lineitems_alternatepart a  \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
                "								)  \n" +
                "						' else '' end),  \n" +
                "					\"  \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id  \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  \n" +
                "					inner join uoms u on css.uom = u.id  \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
                "					inner join binmst b on css.binID = b.id \" ,  \n" +
                "						(Case  \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id  \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id  \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
                "					left join (  \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit  \n" +
                "								FROM 		component_sid_stock_history cssh  \n" +
                "								where 		cssh.scrappedUnit > 0  \n" +
                "								GROUP BY 	cssh.refUIDId  \n" +
                "					) cssh on css.id = cssh.refUIDId  \n" +
                "                   left join (  \n" +
                "								SELECT 		vu.umidid,	SUM((IFNULL(vu.scrappedunit,0) - IFNULL(vu.scrapExpiredUnit,0))) AS kitScrappepUnit  \n" +
                "								FROM 		vu_material_consumption_scrapped_det vu  \n" +
                "                                LEFT JOIN  component_sid_stock_history cssh ON cssh.id = vu.componentSIDStockHistoryID AND cssh.isDeleted = 0  \n" +
                "								WHERE 		vu.scrappedunit > 0  \n" +
                "								GROUP BY 	vu.umidid  \n" +
                "					) vuu on vuu.umidid = css.id  \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
                "					left join (  \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
                "						from (  \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
                "							from component_sid_stock_restrict_umid rest_umid  \n" +
                "						) css_rst where css_rst.rnk = 1  \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
                "					left join (  \n" +
                "						SELECT 		k.refUIDId,  \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname  \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)  \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3  \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "						INNER JOIN	component c ON k.assyID = c.id  \n" +
                "						WHERE 		k.status = 'A'  \n" +
                "						GROUP BY 	k.refUIDId  \n" +
                "					) kit  ON kit.refUIDId = css.id  \n" +
                "					WHERE 	css.isdeleted = 0\",  \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
                "							  when (pCustomerId IS NOT NULL) then  \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
                "                        (case when (pExpireMaterial = 1) THEN  \n" +
                "									(case when (pExpiredDay = 0) THEN  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate = fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") ')  \n" +
                "									ELSE  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate BETWEEN fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") AND (fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") + INTERVAL ', pExpiredDay,' DAY ) ')  \n" +
                "									END)  \n" +
                "							  else ''  \n" +
                "						end),  \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 else ''  \n" +
                "                        end),  \n" +
                "						v_DescriptionWhereClause,  \n" +
                "                        pInnerQueryWhereClause,  \n" +
                "				\") As tempUMID\"  \n" +
                "			);  \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock;  \n" +
                "	EXECUTE tempSQLQuery;  \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;  \n" +
                "  \n" +
                "    # Update count for self documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.cocDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "	# Update count for parent documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "    # Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
                "	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
                "											then CONCAT(ps.mfgCode, ps.packingSlipNumber)  \n" +
                "										else null  \n" +
                "								  end),  \n" +
                "			t.packingSupplierName = fun_GetFormattedMfgCode(ps.mfgCode, ps.mfgName, vMfgCodeFormat),  \n" +
                "			t.packingSlipId = ps.packingSlipId,  \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId,  \n" +
                "            t.packingSlipNumber = ps.packingSlipNumber  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)  \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI');  \n" +
                "  \n" +
                "	# Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t  \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
                "	and		t.packingSlipId is null  \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "  \n" +
                "    # Update created by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.createByRoleId  \n" +
                "	set t.createdbyRole = r.name;  \n" +
                "  \n" +
                "    # Update updated by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.updateByRoleId  \n" +
                "	set t.updatedbyRole = r.name;  \n" +
                "  \n" +
                "    # Update created by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on u.id = t.createdBy  \n" +
                "    inner join employees emp on emp.id = u.employeeID  \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
                "  \n" +
                "    # Update updated by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on  u.id = t.updatedBy  \n" +
                "    inner join employees emp  on emp.id = u.employeeID  \n" +
                "	set t.umidModifiedBy = emp.initialName ;  \n" +
                "  \n" +
                "    # Update MFR Date Code Format  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "	inner join dateCodeFormatMst d on  d.id = t.mfrDateCodeFormatID  \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
                "  \n" +
                "    # Update In Transit Data  \n" +
                "	Update temp_component_sid_stock t  \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
                "	set t.isTransit = 'Yes',  \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)  \n" +
                "							when (messagetype = 1001) then 'Unauthorized'  \n" +
                "							else ''  \n" +
                "                        end);  \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT DISTINCT mfgcodeID AS id, mfg AS mfgCodeName from ( \", @vFromSQLQuery, \") as mfrDetail\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT DISTINCT packingSlipSupplierId AS id, packingSupplierName AS  mfgCodeName from ( \", @vFromSQLQuery, \") as supplierDetail\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetAssyBOMGlanceDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMGlanceDetails`(  \n" +
                "	IN ppartID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	 DECLARE vMfgCodeFormat INT;  \n" +
                "	 SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "   # Create Temporary table for Assembly and its sub Assembly RoHS Status and Deviation  \n" +
                "		DROP temporary table if exists temp_AssyRohsStatusWithDeviation;  \n" +
                "		create temporary table temp_AssyRohsStatusWithDeviation as  \n" +
                "		select com.id, com.RoHSStatusID, ro.name as RoHSName, com.rohsDeviation from component com  \n" +
                "		Join rfq_rohsmst ro on ro.id = com.RoHSStatusID  \n" +
                "		where com.id in (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0);  \n" +
                "	# For get Mounting type wise glance Detail  \n" +
                "		SELECT  a.partID , 	a.AssyID, 											a.AssyPN, 				a.rohsConvertibleValue, 	a.rohsIcon,  \n" +
                "			a.`level`,	fun_getAssyTypeByID(a.assemblyType)  as assyType,	sum(a.qpa) AS `QPA`, 	SUM(a.dnpQty) `DNPQPA`,		SUM(a.dnpItemCount) `DNPItemCount`,  \n" +
                "			COUNT(a.id) AS `ItemCount`,										sum(a.KitCount) kitItemCount ,  \n" +
                "			b.mountingType  \n" +
                "		FROM  \n" +
                "			(  \n" +
                "				select 	rl.id,			rl.partID,				assypart.PIDCode AS AssyID,	assypart.mfgPN AS AssyPN,	ro.name AS rohsConvertibleValue,  \n" +
                "						ro.rohsIcon,	assypart.assemblyType,	(1-rl.isNotRequiredKitAllocation) KitCount  ,  \n" +
                "						(SELECT MAX(psar.`level`)+1 FROM part_sub_assy_relationship psar WHERE psar.partID = ppartID AND psar.prPerPartID = rl.partID) AS `level` ,  \n" +
                "						(case when rl.isInstall = 1 then ifnull(rl.qpa,0) else 0 end) qpa,  \n" +
                "						(case when rl.isInstall = 0 then ifnull(rl.dnpQty,0) + ifnull(rl.qpa,0) else ifnull(rl.dnpQty,0) end) dnpQty,  \n" +
                "						(case when rl.isInstall = 0 then 1 when ifnull(rl.dnpQty,0) > 0 then 1 else 0 end) dnpItemCount  \n" +
                "				FROM rfq_lineitems rl  \n" +
                "				INNER JOIN component assypart ON assypart.id = rl.partID  \n" +
                "				INNER JOIN rfq_rohsmst ro ON ro.id = assypart.RoHSStatusID  \n" +
                "				where rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "			) a  \n" +
                "			INNER JOIN  \n" +
                "			(  \n" +
                "				SELECT 	rl.id,  \n" +
                "				case when ifnull(max(com.mountingtypeID),'Unknown') = ifnull(min(com.mountingtypeID),'Unknown')  and ifnull(max(com.mountingtypeID),'Unknown') = 'Unknown' then  \n" +
                "						'Unknown'  \n" +
                "					when ifnull(max(com.mountingtypeID),'Unknown') = ifnull(min(com.mountingtypeID),'Unknown')  then  \n" +
                "						fun_getMountingTypeNameByID(max(com.mountingtypeID))  \n" +
                "					else 'Mismatched' end  as mountingType  \n" +
                "				FROM rfq_lineitems rl  \n" +
                "				Inner JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0  \n" +
                "				LEFT JOIN component com ON com.id = ra.mfgPNID  \n" +
                "				WHERE rl.partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "				AND rl.isDeleted = 0 and com.isGoodPart <> 2  \n" +
                "				GROUP BY rl.id,rl.partID  \n" +
                "			) b on a.id = b.id  \n" +
                "			GROUP BY a.partID , a.AssyID, a.AssyPN, a.rohsConvertibleValue, a.rohsIcon, a.`level`, b.mountingType;  \n" +
                "  \n" +
                "  # For get RoHS type wise glance Detail  \n" +
                "  SELECT  a.partID , 	a.AssyID, 											a.AssyPN, 				a.rohsConvertibleValue, 	a.rohsIcon,  \n" +
                "		a.`level`,	fun_getAssyTypeByID(a.assemblyType)  as assyType,	sum(a.qpa) AS `QPA`, 	SUM(a.dnpQty) `DNPQPA`,		SUM(a.dnpItemCount) `DNPItemCount`,  \n" +
                "		COUNT(a.id) AS `ItemCount`,										sum(a.KitCount) kitItemCount ,  \n" +
                "		b.RoHSStatus  \n" +
                "	FROM  \n" +
                "		(  \n" +
                "			select 	rl.id,			rl.partID,				assypart.PIDCode AS AssyID,	assypart.mfgPN AS AssyPN,	ro.name AS rohsConvertibleValue,  \n" +
                "					ro.rohsIcon,	assypart.assemblyType,	(1-rl.isNotRequiredKitAllocation) KitCount  ,  \n" +
                "					(SELECT MAX(psar.`level`)+1 FROM part_sub_assy_relationship psar WHERE psar.partID = ppartID AND psar.prPerPartID = rl.partID) AS `level` ,  \n" +
                "					(case when rl.isInstall = 1 then ifnull(rl.qpa,0) else 0 end) qpa,  \n" +
                "					(case when rl.isInstall = 0 then ifnull(rl.dnpQty,0) + ifnull(rl.qpa,0) else ifnull(rl.dnpQty,0) end) dnpQty,  \n" +
                "					(case when rl.isInstall = 0 then 1 when ifnull(rl.dnpQty,0) > 0 then 1 else 0 end) dnpItemCount  \n" +
                "			FROM rfq_lineitems rl  \n" +
                "			INNER JOIN component assypart ON assypart.id = rl.partID  \n" +
                "			INNER JOIN rfq_rohsmst ro ON ro.id = assypart.RoHSStatusID  \n" +
                "			where rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "		) a  \n" +
                "		INNER JOIN  \n" +
                "		(  \n" +
                "			SELECT 	rl.id,  \n" +
                "			case when ifnull(max(com.RoHSStatusID),'Unknown') = ifnull(min(com.RoHSStatusID),'Unknown')  and ifnull(max(com.RoHSStatusID),'Unknown') = 'Unknown' then  \n" +
                "					'Unknown'  \n" +
                "				when ifnull(max(com.RoHSStatusID),'Unknown') = ifnull(min(com.RoHSStatusID),'Unknown')  then  \n" +
                "					fun_getRoHSNameByID(max(com.RoHSStatusID))  \n" +
                "				else 'Mismatched' end  as RoHSStatus  \n" +
                "			FROM rfq_lineitems rl  \n" +
                "			Inner JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0  \n" +
                "			LEFT JOIN component com ON com.id = ra.mfgPNID  \n" +
                "			WHERE rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "			AND rl.isDeleted = 0  and com.isGoodPart <> 2  \n" +
                "			GROUP BY rl.id,rl.partID  \n" +
                "		) b on a.id = b.id  \n" +
                "		GROUP BY a.partID , a.AssyID, a.AssyPN, a.rohsConvertibleValue, a.rohsIcon,a.`level`, b.RoHSStatus;  \n" +
                "  \n" +
                "    # get Assembly Standard detail for glance  \n" +
                "        SELECT sc.className, sc.colorCode, cs.fullName AS standardName,csd.*  \n" +
                "		FROM component_standard_details csd  \n" +
                "		INNER JOIN certificate_standards cs ON cs.certificateStandardID = csd.certificateStandardID AND cs.isDeleted = 0  \n" +
                "		LEFT JOIN standard_class sc ON sc.classID = csd.ClassID AND sc.isDeleted = 0  \n" +
                "		WHERE csd.isDeleted = 0 AND csd.componentID = ppartID  \n" +
                "		ORDER BY cs.priority IS NULL,cs.priority ASC, cs.fullName ASC;  \n" +
                "  \n" +
                "    # Assembly detail  \n" +
                "	   SELECT com.id partID, com.PIDCode, com.mfgPN, com.mfgcodeID AS customerID,  \n" +
                "       fun_GetFormattedMfgCode(mf.mfgCode, mf.mfgName, vMfgCodeFormat) AS Customer,  \n" +
                "       com.mfgPNDescription,com.totalSolderPoints,  \n" +
                "		ro.name,ro.rohsIcon  \n" +
                "	   FROM component com  \n" +
                "       JOIN mfgcodemst mf ON com.mfgcodeID = mf.id  AND mf.isDeleted = 0  \n" +
                "	   JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID AND ro.isDeleted = 0  \n" +
                "	   WHERE com.id = ppartID;  \n" +
                "  \n" +
                "	# get RoHS Status by Part  \n" +
                "		SELECT 	rla.partID, count(1) partCount,  (case when com.RoHSStatusID is null then 'Unknown' else ro.name end) as RoHSStatus,  \n" +
                "		(case when tar.RoHSStatusID = com.RoHSStatusID then 'Yes' else 'No' end) as complientWithAssy  \n" +
                "		FROM rfq_lineitems_alternatepart rla  \n" +
                "        Join temp_AssyRohsStatusWithDeviation tar on tar.id = rla.partID  \n" +
                "		Left JOIN component com ON com.id = rla.mfgPNID  \n" +
                "        left Join rfq_rohsmst ro on ro.id = com.RoHSStatusID  \n" +
                "		WHERE rla.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "		AND rla.isDeleted = 0  \n" +
                "		GROUP BY rla.partID, RoHSStatus, complientWithAssy  \n" +
                "        order by RoHSStatus;  \n" +
                "  \n" +
                "	# Get RoHS Status By Item with All Complient parts with in Item(Compared with Assembly RoHS Requirement)  \n" +
                "		SELECT COUNT(1) AS `ItemCount`, a.partID,  \n" +
                "			(CASE WHEN MIN(RoHSStatus) = MAX(RoHSStatus) THEN RoHSStatus ELSE 'Mismatched' END) rohs,  \n" +
                "			(CASE WHEN MIN(complientWithAssy) = 1 THEN 'Yes' ELSE 'No' END) complientWithAssy  \n" +
                "		FROM  \n" +
                "			(SELECT rla.partID,  \n" +
                "					(CASE WHEN MIN(com.RoHSStatusID) = MAX(com.RoHSStatusID)  \n" +
                "						THEN  \n" +
                "							(CASE WHEN tar.RoHSStatusID = MAX(com.RoHSStatusID)  \n" +
                "								THEN ro.name  \n" +
                "								ELSE 'Mismatched'  \n" +
                "							END)  \n" +
                "						ELSE 'Mismatched'  \n" +
                "					END) RoHSStatus,  \n" +
                "					(CASE WHEN tar.RoHSStatusID = com.RoHSStatusID THEN 1 ELSE 0 END) AS complientWithAssy,  \n" +
                "					rla.rfqLineItemsID  \n" +
                "			FROM rfq_lineitems_alternatepart rla  \n" +
                "			JOIN temp_AssyRohsStatusWithDeviation tar ON tar.id = rla.partID  \n" +
                "			JOIN component com ON com.id = rla.mfgPNID  \n" +
                "			JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID  \n" +
                "			WHERE rla.partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "			AND rla.isDeleted = 0  \n" +
                "            GROUP BY rla.partID , rla.rfqLineItemsID, tar.RoHSStatusID, ro.name, com.RoHSStatusID  \n" +
                "            order by complientWithAssy) a  \n" +
                "		GROUP BY a.partID , a.RoHSStatus  \n" +
                "        order by complientWithAssy;  \n" +
                "  \n" +
                "	# RoHS Status By Item with minimum one compliant part within item ( Compared to assembly RoHS requirement)  \n" +
                "		SELECT  COUNT(1) AS `ItemCount`, b.partID, b.rohs, b.complientWithAssy, sum(deviationApproveCount) deviationApproveCount  \n" +
                "		FROM  \n" +
                "			(SELECT  a.partID,  \n" +
                "					(CASE WHEN MAX(complientWithAssy) = 1  \n" +
                "						THEN  \n" +
                "							(CASE WHEN MAX(LineRoHSStatus) = - 15 THEN 'Mismatched'    /* -15 added as Static value for Check mismatched*/  \n" +
                "									WHEN MAX(LineRoHSStatus) = - 10 THEN 'RoHS Deviation (Allowed w/ Eng. Approval)'  /* -10 added as Static value for Check RoHS Deviation*/  \n" +
                "									ELSE FUN_GETROHSNAMEBYID(MAX(LineRoHSStatus))  \n" +
                "							END)  \n" +
                "						ELSE 'Mismatched'  \n" +
                "					END) rohs,  \n" +
                "					(CASE WHEN MAX(complientWithAssy) = 1 THEN 'Yes'  \n" +
                "							ELSE 'No'  \n" +
                "					END) complientWithAssy,  \n" +
                "					sum(deviationApproveCount) deviationApproveCount,  \n" +
                "					a.rfqLineItemsID  \n" +
                "			FROM  \n" +
                "				(SELECT  rla.partID,  \n" +
                "					(CASE WHEN tar.RoHSStatusID = com.RoHSStatusID THEN com.RoHSStatusID  \n" +
                "							ELSE (CASE WHEN tar.rohsDeviation = - 2 AND rla.customerApproval = 'A' THEN - 10 ELSE - 15  END) /* -15 & -10 added as Static value for Check mismatched and RoHS Deviation*/  \n" +
                "					END) LineRoHSStatus,  \n" +
                "					ro.name AS RoHSStatus,  \n" +
                "					(CASE WHEN tar.RoHSStatusID = com.RoHSStatusID THEN 1 ELSE  \n" +
                "						(CASE WHEN tar.rohsDeviation = - 2 AND rla.customerApproval = 'A' THEN 1 ELSE 0  END)  \n" +
                "					 END) AS complientWithAssy,  \n" +
                "					 (CASE WHEN tar.rohsDeviation = - 2 AND rla.customerApproval = 'A' THEN 1 ELSE 0  END) deviationApproveCount,  \n" +
                "					rla.rfqLineItemsID  \n" +
                "				FROM rfq_lineitems_alternatepart rla  \n" +
                "				JOIN temp_AssyRohsStatusWithDeviation tar ON tar.id = rla.partID  \n" +
                "				JOIN component com ON com.id = rla.mfgPNID  \n" +
                "				JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID  \n" +
                "				WHERE rla.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "				AND rla.isDeleted = 0  \n" +
                "				ORDER BY rfqLineItemsID ASC , complientWithAssy DESC , LineRoHSStatus ASC  \n" +
                "				) a  \n" +
                "				GROUP BY a.partID , a.rfqLineItemsID  \n" +
                "				ORDER BY complientWithAssy  \n" +
                "			) b  \n" +
                "		GROUP BY b.partID , b.rohs, b.complientWithAssy  \n" +
                "		ORDER BY complientWithAssy;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5726,'2.00','V1','Bug 39757: MFR Code Data key not working as per selected value in UMID/Kit allocation flow - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5726:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "DROP TRIGGER IF EXISTS `TRG_AU_salesorder_plan_detailsmst`;  \n" +
                "CREATE TRIGGER `TRG_AU_salesorder_plan_detailsmst` AFTER UPDATE ON `salesorder_plan_detailsmst` FOR EACH ROW BEGIN  \n" +
                "		IF (NEW.isDeleted = 0) THEN  \n" +
                "			INSERT INTO kit_release_return_trans_history  \n" +
                "			(  \n" +
                "					salesOrderDetID, 	refAssyId, 			refPlanId, 		woID,				plannKitNumber,  \n" +
                "					releaseDate, 		releasedBy, 		releaseStatus, 	releasedNote, 		releaseKitNumber,  \n" +
                "					returnStatus, 		returnDate, 		returnBy, 		initiateReturnBy, 	initiateReturnAt,  \n" +
                "					createdBy, 			createdAt, 			updatedBy, 		updatedAt, 			isDeleted,  \n" +
                "					createByRoleId,		updateByRoleId  \n" +
                "				)  \n" +
                "			VALUES  \n" +
                "				(  \n" +
                "					new.salesOrderDetID, 		IFNULL(new.subAssyID, new.refAssyId), 		new.id, 				new.woID,  \n" +
                "					new.plannKitNumber, 		new.actualKitReleaseDate, 					new.releasedBy, 		new.kitStatus,  \n" +
                "					new.releasedNote, 			new.releaseKitNumber, 						new.kitReturnStatus, 	new.kitReturnDate,  \n" +
                "					new.kitReturnBy, 			new.initiateReturnBy, 						new.initiateReturnAt, 	new.createdBy,  \n" +
                "					new.createdAt, 				new.updatedBy, 								new.updatedAt, 			0,  \n" +
                "					new.createByRoleId,			new.updateByRoleId  \n" +
                "				);  \n" +
                "        END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5727,'2.00','V1','Bug 39807: QA Testing for User Story 34796: Kit Released And Return Flow changes for Re-released Kit Plan 27-12-2021 - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 5727:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "SELECT pageID INTO @pageID FROM page_detail WHERE pageName = 'Kit Management';  \n" +
                "INSERT INTO page_detail (`pageName`, `RO`, `RW`,  `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`,  \n" +
                "`orderBy`, `iconClass`, `isActive`, `createdBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`)  \n" +
                "VALUES ('Sub Assembly Kit List', '0', '0', 'app.transaction.subkitlist', '/subkitlist',  \n" +
                "'Sub Assembly Kit List', @pageID , '0', '40.02', 't-icons-kit-list-2', '1', '1', '0', '1', 'Sub Assembly Kit List', '0');  \n" +
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "UPDATE page_detail SET pageRoute = 'app.transaction.kitlist' WHERE pageName = 'Kit List';  \n" +
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetAssemblyLevelDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyLevelDetails`(  \n" +
                "	IN pRefSalesOrderDetID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT  kaad.bomAssyLevel, kaad.perAssyBuildQty, kaad.refSalesOrderDetID, kaad.partId,  \n" +
                "			cassy.mfgPN, cassy.PIDCode  \n" +
                "	FROM kit_allocation_assy_detail kaad  \n" +
                "	INNER JOIN  component cassy ON kaad.partId = cassy.id AND cassy.isDeleted = 0 AND cassy.parttype IN (3,2)  \n" +
                "	LEFT JOIN  rfq_rohsmst roassy ON cassy.RoHSStatusID = roassy.id AND roassy.isDeleted = 0  \n" +
                "	WHERE kaad.isDeleted = 0 AND kaad.refSalesOrderDetID = pRefSalesOrderDetID  \n" +
                "    ORDER BY kaad.refSalesOrderDetID, kaad.bomAssyLevel;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsSubAssembly TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE,  \n" +
                "    IN pSubAssemblyTab TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            (CASE WHEN kaad.bomAssyLevel = 0 THEN kaad.bomInternalVersionString ELSE 'N/A' END) AS kitAllocationInternalVersion,  \n" +
                "            kaad.bomAssyLevel  \n" +
                "		\");  \n" +
                "  \n" +
                "	SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND kaad.isDeleted = 0\") ;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetKitList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				(CASE WHEN assyID = partID THEN 0 ELSE 1 END) AS isSubAssembly,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned,  \n" +
                "				fun_getKitReleaseStatus(subKitStatusPercentage,totalKitQty,totalPOQty,assyKitQty,assyPOQty,releasedPlanCount,pendingCount) AS  kitReleaseStatus,  \n" +
                "				fun_getKitReturnStatus(pendingReleaseCount,releasedNotReturnedCount,returnedCount,readyToReturnCount,shortageReturnCount) AS kitReturnStatus  \n" +
                "		FROM  \n" +
                "			(SELECT  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "                `vuss`.`Status` AS completedStatus,  \n" +
                "                (  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "                				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "                p.releasedPlanCount,  \n" +
                "                p.pendingCount,  \n" +
                "                vrr.pendingReleaseCount,  \n" +
                "                vrr.releasedNotReturnedCount,  \n" +
                "                vrr.returnedCount,  \n" +
                "                vrr.readyToReturnCount,  \n" +
                "                vrr.shortageReturnCount,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				`vuss`.`PartID` AS assyID,  \n" +
                "                ro.rohsIcon,  \n" +
                "                ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "                `vuss`.`custAssyPN` AS custAssyPN,  \n" +
                "                `vuss`.`liveVersion` AS liveVersion,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "                `vuss`.`kitQty` AS kitQty,  \n" +
                "				(CASE  WHEN (`vuss`.`isHotJob` = 0) THEN  'No'  \n" +
                "					   WHEN (`vuss`.`isHotJob` = 1) THEN  'Yes'  \n" +
                "					   ELSE  ''  END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "                (  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				`vuss`.`price` AS price,`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				fun_GetFormattedMfgCode(vuss.mfgCode, vuss.mfgName,\", vMfgCodeFormat ,\") AS companyName,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				`vuss`.`Balanced Due Qty` AS openQty,  \n" +
                "				`vuss`.frequency AS frequencyName,  \n" +
                "				vuss.frequencyType AS frequencyTypeName,  \n" +
                "				case when vuss.refSODetID is not null then sa.salesAssy else '' end  AS salesAssy,  \n" +
                "				sr.salesRelease AS salesRelease,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				vuss.assignQty AS assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO = 1 AND vuss.blanketPOOption = 2 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) AS  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) AS totalextPriceDisplayValue,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				vuss.poRevisionDate  AS poRevisionDate,  \n" +
                "				vuss.releaseLevelComment AS releaseLevelComment,  \n" +
                "				vuss.blanketPOOption,  \n" +
                "				vuss.blanketPOOptionText,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) AS pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "                ifnull(p.ishotjob,0) AS isBuildWiseHotJob ,  \n" +
                "                p.nextShipDate AS nextShipDate,  \n" +
                "                wo.WONumber AS workorders,  \n" +
                "                wo.WOIds AS workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				hutkit.refType AS refTypeKA,  \n" +
                "				hutkit.status AS haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' ON ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "				kaad.perAssyBuildQty,  \n" +
                "				kaad.partId AS partID,  \n" +
                "                cassy.PIDCode AS assyPIDCode,  \n" +
                "				cassy.mfgPN AS assyMfgPN,  \n" +
                "                roassy.rohsIcon AS assyRohsIcon,  \n" +
                "                roassy.name assyRohsName,  \n" +
                "				cassy.isCustom AS assyIsCustomPart,  \n" +
                "                cassy.custAssyPN AS assyCustAssyPN,  \n" +
                "                cassy.nickName AS assyNickName,  \n" +
                "				cassy.mfgPNDescription AS assyPartDescription,  \n" +
                "				IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`PO Qty`,0) AS assyPOQty,  \n" +
                "				IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`mrpQty`,0) AS assyMRPQty,  \n" +
                "				IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`kitQty`,0) AS assyKitQty,  \n" +
                "				(CASE WHEN kaad.bomAssyLevel = 0 THEN COUNT(1) OVER (PARTITION BY kaad.refSalesOrderDetID) - 1 ELSE 0 END) AS subAssyCount\",v_DynamicColumns, \"  \n" +
                "		FROM   vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "			INNER JOIN  component cassy ON kaad.partId = cassy.id AND cassy.isDeleted = 0 AND cassy.parttype IN (3,2)  \n" +
                "			LEFT JOIN  rfq_rohsmst roassy ON cassy.RoHSStatusID = roassy.id AND roassy.isDeleted = 0  \n" +
                "			LEFT JOIN (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s INNER JOIN component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 AND c.parttype IN (3,2)) AS sa ON sa.id = vuss.refSODetID  \n" +
                "			LEFT JOIN (SELECT shippingid,Sdetid, qty, CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),'%m/%d/%y')) salesRelease  \n" +
                "					FROM salesshippingmst  b WHERE isdeleted = 0 ) AS sr ON sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "			LEFT JOIN (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details WHERE isdeleted = 0  \n" +
                "					GROUP BY refSalesOrderDetID ) AS so ON so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "			LEFT JOIN (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds, GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE  wsd.isdeleted = 0  \n" +
                "					GROUP BY wsd.salesOrderDetailID  \n" +
                "				) AS wo ON wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "			LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  refAssyId, subAssyID,  \n" +
                "							MAX(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  AND  kitStatus!='R' then 1 else 0 end )  AS ishotjob,  \n" +
                "							MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "							MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "							COUNT(1) totalPlan,  \n" +
                "							SUM(poQty) totalPOQty,  \n" +
                "							SUM(kitReleaseQty) totalKitQty,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "							SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  WHERE 	isDeleted = 0  \n" +
                "					GROUP BY salesOrderDetID,	refAssyId,	subAssyID  \n" +
                "				) AS p ON p.salesOrderDetID = `vuss`.`salesOrderDetailId` AND p.refAssyId = vuss.partId  \n" +
                "					AND (CASE WHEN p.subAssyID IS NOT NULL THEN p.subAssyID = kaad.partId END)  \n" +
                "			LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  refAssyId, subAssyID,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToReturnCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId AND vrr.refAssyId = vuss.partId  \n" +
                "        AND (CASE WHEN vrr.subAssyID IS NOT NULL THEN vrr.subAssyID = kaad.partId END)  \n" +
                "		LEFT JOIN 	(  \n" +
                "			SELECT 	refSalesOrderDetID, assyID, mainAssy,  \n" +
                "					(k.totalLine - k.totalNotRequireLine) AS totalLine,  \n" +
                "					k.shortageLine,  \n" +
                "					Round(k.allocPerComponent,2) allocPerComponent,  \n" +
                "					Round(k.allocPerWithSubAssy,2) allocPerWithSubAssy,  \n" +
                "					Round((k.shortageLine/k.totalLine)*100) AS shortagePer  \n" +
                "			FROM  \n" +
                "				(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
                "						COUNT(1) AS `totalLine`,  \n" +
                "						SUM( k.shortageline) shortageline,  \n" +
                "						SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "						(CASE WHEN assyID = mainAssy THEN  MIN(mainAssyPerForSubAssy) ELSE ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) END) AS allocPerWithSubAssy,  \n" +
                "						(CASE WHEN assyID = mainAssy THEN  MIN(mainAssyPerForComponent) ELSE ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) END) AS allocPerComponent  \n" +
                "				FROM  \n" +
                "					(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
                "							k.qpaWithDnp, k.allocationPer, k.isNotRequiredKitAllocation,  \n" +
                "							k.shortageline,  \n" +
                "							SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForSubAssy,  \n" +
                "							SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN k.MainAssyLine ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForComponent  \n" +
                "				 FROM  \n" +
                "						(SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "								vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "								IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "								(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "								(case when vk.assyid = sd.partid then vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "								(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "								(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "								vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "							FROM  	`vu_kit_allocation_detail` vk  \n" +
                "							INNER JOIN    salesorderdet sd ON vk.refSalesorderdetid  = sd.id  \n" +
                "							WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "						) AS k  \n" +
                "					) AS k GROUP bY assyID, refSalesorderdetid, mainAssy  \n" +
                "				) AS k  \n" +
                "            ) AS ka ON ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` AND ka.mainAssy =  `vuss`.`PartID` AND ka.assyID = kaad.partId  \n" +
                "			LEFT JOIN  rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN  holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId AND hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId AND htk.refType='KA' AND htk.isDeleted=0)  \n" +
                "            LEFT JOIN (SELECT ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) AS initialStockCount  \n" +
                "							FROM assemblystock ass WHERE ass.isDeleted =0 AND ass.type = 'OS'  \n" +
                "                            GROUP BY ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID)  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` AND astk.refSalesOrderID = vuss.`Sales Order ID` AND astk.partID = kaad.partId  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY (nextReleaseDate IS NULL),  nextReleaseDate ASC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  #need to check once  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "       ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pIsSubAssembly = 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND isSubAssembly = 0 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSubAssemblyTab = 1) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND subAssyCount > 0 \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#select @temp_Sproc_GetKitList;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetKitList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount, sum(subAssyCount) SubAssemblyCount  FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5728,'2.00','V1','User Story 39149: Display Sub Assembly in Kit List and sub assembly related separate list display in new tab - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5728:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsSubAssembly TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE,  \n" +
                "    IN pSubAssemblyTab TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            (CASE WHEN kaad.bomAssyLevel = 0 THEN kaad.bomInternalVersionString ELSE 'N/A' END) AS kitAllocationInternalVersion,  \n" +
                "            kaad.bomAssyLevel  \n" +
                "		\");  \n" +
                "  \n" +
                "	SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND kaad.isDeleted = 0\") ;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetKitList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				(CASE WHEN assyID = partID THEN 0 ELSE 1 END) AS isSubAssembly,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned,  \n" +
                "				fun_getKitReleaseStatus(subKitStatusPercentage,totalKitQty,totalPOQty,assyKitQty,assyPOQty,releasedPlanCount,pendingCount) AS  kitReleaseStatus,  \n" +
                "				fun_getKitReturnStatus(pendingReleaseCount,releasedNotReturnedCount,returnedCount,readyToReturnCount,shortageReturnCount) AS kitReturnStatus  \n" +
                "		FROM  \n" +
                "			(SELECT  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "                `vuss`.`Status` AS completedStatus,  \n" +
                "                (  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "                				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "                p.releasedPlanCount,  \n" +
                "                p.pendingCount,  \n" +
                "                vrr.pendingReleaseCount,  \n" +
                "                vrr.releasedNotReturnedCount,  \n" +
                "                vrr.returnedCount,  \n" +
                "                vrr.readyToReturnCount,  \n" +
                "                vrr.shortageReturnCount,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				`vuss`.`PartID` AS assyID,  \n" +
                "                ro.rohsIcon,  \n" +
                "                ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "                `vuss`.`custAssyPN` AS custAssyPN,  \n" +
                "                `vuss`.`liveVersion` AS liveVersion,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "                `vuss`.`kitQty` AS kitQty,  \n" +
                "				(CASE  WHEN (`vuss`.`isHotJob` = 0) THEN  'No'  \n" +
                "					   WHEN (`vuss`.`isHotJob` = 1) THEN  'Yes'  \n" +
                "					   ELSE  ''  END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "                (  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				`vuss`.`price` AS price,`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				fun_GetFormattedMfgCode(vuss.mfgCode, vuss.mfgName,\", vMfgCodeFormat ,\") AS companyName,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				`vuss`.`Balanced Due Qty` AS openQty,  \n" +
                "				`vuss`.frequency AS frequencyName,  \n" +
                "				vuss.frequencyType AS frequencyTypeName,  \n" +
                "				case when vuss.refSODetID is not null then sa.salesAssy else '' end  AS salesAssy,  \n" +
                "				sr.salesRelease AS salesRelease,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				vuss.assignQty AS assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO = 1 AND vuss.blanketPOOption = 2 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) AS  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) AS totalextPriceDisplayValue,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				vuss.poRevisionDate  AS poRevisionDate,  \n" +
                "				vuss.releaseLevelComment AS releaseLevelComment,  \n" +
                "				vuss.blanketPOOption,  \n" +
                "				vuss.blanketPOOptionText,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) AS pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "                ifnull(p.ishotjob,0) AS isBuildWiseHotJob ,  \n" +
                "                p.nextShipDate AS nextShipDate,  \n" +
                "                wo.WONumber AS workorders,  \n" +
                "                wo.WOIds AS workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				hutkit.refType AS refTypeKA,  \n" +
                "				hutkit.status AS haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' ON ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutkit.startDate))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "				kaad.perAssyBuildQty,  \n" +
                "				kaad.partId AS partID,  \n" +
                "                cassy.PIDCode AS assyPIDCode,  \n" +
                "				cassy.mfgPN AS assyMfgPN,  \n" +
                "                roassy.rohsIcon AS assyRohsIcon,  \n" +
                "                roassy.name assyRohsName,  \n" +
                "				cassy.isCustom AS assyIsCustomPart,  \n" +
                "                cassy.custAssyPN AS assyCustAssyPN,  \n" +
                "                cassy.nickName AS assyNickName,  \n" +
                "				cassy.mfgPNDescription AS assyPartDescription,  \n" +
                "				IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`PO Qty`,0) AS assyPOQty,  \n" +
                "				IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`mrpQty`,0) AS assyMRPQty,  \n" +
                "				IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`kitQty`,0) AS assyKitQty,  \n" +
                "				(CASE WHEN kaad.bomAssyLevel = 0 THEN COUNT(1) OVER (PARTITION BY kaad.refSalesOrderDetID) - 1 ELSE 0 END) AS subAssyCount\",v_DynamicColumns, \"  \n" +
                "		FROM   vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "			INNER JOIN  component cassy ON kaad.partId = cassy.id AND cassy.isDeleted = 0 AND cassy.parttype IN (3,2)  \n" +
                "			LEFT JOIN  rfq_rohsmst roassy ON cassy.RoHSStatusID = roassy.id AND roassy.isDeleted = 0  \n" +
                "			LEFT JOIN (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s INNER JOIN component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 AND c.parttype IN (3,2)) AS sa ON sa.id = vuss.refSODetID  \n" +
                "			LEFT JOIN (SELECT shippingid,Sdetid, qty, CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),'%m/%d/%y')) salesRelease  \n" +
                "					FROM salesshippingmst  b WHERE isdeleted = 0 ) AS sr ON sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "			LEFT JOIN (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details WHERE isdeleted = 0  \n" +
                "					GROUP BY refSalesOrderDetID ) AS so ON so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "			LEFT JOIN (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds, GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE  wsd.isdeleted = 0  \n" +
                "					GROUP BY wsd.salesOrderDetailID  \n" +
                "				) AS wo ON wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "			LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  refAssyId, subAssyID,  \n" +
                "							MAX(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  AND  kitStatus!='R' then 1 else 0 end )  AS ishotjob,  \n" +
                "							MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "							MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "							COUNT(1) totalPlan,  \n" +
                "							SUM(poQty) totalPOQty,  \n" +
                "							SUM(kitReleaseQty) totalKitQty,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "							SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  WHERE 	isDeleted = 0  \n" +
                "					GROUP BY salesOrderDetID,	refAssyId,	subAssyID  \n" +
                "				) AS p ON p.salesOrderDetID = `vuss`.`salesOrderDetailId` AND p.refAssyId = vuss.partId  \n" +
                "					AND (CASE WHEN p.subAssyID IS NOT NULL THEN p.subAssyID = kaad.partId END)  \n" +
                "			LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  refAssyId, subAssyID,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToReturnCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId AND vrr.refAssyId = vuss.partId  \n" +
                "        AND (CASE WHEN vrr.subAssyID IS NOT NULL THEN vrr.subAssyID = kaad.partId END)  \n" +
                "		LEFT JOIN 	(  \n" +
                "			SELECT 	refSalesOrderDetID, assyID, mainAssy,  \n" +
                "					(k.totalLine - k.totalNotRequireLine) AS totalLine,  \n" +
                "					k.shortageLine,  \n" +
                "					Round(k.allocPerComponent,2) allocPerComponent,  \n" +
                "					Round(k.allocPerWithSubAssy,2) allocPerWithSubAssy,  \n" +
                "					Round((k.shortageLine/k.totalLine)*100) AS shortagePer  \n" +
                "			FROM  \n" +
                "				(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
                "						COUNT(1) AS `totalLine`,  \n" +
                "						SUM( k.shortageline) shortageline,  \n" +
                "						SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "						(CASE WHEN assyID = mainAssy THEN  MIN(mainAssyPerForSubAssy) ELSE ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) END) AS allocPerWithSubAssy,  \n" +
                "						(CASE WHEN assyID = mainAssy THEN  MIN(mainAssyPerForComponent) ELSE ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) END) AS allocPerComponent  \n" +
                "				FROM  \n" +
                "					(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
                "							k.qpaWithDnp, k.allocationPer, k.isNotRequiredKitAllocation,  \n" +
                "							k.shortageline,  \n" +
                "							SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForSubAssy,  \n" +
                "							SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN k.MainAssyLine ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForComponent  \n" +
                "				 FROM  \n" +
                "						(SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "								vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "								IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "								(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "								(case when vk.assyid = sd.partid then vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "								(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "								(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "								vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "							FROM  	`vu_kit_allocation_detail` vk  \n" +
                "							INNER JOIN    salesorderdet sd ON vk.refSalesorderdetid  = sd.id  \n" +
                "							WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "						) AS k  \n" +
                "					) AS k GROUP bY assyID, refSalesorderdetid, mainAssy  \n" +
                "				) AS k  \n" +
                "            ) AS ka ON ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` AND ka.mainAssy =  `vuss`.`PartID` AND ka.assyID = kaad.partId  \n" +
                "			LEFT JOIN  rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN  holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId AND hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId AND htk.refType='KA' AND htk.isDeleted=0)  \n" +
                "            LEFT JOIN (SELECT ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) AS initialStockCount  \n" +
                "							FROM assemblystock ass WHERE ass.isDeleted =0 AND ass.type = 'OS'  \n" +
                "                            GROUP BY ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID)  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` AND astk.refSalesOrderID = vuss.`Sales Order ID` AND astk.partID = kaad.partId  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY (nextReleaseDate IS NULL),  nextReleaseDate ASC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  #need to check once  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "       ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pIsSubAssembly = 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND isSubAssembly = 0 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSubAssemblyTab = 1) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND subAssyCount > 0 \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#select @temp_Sproc_GetKitList;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetKitList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount, sum(subAssyCount) SubAssemblyCount  FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5729,'2.00','V1','Bug 40117: Date & Time showing wrong at halted tool tip in kit allocation while change time zone - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5729:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022 *********************************** */
                "drop procedure if exists `Sproc_GetPackingSlipInvoiceHeaderSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipInvoiceHeaderSearch`(  \n" +
                "	pReceiptType varchar(2),  \n" +
                "    pSearchQery varchar(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_mfgNameFormat int;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "	if pReceiptType in ('SP','RR') then /*SP = supplier payment, rr = Supplier Refund (refund receivable)*/  \n" +
                "		Select a.*  \n" +
                "		from (  \n" +
                "				Select 	p.id,  \n" +
                "						(Case when (pReceiptType in ('SP','RR')) then  \n" +
                "									concat(p.paymentNumber, ' | ', fun_ApplyCommonDateFormat(p.paymentDate), ' | ', fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat)) /*Supplier Payment and Refund: PAY# | Payment Date | Supplier (Code) Name */  \n" +
                "								else  \n" +
                "									null  \n" +
                "						end) formattedTransNumber  \n" +
                "				from	packingslip_invoice_payment p  \n" +
                "                join mfgcodemst m ON m.id = p.mfgcodeID  \n" +
                "				Where 	p.refPaymentMode = case when pReceiptType = 'SP' then 'P'  \n" +
                "												else pReceiptType end  \n" +
                "				and 	p.isDeleted = 0  \n" +
                "			) as a  \n" +
                "			where (case when pSearchQery is not null then  \n" +
                "							a.formattedTransNumber like concat('%', pSearchQery, '%')  \n" +
                "						else 1 = 0  \n" +
                "					end);  \n" +
                "    else /*Supplier packing slip, invoice, CM, DM, RMA*/  \n" +
                "		Select a.*  \n" +
                "		from (  \n" +
                "				Select 	p.id,  \n" +
                "						(Case 	when (pReceiptType = 'P') then  \n" +
                "									concat(p.packingSlipNumber, ' | ', p.poNumber, ' | ', fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat)) /*Material Receipt: PS# | PO# | Supplier (Code) Name */  \n" +
                "								when (pReceiptType = 'I') then  \n" +
                "									concat(p.invoiceNumber, ' | ', p.packingSlipNumber, ' | ', p.poNumber, ' | ', fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat)) /*Supplier Invoice: INV# | PS# | PO# | Supplier (Code) Name*/  \n" +
                "								when (pReceiptType = 'C') then  \n" +
                "									concat(p.creditMemoNumber, ' | ', p.poNumber, ' | ', fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat)) /*Supplier Credit Memo: CM# | PO# | Supplier (Code) Name */  \n" +
                "								when (pReceiptType = 'D') then  \n" +
                "									concat(p.debitMemoNumber, ' | ', p.poNumber, ' | ', fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat)) /*Supplier Debit Memo: DM# | PO# | Supplier (Code) Name */  \n" +
                "								when (pReceiptType = 'R') then  \n" +
                "									concat(p.poNumber, ' | ', p.packingSlipNumber, ' | ', fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat)) /*Supplier RMA: RMA# | PS# | Supplier (Code) Name */  \n" +
                "								else  \n" +
                "									null  \n" +
                "						end) formattedTransNumber  \n" +
                "				from	packing_slip_material_receive p  \n" +
                "				inner join mfgCodeMst m on m.id = p.mfgCodeID  \n" +
                "				Where 	p.receiptType = pReceiptType  \n" +
                "				and 	p.isDeleted = 0  \n" +
                "		) as a  \n" +
                "		where (case when pSearchQery is not null then  \n" +
                "						a.formattedTransNumber like concat('%', pSearchQery, '%')  \n" +
                "					else 1 = 0  \n" +
                "				end);  \n" +
                "	end if;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5730,'2.00','V1','Bug 40100, 40097, 40096 - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5730:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWorkorder` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorder`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWOId INT,  \n" +
                "        IN woSubstatusIds LONGTEXT,  \n" +
                "        IN woTypeIds LONGTEXT,  \n" +
                "        IN rohsStatusIds LONGTEXT,  \n" +
                "        IN assyTypeIds LONGTEXT,  \n" +
                "        IN stdCertificationIds LONGTEXT,  \n" +
                "        IN stdclassIds LONGTEXT,  \n" +
                "        IN isPendingSoMapping TINYINT,  \n" +
                "        IN isPendingkitMapping TINYINT,  \n" +
                "        IN isRunningwo TINYINT,  \n" +
                "        IN isTrackBySerialNumber TINYINT,  \n" +
                "        IN isrushJob TINYINT,  \n" +
                "        IN isstoppedWo TINYINT,  \n" +
                "        IN isnewWo TINYINT,  \n" +
                "        IN isWaterSoluble TINYINT,  \n" +
                "        IN isecodfm TINYINT,  \n" +
                "        IN isOpenWo TINYINT,  \n" +
                "	IN isInterBuildFilter TINYINT,  \n" +
                "        IN customerIds LONGTEXT,  \n" +
                "        IN salesOrderdetails LONGTEXT,  \n" +
                "        IN assyIds LONGTEXT ,  \n" +
                "        IN assyNicknameIds LONGTEXT,  \n" +
                "        IN operationIds LONGTEXT,  \n" +
                "        IN employeeIds LONGTEXT ,  \n" +
                "	IN equipmentIds LONGTEXT,  \n" +
                "	IN materialIds LONGTEXT,  \n" +
                "	IN umidIds LONGTEXT,  \n" +
                "	IN isNoClean TINYINT,  \n" +
                "	IN isFluxNotApplicable TINYINT,  \n" +
                "	IN isKitNotRequired TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_WorkOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vMfgNameFormat INT;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgNameFormat;  \n" +
                "###  \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(\"  \n" +
                "	SELECT 	wo.woID,			wo.woNumber,				wo.customerID,  \n" +
                "		wo.buildQty,			wo.startTime,				wo.endTime,  \n" +
                "		wo.masterTemplateID,		wo.refrenceWOID,			wo.createdAt,  \n" +
                "		wo.createdBy,			wo.updatedAt,				wo.updatedBy,  \n" +
                "		wo.woStatus,			wo.isDeleted,				wo.excessQty,  \n" +
                "		wo.isClusterApplied,		wo.RoHSStatusID,			wo.woVersion,  \n" +
                "		wo.isWatersoluble,		wo.isOperationTrackBySerialNo,		wo.ECORemark,  \n" +
                "		wo.FCORemark,			wo.isStopWorkorder,			wo.isRevisedWO,  \n" +
                "		wo.isMFGQty,			wo.isOperationsVerified,		wo.terminateWOID,  \n" +
                "		wo.woType,			wo.ecoReqID,				wo.partID,  \n" +
                "		wo.locationDetails,		wo.isHotJob,				wo.initialInternalVersion,  \n" +
                "		wo.terminateWOOPID,		wo.isIncludeSubAssembly,		wo.documentPath,  \n" +
                "		wo.isRackTrackingRequired,	wo.isStrictlyFollowRackValidation,	wo.createByRoleId,  \n" +
                "		wo.updateByRoleId,		wo.selectedSampleID,			wo.isNoClean,  wo.isFluxNotApplicable ,  \n" +
                "		wo.isInternalBuild,		wo.proposedUmidQty,  \n" +
                "		wo.woSubStatus,(case when wo.isRackTrackingRequired=1 then 'Yes' else 'No' end) as   rackTrackingRequired,  \n" +
                "		(case when wo.isStrictlyFollowRackValidation=1 then 'Yes' else 'No' end) as   strictlyFollowRackValidation,  \n" +
                "		fun_getIntToText(wo.isInternalBuild) as  isInternalBuildConvertedValue,  \n" +
                "		fun_getUserNameByID(wo.updatedBy) woModifiedBy,  \n" +
                "		fun_getUserNameByID(wo.createdBy) woCreatedBy,  \n" +
                "		fun_getRoleByID(wo.updateByRoleId) updatedbyRole,  \n" +
                "		fun_getRoleByID(wo.createByRoleId) createdbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(wo.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') woCreatedAt,  \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(wo.updatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') woUpdatedAt,  \n" +
                "		fun_GetFormattedMfgCode(mf.mfgCode,mf.mfgName, '\", vMfgNameFormat, \"') mfgCodeName,  \n" +
                "		co.PIDCODE AS PIDCode,  \n" +
                "		co.mfgPN AS mfgPN,  \n" +
                "		co.nickname AS nickName,  \n" +
                "		co.mfgPNDescription AS mfgPNDescription,  \n" +
                "		co.rev AS rev,  \n" +
                "		co.liveVersion AS liveVersion,  \n" +
                "		wthu.woTransHoldUnholdId,  \n" +
                "		vuwosummstk.shippedQty,  \n" +
                "		vuwosummstk.readytoShipQty,  \n" +
                "		vuwosummstk.scrapQty AS scrappedQty ,  \n" +
                "		`vuwosummstk`.`stockAdjustmentQty`,  \n" +
                "		`tmp_vuwotransfer`.`OP Name` AS fromOpName,  \n" +
                "		`tmp_vuwotransfer`.`OP Number` AS fromOpNumber,  \n" +
                "		`tmp_vuwotransfer`.`woOPID Identity` AS fromWOOPID,  \n" +
                "		`tmp_vuwotransfer`.`TransferQty` AS transferQty,  \n" +
                "		`tmp_vuwotransfer`.`To WO Number` AS transferWoNumber,  \n" +
                "		`tmp_vuwotransfer`.`To WO Version` AS transferWoVersion,  \n" +
                "		fun_getWoSubStatusNameByID(`wo`.`woSubStatus`) AS `woSubStatusConvertedValue`,  \n" +
                "		-- fun_getReadyStock(`wo`.`woID`) AS returnPending,  \n" +
                "		(IFNULL(vuwosummstk.buildQty,0) - IFNULL(vuwosummstk.firstOPtotalQty,0)) AS returnPending,  \n" +
                "		CAST(fun_getMinShippingDateByWOID(`wo`.`woID`) AS DATETIME) AS shippingDate,  \n" +
                "		ro.rohsIcon,  \n" +
                "		`ro`.`name` AS `rohsName` ,  \n" +
                "		tmp_workorder_operation.opCount opCount,  \n" +
                "		tmp_workorder_reqforreview.woReviewChangesCount woReviewChangesCount,  \n" +
                "		tmp_eco_request.ecoRequestCount ecoRequestCount,  \n" +
                "		tmp_eco_request.dfmRequestCount as dfmRequestCount,  \n" +
                "		tmp_workorder_cluster.parallelClusterCount,  \n" +
                "		fun_getSampleAvailableConvertedValueByAssyID(wo.partID) AS `isSampleAvailableConvertedValue` ,  \n" +
                "		fun_getIntToText(wo.isHotJob) AS `isHotJobConvertedValue`,  \n" +
                "		fun_getIntToText(`wo`.`isOperationTrackBySerialNo`) AS `isOperationTrackBySerialNoConvertedValue`,  \n" +
                "		fun_getwoTypeNameByType(`wo`.`woType`) AS `woTypeConvertedText`,  \n" +
                "		fun_getIntToText(`wo`.`isStopWorkorder`) AS `isHalt`,  \n" +
                "		fun_getWOHoldUnholdReason(wo.woID,wo.isStopWorkorder,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS reasonDetails,  \n" +
                "		tmp_workorder_operation.stopOperationCount as stopOperationCount,  \n" +
                "		vusalesorderdet.totalPOQty,  \n" +
                "		vusalesorderdet.POQtyValues soPOQty,  \n" +
                "   		vusalesorderdet.totalMRPQty,  \n" +
                "   		vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
                "   		CASE WHEN wo.isRevisedWO = 1 THEN parentSODtl.poNumber ELSE vusalesorderdet.poNumber END poNumber,  \n" +
                "		CASE WHEN wo.isRevisedWO = 1 THEN parentSODtl.salesOrderNumber ELSE vusalesorderdet.salesOrderNumber END salesOrderNumber,  \n" +
                "		vusalesorderdet.lineID ,  \n" +
                "		 vusalesorderdet.salesOrderMstIDs,  \n" +
                "		 vusalesorderdet.SOPOQtyValues ,  \n" +
                "		fun_getKitReleaseStatusByWoID(wo.woID) kitReleaseStatus,  \n" +
                "		(CASE WHEN co.totalSolderPoints > 0 THEN fun_calculateDPMOForWO(wo.woID) ELSE NULL END) AS DPMO  ,  \n" +
                "		tmp_workorder_reqrevcomments.pendingWOReqThreadCount as pendingWOReqThreadCount,  \n" +
                "		fun_getAssyTypeByID(co.assemblyType) as assyTypeName ,  \n" +
                "		wo.isKitAllocationNotRequired,  \n" +
                "		Round(((IFNULL(vuwosummstk.readytoShipQty,0) + IFNULL(vuwosummstk.scrapQty,0) + IFNULL(vuwosummstk.shippedQty,0))/IFNULL(wo.buildQty,0))*100,2) AS `woCompletionPercentage`,  \n" +
                "		fun_getIntToText(wo.isKitAllocationNotRequired) isKitAllocationNotRequiredConvertedValue,  \n" +
                "        (CASE WHEN co.isFluxNotApplicable = 1 THEN 'NA'  \n" +
                "				  WHEN co.isNoClean = 0 AND co.isWaterSoluble = 1 THEN 'WS'  \n" +
                "                  WHEN co.isNoClean = 1 AND co.isWaterSoluble = 0 THEN 'NC'  \n" +
                "                  WHEN co.isNoClean = 1 AND co.isWaterSoluble = 1 THEN 'BOTH' ELSE 'NCF'  END) assyFluxType,  \n" +
                "            (CASE WHEN co.isFluxNotApplicable = 1 THEN 'Not Applicable'  \n" +
                "				  WHEN co.isNoClean = 0 AND co.isWaterSoluble = 1 THEN 'Water-Soluble'  \n" +
                "                  WHEN co.isNoClean = 1 AND co.isWaterSoluble = 0 THEN 'No-Clean'  \n" +
                "                  WHEN co.isNoClean = 1 AND co.isWaterSoluble = 1 THEN 'Water-Soluble and No-Clean'  \n" +
                "                  ELSE 'No-Configured' END ) assyFluxTypeConvertedValue ,  \n" +
                "                wo.systemID systemID  \n" +
                "	FROM  \n" +
                "		workorder wo  \n" +
                "		INNER JOIN component co ON wo.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "		INNER JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "		LEFT OUTER JOIN vu_workorder_summary_stk vuwosummstk ON (vuwosummstk.woid = wo.woID)  \n" +
                "		LEFT OUTER JOIN mfgCodeMst mf ON wo.customerID = mf.id  \n" +
                "		LEFT OUTER JOIN workorder_trans_hold_unhold wthu ON wo.woID = wthu.woID AND wthu.isDeleted = 0  AND wthu.endDate IS NULL  \n" +
                "		LEFT OUTER JOIN (  \n" +
                "			SELECT  \n" +
                "				`wotransfer`.`OP Name`,  \n" +
                "				`wotransfer`.`OP Number`,  \n" +
                "				`wotransfer`.`woOPID Identity`,  \n" +
                "				`wotransfer`.`To WO Number`,  \n" +
                "				`wotransfer`.`To WO Version`,  \n" +
                "				`wotransfer`.`woID Identity` AS woID,  \n" +
                "				SUM(`wotransfer`.`Transfer Qty`) `TransferQty`  \n" +
                "			FROM  \n" +
                "				vu_workorder_transfer_report wotransfer  \n" +
                "			GROUP BY  \n" +
                "				`wotransfer`.`OP Name`,  \n" +
                "				`wotransfer`.`OP Number`,  \n" +
                "				`wotransfer`.`woOPID Identity`,  \n" +
                "				`wotransfer`.`To WO Number`,  \n" +
                "				`wotransfer`.`To WO Version`,  \n" +
                "				`wotransfer`.`woID Identity`  \n" +
                "		) as tmp_vuwotransfer ON `tmp_vuwotransfer`.`woID` = wo.woID  \n" +
                "		LEFT OUTER JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "		LEFT OUTER JOIN (  \n" +
                "			SELECT  \n" +
                "				woID,  \n" +
                "				SUM(IF(er.requestType = 1, 1,0)) AS  ecoRequestCount,  \n" +
                "				SUM(IF(er.requestType = 2, 1,0)) AS dfmRequestCount  \n" +
                "			FROM  \n" +
                "				eco_request er  \n" +
                "			WHERE  er.isDeleted  = 0  \n" +
                "			GROUP BY woID) as tmp_eco_request ON tmp_eco_request.woID = wo.woID  \n" +
                "		LEFT OUTER JOIN (  \n" +
                "			SELECT  \n" +
                "				woID, COUNT(1) AS parallelClusterCount  \n" +
                "			FROM  \n" +
                "				workorder_cluster woc  \n" +
                "			WHERE  \n" +
                "				woc.isDeleted = 0 AND woc.isParellelOperation = 1  \n" +
                "				GROUP BY woID  \n" +
                "		) as tmp_workorder_cluster ON tmp_workorder_cluster.woID = wo.woID  \n" +
                "		LEFT OUTER JOIN (  \n" +
                "			SELECT  \n" +
                "				woID, COUNT(1)  AS woReviewChangesCount  \n" +
                "			FROM  \n" +
                "				workorder_reqforreview  \n" +
                "			WHERE  isDeleted = 0  \n" +
                "			GROUP BY woID  \n" +
                "		) as tmp_workorder_reqforreview ON tmp_workorder_reqforreview.woID = wo.woID  \n" +
                "		LEFT OUTER JOIN (  \n" +
                "			SELECT  \n" +
                "				woID,  \n" +
                "				COUNT(*) AS opCount,  \n" +
                "				SUM(IF(isStopOperation = 1,1,0)) AS stopOperationCount  \n" +
                "			FROM  \n" +
                "				workorder_operation  \n" +
                "			WHERE  isDeleted = 0  \n" +
                "			GROUP BY woID  \n" +
                "		) as tmp_workorder_operation ON tmp_workorder_operation.woID = wo.woID  \n" +
                "		LEFT OUTER JOIN (  \n" +
                "			SELECT  \n" +
                "				wr.woID, COUNT(1) AS pendingWOReqThreadCount  \n" +
                "			FROM  \n" +
                "				workorder AS wo  \n" +
                "				INNER JOIN workorder_reqrevcomments AS wr ON wo.woID = wr.woID  \n" +
                "			WHERE  \n" +
                "				wr.isDeleted = 0  AND wr.accRejStatus = 'P'  \n" +
                "				AND wr.commentemployeeID != fun_getEmployeeIDByUserID(wo.createdBy)  \n" +
                "			GROUP BY woID) as tmp_workorder_reqrevcomments  ON tmp_workorder_reqrevcomments.woID = wo.woID  \n" +
                "		LEFT JOIN vu_workorder_salesorder_details parentSODtl ON parentSODtl.woID = wo.terminateWOID  \n" +
                "	WHERE  \n" +
                "		wo.isdeleted = 0\");  \n" +
                " ##select @temp_Sproc_GetWorkorder;  \n" +
                "  IF(woSubstatusIds IS NOT NULL AND woSubstatusIds!='') THEN  \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.woSubStatus in (', woSubstatusIds, ' )');  \n" +
                "  END IF;  \n" +
                "  IF(woTypeIds IS NOT NULL AND woTypeIds!='') THEN  \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.woType in (', woTypeIds, ' )');  \n" +
                "  END IF;  \n" +
                "  IF(rohsStatusIds IS NOT NULL AND rohsStatusIds!='') THEN  \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.RoHSStatusID in (', rohsStatusIds, ' )');  \n" +
                "  END IF;  \n" +
                "  IF(assyTypeIds IS NOT NULL AND assyTypeIds!='') THEN  \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.partId IN (SELECT c.id FROM component c WHERE c.isDeleted = 0 and c.assemblyType IN (',assyTypeIds,'))');  \n" +
                "  END IF;  \n" +
                "IF (stdCertificationIds IS NOT NULL AND stdCertificationIds != '' AND  \n" +
                "		stdclassIds IS NOT NULL AND stdclassIds != '') THEN  \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_certification wc where wc.woID = wo.woID and wc.isDeleted = 0 and wc.certificatestandardID in (', stdCertificationIds, ' ) and wc.classIds in (', stdclassIds, ' )) ');  \n" +
                "	ELSEIF (stdCertificationIds IS NOT NULL AND stdCertificationIds != '') THEN  \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_certification wc where wc.woID = wo.woID and wc.isDeleted = 0 and wc.certificatestandardID in (', stdCertificationIds, ' )) ');  \n" +
                "	ELSEIF (stdclassIds IS NOT NULL AND stdclassIds != '') THEN  \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_certification wc where wc.woID = wo.woID and wc.isDeleted = 0 and wc.classIds in (', stdclassIds, ' )) ');  \n" +
                "    END IF;  \n" +
                "  IF(isPendingSoMapping=1)THEN  \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND NOT exists (select 1 from workorder_salesorder_details ws where ws.woID = wo.woID and ws.isDeleted = 0 ) ');  \n" +
                "  END IF;  \n" +
                "  IF(isPendingkitMapping=1)THEN  \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND NOT exists (select 1 from salesorder_plan_detailsmst sp where sp.woID = wo.woID and sp.isDeleted = 0 ) ');  \n" +
                "  END IF;  \n" +
                "IF(isRunningwo=1)THEN  \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_trans wt where wt.woID = wo.woID and wt.isDeleted = 0 and wt.checkinTime is not null and wt.checkoutTime is null) ');  \n" +
                "END IF;  \n" +
                "IF(isTrackBySerialNumber=1)THEN  \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isOperationTrackBySerialNo=1');  \n" +
                "END IF;  \n" +
                "IF(isrushJob=1)THEN  \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isHotJob=1');  \n" +
                "END IF;  \n" +
                "IF(isstoppedWo=1)THEN  \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isStopWorkorder=1');  \n" +
                "END IF;  \n" +
                "  IF(isnewWo IS NOT NULL)THEN  \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isRevisedWO=',isnewWo,'');  \n" +
                "  END IF;  \n" +
                "  IF(isecodfm=1)THEN  \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from eco_request er where er.woID = wo.woID and er.isDeleted = 0 ) ');  \n" +
                "  END IF;  \n" +
                "  IF(isWaterSoluble = 1)THEN  \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isWatersoluble=1');  \n" +
                "  END IF;  \n" +
                "  IF(isNoClean = 1)THEN  \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isNoClean=1');  \n" +
                "  END IF;  \n" +
                "  IF(isFluxNotApplicable = 1)THEN  \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND wo.isFluxNotApplicable=1');  \n" +
                "  END IF;  \n" +
                "  IF(isOpenWo IS NOT NULL)THEN  \n" +
                "	IF(isOpenWo=1)THEN  \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from eco_request er where er.woID = wo.woID and er.isDeleted = 0 and er.finalStatus=\"P\") ');  \n" +
                "	ELSE  \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from eco_request er where er.woID = wo.woID and er.isDeleted = 0 and er.finalStatus!=\"P\") ');  \n" +
                "	END IF;  \n" +
                "  END IF;  \n" +
                "   IF(isInterBuildFilter =1)THEN  \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND isInternalBuild = 1 ');  \n" +
                "	END IF;  \n" +
                "    IF(isKitNotRequired =1)THEN  \n" +
                "		SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND isKitAllocationNotRequired = 1 ');  \n" +
                "	END IF;  \n" +
                "  IF(customerIds IS NOT NULL AND customerIds!='')THEN  \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.customerID in (', customerIds, ' )');  \n" +
                "  END IF;  \n" +
                "  IF(salesOrderdetails IS NOT NULL AND salesOrderdetails!='')THEN  \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_salesorder_details ws where ws.woID = wo.woID and ws.isDeleted = 0  and ws.salesorderdetailID in (select sd.id from salesorderdet sd where sd.isDeleted = 0 and sd.refSalesOrderID in (',salesOrderdetails,'))) ');  \n" +
                "  END IF;  \n" +
                "  IF(assyIds IS NOT NULL AND assyIds!='') THEN  \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder,' and wo.partID in (', assyIds, ' )');  \n" +
                "  END IF;  \n" +
                "  IF(assyNicknameIds IS NOT NULL AND assyNicknameIds!='') THEN  \n" +
                "  SET @temp_Sproc_GetWorkorder=CONCAT(@temp_Sproc_GetWorkorder,' and wo.partID in (select c.id from component c where c.nickname in (', assyNicknameIds, ' ))');  \n" +
                "  END IF;  \n" +
                "  IF (operationIds IS NOT NULL AND operationIds != '') THEN  \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists (select 1 from workorder_operation woop where woop.woID = wo.woID and woop.isDeleted = 0 and woop.opID in (', operationIds, ' )) ');  \n" +
                "  END IF;  \n" +
                "  IF (employeeIds IS NOT NULL AND employeeIds != '' AND operationIds IS NOT NULL AND operationIds != '') THEN  \n" +
                "	SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_employee woe where woe.woID = wo.woID and woe.isDeleted = 0 and woe.opID in (',operationIds,') and woe.employeeID in (', employeeIds, ' ))  \n" +
                "	OR  exists (select 1 from  workorder_trans_empinout wte where wte.woID = wo.woID and wte.isDeleted = 0 and wte.opID in (',operationIds,') and wte.employeeID in (', employeeIds, ' )))');  \n" +
                "  ELSEIF(employeeIds IS NOT NULL AND employeeIds != '') THEN  \n" +
                "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_employee woe where woe.woID = wo.woID and woe.isDeleted = 0  and woe.employeeID in (', employeeIds, ' ))  \n" +
                "            OR  exists(select 1 from workorder_trans_empinout wte where wte.woID = wo.woID and wte.isDeleted = 0 and  wte.employeeID in (', employeeIds, ' ))  \n" +
                "            OR  exists(select 1 from workorder_trans_umid_details wtu where wtu.woTransID in (select wt.woTransID from  workorder_trans wt where wt.isDeleted = 0 and wt.woID=wo.woID) and wtu.isDeleted = 0 and  wtu.employeeID in (', employeeIds, ' )))');  \n" +
                "  END IF;  \n" +
                "  IF(equipmentIds IS NOT NULL AND equipmentIds != '') THEN  \n" +
                "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_equipment woe where woe.woID = wo.woID and woe.isDeleted = 0  and woe.eqpID in (', equipmentIds, ' ))  \n" +
                "            OR  exists(select 1 from workorder_trans wt where wt.woID = wo.woID and wt.isDeleted = 0 and  wt.equipmentID in (', equipmentIds, ' ))  \n" +
                "            OR exists(select 1 from workorder_operation_equipment_feeder_details woef where woef.woopeqpid in (select woe.woOpEqpID from workorder_operation_equipment woe where woe.woID=wo.woID and woe.isDeleted = 0) and woef.isDeleted = 0 and  woef.eqpID in (', equipmentIds, ' )))');  \n" +
                "  END IF;  \n" +
                "  IF(materialIds IS NOT NULL AND materialIds != '') THEN  \n" +
                "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND (exists (select 1 from workorder_operation_part wop where wop.woID = wo.woID and wop.isDeleted = 0  and wop.partID in (', materialIds, ' ))  \n" +
                "            OR exists(select 1 from workorder_trans_umid_details wtu where wtu.woTransID in (select wt.woTransID from  workorder_trans wt where wt.isDeleted = 0 and wt.woID=wo.woID) and wtu.isDeleted = 0 and  wtu.mfgpnid in (', materialIds, ' )))');  \n" +
                "  END IF;  \n" +
                "  IF(umidIds IS NOT NULL AND umidIds != '') THEN  \n" +
                "            SET @temp_Sproc_GetWorkorder = CONCAT(@temp_Sproc_GetWorkorder, ' AND exists(select 1 from workorder_trans_umid_details wtu where wtu.woTransID in (select wt.woTransID from  workorder_trans wt where wt.isDeleted = 0 and wt.woID=wo.woID) and wtu.isDeleted = 0 and  wtu.refsidid in (select csd.id from component_sid_stock csd where csd.uid in (', umidIds, ' ) and csd.isDeleted = 0))');  \n" +
                "  END IF;  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"nickName ASC\") ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "    IF (pWOId != 0) THEN  \n" +
                "		SET v_WorkOrderDetailWhere = CONCAT(\" AND woID = \", pWOId);  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	  /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetWorkorder,\" ) c where 1=1 and \", pWhereClause,IFNULL(v_WorkOrderDetailWhere, ''));  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetWorkorder,\" ) c  where \", pWhereClause,IFNULL(v_WorkOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "	/* to get total count of rows of workorder table */  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT COUNT(1) FROM workorder where isDeleted = 0\" );  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5731,'2.00','V1','Customer Code Changes - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5731:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_MatchBarCodeAndSaveDelimiters`;  \n" +
                "CREATE PROCEDURE `Sproc_MatchBarCodeAndSaveDelimiters`(  \n" +
                "    IN pWhereClause VARCHAR(16383),  \n" +
                "    IN puserID VARCHAR(50),  \n" +
                "    IN pnickName VARCHAR(20),  \n" +
                "    IN pprefix VARCHAR(20),  \n" +
                "    IN pIsFromUID TINYINT,  \n" +
                "    IN pComponentID INT,  \n" +
                "    IN pCustomerID INT,  \n" +
                "    IN pCPN BOOL,  \n" +
                "    IN pMFGAvailabel BOOL,  \n" +
                "    IN pRefCpnMfgID INT,  \n" +
                "    IN pAssyID INT,  \n" +
                "    IN pSalesOrderDetailID INT,  \n" +
                "    IN pReceiveMaterialType VARCHAR(255),  \n" +
                "    IN pkitAssemblyID INT,  \n" +
                "    IN pBarcodeID INT,  \n" +
                "    IN pBOMLineID INT,  \n" +
                "    IN pSupplierID INT,  \n" +
                "    IN pCategory VARCHAR(2),  \n" +
                "    IN pInventoryType VARCHAR(2),  \n" +
                "    IN pCallFrom VARCHAR(50),  \n" +
                "    IN pExcludeStatus INT,  \n" +
                "    IN pBinID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "	DECLARE v_delimiter VARCHAR(10);  \n" +
                "	DECLARE v_length INT;  \n" +
                "	DECLARE v_fieldType INT;  \n" +
                "	DECLARE v_entityId INT;  \n" +
                "	DECLARE v_dataElementId INT;  \n" +
                "	DECLARE v_displayOrder DECIMAL(6,2);  \n" +
                "	DECLARE delimiter_value_data VARCHAR(1000);  \n" +
                "	DECLARE strLabel VARCHAR(2000);  \n" +
                "	DECLARE QueryForStatic  VARCHAR(2000);  \n" +
                "	DECLARE StaticField VARCHAR(100);  \n" +
                "	DECLARE DynamicField VARCHAR(100);  \n" +
                "	DECLARE strFeildforInsert VARCHAR(10000) DEFAULT 'scanlabel';  \n" +
                "	DECLARE valuesforInsert VARCHAR(16383) DEFAULT CONCAT('\"',pWhereClause,'\"');  \n" +
                "	DECLARE plen,slen INT;  \n" +
                "	DECLARE pbr_template_ID INT DEFAULT 0;  \n" +
                "	DECLARE pbr_Separator VARCHAR(50);  \n" +
                "	DECLARE barcode_type_id INT;  \n" +
                "	DECLARE MFG_Part_No VARCHAR(16383);  \n" +
                "	DECLARE UpdateValue VARCHAR(16383);  \n" +
                "	DECLARE BarcodeMFGMatch VARCHAR(20) DEFAULT 'Match';  \n" +
                "	DECLARE v_SupplierID INT;  \n" +
                "	DECLARE v_BarcodeType VARCHAR(20);  \n" +
                "	DECLARE v_barcode_id INT;  \n" +
                "	DECLARE v_barcode_count INT;  \n" +
                "	DECLARE v_NumberOfPart INT;  \n" +
                "	DECLARE v_rfqLineItemsID INT;  \n" +
                "	DECLARE v_componentCount INT;  \n" +
                "	DECLARE v_componentId INT;  \n" +
                "	DECLARE v_mfgPartNO VARCHAR(100);  \n" +
                "	DECLARE v_partMFG INT;  \n" +
                "	DECLARE v_isGoodPart TINYINT;  \n" +
                "	DECLARE v_restrictUsePermanently TINYINT;  \n" +
                "	DECLARE v_restrictUSEwithpermission TINYINT;  \n" +
                "	DECLARE v_restrictUseInBOM TINYINT;  \n" +
                "	DECLARE v_isInstall TINYINT;  \n" +
                "	DECLARE v_isBOMLineClean TINYINT;  \n" +
                "	DECLARE v_BOMLineId INT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermanently TINYINT;  \n" +
                "	DECLARE v_restrictPackagingAliasPermission TINYINT;  \n" +
                "	DECLARE v_bomErrorDescription LONGTEXT;  \n" +
                "	DECLARE v_PIDCode VARCHAR(110);  \n" +
                "	DECLARE v_isPurchase TINYINT;  \n" +
                "	DECLARE v_isBuyDNPQty VARCHAR(5);  \n" +
                "	DECLARE v_BOMLineItemNo DECIMAL(16,8);  \n" +
                "	DECLARE v_BOMLineCount INT;  \n" +
                "	DECLARE v_AlternateLineId INT;  \n" +
                "	DECLARE v_MFRPackagingId VARCHAR(1000);  \n" +
                "	DECLARE v_BOMAssyId INT;  \n" +
                "	DECLARE v_BOMAssyIds VARCHAR(1000);  \n" +
                "	DECLARE v_restrictUsePackagingInBOM TINYINT;  \n" +
                "	DECLARE v_restrictUseCPNInBOM TINYINT;  \n" +
                "	DECLARE v_isCPNFlag TINYINT;  \n" +
                "	DECLARE v_dateCodeFormatID INT;  \n" +
                "	DECLARE v_InternalDateCode VARCHAR(50);  \n" +
                "  	DECLARE v_RefMfgCodeMstID VARCHAR(10000);  \n" +
                "	DECLARE v_MfrNotFoundForSupplierQuote TINYINT;  \n" +
                "	DECLARE v_SupplierQuoteMFRIsNotCustomPart TINYINT;  \n" +
                "	DECLARE v_MFRList VARCHAR(10000);  \n" +
                "	DECLARE v_barcode_status INT;  \n" +
                "	DECLARE v_category INT;  \n" +
                "	DECLARE v_partType INT;  \n" +
                "    DECLARE v_pendingPartCount INT;  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "	SET v_SupplierQuoteMFRIsNotCustomPart = 0;  \n" +
                "	SET v_MfrNotFoundForSupplierQuote = 0;  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_MfgCodeAndPartNO_error;  \n" +
                "	CREATE TEMPORARY TABLE temp_MfgCodeAndPartNO_error  \n" +
                "	(  \n" +
                "		errorText LONGTEXT,  \n" +
                "		IsSuccess VARCHAR (2),  \n" +
                "		MFGPart VARCHAR(10000)  \n" +
                "	);  \n" +
                "  \n" +
                "	/* Temp table for Packing Slip */  \n" +
                "	IF (pCategory = 'P') THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS  temp_packing_slip_material_receive;  \n" +
                "		CREATE TEMPORARY TABLE temp_packing_slip_material_receive  \n" +
                "		(  \n" +
                "			scanlabel VARCHAR(1000),  \n" +
                "			poNumber VARCHAR(100),  \n" +
                "			supplierSONumber VARCHAR(100),  \n" +
                "			packingSlipNumber VARCHAR(50),  \n" +
                "			invoiceNumber VARCHAR(50)  \n" +
                "		);  \n" +
                "	ELSE /* Temp table for MFR */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock;  \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock  \n" +
                "		(  \n" +
                "			refcompid INT,  \n" +
                "			pkgQty DECIMAL(18,6),  \n" +
                "			dateCode VARCHAR(10),  \n" +
                "			lotCode VARCHAR(255),  \n" +
                "			scanlabel VARCHAR(1000),  \n" +
                "			createdBy VARCHAR(255),  \n" +
                "			uid VARCHAR(14),  \n" +
                "			prefix VARCHAR(20),  \n" +
                "			nickName VARCHAR(50),  \n" +
                "			cpn TINYINT,  \n" +
                "			mfgAvailabel TINYINT,  \n" +
                "			refCPNMFGPNID INT,  \n" +
                "			customerID INT,  \n" +
                "			assyID INT,  \n" +
                "			receiveMaterialType VARCHAR(255),  \n" +
                "			refSupplierPartId INT,  \n" +
                "			mfrDateCode VARCHAR(50),  \n" +
                "			poNumber VARCHAR(50),  \n" +
                "			supplierSONumber VARCHAR(50),  \n" +
                "			packingSlipNumber VARCHAR(50),  \n" +
                "			invoiceNumber VARCHAR(50),  \n" +
                "			binName VARCHAR(100),  \n" +
                "			packaging VARCHAR(100),  \n" +
                "			packingSlipDetailNickname VARCHAR(50)  \n" +
                "		);  \n" +
                "  \n" +
                "		/* Temp table for data element value */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Component_Sid_Stock_Dataelement_Values;  \n" +
                "		CREATE TEMPORARY TABLE temp_Component_Sid_Stock_Dataelement_Values  \n" +
                "		(  \n" +
                "			entityid INT,  \n" +
                "			dataelementid INT,  \n" +
                "			`value` LONGTEXT,  \n" +
                "			createdBy VARCHAR(255)  \n" +
                "		);  \n" +
                "    END IF;  \n" +
                "	-- get data from barcode templates with seprator  \n" +
                "	# return error code  \n" +
                "	# 0: Mfgcode and MfgpartNO is not Found  \n" +
                "	# 0: Barcode template does not exist, Please add template  \n" +
                "	# 1: Validation Clear  \n" +
                "	# 2: Mfgcode and Mfg partNO are avialable but not matched in component  \n" +
                "	# 3: Mfgcode is not found  \n" +
                "	# 4: MFG PN does not exist  \n" +
                "	# 5: Multiple MFG PN found  \n" +
                "	# 6: CPN MFG Part is mismatch with CPN MFG Code  \n" +
                "	# 7: MFG PN or CPN is not found in bom of this assembly  \n" +
                "	# 8: Scanned barcode is belong to different manufacturer barcode template master. Please change template and make it for All Manufacturer  \n" +
                "	# 9:  Multiple barcode template found.  \n" +
                "	# 10: Scanned MFG Part is not CPN, Please check  \n" +
                "	# 11: MFG PN is incorrect part  \n" +
                "	# 12: PID PID1 was restricted part at part master level.  \n" +
                "	# 13: PID PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 14: MFR PN does not populate in BOM. So, you can not allocate to kit.  \n" +
                "	# 15: BOM line have not clean. So, you can not allocate to kit.  \n" +
                "	# 16: PID PID1 was restricted packaging alias part at part master level.  \n" +
                "	# 17: PID is contain more than 1 BOM line.  \n" +
                "	# 18: PID has been Restrict use Excluding Packaging in BOM Permanently.  \n" +
                "	# 19: CPN PID1 has been restricted at BOM level.<br/>Thus, you can not allocate to this assembly.  \n" +
                "	# 20: NOT ALLOW TO SELECT OTHER MFG FOR MAPPED SUPPLIER.  \n" +
                "	# 21: OTHEN THEN CUSTOM PART NOT ALLOW TO SELECT FOR MAPPED SUPPLIER.  \n" +
                "	# 22: You cannot create UMID for assembly from Existing Stock.  \n" +
                "	# 23: In UMID Management screen not allow to scan which part's part type is Other  \n" +
                "    # 24: In UMID Management screen if pending stock is not exists for stockinventory NI then not allow to scan part  \n" +
                "    # 25: In UMID Management screen if pending stock PS status is Draft then not allow to scan part  \n" +
                "    # 24: In UMID Management screen if pending stock PS Line received status is Pending or Rejected then not allow to scan part  \n" +
                "  \n" +
                "	block1: BEGIN  \n" +
                "		SET valuesforInsert= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");   \n" +
                "		IF (pBarcodeID IS NULL) THEN  \n" +
                "			/* Get barcode from labelstring */  \n" +
                "            SELECT COUNT(*) INTO v_barcode_count  \n" +
                "			  FROM br_label_template  \n" +
                "             WHERE isDeleted=0  \n" +
                "               AND barcodeCategory = pCategory  \n" +
                "               AND `status`=1  \n" +
                "               AND pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
                "  \n" +
                "			SELECT id, barcodeType, `name`, `status`  \n" +
                "              INTO v_barcode_id, barcode_type_id, @barcode_name, v_barcode_status  \n" +
                "			  FROM br_label_template  \n" +
                "             WHERE isDeleted=0  \n" +
                "               AND barcodeCategory = pCategory  \n" +
                "               AND `status`=1  \n" +
                "               AND pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) limit 1;  \n" +
                "			IF (v_barcode_status = 1 OR v_barcode_status IS NULL) THEN  \n" +
                "				/* Get More than 1 barcode then give validation */  \n" +
                "				IF (v_barcode_count > 1) THEN  \n" +
                "					SELECT GROUP_CONCAT(id) INTO @multiple_barcode_string FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "					pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END);  \n" +
                "  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
                "					('Multiple barcode template found.',9,@multiple_barcode_string);  \n" +
                "  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				ELSE  \n" +
                "					SET pBarcodeID = v_barcode_id;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			/* Get data from barcode id */  \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID AND `status`=1;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* If data not get from barcode then concat none in label string find in table */  \n" +
                "		IF (barcode_type_id IS NULL AND (v_barcode_status = 1 OR v_barcode_status IS NULL)) THEN  \n" +
                "			SET pWhereClause = CONCAT(\"NONE\", pWhereClause);  \n" +
                "			SELECT id, barcodeType, `name` INTO v_barcode_id, barcode_type_id, @barcode_name  \n" +
                "			FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND  \n" +
                "			pWhereClause REGEXP (CASE WHEN tempregexp = '' THEN tempregexp=NULL ELSE tempregexp END) AND barcodeType = 1;  \n" +
                "			SET pBarcodeID = v_barcode_id;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(barcode_type_id=2)THEN    /* barcode 2D */  \n" +
                "			SELECT b.id, g.gencCategoryName, b.mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template b JOIN genericcategory g ON b.`separator`= g.gencCategoryID  \n" +
                "			WHERE b.isDeleted=0 AND barcodeCategory = pCategory AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '2D';  \n" +
                "		ELSE /* barcode 1D */  \n" +
                "			SELECT id, '', mfgcodeid INTO pbr_template_ID,pbr_Separator,@barcodeMFG FROM br_label_template  \n" +
                "			WHERE isDeleted=0 AND barcodeCategory = pCategory  AND `status`=1 AND id = pBarcodeID;  \n" +
                "			SET v_BarcodeType = '1D';  \n" +
                "		END IF;  \n" +
                "	END block1;  \n" +
                "  \n" +
                "	/* If error is not found then continue else select error */  \n" +
                "	IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "		block2: BEGIN  \n" +
                "			-- declare cusrsor barcode match on all barcode template delimiter record found  \n" +
                "			DECLARE  barcodeMatch_cursor CURSOR FOR  \n" +
                "				SELECT `delimiter`,`length`,`fieldType`,`dataElementId`,`displayOrder` FROM br_label_template_delimiter  \n" +
                "				WHERE refbrID = pBarcodeID AND isDeleted = 0;  \n" +
                "			-- declare exit loop if data not found  \n" +
                "			DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "			-- if any record match found than  check for delimiter and its value  \n" +
                "			IF (pbr_template_ID > 0) THEN  \n" +
                "				-- create temporary table for deliemeter and component dataelement  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempDelimiterTbl;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempDelimiterTbl(  \n" +
                "					pentityId INT,  \n" +
                "					pdataElementId INT,  \n" +
                "					pdelimiter_value VARCHAR(200)  \n" +
                "				);  \n" +
                "				-- create temporary table for separator string values  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempSeparateStrValues;  \n" +
                "				CREATE TEMPORARY TABLE tempSeparateStrValues(SeparateValue VARCHAR(255));  \n" +
                "  \n" +
                "				-- prefix length and suffix lenght to get actual string  \n" +
                "				SELECT prefixlength,suffixlength INTO @pprefixlength,@psuffixlength  \n" +
                "				FROM br_label_template WHERE isDeleted=0 AND barcodeCategory = pCategory AND id = pBarcodeID;  \n" +
                "				-- open cursor  \n" +
                "				OPEN barcodeMatch_cursor;  \n" +
                "				-- set str label as whereclause  \n" +
                "				-- Do not remove below line this for refrence if any error come to replace , \", ' this three special charecter  \n" +
                "				SET strLabel= REPLACE(REPLACE(REPLACE(REPLACE(pWhereClause,'\\\\','\\\\'),'\\\\','\\\\\\\\'),'\"','\\\\\"'),\"'\",\"\\\\'\");  \n" +
                "				-- if prefix is found than remove those from actual string match  \n" +
                "				IF(IFNULL(@pprefixlength,0) > 0) THEN  \n" +
                "					 -- SET strLabel = SUBSTRING(pWhereClause,@pprefixlength+1,LENGTH(pWhereClause));  \n" +
                "					 SET strLabel = SUBSTRING(strLabel,@pprefixlength+1,LENGTH(strLabel));  \n" +
                "				 END IF;  \n" +
                "  \n" +
                "				-- if suffix is found than remove those from actual string match  \n" +
                "				 IF(IFNULL(@psuffixlength,0) > 0) THEN  \n" +
                "					-- SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
                "					SET strLabel = SUBSTRING(strLabel,1,LENGTH(strLabel)-@psuffixlength);  \n" +
                "				 END IF;  \n" +
                "				-- insert all values after seprator split  \n" +
                "				SET @SQL = CONCAT(\"insert into tempSeparateStrValues (SeparateValue) values ('\", REPLACE((strLabel),pbr_Separator, \"'),('\"),\"');\");  \n" +
                "				PREPARE stmt1 FROM @SQL;  \n" +
                "				EXECUTE stmt1;  \n" +
                "				DEALLOCATE PREPARE stmt1;  \n" +
                "				IF (pCategory = 'P') THEN  \n" +
                "					-- create dynamic query to insert in packing slip  \n" +
                "					SET QueryForStatic = 'insert into temp_packing_slip_material_receive';  \n" +
                "				ELSE  \n" +
                "					-- create dynamic query to insert in recieving material  \n" +
                "					SET QueryForStatic = 'insert into temp_Component_Sid_Stock';  \n" +
                "				END IF;  \n" +
                "  \n" +
                "  \n" +
                "				-- loop item till all records found in string match of barcode template  \n" +
                "				barcodeMatch_loop:LOOP  \n" +
                "					-- get all five selected values  \n" +
                "					FETCH barcodeMatch_cursor INTO v_delimiter, v_length, v_fieldType, v_dataElementId, v_displayOrder;  \n" +
                "					-- exit loop if no record found for barcode match  \n" +
                "					IF exit_loop THEN  \n" +
                "						CLOSE barcodeMatch_cursor;  \n" +
                "						LEAVE barcodeMatch_loop;  \n" +
                "					END IF;  \n" +
                "					-- dynamic query to get dellimeter string with values from string  \n" +
                "					SET @sqlGetdelimiter = CONCAT('SELECT MAX(SeparateValue) into @delval FROM tempSeparateStrValues WHERE SeparateValue LIKE \"',v_delimiter,'%\";');  \n" +
                "					PREPARE stmtdelimiter FROM @sqlGetdelimiter;  \n" +
                "					EXECUTE stmtdelimiter;  \n" +
                "					DEALLOCATE PREPARE stmtdelimiter;  \n" +
                "  \n" +
                "					-- get delimiter values from string  \n" +
                "					SET delimiter_value_data=SUBSTRING(@delval,LENGTH(v_delimiter)+1,(LENGTH(@delval)-LENGTH(v_delimiter)+1));  \n" +
                "					-- check for field type is static or dynamic  \n" +
                "					-- if static field than check for mfg code and mfg part number  \n" +
                "					IF v_fieldType = 0  THEN  \n" +
                "						-- component_sid_stock  \n" +
                "						-- get static field name from barcode table delimiter data element id  \n" +
                "						SET StaticField=(SELECT tableField FROM br_label_template_manualfield WHERE id = v_dataElementId AND isDeleted = 0);  \n" +
                "						-- check if manufacturer part number available than get mfg component details, add in string with individuals values and keys  \n" +
                "						IF(StaticField=\"scanmfgpn\") THEN  \n" +
                "							SET MFG_Part_No = delimiter_value_data;  \n" +
                "							/* If component id is not found */  \n" +
                "							IF(pComponentID = 0)  \n" +
                "                            THEN  \n" +
                "								/* Get component data */  \n" +
                "								DROP TEMPORARY TABLE IF EXISTS temp_component_detail;  \n" +
                "								CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_detail AS  \n" +
                "								SELECT a.id, a.mfgPN, a.mfgcodeID, a.PIDCode, a.isCPN, a.refSupplierMfgpnComponentID, a.isGoodPart, a.replacementPartID, a.restrictUsePermanently, a.restrictUSEwithpermission, a.restrictPackagingUsePermanently, a.restrictPackagingUseWithpermission, a.isCustom, a.category, a.partType FROM  \n" +
                "								(  \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 	component c  \n" +
                "									WHERE 	c.mfgPN = delimiter_value_data AND c.isGoodPart = 1 AND c.isDeleted = 0    AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "									UNION  \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 		component_otherpn co  \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID AND c.isDeleted = 0  \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isGoodPart = 1 AND co.isDeleted = 0  \n" +
                "								) a  \n" +
                "								UNION  \n" +
                "								SELECT c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType FROM  \n" +
                "								(  \n" +
                "									SELECT 	c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 	component c  \n" +
                "									WHERE 	c.mfgPN=delimiter_value_data AND  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND c.isDeleted = 0  \n" +
                "									UNION  \n" +
                "									SELECT 		c.id, c.mfgPN, c.mfgcodeID, c.PIDCode, c.isCPN, c.refSupplierMfgpnComponentID, c.isGoodPart, c.replacementPartID, c.restrictUsePermanently, c.restrictUSEwithpermission, c.restrictPackagingUsePermanently, c.restrictPackagingUseWithpermission, c.isCustom, c.category, c.partType  \n" +
                "									FROM 		component_otherpn co  \n" +
                "									LEFT JOIN 	component c ON c.id = co.refComponentID  \n" +
                "									WHERE 		(c.mfgPN=delimiter_value_data OR co.name=delimiter_value_data)  \n" +
                "                                    AND (CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END) AND co.isDeleted = 0 AND c.isDeleted = 0  \n" +
                "								) a  \n" +
                "								INNER JOIN component c ON c.id = a.replacementPartID AND a.replacementPartID IS NOT NULL;  \n" +
                "  \n" +
                "								IF (pSupplierID IS NOT NULL) THEN  \n" +
                "									SELECT GROUP_CONCAT(refMfgCodeMstID) INTO v_RefMfgCodeMstID FROM supplier_mapping_mst s WHERE s.supplierID = pSupplierID  AND s.isCustMapping=0  \n" +
                "								        AND s.refMfgCodeMstID IN (SELECT t.mfgcodeID FROM temp_component_detail t) AND s.isDeleted = 0;  \n" +
                "								        SELECT GROUP_CONCAT(fun_getMfgCodeAndNameByID(mfgcodeID))INTO v_MFRList FROM temp_component_detail;  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail t WHERE FIND_IN_SET(t.mfgcodeID,v_RefMfgCodeMstID) AND isCustom = 1;  \n" +
                "								   ELSE  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_detail;  \n" +
                "								END IF;  \n" +
                "  \n" +
                "								IF (v_componentCount > 1) THEN  \n" +
                "									/* If component is more that one then remove supplier from list */  \n" +
                "									DROP TEMPORARY TABLE IF EXISTS temp_component_supplier_detail;  \n" +
                "									CREATE TEMPORARY TABLE IF NOT EXISTS temp_component_supplier_detail AS  \n" +
                "									SELECT * FROM temp_component_detail WHERE refSupplierMfgpnComponentID IS NULL;  \n" +
                "  \n" +
                "									/* After remove supplier if get only one record then  */  \n" +
                "									SELECT COUNT(1) INTO v_componentCount FROM temp_component_supplier_detail;  \n" +
                "									IF (v_componentCount < 2) THEN  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
                "										FROM 	temp_component_supplier_detail;  \n" +
                "									END IF;  \n" +
                "								ELSE  \n" +
                "									IF (pSupplierID IS NULL) THEN  \n" +
                "										SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
                "											INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
                "										FROM 	temp_component_detail;  \n" +
                "									ELSE  \n" +
                "										IF ((SELECT COUNT(1) FROM temp_component_detail) = 0) THEN  \n" +
                "											SET v_MfrNotFoundForSupplierQuote = 1;  \n" +
                "										ELSEIF ((SELECT COUNT(1) FROM temp_component_detail WHERE isCustom = 1) = 0) THEN  \n" +
                "											SET v_componentCount=0;  \n" +
                "											SET v_SupplierQuoteMFRIsNotCustomPart = 1;  \n" +
                "										ELSE  \n" +
                "											SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, refSupplierMfgpnComponentID, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission  \n" +
                "												INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, @mfgPartForSupplier, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission  \n" +
                "											FROM 	temp_component_detail WHERE isCustom = 1 AND FIND_IN_SET(mfgcodeID,v_RefMfgCodeMstID);  \n" +
                "										END IF;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "							ELSE  \n" +
                "                            	/* If component id is found */  \n" +
                "								SELECT 	COUNT(1) INTO v_componentCount  \n" +
                "								FROM 	component  \n" +
                "								WHERE 	id = pComponentID  \n" +
                "                                and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
                "  \n" +
                "							END IF;  \n" +
                "                            /* Remove from cursor if found more that one component */  \n" +
                "							IF v_componentCount > 1 THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "                            SELECT 	id, mfgPN, mfgcodeID, PIDCode, isCPN, isGoodPart, restrictUsePermanently, restrictUSEwithpermission, restrictPackagingUsePermanently, restrictPackagingUseWithpermission, category, partType  \n" +
                "									INTO v_componentId, v_mfgPartNO, v_partMFG, v_PIDCode, v_isCPNFlag, v_isGoodPart, v_restrictUsePermanently, v_restrictUSEwithpermission, v_restrictPackagingAliasPermanently, v_restrictPackagingAliasPermission, v_category, v_partType  \n" +
                "								FROM 	component  \n" +
                "								WHERE 	id = pComponentID  \n" +
                "							and (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END) AND isDeleted = 0;  \n" +
                "  \n" +
                "							/* If inventory is opening inventory and type is assembly */  \n" +
                "							IF(pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* If bad part found */  \n" +
                "							IF (v_isGoodPart != 1) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check all type of restriction */  \n" +
                "							IF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check all type of restriction with packaging */  \n" +
                "							IF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Barcode MFR and Part MFR mismatch */  \n" +
                "							IF (@barcodeMFG != -1 AND @barcodeMFG != -2 AND @barcodeMFG != -3 AND @barcodeMFG != -4 AND @barcodeMFG != -5 AND @barcodeMFG != -6 AND @barcodeMFG != -7 AND @barcodeMFG != -7 AND @barcodeMFG != v_partMFG AND v_componentCount = 1) THEN  \n" +
                "								SET BarcodeMFGMatch = 'Mismatch';  \n" +
                "								CLOSE barcodeMatch_cursor;  \n" +
                "								LEAVE barcodeMatch_loop;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Found DIST then set id of MFR of that DIST */  \n" +
                "							SELECT mfgType INTO @MFGType FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
                "							IF (@MFGType = 'DIST') THEN  \n" +
                "								SET v_SupplierID = v_componentId;  \n" +
                "								SELECT id INTO v_componentId FROM component WHERE id = @mfgPartForSupplier and  \n" +
                "                                    (CASE WHEN pExcludeStatus is not null THEN partStatus != pExcludeStatus ELSE 1=1 END);  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Check kit allocation */  \n" +
                "							IF (pkitAssemblyID IS NOT NULL AND v_componentId IS NOT NULL) THEN  \n" +
                "								/* Get data of rfq line, rfq line item, cpn, packaging part of kit bom */  \n" +
                "								SELECT GROUP_CONCAT(partId) INTO v_BOMAssyIds FROM kit_allocation_assy_detail WHERE isDeleted = 0 AND refSalesOrderDetID = pSalesOrderDetailID;  \n" +
                "								SELECT 	COUNT(1), a.id, a.componentID, a.restrictUseInBOMStep, a.restrictUseInBOMExcludingAliasStep, a.restrictCPNUseInBOMStep, a.isInstall, a.isPurchase, a.isBuyDNPQty, a.lineID, a.alternateLineId, assyId  \n" +
                "										INTO v_BOMLineCount, v_BOMLineId, v_rfqLineItemsID, v_restrictUseInBOM, v_restrictUsePackagingInBOM, v_restrictUseCPNInBOM, v_isInstall, v_isPurchase, v_isBuyDNPQty, v_BOMLineItemNo, v_AlternateLineId, v_BOMAssyId  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	*  \n" +
                "										FROM  \n" +
                "											(  \n" +
                "												SELECT 		rl.id, cp.componentID, rml.restrictUseInBOMStep, rml.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rml.id AS alternateLineId, rml.partID AS assyId  \n" +
                "												FROM 		component_packagingalias cp  \n" +
                "												LEFT JOIN 	component c ON c.packaginggroupID = cp.aliasgroupid  \n" +
                "												LEFT JOIN 	rfq_lineitems_alternatepart rml ON rml.mfgpnid=c.id  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rml.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rml.partID, v_BOMAssyIds) AND rml.isDeleted = 0  \n" +
                "												UNION  \n" +
                "												SELECT 		rl.id, mfgpnid AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
                "												FROM 		rfq_lineitems_alternatepart rla  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0  \n" +
                "												UNION  \n" +
                "												SELECT 		rl.id, custPNID AS componentID, rla.restrictUseInBOMStep, rla.restrictUseInBOMExcludingAliasStep, rl.restrictCPNUseInBOMStep, rl.isInstall,  \n" +
                "														rl.isPurchase, rl.isBuyDNPQty, rl.lineID, rla.id AS alternateLineId, rla.partID AS assyId  \n" +
                "												FROM 		rfq_lineitems_alternatepart rla  \n" +
                "												INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID  \n" +
                "												WHERE 		FIND_IN_SET(rla.partID, v_BOMAssyIds) AND rla.isDeleted = 0 AND custPNID IS NOT NULL  \n" +
                "												#GROUP BY 	custPNID, rla.partID  \n" +
                "											) b  \n" +
                "										WHERE b.componentID = v_componentId AND b.alternateLineId = IFNULL(pBOMLineID, b.alternateLineId)  \n" +
                "										#GROUP BY b.lineID, b.assyId  \n" +
                "									) a;  \n" +
                "  \n" +
                "								/* BOM line not found  */  \n" +
                "								IF (v_rfqLineItemsID IS NULL) THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								/* Found More then one BOM line */  \n" +
                "								ELSEIF (v_BOMLineCount > 1) THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								ELSE  \n" +
                "									/* Restrict use bom */  \n" +
                "									IF (v_restrictUseInBOM = 1 OR v_restrictUseCPNInBOM = 1) THEN  \n" +
                "										CLOSE barcodeMatch_cursor;  \n" +
                "										LEAVE barcodeMatch_loop;  \n" +
                "									END IF;  \n" +
                "  \n" +
                "									/* BOM line contain any error */  \n" +
                "									SELECT fun_getBOMLineCleanStatusErrorCategoryWise(v_AlternateLineId, NULL, NULL, NULL, 2) INTO v_isBOMLineClean;  \n" +
                "									IF (v_isBOMLineClean = 0) THEN  \n" +
                "										CLOSE barcodeMatch_cursor;  \n" +
                "										LEAVE barcodeMatch_loop;  \n" +
                "									END IF;  \n" +
                "								END IF;  \n" +
                "  \n" +
                "								/* Part not install, purchase and not dnp  */  \n" +
                "								IF (v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty != 'Y') THEN  \n" +
                "									CLOSE barcodeMatch_cursor;  \n" +
                "									LEAVE barcodeMatch_loop;  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "  \n" +
                "							/* Set dynamic query for component */  \n" +
                "							IF  v_componentCount = 1 THEN  \n" +
                "								IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
                "									SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',v_componentId, '\"');  \n" +
                "								ELSE  \n" +
                "									SET strFeildforInsert = CONCAT(strFeildforInsert,',','refcompid');  \n" +
                "									SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_componentId, '\"');  \n" +
                "								END IF;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Not in use */  \n" +
                "						-- check if manufacturer code available than get mfg details, add in string with individuals values and keys  \n" +
                "						IF(StaticField=\"scanmfgcode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							SELECT COUNT(1),id INTO @mfgCount,@mfgcode_ref_id FROM mfgcodemst WHERE mfgCode=delimiter_value_data AND isDeleted = 0;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for pkgQty */  \n" +
                "						IF(StaticField=\"pkgQty\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','pkgQty');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for lotcode */  \n" +
                "						IF(StaticField=\"lotCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','lotCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for mfrdatecode and datecode */  \n" +
                "						IF(StaticField=\"mfrDateCode\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','mfrDateCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "							SELECT dateCodeFormatID INTO v_dateCodeFormatID FROM mfgcodemst WHERE id = v_partMFG AND isDeleted = 0;  \n" +
                "							IF (v_dateCodeFormatID IS NOT NULL) THEN  \n" +
                "								CALL Sproc_GenerateInternalDateCodeFromMFRDateCode(v_dateCodeFormatID, delimiter_value_data, FALSE);  \n" +
                "								SELECT internalDateCode INTO v_InternalDateCode FROM temp_InternalDateCodeFromMFRDateCode;  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','dateCode');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',v_InternalDateCode, '\"');  \n" +
                "							ELSE  \n" +
                "								SET exit_loop = FALSE;  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for binid */  \n" +
                "						IF(StaticField=\"binID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','binName');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for packaging */  \n" +
                "						IF(StaticField=\"packagingID\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packaging');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for nickname */  \n" +
                "						IF(StaticField=\"nickname\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipDetailNickname');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for po number */  \n" +
                "						IF(StaticField=\"poNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','poNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for so number */  \n" +
                "						IF(StaticField=\"supplierSONumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','supplierSONumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for packing slip number */  \n" +
                "						IF(StaticField=\"packingSlipNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','packingSlipNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						/* Set dynamic query for invoice number */  \n" +
                "						IF(StaticField=\"invoiceNumber\" AND delimiter_value_data IS NOT NULL) THEN  \n" +
                "							IF (strFeildforInsert = 'scanlabel') THEN  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
                "								SET valuesforInsert= CONCAT('\"',valuesforInsert,'\"',',', '\"',delimiter_value_data, '\"');  \n" +
                "							ELSE  \n" +
                "								SET strFeildforInsert = CONCAT(strFeildforInsert,',','invoiceNumber');  \n" +
                "								SET valuesforInsert= CONCAT(valuesforInsert,',', '\"',delimiter_value_data, '\"');  \n" +
                "							END IF;  \n" +
                "						END IF;  \n" +
                "					ELSE  \n" +
                "						/* Set dynamic query for other than system generated */  \n" +
                "						SELECT entityID INTO v_entityId FROM dataelement WHERE  \n" +
                "							dataElementID=v_dataElementId AND isDeleted = 0;  \n" +
                "						INSERT INTO tempDelimiterTbl (`pentityId`,`pdataElementId`,`pdelimiter_value`)  \n" +
                "							VALUES (v_entityId,v_dataElementId,delimiter_value_data);  \n" +
                "					END IF;  \n" +
                "				END LOOP barcodeMatch_loop;  \n" +
                "  \n" +
                "				-- check if mfg and component both found than  \n" +
                "				IF v_componentCount = 0 AND pSupplierID IS NULL THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not exist',4,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=0 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (v_MFRList,20,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_MfrNotFoundForSupplierQuote = 0 AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
                "				ELSEIF v_componentCount = 0 AND pSupplierID IS NOT NULL AND v_SupplierQuoteMFRIsNotCustomPart=1 THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('This supplier is having strictly custom component setting, so we only allow MPN whose MFR is already mapped and the part is custom part, and the scanned MPN is not a custom part.',21,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount > 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Multiple MPN found',5,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount = 1 AND v_partType = 4 AND pIsFromUID = 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>', v_PIDCode ,'</b> part type is <b>Other</b>. So you cannot create UMID for PID <b>', v_PIDCode ,'</b>.'),23,v_PIDCode);  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
                "					IF (v_isGoodPart = 2) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>Incorrect Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
                "					ELSE  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been defined as an <b>TBD Part</b> in part master, You cannot {0} this part.'),11,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSEIF (v_restrictUsePermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Including Packaging Alias With Permanently</b> at part master level.'),12,MFG_Part_No);  \n" +
                "				ELSEIF (v_restrictPackagingAliasPermanently = 1 AND (IFNULL(pCallFrom, 1) != 'RMA' AND IFNULL(pCallFrom, 1) != 'MC' AND IFNULL(pCallFrom, 1) != 'MD')) THEN  \n" +
                "					IF (v_isCPNFlag = 1) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
                "					ELSE  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> was <b>Restricted Use Excluding Packaging Alias With Permanently</b> at part master level.'),16,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSEIF (BarcodeMFGMatch = 'Mismatch') THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Scanned ', v_BarcodeType, ' Barcode is belong to different manufacturer barcode template master. Please change ', @barcode_name, ' template and make it for All Manufacturer.'),8,v_barcode_id);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_rfqLineItemsID IS NULL) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN or CPN is not found in bom of this assembly.',7,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_BOMLineCount > 1) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN is contain in more than one line.',17,CONCAT(v_componentId, '+', MFG_Part_No));  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isBOMLineClean = 0) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('Assembly <b>',IFNULL(fun_getAssyPIDCodeByID(pkitAssemblyID),''),'''s</b> BOM line# <b>',TRIM(IFNULL(v_BOMLineItemNo,\"\"))+0,'</b> part(s) <b>',v_PIDCode,'</b> are not clean or part are not Engineering Approved yet. Please clean line level issue to allocate material.'),15,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_isInstall = 0 AND v_isPurchase = 0 AND v_isBuyDNPQty = 'N') THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MPN does not populate in BOM. So, you can not allocate to kit',14,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),13,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUsePackagingInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('PID <b>',v_PIDCode,'</b> has been <b>Restrict use Excluding Packaging in BOM Permanently</b>.<br/>Thus, you can not allocate to this assembly.'),18,MFG_Part_No);  \n" +
                "				ELSEIF (pkitAssemblyID IS NOT NULL AND v_restrictUseCPNInBOM = 1) THEN  \n" +
                "				 	INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('CPN <b>',v_PIDCode,'</b> has been <b>Restrict use in BOM</b>.<br/>Thus, you can not allocate to this assembly.'),19,MFG_Part_No);  \n" +
                "				ELSEIF (pInventoryType = 'OI' AND v_category = 3) THEN  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create UMID for assembly <b>',v_PIDCode,'</b> from Existing Stock.'),22,MFG_Part_No);  \n" +
                "				ELSEIF (v_componentCount = 1 AND  pInventoryType = 'NI' AND pIsFromUID = 1) THEN  \n" +
                "					SELECT COUNT(1) INTO v_pendingPartCount FROM vu_umid_creation_pending WHERE BalanceQty > 0 AND PartId = v_componentId AND BinID = pBinID;  \n" +
                "                    IF(v_pendingPartCount = 0) THEN  \n" +
                "						SELECT b.Name INTO @binName FROM binmst b WHERE b.id = pBinID;  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('<b>', v_PIDCode ,'</b> does not belong to the bin <b>', @binName ,'</b>. Review Pending UMID list should further investigation required.'),24,v_PIDCode);  \n" +
                "                    ELSEIF(v_pendingPartCount = 1) THEN  \n" +
                "						SELECT  ps.packingSlipModeStatus,  vu.receivedStatus, vu.packingSlipNumber, b.Name,  fun_getPackagingNameByID(vu.packagingID) AS packagingType  \n" +
                "								INTO @packingSlipModeStatus, @receivedStatus, @packingSlipNumber, @binName, @packagingType  \n" +
                "						FROM vu_umid_creation_pending vu  \n" +
                "                                INNER JOIN	packing_slip_material_receive ps on ps.id = vu.packingSlipID AND ps.isdeleted = 0  \n" +
                "                                INNER JOIN 	binmst b on b.id = vu.BinID AND b.isdeleted = 0  \n" +
                "								WHERE 		vu.BalanceQty > 0 AND vu.PartId = v_componentId AND vu.BinID = pBinID;  \n" +
                "						IF(@packingSlipModeStatus = 'D') THEN  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as packing slip# <b>', @packingSlipNumber ,'</b> is in <b>Draft</b> mode for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),25,v_PIDCode);  \n" +
                "                        ELSEIF(@receivedStatus = 'R' OR @receivedStatus = 'P') THEN  \n" +
                "							SET @receivedStatusValue = IF(@receivedStatus = 'P', 'Pending', 'Rejected');  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES (CONCAT('You cannot create the UMID as line received status of packing slip# <b>', @packingSlipNumber ,'</b> is <b>',@receivedStatusValue,'</b> for available stock of part <b>', v_PIDCode ,'</b> with packaging <b>', @packagingType ,'</b> in bin <b>', @binName ,'</b>.'),26,v_PIDCode);  \n" +
                "                        END IF;  \n" +
                "                    END IF;  \n" +
                "                ELSEIF (@mfgCount > 0 AND v_componentCount > 0) THEN  \n" +
                "					SELECT COUNT(*) INTO @Mfgmatched FROM component c WHERE c.mfgPN=v_mfgPartNO AND c.mfgcodeID=@mfgcode_ref_id;  \n" +
                "					IF @Mfgmatched = 0  THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN are avialable but not matched in component',2,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				ELSE  \n" +
                "					IF @mfgCount = 0 THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code is not found',3,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF  @mfgCount = 0 AND v_componentCount=0  THEN  \n" +
                "						TRUNCATE TABLE temp_MfgCodeAndPartNO_error;  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('MFR code and MPN is not Found',0,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				IF (pCPN = 1) THEN  \n" +
                "					SELECT mfgcodeId, isCPN INTO @codeFromPart, @isCPNPart FROM component WHERE id = v_componentId;  \n" +
                "					SELECT id INTO @codeFromMfg FROM mfgcodemst WHERE id = pCustomerID;  \n" +
                "					IF (@codeFromPart != @codeFromMfg) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('CPN is mismatch with Customer Code',6,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					IF (@isCPNPart != 1) THEN  \n" +
                "						INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Scanned MFR Part is not CPN, Please check',10,MFG_Part_No);  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "				IF (pIsFromUID = 1) THEN  \n" +
                "					/* If not fire any validation */  \n" +
                "					IF ((SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "  \n" +
                "						-- must call statements in sequence  \n" +
                "						/* Add component sid stock in temp table of stock table and add in temp table */  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,',','createdBy',')','VALUES','(',valuesforInsert,',',puserID,')',';');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						SET UpdateValue = CONCAT('Update temp_Component_Sid_Stock set cpn=',pCPN,' ,mfgAvailabel=',pMFGAvailabel );  \n" +
                "  \n" +
                "						IF (pprefix IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pprefix,'\"');  \n" +
                "                        END IF;  \n" +
                "  \n" +
                "						IF (pnickName IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',nickName=','\"',pnickName,'\"');  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pRefCpnMfgID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refCPNMFGPNID=',pRefCpnMfgID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pCustomerID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',customerID=',pCustomerID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pAssyID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',assyID=',pAssyID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (pReceiveMaterialType IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',receiveMaterialType=','\"',pReceiveMaterialType,'\"');  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						IF (v_SupplierID IS NOT NULL) THEN  \n" +
                "							SET UpdateValue = CONCAT(UpdateValue, ',refSupplierPartId=',v_SupplierID);  \n" +
                "						END IF;  \n" +
                "  \n" +
                "						SET @sql2 = UpdateValue;  \n" +
                "						PREPARE stmt2 FROM @SQL2;  \n" +
                "						EXECUTE stmt2;  \n" +
                "						DEALLOCATE PREPARE stmt2;  \n" +
                "  \n" +
                "						/* Add success result in save error table */  \n" +
                "						IF (pkitAssemblyID IS NULL) THEN  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
                "						ELSE  \n" +
                "							INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,CONCAT(MFG_Part_No, \"###\", v_BOMAssyId));  \n" +
                "						END IF;  \n" +
                "						/* Add data in table of delimeter table */  \n" +
                "						IF ((SELECT COUNT(*) FROM tempDelimiterTbl)> 0)  THEN  \n" +
                "							INSERT INTO temp_Component_Sid_Stock_Dataelement_Values (`entityid`,`dataelementid`,`value`, `createdBy`)  \n" +
                "							SELECT t.pentityId,t.pdataElementId,t.pdelimiter_value,puserID FROM tempDelimiterTbl t;  \n" +
                "						END IF;  \n" +
                "						/* select detail of error table */  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "  \n" +
                "						/* select detail in temp table of component sid stock table  */  \n" +
                "						SELECT * FROM temp_Component_Sid_Stock;  \n" +
                "						/* Select data of component */  \n" +
                "						SELECT 	c.*,  \n" +
                "							mg.mfgcode AS mfgCode,  \n" +
                "							mg.mfgName AS mfgName,  \n" +
                "                            fun_GetFormattedMfgCode(mg.mfgCode, mg.mfgName, v_mfgNameFormat) mfgCodeName,  \n" +
                "							cp.name AS packagingName,  \n" +
                "							cp.sourceName,  \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
                "							csup.packageQty AS supplierPkgQty,  \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
                "							csup.mfgcodeID AS supplierMfgId,  \n" +
                "							mcm.mfgcode AS supplierMFGCode,  \n" +
                "							mcm.mfgName AS supplierMFGName,  \n" +
                "                            fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, v_mfgNameFormat) supplierMFGCodeName,  \n" +
                "							csup.mfgPN AS supplierMFGPN,  \n" +
                "							csup.packagingID AS supplierPackagingId,  \n" +
                "                            csp.name AS supplierPackagingName,  \n" +
                "							csp.sourceName AS supplierSourceName,  \n" +
                "							csup.minimum AS supplierMinimum,  \n" +
                "							ccpn.id AS cpnID,  \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
                "							rfqroh.rohsIcon AS rohsIcon,  \n" +
                "							rfqroh.name AS rohsName,  \n" +
                "							rfqmou.name AS mountingTypeName,  \n" +
                "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
                "							um.unitName AS uomName,  \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
                "						FROM component AS c  \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
                "                        LEFT JOIN component_packagingmst cp on cp.id = c.packagingID AND cp.isdeleted = 0  \n" +
                "                        LEFT JOIN component_packagingmst csp on csp.id = csup.packagingID AND csp.isdeleted = 0  \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
                "						WHERE c.id = v_componentId;  \n" +
                "  \n" +
                "						/* select data of data element of component sid stock */  \n" +
                "						SELECT cssdlv.*, dl.dataElementName AS `dataElementName`  \n" +
                "						FROM temp_Component_Sid_Stock_Dataelement_Values cssdlv  \n" +
                "						LEFT OUTER JOIN `dataelement` AS dl  \n" +
                "						ON cssdlv.dataelementid = dl.dataElementID AND dl.isDeleted = 0;  \n" +
                "						/* select data of cpn */  \n" +
                "						SELECT 	id, refComponentID, refCPNPartID  \n" +
                "						FROM 	component_cust_alias_rev_pn  \n" +
                "						WHERE 	refCPNPartID = v_componentId AND isDeleted = 0;  \n" +
                "  \n" +
                "						SELECT GROUP_CONCAT(componentID) INTO v_MFRPackagingId FROM component_packagingalias WHERE aliasgroupID IN (  \n" +
                "							SELECT aliasgroupID FROM component_packagingalias WHERE componentID = v_rfqLineItemsID AND isDeleted = 0  \n" +
                "						) AND isDeleted = 0;  \n" +
                "  \n" +
                "						/* select detail of bom */  \n" +
                "						SELECT 		rla.restrictUseInBOMStep, rla.restrictUseInBOMWithPermissionStep, rla.restrictUseInBOMExcludingAliasStep, rla.restrictUseInBOMExcludingAliasWithPermissionStep, rla.customerApproval,  \n" +
                "								rl.restrictCPNUseInBOMStep, rl.customerApprovalCPN  \n" +
                "						FROM 		rfq_lineitems_alternatepart rla  \n" +
                "						INNER JOIN	rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
                "						WHERE 		rla.isDeleted = 0  \n" +
                "									AND FIND_IN_SET(rla.partID, IFNULL(v_BOMAssyIds, pkitAssemblyID))  \n" +
                "									AND rla.rfqLineItemsID = IFNULL(v_BOMLineId, 0)  \n" +
                "									AND (CASE WHEN pCPN = 1 THEN FIND_IN_SET(rl.custPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) ELSE FIND_IN_SET(rla.mfgPNID, IFNULL(v_MFRPackagingId, v_rfqLineItemsID)) END);  \n" +
                "  \n" +
                "					ELSE  \n" +
                "						/* Found any error then select error  */  \n" +
                "						SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "					END IF;  \n" +
                "				ELSEIF(v_isGoodPart != 1) THEN  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				ELSE  \n" +
                "					/* generate dynamic query and save in temp in case of packing slip */  \n" +
                "					IF (pCategory = 'P' OR (SELECT COUNT(*) FROM temp_MfgCodeAndPartNO_error) = 0) THEN  \n" +
                "						SET @SQl1 = CONCAT(QueryForStatic,'(',strFeildforInsert,')','VALUES','(',valuesforInsert,')',';');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "						DEALLOCATE PREPARE stmt1;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					/* Add success data in temp error table */  \n" +
                "					INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES ('Validation Clear',1,MFG_Part_No);  \n" +
                "  \n" +
                "					/* Add success data in temp table for select in case of call from packing slip packing slip screen */  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "					CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "					SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "  \n" +
                "					/* In case of MPN then select recod of component and save in temp table in case of call from packing slip scrren */  \n" +
                "					IF (pCategory = 'M') THEN  \n" +
                "						DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "						CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "						SELECT 	c.*,  \n" +
                "							fun_GetFormattedMfgCode(mg.mfgCode, mg.mfgName, v_mfgNameFormat) mfgCodeName,  \n" +
                "							fun_getPackagingNameByID(c.packagingID) AS packagingName,  \n" +
                "							CONCAT(csml.levelRating, ' (', csml.time, ')') AS mslTime,  \n" +
                "							csup.packageQty AS supplierPkgQty,  \n" +
                "                            csup.umidSPQ AS supplierUmidSPQ,  \n" +
                "							csup.mfgcodeID AS supplierMfgId,  \n" +
                "							mcm.mfgcode AS supplierMFGCode,  \n" +
                "							mcm.mfgName AS supplierMFGName,  \n" +
                "                            fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, v_mfgNameFormat) supplierMFGCodeName,  \n" +
                "							csup.packagingID AS supplierPackagingId,  \n" +
                "							csup.mfgPN AS supplierMFGPN,  \n" +
                "							csup.id AS supplierMFGPNID,  \n" +
                "							fun_getRoHSIconByID(csup.RoHSStatusID) supplierRohsIcon,  \n" +
                "							fun_getRoHSNameByID(csup.RoHSStatusID) supplierRohsName,  \n" +
                "							ccpn.id AS cpnID,  \n" +
                "							ccpn.mfgcodeID AS cpnMFGCodeID,  \n" +
                "							rfqroh.rohsIcon AS rohsIcon,  \n" +
                "							rfqroh.name AS rohsName,  \n" +
                "							rfqmou.name AS mountingTypeName,  \n" +
                "                            rfqmou.hasLimitedShelfLife AS hasLimitedShelfLife,  \n" +
                "							um.unitName AS uomName,  \n" +
                "							(SELECT COUNT(1) FROM component_logicalgroup_detail WHERE isDeleted = 0 AND logicalgroupID = -4 AND rfqMountingTypeID = c.mountingTypeID) countOfMountingGroup,  \n" +
                "							(SELECT dateCodeFormat FROM dateCodeFormatMst WHERE isDeleted = 0 AND id = mg.dateCodeFormatID) dateCodeFormat,  \n" +
                "							mg.dateCodeFormatID AS dateCodeFormatId,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackageName  \n" +
                "						FROM component AS c  \n" +
                "						LEFT JOIN component_mslmst AS csml ON csml.id = c.mslID  \n" +
                "						LEFT JOIN component AS csup ON csup.refSupplierMfgpnComponentID = c.id AND csup.id = v_SupplierID  \n" +
                "						LEFT JOIN mfgcodemst AS mg ON mg.id = c.mfgcodeID  \n" +
                "						LEFT JOIN mfgcodemst AS mcm ON mcm.id = csup.mfgcodeID  \n" +
                "						LEFT JOIN component AS ccpn ON ccpn.id = pRefCpnMfgID  \n" +
                "						LEFT JOIN rfq_rohsmst AS rfqroh ON rfqroh.id = c.RoHSStatusID  \n" +
                "						LEFT JOIN rfq_mountingtypemst AS rfqmou ON rfqmou.id = c.mountingTypeID  \n" +
                "						LEFT JOIN uoms AS um ON um.id = c.uom  \n" +
                "						WHERE c.id = v_componentId;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				INSERT INTO temp_MfgCodeAndPartNO_error (errorText,IsSuccess,MFGPart) VALUES  \n" +
                "					('Barcode template does not exist, Please add template',0,MFG_Part_No);  \n" +
                "  \n" +
                "				SELECT errorText,IsSuccess,MFGPart FROM temp_MfgCodeAndPartNO_error;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDSuccessDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDSuccessDetail AS  \n" +
                "				SELECT 1;  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "				SELECT 1;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "		END block2;  \n" +
                "	ELSE  \n" +
                "		IF (pIsFromUID = 1) THEN  \n" +
                "			SELECT * FROM tempUIDSuccessDetail;  \n" +
                "		ELSE  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempUIDComponentDetail;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDComponentDetail AS  \n" +
                "			SELECT 1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5732,'2.00','V1',' resolve group by error from Sproc_MatchBarCodeAndSaveDelimiters - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5732:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 05-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsSubAssembly TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE,  \n" +
                "    IN pSubAssemblyTab TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            (CASE WHEN kaad.bomAssyLevel = 0 THEN kaad.bomInternalVersionString ELSE 'N/A' END) AS kitAllocationInternalVersion,  \n" +
                "            kaad.bomAssyLevel  \n" +
                "		\");  \n" +
                "  \n" +
                "	SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND kaad.isDeleted = 0\") ;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetKitList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				(CASE WHEN assyID = partID THEN 0 ELSE 1 END) AS isSubAssembly,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned,  \n" +
                "				fun_getKitReleaseStatus(subKitStatusPercentage,totalKitQty,totalPOQty,assyKitQty,assyPOQty,releasedPlanCount,pendingCount) AS  kitReleaseStatus,  \n" +
                "				fun_getKitReturnStatus(pendingReleaseCount,releasedNotReturnedCount,returnedCount,readyToReturnCount,shortageReturnCount) AS kitReturnStatus  \n" +
                "		FROM  \n" +
                "			(SELECT  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "                `vuss`.`Status` AS completedStatus,  \n" +
                "                (  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "                				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "                p.releasedPlanCount,  \n" +
                "                p.pendingCount,  \n" +
                "                vrr.pendingReleaseCount,  \n" +
                "                vrr.releasedNotReturnedCount,  \n" +
                "                vrr.returnedCount,  \n" +
                "                vrr.readyToReturnCount,  \n" +
                "                vrr.shortageReturnCount,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				`vuss`.`PartID` AS assyID,  \n" +
                "                ro.rohsIcon,  \n" +
                "                ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "                `vuss`.`custAssyPN` AS custAssyPN,  \n" +
                "                `vuss`.`liveVersion` AS liveVersion,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "                `vuss`.`kitQty` AS kitQty,  \n" +
                "				(CASE  WHEN (`vuss`.`isHotJob` = 0) THEN  'No'  \n" +
                "					   WHEN (`vuss`.`isHotJob` = 1) THEN  'Yes'  \n" +
                "					   ELSE  ''  END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "                (  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				`vuss`.`price` AS price,`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				fun_GetFormattedMfgCode(vuss.mfgCode, vuss.mfgName,\", vMfgCodeFormat ,\") AS companyName,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				`vuss`.`Balanced Due Qty` AS openQty,  \n" +
                "				`vuss`.frequency AS frequencyName,  \n" +
                "				vuss.frequencyType AS frequencyTypeName,  \n" +
                "				case when vuss.refSODetID is not null then sa.salesAssy else '' end  AS salesAssy,  \n" +
                "				sr.salesRelease AS salesRelease,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				vuss.assignQty AS assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO = 1 AND vuss.blanketPOOption = 2 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) AS  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) AS totalextPriceDisplayValue,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				vuss.poRevisionDate  AS poRevisionDate,  \n" +
                "				vuss.releaseLevelComment AS releaseLevelComment,  \n" +
                "				vuss.blanketPOOption,  \n" +
                "				vuss.blanketPOOptionText,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) AS pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "                ifnull(p.ishotjob,0) AS isBuildWiseHotJob ,  \n" +
                "                p.nextShipDate AS nextShipDate,  \n" +
                "                wo.WONumber AS workorders,  \n" +
                "                wo.WOIds AS workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				hutkit.refType AS refTypeKA,  \n" +
                "				hutkit.status AS haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' ON ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutkit.startDate))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "				kaad.perAssyBuildQty,  \n" +
                "				kaad.partId AS partID,  \n" +
                "                cassy.PIDCode AS assyPIDCode,  \n" +
                "				cassy.mfgPN AS assyMfgPN,  \n" +
                "                roassy.rohsIcon AS assyRohsIcon,  \n" +
                "                roassy.name assyRohsName,  \n" +
                "				cassy.isCustom AS assyIsCustomPart,  \n" +
                "                cassy.custAssyPN AS assyCustAssyPN,  \n" +
                "                cassy.nickName AS assyNickName,  \n" +
                "				cassy.mfgPNDescription AS assyPartDescription,  \n" +
                "				IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`PO Qty`,0) AS assyPOQty,  \n" +
                "				IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`mrpQty`,0) AS assyMRPQty,  \n" +
                "				IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`kitQty`,0) AS assyKitQty,  \n" +
                "				(CASE WHEN kaad.bomAssyLevel = 0 THEN COUNT(1) OVER (PARTITION BY kaad.refSalesOrderDetID) - 1 ELSE 0 END) AS subAssyCount\",v_DynamicColumns, \"  \n" +
                "		FROM   vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "			INNER JOIN  component cassy ON kaad.partId = cassy.id AND cassy.isDeleted = 0 AND cassy.parttype IN (3,2)  \n" +
                "			LEFT JOIN  rfq_rohsmst roassy ON cassy.RoHSStatusID = roassy.id AND roassy.isDeleted = 0  \n" +
                "			LEFT JOIN (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s INNER JOIN component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 AND c.parttype IN (3,2)) AS sa ON sa.id = vuss.refSODetID  \n" +
                "			LEFT JOIN (SELECT shippingid,Sdetid, qty, CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),'%m/%d/%y')) salesRelease  \n" +
                "					FROM salesshippingmst  b WHERE isdeleted = 0 ) AS sr ON sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "			LEFT JOIN (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details WHERE isdeleted = 0  \n" +
                "					GROUP BY refSalesOrderDetID ) AS so ON so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "			LEFT JOIN (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds, GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE  wsd.isdeleted = 0  \n" +
                "					GROUP BY wsd.salesOrderDetailID  \n" +
                "				) AS wo ON wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "			LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  IFNULL(subAssyID, refAssyId) AS partID,  \n" +
                "							MAX(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  AND  kitStatus!='R' then 1 else 0 end )  AS ishotjob,  \n" +
                "							MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "							MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "							COUNT(1) totalPlan,  \n" +
                "							SUM(poQty) totalPOQty,  \n" +
                "							SUM(kitReleaseQty) totalKitQty,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "							SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  WHERE 	isDeleted = 0  \n" +
                "					GROUP BY salesOrderDetID, partID  \n" +
                "				) AS p ON p.salesOrderDetID = `vuss`.`salesOrderDetailId` AND p.partID = kaad.partId  \n" +
                "					#AND (CASE WHEN p.subAssyID IS NOT NULL THEN p.subAssyID = kaad.partId END)  \n" +
                "			LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,   IFNULL(subAssyID, refAssyId) AS partID,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToReturnCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, partID  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId AND vrr.partID = kaad.partId  \n" +
                "			#AND (CASE WHEN vrr.subAssyID IS NOT NULL THEN vrr.subAssyID = kaad.partId END)  \n" +
                "		LEFT JOIN 	(  \n" +
                "			SELECT 	refSalesOrderDetID, assyID, mainAssy,  \n" +
                "					(k.totalLine - k.totalNotRequireLine) AS totalLine,  \n" +
                "					k.shortageLine,  \n" +
                "					Round(k.allocPerComponent,2) allocPerComponent,  \n" +
                "					Round(k.allocPerWithSubAssy,2) allocPerWithSubAssy,  \n" +
                "					Round((k.shortageLine/k.totalLine)*100) AS shortagePer  \n" +
                "			FROM  \n" +
                "				(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
                "						COUNT(1) AS `totalLine`,  \n" +
                "						SUM( k.shortageline) shortageline,  \n" +
                "						SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "						(CASE WHEN assyID = mainAssy THEN  MIN(mainAssyPerForSubAssy) ELSE ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) END) AS allocPerWithSubAssy,  \n" +
                "						(CASE WHEN assyID = mainAssy THEN  MIN(mainAssyPerForComponent) ELSE SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN k.MainAssyLine ELSE 0 END) END) AS allocPerComponent  \n" +
                "				FROM  \n" +
                "					(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
                "							k.qpaWithDnp, k.allocationPer, k.isNotRequiredKitAllocation,  k.allocatedPercePerLine, k.MainAssyLine, k.shortageline,  \n" +
                "							SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForSubAssy,  \n" +
                "							SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN k.MainAssyLine ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForComponent  \n" +
                "				 FROM  \n" +
                "						(SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "								vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "								IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "								(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "								(case when vk.assyid = sd.partid then vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "								(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "								(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "								vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "							FROM  	`vu_kit_allocation_detail` vk  \n" +
                "							INNER JOIN    salesorderdet sd ON vk.refSalesorderdetid  = sd.id  \n" +
                "							WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "						) AS k  \n" +
                "					) AS k GROUP bY assyID, refSalesorderdetid, mainAssy  \n" +
                "				) AS k  \n" +
                "            ) AS ka ON ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` AND ka.mainAssy =  `vuss`.`PartID` AND ka.assyID = kaad.partId  \n" +
                "			LEFT JOIN  rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN  holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId AND hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId AND htk.refType='KA' AND htk.isDeleted=0)  \n" +
                "            LEFT JOIN (SELECT ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) AS initialStockCount  \n" +
                "							FROM assemblystock ass WHERE ass.isDeleted =0 AND ass.type = 'OS'  \n" +
                "                            GROUP BY ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID)  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` AND astk.refSalesOrderID = vuss.`Sales Order ID` AND astk.partID = kaad.partId  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY (nextReleaseDate IS NULL),  nextReleaseDate ASC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  #need to check once  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "       ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pIsSubAssembly = 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND isSubAssembly = 0 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSubAssemblyTab = 1) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND subAssyCount > 0 \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	#select @temp_Sproc_GetKitList;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetKitList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount, sum(subAssyCount) SubAssemblyCount  FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5733,'2.00','V1','Bug 40117: Date & Time showing wrong at halted tool tip in kit allocation while change time zone - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5733:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022  *********************************** */
                "drop function if exists fun_getPOTypeByID;  \n" +
                "CREATE FUNCTION `fun_getPOTypeByID`(  \n" +
                "pSOId INT  \n" +
                ") RETURNS varchar(200) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn VARCHAR(200);  \n" +
                "	SELECT (CASE WHEN isRmaPo THEN 'RMA PO'  \n" +
                "			WHEN  isBlanketPO THEN 'Blanket PO'  \n" +
                "            WHEN isLegacyPO THEN 'Legacy PO'  \n" +
                "            ELSE '' END) INTO vReturn  \n" +
                "	FROM salesordermst  \n" +
                "    WHERE isDeleted = 0  \n" +
                "    AND id = pSOId;  \n" +
                "RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5734,'2.00','V1','fun_getPOTypeByID -User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5734:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_AddCustomerPackingSlip;  \n" +
                "CREATE PROCEDURE `Sproc_AddCustomerPackingSlip`(  \n" +
                "	IN pCPSData JSON,  \n" +
                "    IN puserID INT,  \n" +
                "	IN puserRoleID INT ,  \n" +
                "	IN pSystemId VARCHAR(20),  \n" +
                "	IN pPackingSlipId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vTermsDays INT ;  \n" +
                "	DECLARE v_incrementI INT;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customer_packingslip;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customer_packingslip AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "			pCPSData,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",  \n" +
                "				`packingSlipType` INT PATH \"$.packingSlipType\",  \n" +
                "				`customerID` INT PATH \"$.customerID\" ,  \n" +
                "				`status` INT PATH \"$.status\",  \n" +
                "				`subStatus` INT PATH \"$.subStatus\",  \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",  \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",  \n" +
                "				`poDate` DATE PATH \"$.poDate\",  \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",  \n" +
                "				`soDate` DATE PATH \"$.soDate\",  \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,  \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,  \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,  \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",  \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,  \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,  \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,  \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,  \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,  \n" +
                "				`billToId` INT PATH \"$.billToId\" ,  \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,  \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,  \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,  \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,  \n" +
                "				`termsId` INT PATH \"$.termsId\" ,  \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,  \n" +
                "				`contactPersonId` INT PATH \"$.contactPersonId\",  \n" +
                "				`revision` TEXT PATH \"$.revision\",  \n" +
                "				`isZeroValue` TINYINT PATH \"$.isZeroValue\",  \n" +
                "				`isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\",  \n" +
                "				`poRevision` VARCHAR(50) PATH \"$.poRevision\" ,  \n" +
                "				`isAskForVersionConfirmation` TINYINT PATH \"$.isAskForVersionConfirmation\"  \n" +
                "			)  \n" +
                "		) AS CustPS_JT;  \n" +
                "  \n" +
                "		INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "				packingSlipDate,shippingMethodID,  \n" +
                "				packingSlipComment,headerComment,sorevision,  \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,  \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,  \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus,  \n" +
                "				totalAmount,  \n" +
                "				billToId,shipToId ,intermediateShipmentId,  \n" +
                "				contactPersonId, revision, isZeroValue ,isAlreadyPublished, poRevision,isAskForVersionConfirmation)  \n" +
                "		SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "					packingSlipDate,shippingMethodID,  \n" +
                "					packingSlipComment,headerComment,sorevision,freeOnBoardId,  \n" +
                "					puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,  \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,  \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus ,  \n" +
                "					totalAmount,  \n" +
                "					billToId,shipToId ,intermediateShipmentId ,  \n" +
                "					contactPersonId,  revision, isZeroValue, isAlreadyPublished, poRevision ,0  \n" +
                "		FROM temp_customer_packingslip ;  \n" +
                "  \n" +
                "		SET pPackingSlipId=LAST_INSERT_ID();  \n" +
                "		--  Response 0  \n" +
                "        SELECT pPackingSlipId packingSlipId;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_customer_packingslip;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5735,'2.00','V1','Sproc_AddCustomerPackingSlip-User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5735:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerInvoiceReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceReportDetails`(  \n" +
                "	IN cpID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vReceivedAmt  DECIMAL(18,6);  \n" +
                "    # Customer Invoice Master table details  \n" +
                "    SELECT  cp.id,  \n" +
                "		cp.invoiceNumber,  \n" +
                "        cp.invoiceDate,  \n" +
                "		cp.packingSlipNumber,  \n" +
                "		cp.packingSlipDate,  \n" +
                "		cp.poDate,  \n" +
                "		cp.poNumber,  \n" +
                "        cp.poRevision,  \n" +
                "		mg.customerSystemID,  \n" +
                "		mg.accountRef,  \n" +
                "		cp.packingSlipComment,  \n" +
                "        cp.status,  \n" +
                "		(SELECT GROUP_CONCAT(cpt.trackNumber SEPARATOR '  \n" +
                "') FROM customer_packing_slip_track_number cpt WHERE cpt.isDeleted = 0 AND cpt.refCustPackingSlipID = cpID) AS trackingNumber,  \n" +
                "		fun_getDueDate(cp.invoiceDate,cp.termsID) AS dueDate,  \n" +
                "        cp.billingAddress,  \n" +
                "        cp.shippingAddress,  \n" +
                "        cp.intermediateAddress,  \n" +
                "		IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),'-') AS salesPerson,  \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,  \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,  \n" +
                "        IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), ' - ') AS freeOnBoard,  \n" +
                "        cp.systemID AS legalnumber,  \n" +
                "        fun_getUserNameByID(cp.updatedBy)AS  preparedBy,  \n" +
                "		us.emailAddress,  \n" +
                "		emp.phExtension,  \n" +
                "        cp.revision invoiceVersion,  \n" +
                "        '2.00' AS docNumber,  \n" +
                "        subStatus  \n" +
                "		FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID  \n" +
                "                LEFT JOIN  \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId  \n" +
                "        AND gcs.isDeleted = 0  \n" +
                "           LEFT JOIN  \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID  \n" +
                "        AND gcp.isDeleted = 0  \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy  \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID  \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;  \n" +
                "  \n" +
                "	# Customer Invoice line level details  \n" +
                "	SELECT  \n" +
                "		cpd.id,  \n" +
                "		cpd.partId,  \n" +
                "		cpd.id AS refDetID,  \n" +
                "		cpd.lineID,  \n" +
                "		IFNULL(ss.releaseNumber,'') releaseNumber,  \n" +
                "		IFNULL(cpd.custPOLineID,'')   custPOLineID,  \n" +
                "        c.iscustom,  \n" +
                "        c.partType,  \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN  \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)  \n" +
                "		  WHEN (c.iscustom=1) THEN  \n" +
                "			c.custAssyPN  \n" +
                "		  WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN  \n" +
                "			c.mfgPN  \n" +
                "        ELSE  \n" +
                "			  ''  \n" +
                "			END) AS mfgPN ,  \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN  \n" +
                "			'Other Charges'  \n" +
                "		ELSE  \n" +
                "			fun_getMfgNameByPartID(cpd.partId)  \n" +
                "			END) AS  mfgName,  \n" +
                "		IFNULL(c.rev, '') AS revision,  \n" +
                "		IFNULL(fun_getUOMAbbreviationByID(c.uom),'') uom,  \n" +
                "		cpd.shipQty AS qty,  \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,  \n" +
                "		IFNULL(cpd.extendedPrice,0) extPrice,  \n" +
                "		CONCAT(  \n" +
                "		IFNULL(replace(cpd.assyDescription,'\n','<br/>'), ''),'<br/>',  \n" +
                "                IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),  \n" +
                "                IFNULL(CONCAT(', ',  \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),  \n" +
                "                    ''),  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),  \n" +
                "            CASE WHEN (IFNULL(cpd.shippingNotes,'') <>'') THEN '<br/><br/>' ELSE '' END,  \n" +
                "            IFNULL(replace(cpd.shippingNotes,'\n','<br/>'),'')) AS DESCRIPTION  ,  \n" +
                "		IFNULL(replace(cpd.releaseNotes,'\n','<br/>'),'-') releaseNotes  \n" +
                "	FROM  \n" +
                "		customer_packingslip_det cpd  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0  \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)  \n" +
                "	WHERE  \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID;  \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report  \n" +
                "    SELECT get_totalCustomerInvoiceReceivedAmountById(cpID) INTO @totalRecvAmt;  \n" +
                "	SELECT  \n" +
                "		IFNULL(SUM(cpd.shipQty * cpd.unitPrice),0) AS totalLinePrice,  \n" +
                "		IFNULL(SUM(totalLineMiscPrice),0) AS totalLineMiscPrice,  \n" +
                "        IFNULL(@totalRecvAmt,0) As totalRecvAmt  \n" +
                "	FROM  customer_packingslip_det cpd  \n" +
                "	LEFT JOIN (SELECT refCustomerPackingSlipDetID, SUM(cpod.qty * cpod.price) AS totalLineMiscPrice  \n" +
                "				FROM customer_packingslip_otherexpense_details cpod WHERE cpod.isdeleted = 0  \n" +
                "		GROUP BY cpod.refCustomerPackingSlipDetID) cpod ON cpod.refCustomerPackingSlipDetID = cpd.id  \n" +
                "	WHERE cpd.refCustPackingSlipID = cpID AND  cpd.isdeleted = 0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5736,'2.00','V1','Sproc_GetCustomerInvoiceReportDetails-User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5736:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getSalesOrderListAgainstShipment;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderListAgainstShipment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pCustomerID INT,  \n" +
                "    IN pSearchText VARCHAR(1000) ,  \n" +
                "    IN pSoWorkingStatus TINYINT,  \n" +
                "    IN pAllowToUpdateComment TINYINT ,  \n" +
                "    IN pSortByColumn TINYINT  ,  \n" +
                "    IN pSoStatus TINYINT,  \n" +
                "    IN pSortingOrder TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE headerWhereClause VARCHAR(3000);  \n" +
                "   -- DECLARE detailWhereClause VARCHAR(1000);  \n" +
                "	DECLARE vOrderBy VARCHAR(200);  \n" +
                "   	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pSortByColumn = 1 THEN  \n" +
                "		SET vOrderBy =' order by customerName' ;  \n" +
                "    ELSEIF pSortByColumn = 2 THEN  \n" +
                "		SET vOrderBy =' order by poNumber ' ;  \n" +
                "    ELSEIF pSortByColumn = 3 THEN  \n" +
                "		SET vOrderBy =' order by poDate ' ;  \n" +
                "    ELSEIF pSortByColumn = 4 THEN  \n" +
                "		SET vOrderBy =' order by soDate ' ;  \n" +
                "    ELSE  \n" +
                "		SET vOrderBy =' order by soId Desc ' ;  \n" +
                "    END IF;  \n" +
                "    IF pSortingOrder = 2 THEN  \n" +
                "		SET vOrderBy = concat(vOrderBY , ' Desc');  \n" +
                "    ELSE  \n" +
                "		SET vOrderBy = concat(vOrderBY , ' Asc');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN  \n" +
                "		SET headerWhereClause = concat(\" (salesOrder.customerID=\",pCustomerID,\") \");  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = ' 1=1 ';  \n" +
                "    END IF;  \n" +
                "    IF pSoWorkingStatus IS  NULL OR pSoWorkingStatus = 0 THEN  \n" +
                "		SET headerWhereClause = concat(headerWhereClause, ' AND 1=1 ');  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = concat(headerWhereClause, ' and salesOrder.workingStatus = ' , pSoWorkingStatus)  ;  \n" +
                "    END IF;  \n" +
                "    IF pSoStatus IS NULL OR pSoStatus <> -1 THEN  \n" +
                "		SET headerWhereClause = concat(headerWhereClause, ' and salesOrder.`status` = ' , pSoStatus)  ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pSearchText IS NOT NULL  THEN  \n" +
                "		SET headerWhereClause = CONCAT(headerWhereClause ,\" AND  (salesOrder.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.poNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.customerName like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.shippingComment like '%\",pSearchText,\"%' \",  \n" +
                "                                    CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR salesOrder.internalComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
                "                                    \" or salesOrder.soId in (select refSalesOrderID from salesorderdet  sodet  \n" +
                "														 join component comp on comp.id = sodet.partID and sodet.isDeleted = 0  \n" +
                "                                                         left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
                "																	from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sodet.id  and workOrderDet.partID = sodet.partId  \n" +
                "														 where sodet.isDeleted = 0	and (comp.PIDCode like '%\",pSearchText,\"%' OR comp.mfgPN like '%\",pSearchText,\"%'  \n" +
                "																OR comp.nickName like '%\",pSearchText,\"%' OR sodet.woComment like '%\",pSearchText,\"%'  \n" +
                "                                                                OR sodet.internalComment like '%\",pSearchText,\"%'\",  \n" +
                "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.remark like '%\",pSearchText,\"%'\") else '' END,  \n" +
                "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.releaseLevelComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
                "                                                                \" OR workOrderDet.woList like '\",pSearchText,\"%'  )	))\");  \n" +
                "  \n" +
                "    END IF;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	SET @SQLStatement1 = concat(\"CREATE TEMPORARY TABLE temp_so_mst AS  select soId, salesOrderNumber,  \n" +
                "						soDate, poNumber, poDate, poRevision, poRevisionDate,  \n" +
                "						sorevision, ifnull(shippingComment,'-') shippingComment, internalComment, isBlanketPO, isLegacyPO, isRmaPO,  \n" +
                "                        soStatus, soStatusText,  shippingMethodID,termsID,freeOnBoardId, salesCommissionTo,contactPersonId,  \n" +
                "						customerID, mfgCode, mfgName, customerName,  \n" +
                "                        lastCPSId,lastCPSNumber,lastCPSDate,ifnull(lastCPSComment,'-') lastCPSComment,CPSCount,  CPSDraftCnt,  \n" +
                "                        billingAddressID, intermediateShipmentId,  \n" +
                "                        shippingAddressID,defaultAddress, companyName,personName,division,street1,street2, street3,city, state,  \n" +
                "						postcode,countryName,email,contact,phExtension,faxCountryCode, faxNumber , workingStatus,  \n" +
                "                        isLegacyPOText,isBlanketPOText,isRmaPOText,blanketPOOption, isAlreadyPublished  \n" +
                "    from (select som.id as soId, som.salesOrderNumber,  \n" +
                "            som.soDate, som.poNumber, som.poDate, som.poRevision, som.poRevisionDate,  \n" +
                "            som.revision as sorevision , som.shippingComment, som.internalComment,  \n" +
                "            som.isBlanketPO, som.isLegacyPO, som.isRmaPO, som.customerID,  \n" +
                "            som.status as soStatus ,(case when som.`status` = 1 then 'Published' else 'Draft' end) soStatusText,  \n" +
                "            som.shippingMethodID,som.termsID,som.freeOnBoardId, som.salesCommissionTo,som.contactPersonId,  \n" +
                "            som.billingAddressID, som.intermediateShipmentId,  \n" +
                "            cust.mfgCode, cust.mfgName, fun_GetFormattedMfgCode(cust.mfgCode,cust.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
                "            cpsDetails.lastCPSId,  \n" +
                "            cpsDetails.lastCPSNumber,  \n" +
                "            cpsDetails.lastCPSDate,  \n" +
                "			cpsDetails.lastCPSComment,  \n" +
                "            cpsDetails.CPSCount,  \n" +
                "            ifnull(cpsDetails.CPSDraftCnt,0) CPSDraftCnt,  \n" +
                "            som.shippingAddressID,  \n" +
                "            custAddr.isDefault as defaultAddress,  \n" +
                "            custAddr.companyName,custAddr.personName,custAddr.division,custAddr.street1,custAddr.street2, custAddr.street3,custAddr.city, custAddr.state,  \n" +
                "            custAddr.postcode,country.countryName,custAddr.email,custAddr.contact,custAddr.phExtension,  \n" +
                "            custAddr.faxCountryCode, custAddr.faxNumber ,  \n" +
                "             (case when sodCnt.totalLineCount = sodCnt.completedLineCount  then 2  \n" +
                "				  when sodCnt.totalLineCount = sodCnt.canceledLineCount then -1  \n" +
                "                  else 1 end) workingStatus,  \n" +
                "            (case when som.isLegacyPO = 1 then 'Legacy PO' else '' end) isLegacyPOText,  \n" +
                "            (case when som.isRmaPO = 1 then 'RMA PO' else '' end) isRmaPOText,  \n" +
                "            (case when som.isBlanketPO = 1 then 'Blanket PO' else '' end) isBlanketPOText,  \n" +
                "            som.blanketPOOption,som.`status`,som.isAlreadyPublished  \n" +
                "	from salesordermst som  \n" +
                "    join mfgcodemst cust on cust.id = som.customerID and cust.isDeleted = 0  \n" +
                "	left join customer_addresses custAddr on  custAddr.customerId = som.customerID and custAddr.id = som.shippingAddressID and custAddr.isDeleted = 0  \n" +
                "	left join countrymst country on country.countryID = custAddr.countryID and country.isDeleted = 0  \n" +
                "    left join ( select  a.refSalesOrderID, max(lastCPSId) lastCPSId, max(lastCPSNumber) lastCPSNumber,  \n" +
                "				max(lastCPSDate) lastCPSDate, max(lastCPSComment) lastCPSComment, max(CPSCount) CPSCount, max(CPSDraftCnt) CPSDraftCnt  \n" +
                "				from (select cps.refSalesOrderID, cps.id,cps.packingSlipNumber,cps.packingSlipDate,cps.packingSlipComment ,  \n" +
                "						LAST_VALUE(cps.id) over (partition by cps.refSalesOrderID) lastCPSId ,  \n" +
                "						LAST_VALUE(cps.packingSlipNumber) over (partition by cps.refSalesOrderID) lastCPSNumber,  \n" +
                "						LAST_VALUE(cps.packingSlipDate) over (partition by cps.refSalesOrderID) lastCPSDate,  \n" +
                "						LAST_VALUE(cps.packingSlipComment) over (partition by cps.refSalesOrderID) lastCPSComment,  \n" +
                "						count(1) over (partition by cps.refSalesOrderID) CPSCount,  \n" +
                "						cpd.draftCnt AS CPSDraftCnt  \n" +
                "				from customer_packingslip cps  \n" +
                "                left join (select custp.refSalesOrderID draftRefSoId, count(1) draftCnt from customer_packingslip custp  \n" +
                "						where custp.isDeleted = 0  and custp.substatus = 1 and transType ='P'  \n" +
                "						group by custp.refSalesOrderID) cpd on cpd.draftRefSoId = cps.refSalesOrderID  \n" +
                "                where cps.isDeleted = 0  and cps.transType = 'P' and cps.refsalesorderid is not null) a  \n" +
                "				group by a.refSalesOrderID) cpsDetails on cpsDetails.refSalesOrderID = som.id  \n" +
                "	left join (select sod.refSalesOrderID as soId ,  \n" +
                "				sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
                "				count(1) totalLineCount,  \n" +
                "				sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
                "				From salesorderdet sod where sod.isDeleted = 0  \n" +
                "				Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = som.id  \n" +
                "    where som.isDeleted = 0  \n" +
                "    ) salesOrder  \n" +
                "    where 1=1 and \", headerWhereClause,    vOrderBy , rowNumWhere) ;  \n" +
                " -- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, tbdComment, internalComment,  \n" +
                "				shippingComment, isCancle,partDescription,salesOrderDetStatus,custPOLineNumber,  \n" +
                "				PIDCode, mfgPN,mfgcodeID,mfrName, rohsName, rohsIcon,  nickName,  partType,  isCustom,custAssyPN,partSpecialNote,  \n" +
                "                po_TBDQty,shippedQty AS shippedQty , woComment  ,  \n" +
                "                cancelStatus, isHotJob,isDetHalt,  \n" +
                "                soWorkingStatus, materialTentitiveDocDate  ,refSODetID,blanketSOId,  \n" +
                "                blanketPONumber  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment as tbdComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                ifnull(sod.partDescription,'-') partDescription,  \n" +
                "                sod.salesOrderDetStatus,  \n" +
                "                sod.custPOLineNumber,  \n" +
                "				co.PIDCode,  \n" +
                "				co.mfgPN,  \n" +
                "                co.mfgcodeID,  \n" +
                "                fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName,  \n" +
                "				rohs.name AS rohsName,  \n" +
                "				rohs.rohsIcon,  \n" +
                "                co.nickName,  \n" +
                "                co.partType,  \n" +
                "                co.isCustom,  \n" +
                "                co.custAssyPN ,  \n" +
                "                co.specialNote partSpecialNote,  \n" +
                "				(sod.qty - ifnull(soDetQty.relQty,0)) po_TBDQty,  \n" +
                "                cpd.shippedQty,  \n" +
                "                ifnull(sod.woComment, workOrderDet.woList) woComment  ,  \n" +
                "                sod.isCancle cancelStatus,  \n" +
                "                sod.isHotJob,  \n" +
                "                (case when holdTrans.holdCnt > 0 then 1 else 0 end ) isDetHalt,  \n" +
                "                (CASE 	WHEN (sod.isCancle = 1) THEN 'Canceled'  \n" +
                "						WHEN (sod.`salesOrderDetStatus` = 1)   THEN 'In Progress'  \n" +
                "						ELSE 'Completed'  END) soWorkingStatus,  \n" +
                "                materialTentitiveDocDate ,  \n" +
                "                sod.refSODetID,  \n" +
                "                blanketPO.blanketSOId,  \n" +
                "                blanketPO.poNumber AS blanketPONumber  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "        left join (select sDetID, sum(qty) relQty from salesshippingmst where isDeleted = 0  group by sDetID) as soDetQty on  soDetQty.sDetID = sod.id  \n" +
                "        left join (select refSalesorderDetid , sum(cpd.shipQty) shippedQty  \n" +
                "					from customer_packingslip_det  cpd  \n" +
                "					join customer_packingslip cps on cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0  \n" +
                "                    where cpd.isDeleted = 0 and cps.transType='P' group by refSalesorderDetid) cpd on cpd.refSalesorderDetid = sod.id  \n" +
                "		left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
                "					from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sod.id  and workOrderDet.partID = sod.partId  \n" +
                "		left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "        left join mfgcodemst partMfg on partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
                "        left join (select refTransid ,count(1) holdCnt from holdunholdtrans where refType='PO' and isDeleted = 0 and endDate is NUll and `status` = 'H' group by refTransid) holdTrans  \n" +
                "			on holdTrans.refTransid = sod.id  \n" +
                "        left join (select blanketDet.id blanketDetId, blanketSO.id blanketSOId , blanketSO.poNumber from salesorderdet blanketDet  \n" +
                "				join salesordermst blanketSO on blanketSO.id = blanketDet.refSalesOrderID and blanketSO.isDeleted = 0  \n" +
                "                where blanketSO.isDeleted = 0) blanketPO on blanketPO.blanketDetId = sod.refBlanketPOID  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_rel_detail AS  \n" +
                "    select soDetId,  \n" +
                "				packingSlipDate,  \n" +
                "				promisedShipDate,  \n" +
                "                refCustPackingSlipID, packingSlipDetId,  \n" +
                "                  row_number() over (partition by releaseId,soDetId order by packingSlipDate desc) cpsIndex,  \n" +
                "				refSalesOrderID,releaseId, partID, lineID, custPOQty,  internalComment,  releaseLineComment,  \n" +
                "				shippingComment, isCancle, releaseNumber, soReleaseQty,  \n" +
                "                shippedQty AS shippedQty,  \n" +
                "                 cpsDetailCnt,  \n" +
                "                 isReadyToShip  ,cpsDetailShippedQty  ,  \n" +
                "                (case when  (soReleaseQty - cpsDetailShippedQty) <= 0 then 1 else 0 end) relCompletedStatus,  \n" +
                "                cpsSubStatus  ,poReleaseNumber,salesOrderDetStatus, 'completed ' as firstInsert  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "                soship.releaseNotes releaseLineComment,  \n" +
                "				sod.isCancle,  \n" +
                "                soship.shippingID releaseId,  \n" +
                "				soship.releaseNumber,  \n" +
                "				soship.promisedShipDate,  \n" +
                "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
                "				cpd.refCustPackingSlipID,  \n" +
                "                cpd.id packingSlipDetId,  \n" +
                "				cpd.shipQty AS shippedQty,  \n" +
                "                cp.packingSlipDate ,  \n" +
                "                SUM(cpd.shipQty) over (partition by soship.shippingID,sod.id ) cpsDetailShippedQty,  \n" +
                "                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
                "--                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex,  \n" +
                "                soship.isReadyToShip,  \n" +
                "                cp.subStatus AS cpsSubStatus,  \n" +
                "                soship.poReleaseNumber,  \n" +
                "                sod.salesOrderDetStatus  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
                "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
                "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
                "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "    -- order by a.refSalesOrderID,a.packingSlipDate desc;  \n" +
                "  \n" +
                "    /*  \n" +
                "    /*and ifnull((case when co.partType = 4 then sod.qty else  soship.qty end ),0) <=  \n" +
                "						(select ifnull(sum(cpdTot.shipQty),0) from customer_packingslip_det cpdTot  \n" +
                "						where cpdTot.isDeleted = 0 and cpdTot.refSalesorderDetid =  sod.id )  \n" +
                "    INSERT INTO temp_so_rel_detail  \n" +
                "    select soDetId,  \n" +
                "    packingSlipDate,  \n" +
                "			promisedShipDate,  \n" +
                "            refCustPackingSlipID, packingSlipDetId,  \n" +
                "				row_number() over (partition by releaseId,soDetId order by promisedShipDate desc) cpsIndex,  \n" +
                "				refSalesOrderID,releaseId, partID, lineID, custPOQty,  internalComment,  releaseLineComment,  \n" +
                "				shippingComment, isCancle, releaseNumber, soReleaseQty,  \n" +
                "                shippedQty AS shippedQty,  \n" +
                "                cpsDetailCnt,  \n" +
                "                isReadyToShip  ,cpsDetailShippedQty  ,  \n" +
                "                (case when  (soReleaseQty - cpsDetailShippedQty) <= 0 then 1 else 0 end) relCompletedStatus,  \n" +
                "                cpsSubStatus  ,poReleaseNumber,salesOrderDetStatus,'pending ' as firstInsert  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "                soship.releaseNotes releaseLineComment,  \n" +
                "				sod.isCancle,  \n" +
                "                soship.shippingID releaseId,  \n" +
                "				soship.releaseNumber,  \n" +
                "				soship.promisedShipDate,  \n" +
                "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
                "				cpd.refCustPackingSlipID,  \n" +
                "                cpd.id packingSlipDetId,  \n" +
                "				cpd.shipQty AS shippedQty,  \n" +
                "                cp.packingSlipDate ,  \n" +
                "                SUM(cpd.shipQty) over (partition by soship.shippingID,sod.id ) cpsDetailShippedQty,  \n" +
                "                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
                "--                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex,  \n" +
                "                soship.isReadyToShip,  \n" +
                "                cp.subStatus AS cpsSubStatus,  \n" +
                "                soship.poReleaseNumber,  \n" +
                "                sod.salesOrderDetStatus  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
                "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
                "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
                "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "        and ifnull((case when co.partType = 4 then sod.qty else soship.qty end),0) >  \n" +
                "						(select ifnull(sum(cpdTot.shipQty),0) from customer_packingslip_det cpdTot  \n" +
                "						where cpdTot.isDeleted = 0 and cpdTot.refSalesorderDetid =  sod.id )  \n" +
                "	) a  \n" +
                "    order by a.refSalesOrderID,a.soDetId,a.promisedShipDate;  \n" +
                "    */  \n" +
                "  \n" +
                "	/*SET @SQLStatement1 = CONCAT (\"SELECT mst.* from temp_so_mst mst  \n" +
                "    LEFT JOIN temp_so_detail det  on det.refSalesOrderID = mst.soId  \n" +
                "    where det.woComment like '%\",pSearchText,\"%'\");  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  */  \n" +
                "	SELECT * from temp_so_mst;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT soDetail.* from temp_so_detail AS soDetail  \n" +
                "								left join temp_so_mst mst on mst.soId = soDetail.refSalesOrderID  \n" +
                "                                order by soDetail.salesOrderDetStatus, soDetail.soDetId\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " 	SELECT * from temp_so_rel_detail  \n" +
                "		order by soDetId,relCompletedStatus,promisedShipDate;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5737,'2.00','V1','Sproc_getSalesOrderListAgainstShipment-User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5737:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetShippedPackingSlipDetailBySoDetID;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippedPackingSlipDetailBySoDetID`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "    IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psalesorderDetID INT,  \n" +
                "	IN preleaseLineId INT,  \n" +
                "    IN pSalesOrderID INT ,  \n" +
                "    IN pPackingSlipStatus INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgNameFormat INT;  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "  \n" +
                "SELECT FUN_GETMFGCODENAMEFORMAT() INTO vMfgNameFormat;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY c.packingSlipDate Desc\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF preleaseLineId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_GetShippedPackingSlipDetailBySoDetID = concat(\"SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,  \n" +
                "				cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS refCustInvoiceID  ,  \n" +
                "				cpd.partId,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,\",vMfgNameFormat,\") mfrName,  \n" +
                "                cpd.shippingNotes , cpd.internalComment ,  \n" +
                "                fun_getCustomerInvoiceSubStatusName(cp.subStatus,'P') statusName  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "		WHERE   cpd.refsalesorderdetid= \", psalesorderDetID ,\"  \n" +
                "		AND 	cpd.shippingId= \", preleaseLineId, \"  \n" +
                "        AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P' \");  \n" +
                "    ELSEIF pSalesOrderID IS NOT NULL AND psalesorderDetID IS NULL THEN  \n" +
                "		 SET @temp_Sproc_GetShippedPackingSlipDetailBySoDetID = concat(\"SELECT  cp.id, cp.packingSlipNumber,cp.packingSlipDate,  \n" +
                "				cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,  \n" +
                "				cp.refCustInvoiceID AS refCustInvoiceID, 	SUM(cpd.shipQty) AS shipQty,  \n" +
                "                cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID, fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,\",vMfgNameFormat,\") mfrName,  \n" +
                "                co.isCustom,co.custAssyPN,  \n" +
                "                cpd.shippingNotes , cpd.internalComment,  \n" +
                "                fun_getCustomerInvoiceSubStatusName(cp.subStatus,'P') statusName  \n" +
                "			FROM customer_packingslip cp  \n" +
                "            LEFT JOIN customer_packingslip_det cpd on cpd.refCustPackingSlipID = cp.id and cpd.isDeleted = 0  \n" +
                "            LEFT JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "            LEFT JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "			LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "			WHERE   cp.refSalesOrderID= \", pSalesOrderID,\"  \n" +
                "            AND  cp.isdeleted = 0  \n" +
                "			AND     cp.transType = 'P'  \n" +
                "            AND  cp.subStatus = \",ifnull(pPackingSlipStatus,\"cp.subStatus\"),\"  \n" +
                "            group by cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID,  \n" +
                "				cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name`, rr.rohsIcon,co.isCustom,cpd.shippingNotes , cpd.internalComment			\");  \n" +
                "    ELSE  \n" +
                "       SET @temp_Sproc_GetShippedPackingSlipDetailBySoDetID =  concat(\"SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS refCustInvoiceID,  \n" +
                "				cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,\",vMfgNameFormat,\") mfrName,co.isCustom,  \n" +
                "                cpd.shippingNotes , cpd.internalComment ,  \n" +
                "                fun_getCustomerInvoiceSubStatusName(cp.subStatus,'P') statusName  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "		WHERE   cpd.refsalesorderdetid= \",psalesorderDetID,\"  \n" +
                "        AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P' \");  \n" +
                "    END IF;  \n" +
                " -- select @temp_Sproc_GetShippedPackingSlipDetailBySoDetID;  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetShippedPackingSlipDetailBySoDetID,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.* from ( \", @temp_Sproc_GetShippedPackingSlipDetailBySoDetID,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "-- select @SQLStatement2;  \n" +
                "    PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5738,'2.00','V1','Sproc_GetShippedPackingSlipDetailBySoDetID- User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 5738:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDetailPerLine;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDetailPerLine`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       ss.releaseNumber,  \n" +
                "		       ss.qty as releaseLineQty,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cpd.internalComment,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "            cpd.poReleaseNumber,  \n" +
                "			cpd.refBlanketPONumber,  \n" +
                "            cpd.partId,  \n" +
                "            fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "            `cpd`.assyDescription,  \n" +
                "            fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "            c.mfgPN as assyName ,  \n" +
                "            c.PIDCode as assyId,  \n" +
                "            c.mfgCodeID,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgCodeID) mfrName,  \n" +
                "			fun_getMfgCodeByID(cd.customerID) custCode,  \n" +
                "			case when som.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
                "			som.isBlanketPO,  \n" +
                "			ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "			case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "			case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "			cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
                "			cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,  \n" +
                "			case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "			fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "			concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "		(CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  createdAt,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt ,  \n" +
                "		if(cd.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
                "        if(cd.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
                "        if(cd.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "		if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "        if(cd.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "        if(cd.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "        if(cd.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "		if(cd.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "		(case when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText,  \n" +
                "        (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "        cd.revision,  \n" +
                "		(select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "			where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "			from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "		c.isCustom,   c.custAssyPN customPartNumber  ,        cpd.remainingQty ,  \n" +
                "			som.rmaNumber,som.isRmaPO,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'YES' when som.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'Yes' when som.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp  ,  \n" +
                "            cpd.releaseNotes  \n" +
                "		FROM customer_packingslip cd  \n" +
                "		JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0  \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0 and invoice.transType ='I'  \n" +
                "        LEFT JOIN salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "        LEFT JOIN salesordermst som on som.id = cd.refSalesOrderID and som.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "    if (pfilterStatus = '0') then  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    else  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    end if;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgPartID IS NOT NULL)THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cpd.partId in ( ',pmfgPartID,')');  \n" +
                "  END IF;  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or som.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'' or som.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "	 SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                " -- select   @temp_Sproc_RetrieveCustomerPackingSlipDetails ,pWhereClause ;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5739,'2.00','V1','Sproc_RetrieveCustomerPackingSlipDetailPerLine- User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5739:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022  *********************************** */
                "DROP VIEW IF EXISTS vu_inv_ps_so_line_detail;  \n" +
                "CREATE VIEW `vu_inv_ps_so_line_detail` AS  \n" +
                "    SELECT  \n" +
                "        `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "        `sm`.`soDate` AS `soDate`,  \n" +
                "        IFNULL(`sm`.`poNumber`, `invmst`.`poNumber`) AS `poNumber`,  \n" +
                "        IFNULL(`sm`.`poDate`, `invmst`.`poDate`) AS `poDate`,  \n" +
                "        `sd`.`lineID` AS `soLineId`,  \n" +
                "        IFNULL(`sd`.`custPOLineNumber`,  \n" +
                "                `invdet`.`custPOLineID`) AS `custPOLineNumber`,  \n" +
                "        `sm`.`id` AS `soMstId`,  \n" +
                "        `packingmst`.`packingSlipNumber` AS `packingSlipNumber`,  \n" +
                "        `packingmst`.`packingSlipDate` AS `packingSlipDate`,  \n" +
                "        `packingdet`.`lineID` AS `packingLineID`,  \n" +
                "        `packingdet`.`id` AS `packingDetID`,  \n" +
                "        `packingmst`.`id` AS `packingSlipId`,  \n" +
                "        `invmst`.`invoiceNumber` AS `invoiceNumber`,  \n" +
                "        `invmst`.`invoiceDate` AS `invoiceDate`,  \n" +
                "        `invdet`.`lineID` AS `invLineID`,  \n" +
                "        `invmst`.`id` AS `invoiceId`,  \n" +
                "        `invdet`.`id` AS `invDetId`  \n" +
                "    FROM  \n" +
                "        (((((`customer_packingslip` `invmst`  \n" +
                "        JOIN `customer_packingslip_det` `invdet` ON (((`invdet`.`refCustPackingSlipID` = `invmst`.`id`)  \n" +
                "            AND (`invdet`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_packingslip` `packingmst` ON (((`packingmst`.`refCustInvoiceID` = `invmst`.`id`)  \n" +
                "            AND (`packingmst`.`isDeleted` = 0)  \n" +
                "            AND (`packingmst`.`transType` = 'P'))))  \n" +
                "        LEFT JOIN `customer_packingslip_det` `packingdet` ON (((`packingdet`.`refCustPackingSlipID` = `packingmst`.`id`)  \n" +
                "            AND (`packingdet`.`isDeleted` = 0)  \n" +
                "            AND (`packingdet`.`reflineID` = `invdet`.`reflineID`)  \n" +
                "            AND (IFNULL(`packingdet`.`shippingId`, 0) = IFNULL(`invdet`.`shippingId`, 0))  \n" +
                "            AND (IFNULL(`packingdet`.`refCustPackingSlipDetID`, 0) = IFNULL(`invdet`.`refCustPackingSlipDetID`, 0)))))  \n" +
                "        LEFT JOIN `salesordermst` `sm` ON (((`sm`.`id` = `packingmst`.`refSalesOrderID`)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `salesorderdet` `sd` ON (((`sd`.`refSalesOrderID` = `sm`.`id`)  \n" +
                "            AND (`sd`.`id` = `packingdet`.`refSalesorderDetid`)  \n" +
                "            AND (`sd`.`isDeleted` = 0))))  \n" +
                "    WHERE  \n" +
                "        ((`invmst`.`transType` = 'I')  \n" +
                "            AND (`invmst`.`isDeleted` = 0))  \n" +
                "    UNION SELECT  \n" +
                "        `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "        `sm`.`soDate` AS `soDate`,  \n" +
                "        IFNULL(`sm`.`poNumber`, `packingmst`.`poNumber`) AS `poNumber`,  \n" +
                "        IFNULL(`sm`.`poDate`, `packingmst`.`poDate`) AS `poDate`,  \n" +
                "        `sd`.`lineID` AS `soLineId`,  \n" +
                "        IFNULL(`sd`.`custPOLineNumber`,  \n" +
                "                `packingdet`.`custPOLineID`) AS `custPOLineNumber`,  \n" +
                "        `sm`.`id` AS `soMstId`,  \n" +
                "        `packingmst`.`packingSlipNumber` AS `packingSlipNumber`,  \n" +
                "        `packingmst`.`packingSlipDate` AS `packingSlipDate`,  \n" +
                "        `packingdet`.`lineID` AS `packingLineID`,  \n" +
                "        `packingdet`.`id` AS `packingDetID`,  \n" +
                "        `packingmst`.`id` AS `packingSlipId`,  \n" +
                "        NULL AS `invoiceNumber`,  \n" +
                "        NULL AS `invoiceDate`,  \n" +
                "        NULL AS `invLineID`,  \n" +
                "        NULL AS `invoiceId`,  \n" +
                "        `packingdet`.`id` AS `invDetId`  \n" +
                "    FROM  \n" +
                "        (((`customer_packingslip` `packingmst`  \n" +
                "        LEFT JOIN `customer_packingslip_det` `packingdet` ON (((`packingdet`.`refCustPackingSlipID` = `packingmst`.`id`)  \n" +
                "            AND (`packingdet`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `salesordermst` `sm` ON (((`sm`.`id` = `packingmst`.`refSalesOrderID`)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `salesorderdet` `sd` ON (((`sd`.`refSalesOrderID` = `sm`.`id`)  \n" +
                "            AND (`sd`.`id` = `packingdet`.`refSalesorderDetid`)  \n" +
                "            AND (`sd`.`isDeleted` = 0))))  \n" +
                "    WHERE  \n" +
                "        ((`packingmst`.`transType` = 'P')  \n" +
                "            AND (`packingmst`.`isDeleted` = 0)  \n" +
                "            AND (`packingmst`.`refCustInvoiceID` IS NULL));  \n" +
                /* **************************** Add Script Version -> 05-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5740,'2.00','V1','vu_inv_ps_so_line_detail-User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5740:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022  *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_customer_packingslip_det;  \n" +
                "CREATE TRIGGER `Trg_AU_customer_packingslip_det` AFTER UPDATE ON `customer_packingslip_det` FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	DECLARE v_trasType VARCHAR(5);  \n" +
                "  DECLARE vNewQuoteFrom VARCHAR(30);  \n" +
                "    DECLARE vOldQuoteFrom VARCHAR(30);  \n" +
                "  DECLARE vBPOQty INT;  \n" +
                "	DECLARE vBPOTotalQty INT;  \n" +
                "  \n" +
                "	SELECT transType INTO v_trasType  \n" +
                "	FROM customer_packingslip  \n" +
                "	WHERE isDeleted = 0 AND id = NEW.refCustPackingSlipID ;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.custPOLineID,0) != IFNULL(NEW.custPOLineID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Cust PO Line#',CAST(OLD.custPOLineID AS CHAR),  \n" +
                "       CAST(new.custPOLineID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poQty,0) != IFNULL(NEW.poQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Original PO Line Order Qty',CAST(OLD.poQty AS CHAR),  \n" +
                "       CAST(new.poQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF IFNULL(OLD.shipQty,0) != IFNULL(NEW.shipQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),  \n" +
                "		(CASE WHEN v_trasType='P' THEN 'Shipment Qty' ELSE 'Qty' END),	CAST(OLD.shipQty AS CHAR),  \n" +
                "		CAST(new.shipQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.remainingQty,0) != IFNULL(NEW.remainingQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Remaining Qty',CAST(OLD.remainingQty AS CHAR),  \n" +
                "       CAST(new.remainingQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippedQty,0) != IFNULL(NEW.shippedQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Shipped To Date',CAST(OLD.shippedQty AS CHAR),  \n" +
                "       CAST(new.shippedQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.shippingNotes,0) != IFNULL(NEW.shippingNotes,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Line Shipping Comments',CAST(OLD.shippingNotes AS CHAR),  \n" +
                "       CAST(new.shippingNotes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalComment,0) != IFNULL(NEW.internalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Line Internal Notes',CAST(OLD.internalComment AS CHAR),  \n" +
                "       CAST(new.internalComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.standrads,0) != IFNULL(NEW.standrads,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Applicable Standards',CAST(OLD.standrads AS CHAR),  \n" +
                "       CAST(new.standrads AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.refChargesTypeID,0) != IFNULL(NEW.refChargesTypeID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Other Charges Type',fun_getGenericCategoryNameByID(OLD.refChargesTypeID),  \n" +
                "       fun_getGenericCategoryNameByID(NEW.refChargesTypeID),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.unitPrice,0) != IFNULL(NEW.unitPrice,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Unit Price ($)', CAST(OLD.unitPrice AS CHAR), CAST(NEW.unitPrice AS CHAR),  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "      IF IFNULL(OLD.assyDescription,0) != IFNULL(NEW.assyDescription,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Assy/PID Description',CAST(OLD.assyDescription AS CHAR),  \n" +
                "       CAST(NEW.assyDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Ext. Price ($)',  \n" +
                "		CASE WHEN v_trasType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(OLD.extendedPrice,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(OLD.extendedPrice,2) AS CHAR) END,  \n" +
                "		CASE WHEN v_trasType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(NEW.extendedPrice,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(NEW.extendedPrice,2) AS CHAR) END,  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.otherCharges,0) != IFNULL(NEW.otherCharges,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Total Other Charges Price ($)',CAST(FORMAT(OLD.otherCharges,2) AS CHAR),  \n" +
                "       CAST(FORMAT(new.otherCharges,2) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 IF IFNULL(OLD.reflineID,0) != IFNULL(NEW.reflineID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'SO Line#',CAST(OLD.reflineID AS CHAR),  \n" +
                "       CAST(NEW.reflineID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF(new.refsalesorderdetid IS NOT NULL)THEN  \n" +
                "	SELECT  SUM(cpd.shipQty) INTO @shipQty   FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
                "		WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.refsalesorderdetid AND cp.transType='P';  \n" +
                "  \n" +
                "	SELECT SUM(ss.qty),refBlanketPOID INTO @qty,@bpoID FROM salesorderdet ss WHERE ss.id=new.refsalesorderdetid AND ss.isdeleted=0 GROUP BY refBlanketPOID;  \n" +
                "  \n" +
                "		IF(IFNULL(@shipQty,0)>=IFNULL(@qty,0)) THEN  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=New.refsalesorderdetid;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE id=New.refsalesorderdetid;  \n" +
                "		END IF;  \n" +
                "		SELECT  qty INTO vBPOQty FROM  salesorderdet WHERE id=@bpoID;  \n" +
                "	        SELECT  SUM(qty) INTO vBPOTotalQty FROM  salesorderdet WHERE refBlanketPOID=@bpoID AND isdeleted=0;  \n" +
                "		IF((SELECT COUNT(1) FROM SalesOrderDet WHERE  refBlanketPOID=@bpoID AND isdeleted=0 AND salesOrderDetStatus=1 AND isCancle=0)=0 AND IFNULL(vBPOQty,0)<=IFNULL(vBPOTotalQty,0))THEN  \n" +
                "		        UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE (id=@bpoID OR refSODetID=@bpoID);  \n" +
                "		ELSE  \n" +
                "		      UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE (id=@bpoID OR refSODetID=@bpoID);  \n" +
                "		END IF;  \n" +
                "  END IF;  \n" +
                "  IF IFNULL(OLD.quoteNumber,0) != IFNULL(NEW.quoteNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote#',CAST(OLD.quoteNumber AS CHAR),  \n" +
                "	   CAST(NEW.quoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "   IF IFNULL(OLD.quoteFrom,0) != IFNULL(NEW.quoteFrom,0) THEN  \n" +
                "		SELECT (CASE WHEN OLD.quoteFrom = 1 THEN 'From RFQ' WHEN OLD.quoteFrom = 2 THEN 'From Part Master' WHEN OLD.quoteFrom = 3 THEN 'N/A' END ) INTO vOldQuoteFrom ;  \n" +
                "        SELECT (CASE WHEN NEW.quoteFrom = 1 THEN 'From RFQ' WHEN NEW.quoteFrom = 2 THEN 'From Part Master' WHEN NEW.quoteFrom = 3 THEN 'N/A' END ) INTO vNewQuoteFrom ;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote From',vOldQuoteFrom,  \n" +
                "	   vNewQuoteFrom,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.refRFQGroupID,0) != IFNULL(NEW.refRFQGroupID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',CAST(OLD.refRFQGroupID AS CHAR),  \n" +
                "	   CAST(NEW.refRFQGroupID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.refAssyQtyTurnTimeID,0) != IFNULL(NEW.refAssyQtyTurnTimeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',OLD.assyQtyTurnTimeText,  \n" +
                "	   NEW.assyQtyTurnTimeText,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "       IF IFNULL(OLD.refRFQQtyTurnTimeID,0) != IFNULL(NEW.refRFQQtyTurnTimeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',OLD.assyQtyTurnTimeText,  \n" +
                "	   NEW.assyQtyTurnTimeText,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Confirming Zero Value Line',(CASE WHEN OLD.isZeroValue =0 THEN 'False' ELSE 'True' END),  \n" +
                "	   (CASE WHEN NEW.isZeroValue =0 THEN 'False' ELSE 'True' END),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.releaseNotes,0) != IFNULL(NEW.releaseNotes,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Release Notes',OLD.releaseNotes,  \n" +
                "	   NEW.releaseNotes,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5741,'2.00','V1','Trg_AU_customer_packingslip_det- User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5741:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "alter table customer_packingslip add column carrierID  INT ;  \n" +
                "alter table customer_packingslip add column carrierAccountNumber varchar(50);  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5742,'2.00','V1','  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5742:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetail`(  \n" +
                "	IN invoiceID INT      ,  \n" +
                "    IN pTransType VARCHAR(5)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	                 SELECT inv.id,   inv.transType,  \n" +
                "						inv.packingSlipNumber,inv.packingSlipDate,  \n" +
                "                        -- (SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = inv.id AND packing.isDeleted = 0) packingSlipID,  \n" +
                "                        cps.id packingSlipID,  \n" +
                "						inv.refSalesOrderId  ,  \n" +
                "                        inv.systemID,  \n" +
                "						fun_getMfgCodeAndNameByID(inv.customerID) customerName,  \n" +
                "                        fun_getMfgNameByID(inv.customerID) customerNameOnly,  \n" +
                "                        inv.customerID,inv.poNumber,inv.poDate, inv.poRevision,  \n" +
                "						inv.soNumber,inv.soDate,  \n" +
                "                        inv.packingSlipType,inv.`status`,  \n" +
                "                        fun_getGenericCategoryCodeNameByID(inv.shippingMethodId) shippingMethod,inv.shippingMethodId,  \n" +
                "						inv.shipToId,inv.contactPersonId,inv.intermediateShipmentId, inv.billToId,  \n" +
                "						inv.invoiceNumber,inv.invoiceDate,  \n" +
                "                        inv.headerComment  ,   inv.packingSlipComment,  \n" +
                "						inv.freeOnBoardId,inv.salesCommissionTo,  \n" +
                "						CONCAT('(',fun_getEmployeeInitialNameByEmpID(inv.salesCommissionTo),') ',fun_getEmployeeNameByEmpID(inv.salesCommissionTo) ) salesCommName,  \n" +
                "						fun_getFOBById(inv.freeOnBoardId) FOBName,  \n" +
                "						fun_getGenericCategoryNameByID(inv.termsId) terms, inv.termsId,  \n" +
                "                        inv.intermediateShipmentId ,  \n" +
                "						inv.billingAddress,  \n" +
                "						inv.shippingAddress,  \n" +
                "						inv.intermediateAddress,  \n" +
                "                        inv.isLocked,  \n" +
                "                        inv.subStatus,  \n" +
                "                        inv.paymentStatus,  \n" +
                "                        inv.packingSlipType,  \n" +
                "                        fun_getUserNameByID(inv.lockedBy) lockedBy ,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,vTimeZone,vDateTimeDisplayFormat) lockedAt,  \n" +
                "                        inv.creditMemoNumber, inv.creditMemoDate, inv.isMarkForRefund , inv.agreedRefundAmt ,  \n" +
                "						inv.refDebitMemoNumber, inv.refDebitMemoDate,   inv.rmaNumber,  \n" +
                "                        (CASE WHEN inv.packingSlipType = 1 THEN 'MISC' WHEN inv.packingSlipType = 2 THEN 'PO/SO' END) packingSlipTypeText,  \n" +
                "                        (CASE WHEN inv.packingSlipType = 1 OR inv.packingSlipType = 2  THEN 'Invoice' WHEN inv.packingSlipType = 3 THEN 'MISC Invoice' ELSE null END) invoiceTypeText,  \n" +
                "                        inv.isZeroValue,  \n" +
                "                        inv.revision,  \n" +
                "                        cps.subStatus packingSlipSubStatus,  \n" +
                "                        (CASE WHEN cps.subStatus = 5 AND (inv.subStatus = 4 OR inv.subStatus = 5) THEN CONCAT( fun_getCustomerInvoiceSubStatusName(cps.subStatus, 'P'),' - ', fun_getCustomerInvoiceSubStatusName(inv.subStatus, 'I'))  \n" +
                "						ELSE '' END) materialStatus ,  \n" +
                "                        inv.isAlreadyPublished ,  \n" +
                "			fun_getMfgCodeByID(inv.customerID) customerCodeOnly,  \n" +
                "			cps.revision packingSlipVersion,  \n" +
                "			(CASE WHEN inv.transType = 'I' THEN get_totalCustomerInvoiceReceivedAmountById(inv.id)  \n" +
                "					WHEN inv.transType='C' THEN fun_getTotalCustomerCreditMemoAppliedAmountById(inv.id)  \n" +
                "			ELSE NULL END) receivedAmount,  \n" +
                "			(SELECT psip.id FROM packingslip_invoice_payment psip WHERE psip.refCustCreditMemoID=invoiceID AND psip.refPaymentMode = 'CA'  \n" +
                "								AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0) custPaymentMstID,  \n" +
                "			(CASE WHEN inv.transType = 'C' THEN  \n" +
                "					(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = inv.id  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0)  \n" +
                "				ELSE NULL END) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "			(CASE WHEN inv.transType = 'I' THEN  fun_getPaymentStatusByCustPackingSlipSubStatus(inv.subStatus,inv.transType,inv.paymentStatus,'CODE')  \n" +
                "				END) AS paymentStatusCode,  \n" +
                "			inv.refundStatus,  \n" +
                "			(CASE WHEN inv.transType = 'C' THEN fun_getCustCreditMemoRefundStatusTextByValue(inv.refundStatus)  \n" +
                "				ELSE NULL END) AS creditMemoRefundStatusText ,  \n" +
                "				sm.isRmaPO,  \n" +
                "				sm.isLegacyPO,  \n" +
                "			fun_getUserNameByID(inv.updatedBy) updatedByInitial,  \n" +
                "			fun_getEmployeeIDByUserID(inv.updatedBy) updatedByEmp,  \n" +
                "			fun_getUserNameByID(inv.createdBy) createdByInitial,  \n" +
                "			fun_getEmployeeIDByUserID(inv.createdBy) createdByEmp,  \n" +
                "			inv.isAskForVersionConfirmation,  \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,  \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt  ,  \n" +
                "                        fun_getPOTypeByID(inv.refSalesOrderId) poType  ,  \n" +
                "                        fun_getGenericCategoryCodeNameByID(inv.carrierID) carrier,inv.carrierID , inv.carrierAccountNumber  \n" +
                "		FROM customer_packingslip inv  \n" +
                "                 LEFT JOIN customer_packingslip cps ON cps.refCustInvoiceID = inv.id AND cps.isDeleted = 0  AND cps.transType = 'P'  \n" +
                "                 LEFT JOIN salesordermst sm ON sm.id=cps.refSalesOrderId AND sm.isdeleted=0  \n" +
                "                 WHERE inv.id = invoiceID  \n" +
                "                 AND inv.transType = pTransType  \n" +
                "                 AND inv.isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "				 SELECT cpd.refSalesorderDetid,  \n" +
                "					cpd.id,  \n" +
                "                    cpd.refCustPackingSlipID,  \n" +
                "					cpd.custPOLineID,  \n" +
                "					cpd.reflineID AS packingSlipSerialNumber,  \n" +
                "                    cpd.lineID,  \n" +
                "                    co.PIDCode,  \n" +
                "                    co.mfgcodeID,  \n" +
                "                    ss.releaseNumber,  \n" +
                "                    fun_getMfgCodeAndNameByID(co.mfgcodeID) mfgName,  \n" +
                "					co.mfgpn,  \n" +
                "                    fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "					fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "                    cpd.partId,  \n" +
                "                    cpd.refChargesTypeID,  \n" +
                "					#(select c.partType from component c where c.isDeleted = 0 and c.id = partId) partType,  \n" +
                "					cpd.shipQty,cpd.unitPrice,cpd.extendedPrice,  \n" +
                "                    fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,  \n" +
                "                    #(IFNULL(shipQty,0)*IFNULL(unitPrice,0)) extPrice,  \n" +
                "                    CASE WHEN co.partType = 4 THEN FALSE ELSE TRUE END materialType,  \n" +
                "                    othercharges AS lineOtherCharges,  \n" +
                "                    (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,  \n" +
                "					cpd.shippingNotes,  \n" +
                "                    cpd.internalComment,  \n" +
                "                    cpd.assyDescription,  \n" +
                "					fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "					fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "					fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(cpd.updateByRoleId) updatedbyRole ,  \n" +
                "                    fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(cpd.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt ,  \n" +
                "                    (SELECT sod.quoteNumber FROM  salesorderdet sod WHERE sod.id = refSalesorderDetid AND sod.isDeleted = 0) quoteNumber,  \n" +
                "                    co.partType,  \n" +
                "                    vu.packingLineID,  \n" +
                "                    (CASE WHEN vu.packingDetID IS NOT NULL THEN 1 ELSE 0 END) isFromPackingSlip,  \n" +
                "                    co.isCustom, co.isCPN , co.nickName ,  \n" +
                "                    (SELECT GROUP_CONCAT(cert.fullName)FROM  certificate_standards cert  \n" +
                "						WHERE cert.certificateStandardID IN (SELECT compstd.certificateStandardID  \n" +
                "							FROM component_standard_details compstd WHERE compstd.componentID = co.id AND compstd.isDeleted= 0) )componentStandardList,  \n" +
                "					quoteFrom,refAssyQtyTurnTimeID,quoteNumber,refRFQGroupID,refRFQQtyTurnTimeID,  \n" +
                "                    (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,  \n" +
                "                    IFNULL(assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
                "					JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
                "                    WHERE rfqAssyTurn.id = cpd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
                "                    cpd.isZeroValue,  \n" +
                "                    fun_getIntToText(cpd.isZeroValue) isZeroValueConverted  \n" +
                "                    ,cpd.releaseNotes  \n" +
                "				 FROM customer_packingslip_det cpd  \n" +
                "                 LEFT JOIN COMPONENT co ON co.id = cpd.partId AND co.isDeleted = 0  \n" +
                "                 LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0  \n" +
                "                 LEFT JOIN vu_inv_ps_so_line_detail vu ON vu.invDetId= cpd.id AND vu.invoiceId = cpd.refCustPackingSlipId  \n" +
                "                 WHERE cpd.refCustPackingSlipID = invoiceID AND cpd.isdeleted=0  \n" +
                "                 ORDER BY cpd.lineID ASC;  \n" +
                "  \n" +
                "                 SELECT cpOther.id,  \n" +
                "						cpOther.refCustomerPackingSlipDetID,  \n" +
                "						cpOther.partID,  \n" +
                "						fun_getMFGPNByID(cpOther.partID) mfgPN,  \n" +
                "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,  \n" +
                "                        cpOther.qty,  \n" +
                "                        cpOther.price,  \n" +
                "                        cpOther.lineComment,  \n" +
                "                         cpOther.lineInternalComment,  \n" +
                "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,  \n" +
                "                        cpOther.frequency ,  \n" +
                "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'  \n" +
                "								WHEN (cpOther.frequency = 2) THEN 'First'  \n" +
                "								WHEN (cpOther.frequency = 3) THEN  'Last'  \n" +
                "								ELSE ''  \n" +
                "						END) AS frequencyName,  \n" +
                "			cpOther.frequencyType,  \n" +
                "			  (CASE  	WHEN (cpOther.frequencyType = 1) THEN 'Release'  \n" +
                "								WHEN (cpOther.frequencyType = 2) THEN 'Shipment'  \n" +
                "								ELSE ''  \n" +
                "						END) AS frequencyTypeName  \n" +
                "                 FROM customer_packingslip_otherexpense_details cpOther  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cpOther.refCustomerPackingSlipDetId AND cpd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cpOther.isdeleted=0;  \n" +
                "  \n" +
                "                  --  Tracking Number  \n" +
                "                SELECT id,trackNumber  \n" +
                "                FROM customer_packing_slip_track_number  \n" +
                "                WHERE refCustPackingSlipID = invoiceID  \n" +
                "                AND isDeleted = 0;  \n" +
                "  \n" +
                "                -- sales commission attribute  \n" +
                "                SELECT cca.id,  \n" +
                "		    cca.refCustPackingSlipDetID,  \n" +
                "                    cca.unitPrice,  \n" +
                "                    cca.commissionPercentage,  \n" +
                "                    cca.commissionValue,  \n" +
                "                    cca.quoted_commissionPercentage,  \n" +
                "                    cca.quoted_commissionValue,  \n" +
                "                    cca.poQty,  \n" +
                "                    cca.partId,  \n" +
                "                    cca.quotedQty,  \n" +
                "                    cca.type,  \n" +
                "                    cca.rfqAssyID,  \n" +
                "                    cca.commissionCalculateFrom,  \n" +
                "                    cca.salesCommissionNotes,  \n" +
                "                    cca.refComponentSalesPriceBreakID,  \n" +
                "                    cca.quoted_unitPrice  \n" +
                "				FROM customer_packingslip_commission_attribute_mstdet cca  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cca.isdeleted=0;  \n" +
                "                 -- sales commission child attribute  \n" +
                "                SELECT cca.id,  \n" +
                "		    cca.refCustPackingSlipDetID,  \n" +
                "		    cca.refcustInvoiceCommissionID,  \n" +
                "                    cca.unitPrice,  \n" +
                "                    cca.refQuoteAttributeId,  \n" +
                "                    cca.commissionPercentage,  \n" +
                "                    cca.commissionValue,  \n" +
                "                    cca.org_commissionPercentage,  \n" +
                "                    cca.org_commissionValue,  \n" +
                "                    cca.category,  \n" +
                "                    cca.partId,  \n" +
                "                    cca.refComponentSalesPriceBreakID,  \n" +
                "                    cca.org_unitPrice,  \n" +
                "                    (cca.commissionValue * cpd.shipQty) extendedCommissionValue,  \n" +
                "                    (cca.org_commissionValue * cpd.shipQty) extendedOrgCommissionValue,  \n" +
                "                    IFNULL(qd.fieldName,'Sales Commission') fieldName  \n" +
                "				FROM customer_packingslip_commission_attribute cca  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "                 LEFT JOIN quotecharges_dynamic_fields_mst qd ON cca.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cca.isdeleted=0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5743,'2.00','V1','Sproc_GetCustomerInvoiceDetail  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5743:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerInvoiceDetailForElastic;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    IN pTransType VARCHAR(1),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM customer_packingslip cp  \n" +
                "			JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID = cp.id AND cpd.isDeleted = 0  \n" +
                "			LEFT JOIN component co  ON co.id = cpd.partId AND co.isDeleted = 0  \n" +
                "			LEFT JOIN employees emp ON emp.id=cp.salesCommissionTo AND emp.isdeleted=0  \n" +
                "		WHERE cp.isDeleted = 0 AND cp.transType = IFNULL(pTransType, cp.transType);  \n" +
                "	ELSE  \n" +
                "		SELECT  cp.id AS custInvMstID,  \n" +
                "			cpd.id AS customerInvDetID,  \n" +
                "			cp.invoiceNumber,  \n" +
                "			cp.invoiceDate,  \n" +
                "			cp.poNumber,  \n" +
                "			cp.poDate,  \n" +
                "			cp.poRevision,  \n" +
                "			cp.soNumber,  \n" +
                "			cp.soDate,  \n" +
                "			cp.packingSlipNumber,  \n" +
                "			cp.packingSlipDate,  \n" +
                "			(SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = cp.id AND packing.isDeleted = 0) packingSlipID,  \n" +
                "			fun_getFOBById(cp.freeOnBoardId) FOBName,  \n" +
                "			fun_getIntToText(cp.isLocked) `Locked`,  \n" +
                "			fun_getGenericCategoryNameByID(cp.termsId) terms,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethod,  \n" +
                "			cpd.reflineID,  \n" +
                "			cpd.partId ,  \n" +
                "			co.mfgPn mfgPn,  \n" +
                "			fun_getAssyPIDCodeByID(cpd.partId) AS assyID,  \n" +
                "			fun_getMFGTypeByID(co.mfgcodeID) mfgType,  \n" +
                "			fun_getAssyNickNameByID(cpd.partId) nickName,  \n" +
                "			cpd.shippedQty , cpd.shipQty, cp.systemID,  \n" +
                "			cp.termsID,  \n" +
                "			(CASE WHEN cp.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cp.termsID) END) AS termsDisplayText ,  \n" +
                "			cp.shippingMethodId ,  \n" +
                "			cp.salesCommissionTo ,  \n" +
                "			CONCAT('(',emp.initialName,')',' ',IFNULL(emp.firstName,''),' ',IFNULL(emp.lastName,'')) salesCommissionToDisplayText,  \n" +
                "			cp.headerComment, cp.packingSlipComment,  \n" +
                "			cpd.internalComment, shippingNotes ,  \n" +
                "			IFNULL(cp.refSalesOrderID,0) refSalesOrderID ,  \n" +
                "			cpd.assyDescription , cpd.custPOLineID,  \n" +
                "			cp.creditMemoNumber, cp.creditMemoDate, cp.refDebitMemoNumber,  \n" +
                "			cp.refDebitMemoDate, cp.rmaNumber, cp.transType  ,  \n" +
                "			cp.customerID,  \n" +
                "			fun_getMfgNameByID(cp.customerID) customerName,  \n" +
                "			fun_getMfgCodeByID(cp.customerID) customerCode ,  \n" +
                "			(select GROUP_CONCAT(cpstn.trackNumber SEPARATOR ', ') from customer_packing_slip_track_number cpstn where cpstn.refCustPackingSlipID = cp.id AND cpstn.isDeleted=0) AS trackingNumberList ,  \n" +
                "			(CASE WHEN cp.packingSlipType = 1 OR cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "					WHEN  cp.packingSlipType = 3 THEN 'MISC Invoice' END)invoiceType ,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "            cp.isDeleted  ,  \n" +
                "            cpd.carrierId ,fun_getGenericCategoryCodeNameByID(cp.carrierId) AS carrierDisplayText,  \n" +
                "            cpd.carrierAccountNumber  \n" +
                "		FROM customer_packingslip cp  \n" +
                "			JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID = cp.id AND cpd.isDeleted = 0  \n" +
                "			LEFT JOIN component co  ON co.id = cpd.partId AND co.isDeleted = 0  \n" +
                "			LEFT JOIN employees emp ON emp.id=cp.salesCommissionTo AND emp.isdeleted=0  \n" +
                "		WHERE cp.id= IFNULL(pId,cp.id) AND cp.transType = IFNULL(pTransType, cp.transType)  \n" +
                "			AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							OR ((DATE(fun_CovnertDateTimeByTimezoneValue(cpd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cpd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5744,'2.00','V1',' Sproc_GetCustomerInvoiceDetailForElastic - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5744:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber`(  \n" +
                "	IN pPackingSlipNumber VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountOfPSRecord INT;  \n" +
                "	DECLARE v_CountOfSIRecord INT;  \n" +
                "	DECLARE v_StringOfMFGCode VARCHAR(255);  \n" +
                "	DECLARE Status_Check TINYINT;  \n" +
                "	DECLARE vPackingSlipId INT;  \n" +
                "	DECLARE vrefSalesOrderID INT;  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_CustomerPackingSlip_Validation_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_CustomerPackingSlip_Validation_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		Error VARCHAR(1000)  \n" +
                "	);  \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_CountOfPSRecord  \n" +
                "	FROM 	customer_packingslip  \n" +
                "	WHERE 	packingSlipNumber = pPackingSlipNumber  \n" +
                "			AND transType = 'P'  \n" +
                "			AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF (v_CountOfPSRecord = 0) THEN  \n" +
                "		INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT('Customer Packing Slip# <b>',pPackingSlipNumber,'</b> not found.'));  \n" +
                "		SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		SELECT 	a.refCustInvoiceID, GROUP_CONCAT(a.fullCustCode),a.`subStatus` ,a.id ,a.refSalesOrderID  \n" +
                "        INTO v_CountOfSIRecord, v_StringOfMFGCode,Status_Check  ,  vPackingSlipId ,vrefSalesOrderID  \n" +
                "		FROM 	(  \n" +
                "				SELECT 	cp.id, cp.packingSlipNumber,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgCodeFormat) fullCustCode,  \n" +
                "					cp.`subStatus`,cp.refCustInvoiceID,cp.refSalesOrderID  \n" +
                "				FROM 	customer_packingslip  cp  \n" +
                "                left join mfgcodemst mfg on mfg.id= cp.customerID  \n" +
                "				WHERE 	cp.packingSlipNumber = pPackingSlipNumber  \n" +
                "						AND cp.transType = 'P'  \n" +
                "						AND cp.isDeleted =0  \n" +
                "		) a  \n" +
                "        GROUP BY a.refCustInvoiceID,id ,a.refSalesOrderID  ;  \n" +
                "  \n" +
                "			IF(Status_Check=1)THEN      /* status 1-> Draft */  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"</b> is in <b>Draft</b>. So you cannot get any details of packing slip.\"));  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "			ELSEIF(v_CountOfSIRecord IS NOT NULL)THEN  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"'s</b> customer invoice is already created for customer \",v_StringOfMFGCode,\".\"));  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "			ELSE  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (TRUE, '');  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "  \n" +
                "				SELECT packingSlipNumber,packingSlipDate,  \n" +
                "                fun_getMfgCodeAndNameByID(customerID) customerName,  \n" +
                "                customerID,  \n" +
                "                    id AS packingSlipID,  \n" +
                "                    poNumber, poDate,poRevision,  \n" +
                "					soNumber, soDate, refSalesOrderId,sorevision,  \n" +
                "                    packingSlipType,  \n" +
                "                    (CASE WHEN packingSlipType = 1 THEN 'MISC' WHEN packingSlipType = 2 THEN 'PO' END) packingSlipTypeText,  \n" +
                "					fun_getGenericCategoryCodeNameByID(shippingMethodId) shippingMethod,      shippingMethodId,  \n" +
                "                    fun_getGenericCategoryNameByID(termsId) terms,termsId,  \n" +
                "                    shipToId, billToId ,  \n" +
                "                    freeOnBoardId,salesCommissionTo,  \n" +
                "                    fun_getEmployeeInitialNameByEmpID(salesCommissionTo) salesCommInitial,  \n" +
                "                    CONCAT('(',fun_getEmployeeInitialNameByEmpID(salesCommissionTo),') ',fun_getEmployeeNameByEmpID(salesCommissionTo) ) salesCommName,  \n" +
                "                    fun_getFOBById(freeOnBoardId) FOBName,  \n" +
                "                    contactPersonId,  \n" +
                "                    intermediateShipmentId ,  \n" +
                "                    billingAddress,  \n" +
                "                    shippingAddress,  \n" +
                "                    intermediateAddress,  \n" +
                "                    packingSlipComment,  \n" +
                "                    headerComment,  \n" +
                "                    revision packingSlipVersion  \n" +
                "				 FROM customer_packingslip WHERE packingSlipNumber = pPackingSlipNumber  \n" +
                "						AND transType = 'P'  \n" +
                "						AND isDeleted = 0 ;  \n" +
                "  \n" +
                "				SELECT  cpd.custPOLineID,  \n" +
                "						cpd.refSalesorderDetid,  \n" +
                "						cpd.reflineID AS packingSlipSerialNumber,  \n" +
                "                        fun_getMFGPNByID(cpd.partId) mfgpn,  \n" +
                "                        fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "                        fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "                        cpd.partId,cpd.refChargesTypeID,  \n" +
                "                        cpd.shippingId,  \n" +
                "					(SELECT c.partType FROM component c WHERE c.isDeleted = 0 AND c.id = cpd.partId) partType,  \n" +
                "						cpd.shipQty,  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.price, cpd.unitPrice) unitPrice,  \n" +
                "						cpd.assyDescription,  \n" +
                "						fun_getAssyPIDCodeByID(cpd.partId)	PIDCode,  \n" +
                "						fun_getMfgCodeAndNameByPartID(cpd.partId) mfgName,  \n" +
                "						(SELECT ss.releaseNumber FROM salesshippingmst ss WHERE  ss.shippingId = cpd.shippingId AND ss.isdeleted=0) releaseNumber,  \n" +
                "						fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,  \n" +
                "						(IFNULL(cpd.shipQty,0)* IF(cp.packingSlipType = 2 ,sod.price,IFNULL(cpd.unitPrice,0))) extPrice,  \n" +
                "						cpd.otherCharges AS lineOtherCharges,  \n" +
                "						0 totalExtPrice ,  \n" +
                "						1 isFromPackingSlip,  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteNumber, cpd.quoteNumber) quoteNumber,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQGroupID ,cpd.refRFQGroupID) refRFQGroupID,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "						(CASE 	WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 1 THEN 'From RFQ'  \n" +
                "								WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 3 THEN 'N/A'  \n" +
                "                                WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 2 THEN 'From Part Master' ELSE '' END) quoteFromText  ,  \n" +
                "					    cpd.releaseNotes  \n" +
                "				 FROM customer_packingslip_det cpd  \n" +
                "                 LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0  AND cp.transType = 'P'  \n" +
                "                 LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0  \n" +
                "                 WHERE cpd.isDeleted=0  \n" +
                "                 AND cp.packingSlipNumber = pPackingSlipNumber  \n" +
                "                ORDER BY refSalesorderdetid,shippingId ASC;  \n" +
                "  \n" +
                "                -- get other charges  \n" +
                "                -- 1, Every 2 First 3 Last  \n" +
                "			  SELECT dtl.refCustPackingSlipID ,  \n" +
                "					 dtl.refSalesorderDetid,  \n" +
                "                     dtl.remainingQty,  \n" +
                "                     sother.partID,  \n" +
                "                     fun_getMFGPNByID(sother.partID) mfgPN,  \n" +
                "					 fun_getRoHSIconByPartID(sother.partID) rohsIcon,  \n" +
                "					 fun_getRoHSNameByPartID(sother.partID) rohsName,  \n" +
                "                     sother.price ,  \n" +
                "                     sother.qty,  \n" +
                "                     (IFNULL(sother.qty,0)*IFNULL(sother.price,0)) extOtherPrice,  \n" +
                "                     sother.frequency,  \n" +
                "                      sother.lineComment,  \n" +
                "                       sother.lineInternalComment,  \n" +
                "                       sother.frequencyType,  \n" +
                "                     (CASE  WHEN (sother.frequency = 1) THEN 'Every'  \n" +
                "							WHEN (sother.frequency = 2) THEN 'First'  \n" +
                "							WHEN (sother.frequency = 3) THEN  'Last'  \n" +
                "							ELSE ''  \n" +
                "						END) AS frequencyName ,  \n" +
                "						(CASE  WHEN (sother.frequencyType = 1) THEN 'Release'  \n" +
                "							WHEN (sother.frequencyType = 2) THEN 'Shipment'  \n" +
                "							ELSE ''  \n" +
                "						END) AS frequencyTypeName  \n" +
                "				FROM (  \n" +
                "					SELECT b.refCustPackingSlipID , b.refSalesorderDetid, b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency FROM  \n" +
                "					 	(SELECT  a.refCustPackingSlipID , a.refSalesorderDetid, a.poQty, a.shipQty ,a.remainingQty, a.packingslipIndex ,a.shippingId,  \n" +
                "						CASE WHEN packingslipIndex = 1 AND  remainingQty > 0 THEN '1,2'  \n" +
                "							 WHEN packingslipIndex = 1 AND  remainingQty = 0 THEN '1,2,3'  \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty > 0 THEN '1'  \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty =  0 THEN '1,3' END AS calcFrequency  \n" +
                "						FROM (  \n" +
                "							SELECT cpd2.refCustPackingSlipID,cpd2.refSalesorderDetid,cpd2.poQty,cpd2.shipQty ,  \n" +
                "								cpd2.remainingQty,cpd2.shippingId,  \n" +
                "                                cpd2.partID,  \n" +
                "								row_number() over(PARTITION BY cpd1.refSalesorderDetid,cpd1.shippingId  ORDER BY cpd2.id ) packingslipIndex  \n" +
                "							FROM customer_packingslip_det cpd1  \n" +
                "							JOIN customer_packingslip_det cpd2 ON cpd2.refSalesOrderDetid = cpd1.refSalesOrderDetid AND cpd2.isDeleted = 0  \n" +
                "							WHERE cpd1.refCustPackingSlipID = vPackingSlipId  \n" +
                "                            AND cpd1.isDeleted = 0  \n" +
                "						) AS a  \n" +
                "						)AS b  GROUP BY b.refCustPackingSlipID,b.refSalesorderDetid,b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency  \n" +
                "				) AS dtl  \n" +
                "				JOIN salesorder_otherexpense_details sother  \n" +
                "                ON sother.refSalesOrderDetID = dtl.refSalesorderDetid AND sother.isDeleted = 0  \n" +
                "				WHERE FIND_IN_SET ( sother.frequency ,dtl.calcFrequency)  \n" +
                "				AND dtl.refCustPackingSlipID = vPackingSlipId;  \n" +
                "  \n" +
                "  \n" +
                "                 --  Tracking Number  \n" +
                "                SELECT trackNumber  \n" +
                "                FROM customer_packing_slip_track_number  \n" +
                "                WHERE refCustPackingSlipID = vPackingSlipId  \n" +
                "                AND isDeleted = 0;  \n" +
                "  \n" +
                "                -- other charges  \n" +
                "                SELECT cpd.partId,cpd.shipQty,cpd.poQty,cpd.refSalesorderDetid,cpd.shippingId  \n" +
                "		FROM customer_packingslip cp JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID=cp.id  \n" +
                "			WHERE transType='I' AND cp.refSalesOrderID=vrefSalesOrderID AND cp.isdeleted=0  ;  \n" +
                "			END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5745,'2.00','V1','Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5745:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerPackingSlipDetailForElastic;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingSlipDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "	IN pdetID INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM customer_packingslip_det cpd  \n" +
                "			JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID and cp.isDeleted = 0  \n" +
                "			LEFT JOIN mfgcodemst mfg ON mfg.id=cp.customerID AND mfg.isdeleted=0  \n" +
                "			LEFT JOIN employees emp ON emp.id=cp.salesCommissionTo AND emp.isdeleted=0  \n" +
                "		WHERE cpd.isdeleted=0 AND transType ='P';  \n" +
                "	ELSE  \n" +
                "		SELECT cpd.custPOLineID,  \n" +
                "			cpd.id AS customerPackingSlipDetID,  \n" +
                "			cpd.poQty,  \n" +
                "			cpd.shipQty,  \n" +
                "			cpd.remainingQty,  \n" +
                "			cpd.partId,  \n" +
                "			fun_getAssyPIDCodeByID(cpd.partId) assyID,  \n" +
                "			fun_getAssyNameByID(cpd.partId) assyName,  \n" +
                "			fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "			fun_getAssyNickNameByID(cpd.partId) nickName,  \n" +
                "			assyDescription,  \n" +
                "			cp.poNumber,  \n" +
                "			cp.poDate,  \n" +
                "			cp.poRevision,  \n" +
                "			cp.soNumber,  \n" +
                "			cp.soDate,  \n" +
                "			cp.packingSlipNumber,  \n" +
                "			cp.packingSlipDate,  \n" +
                "			IFNULL(cp.refSalesOrderID,0) refSalesOrderID,  \n" +
                "			cp.customerID,  \n" +
                "			fun_getMfgNameByID(cp.customerID) customerName,  \n" +
                "			fun_getMfgCodeByID(cp.customerID) customerCode,  \n" +
                "			cp.id customerPackingSlipID,  \n" +
                "			mfg.mfgType,  \n" +
                "			cp.headerComment,  \n" +
                "			cp.packingSlipComment,  \n" +
                "			cpd.internalComment,  \n" +
                "			cpd.standrads,  \n" +
                "			cpd.shippingNotes,  \n" +
                "			CASE WHEN cp.subStatus=1 THEN 'Draft' WHEN cp.subStatus=2 THEN 'Ready to Ship' WHEN cp.subStatus=3 THEN 'Waiting For Shipping Label' WHEN cp.subStatus=4 THEN 'Waiting For Pickup' ELSE 'Shipped' END AS `status`,  \n" +
                "			CASE WHEN cp.packingSlipType=1 THEN 'MISC' ELSE 'PO/SO' END packingslipType,  \n" +
                "			cp.sorevision, cp.systemID ,  \n" +
                "			cp.termsID,  \n" +
                "			(CASE WHEN cp.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cp.termsID) END) AS termsDisplayText ,  \n" +
                "			cp.shippingMethodId, fun_getGenericCategoryCodeNameByID(cp.shippingmethodid) AS shippingMethodDisplayText ,  \n" +
                "			cp.salesCommissionTo ,  \n" +
                "			CONCAT('(',emp.initialName,')',' ',IFNULL(emp.firstName,''),' ',IFNULL(emp.lastName,'')) salesCommissionToDisplayText,  \n" +
                "			fun_getFOBById(cp.freeOnBoardId) freeOnBoardDisplayText ,  \n" +
                "			(select GROUP_CONCAT(cpstn.trackNumber SEPARATOR ', ') from customer_packing_slip_track_number cpstn where cpstn.refCustPackingSlipID = cp.id AND cpstn.isDeleted=0 ) AS trackingNumberList,  \n" +
                "            cpd.isDeleted,  \n" +
                "            cp.carrierId ,fun_getGenericCategoryCodeNameByID(cp.carrierId) AS carrierDisplayText,  \n" +
                "            cp.carrierAccountNumber  \n" +
                "		FROM customer_packingslip_det cpd  \n" +
                "			JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID and cp.isDeleted = 0  \n" +
                "			LEFT JOIN mfgcodemst mfg ON mfg.id=cp.customerID AND mfg.isdeleted=0  \n" +
                "			LEFT JOIN employees emp ON emp.id=cp.salesCommissionTo AND emp.isdeleted=0  \n" +
                "		WHERE cpd.refCustPackingSlipID=ifnull(pId,cpd.refCustPackingSlipID)  \n" +
                "			AND cpd.id=IFNULL(pdetID,cpd.id) AND transType ='P'  \n" +
                "            AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(cpd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cpd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							OR ((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5746,'2.00','V1','Sproc_GetCustomerPackingSlipDetailForElastic  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5746:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "drop procedure if exists Sproc_GetCustomerPackingslipReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipReportDetails`(  \n" +
                "	IN cpid INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	SELECT  \n" +
                "    cp.id,  \n" +
                "    cp.status,  \n" +
                "    cp.packingSlipType,  \n" +
                "    cp.packingSlipNumber AS PackingSlip,  \n" +
                "    cp.packingSlipDate AS PackingSlipDate,  \n" +
                "    cp.poDate AS PODate,  \n" +
                "    cp.soNumber AS SalesOrderNumber,  \n" +
                "    cp.poNumber AS PONumber,  \n" +
                "    cp.packingSlipComment,  \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,  \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,  \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,  \n" +
                "    cp.soDate AS SODate,  \n" +
                "    cp.sorevision AS SORevision,  \n" +
                "	cp.billingAddress AS SoldToAddress,  \n" +
                "	cp.shippingAddress AS ShippingAddress,  \n" +
                "	cp.intermediateAddress AS IntermediateAddress,  \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo), '-') AS SalesOrderPersonName,  \n" +
                "	fun_getUserNameByID(cp.updatedBy) AS  preparedBy, us.emailAddress, emp.phExtension ,  \n" +
                "    cp.revision packingSlipVersion  ,  \n" +
                "    '1.00' docNumber ,  \n" +
                "    cp.systemID AS legalNumber,  \n" +
                "    sm.isBlanketPO,  \n" +
                "	CASE WHEN sm.isBlanketPO=1 THEN 'Yes' ELSE 'No' END blanketPOText  \n" +
                "FROM  \n" +
                "    customer_packingslip cp  \n" +
                "        LEFT JOIN  \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID  \n" +
                "        AND sm.isDeleted = 0  \n" +
                "        LEFT JOIN  \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId  \n" +
                "        AND gc.isDeleted = 0  \n" +
                "        AND gc.categoryType = 'Shipping Methods'  \n" +
                "        LEFT JOIN  \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = cp.termsID  \n" +
                "        AND gcc.isDeleted = 0  \n" +
                "        AND gcc.categoryType = 'Payment Terms'  \n" +
                "	LEFT JOIN users us ON us.id = cp.updatedBy  \n" +
                "	LEFT JOIN employees emp ON emp.id = us.employeeID  \n" +
                "WHERE  \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid  \n" +
                "LIMIT 1;  \n" +
                "  \n" +
                "SELECT  \n" +
                "	cpd.lineID AS PSLine,  \n" +
                "    cpd.id AS cpDetID,  \n" +
                "    ss.releaseNumber,  \n" +
                "    cpd.refCustPackingSlipID AS cpID,  \n" +
                "    cpd.partId,  \n" +
                "    IFNULL(cpd.shipQty,0) AS ShippedQty,  \n" +
                "    CASE WHEN c.partType = 4 THEN NULL ELSE  IFNULL(cpd.remainingQty,0) END AS RemainingQty,  \n" +
                "    cpd.custPOLineID AS POLine,  \n" +
                "    cpd.shippingNotes AS ShippingComment,  \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN  fun_getGenericCategoryNameByID(cpd.refChargesTypeID)  \n" +
                "		WHEN (c.iscustom = 1) THEN  c.custAssyPN  \n" +
                "		WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN  c.mfgPN  \n" +
                "		ELSE ''  END) AS PartNumber,  \n" +
                "	 CASE WHEN c.partType = 4 THEN '' ELSE  FUN_GETUOMABBREVIATIONBYID(c.uom) END AS UOM,  \n" +
                "    IFNULL(c.rev, '') AS Revision,  \n" +
                "    c.partType,  \n" +
                "    CONCAT(IFNULL(REPLACE(cpd.assyDescription,'  \n" +
                "','<br/>'), ''), '<br/>',  \n" +
                "            IFNULL(CONCAT(' ', rr.name), ''),  \n" +
                "            IFNULL(CONCAT(', ',  \n" +
                "                            cpd.standrads),  \n" +
                "                    ''),  \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton,  \n" +
                "            CASE WHEN cpd.poReleaseNumber IS NOT NULL THEN CONCAT('PO Release#: ',cpd.poReleaseNumber)  WHEN  cpd.refBlanketPONumber IS NOT NULL THEN CONCAT('Ref. Blanket PO#: ',cpd.refBlanketPONumber)  \n" +
                "            ELSE '' END  refBlanketPONumber  ,  \n" +
                "           replace(cpd.releaseNotes,'  \n" +
                "','<br/>')  AS releaseNotes  \n" +
                "FROM  \n" +
                "    customer_packingslip_det cpd  \n" +
                "        LEFT JOIN  \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id  \n" +
                "        AND cp.isDeleted = 0  \n" +
                "        LEFT JOIN  \n" +
                "    component c ON c.id = cpd.partid  \n" +
                "        LEFT JOIN  \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID  \n" +
                "        AND sd.isDeleted = 0  \n" +
                "        LEFT JOIN  \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID  \n" +
                "    LEFT JOIN  \n" +
                "    salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id  \n" +
                "        AND ra.partID = cpd.partId  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id  \n" +
                "WHERE  \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid AND cpd.refChargesTypeID IS NULL ;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5747,'2.00','V1','Sproc_GetCustomerPackingslipReportDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5747:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPackingSlipAssemblyDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipAssemblyDetails`(  \n" +
                "	IN partID INT ,  \n" +
                "	IN cpID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	# COFC Report Header details  \n" +
                "	SELECT  \n" +
                "    cp.id,  \n" +
                "    cp.packingSlipNumber AS PackingSlip,  \n" +
                "    cp.packingSlipDate AS PackingSlipDate,  \n" +
                "    cp.soNumber AS SalesOrderNumber,  \n" +
                "    cp.poNumber AS PONumber,  \n" +
                "	 cp.soDate AS SODate,  \n" +
                "    cp.sorevision AS SORevision,  \n" +
                "    IFNULL(mfg.mfgName, '') AS Customer,  \n" +
                "    (select initialName from employees emp  \n" +
                "		join department dept on dept.deptMngrId = emp.id  and dept.isDeleted = 0 and dept.deptID = -1) AS DepartmentName,  \n" +
                "    'Paul Khunt' AS ManagerName  \n" +
                "FROM  \n" +
                "    customer_packingslip cp  \n" +
                "        LEFT JOIN  \n" +
                "    mfgcodemst mfg ON mfg.id = cp.customerID  \n" +
                "        AND mfg.isDeleted = 0  \n" +
                "WHERE  \n" +
                "    cp.isDeleted = 0 AND cp.id = cpID  \n" +
                "LIMIT 1;  \n" +
                "  \n" +
                "  # COFC Report Table details  \n" +
                "	SELECT  \n" +
                "		cpd.id AS cpDetID,  \n" +
                "		cpd.custPOLineID AS POLine,  \n" +
                "		ss.releaseNumber,  \n" +
                "		cpd.lineID AS PSLine,  \n" +
                "		sum(CASE WHEN (c.partType = 3 or  (c.partType = 2 and cpd.componentStockType = 1)) THEN sa.shippedqty  \n" +
                "						ELSE cpd.shipQty END) AS ShippedQty,  \n" +
                "		cpd.poQty AS OrderQty,  \n" +
                "		(CASE WHEN (c.partType IS NULL OR c.partType = '') THEN fun_getGenericCategoryNameByID(cpd.refChargesTypeID)  \n" +
                "			WHEN (c.iscustom = 1) THEN c.custAssyPN  \n" +
                "			WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN c.mfgPN  \n" +
                "			ELSE '' END) AS PartNumber,  \n" +
                "		IFNULL(c.rev, '') AS Revision,  \n" +
                "		ifnull(sa.woNumber,'N/A') AS WorkOrderNumber,  \n" +
                "		(CASE	WHEN sa.woNumber IS NOT NULL THEN fun_getCertificationByWoNumber(sa.woNumber)  \n" +
                "				WHEN c.category = 2 and (c.iscpn = 0 and c.iscustom = 0) AND cpd.standrads IS NULL THEN 'N/A'  \n" +
                "				ELSE cpd.standrads END) AS Standards,  \n" +
                "		FUN_GETUOMBYID(c.uom) AS UOM,  \n" +
                "		CONCAT(IFNULL(Replace(cpd.assyDescription,'  \n" +
                "','<br/>'), ''), '<br/>', IFNULL(CONCAT(' ', rr.name), '')) AS Descripton ,  \n" +
                "		c.partType,  \n" +
                "		(case when sa.woNumber is not null then (SELECT ast.datecode FROM assemblyStock ast WHERE ast.woNumber = sa.woNumber AND ast.isDeleted = 0 LIMIT 1)  \n" +
                "			WHEN c.category = 2 and (c.iscpn = 0 and c.iscustom = 0) THEN 'Per Part Label'  \n" +
                "			else 'N/A'end) AS DateCode,  \n" +
                "		(case	when sa.workorderID is not null then wo.dateCodeFormat  \n" +
                "			WHEN c.category = 2 and (c.iscpn = 0 and c.iscustom = 0) THEN ''  \n" +
                "			when sa.stockType = 'OS' then 'WWYY'  \n" +
                "			else '' end) AS DateCodeFormat  ,  \n" +
                "        c.RoHSStatusID   ,  \n" +
                "        replace(cpd.releaseNotes,'  \n" +
                "','<br/>')  releaseNotes  \n" +
                "FROM  	customer_packingslip_det cpd  \n" +
                "INNER JOIN  COMPONENT c ON c.id = cpd.partid AND c.isDeleted = 0  \n" +
                "LEFT JOIN  salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "LEFT JOIN  shippedassembly sa ON cpd.id = sa.refCustPackingSlipDetID AND sa.isDeleted = 0 AND sa.shippedqty <> 0  \n" +
                "LEFT JOIN workorder wo ON wo.woID = sa.workorderID and sa.isDeleted = 0  \n" +
                "LEFT JOIN  rfq_rohsmst rr ON rr.id = c.rohsStatusID and rr.isDeleted = 0  \n" +
                "WHERE  \n" +
                "    cpd.isDeleted = 0  AND cpd.refCustPackingSlipID = cpID  AND cpd.partId = partID  \n" +
                "		GROUP BY cpd.custPOLineID, cpd.id, cpd.lineID,c.partType, sa.woNumber,cpd.poQty,c.iscustom,  \n" +
                "        cpd.refChargesTypeID,c.rev,c.category,c.iscpn,  \n" +
                "        cpd.standrads,cpd.assyDescription,sa.workorderID,sa.stockType,cpd.releaseNotes ,c.RoHSStatusID ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5748,'2.00','V1','Sproc_GetPackingSlipAssemblyDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5748:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingSalesShippingDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(  \n" +
                "	IN psalesorderDetID INT ,  \n" +
                "	IN packingSlipID INT,  \n" +
                "	IN ppackingslipDetID INT  ,  \n" +
                "    IN pSoReleaseID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "      SELECT ss.shippingID,  \n" +
                "        ss.sDetId,  \n" +
                "		IFNULL(sd.custPOLineNumber ,1)  custPOLineNumber,  \n" +
                "        IFNULL(ss.releaseNumber,1) releaseNumber,  \n" +
                "        ss.qty,  \n" +
                "        ss.shippingDate,  \n" +
                "        sd.tentativeBuild,  \n" +
                "        sd.qty AS poQty,  \n" +
                "        sd.partID,  \n" +
                "        sd.price,  \n" +
                "        sd.lineID,  \n" +
                "        sd.internalComment,  \n" +
                "        sd.partDescription,  \n" +
                "        sd.remark,  \n" +
                "        c.iscustom,  \n" +
                "        smp.poNumber,  \n" +
                "        ss.poReleaseNumber,  \n" +
                "		c.mfgpn,  \n" +
                "		c.mfgpndescription,  \n" +
                "		c.pidcode,  \n" +
                "		fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "		c.nickName,  \n" +
                "		c.mfgcodeID,  \n" +
                "		sd.originalPOQty,  \n" +
                "		fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname, vMfgCodeFormat)  mfgName,  \n" +
                "		(CASE WHEN ss.shippingMethodID IS NULL THEN som.shippingMethodID  \n" +
                "			ELSE ss.shippingMethodID END) shippingMethodID ,  \n" +
                "		(CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddressID  \n" +
                "			ELSE ss.shippingAddressID END) shippingAddressID ,  \n" +
                "		-- (CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddress END) shippingAddress ,  \n" +
                "		fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "		fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "		fun_getCertificationByPartID(sd.partID)standards,  \n" +
                "		CONCAT(IFNULL(ss.releaseNumber,1),' | ',ss.qty,' | ',DATE_FORMAT((CASE WHEN ss.isAgreeToShip=1 THEN IFNULL(ss.revisedRequestedShipDate,ss.revisedRequestedDockDate) ELSE IFNULL(ss.shippingDate,ss.requestedDockDate) END), '%m-%d-%y')) shipping,  \n" +
                "        cpsDet.shippedQty,  \n" +
                "		-- sum(cpsDet.shippedQty) over(partition by ss.sDetId) shippedQty ,  \n" +
                "		(SELECT SUM(IFNULL(cpdet.shipQty,0))  \n" +
                "			FROM customer_packingslip_det cpdet  \n" +
                "            JOIN customer_packingslip cpsdet ON cpsdet.id = cpdet.refCustPackingSlipID  and cpsdet.isDeleted = 0  \n" +
                "            WHERE cpdet.refsalesorderdetid=ss.sDetId  \n" +
                "			AND cpdet.isdeleted=0 AND cpsdet.transType ='P') lineTotShippedQty ,  \n" +
                "		(CASE WHEN ss.shippingMethodID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.shippingMethodID))  \n" +
                "				ELSE (fun_getGenericCategoryCodeNameByID(ss.shippingMethodID)) END) shippingMethodText,  \n" +
                "		c.partType,  \n" +
                "		(SELECT mfg.mfgType FROM mfgcodemst mfg WHERE mfg.id = c.mfgcodeid AND mfg.isDeleted = 0 ) mfgType,  \n" +
                "		sd.quoteNumber,sd.quoteFrom, sd.refAssyQtyTurnTimeID,  \n" +
                "        sd.refRFQGroupID,  \n" +
                "        sd.refRFQQtyTurnTimeID  ,  \n" +
                "		IFNULL(sd.assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ',  \n" +
                "											CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
                "												WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
                "												WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
                "										FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
                "										JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
                "										WHERE rfqAssyTurn.id = sd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
                "		c.category partCategory,  \n" +
                "        ss.releaseNotes,  \n" +
                "        ss.description additionalNotes,  \n" +
                "        ss.customerReleaseLine,  \n" +
                "        sd.salesOrderDetStatus,  \n" +
                "        sd.qty custPOQty,  \n" +
                "        sd.materialTentitiveDocDate  ,  \n" +
                "		(case when ss.carrierID is null then  som.carrierID else ss.carrierID end) carrierID,  \n" +
                "		(CASE WHEN ss.carrierID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.carrierID))  \n" +
                "			ELSE (fun_getGenericCategoryCodeNameByID(ss.carrierID)) END) carrierText,  \n" +
                "		ss.carrierAccountNumber  \n" +
                "	FROM salesshippingmst ss  \n" +
                "	JOIN salesorderdet sd ON ss.sDetID=sd.id  \n" +
                "	JOIN salesordermst som ON som.id = sd.refSalesOrderID  \n" +
                "	JOIN COMPONENT c ON c.id=sd.partid  \n" +
                "    LEFT JOIN mfgcodemst mfgmst ON mfgmst.id = c.mfgcodeId  and mfgmst.isDeleted = 0  \n" +
                "	LEFT JOIN salesorderdet sdp ON sd.refBlanketPOID=sdp.id AND sdp.isdeleted=0  \n" +
                "	LEFT JOIN salesordermst smp ON smp.id=sdp.refSalesOrderID AND smp.isdeleted=0  \n" +
                "	LEFT JOIN (select cpd.refsalesorderdetid,cpd.shippingId, sum(shipQty) shippedQty from customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip  cps ON cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0 and cps.transType= 'P'  \n" +
                "				where cpd.isDeleted = 0 Group by cpd.refsalesorderdetid, cpd.shippingId ) cpsDet  \n" +
                "		ON ss.sDetId = cpsDet.refsalesorderdetid  \n" +
                "          and ss.shippingID = cpsDet.shippingId  \n" +
                "	WHERE sd.id=psalesorderDetID  \n" +
                "	AND  sd.isDeleted = 0  \n" +
                "	AND (CASE WHEN ppackingslipDetID IS NULL THEN  ss.qty > ifnull(cpsDet.shippedQty,0)  \n" +
                "		ELSE  ss.qty=ss.qty  END)  \n" +
                "	AND (CASE WHEN pSoReleaseID IS NOT NULL THEN ss.shippingID=pSoReleaseID ELSE 1 = 1 END)  \n" +
                "	AND ss.isdeleted=0  \n" +
                "	ORDER BY ss.releaseNumber,ss.shippingDate;  \n" +
                "  \n" +
                "	SELECT NULL AS shippingID,  \n" +
                "			sDetId,  \n" +
                "			custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			releaseNotes,  \n" +
                "			tentativeBuild,  \n" +
                "			poQty,  \n" +
                "			partID,  \n" +
                "			price,  \n" +
                "			lineID,  \n" +
                "			partDescription,  \n" +
                "			mfgPN,  \n" +
                "			mfgPNDescription,  \n" +
                "			unitMeaser,  \n" +
                "			nickName,  \n" +
                "			pidcode,  \n" +
                "			NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			mfgcodeID,  \n" +
                "			mfgName,  \n" +
                "			rohsIcon,  \n" +
                "			rohsName,  \n" +
                "			rohsStatusID,  \n" +
                "			standards,  \n" +
                "			shippedQty   ,  \n" +
                "			remark,  \n" +
                "			internalcomment,  \n" +
                "			mfgPnwihLineId,  \n" +
                "			refSODetID,  \n" +
                "			refSOReleaseLineID,  \n" +
                "			frequency,  \n" +
                "			originalPOQty,  \n" +
                "			frequencyType,  \n" +
                "			poNumber  \n" +
                "    FROM (SELECT  \n" +
                "			NULL AS shippingID,  \n" +
                "			sd.id AS sDetId,  \n" +
                "			sd.custPOLineNumber custPOLineNumber,  \n" +
                "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			sd.qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			sd.remark releaseNotes,  \n" +
                "			sd.tentativeBuild,  \n" +
                "			sd.qty AS poQty,  \n" +
                "			sd.partID,  \n" +
                "			sd.price,  \n" +
                "			sd.lineID,  \n" +
                "			sd.partDescription,  \n" +
                "			c.mfgPN,  \n" +
                "			c.mfgPNDescription,  \n" +
                "			fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "			c.nickName,  \n" +
                "			c.pidcode,  \n" +
                "			sd.refSODetID,  \n" +
                "			sd.refSOReleaseLineID,  \n" +
                "			sd.frequency,  \n" +
                "			CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
                "			NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			c.mfgcodeID,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "			c.rohsStatusID,  \n" +
                "			sd.originalPOQty,  \n" +
                "			smp.poNumber,  \n" +
                "			fun_getCertificationByPartID(c.id)standards,  \n" +
                "			sd.frequencyType,  \n" +
                "			 (SELECT SUM(IFNULL(cpd.shipQty,0)) FROM customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
                "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0 ) shippedQty   ,  \n" +
                "			sd.remark,  \n" +
                "			sd.internalcomment  \n" +
                "		FROM salesorderdet sd  \n" +
                "		LEFT JOIN component c ON c.id=sd.partid  \n" +
                "		LEFT JOIN salesorderdet sdp ON sd.refBlanketPOID=sdp.id AND sdp.isdeleted=0  \n" +
                "	        LEFT JOIN salesordermst smp ON smp.id=sdp.refSalesOrderID AND smp.isdeleted=0  \n" +
                "		WHERE sd.refSODetID=psalesorderDetID  \n" +
                "		AND sd.isdeleted=0  \n" +
                "    ) a;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5749,'2.00','V1',' Sproc_GetPendingSalesShippingDetails - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5749:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerInvoiceDetails;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pFilterStatus LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pPoNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearchPO TINYINT,  \n" +
                "	IN pMfgCodeIds LONGTEXT ,  \n" +
                "	IN pPaymentTermsIds LONGTEXT ,  \n" +
                "	IN pPartId VARCHAR(5000) ,  \n" +
                "	IN pTransType VARCHAR(5) ,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
                "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
                "	IN pZeroAmountFilter TINYINT,  \n" +
                "	IN pCreditMemoRefundStatusFilter VARCHAR(100)      ,  \n" +
                "	IN pMarkedForRefund TINYINT  \n" +
                "	-- IN pChequeNumber  VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET v_appliedCMPDJoin = '';  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN  \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
                "	ELSE  \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount ,  \n" +
                "						NULL as totRefundIssuedAgainstCreditMemo , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"  \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,  \n" +
                "        cp.invoiceNumber,cp.invoiceDate, cp.revision,  \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
                "        cp.soNumber,cp.soDate,  \n" +
                "		cp.sorevision,  \n" +
                "        cp.refSalesOrderID,  \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,  \n" +
                "        cp.refCustInvoiceID,  \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "		 cp.status,  \n" +
                "         cp.subStatus,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
                "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
                "			ELSE '' END) AS creditAppliedStatus ,  \n" +
                "		  cp.paymentStatus,  \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
                "		  ifnull(cp.totalAmount,0) totalAmount,  \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,  \n" +
                "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,  \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,  \n" +
                "		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\", vMfgCodeFormat,\") as customerName,  \n" +
                "		 m.mfgcode as customerCode,  \n" +
                "         cp.customerID,  \n" +
                "         cp.createdBy as createdById,  \n" +
                "		\",v_receivedAmtSF,\"  \n" +
                "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,  \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,  \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,  \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,  \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,  \n" +
                "         fun_getUserNameByEmployeID(cp.salesCommissionTo) salesCommissionToName,  \n" +
                "         cp.termsDays termDays,  \n" +
                "         cp.freeOnBoardName,  \n" +
                "         cp.isLocked,  \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
                "         packingSlip.id packingSlipId,  \n" +
                "         (select group_concat(paymentNumber)  \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,  \n" +
                "		 (select COUNT(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) cpTrackNumberCount,  \n" +
                "         cp.rmaNumber , cp.systemId, cp.billingAddress , cp.shippingAddress,cp.intermediateAddress ,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
                "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,  \n" +
                "         (SELECT `paymentDate` FROM packingslip_invoice_payment_det pipd  \n" +
                "					JOIN packingslip_invoice_payment pip ON pipd.`refPayementid` = pip.id  \n" +
                "		WHERE pipd.`refCustPackingslipInvoiceID` = cp.id AND pip.refPaymentMode = 'R' AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "		AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0 ORDER BY pipd.id DESC LIMIT 1) AS lastRcvdPaymentDate ,  \n" +
                "		fun_getGenericCategoryCodeNameByID(cp.carrierID) carrierName,  \n" +
                "        cp.carrierID , cp.carrierAccountNumber  \n" +
                "	 FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID  \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
                "		\" , v_appliedCMPDJoin ,\"  \n" +
                "	WHERE  cp.isDeleted=0  \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.termsId in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPartId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN  \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');  \n" +
                "	# END IF;  \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) END) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) END) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
                "		IF pIsExactSearchPO = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
                "                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
                "                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
                "	IF pFromDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pToDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- filter zero amount invoice  \n" +
                "	IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefund = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "		 round((c.totalAmount),2) totalAmount,  \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,  \n" +
                "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0) + IFNULL(c.totRefundIssuedAgainstCreditMemo,0) ),2)  \n" +
                "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,  \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
                "						else '' end) materialStatus from ( \",  \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	--  select @SQLStatement2	;  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5750,'2.00','V1','Sproc_RetrieveCustomerInvoiceDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5750:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_customer_packingslip;  \n" +
                "CREATE TRIGGER `Trg_AU_customer_packingslip` AFTER UPDATE ON `customer_packingslip` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTransTypeText VARCHAR(20);  \n" +
                "	SET vTransTypeText= IF(NEW.transType='I','Invoice','Credit Memo');  \n" +
                "  \n" +
                "    IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO#',CAST(OLD.soNumber AS CHAR),  \n" +
                "       CAST(NEW.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO#',CAST(OLD.poNumber AS CHAR),  \n" +
                "       CAST(NEW.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO Date',CAST(DATE_FORMAT(OLD.poDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.poDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Date', CAST(DATE_FORMAT(OLD.soDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.soDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Contact Person',(SELECT CONCAT(firstName,' ',lastName) FROM contactperson WHERE personId=OLD.contactPersonId),  \n" +
                "      (SELECT CONCAT(firstName,' ',lastName) FROM contactperson WHERE personId=NEW.contactPersonId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipComment,0) != IFNULL(NEW.packingSlipComment,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Shipping Comments', OLD.packingSlipComment,  \n" +
                "       NEW.packingSlipComment, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.substatus ,0) != IFNULL(NEW.substatus ,0) THEN  \n" +
                "	IF(NEW.transType='P')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft'WHEN OLD.substatus=2 THEN 'Ready To Ship'WHEN OLD.substatus=3 THEN 'Waiting For Shipping Label'WHEN OLD.substatus=4 THEN 'Waiting For Pickup' WHEN OLD.substatus= 6 THEN 'Published' WHEN OLD.substatus= 5 THEN 'Shipped'  ELSE '' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Draft'WHEN NEW.substatus=2 THEN 'Ready To Ship'WHEN NEW.substatus=3 THEN 'Waiting For Shipping Label'WHEN NEW.substatus=4 THEN 'Waiting For Pickup' ELSE 'Shipped' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	ELSEIF (NEW.transType='I')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Shipped - Not Invoiced' WHEN OLD.substatus=2 THEN 'Invoiced' WHEN Old.subStatus=3 THEN 'Corrected and Invoiced'  WHEN Old.subStatus=4 THEN 'Draft' WHEN Old.subStatus=5 THEN 'Published' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Shipped - Not Invoiced' WHEN NEW.substatus=2 THEN 'Invoiced' WHEN NEW.subStatus=3 THEN 'Corrected and Invoiced'  WHEN NEW.subStatus=4 THEN 'Draft' WHEN NEW.subStatus=5 THEN 'Published' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	ELSEIF (NEW.transType='C')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft' WHEN OLD.substatus=2 THEN 'Published' ELSE '' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Draft' WHEN NEW.substatus=2 THEN 'Published' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippingMethodId ,0) != IFNULL(NEW.shippingMethodId ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Shipping Method', fun_getGenericCategoryNameByID(OLD.shippingMethodId),  \n" +
                "       fun_getGenericCategoryNameByID(NEW.shippingMethodId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.sorevision ,0) != IFNULL(NEW.sorevision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Version', CAST(OLD.sorevision AS CHAR),  \n" +
                "       CAST(NEW.sorevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.freeOnBoardId ,0) != IFNULL(NEW.freeOnBoardId ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'FOB',(SELECT `name` FROM freeonboardmst WHERE id=OLD.freeOnBoardId) ,  \n" +
                "     (SELECT `name` FROM freeonboardmst WHERE id=NEW.freeOnBoardId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.invoiceNumber ,0) != IFNULL(NEW.invoiceNumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice#',CAST(OLD.invoiceNumber AS CHAR) ,  \n" +
                "     CAST(NEW.invoiceNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.invoiceDate ,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice Date',CAST(DATE_FORMAT(OLD.invoiceDate, '%m/%d/%y') AS CHAR) ,  \n" +
                "     CAST(DATE_FORMAT(NEW.invoiceDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.headerComment ,0) != IFNULL(NEW.headerComment,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Internal Notes',CAST(OLD.headerComment AS CHAR),  \n" +
                "     CAST(NEW.headerComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip Date',CAST(DATE_FORMAT(OLD.packingSlipDate, '%m/%d/%y') AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.packingSlipDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip#',CAST(OLD.packingSlipNumber AS CHAR),  \n" +
                "		CAST(NEW.packingSlipNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Terms',  \n" +
                "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
                "			FROM genericcategory  WHERE gencCategoryID = OLD.termsID) ,  \n" +
                "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
                "			FROM genericcategory  WHERE gencCategoryID = NEW.termsID) ,  \n" +
                "	fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Sales Commission To',  \n" +
                "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = OLD.salesCommissionTo),  \n" +
                "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = NEW.salesCommissionTo),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.totalAmount ,0) != IFNULL(NEW.totalAmount ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Total Amount ($)',  \n" +
                "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(OLD.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(OLD.totalAmount,2) AS CHAR) END,  \n" +
                "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(NEW.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(NEW.totalAmount,2) AS CHAR) END,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isLocked,0) != IFNULL(NEW.isLocked,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Locked',(CASE WHEN OLD.isLocked=0 THEN 'No' WHEN OLD.isLocked=1 THEN 'Yes' ELSE '' END),  \n" +
                "      (CASE WHEN NEW.isLocked=0 THEN 'No' WHEN NEW.isLocked=1 THEN 'Yes' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedAt ,0) != IFNULL(NEW.lockedAt ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked Date' ELSE 'Locked Date' END),'',  \n" +
                "		(CASE WHEN OLD.isLocked = 1 THEN fun_DatetimetoUTCDateTime() ELSE NEW.lockedAt END),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName(\"CUSTOMER_PACKINGSLIP\",'lockedAt'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedBy ,0) != IFNULL(NEW.lockedBy ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked By' ELSE 'Locked By' END),'',  \n" +
                "		(CASE WHEN OLD.isLocked = 1 THEN fun_getUserNameByID(NEW.updatedBy) ELSE fun_getUserNameByID(NEW.lockedBy) END) ,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "   IF IFNULL(OLD.billingAddress ,0) != IFNULL(NEW.billingAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Bill To',CAST(OLD.billingAddress AS CHAR),  \n" +
                "		CAST(NEW.billingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippingAddress ,0) != IFNULL(NEW.shippingAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ship To',CAST(OLD.shippingAddress AS CHAR),  \n" +
                "		CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.intermediateAddress ,0) != IFNULL(NEW.intermediateAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Mark For',CAST(OLD.intermediateAddress AS CHAR) ,  \n" +
                "		CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.creditMemoNumber ,0) != IFNULL(NEW.creditMemoNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Number',CAST(OLD.creditMemoNumber AS CHAR),  \n" +
                "		CAST(NEW.creditMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Date',CAST(DATE_FORMAT(OLD.creditMemoDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.creditMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refDebitMemoNumber ,0) != IFNULL(NEW.refDebitMemoNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo#',CAST(OLD.refDebitMemoNumber AS CHAR) ,  \n" +
                "		CAST(NEW.refDebitMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refDebitMemoDate,0) != IFNULL(NEW.refDebitMemoDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo Date',CAST(DATE_FORMAT(OLD.refDebitMemoDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.refDebitMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaNumber ,0) != IFNULL(NEW.rmaNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'RMA#',CAST(OLD.rmaNumber AS CHAR) ,  \n" +
                "		CAST(NEW.rmaNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "   IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Revision',OLD.revision  ,  \n" +
                "		NEW.revision , fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),CONCAT('Confirming Zero Value',vTransTypeText),(CASE WHEN OLD.isZeroValue =0 THEN 'False' ELSE 'True' END),  \n" +
                "	   (CASE WHEN NEW.isZeroValue =0 THEN 'False' ELSE 'True' END),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.poRevision,0) != IFNULL(NEW.poRevision,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'PO Revision',OLD.poRevision,NEW.poRevision,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isMarkForRefund,0) != IFNULL(NEW.isMarkForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Mark For Refund',OLD.isMarkForRefund,NEW.isMarkForRefund,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.agreedRefundAmt,0) != IFNULL(NEW.agreedRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Agreed Refund Amt',OLD.agreedRefundAmt,NEW.agreedRefundAmt,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "   END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5751,'2.00','V1',' Trg_AU_customer_packingslip - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5751:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerInvoiceDetailsPerLine;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetailsPerLine`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pFilterStatus LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pPoNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearchPO TINYINT,  \n" +
                "	IN pMfgCodeIds LONGTEXT ,  \n" +
                "	IN pPaymentTermsIds LONGTEXT ,  \n" +
                "	IN pPartId VARCHAR(5000) ,  \n" +
                "	IN pTransType VARCHAR(5) ,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
                "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
                "	IN pZeroAmountFilter TINYINT,  \n" +
                "	IN pCreditMemoRefundStatusFilter VARCHAR(100),  \n" +
                "    IN pMarkedForRefund TINYINT,  \n" +
                "    IN pWithCommissionLine TINYINT,  \n" +
                "    IN pWithOtherChargesLine TINYINT,  \n" +
                "    IN pZeroAmountLineFilter TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET v_appliedCMPDJoin = '';  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN  \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
                "	ELSE  \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine = CONCAT(\"  \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
                "        cp.packingSlipNumber,  \n" +
                "        cp.packingslipDate,  \n" +
                "        cp.invoiceNumber,  \n" +
                "        cp.invoiceDate,  \n" +
                "        cp.revision,  \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
                "        cp.soNumber,cp.soDate,  \n" +
                "		cp.sorevision,  \n" +
                "        cp.refSalesOrderID,  \n" +
                "        cpd.shippingNotes , cpd.internalComment,  \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "		 cp.status, cp.subStatus,  \n" +
                "         (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
                "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
                "			ELSE '' END) AS creditAppliedStatus ,  \n" +
                "		  cp.paymentStatus,  \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\",vMfgCodeFormat,\") as customerName,  \n" +
                "		 m.mfgcode as customerCode,  \n" +
                "         cp.customerID,  \n" +
                "         cpd.createdBy as createdById,  \n" +
                "		\",v_receivedAmtSF,\"  \n" +
                "		 fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "		 fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "		 fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "		 fun_getRoleByID(cpd.updateByRoleId) updatedbyRole,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
                "         cp.freeOnBoardName,  \n" +
                "         cp.isLocked,  \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
                "         packingSlip.id packingSlipId,  \n" +
                "         (select group_concat(paymentNumber)  \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
                "         cp.rmaNumber , cp.systemId,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
                "         cpd.isZeroValue,  fun_getIntToText(cpd.isZeroValue) isZeroValueConverted,  \n" +
                "         cp.termsDays termDays,  \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId) paymentDueDate,  \n" +
                "         cpd.id detID,  \n" +
                "         cpd.partId,  \n" +
                "         co.mfgpn,  \n" +
                "         cpd.assyDescription ,  \n" +
                "         co.PIDCode,  \n" +
                "         co.RoHSStatusID,  \n" +
                "         co.mfgcodeID,  \n" +
                "         co.nickname,  \n" +
                "         cpd.lineID,  \n" +
                "         cpd.reflineID,  \n" +
                "         cpd.custPOLineID,  \n" +
                "         cpd.shipQty,  \n" +
                "         cpd.unitPrice,  \n" +
                "         cpd.componentStockType,  \n" +
                "         cpd.extendedPrice,  \n" +
                "         othercharges AS lineOtherCharges,  \n" +
                "         (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,  \n" +
                "		 cpd.quoteNumber,  \n" +
                "		 cpd.quoteFrom,  \n" +
                "         (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,  \n" +
                "		 (case when cpd.quoteFrom = 2 then cpd.refAssyQtyTurnTimeID  \n" +
                "			  when cpd.quoteFrom = 1 then cpd.refRFQQtyTurnTimeID  \n" +
                "              else null end) qtyTurnTimeID,  \n" +
                "		 cpd.assyQtyTurnTimeText,  \n" +
                "		 cpd.refRFQGroupID,  \n" +
                "         rohs.rohsIcon,  \n" +
                "         rohs.name rohsName,  \n" +
                "         fun_GetFormattedMfgCode(partMfr.mfgcode,partMfr.mfgname,\",vMfgCodeFormat,\") as mfrName,  \n" +
                "         (select count(1) from customer_packingslip_commission_attribute_mstdet cpcomm where cpcomm.refCustPackingSlipDetID = cpd.id and cpcomm.isDeleted = 0 ) as commissionCnt,  \n" +
                "         (select count(1) from customer_packingslip_otherexpense_details cpOther where cpOther.refCustomerPackingSlipDetID = cpd.id and cpOther.isDeleted = 0 ) as lineOtherChargesCnt,  \n" +
                "         cp.totalAmount,  \n" +
                "         cp.refCustInvoiceID,  \n" +
                "         co.partType,  \n" +
                "         co.isCustom, co.custAssyPN customPartNumber ,  \n" +
                "         cpd.releaseNotes  \n" +
                "	 FROM customer_packingslip cp  \n" +
                "	JOIN mfgcodemst m on m.id = cp.customerID and m.isDeleted = 0  \n" +
                "	JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID = cp.id and cpd.isDeleted = 0  \n" +
                "	JOIN component co on co.id = cpd.partId  and co.isDeleted = 0  \n" +
                "	LEFT JOIN mfgcodemst partMfr on partMfr.id = co.mfgcodeID and partMfr.isDeleted = 0  \n" +
                "	LEFT JOIN rfq_rohsmst rohs ON rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "	LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
                "		\" , v_appliedCMPDJoin ,\"  \n" +
                "	WHERE  cp.isDeleted=0  \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
                "        ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
                "        END IF;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND cp.termsId in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pPartId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND cpd.partId in (', pPartId , ')');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
                "		IF pIsExactSearchPO = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
                "                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
                "                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
                "  IF pFromDate IS NOT NULL THEN  \n" +
                "        IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "        ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pToDate IS NOT NULL THEN  \n" +
                "        IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "        ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "     IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- filter zero amount invoice  \n" +
                "	IF pZeroAmountLineFilter IS NOT NULL AND pZeroAmountLineFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalExtPrice = 0');  \n" +
                "	END IF;  \n" +
                "    IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pWithCommissionLine = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.commissionCnt > 0');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pWithOtherChargesLine = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.lineOtherChargesCnt > 0');  \n" +
                "    END IF;  \n" +
                "   IF pMarkedForRefund = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
                "    END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
                "						else '' end) materialStatus from ( \",  \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5752,'2.00','V1','Sproc_RetrieveCustomerInvoiceDetailsPerLine  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5752:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDeatils;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname,\", vMfgCodeFormat,\") customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "			mfgmst.mfgCode custCode,  \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "            case when sm.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
                "            sm.isBlanketPO,  \n" +
                "cd.id AS customerslipId,  \n" +
                "case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "  fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "   concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "     (CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         fun_getUserNameByID(cd.updatedBy) updatedby,  \n" +
                "         fun_getUserNameByID(cd.createdBy) createdby,  \n" +
                "         fun_getRoleByID(cd.createByRoleId) createdbyRole,  \n" +
                "         fun_getRoleByID(cd.updateByRoleId) updatedbyRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdAt,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS lockedAt,  \n" +
                "         cpTrack.cpTrackNumber,  \n" +
                "         ifnull(cpTrack.cpTrackNumberCount,0) cpTrackNumberCount,  \n" +
                "         (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "                        cd.revision ,  \n" +
                "           ifnull(packingdtl.packingSlipCnt,0)  packingSlipCnt,  \n" +
                "           sm.rmaNumber,sm.isRmaPO,  \n" +
                "           (CASE when sm.isRmaPO = 1 then 'YES' when sm.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "           (CASE when sm.isRmaPO = 1 then 'Yes' when sm.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp,  \n" +
                "           fun_getGenericCategoryCodeNameByID(cd.carrierID)  carrierName,  \n" +
                "           cd.carrierID , cd.carrierAccountNumber  \n" +
                "		FROM customer_packingslip cd  \n" +
                "        LEFT JOIN mfgcodemst mfgmst ON mfgmst.id = cd.customerId and mfgmst.isDeleted = 0  \n" +
                "		LEFT JOIN salesordermst sm on sm.id=cd.refSalesOrderID and sm.isdeleted=0  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0  \n" +
                "		LEFT JOIN (  \n" +
                "		SELECT COUNT(cpTrack.trackNumber) cpTrackNumberCount,GROUP_CONCAT(cpTrack.trackNumber SEPARATOR ', ') cpTrackNumber,cpTrack.refCustPackingSlipID FROM customer_packing_slip_track_number cpTrack WHERE  cpTrack.isDeleted = 0 GROUP BY cpTrack.refCustPackingSlipID  \n" +
                "		) cpTrack on cpTrack.refCustPackingSlipID=cd.id  \n" +
                "		left join ( select count(1) packingSlipCnt,packingdtl.refCustPackingSlipID from customer_packingslip_det packingdtl where packingdtl.isDeleted = 0 GRoup by packingdtl.refCustPackingSlipID  \n" +
                "		) packingdtl on packingdtl.refCustPackingSlipID=cd.id  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "	 IF (pfilterStatus = 0) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    ELSE  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  \n" +
                "   IF pmfgPartID IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails= CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' AND cd.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pmfgPartID , ')) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "		padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,'''  or cd.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "        SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "		padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%''  or cd.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "  SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5753,'2.00','V1',' Sproc_RetrieveCustomerPackingSlipDeatils - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5753:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_SaveCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerInvoiceDetail`(  \n" +
                "	IN pTransType VARCHAR(5),  \n" +
                "	IN pInvoiceType VARCHAR(1),  \n" +
                "	IN pInvoiceID INT,  \n" +
                "	IN pInvData JSON,  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "	IN puserID INT,  \n" +
                "	IN puserRoleID INT ,  \n" +
                "	IN pCustomerInvoiceSystemIDTypeConst VARCHAR(50),  \n" +
                "	IN pSystemId VARCHAR(20)  ,  \n" +
                "	IN pPackingSlipType INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_maxCurrSystemIDForInv VARCHAR(20) ;  \n" +
                "	DECLARE v_prefix VARCHAR(20);  \n" +
                "	DECLARE vTermsDays INT ;  \n" +
                "	DECLARE v_incrementI INT;  \n" +
                "	DECLARE v_commissionPercentage DECIMAL(10,2);  \n" +
                "	DECLARE vTotRefundIssuedOfCreditMemo DECIMAL(18,8);  \n" +
                "	DECLARE vIsAgreedRefundLessThanTotIssued TINYINT;  \n" +
                "  \n" +
                "  \n" +
                "	SET vIsAgreedRefundLessThanTotIssued = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customerInvoice;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customerInvoice AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "			pInvData,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",  \n" +
                "				`invoiceID` INT PATH \"$.invoiceID\",  \n" +
                "				`packingSlipID` INT PATH \"$.packingSlipID\",  \n" +
                "				`packingSlipType` INT PATH \"$.packingSlipType\",  \n" +
                "				`customerID` INT PATH \"$.customerID\" ,  \n" +
                "				`status` INT PATH \"$.status\",  \n" +
                "				`subStatus` INT PATH \"$.subStatus\",  \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",  \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",  \n" +
                "				`poDate` DATE PATH \"$.poDate\",  \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",  \n" +
                "				`soDate` DATE PATH \"$.soDate\",  \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,  \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,  \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,  \n" +
                "				`invoiceNumber` VARCHAR(50) PATH \"$.invoiceNumber\" ,  \n" +
                "				`invoiceDate` DATE PATH \"$.invoiceDate\" ,  \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",  \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,  \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,  \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,  \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,  \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,  \n" +
                "				`billToId` INT PATH \"$.billToId\" ,  \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,  \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,  \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,  \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,  \n" +
                "				`termsId` INT PATH \"$.termsId\" ,  \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,  \n" +
                "				`creditMemoNumber` VARCHAR(50) PATH \"$.creditMemoNumber\" ,  \n" +
                "				`creditMemoDate` DATE PATH \"$.creditMemoDate\" ,  \n" +
                "				`refDebitMemoNumber` VARCHAR(50) PATH \"$.refDebitMemoNumber\" ,  \n" +
                "				`refDebitMemoDate` DATE PATH \"$.refDebitMemoDate\",  \n" +
                "				`rmaNumber`  VARCHAR(50) PATH \"$.rmaNumber\" ,  \n" +
                "				`contactPersonId` INT PATH \"$.contactPersonId\",  \n" +
                "				`revision` VARCHAR(10) PATH \"$.revision\",  \n" +
                "				`isZeroValue` TINYINT PATH \"$.isZeroValue\",  \n" +
                "				`isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\",  \n" +
                "				`poRevision` VARCHAR(50) PATH \"$.poRevision\" ,  \n" +
                "				`isMarkForRefund` TINYINT PATH \"$.isMarkForRefund\",  \n" +
                "				`agreedRefundAmt` DECIMAL(18,8) PATH \"$.agreedRefundAmt\",  \n" +
                "				`isAskForVersionConfirmation` TINYINT PATH \"$.isAskForVersionConfirmation\",  \n" +
                "				`refundStatus` VARCHAR(5) PATH \"$.refundStatus\" ,  \n" +
                "				`carrierID` INT PATH \"$.carrierID\",  \n" +
                "				`carrierAccountNumber` VARCHAR(50) PATH \"$.carrierAccountNumber\"  \n" +
                "			)  \n" +
                "		) AS CustInv_JT;  \n" +
                "  \n" +
                "  \n" +
                "	SELECT  termsDays INTO 	vTermsDays  \n" +
                "	FROM genericCategory gc  \n" +
                "	WHERE gc.gencCategoryID IN (SELECT temp.termsId FROM temp_customerInvoice temp)  \n" +
                "	AND categoryType = 'Payment Terms';  \n" +
                "  \n" +
                "	IF (pInvoiceID IS NULL)THEN  \n" +
                "			/* get max identity value of 'CustomerInvoiceSystemID' for systemID */  \n" +
                "			/* SELECT `maxValue`,prefix INTO v_maxCurrSystemIDForInv,v_prefix  \n" +
                "			FROM `identity`  \n" +
                "			WHERE `type` = pCustomerInvoiceSystemIDTypeConst ; */  \n" +
                "  \n" +
                "			INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "				packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,  \n" +
                "				packingSlipComment,headerComment,sorevision,  \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,  \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,  \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus, paymentStatus ,  \n" +
                "				totalAmount,termsDays, freeOnBoardName, creditMemoNumber,creditMemoDate ,  \n" +
                "				refDebitMemoNumber,refDebitMemoDate, rmaNumber , billToId,shipToId ,intermediateShipmentId,  \n" +
                "				contactPersonId, revision, isZeroValue ,isAlreadyPublished, poRevision,isAskForVersionConfirmation,  \n" +
                "				refundStatus,carrierID,carrierAccountNumber)  \n" +
                "			SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "					packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,  \n" +
                "					packingSlipComment,headerComment,sorevision,  \n" +
                "					freeOnBoardId,puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,  \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,  \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus , 'PE' ,  \n" +
                "					IFNULL(totalAmount,0),vTermsDays ,   fun_getFOBById(freeOnBoardId) ,creditMemoNumber,creditMemoDate ,  \n" +
                "					refDebitMemoNumber,refDebitMemoDate , rmaNumber  , billToId,shipToId ,intermediateShipmentId ,  \n" +
                "					contactPersonId,  LPAD(IFNULL(revision,0),2,'0'), IFNULL(isZeroValue,0), isAlreadyPublished, poRevision ,0,  \n" +
                "					refundStatus,carrierID,carrierAccountNumber  \n" +
                "			FROM temp_customerInvoice ;  \n" +
                "  \n" +
                "		 SET pInvoiceID=LAST_INSERT_ID();  \n" +
                "  \n" +
                "		 UPDATE customer_packingslip  \n" +
                "		 SET refCustInvoiceID=LAST_INSERT_ID(),packingSlipStatus='A'  \n" +
                "		 WHERE id= pPackingSlipID;  \n" +
                "  \n" +
                "	 IF pPackingSlipID IS NOT NULL THEN  \n" +
                "			-- FOR PO/SO flow quote related data not store in packing slip. retrieve it from sales order  \n" +
                "			 INSERT INTO customer_packingslip_det(refCustPackingSlipID,refSalesorderDetid,partId,custPOLineID,  \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  extendedPrice,  \n" +
                "					shippingNotes,whID,binID,createdBy,updatedBy,createdAt, updatedAt,  \n" +
                "					createByRoleId,updateByRoleId,shippingId,reflineID,otherCharges,  \n" +
                "					assyDescription,lineID, internalComment, quoteNumber,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,  \n" +
                "		    refRFQGroupID,refRFQQtyTurnTimeID, isZeroValue,releaseNotes)  \n" +
                "			  SELECT LAST_INSERT_ID(),cpd.refSalesorderDetid,cpd.partId,cpd.custPOLineID,  \n" +
                "					cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,  \n" +
                "		    IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice),  \n" +
                "		    (cpd.shipQty * (IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice))),  \n" +
                "					cpd.shippingNotes,cpd.whID,cpd.binID,  \n" +
                "		    puserID,puserID,  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),  \n" +
                "					puserRoleID,puserRoleID,  \n" +
                "		    cpd.shippingId,cpd.reflineID,cpd.otherCharges,  \n" +
                "					cpd.assyDescription, cpd.lineID, cpd.internalComment ,  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.quoteNumber,cpd.quoteNumber),  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.quoteFrom,cpd.quoteFrom),  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID,cpd.refAssyQtyTurnTimeID),  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText),  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.refRFQGroupID,cpd.refRFQGroupID),  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) ,  \n" +
                "		    cpd.isZeroValue, cpd.releaseNotes  \n" +
                "			FROM customer_packingslip_det   cpd  \n" +
                "	    LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0  \n" +
                "	    LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0  \n" +
                "			WHERE cpd.refCustPackingSlipID= pPackingSlipID  \n" +
                "			AND cpd.isDeleted = 0;  \n" +
                "  \n" +
                "	    IF pPackingSlipType = 2 THEN -- PO/SO INV  \n" +
                "	    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,  \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,  \n" +
                "							quoted_commissionValue, poQty, partId, refComponentSalesPriceBreakID,  \n" +
                "							quoted_unitPrice, quotedQty,commissionCalculateFrom,`type`, isDeleted,createdBy,createdAt,createByRoleId,salesCommissionNotes)  \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,	sca.unitPrice,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.quoted_commissionPercentage,  \n" +
                "							sca.quoted_commissionValue, cpd.shipQty, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.quoted_unitPrice,sca.quotedQty,sca.commissionCalculateFrom,sca.type, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,salesCommissionNotes  \n" +
                "					FROM salesorderdet_commission_attribute_mstdet sca  \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;  \n" +
                "					-- child records  \n" +
                "				INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,  \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,  \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,  \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)  \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,(SELECT id FROM customer_packingslip_commission_attribute_mstdet WHERE refCustPackingSlipDetID=cpd.id AND `type`=2 AND isdeleted=0 LIMIT 1),sca.unitPrice, sca.refQuoteAttributeId,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,  \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.org_unitPrice, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID  \n" +
                "					FROM salesorderdet_commission_attribute sca  \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;  \n" +
                "  \n" +
                "	     ELSEIF pPackingSlipType = 1 THEN -- MISC packing slip INV  \n" +
                "					-- SP to generate line wise sales commission.  \n" +
                "		    CALL Sproc_GetSalesCommissionDetailsForMultiplePart(pInvoiceID);  \n" +
                "		-- Sales Price details for Part master  \n" +
                "		    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,  \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,  \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,  \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)  \n" +
                "					SELECT sca.refCustPackingSlipDetID,	sca.unitPrice,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,  \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID  \n" +
                "					FROM temp_salesCommission sca  \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=1;  \n" +
                "  \n" +
                "  \n" +
                "					-- save sales commission details for RFQ  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_salescommission_mst;  \n" +
                "			     CREATE TEMPORARY TABLE IF NOT EXISTS temp_salescommission_mst AS  \n" +
                "			       SELECT   sca.refCustPackingSlipDetID FROM temp_salesCommission sca  \n" +
                "			       JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=2 GROUP BY sca.refCustPackingSlipDetID;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO @mstCommissionCount FROM  temp_salescommission_mst;  \n" +
                "			SET v_incrementI=0;  \n" +
                "			temp_commission_Det: WHILE v_incrementI < @mstCommissionCount DO  \n" +
                "				SELECT refCustPackingSlipDetID INTO @refCustPackingSlipDetID FROM temp_salescommission_mst LIMIT v_incrementI,1;  \n" +
                "  \n" +
                "				SELECT unitPrice INTO @totalUnitPrice FROM customer_packingslip_det WHERE id=@refCustPackingSlipDetID;  \n" +
                "  \n" +
                "				SELECT SUM(commissionValue) INTO @totalCommissionValue FROM  \n" +
                "				temp_salesCommission WHERE refCustPackingSlipDetID=@refCustPackingSlipDetID;  \n" +
                "  \n" +
                "				IF(@totalCommissionValue>(@totalUnitPrice/2))THEN  \n" +
                "					SET @totalCommissionValue=(@totalUnitPrice/2);  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET v_commissionPercentage=((@totalUnitPrice - (@totalUnitPrice - @totalCommissionValue)) *100/ (@totalUnitPrice - @totalCommissionValue));  \n" +
                "  \n" +
                "				INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,  \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,  \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,  \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId,rfqAssyID)  \n" +
                "					SELECT sca.refCustPackingSlipDetID,	@totalUnitPrice,  \n" +
                "							v_commissionPercentage, @totalCommissionValue, v_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,  \n" +
                "							@totalCommissionValue, 'All', sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							@totalUnitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,sca.rfqAssyID  \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID LIMIT 1;  \n" +
                "					-- sales commission child details  \n" +
                "					SELECT LAST_INSERT_ID() INTO @lstID;  \n" +
                "					INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,  \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,  \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,  \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)  \n" +
                "					SELECT sca.refCustPackingSlipDetID,@lstID,sca.unitPrice, sca.refQuoteAttributeId,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,  \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID  \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID;  \n" +
                "  \n" +
                "					SET v_incrementI=v_incrementI+1;  \n" +
                "  \n" +
                "			END WHILE temp_commission_Det;  \n" +
                "	     END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "  \n" +
                "  \n" +
                "		IF pInvoiceType = 'I' AND pTransType = 'I' THEN  \n" +
                "			UPDATE customer_packingslip cp  \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id  \n" +
                "			SET cp.invoiceDate= tci.invoiceDate,  \n" +
                "				cp.`status`= tci.status,  \n" +
                "				cp.subStatus = tci.subStatus,  \n" +
                "				cp.headerComment= tci.headerComment,  \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,  \n" +
                "				cp.totalAmount = IFNULL(tci.totalAmount,0) ,  \n" +
                "				cp.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				cp.updatedBy = puserID,  \n" +
                "				cp.updateByRoleId = puserRoleID  ,  \n" +
                "				cp.billingAddress= tci.billingAddress,  \n" +
                "				cp.shippingAddress= tci.shippingAddress,  \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,  \n" +
                "				cp.contactPersonId = tci.contactPersonId,  \n" +
                "				cp.billToId = tci.billToId,  \n" +
                "				cp.shipToId  = tci.shipToId,  \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId,  \n" +
                "				cp.revision = LPAD(tci.revision,2,'0'),  \n" +
                "				cp.isZeroValue = IFNULL(tci.isZeroValue,0)  ,  \n" +
                "				cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),  \n" +
                "				cp.poRevision = tci.poRevision ,  \n" +
                "				cp.isAskForVersionConfirmation = tci.isAskForVersionConfirmation,  \n" +
                "				cp.carrierID = tci.carrierID,  \n" +
                "				cp.carrierAccountNumber = tci.carrierAccountNumber  \n" +
                "			WHERE cp.id=pInvoiceID  \n" +
                "			AND cp.transType = pTransType;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "  \n" +
                "			IF (pTransType = 'C') THEN  \n" +
                "				/* get total refunded amount till now  */  \n" +
                "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedOfCreditMemo  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refRefundCustCreditMemoID = pInvoiceID  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "				;  \n" +
                "  \n" +
                "				/* check agreed refund amount is less than total refunded amount , if yes then give error  */  \n" +
                "				IF (IFNULL((SELECT agreedRefundAmt FROM temp_customerInvoice),0) < vTotRefundIssuedOfCreditMemo) THEN  \n" +
                "					SET vIsAgreedRefundLessThanTotIssued = 1;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF (vIsAgreedRefundLessThanTotIssued = 0) THEN  \n" +
                "				# in case of tariff invoice & credit memo update all other field  \n" +
                "				UPDATE customer_packingslip  cp  \n" +
                "					JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id  \n" +
                "				SET	cp.status= tci.status,  \n" +
                "					cp.subStatus= tci.subStatus,  \n" +
                "					cp.poNumber= tci.poNumber,  \n" +
                "					cp.poDate= tci.poDate,  \n" +
                "					cp.soNumber= tci.soNumber,  \n" +
                "					cp.soDate= tci.soDate,  \n" +
                "					cp.packingSlipNumber= tci.packingSlipNumber,  \n" +
                "					cp.packingSlipDate= tci.packingSlipDate,  \n" +
                "					cp.invoiceDate= tci.invoiceDate,  \n" +
                "					cp.shippingMethodID= tci.shippingMethodID,  \n" +
                "					cp.headerComment= tci.headerComment,  \n" +
                "					cp.packingSlipComment= tci.packingSlipComment,  \n" +
                "					cp.billingAddress= tci.billingAddress,  \n" +
                "					cp.shippingAddress= tci.shippingAddress,  \n" +
                "					cp.intermediateAddress= tci.intermediateAddress,  \n" +
                "					cp.totalAmount= IFNULL(tci.totalAmount,0),  \n" +
                "					cp.freeOnBoardId= tci.freeOnBoardId,  \n" +
                "					cp.termsId= tci.termsId,  \n" +
                "					cp.termsDays = vTermsDays,  \n" +
                "					cp.salesCommissionTo= tci.salesCommissionTo ,  \n" +
                "					cp.refDebitMemoNumber = tci.refDebitMemoNumber,  \n" +
                "					cp.refDebitMemoDate = tci.refDebitMemoDate,  \n" +
                "					cp.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "					cp.updatedBy = puserID,  \n" +
                "					cp.updateByRoleId = puserRoleID,  \n" +
                "					cp.rmaNumber= tci.rmaNumber,  \n" +
                "					cp.billToId = tci.billToId,  \n" +
                "					cp.shipToId  = tci.shipToId,  \n" +
                "					cp.intermediateShipmentId = tci.intermediateShipmentId ,  \n" +
                "					cp.invoiceNumber = tci.invoiceNumber ,  \n" +
                "					cp.contactPersonId = tci.contactPersonId,  \n" +
                "					cp.revision =  LPAD(tci.revision,2,'0'),  \n" +
                "					cp.isZeroValue = IFNULL(tci.isZeroValue,0),  \n" +
                "					cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),  \n" +
                "					cp.poRevision = tci.poRevision ,  \n" +
                "					cp.isMarkForRefund = tci.isMarkForRefund,  \n" +
                "					cp.agreedRefundAmt = IFNULL(tci.agreedRefundAmt,0),  \n" +
                "					cp.isAskForVersionConfirmation = tci.isAskForVersionConfirmation,  \n" +
                "					cp.refundStatus = (CASE WHEN pTransType = 'C' THEN  \n" +
                "								(CASE WHEN tci.isMarkForRefund = 1 THEN  \n" +
                "									(CASE WHEN vTotRefundIssuedOfCreditMemo = 0 THEN 'PE'  \n" +
                "										WHEN vTotRefundIssuedOfCreditMemo < ABS(IFNULL(tci.totalAmount,0)) THEN 'PR'  \n" +
                "										WHEN vTotRefundIssuedOfCreditMemo = ABS(IFNULL(tci.totalAmount,0)) THEN 'FR'  \n" +
                "									   END)  \n" +
                "								ELSE 'NA' END)  \n" +
                "							ELSE NULL END)  ,  \n" +
                "					cp.carrierID = tci.carrierID,  \n" +
                "					cp.carrierAccountNumber = tci.carrierAccountNumber  \n" +
                "				 WHERE cp.id = pInvoiceID  \n" +
                "				 AND cp.transType = pTransType;  \n" +
                "  \n" +
                "			 END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "  \n" +
                "	  /* Resp[0] - created invoice/credit memo mst ID  */  \n" +
                "	  SELECT pInvoiceID invoiceID;  \n" +
                "	/* Resp[1] - detail Id  */  \n" +
                "	SELECT id  detId ,refSalesorderDetId , reflineID  \n" +
                "	FROM customer_packingslip_det  \n" +
                "	WHERE  refCustPackingSlipID = pInvoiceID  \n" +
                "	AND isDeleted = 0;  \n" +
                "  \n" +
                "	/* Resp[2] - store procedure status  */  \n" +
                "	  IF (vIsAgreedRefundLessThanTotIssued > 0) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	  ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "	  /* Resp[3] -  Agreed Refund Amount Less Than Total Issued Amout */  \n" +
                "	IF (vIsAgreedRefundLessThanTotIssued > 0) THEN  \n" +
                "		SELECT 1 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfCreditMemo AS totRefundIssuedAgainstCreditMemo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfCreditMemo AS totRefundIssuedAgainstCreditMemo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	  DROP TEMPORARY TABLE IF EXISTS temp_part_data ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5754,'2.00','V1','Sproc_SaveCustomerInvoiceDetail  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5754:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_customer_packingslip_det;  \n" +
                "CREATE TRIGGER `Trg_AU_customer_packingslip_det` AFTER UPDATE ON `customer_packingslip_det` FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	DECLARE v_trasType VARCHAR(5);  \n" +
                "  DECLARE vNewQuoteFrom VARCHAR(30);  \n" +
                "    DECLARE vOldQuoteFrom VARCHAR(30);  \n" +
                "  DECLARE vBPOQty INT;  \n" +
                "	DECLARE vBPOTotalQty INT;  \n" +
                "  \n" +
                "	SELECT transType INTO v_trasType  \n" +
                "	FROM customer_packingslip  \n" +
                "	WHERE isDeleted = 0 AND id = NEW.refCustPackingSlipID ;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.custPOLineID,0) != IFNULL(NEW.custPOLineID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Cust PO Line#',CAST(OLD.custPOLineID AS CHAR),  \n" +
                "       CAST(new.custPOLineID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poQty,0) != IFNULL(NEW.poQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Original PO Line Order Qty',CAST(OLD.poQty AS CHAR),  \n" +
                "       CAST(new.poQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF IFNULL(OLD.shipQty,0) != IFNULL(NEW.shipQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),  \n" +
                "		(CASE WHEN v_trasType='P' THEN 'Shipment Qty' ELSE 'Qty' END),	CAST(OLD.shipQty AS CHAR),  \n" +
                "		CAST(new.shipQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.remainingQty,0) != IFNULL(NEW.remainingQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Remaining Qty',CAST(OLD.remainingQty AS CHAR),  \n" +
                "       CAST(new.remainingQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippedQty,0) != IFNULL(NEW.shippedQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Shipped To Date',CAST(OLD.shippedQty AS CHAR),  \n" +
                "       CAST(new.shippedQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.shippingNotes,0) != IFNULL(NEW.shippingNotes,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Line Shipping Comments',CAST(OLD.shippingNotes AS CHAR),  \n" +
                "       CAST(new.shippingNotes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalComment,0) != IFNULL(NEW.internalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Line Internal Notes',CAST(OLD.internalComment AS CHAR),  \n" +
                "       CAST(new.internalComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.standrads,0) != IFNULL(NEW.standrads,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Applicable Standards',CAST(OLD.standrads AS CHAR),  \n" +
                "       CAST(new.standrads AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.refChargesTypeID,0) != IFNULL(NEW.refChargesTypeID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Other Charges Type',fun_getGenericCategoryNameByID(OLD.refChargesTypeID),  \n" +
                "       fun_getGenericCategoryNameByID(NEW.refChargesTypeID),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.unitPrice,0) != IFNULL(NEW.unitPrice,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Unit Price ($)', CAST(OLD.unitPrice AS CHAR), CAST(NEW.unitPrice AS CHAR),  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "      IF IFNULL(OLD.assyDescription,0) != IFNULL(NEW.assyDescription,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Assy/PID Description',CAST(OLD.assyDescription AS CHAR),  \n" +
                "       CAST(NEW.assyDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Ext. Price ($)',  \n" +
                "		CASE WHEN v_trasType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(OLD.extendedPrice,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(OLD.extendedPrice,2) AS CHAR) END,  \n" +
                "		CASE WHEN v_trasType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(NEW.extendedPrice,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(NEW.extendedPrice,2) AS CHAR) END,  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.otherCharges,0) != IFNULL(NEW.otherCharges,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Total Other Charges Price ($)',CAST(FORMAT(OLD.otherCharges,2) AS CHAR),  \n" +
                "       CAST(FORMAT(new.otherCharges,2) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 IF IFNULL(OLD.reflineID,0) != IFNULL(NEW.reflineID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'SO Line#',CAST(OLD.reflineID AS CHAR),  \n" +
                "       CAST(NEW.reflineID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF(new.refsalesorderdetid IS NOT NULL)THEN  \n" +
                "	SELECT  SUM(cpd.shipQty) INTO @shipQty   FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
                "		WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.refsalesorderdetid AND cp.transType='P';  \n" +
                "  \n" +
                "	SELECT SUM(ss.qty),refBlanketPOID INTO @qty,@bpoID FROM salesorderdet ss WHERE ss.id=new.refsalesorderdetid AND ss.isdeleted=0 GROUP BY refBlanketPOID;  \n" +
                "  \n" +
                "		IF(IFNULL(@shipQty,0)>=IFNULL(@qty,0)) THEN  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=New.refsalesorderdetid;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE id=New.refsalesorderdetid;  \n" +
                "		END IF;  \n" +
                "		SELECT  qty INTO vBPOQty FROM  salesorderdet WHERE id=@bpoID;  \n" +
                "	        SELECT  SUM(qty) INTO vBPOTotalQty FROM  salesorderdet WHERE refBlanketPOID=@bpoID AND isdeleted=0;  \n" +
                "		IF((SELECT COUNT(1) FROM SalesOrderDet WHERE  refBlanketPOID=@bpoID AND isdeleted=0 AND salesOrderDetStatus=1 AND isCancle=0)=0 AND IFNULL(vBPOQty,0)<=IFNULL(vBPOTotalQty,0))THEN  \n" +
                "		        UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE (id=@bpoID OR refSODetID=@bpoID);  \n" +
                "		ELSE  \n" +
                "		      UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE (id=@bpoID OR refSODetID=@bpoID);  \n" +
                "		END IF;  \n" +
                "  END IF;  \n" +
                "  IF IFNULL(OLD.quoteNumber,0) != IFNULL(NEW.quoteNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote#',CAST(OLD.quoteNumber AS CHAR),  \n" +
                "	   CAST(NEW.quoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "   IF IFNULL(OLD.quoteFrom,0) != IFNULL(NEW.quoteFrom,0) THEN  \n" +
                "		SELECT (CASE WHEN OLD.quoteFrom = 1 THEN 'From RFQ' WHEN OLD.quoteFrom = 2 THEN 'From Part Master' WHEN OLD.quoteFrom = 3 THEN 'N/A' END ) INTO vOldQuoteFrom ;  \n" +
                "        SELECT (CASE WHEN NEW.quoteFrom = 1 THEN 'From RFQ' WHEN NEW.quoteFrom = 2 THEN 'From Part Master' WHEN NEW.quoteFrom = 3 THEN 'N/A' END ) INTO vNewQuoteFrom ;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote From',vOldQuoteFrom,  \n" +
                "	   vNewQuoteFrom,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.refRFQGroupID,0) != IFNULL(NEW.refRFQGroupID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',CAST(OLD.refRFQGroupID AS CHAR),  \n" +
                "	   CAST(NEW.refRFQGroupID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.refAssyQtyTurnTimeID,0) != IFNULL(NEW.refAssyQtyTurnTimeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',OLD.assyQtyTurnTimeText,  \n" +
                "	   NEW.assyQtyTurnTimeText,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "       IF IFNULL(OLD.refRFQQtyTurnTimeID,0) != IFNULL(NEW.refRFQQtyTurnTimeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',OLD.assyQtyTurnTimeText,  \n" +
                "	   NEW.assyQtyTurnTimeText,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Confirming Zero Value Line',(CASE WHEN OLD.isZeroValue =0 THEN 'False' ELSE 'True' END),  \n" +
                "	   (CASE WHEN NEW.isZeroValue =0 THEN 'False' ELSE 'True' END),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.releaseNotes,0) != IFNULL(NEW.releaseNotes,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Release Notes',OLD.releaseNotes,  \n" +
                "	   NEW.releaseNotes,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5755,'2.00','V1',' Trg_AU_customer_packingslip_det - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5755:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssemblyWOStockDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyWOStockDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pWoID INT ,  \n" +
                "    IN pPONumber VARCHAR(255),  \n" +
                "    IN pIsShowAllWO TINYINT,  \n" +
                "    IN pSONumber VARCHAR(255))  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE whereClause1 VARCHAR(500);  \n" +
                "	SET whereClause1 = \"where 1=1\";  \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "    IF pPartID IS NOT NULL THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND PartID = \", pPartID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pWoID IS NOT NULL THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND vu_wss.woID = \", pWoID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPONumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND c.poNumber like \"%' ,pPONumber,'%\" and c.soNumbers like \"%' ,pSONumber,'%\" ' );  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF (pIsShowAllWO IS NOT NULL)  THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND remaningtotalQty > 0 ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @Sproc_GetAssemblyWOStockDetails = CONCAT(\"SELECT vu_wss.* ,  \n" +
                "						(vu_wss.readytoShipQty + vu_wss.shippedQty) AS movedToStockQty ,  \n" +
                "						vu_wosod.totalPOQty, vu_wosod.POQtyValues soPOQty,  \n" +
                "						 vu_wosod.totalMRPQty, vu_wosod.MRPQtyValues soMRPQty,  \n" +
                "                         (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.initialStockPoQty ELSE vu_wss.poQty END) AS initialWOStockPOQty ,  \n" +
                "						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
                "							(SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT poNumber SEPARATOR ',')  \n" +
                "								else GROUP_CONCAT(DISTINCT poNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end	)  \n" +
                "								 FROM `assemblystock`  \n" +
                "								 WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS' and partID = vu_wss.partID  \n" +
                "								 GROUP BY refSalesOrderID, poNumber)  \n" +
                "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.poNumber ELSE parentSaleDtl.poNumber END)  \n" +
                "						   END) poNumber,  \n" +
                "						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
                "							(SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT soNumber SEPARATOR ', ')  \n" +
                "									 else GROUP_CONCAT(DISTINCT soNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end)  \n" +
                "									FROM `assemblystock`  \n" +
                "									WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS' and partID = vu_wss.partID  \n" +
                "								 GROUP BY refSalesOrderID, poNumber)  \n" +
                "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END)  \n" +
                "                            END) soNumbers,  \n" +
                "						vu_wosod.lineID, vu_wosod.salesOrderMstIDs, vu_wosod.SOPOQtyValues ,  \n" +
                "						(CASE WHEN vu_wss.woid IS NULL THEN 'Initial Stock' ELSE 'Work Order Stock' END) AS stockTypeName ,  \n" +
                "                        (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.stockAdjustmentQty ELSE ((vu_wss.buildQty - vu_wss.scrapQty - vu_wss.poQty) + vu_wss.stockAdjustmentQty) END) AS excessFreetoUseQty,  \n" +
                "                        (CASE WHEN vu_wss.woid IS NULL THEN ((vu_wss.readytoShipQty + vu_wss.shippedQty + vu_wss.stockAdjustmentQty) - (vu_wss.shippedQty)) ELSE ((vu_wss.buildQty) - (vu_wss.scrapQty + vu_wss.shippedQty + vu_wss.readytoShipQty)) END) AS remaningtotalQty  \n" +
                "					FROM vu_workorder_summary_stk vu_wss  \n" +
                "						LEFT JOIN (SELECT woID AS woMstID, terminateWOID, isRevisedWO FROM workorder WHERE deletedAt IS NULL) AS wo  \n" +
                "								ON vu_wss.woid = wo.woMstID  \n" +
                "						LEFT JOIN vu_workorder_salesorder_details vu_wosod ON vu_wss.woid =  vu_wosod.woID  \n" +
                "						LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON wo.terminateWOID = parentSaleDtl.woID  \n" +
                "					\", whereClause1);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY woid ASC\");  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyWOStockDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyWOStockDetails,\" ) c where \" , pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "-- select @SQLStatement2;  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5756,'2.00','V1',' Sproc_GetAssemblyWOStockDetails - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5756:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getCustomerPackingSlipDetailForHeaderList;  \n" +
                "CREATE PROCEDURE `Sproc_getCustomerPackingSlipDetailForHeaderList`(  \n" +
                "	IN pSearch VARCHAR(200),  \n" +
                "    IN pTransType VARCHAR(5)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT cp.packingSlipNumber,  \n" +
                "		cp.refSalesOrderID,  \n" +
                "        cp.id,  \n" +
                "        cp.invoiceNumber,  \n" +
                "        cp.creditMemoNumber,  \n" +
                "        cp.poNumber,  \n" +
                "        cp.soNumber,  \n" +
                "        mfgCodeMst.id AS mfgCodeId,  \n" +
                "        mfgCodeMst.mfgName AS mfgName,  \n" +
                "        mfgCodeMst.mfgCode AS mfgCode   ,  \n" +
                "        fun_GetFormattedMfgCode(mfgCodeMst.mfgcode,mfgCodeMst.mfgname, vMfgCodeFormat) customerFormatedName  \n" +
                "        FROM customer_packingslip AS cp  \n" +
                "        LEFT JOIN mfgCodemst AS mfgCodeMst ON cp.customerID = mfgCodeMst.id  and mfgCodeMst.isDeleted = 0  \n" +
                "        WHERE  cp.isDeleted = 0  \n" +
                "        AND cp.transType = pTransType  \n" +
                "        AND ((cp.invoiceNumber LIKE pSearch OR cp.packingSlipNumber LIKE pSearch OR cp.poNumber LIKE pSearch OR cp.soNumber LIKE pSearch)  \n" +
                "        or (mfgCodeMst.mfgCode LIKE pSearch OR mfgCodeMst.mfgName LIKE pSearch)  );  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5757,'2.00','V1','Sproc_getCustomerPackingSlipDetailForHeaderList  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5757:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingSalesorderDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesorderDetails`(  \n" +
                "	IN psoposearch LONGTEXT,  \n" +
                "	IN salesorderID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "	-- Blanket Po option blanketPOOption 2 for Link BPO to Future PO(s)  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS   tempsalesorder AS  \n" +
                "		   SELECT som.id FROM salesordermst som  \n" +
                "		 WHERE som.id IN  \n" +
                "			  (SELECT sd.refSalesOrderID FROM salesorderdet sd JOIN COMPONENT c ON c.id=sd.partID AND c.isdeleted=0 WHERE  \n" +
                "			   EXISTS (SELECT 1 FROM salesordermst sm WHERE  sm.id=sd.refSalesOrderID AND (sm.isBlanketPO=0 OR (sm.isBlanketPO=1 AND sm.blanketPOOption!=2)) AND sm.isdeleted=0 )  \n" +
                "						AND sd.isdeleted=0  \n" +
                "						AND NOT EXISTS (SELECT 1 FROM customer_packingslip_det cpd  \n" +
                "								JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType='P'  \n" +
                "								WHERE cpd.refsalesorderDetid=sd.id AND cpd.remainingQty=0 AND cpd.isdeleted=0  \n" +
                "						   )) OR som.id=salesorderID;  \n" +
                "  \n" +
                " SET @pWhereClause=\"1=1\";  \n" +
                "  \n" +
                " SET @temp_Sproc_GetPendingSOPO=CONCAT(\"  \n" +
                "	select so.ID,  \n" +
                "		fun_GetFormattedMfgCode(m.mfgcode,m.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
                "		so.salesOrderNumber as `SO#`,so.poNumber as `PO#` , so.poRevision, so.customerID,so.billingAddressID,  \n" +
                "		so.termsID , so.shippingAddressID,  \n" +
                "		so.shippingMethodID,so.revision,so.shippingcomment,so.soDate, so.internalComment,  \n" +
                "		so.poDate,  \n" +
                "		(CASE WHEN so.freeOnBoardId IS NULL THEN m.freeOnBoardId ELSE so.freeOnBoardId END) freeOnBoardId ,  \n" +
                "		so.intermediateShipmentId,m.mfgcode,so.contactPersonID,  \n" +
                "		(CASE WHEN so.salesCommissionTo IS NULL THEN m.salesCommissionTo ELSE so.salesCommissionTo END) salesCommissionTo ,  \n" +
                "		concat(fun_GetFormattedMfgCode(m.mfgcode,m.mfgName,\",vMfgCodeFormat,\"), ' | ',so.salesOrderNumber,' | ',so.poNumber) pendingSOPO,  \n" +
                "		m.mfgName,  \n" +
                "		so.status,so.isLegacyPO,so.isRmaPO,so.isBlanketPO,so.blanketPOOption,  \n" +
                "        so.carrierID,so.carrierAccountNumber  \n" +
                "	from salesordermst so  \n" +
                "		join mfgcodemst m on m.id=so.customerID  \n" +
                "	where so.id in (select id from tempsalesorder) and so.isDeleted=0\");  \n" +
                "  \n" +
                "IF(salesorderID IS NOT NULL)THEN  \n" +
                "	SET @temp_Sproc_GetPendingSOPO=CONCAT(@temp_Sproc_GetPendingSOPO,' and so.id=',salesorderID);  \n" +
                "END IF;  \n" +
                "IF(psoposearch IS NOT NULL)THEN  \n" +
                "	SET @pWhereClause=CONCAT(\"pendingSOPO like '%\",psoposearch,\"%'\");  \n" +
                "END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"select * from ( \", @temp_Sproc_GetPendingSOPO,\" ) c  where \", @pWhereClause);  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5758,'2.00','V1','Sproc_GetPendingSalesorderDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5758:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetUMIDListForCustomerPackingSlip;  \n" +
                "CREATE PROCEDURE `Sproc_GetUMIDListForCustomerPackingSlip`(  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pPackingSlipDetId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vUMIDWhereClause VARCHAR(1000);  \n" +
                "	DECLARE vPackagingAliasPart VARCHAR(1000);  \n" +
                "    DECLARE vCplAvlPart VARCHAR(1000);  \n" +
                "	DECLARE vExpireDaysLeftBeforeShipment INT ;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	select `values` into vExpireDaysLeftBeforeShipment  \n" +
                "	from systemconfigrations  \n" +
                "	where `key` = 'ExpireDaysLeftBeforeShipment'  \n" +
                "	and isDeleted =0 ;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	#SET vInnerJoinMainQuery = ' ', vComponentWhereClause ='', vKitWhereClause='', vUMIDWhereClause = '';  \n" +
                "	# Get AVL part list of CPN part  \n" +
                "    SELECT GROUP_CONCAT(refComponentID) INTO vCplAvlPart  \n" +
                "	FROM  component_cust_alias_rev_pn  \n" +
                "    WHERE refCPNPartID = pPartId  \n" +
                "    AND isDeleted = 0;  \n" +
                "	#Get Packaging Alias part list  \n" +
                "	SELECT GROUP_CONCAT(a.componentID) INTO vPackagingAliasPart  \n" +
                "	FROM component_packagingalias   a  \n" +
                "	WHERE a.aliasgroupID IN  \n" +
                "	(SELECT b.aliasgroupID FROM component_packagingalias b WHERE b.componentID = pPartId)  \n" +
                "	AND a.componentID <> pPartId  \n" +
                "	AND a.isDeleted = 0;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*IF(pExpireMaterial = 1) THEN  \n" +
                "		IF(pExpiredDay = 0) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime()');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND expiryDate is not null AND expiryDate < fun_DatetimetoUTCDateTime() + INTERVAL ',pExpiredDay,' DAY');  \n" +
                "		END IF;  \n" +
                "	END IF;	                */  \n" +
                "  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		SET vUMIDWhereClause = CONCAT(' AND (css.refcompid = ', pPartId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF vPackagingAliasPart IS NOT NULL THEN  \n" +
                "		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' OR  css.refcompid in (' , vPackagingAliasPart,')');  \n" +
                "    END IF;  \n" +
                "    IF vCplAvlPart IS NOT NULL THEN  \n" +
                "		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ' OR  css.refcompid in ( ', vCplAvlPart, ')');  \n" +
                "    END IF;  \n" +
                "    IF (vUMIDWhereClause IS NOT NULL  OR  vUMIDWhereClause != '') THEN  \n" +
                "		SET vUMIDWhereClause = CONCAT(vUMIDWhereClause, ')');  \n" +
                "    END IF;  \n" +
                "    IF pPackingSlipDetId IS NOT NULL THEN  \n" +
                "		SET pWhereClause  =  CONCAT(pWhereClause , ' or ( tempUMID.id in (select refsidid from shippedassembly sa where (sa.partID =', pPartId );  \n" +
                "        IF vPackagingAliasPart IS NOT NULL THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' OR  sa.partID in (' , vPackagingAliasPart,')');  \n" +
                "		END IF;  \n" +
                "		IF vCplAvlPart IS NOT NULL THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' OR  sa.partID in ( ', vCplAvlPart, ')');  \n" +
                "		END IF;  \n" +
                "		SET pWhereClause  =  CONCAT(pWhereClause , ') and sa.refCustPackingSlipDetID =',pPackingSlipDetId, ') and  tempUMID.isinStk =0 ) ');  \n" +
                "	END IF;  \n" +
                "    SET pWhereClause  =  CONCAT(pWhereClause , ' or ( tempUMID.isinStk = 0 and tempUMID.pkgQty > 0 ) ');  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	/*IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "		SET vKitWhereClause = CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs)');  \n" +
                "	END IF;                      */  \n" +
                "  \n" +
                "	SET @vFromSQLQuery = CONCAT(\"  \n" +
                "					SELECT 		id, 			scanlabel, 			uid, 			    	pkgQty, 			uom,  \n" +
                "							uomName,		printStatus, 		        costCategoryID,			costCategory,			lotCode,  \n" +
                "							dateCode,		refcompid,			mfgcodeID,		        mfgPN, 				PIDCode,  \n" +
                "							packaginggroupID,	mfg,				packageQty,  \n" +
                "							RoHSStatusID,		rohsIcon, 		        rohsName,			binID,				warehouseID,  \n" +
                "							location,		warehouse,			department, 		        customerID,			receiveMaterialType,  \n" +
                "							displayReceiveMaterialType,				spq,				pcbPerArray, 		        stockInventoryType,  \n" +
                "							isReservedStock,	customer,			pkgUnit,   		        orgPkgUnit,  \n" +
                "							cpn,				mfgAvailable, 		        customerConsign,  \n" +
                "							refCPNMFGPNID, 		        mfgPNDescription,		nickName,  \n" +
                "							refSupplierPartId,	supplierMFGCode, 	        supplieMFGPN,			packaging,			packagingName,  \n" +
                "							expiryDate,		allocatedToKit,			orgQty, 		        orgRecBin,			orgRecBinName,  \n" +
                "							orgRecWarehouse,	orgRecWHName,			fromBin, 		        fromBinName, 		        fromWarehouse,  \n" +
                "							fromWHName,		fromDepartment,			fromDepartmentName, 	        specialNote,			orgRecDepartment,  \n" +
                "							orgRecDepartmentName,	updatedAt, 		        updatedBy,			umidModifiedBy, 	        createdAt,  \n" +
                "							createdBy,		createdByName,			isinStk,			packingSlipId,  \n" +
                "							packingSupplierName, 	expiredStatus,			umidPrefix,                     createdbyRole,			updatedbyRole,  \n" +
                "							refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		        restrictUsePermanently,		restrictUSEwithpermission,  \n" +
                "							restrictPackagingUsePermanently,			restrictPackagingUseWithpermission,  \n" +
                "							countOfRestrictUMID,	departmentID,			warehouseType,			totalScrapUnit,			((totalScrapUnit/orgPkgUnit)*100) perScrapQty,  \n" +
                "							tentativePrice,		((totalScrapUnit/orgPkgUnit)*tentativePrice) costScrapQty,	isTransit,  \n" +
                "									               externalPartPackage,		partPackage,			createdUserCode,  \n" +
                "							mfrDateCodeFormatID,	mfrDateCodeFormat,		mfrDateCode,  \n" +
                "							UMIDrohsStatusID,       UMIDrohsStatus,        		isCustom,        		internalPartPackage,    	woNumber,  \n" +
                "							detailDescription ,reservedForCustomer,isEachUOM ,\",vExpireDaysLeftBeforeShipment,\" as expireDaysLeftBeforeShipmentFromKey,  \n" +
                "                            (if (expiryDate <= date_add(current_Date(),interval \",vExpireDaysLeftBeforeShipment,\" day) , 1 ,0)) isNearByExpiry  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		css.id,			css.scanlabel,			css.uid,			css.pkgQty,			css.uom,  \n" +
                "							fun_getUnitNameByID(css.uom) uomName,			css.printStatus,		css.costCategoryID,  \n" +
                "							fun_getCostCategoryNameByID(css.costCategoryID, FALSE) costCategory,			css.lotCode,			css.dateCode,  \n" +
                "							css.refcompid,		c.mfgcodeID,			c.mfgPN,			c.PIDCode,			c.packaginggroupID,  \n" +
                "							fun_GetFormattedMfgCode(co_mfg.mfgcode,co_mfg.mfgname,\", vMfgCodeFormat,\")  mfg,		c.packageQty,  \n" +
                "							css.prefix umidPrefix,  \n" +
                "                            c.RoHSStatusID,  \n" +
                "							fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,		fun_getRoHSNameByID(c.RoHSStatusID)  rohsName,			css.binID,  \n" +
                "							fun_getBinNameByID(css.binID) location,			css.customerID,			fun_getMfgCodeAndNameByID(css.customerID) customer,  \n" +
                "							IFNULL(css.orgPkgUnit, 0) orgPkgUnit,			css.pkgUnit,  \n" +
                "							fun_getWarehouseNameByBinID(css.binID) warehouse,  \n" +
                "                            fun_getWarehouseIDByBinID(css.binID) warehouseID,  \n" +
                "                            fun_getDepartmentNameByBinID(css.binID) department,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN (css.cpn = 0) THEN 'No'  \n" +
                "									WHEN (css.cpn = 1) THEN 'Yes'  \n" +
                "									ELSE ''  \n" +
                "								END  \n" +
                "							) AS cpn,  \n" +
                "							(  \n" +
                "								CASE 	WHEN (css.mfgAvailabel = 0) THEN 'No'  \n" +
                "									WHEN (css.mfgAvailabel = 1) THEN 'Yes'  \n" +
                "									ELSE ''  \n" +
                "								END  \n" +
                "							) AS mfgAvailable,  \n" +
                "							(  \n" +
                "								CASE 	WHEN (css.customerConsign = 0) THEN 'No'  \n" +
                "									WHEN (css.customerConsign = 1) THEN 'Yes'  \n" +
                "									ELSE ''  \n" +
                "								END  \n" +
                "							) AS customerConsign,  \n" +
                "							css.refCPNMFGPNID,  \n" +
                "							c.mfgPNDescription,			css.receiveMaterialType,  \n" +
                "                            css.spq,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN  css.receiveMaterialType = 'PP' THEN  \n" +
                "										'Purchased Part'  \n" +
                "									WHEN  css.receiveMaterialType = 'CP' THEN  \n" +
                "										'Customer Consigned Part'  \n" +
                "									ELSE  \n" +
                "										NULL  \n" +
                "								END  \n" +
                "  \n" +
                "							) displayReceiveMaterialType,  \n" +
                "                            fun_getMfgNameByID(css.customerId) As reservedForCustomer,  \n" +
                "							css.stockInventoryType,  		css.isReservedStock,  \n" +
                "							css.pcbPerArray,				css.nickName,					css.packaging,  \n" +
                "							fun_getPackagingNameByID(css.packaging) packagingName,						css.refSupplierPartId,  \n" +
                "							fun_getMfgCodeAndNameByPartID(css.refSupplierPartId) supplierMFGCode,	          		fun_getMFGPNByID(css.refSupplierPartId) supplieMFGPN,  \n" +
                "							css.expiryDate,  \n" +
                "                            fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKit,  \n" +
                "							css.orgQty,					css.specialNote,				css.fromBin,  \n" +
                "							fun_getBinNameByID( css.fromBin) fromBinName,		css.fromWarehouse,  \n" +
                "							fun_getWarehouseNameByID(css.fromWarehouse) fromWHName,						css.fromDepartment,  \n" +
                "							fun_getWarehouseNameByID(css.fromDepartment) fromDepartmentName,				css.orgRecBin,  \n" +
                "							fun_getBinNameByID(css.orgRecBin) orgRecBinName,						css.orgRecWarehouse,  \n" +
                "							fun_getWarehouseNameByID(css.orgRecWarehouse) orgRecWHName, 					css.orgRecDepartment,  \n" +
                "							fun_getWarehouseNameByID(css.orgRecDepartment) orgRecDepartmentName,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "							css.updatedBy,					fun_getUserNameByID(css.updatedBy) AS umidModifiedBy,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "							css.createdAt createdAtFilter,  \n" +
                "							css.createdBy,					fun_getUserNameByID(css.createdBy) createdByName,  \n" +
                "							css.isinStk,  \n" +
                "							fun_getRoleByID(css.createByRoleId) createdbyRole,  \n" +
                "		                                        fun_getRoleByID(css.updateByRoleId) updatedbyRole,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN  css.stockInventoryType in ('NI','SI') THEN  \n" +
                "										CONCAT('(', a.mfgCode, ') ', a.mfgName)  \n" +
                "									ELSE  \n" +
                "										NULL  \n" +
                "								END  \n" +
                "							) packingSupplierName,  \n" +
                "							a.packingSlipId,  \n" +
                "							 fun_getDepartmentIDByBinID(css.binID) departmentID,  \n" +
                "							 fun_getWareHouseTypeByBinID(css.binID) warehouseType  ,  \n" +
                "							(  \n" +
                "								CASE 	WHEN (css.expiryDate < fun_DatetimetoUTCDateTime()) THEN 'Expired'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) AS expiredStatus,  \n" +
                "							refRestrictUMIDId, 				  	isUMIDRestrict,  \n" +
                "							(  \n" +
                "								CASE 	WHEN (css.isUMIDRestrict = 0) THEN 'No'  \n" +
                "									WHEN (css.isUMIDRestrict = 1) THEN 'Yes'  \n" +
                "									ELSE ''  \n" +
                "								END  \n" +
                "							) AS UMIDRestricted,  \n" +
                "							c.restrictUsePermanently,						c.restrictUSEwithpermission,  \n" +
                "							c.restrictPackagingUsePermanently,					c.restrictPackagingUseWithpermission,  \n" +
                "							IFNULL(c.price, 0) tentativePrice,					fun_getTotalUMIDScrapUnit(css.id) totalScrapUnit,  \n" +
                "							fun_getCountOfRestrictUMID(css.id) countOfRestrictUMID,         	fun_getUMIDTransitStatus(css.uid) isTransit,  \n" +
                "							c.partPackage externalPartPackage,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) partPackage,  \n" +
                "							fun_getUserCodeByID(css.createdBy) createdUserCode,                   	css.mfrDateCodeFormatID,  \n" +
                "							fun_getMFRDateCodeFormatByID(css.mfrDateCodeFormatID) mfrDateCodeFormat,  \n" +
                "							css.mfrDateCode,		css.rohsStatusID UMIDrohsStatusID,  \n" +
                "							fun_getRoHSNameByID(css.rohsStatusID) UMIDrohsStatus,			c.isCustom,  \n" +
                "							fun_getPackageCaseNameByID(c.partPackageID) internalPartPackage,    	css.woNumber,  \n" +
                "							c.detailDescription,  \n" +
                "                            (case when css.uom = -1 then true else false end) isEachUOM  \n" +
                "					FROM 		component_sid_stock css force index(FK_component_sid_stock_refcompid)  \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 		cspd.refComponentSidStockID, mcm.mfgCode, ps.packingSlipNumber, mcm.mfgName, ps.id packingSlipId  \n" +
                "								FROM 		component_sid_stock_packing_detail cspd  \n" +
                "								INNER JOIN 	packing_slip_material_receive_det psd force index(PRIMARY) ON cspd.refPackingSlipDetailID = psd.id AND psd.isDeleted = 0  \n" +
                "								INNER JOIN 	packing_slip_material_receive ps force index(PRIMARY) ON psd.refPackingSlipMaterialRecID = ps.id AND ps.isDeleted = 0  \n" +
                "								INNER JOIN 	mfgcodemst mcm ON mcm.id = ps.mfgCodeID AND mcm.isDeleted = 0  \n" +
                "								GROUP BY 	cspd.refComponentSidStockID, mcm.mfgCode, ps.packingSlipNumber, mcm.mfgName, ps.id  \n" +
                "							) a ON a.refComponentSidStockID = ifnull(css.parentUIDId , css.id)  \n" +
                "                    LEFT JOIN mfgcodemst co_mfg on co_mfg.id = c.mfgcodeId and co_mfg.isDeleted = 0  \n" +
                "                    LEFT JOIN mfgcodemst css_mfg on css_mfg.id = css.customerId and css_mfg.isDeleted = 0  \n" +
                "					WHERE 	(css.isdeleted is null or css.isdeleted = 0)\",  \n" +
                "								vUMIDWhereClause,\") As tempUMID  \n" +
                "				WHERE \", pWhereClause  \n" +
                "			);  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5759,'2.00','V1',' Sproc_GetUMIDListForCustomerPackingSlip - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5759:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingShippingDetail;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingShippingDetail`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefCustPackingSlipID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "  SET @tempQuerypackingSlip = CONCAT(\"SELECT cpd.id, cpd.refCustPackingSlipID,cpd.refSalesorderDetid,  \n" +
                "			cpd.partId , cpd.custPOLineID, cpd.assyDescription,  \n" +
                "			cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,cpd.shippingNotes,cpd.shippingId,  \n" +
                "			cpd.internalComment,  \n" +
                "			cpd.binID, cpd.whID,  \n" +
                "			ss.qty as releaseLineQty,  \n" +
                "			cpd.standrads,  \n" +
                "			ss.releaseNumber,  \n" +
                "			cpd.poReleaseNumber,  \n" +
                "			cpd.refBlanketPONumber,  \n" +
                "			fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "			fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(cpd.updateByRoleId) updatedbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			c.mfgpn,c.pidcode PIDCode,c.nickName,c.mfgpndescription,rr.name as rohsName,rr.rohsIcon, c.partType ,  \n" +
                "			fun_getUnitNameByID(c.uom) unitMeaser ,  \n" +
                "			cpd.reflineID as lineID ,  \n" +
                "			fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname,\", vMfgCodeFormat,\") mfgName,  \n" +
                "			c.mfgcodeid ,  \n" +
                "			cpd.lineID AS lineIDSequenceNum   ,  \n" +
                "			(SELECT GROUP_CONCAT(DISTINCT woNumber SEPARATOR ', ') FROM shippedassembly  \n" +
                "			   WHERE refCustPackingSlipDetID = cpd.id AND isDeleted = 0 AND shippedqty > 0) shippedFromWONumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(DISTINCT css.uid) FROM shippedassembly sa  \n" +
                "					JOIN component_sid_stock css ON sa.refsidid = css.id AND  css.isDeleted = 0  \n" +
                "			  WHERE sa.refCustPackingSlipDetID = cpd.id AND sa.isDeleted = 0 AND sa.shippedqty > 0) shippedFromUMIDs ,  \n" +
                "             cpd.refLineId soLineId ,  \n" +
                "             cpd.refCustPackingSlipDetID,  \n" +
                "             CASE WHEN c.partType = 4 THEN FALSE ELSE TRUE END materialType,  \n" +
                "             (select mfg.mfgType from mfgcodemst mfg where mfg.id = c.mfgcodeID and mfg.isDeleted = 0) mfgType,  \n" +
                "             cpd.componentStockType,  \n" +
                "             if(cp.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
                "             if(cp.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "             if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "             if(cp.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "             c.isCustom,c.isCPN,  \n" +
                "             if(cp.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
                "             (select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "						where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "							from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "            if(cp.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "            if(cp.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "            if(cp.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "			(case when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText  ,  \n" +
                "            cpd.releaseNotes  \n" +
                "		FROM `customer_packingslip_det` AS cpd  \n" +
                "			left join component c on c.id=cpd.partid  \n" +
                "			left join mfgcodemst mfgmst on mfgmst.id = c.mfgCodeId and mfgmst.isDeleted = 0  \n" +
                "			left join rfq_rohsmst rr on rr.id=c.rohsStatusID  \n" +
                "			left join salesshippingmst ss on ss.shippingID=cpd.shippingID and ss.isdeleted=0  \n" +
                "            left join salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "            left join customer_packingslip cp on cp.id  = cpd.refCustPackingSlipID and cp.isDeleted = 0  \n" +
                "		WHERE cpd.isDeleted=0 and cpd.refCustPackingSlipID=\",IFNULL(prefCustPackingSlipID,0));  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY lineIDSequenceNum ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "        /* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempQuerypackingSlip,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempQuerypackingSlip,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "			PREPARE query1 FROM @SQLStatement2;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5760,'2.00','V1',' Sproc_RetrieveCustomerPackingShippingDetail - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5760:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_bom_stock_position`;  \n" +
                "CREATE PROCEDURE `Sproc_bom_stock_position`(p_mainassyID int, p_subassyID int, p_feasibilityQty int, p_consolidateview tinyint, pCustomerId INT ,pPackagingAlias tinyint )  \n" +
                "BEGIN  \n" +
                "DECLARE pKitQty INT DEFAULT 0;  \n" +
                "DECLARE vFilterWhereClause VARCHAR(16383);  \n" +
                "DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                " select 1 into @pUserID;  \n" +
                " select 1 into @pRoleID;  \n" +
                "	SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "		if pCustomerId is null then  \n" +
                "			select mfgcodeid into pCustomerId From component where id = p_mainassyID;  \n" +
                "		end if;  \n" +
                "	IF(p_consolidateview and p_subassyID is not null) THEN  \n" +
                "			SIGNAL SQLSTATE '45002'  \n" +
                "			SET MESSAGE_TEXT = ' Consolidate view alwayse for main assembly do not pass sub assembly detail';  \n" +
                "	END IF;  \n" +
                "    /*Generate Conosolidate Data */  \n" +
                "	/* Per assembly generate level wise data */  \n" +
                "    /*In case of multilevel assembly generate per level records*/  \n" +
                "    call Sproc_CreateConsolidateDataForPart(0, p_mainassyID);  \n" +
                "	/* select * from leveldata;  \n" +
                "		select * from temp_Sproc_CreateRfqConsolidateLineItem; */  \n" +
                "  \n" +
                "		/*Create Consolidate Data */  \n" +
                "        /*Ref from Sproc_CreateKitAllocationConsolidateLine*/  \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_GetKitConsolidateLine AS  \n" +
                "		SELECT 	rfqAssyIDORrefSalesOrderdetID AS refSalesOrderDetID, 					p_mainassyID AS refAssyId,				multiple,  \n" +
                "			consolidatedLineItemIDs, 		isInstall, 					isPurchaseWithDNP, 				uomID,  \n" +
                "			numOfPosition, 				custPNID, 					restrictCPNUseInBOMStep, 			restrictCPNUsePermanentlyStep,  \n" +
                "			restrictCPNUseWithpermissionStep,	consolidatedPartWithFlagDetail,			category,	 				mountingTypeID,  \n" +
                "			partType, 				connecterTypeID, 				uomMismatchedStep,				mismatchFunctionalCategoryStep,  \n" +
                "			mismatchMountingTypeStep,		rfqlineitemsid,					lineid,						isqpaMismatch,  \n" +
                "			qpa,					kitqpawithDNP,					kitdnpWithoutQPA, 				consolidatedrefDesig,  \n" +
                "			consolidatedmfgPNIDs,			isNotRequiredKitAllocation,			notRequiredKitAllocationReason,			consolidatedpartlineID,  \n" +
                "			consolidateRestrictPartDetail  \n" +
                "		FROM 	temp_Sproc_CreateRfqConsolidateLineItem  \n" +
                "		WHERE 	rfqAssyIDORrefSalesOrderdetID = 0;  \n" +
                "  \n" +
                "		# Insert Consolidated lineItems into temptable  \n" +
                "        drop temporary table if exists temp_bom_stockposition_consolidate_line;  \n" +
                "		create temporary table temp_bom_stockposition_consolidate_line as  \n" +
                "        SELECT  (@cnt := @cnt + 1) AS id,	r.refSalesOrderDetID, 			r.refAssyId,			r.multiple,			r.consolidatedLineItemIDs, 		r.isInstall,  \n" +
                "			r.isPurchaseWithDNP, 			r.uomID,			r.numOfPosition, 		r.custPNID,  \n" +
                "			r.restrictCPNUseInBOMStep, 		r.restrictCPNUsePermanentlyStep,				r.restrictCPNUseWithpermissionStep,	r.consolidatedPartWithFlagDetail,  \n" +
                "			r.category,	 			r.mountingTypeID,		r.partType, 			r.connecterTypeID, 			r.uomMismatchedStep,  \n" +
                "			r.mismatchFunctionalCategoryStep,	r.mismatchMountingTypeStep,	r.rfqlineitemsid,		r.lineid,				r.isqpaMismatch,  \n" +
                "			r.qpa,					r.kitqpawithDNP,		r.kitDNPWithoutQPA, 		r.consolidatedrefDesig,			r.consolidatedMfgPNIDs,  \n" +
                "			r.isNotRequiredKitAllocation,		r.notRequiredKitAllocationReason,				r.consolidatedpartlineID,		r.consolidateRestrictPartDetail,  \n" +
                "			(CASE WHEN r.category = 3 THEN 1 ELSE 0 END) isAssembly,				@pUserID createdBy,			fun_DatetimetoUTCDateTime() createdAt,   		@pRoleID createdRole  \n" +
                "		FROM 	temp_Sproc_GetKitConsolidateLine r  \n" +
                "				CROSS JOIN (SELECT @cnt := 0) AS dummy;  \n" +
                "  \n" +
                "       # Insert  Consolidate Alternate part detail  \n" +
                "       drop temporary table if exists temp_bom_stockposition_consolidate_line_alternatepart;  \n" +
                "       create temporary table  temp_bom_stockposition_consolidate_line_alternatepart  \n" +
                "        select ap.`mfgPN`, cl.id `kitConsolidateID`, 0 `refSalesOrderDetId`, ap.partID  `refAssyId`, ap.`mfgPNID`, 0 `isdeleted`, @pUserID `createdBy`,  \n" +
                "        @pUserID `updatedBy`,fun_DatetimetoUTCDateTime() `createdAt`,fun_DatetimetoUTCDateTime() `updatedAt`,  \n" +
                "        ap.`mfgCodeID`, fun_getAssyPIDCodeByID(ap.`mfgPNID`) as `PIDCode`, min(ap.`customerApproval`) customerApproval, IFNULL(ap.restrictUseInBOMStep,0) as restrictUseInBOMStep,  \n" +
                "		IFNULL(ap.restrictUseWithPermissionStep,1) as restrictUseWithPermissionStep,IFNULL(ap.restrictUsePermanentlyStep,1) as restrictUsePermanentlyStep,  IFNULL(ap.restrictUseInBOMWithPermissionStep,0) as restrictUseInBOMWithPermissionStep,  \n" +
                "		IFNULL(ap.restrictUseExcludingAliasStep,1) as restrictUseExcludingAliasStep, IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1) as restrictUseExcludingAliasWithPermissionStep,IFNULL(ap.restrictUseInBOMExcludingAliasStep,0) as restrictUseInBOMExcludingAliasStep,  \n" +
                "        IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0) as restrictUseInBOMExcludingAliasWithPermissionStep,    @pRoleID `createByRoleId`,@pRoleID `updateByRoleId`,  \n" +
                "		IFNULL(ap.approvedMountingType,0) as approvedMountingType, IFNULL(ap.mismatchMountingTypeStep,1) as mismatchMountingTypeStep, IFNULL(ap.mismatchFunctionalCategoryStep,1)  as mismatchFunctionalCategoryStep  \n" +
                "		from rfq_lineitems_alternatepart ap  \n" +
                "		join (  \n" +
                "			select  kcl.id, kcl.consolidatedLineItemIDs  \n" +
                "			from temp_bom_stockposition_consolidate_line kcl  \n" +
                "			join rfq_lineitems rl on rl.id = kcl.rfqLineItemsId and rl.isdeleted = 0  \n" +
                "			where kcl.refSalesOrderDetID = 0  \n" +
                "		) cl on FIND_IN_SET(ap.rfqLineitemsID,cl.consolidatedLineItemIDs)  \n" +
                "		where ifnull(ap.mfgGoodPartMappingStep,1) = 1 and ifnull(ap.suggestedGoodPartStep,1) = 1 and ifnull(ap.distGoodPartMappingStep,1) = 1 and ifnull(ap.suggestedGoodDistPartStep,1) = 1 and ap.isdeleted = 0  \n" +
                "		group by cl.id, ap.`mfgPN`, ap.`mfgPNID`, ap.`mfgCodeID`,  \n" +
                "				IFNULL(ap.restrictUseInBOMStep,0), IFNULL(ap.restrictUseInBOMWithPermissionStep,0),IFNULL(ap.restrictUseWithPermissionStep,1),IFNULL(ap.restrictUsePermanentlyStep,1),  \n" +
                "				IFNULL(ap.restrictUseExcludingAliasStep,1), IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1),IFNULL(ap.restrictUseInBOMExcludingAliasStep,0),IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0),  \n" +
                "				IFNULL(ap.approvedMountingType,0), IFNULL(ap.mismatchMountingTypeStep,1), IFNULL(ap.mismatchFunctionalCategoryStep,1);  \n" +
                "  \n" +
                "		select * from temp_bom_stockposition_consolidate_line;  \n" +
                "		select * from temp_bom_stockposition_consolidate_line_alternatepart;  \n" +
                "	/*Generate Subassembly Requirement based on feasibilityQty*/  \n" +
                "		#Ref Proceduew Sproc_CreateKitAllocationAssyDetail  \n" +
                "  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS tempSubAmmseblyData;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempSubAmmseblyData AS  \n" +
                "		SELECT 	ps.prPerPartID,  \n" +
                "				c.liveInternalVersion,  \n" +
                "				c.liveVersion,  \n" +
                "				max(ps.level) level  \n" +
                "		FROM 		part_sub_assy_relationship ps  \n" +
                "		JOIN		component c ON c.id = ps.prPerPartID  \n" +
                "		WHERE 		ps.PartID = p_mainassyID  \n" +
                "		AND 		c.liveInternalVersion IS NOT NULL  \n" +
                "		AND 		ps.isDeleted = 0  \n" +
                "		GROUP BY 	ps.prPerPartID, c.liveInternalVersion, c.liveVersion;  \n" +
                "  \n" +
                "		#select * From tempSubAmmseblyData;  \n" +
                "       /*Get Assembly lines from Conslidate line Details*/  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS tempAssyConsolidateDetail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempAssyConsolidateDetail AS  \n" +
                "        SELECT 	id, consolidatedLineItemIDs, kitQPAWithDNP AS qpa, refAssyId, refSalesOrderDetId  \n" +
                "		FROM 	temp_bom_stockposition_consolidate_line  \n" +
                "		WHERE 	refSalesOrderDetID = 0  \n" +
                "				AND isAssembly = 1;  \n" +
                "          /* Update Qty based on Feasibility of Kit & MRP*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_kit_allocation_assy_detail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_kit_allocation_assy_detail   AS  \n" +
                "		SELECT 		tsd.prPerPartID AS prPerPartID,  \n" +
                "					tsd.prPerPartID AS PartID,  \n" +
                "				0 AS salesOrderDetailID,  \n" +
                "				IFNULL(SUM(ld.qpa),1) perAssyBuildQty,  \n" +
                "				(IFNULL(SUM(ld.qpa), 1) * p_feasibilityQty) totalAssyBuildQty,  \n" +
                "				p_feasibilityQty AS kitFeasibilityQty,  \n" +
                "				(IFNULL(SUM(ld.qpa), 1) * p_feasibilityQty) totalAssyMrpQty,  \n" +
                "				p_feasibilityQty AS mrpFeasibilityQty,  \n" +
                "				tsd.liveInternalVersion AS liveInternalVersion,  \n" +
                "				tsd.liveVersion AS liveVersion,  \n" +
                "				IFNULL(tsd.level, 0) AS bomAssyLevel  \n" +
                "  \n" +
                "		FROM 		tempSubAmmseblyData tsd  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 		rla.mfgPNID, a.qpa  \n" +
                "					FROM 		tempAssyConsolidateDetail a  \n" +
                "					INNER JOIN	rfq_lineitems_alternatepart rla ON rla.partID = a.refAssyId AND rla.isDeleted = 0  \n" +
                "					WHERE 		FIND_IN_SET(rla.rfqLineitemsID, a.consolidatedLineItemIDs)  \n" +
                "				) ld ON ld.mfgPNID = tsd.prPerPartID  \n" +
                "		GROUP BY 	tsd.prPerPartID, tsd.liveInternalVersion, tsd.liveVersion, tsd.level  \n" +
                "		ORDER BY 	tsd.level, tsd.prPerPartID;  \n" +
                "	 select * from temp_kit_allocation_assy_detail;  \n" +
                "-- select * from rfq_lineitem where partid = p_mainassyID;  \n" +
                "SELECT 	IFNULL(totalAssyBuildQty, 0)  \n" +
                "		INTO 	pKitQty  \n" +
                "		FROM 	temp_kit_allocation_assy_detail  \n" +
                "		WHERE 	partId = ifnull(p_subassyID,p_mainassyID)  ;  \n" +
                "/* Result Time based on Passing parameter*/  \n" +
                "IF (p_consolidateview) then  \n" +
                "	select 'You are in Consolidate Section' as a;  \n" +
                "elseif(p_subassyID) then /*In dividual BOM view*/  \n" +
                "SET @vFromSQLQuery = CONCAT(' SELECT	* FROM	(  \n" +
                "				SELECT 		c.id, 			 		partID AssyID, 		lineID,  \n" +
                "							/*custPNID,          custPN,  					custPIDCode,        custIsCustom,      		*/  \n" +
                "                            qpa, 				dnpQty,						unitName,			/*uomID,  \n" +
                "                            uomClassID,*/  		isPurchase,                /* parttypeID,*/			partTypeName FunctionalType,  \n" +
                "                            /*c.mountingtypeID,*/  mountingTypeName as MountingType,	IF(isPurchase  = 1,\"No\" ,\"Yes\") AS isCustConsignValue,  \n" +
                "							isInstall,			isBuyDNPQty,  				requiredQtyBuild,  	requirePinsBuild,  \n" +
                "                            SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0)),0)) availabelStock,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 0,IFNULL(d.availableStock, 0),0), 0)) availabelStockInPins,  \n" +
                "							SUM(IFNULL(fun_convertUOM(d.uom, c.uomID, IF(d.customerConsign = 1 AND d.customerID =',pCustomerId,',IFNULL(d.availableStock, 0),0)),0)) availabelStockCustomerConsign,  \n" +
                "							SUM(IFNULL((FLOOR(IFNULL(d.noOfPosition, 0)/IFNULL(c.numOfPosition, 0)) * IFNULL(c.numOfPosition, 0)) * IF(d.customerConsign = 1 AND d.customerID =',pCustomerId,',IFNULL(d.availableStock, 0),0), 0)) availabelStockCustomerConsignInPins  ,  \n" +
                "                             /* mfgCodeID,*/			mfgname,             /*        mfgpnid, */			mfgPN,  \n" +
                "							PIDCode /*,			mfgPNIdsWithPackaging,*/       description /* ,	  restrictCPNUseWithPermissionStep, 			                    restrictCPNUsePermanentlyStep,  \n" +
                "                            restrictCPNUseInBOMStep,        				restrictPackagingUsePermanently,  \n" +
                "							restrictPackagingUseWithpermission,          	cpnRoHsIcon,							cpnRoHsName,  \n" +
                "                            uomMismatchedStep,      						isNotRequiredKitAllocation, 			isNotRequiredKitAllocationValue,  \n" +
                "                            notRequiredKitAllocationReason,                 rfqLineItemsID, 						rfqLineItemsId,  \n" +
                "                            c.numOfPosition,								mfgPart, 								c.connecterTypeID,  \n" +
                "							(CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END) cpnMfgPNIdsWithPackaging */  \n" +
                "						FROM	( SELECT 		a.id, 						partID, 			qpa, 			dnpQty,  \n" +
                "										lineID,     	uomID,							unitName,			uomClassID,		parttypeID,  \n" +
                "										partTypeName, 	mountingtypeID,					mountingTypeName,  	isPurchase,  \n" +
                "										(CASE WHEN uomMismatchedStep = 0 THEN 0 ELSE (qpa * IFNULL(',pKitQty,', 0)) END) requiredQtyBuild,  \n" +
                "										(CASE WHEN (uomMismatchedStep = 0 OR connecterTypeID != - 2)  \n" +
                "											THEN 0  \n" +
                "											ELSE (qpa * IFNULL(',pKitQty,', 0) * IFNULL(numOfPosition, 0))  \n" +
                "										END) requirePinsBuild,  \n" +
                "                                         mfgcodeid,                                        mfgpartdetail.mfgname,  \n" +
                "                                        mfgpnid,										mfgPN AS mfgPN,  \n" +
                "                                        pidcode,  \n" +
                "										mfgPNIdsWithPackaging AS mfgPNIdsWithPackaging    ,  \n" +
                "									isInstall,  \n" +
                "									isBuyDNPQty,				description,		custPNID,         custPN,  			custPIDCode,  \n" +
                "                                    custIsCustom,              	restrictCPNUseWithPermissionStep, 	  restrictCPNUsePermanentlyStep,  \n" +
                "									restrictCPNUseInBOMStep,    restrictPackagingUsePermanently, 	  restrictPackagingUseWithpermission,  \n" +
                "									cpnRoHsIcon,				cpnRoHsName,		uomMismatchedStep,                   isNotRequiredKitAllocation,  \n" +
                "									isNotRequiredKitAllocationValue, 			/*	notRequiredKitAllocationReason,  */  \n" +
                "									/*a.rfqLineItemsID,*/ 			a.rfqLineItemsId, 	numOfPosition,	  mfgPart, 			connecterTypeID  \n" +
                "						FROM  \n" +
                "						(  	SELECT 	k.id,									k.partID,  k.isPurchase,  \n" +
                "										(CASE WHEN k.isPurchase = 1 OR k.isInstall = 1  \n" +
                "												THEN (IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "												ELSE (IF(k.isBuyDNPQty = \"Y\" OR k.isBuyDNPQty = \"P\" OR k.isBuyDNPQty = \"C\", IFNULL(k.dnpQty, 0), 0))  \n" +
                "										END) AS qpa,  		IFNULL(k.dnpQty, 0) dnpQty,          	k.lineID,  \n" +
                "										k.uomID,			u.unitName unitName,					u.measurementTypeID uomClassID,  \n" +
                "										kl.parttypeID,		FUN_GETPARTTYPENAMEBYID(kl.parttypeID) partTypeName,  \n" +
                "										kl.mountingtypeID,	FUN_GETMOUNTINGTYPENAMEBYID(kl.mountingtypeID) mountingTypeName,  \n" +
                "										k.id AS rfqLineItemsId,   	k.numOfPosition,  \n" +
                "										k.isInstall,		k.isBuyDNPQty,          				CONCAT(IFNULL(k.description, ''), IFNULL(kl.description, '')) AS description,  \n" +
                "										k.restrictCPNUseWithPermissionStep,	                        k.restrictCPNUsePermanentlyStep,  \n" +
                "                                        k.restrictCPNUseInBOMStep,				                  k.isNotRequiredKitAllocation,  \n" +
                "                                        (CASE WHEN k.isNotRequiredKitAllocation = 1 THEN \"Yes\" ELSE \"No\" END) AS isNotRequiredKitAllocationValue,  \n" +
                "															k.custPNID, 					k.custPN,  \n" +
                "										FUN_GETASSYPIDCODEBYID(k.custPNID) custPIDCode,				cpnCom.isCustom custIsCustom,	cpnCom.restrictPackagingUsePermanently,  \n" +
                "										cpnCom.restrictPackagingUseWithpermission,					FUN_GETROHSICONBYID(cpnCom.RoHSStatusID) cpnRoHsIcon,  \n" +
                "										FUN_GETROHSNAMEBYID(cpnCom.RoHSStatusID) cpnRoHsName,		kl.uomMismatchedStep,			kl.connecterTypeID,  \n" +
                "										(Case when k.custPNID is not null then concat(k.custPNID,\",\",kl.mfgPart) else kl.mfgPart end) mfgPart  \n" +
                "								FROM 	(  \n" +
                "										SELECT 		 kal.partID, 	kal.rfqLineItemsID, 	group_concat(c.id) mfgPart,  \n" +
                "												max(c.connecterTypeID) connecterTypeID,  \n" +
                "												(case 	when min(c.functionalCategoryID) = max(c.functionalCategoryID) /* Matched Mounting Type */  \n" +
                "														then min(c.functionalCategoryID)  \n" +
                "                                                        when min(c.functionalCategoryID) !=  max(c.functionalCategoryID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.functionalCategoryID ELSE null END))  \n" +
                "														else -1 /* MisMatched */  \n" +
                "												end) parttypeID,  \n" +
                "												(case 	when min(c.mountingTypeID) = max(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "															then  min(c.mountingTypeID)  \n" +
                "														when min(c.mountingTypeID) !=  max(c.mountingTypeID) and max(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "															then max((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE null END))  \n" +
                "														else  -1  \n" +
                "												end) mountingTypeID,  \n" +
                "												min(kal.uomMismatchedStep) uomMismatchedStep,    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "												group_concat(kal.description) AS description  \n" +
                "										FROM 	rfq_lineitems_alternatepart kal  \n" +
                "										JOIN 	component c on kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "										WHERE	 	kal.partID =  ',ifnull(p_subassyID,p_mainassyID),'  \n" +
                "												AND 	kal.isDeleted = 0  \n" +
                "												AND		c.isDeleted = 0  \n" +
                "										GROUP BY  kal.partID, kal.rfqLineItemsID  \n" +
                "									) AS kl  \n" +
                "							inner join 	rfq_lineitems k on  k.partID = kl.partID AND k.id = kl.rfqLineItemsID  AND 1 = 1  \n" +
                "							INNER JOIN 	uoms u ON k.uomID = u.id AND u.isDeleted = 0  \n" +
                "							left join 	component cpnCom on k.custPNID = cpnCom.id and cpnCom.isDeleted = 0  \n" +
                "							where 		 k.isDeleted = 0  \n" +
                "						) AS a      inner join  \n" +
                "									( SELECT        a.id, a.rfqLineItemsID ,a.mfgCodeID,a.mfgname,a.mfgpnid ,a.mfgPN,  a.PIDCode,  \n" +
                "													GROUP_CONCAT(a.mfgPNID)  AS mfgPNIdsWithPackaging        ,  \n" +
                "													GROUP_CONCAT(  \n" +
                "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
                "				a.RoHSStatusID,''@@@'',  \n" +
                "				IFNULL(a.name,\"\"),''@@@'',  \n" +
                "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
                "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
                "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
                "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
                "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'',REPLACE(IFNULL(a.mfgPNDescription,\"-\"),\",\",\"***\"),''@@@'','''',''@@@'',  \n" +
                "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
                "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
                "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
                "				a.mfgCode,''@@@'',  \n" +
                "				a.mfgPNID,''@@@'',  \n" +
                "				IFNULL(a.isDocumentUpload,0),''@@@'' ,  \n" +
                "                IFNULL(a.custAssyPN,0),''@@@'' ,  \n" +
                "                IFNULL(a.mismatchFunctionalCategoryStep,0) ,''@@@'' ,  \n" +
                "                IFNULL(a.leadTime,0)  \n" +
                "                SEPARATOR \"', v_GroupConcatSeparator ,'\")   mfgpn_otherdetail  \n" +
                "			FROM  \n" +
                "			(  select z.id,z.rfqLineItemsID,z.mfgPNID, z.mfgCodeID, m.mfgname,z.mfgPNDescription,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
                "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
                "                        approvedMountingType,  \n" +
                "                        mismatchMountingTypeStep,  \n" +
                "                        mismatchFunctionalCategoryStep,  \n" +
                "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
                "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
                "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  \n" +
                "                        z.feature, z.mfgpn,z.isDocumentUpload,  z.leadTime,  \n" +
                "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
                "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
                "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
                "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
                "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
                "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
                "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
                "						  from  \n" +
                "							(SELECT l.id, l.id as rfqLineItemsID ,  \n" +
                "									IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
                "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
                "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
                "									IFNULL(d.mfgPNDescription, c.mfgPNDescription) AS mfgPNDescription,  \n" +
                "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
                "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
                "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
                "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
                "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
                "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
                "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
                "									ELSE    /*Packaging Alias*/  \n" +
                "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
                "									END AS restrictUsePermanentlyStep,  \n" +
                "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
                "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
                "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
                "									ELSE     /*Packaging Alias*/  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
                "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasStep,  \n" +
                "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
                "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
                "									ELSE  \n" +
                "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
                "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
                "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
                "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
                "                                    IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
                "									IFNULL(d.leadTime,c.leadTime) AS leadTime,  \n" +
                "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
                "									FROM rfq_lineitems_alternatepart  al  \n" +
                "									JOIN rfq_lineitems l ON  l.id = al.rfqlineitemsid  \n" +
                "									JOIN component c ON al.mfgPNID = c.id  \n" +
                "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
                "									and  not exists ( select 1  from  rfq_lineitems_alternatepart x  \n" +
                "													where  x.rfqlineitemsid  =  al.rfqlineitemsid  \n" +
                "															 and x.mfgpnid = d.id  \n" +
                "															 and d.id != c.id and x.isdeleted = 0)  \n" +
                "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID =', pCustomerId ,' AND ccl.isDeleted = 0  \n" +
                "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID =', pCustomerId ,' AND ccld.isDeleted = 0  \n" +
                "									WHERE  l.partid = ',ifnull(p_subassyID,p_mainassyID),'  \n" +
                "									 AND al.isDeleted = 0 and l.isdeleted  =0 AND c.isGoodPart = 1  ',  \n" +
                "									CASE WHEN (pPackagingAlias = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
                "							) z Left join  mfgcodemst m on m.id = mfgCodeID  \n" +
                "                             group by z.id,z.rfqLineItemsID  , z.mfgPNID ,z.mfgCodeID,z.mfgPNDescription,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep ,z.mismatchFunctionalCategoryStep , `z`.`custAssyPN`,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload, z.leadTime  \n" +
                "							) a group by   a.id, a.rfqLineItemsID ,a.mfgCode,a.mfgname,a.mfgpnid ,a.mfgPN,  a.PIDCode  \n" +
                "							) as mfgpartdetail   on a.id = mfgpartdetail.id  \n" +
                "					) AS c  \n" +
                "					LEFT JOIN	vu_deducted_allocation_available_Stock d ON FIND_IN_SET(d.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",mfgPNIdsWithPackaging) ELSE mfgPNIdsWithPackaging END))  \n" +
                "					GROUP BY 	c.id, 					partID, 				qpa, 					dnpQty,  \n" +
                "								lineID,     		uomID,						unitName,				parttypeID,				partTypeName,  \n" +
                "								c.mountingtypeID,	mountingTypeName,          	requiredQtyBuild,   	requirePinsBuild,		mfgPN,  \n" +
                "								mfgPNIdsWithPackaging,							isInstall,				isBuyDNPQty,  \n" +
                "                                description,		custPNID,                   custPN,  				custPIDCode, 			custIsCustom,  \n" +
                "                                restrictCPNUseWithPermissionStep, 				restrictCPNUsePermanentlyStep, 					restrictCPNUseInBOMStep,  \n" +
                "                                restrictPackagingUsePermanently, 		        restrictPackagingUseWithpermission,          	cpnRoHsIcon,  \n" +
                "                                cpnRoHsName,		uomMismatchedStep,          isNotRequiredKitAllocation, 					isNotRequiredKitAllocationValue,  \n" +
                "                                /*notRequiredKitAllocationReason,*/                 rfqLineItemsID, c.numOfPosition,  \n" +
                "                                mfgPart, 			c.connecterTypeID,			uomClassID  \n" +
                "		) As mainData  \n" +
                "			WHERE 1 = 1 ', ifnull(vFilterWhereClause,\"and 1=1\") ,'  ORDER BY `lineID` ASC') ;  \n" +
                "end if;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_BomstockPositionResult;  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS temp_BomstockPositionResult AS \", @vFromSQLQuery);  \n" +
                "   #select 2, @vSQLMainQuery;  \n" +
                "   PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "    EXECUTE mainQuery;  \n" +
                "    select  * from temp_BomstockPositionResult;  \n" +
                "  \n" +
                "/*Get BOM data  */  \n" +
                "-- CREATE TEMPORARY TABLE IF NOT EXISTS temp_rfqLineItemsKitsResult AS  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5761,'2.00','V1',' create new sp Sproc_bom_stock_position - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5761:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_AddCustomerPackingSlip;  \n" +
                "CREATE PROCEDURE `Sproc_AddCustomerPackingSlip`(  \n" +
                "	IN pCPSData JSON,  \n" +
                "    IN puserID INT,  \n" +
                "	IN puserRoleID INT ,  \n" +
                "	IN pSystemId VARCHAR(20),  \n" +
                "	IN pPackingSlipId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vTermsDays INT ;  \n" +
                "	DECLARE v_incrementI INT;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customer_packingslip;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customer_packingslip AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "			pCPSData,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",  \n" +
                "				`packingSlipType` INT PATH \"$.packingSlipType\",  \n" +
                "				`customerID` INT PATH \"$.customerID\" ,  \n" +
                "				`status` INT PATH \"$.status\",  \n" +
                "				`subStatus` INT PATH \"$.subStatus\",  \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",  \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",  \n" +
                "				`poDate` DATE PATH \"$.poDate\",  \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",  \n" +
                "				`soDate` DATE PATH \"$.soDate\",  \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,  \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,  \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,  \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",  \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,  \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,  \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,  \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,  \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,  \n" +
                "				`billToId` INT PATH \"$.billToId\" ,  \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,  \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,  \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,  \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,  \n" +
                "				`termsId` INT PATH \"$.termsId\" ,  \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,  \n" +
                "				`contactPersonId` INT PATH \"$.contactPersonId\",  \n" +
                "				`revision` TEXT PATH \"$.revision\",  \n" +
                "				`isZeroValue` TINYINT PATH \"$.isZeroValue\",  \n" +
                "				`isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\",  \n" +
                "				`poRevision` VARCHAR(50) PATH \"$.poRevision\" ,  \n" +
                "				`isAskForVersionConfirmation` TINYINT PATH \"$.isAskForVersionConfirmation\" ,  \n" +
                "                `carrierID` INT PATH \"$.carrierID\",  \n" +
                "                `carrierAccountNumber` VARCHAR(50) PATH \"$.carrierAccountNumber\"  \n" +
                "			)  \n" +
                "		) AS CustPS_JT;  \n" +
                "  \n" +
                "		INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "				packingSlipDate,shippingMethodID,  \n" +
                "				packingSlipComment,headerComment,sorevision,  \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,  \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,  \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus,  \n" +
                "				totalAmount, billToId,shipToId ,intermediateShipmentId,  \n" +
                "				contactPersonId, revision, isZeroValue ,isAlreadyPublished, poRevision,  \n" +
                "                isAskForVersionConfirmation, carrierID, carrierAccountNumber)  \n" +
                "		SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "					packingSlipDate,shippingMethodID,  \n" +
                "					packingSlipComment,headerComment,sorevision,freeOnBoardId,  \n" +
                "					puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,  \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,  \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus ,  \n" +
                "					totalAmount, billToId,shipToId ,intermediateShipmentId ,  \n" +
                "					contactPersonId,  revision, isZeroValue, isAlreadyPublished, poRevision ,  \n" +
                "                    0, carrierID, carrierAccountNumber  \n" +
                "		FROM temp_customer_packingslip ;  \n" +
                "  \n" +
                "		SET pPackingSlipId=LAST_INSERT_ID();  \n" +
                "		--  Response 0  \n" +
                "        SELECT pPackingSlipId packingSlipId;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_customer_packingslip;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5762,'2.00','V1','Task 40151: Update Carrier detail in CPS/CINV report and Add CPS pop-up- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5762:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerPackingslipReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipReportDetails`(  \n" +
                "	IN cpid INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	SELECT  \n" +
                "    cp.id,  \n" +
                "    cp.status,  \n" +
                "    cp.packingSlipType,  \n" +
                "    cp.packingSlipNumber AS PackingSlip,  \n" +
                "    cp.packingSlipDate AS PackingSlipDate,  \n" +
                "    cp.poDate AS PODate,  \n" +
                "    cp.soNumber AS SalesOrderNumber,  \n" +
                "    cp.poNumber AS PONumber,  \n" +
                "    cp.packingSlipComment,  \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,  \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,  \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,  \n" +
                "    cp.soDate AS SODate,  \n" +
                "    cp.sorevision AS SORevision,  \n" +
                "	cp.billingAddress AS SoldToAddress,  \n" +
                "	cp.shippingAddress AS ShippingAddress,  \n" +
                "	cp.intermediateAddress AS IntermediateAddress,  \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo), '-') AS SalesOrderPersonName,  \n" +
                "	fun_getUserNameByID(cp.updatedBy) AS  preparedBy, us.emailAddress, emp.phExtension ,  \n" +
                "    cp.revision packingSlipVersion  ,  \n" +
                "    '1.00' docNumber ,  \n" +
                "    cp.systemID AS legalNumber,  \n" +
                "    sm.isBlanketPO,  \n" +
                "	CASE WHEN sm.isBlanketPO=1 THEN 'Yes' ELSE 'No' END blanketPOText,  \n" +
                "    gcCarrier.gencCategoryName carrier  \n" +
                "FROM   customer_packingslip cp  \n" +
                "LEFT JOIN salesordermst sm ON sm.id = cp.refSalesOrderID AND sm.isDeleted = 0  \n" +
                "LEFT JOIN genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId AND gc.isDeleted = 0  AND gc.categoryType = 'Shipping Methods'  \n" +
                "LEFT JOIN genericcategory gcc ON gcc.gencCategoryID = cp.termsID AND gcc.isDeleted = 0  AND gcc.categoryType = 'Payment Terms'  \n" +
                "LEFT JOIN genericcategory gcCarrier ON gcCarrier.gencCategoryID = cp.carrierID AND gcCarrier.isDeleted = 0  AND gcCarrier.categoryType = 'Carrier'  \n" +
                "LEFT JOIN users us ON us.id = cp.updatedBy  \n" +
                "LEFT JOIN employees emp ON emp.id = us.employeeID  \n" +
                "WHERE  cp.isDeleted = 0 AND cp.id = cpid  \n" +
                "LIMIT 1;  \n" +
                "  \n" +
                "SELECT  \n" +
                "	cpd.lineID AS PSLine,  \n" +
                "    cpd.id AS cpDetID,  \n" +
                "    ss.releaseNumber,  \n" +
                "    cpd.refCustPackingSlipID AS cpID,  \n" +
                "    cpd.partId,  \n" +
                "    IFNULL(cpd.shipQty,0) AS ShippedQty,  \n" +
                "    CASE WHEN c.partType = 4 THEN NULL ELSE  IFNULL(cpd.remainingQty,0) END AS RemainingQty,  \n" +
                "    cpd.custPOLineID AS POLine,  \n" +
                "    cpd.shippingNotes AS ShippingComment,  \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN  fun_getGenericCategoryNameByID(cpd.refChargesTypeID)  \n" +
                "		WHEN (c.iscustom = 1) THEN  c.custAssyPN  \n" +
                "		WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN  c.mfgPN  \n" +
                "		ELSE ''  END) AS PartNumber,  \n" +
                "	 CASE WHEN c.partType = 4 THEN '' ELSE  FUN_GETUOMABBREVIATIONBYID(c.uom) END AS UOM,  \n" +
                "    IFNULL(c.rev, '') AS Revision,  \n" +
                "    c.partType,  \n" +
                "    CONCAT(IFNULL(REPLACE(cpd.assyDescription,'  \n" +
                "','<br/>'), ''), '<br/>',  \n" +
                "            IFNULL(CONCAT(' ', rr.name), ''),  \n" +
                "            IFNULL(CONCAT(', ',  \n" +
                "                            cpd.standrads),  \n" +
                "                    ''),  \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton,  \n" +
                "            CASE WHEN cpd.poReleaseNumber IS NOT NULL THEN CONCAT('PO Release#: ',cpd.poReleaseNumber)  WHEN  cpd.refBlanketPONumber IS NOT NULL THEN CONCAT('Ref. Blanket PO#: ',cpd.refBlanketPONumber)  \n" +
                "            ELSE '' END  refBlanketPONumber  ,  \n" +
                "           replace(cpd.releaseNotes,'  \n" +
                "','<br/>')  AS releaseNotes  \n" +
                "FROM  \n" +
                "    customer_packingslip_det cpd  \n" +
                "        LEFT JOIN  \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id  \n" +
                "        AND cp.isDeleted = 0  \n" +
                "        LEFT JOIN  \n" +
                "    component c ON c.id = cpd.partid  \n" +
                "        LEFT JOIN  \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID  \n" +
                "        AND sd.isDeleted = 0  \n" +
                "        LEFT JOIN  \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID  \n" +
                "    LEFT JOIN  \n" +
                "    salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id  \n" +
                "        AND ra.partID = cpd.partId  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id  \n" +
                "WHERE  \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid AND cpd.refChargesTypeID IS NULL ;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5763,'2.00','V1','Task 40151: Update Carrier detail in CPS/CINV report and Add CPS pop-up- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5763:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getSalesOrderListAgainstShipment;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderListAgainstShipment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pCustomerID INT,  \n" +
                "    IN pSearchText VARCHAR(1000) ,  \n" +
                "    IN pSoWorkingStatus TINYINT,  \n" +
                "    IN pAllowToUpdateComment TINYINT ,  \n" +
                "    IN pSortByColumn TINYINT  ,  \n" +
                "    IN pSoStatus TINYINT,  \n" +
                "    IN pSortingOrder TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE headerWhereClause VARCHAR(3000);  \n" +
                "   -- DECLARE detailWhereClause VARCHAR(1000);  \n" +
                "	DECLARE vOrderBy VARCHAR(200);  \n" +
                "   	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pSortByColumn = 1 THEN  \n" +
                "		SET vOrderBy =' order by customerName' ;  \n" +
                "    ELSEIF pSortByColumn = 2 THEN  \n" +
                "		SET vOrderBy =' order by poNumber ' ;  \n" +
                "    ELSEIF pSortByColumn = 3 THEN  \n" +
                "		SET vOrderBy =' order by poDate ' ;  \n" +
                "    ELSEIF pSortByColumn = 4 THEN  \n" +
                "		SET vOrderBy =' order by soDate ' ;  \n" +
                "    ELSE  \n" +
                "		SET vOrderBy =' order by soId Desc ' ;  \n" +
                "    END IF;  \n" +
                "    IF pSortingOrder = 2 THEN  \n" +
                "		SET vOrderBy = concat(vOrderBY , ' Desc');  \n" +
                "    ELSE  \n" +
                "		SET vOrderBy = concat(vOrderBY , ' Asc');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN  \n" +
                "		SET headerWhereClause = concat(\" (salesOrder.customerID=\",pCustomerID,\") \");  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = ' 1=1 ';  \n" +
                "    END IF;  \n" +
                "    IF pSoWorkingStatus IS  NULL OR pSoWorkingStatus = 0 THEN  \n" +
                "		SET headerWhereClause = concat(headerWhereClause, ' AND 1=1 ');  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = concat(headerWhereClause, ' and salesOrder.workingStatus = ' , pSoWorkingStatus)  ;  \n" +
                "    END IF;  \n" +
                "    IF pSoStatus IS NULL OR pSoStatus <> -1 THEN  \n" +
                "		SET headerWhereClause = concat(headerWhereClause, ' and salesOrder.`status` = ' , pSoStatus)  ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pSearchText IS NOT NULL  THEN  \n" +
                "		SET headerWhereClause = CONCAT(headerWhereClause ,\" AND  (salesOrder.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.poNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.customerName like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.shippingComment like '%\",pSearchText,\"%' \",  \n" +
                "                                    CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR salesOrder.internalComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
                "                                    \" or salesOrder.soId in (select refSalesOrderID from salesorderdet  sodet  \n" +
                "														 join component comp on comp.id = sodet.partID and sodet.isDeleted = 0  \n" +
                "                                                         left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
                "																	from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sodet.id  and workOrderDet.partID = sodet.partId  \n" +
                "														 where sodet.isDeleted = 0	and (comp.PIDCode like '%\",pSearchText,\"%' OR comp.mfgPN like '%\",pSearchText,\"%'  \n" +
                "																OR comp.nickName like '%\",pSearchText,\"%' OR sodet.woComment like '%\",pSearchText,\"%'  \n" +
                "                                                                OR sodet.internalComment like '%\",pSearchText,\"%'\",  \n" +
                "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.remark like '%\",pSearchText,\"%'\") else '' END,  \n" +
                "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.releaseLevelComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
                "                                                                \" OR workOrderDet.woList like '\",pSearchText,\"%'  )	))\");  \n" +
                "  \n" +
                "    END IF;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	SET @SQLStatement1 = concat(\"CREATE TEMPORARY TABLE temp_so_mst AS  select soId, salesOrderNumber,  \n" +
                "						soDate, poNumber, poDate, poRevision, poRevisionDate,  \n" +
                "						sorevision, ifnull(shippingComment,'-') shippingComment, internalComment, isBlanketPO, isLegacyPO, isRmaPO,  \n" +
                "                        soStatus, soStatusText,  shippingMethodID,termsID,freeOnBoardId, salesCommissionTo,contactPersonId,  \n" +
                "						customerID, mfgCode, mfgName, customerName,  \n" +
                "                        lastCPSId,lastCPSNumber,lastCPSDate,ifnull(lastCPSComment,'-') lastCPSComment,CPSCount,  CPSDraftCnt,  \n" +
                "                        billingAddressID, intermediateShipmentId,  \n" +
                "                        shippingAddressID,defaultAddress, companyName,personName,division,street1,street2, street3,city, state,  \n" +
                "						postcode,countryName,email,contact,phExtension,faxCountryCode, faxNumber , workingStatus,  \n" +
                "                        isLegacyPOText,isBlanketPOText,isRmaPOText,blanketPOOption, isAlreadyPublished  ,  \n" +
                "                        carrierID,carrierAccountNumber  \n" +
                "    from (select som.id as soId, som.salesOrderNumber,  \n" +
                "            som.soDate, som.poNumber, som.poDate, som.poRevision, som.poRevisionDate,  \n" +
                "            som.revision as sorevision , som.shippingComment, som.internalComment,  \n" +
                "            som.isBlanketPO, som.isLegacyPO, som.isRmaPO, som.customerID,  \n" +
                "            som.status as soStatus ,(case when som.`status` = 1 then 'Published' else 'Draft' end) soStatusText,  \n" +
                "            som.shippingMethodID,som.termsID,som.freeOnBoardId, som.salesCommissionTo,som.contactPersonId,  \n" +
                "            som.billingAddressID, som.intermediateShipmentId,  \n" +
                "            cust.mfgCode, cust.mfgName, fun_GetFormattedMfgCode(cust.mfgCode,cust.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
                "            cpsDetails.lastCPSId,  \n" +
                "            cpsDetails.lastCPSNumber,  \n" +
                "            cpsDetails.lastCPSDate,  \n" +
                "			cpsDetails.lastCPSComment,  \n" +
                "            cpsDetails.CPSCount,  \n" +
                "            ifnull(cpsDetails.CPSDraftCnt,0) CPSDraftCnt,  \n" +
                "            som.shippingAddressID,  \n" +
                "            custAddr.isDefault as defaultAddress,  \n" +
                "            custAddr.companyName,custAddr.personName,custAddr.division,custAddr.street1,custAddr.street2, custAddr.street3,custAddr.city, custAddr.state,  \n" +
                "            custAddr.postcode,country.countryName,custAddr.email,custAddr.contact,custAddr.phExtension,  \n" +
                "            custAddr.faxCountryCode, custAddr.faxNumber ,  \n" +
                "             (case when sodCnt.totalLineCount = sodCnt.completedLineCount  then 2  \n" +
                "				  when sodCnt.totalLineCount = sodCnt.canceledLineCount then -1  \n" +
                "                  else 1 end) workingStatus,  \n" +
                "            (case when som.isLegacyPO = 1 then 'Legacy PO' else '' end) isLegacyPOText,  \n" +
                "            (case when som.isRmaPO = 1 then 'RMA PO' else '' end) isRmaPOText,  \n" +
                "            (case when som.isBlanketPO = 1 then 'Blanket PO' else '' end) isBlanketPOText,  \n" +
                "            som.blanketPOOption,som.`status`,som.isAlreadyPublished ,  \n" +
                "            som.carrierID, som.carrierAccountNumber  \n" +
                "	from salesordermst som  \n" +
                "    join mfgcodemst cust on cust.id = som.customerID and cust.isDeleted = 0  \n" +
                "	left join customer_addresses custAddr on  custAddr.customerId = som.customerID and custAddr.id = som.shippingAddressID and custAddr.isDeleted = 0  \n" +
                "	left join countrymst country on country.countryID = custAddr.countryID and country.isDeleted = 0  \n" +
                "    left join ( select  a.refSalesOrderID, max(lastCPSId) lastCPSId, max(lastCPSNumber) lastCPSNumber,  \n" +
                "				max(lastCPSDate) lastCPSDate, max(lastCPSComment) lastCPSComment, max(CPSCount) CPSCount, max(CPSDraftCnt) CPSDraftCnt  \n" +
                "				from (select cps.refSalesOrderID, cps.id,cps.packingSlipNumber,cps.packingSlipDate,cps.packingSlipComment ,  \n" +
                "						LAST_VALUE(cps.id) over (partition by cps.refSalesOrderID) lastCPSId ,  \n" +
                "						LAST_VALUE(cps.packingSlipNumber) over (partition by cps.refSalesOrderID) lastCPSNumber,  \n" +
                "						LAST_VALUE(cps.packingSlipDate) over (partition by cps.refSalesOrderID) lastCPSDate,  \n" +
                "						LAST_VALUE(cps.packingSlipComment) over (partition by cps.refSalesOrderID) lastCPSComment,  \n" +
                "						count(1) over (partition by cps.refSalesOrderID) CPSCount,  \n" +
                "						cpd.draftCnt AS CPSDraftCnt  \n" +
                "				from customer_packingslip cps  \n" +
                "                left join (select custp.refSalesOrderID draftRefSoId, count(1) draftCnt from customer_packingslip custp  \n" +
                "						where custp.isDeleted = 0  and custp.substatus = 1 and transType ='P'  \n" +
                "						group by custp.refSalesOrderID) cpd on cpd.draftRefSoId = cps.refSalesOrderID  \n" +
                "                where cps.isDeleted = 0  and cps.transType = 'P' and cps.refsalesorderid is not null) a  \n" +
                "				group by a.refSalesOrderID) cpsDetails on cpsDetails.refSalesOrderID = som.id  \n" +
                "	left join (select sod.refSalesOrderID as soId ,  \n" +
                "				sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
                "				count(1) totalLineCount,  \n" +
                "				sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
                "				From salesorderdet sod where sod.isDeleted = 0  \n" +
                "				Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = som.id  \n" +
                "    where som.isDeleted = 0  \n" +
                "    ) salesOrder  \n" +
                "    where 1=1 and \", headerWhereClause,    vOrderBy , rowNumWhere) ;  \n" +
                " -- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, tbdComment, internalComment,  \n" +
                "				shippingComment, isCancle,partDescription,salesOrderDetStatus,custPOLineNumber,  \n" +
                "				PIDCode, mfgPN,mfgcodeID,mfrName, rohsName, rohsIcon,  nickName,  partType,  isCustom,custAssyPN,partSpecialNote,  \n" +
                "                po_TBDQty,shippedQty AS shippedQty , woComment  ,  \n" +
                "                cancelStatus, isHotJob,isDetHalt,  \n" +
                "                soWorkingStatus, materialTentitiveDocDate  ,refSODetID,blanketSOId,  \n" +
                "                blanketPONumber  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment as tbdComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                ifnull(sod.partDescription,'-') partDescription,  \n" +
                "                sod.salesOrderDetStatus,  \n" +
                "                sod.custPOLineNumber,  \n" +
                "				co.PIDCode,  \n" +
                "				co.mfgPN,  \n" +
                "                co.mfgcodeID,  \n" +
                "                fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName,  \n" +
                "				rohs.name AS rohsName,  \n" +
                "				rohs.rohsIcon,  \n" +
                "                co.nickName,  \n" +
                "                co.partType,  \n" +
                "                co.isCustom,  \n" +
                "                co.custAssyPN ,  \n" +
                "                co.specialNote partSpecialNote,  \n" +
                "				(sod.qty - ifnull(soDetQty.relQty,0)) po_TBDQty,  \n" +
                "                cpd.shippedQty,  \n" +
                "                ifnull(sod.woComment, workOrderDet.woList) woComment  ,  \n" +
                "                sod.isCancle cancelStatus,  \n" +
                "                sod.isHotJob,  \n" +
                "                (case when holdTrans.holdCnt > 0 then 1 else 0 end ) isDetHalt,  \n" +
                "                (CASE 	WHEN (sod.isCancle = 1) THEN 'Canceled'  \n" +
                "						WHEN (sod.`salesOrderDetStatus` = 1)   THEN 'In Progress'  \n" +
                "						ELSE 'Completed'  END) soWorkingStatus,  \n" +
                "                materialTentitiveDocDate ,  \n" +
                "                sod.refSODetID,  \n" +
                "                blanketPO.blanketSOId,  \n" +
                "                blanketPO.poNumber AS blanketPONumber  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "        left join (select sDetID, sum(qty) relQty from salesshippingmst where isDeleted = 0  group by sDetID) as soDetQty on  soDetQty.sDetID = sod.id  \n" +
                "        left join (select refSalesorderDetid , sum(cpd.shipQty) shippedQty  \n" +
                "					from customer_packingslip_det  cpd  \n" +
                "					join customer_packingslip cps on cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0  \n" +
                "                    where cpd.isDeleted = 0 and cps.transType='P' group by refSalesorderDetid) cpd on cpd.refSalesorderDetid = sod.id  \n" +
                "		left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
                "					from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sod.id  and workOrderDet.partID = sod.partId  \n" +
                "		left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "        left join mfgcodemst partMfg on partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
                "        left join (select refTransid ,count(1) holdCnt from holdunholdtrans where refType='PO' and isDeleted = 0 and endDate is NUll and `status` = 'H' group by refTransid) holdTrans  \n" +
                "			on holdTrans.refTransid = sod.id  \n" +
                "        left join (select blanketDet.id blanketDetId, blanketSO.id blanketSOId , blanketSO.poNumber from salesorderdet blanketDet  \n" +
                "				join salesordermst blanketSO on blanketSO.id = blanketDet.refSalesOrderID and blanketSO.isDeleted = 0  \n" +
                "                where blanketSO.isDeleted = 0) blanketPO on blanketPO.blanketDetId = sod.refBlanketPOID  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_rel_detail AS  \n" +
                "    select soDetId,  \n" +
                "				packingSlipDate,  \n" +
                "				promisedShipDate,  \n" +
                "                refCustPackingSlipID, packingSlipDetId,  \n" +
                "                  row_number() over (partition by releaseId,soDetId order by packingSlipDate desc) cpsIndex,  \n" +
                "				refSalesOrderID,releaseId, partID, lineID, custPOQty,  internalComment,  releaseLineComment,  \n" +
                "				shippingComment, isCancle, releaseNumber, soReleaseQty,  \n" +
                "                shippedQty AS shippedQty,  \n" +
                "                 cpsDetailCnt,  \n" +
                "                 isReadyToShip  ,cpsDetailShippedQty  ,  \n" +
                "                (case when  (soReleaseQty - cpsDetailShippedQty) <= 0 then 1 else 0 end) relCompletedStatus,  \n" +
                "                cpsSubStatus  ,poReleaseNumber,salesOrderDetStatus, 'completed ' as firstInsert  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "                soship.releaseNotes releaseLineComment,  \n" +
                "				sod.isCancle,  \n" +
                "                soship.shippingID releaseId,  \n" +
                "				soship.releaseNumber,  \n" +
                "				soship.promisedShipDate,  \n" +
                "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
                "				cpd.refCustPackingSlipID,  \n" +
                "                cpd.id packingSlipDetId,  \n" +
                "				cpd.shipQty AS shippedQty,  \n" +
                "                cp.packingSlipDate ,  \n" +
                "                SUM(cpd.shipQty) over (partition by soship.shippingID,sod.id ) cpsDetailShippedQty,  \n" +
                "                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
                "--                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex,  \n" +
                "                soship.isReadyToShip,  \n" +
                "                cp.subStatus AS cpsSubStatus,  \n" +
                "                soship.poReleaseNumber,  \n" +
                "                sod.salesOrderDetStatus  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
                "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
                "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
                "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "    -- order by a.refSalesOrderID,a.packingSlipDate desc;  \n" +
                "  \n" +
                "    /*  \n" +
                "    /*and ifnull((case when co.partType = 4 then sod.qty else  soship.qty end ),0) <=  \n" +
                "						(select ifnull(sum(cpdTot.shipQty),0) from customer_packingslip_det cpdTot  \n" +
                "						where cpdTot.isDeleted = 0 and cpdTot.refSalesorderDetid =  sod.id )  \n" +
                "    INSERT INTO temp_so_rel_detail  \n" +
                "    select soDetId,  \n" +
                "    packingSlipDate,  \n" +
                "			promisedShipDate,  \n" +
                "            refCustPackingSlipID, packingSlipDetId,  \n" +
                "				row_number() over (partition by releaseId,soDetId order by promisedShipDate desc) cpsIndex,  \n" +
                "				refSalesOrderID,releaseId, partID, lineID, custPOQty,  internalComment,  releaseLineComment,  \n" +
                "				shippingComment, isCancle, releaseNumber, soReleaseQty,  \n" +
                "                shippedQty AS shippedQty,  \n" +
                "                cpsDetailCnt,  \n" +
                "                isReadyToShip  ,cpsDetailShippedQty  ,  \n" +
                "                (case when  (soReleaseQty - cpsDetailShippedQty) <= 0 then 1 else 0 end) relCompletedStatus,  \n" +
                "                cpsSubStatus  ,poReleaseNumber,salesOrderDetStatus,'pending ' as firstInsert  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "                soship.releaseNotes releaseLineComment,  \n" +
                "				sod.isCancle,  \n" +
                "                soship.shippingID releaseId,  \n" +
                "				soship.releaseNumber,  \n" +
                "				soship.promisedShipDate,  \n" +
                "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
                "				cpd.refCustPackingSlipID,  \n" +
                "                cpd.id packingSlipDetId,  \n" +
                "				cpd.shipQty AS shippedQty,  \n" +
                "                cp.packingSlipDate ,  \n" +
                "                SUM(cpd.shipQty) over (partition by soship.shippingID,sod.id ) cpsDetailShippedQty,  \n" +
                "                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
                "--                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex,  \n" +
                "                soship.isReadyToShip,  \n" +
                "                cp.subStatus AS cpsSubStatus,  \n" +
                "                soship.poReleaseNumber,  \n" +
                "                sod.salesOrderDetStatus  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
                "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
                "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
                "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "        and ifnull((case when co.partType = 4 then sod.qty else soship.qty end),0) >  \n" +
                "						(select ifnull(sum(cpdTot.shipQty),0) from customer_packingslip_det cpdTot  \n" +
                "						where cpdTot.isDeleted = 0 and cpdTot.refSalesorderDetid =  sod.id )  \n" +
                "	) a  \n" +
                "    order by a.refSalesOrderID,a.soDetId,a.promisedShipDate;  \n" +
                "    */  \n" +
                "  \n" +
                "	/*SET @SQLStatement1 = CONCAT (\"SELECT mst.* from temp_so_mst mst  \n" +
                "    LEFT JOIN temp_so_detail det  on det.refSalesOrderID = mst.soId  \n" +
                "    where det.woComment like '%\",pSearchText,\"%'\");  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  */  \n" +
                "	SELECT * from temp_so_mst;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT soDetail.* from temp_so_detail AS soDetail  \n" +
                "								left join temp_so_mst mst on mst.soId = soDetail.refSalesOrderID  \n" +
                "                                order by soDetail.salesOrderDetStatus, soDetail.soDetId\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " 	SELECT * from temp_so_rel_detail  \n" +
                "		order by soDetId,relCompletedStatus,promisedShipDate;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5764,'2.00','V1','Task 40151: Update Carrier detail in CPS/CINV report and Add CPS pop-up- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5764:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2021 *********************************** */
                "ALTER TABLE `packingslip_invoice_payment`  \n" +
                "ADD COLUMN billToAddressID INT ;  \n" +
                "  \n" +
                "ALTER TABLE `packingslip_invoice_payment`  \n" +
                "ADD CONSTRAINT FK_packingslip_invoice_payment_billToAddressID  \n" +
                "FOREIGN KEY (billToAddressID) REFERENCES `customer_addresses`(id) ;  \n" +
                "  \n" +
                "ALTER TABLE `packingslip_invoice_payment`  \n" +
                "ADD COLUMN billToContactPersonID INT ;  \n" +
                "  \n" +
                "ALTER TABLE `packingslip_invoice_payment`  \n" +
                "ADD CONSTRAINT FK_packingslip_invoice_payment_billToContactPersonID  \n" +
                "FOREIGN KEY (billToContactPersonID) REFERENCES `contactperson`(personId) ;  \n" +
                "  \n" +
                "ALTER TABLE `packingslip_invoice_payment`  \n" +
                "ADD COLUMN billToContactPerson VARCHAR(1000) ;  \n" +
                "  \n" +
                "  \n" +
                "ALTER TABLE `packingslip_invoice_payment`  \n" +
                "ADD COLUMN payToAddressID INT ;  \n" +
                "  \n" +
                "ALTER TABLE `packingslip_invoice_payment`  \n" +
                "ADD CONSTRAINT FK_packingslip_invoice_payment_payToAddressID  \n" +
                "FOREIGN KEY (payToAddressID) REFERENCES `customer_addresses`(id) ;  \n" +
                "  \n" +
                "ALTER TABLE `packingslip_invoice_payment`  \n" +
                "ADD COLUMN payToContactPersonID INT ;  \n" +
                "  \n" +
                "ALTER TABLE `packingslip_invoice_payment`  \n" +
                "ADD CONSTRAINT FK_packingslip_invoice_payment_payToContactPersonID  \n" +
                "FOREIGN KEY (payToContactPersonID) REFERENCES `contactperson`(personId) ;  \n" +
                "  \n" +
                "ALTER TABLE `packingslip_invoice_payment`  \n" +
                "ADD COLUMN payToContactPerson VARCHAR(1000) ;  \n" +
                /* **************************** Add Script Version -> 05-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5765,'2.00','V1',' add new fields in packingslip_invoice_payment - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5765:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_GetFormattedContactPersonName` ;  \n" +
                "CREATE FUNCTION `fun_GetFormattedContactPersonName`(  \n" +
                "    pCPFirstName VARCHAR(255),  \n" +
                "    pCPMiddleName VARCHAR(255),  \n" +
                "    pCPLastName VARCHAR(255)  \n" +
                ") RETURNS VARCHAR(550) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vFormatValue INT;  \n" +
                "	DECLARE vContPersonFormattedName VARCHAR(550) DEFAULT '';  \n" +
                "	/* { id: '1', value: 'Firstname Middlename Lastname' }, { id: '2', value: 'Lastname Firstname Middlename' },  \n" +
                "		{ id: '3', value: 'Firstname Mname, Lastname' }, { id: '4', value: 'Lastname Mname, Firstname' },  \n" +
                "		{ id: '5', value: 'Firstname Mname. Lastname' }, { id: '6', value: 'Lastname Firstname Mname' },  \n" +
                "		{ id: '7', value: 'Lastname Firstname' },	{ id: '8', value: 'Firstname Lastname' } */  \n" +
                "  \n" +
                "	IF (pCPFirstName IS NOT NULL AND pCPFirstName != '' AND pCPLastName IS NOT NULL AND pCPLastName != '') THEN  \n" +
                "		SELECT `values` INTO vFormatValue  \n" +
                "		FROM systemconfigrations  \n" +
                "		WHERE `key`='ContactPersonDisplayNameFormat';  \n" +
                "  \n" +
                "		SELECT (CASE WHEN vFormatValue = 1 THEN CONCAT(pCPFirstName, ' ', IF(pCPMiddleName IS NOT NULL, CONCAT(pCPMiddleName, ' '),''), pCPLastName)  \n" +
                "				WHEN vFormatValue = 2 THEN CONCAT(pCPLastName, ' ', pCPFirstName, IF(pCPMiddleName IS NOT NULL, CONCAT(' ', pCPMiddleName),''))  \n" +
                "				WHEN vFormatValue = 3 THEN CONCAT(pCPFirstName, ' ', IF(pCPMiddleName IS NOT NULL, CONCAT(LEFT(pCPMiddleName,1), ', '),''), pCPLastName)  \n" +
                "				WHEN vFormatValue = 4 THEN CONCAT(pCPLastName, ' ', IF(pCPMiddleName IS NOT NULL, CONCAT(LEFT(pCPMiddleName,1), ', '),''), pCPFirstName)  \n" +
                "				WHEN vFormatValue = 5 THEN CONCAT(pCPFirstName, ' ', IF(pCPMiddleName IS NOT NULL, CONCAT(LEFT(pCPMiddleName,1), '. '),''), pCPLastName)  \n" +
                "				WHEN vFormatValue = 6 THEN CONCAT(pCPLastName, ' ', pCPFirstName, IF(pCPMiddleName IS NOT NULL, CONCAT(' ', LEFT(pCPMiddleName,1)),''))  \n" +
                "				WHEN vFormatValue = 7 THEN  CONCAT(pCPLastName, ' ', pCPFirstName)  \n" +
                "				WHEN vFormatValue = 8 THEN  CONCAT(pCPFirstName, ' ', pCPLastName)  \n" +
                "				ELSE CONCAT(pCPFirstName, ' ', IF(pCPMiddleName IS NOT NULL, CONCAT(pCPMiddleName, ' '),''), pCPLastName)  \n" +
                "			END) INTO vContPersonFormattedName;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	RETURN vContPersonFormattedName;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-01-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAddressbyIDForCheckPrint` ;  \n" +
                "CREATE FUNCTION `fun_getAddressbyIDForCheckPrint`(  \n" +
                "	pAddressID INT  ,  \n" +
                "	pPersonMstID INT  \n" +
                ") RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pAddress VARCHAR(2000);  \n" +
                "	DECLARE vFirstName VARCHAR(100) DEFAULT NULL;  \n" +
                "	DECLARE vMiddleName VARCHAR(100) DEFAULT NULL;  \n" +
                "	DECLARE vLastName VARCHAR(100) DEFAULT NULL;  \n" +
                "  \n" +
                "	IF (pPersonMstID IS NOT NULL) THEN  \n" +
                "		SELECT firstName, middleName, lastName INTO vFirstName, vMiddleName, vLastName  \n" +
                "		FROM contactperson  \n" +
                "		WHERE personId = pPersonMstID  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- ca.personName  \n" +
                "	SELECT CONCAT('ATTN: ', fun_GetFormattedContactPersonName(vFirstName, vMiddleName, vLastName) ,fun_getNewLineCharacter(),ca.street1,fun_getNewLineCharacter(),ca.city,', ',ca.state,' ',ca.postcode,fun_getNewLineCharacter(),c.countryName) INTO pAddress  \n" +
                "	FROM customer_addresses ca  \n" +
                "		LEFT JOIN countrymst c ON c.countryID=ca.countryID  \n" +
                "	WHERE ca.id=pAddressID ;  \n" +
                "  \n" +
                "	RETURN pAddress;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-01-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getPrimaryEmailFromJsonList` ;  \n" +
                "CREATE FUNCTION `fun_getPrimaryEmailFromJsonList`(  \n" +
                "	pJsonEmailList TEXT  \n" +
                ") RETURNS TEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_Email VARCHAR(150);  \n" +
                "  \n" +
                "  \n" +
                "		SELECT jsonTblEmails.email INTO v_Email  \n" +
                "		FROM JSON_TABLE(pJsonEmailList, '$[*]' COLUMNS (email VARCHAR(100)  PATH '$.email', isprimary TINYINT  PATH '$.isprimary')) jsonTblEmails  \n" +
                "		WHERE isprimary = 1  \n" +
                "		;  \n" +
                "  \n" +
                "  \n" +
                "	RETURN v_Email;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-01-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerRefund` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerRefund`(  \n" +
                "	IN pCustPaymentDetList JSON,  \n" +
                "	IN pCustCMDetList JSON,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedPayOfCust INT,  \n" +
                "	IN pTotSelectedCMOfCust INT,  \n" +
                "	IN pSystemID VARCHAR(20),  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT,  \n" +
                "	IN pRefGencTransModeID INT,  \n" +
                "	IN pOffsetAmount DECIMAL(18,8),  \n" +
                "	IN pBillToName VARCHAR(100) ,  \n" +
                "	IN pBillToAddress VARCHAR(255),  \n" +
                "	IN pIsMarkAsPaid TINYINT,  \n" +
                "	IN pBillToAddressID INT,  \n" +
                "	IN pBillToContactPersonID INT,  \n" +
                "	IN pBillToContactPerson VARCHAR(1000)  \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE insertedRefundMstID INT;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF(pTotSelectedPayOfCust > 0 AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustPaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustPaymentDetList_JT ;  \n" +
                "  \n" +
                "		/* get all customer payment > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS  \n" +
                "			SELECT psip.id AS paymentMstID,  \n" +
                "				psip.paymentAmount,  \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID = psip.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS totalRefundIssuedAmount  \n" +
                "			FROM packingslip_invoice_payment psip  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "			AND psip.isDeleted = 0 ;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected payment not found from db  \n" +
                "			> original Agreed Refund Amount Of Payment  mismatch  \n" +
                "			> Total Refund Issued Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustPaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "	ELSEIF (pTotSelectedCMOfCust > 0  \n" +
                "					AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN  \n" +
                "             /* get/map all Customer CM Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustCMDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustCMDetList_JT ;  \n" +
                "	 -- select * from temp_UI_CustCMDetList;  \n" +
                "  \n" +
                "	/* get all customer Refund > against total CM list > available in data base */  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS  \n" +
                "			SELECT cps.id AS custCreditMemoMstID,  \n" +
                "			IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount ,  \n" +
                "            (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment  \n" +
                "				WHERE refCustCreditMemoID = cps.id  \n" +
                "				AND refPaymentMode = 'CA'  \n" +
                "				AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo ,  \n" +
                "			 cps.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "            (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) totalRefundIssuedAmount  \n" +
                "		FROM customer_packingslip AS cps  \n" +
                "		WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "		AND cps.isDeleted = 0 ;  \n" +
                "         -- select * from temp_DB_Available_CustCMDetList;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected CM not found from db  \n" +
                "			> original Agreed Refund Amount Of Refund mismatch  \n" +
                "			> Total Refund Issued Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "			SELECT tucml.*  \n" +
                "			FROM temp_UI_CustCMDetList tucml  \n" +
                "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID  \n" +
                "			WHERE (  \n" +
                "				 (tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "		  -- select * from temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "		 SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	IF((((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0))  \n" +
                "					) THEN  \n" +
                "  \n" +
                "  \n" +
                "		INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "			`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "			`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "			`depositBatchNumber` ,  `offsetAmount`,`refGencTransModeID`,  \n" +
                "			`payToName` , `payToAddress`, `billToAddress` , `billToName` ,  \n" +
                "			`billToAddressID` , `billToContactPersonID` , `billToContactPerson` ,  \n" +
                "			`payToAddressID` , `payToContactPersonID` , `payToContactPerson` ,  \n" +
                "			`isMarkAsPaid` , `status` , `subStatus` ,  \n" +
                "			`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "			`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "		VALUES(pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,  \n" +
                "			pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,  \n" +
                "			pBankName, pRemark, pRefPaymentMode, pSystemID,  \n" +
                "			pDepositBatchNumber, pOffsetAmount , pRefGencTransModeID ,  \n" +
                "			pBillToName, pBillToAddress , pBillToAddress , pBillToName ,  \n" +
                "			pBillToAddressID , pBillToContactPersonID , pBillToContactPerson ,  \n" +
                "			pBillToAddressID , pBillToContactPersonID , pBillToContactPerson ,  \n" +
                "			pIsMarkAsPaid , 1 , 1 ,  \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "		SET insertedRefundMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF(pTotSelectedPayOfCust > 0) THEN  \n" +
                "			/* add selected refund payment details data */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,  \n" +
                "					`comment` ,  \n" +
                "					`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "					`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedRefundMstID, paymentAmountForSelectedPayment, paymentMstID,  \n" +
                "				COMMENT ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy1 AS  \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy2;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy2 AS  \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			/* update refund payment status details and lock status of defined payment */  \n" +
                "			UPDATE packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "						FROM packingslip_invoice_payment_det psipd  \n" +
                "						WHERE psipd.refPayementid IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy2)  \n" +
                "						AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "						AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "						GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "					ON psip.id = invPayDetTemp.refPayementid  \n" +
                "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "					ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "			SET  psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) = 0 THEN 'RL'  \n" +
                "						ELSE psip.lockStatus END ,  \n" +
                "				psip.refundStatus = (CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "							WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "							WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "						END) ,  \n" +
                "				updatedBy = pUserID,  \n" +
                "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy1)  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		ELSEIF(pTotSelectedCMOfCust > 0) THEN  \n" +
                "			/* add selected refund credit memo details data */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,  \n" +
                "					`comment` ,  \n" +
                "					`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "					`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedRefundMstID, paymentAmountForSelectedCM, custCreditMemoMstID,  \n" +
                "				COMMENT ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy1 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy2;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy2 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status and credit memo refund status   */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy1)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
                "					FROM packingslip_invoice_payment  \n" +
                "					WHERE refCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy2)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet  \n" +
                "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN  \n" +
                "									(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.refundStatus = (CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "							WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
                "							WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
                "						END) ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted payment */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - get all mis match amount records or deleted CM */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "  \n" +
                "	/* Resp[3] - newly inserted refund master id for Refund Transaction  */  \n" +
                "	SELECT insertedRefundMstID AS insertedRefundMstID;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy2;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-01-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerRefund` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerRefund`(  \n" +
                "	IN pCustPaymentDetList JSON,  \n" +
                "	IN pCustCMDetList JSON,  \n" +
                "	IN pCustRefundMstID INT,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedPayOfCust INT,  \n" +
                "	IN pTotSelectedCMOfCust INT,  \n" +
                "	IN pDeleteCustPaymentDetList JSON,  \n" +
                "	IN pDeleteCustCMDetList JSON,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT,  \n" +
                "	IN pOffsetAmount DECIMAL(18,8) ,  \n" +
                "	IN pBillToName VARCHAR(100) ,  \n" +
                "	IN pBillToAddress VARCHAR(255) ,  \n" +
                "	IN pIsMarkAsPaid TINYINT,  \n" +
                "	IN pSubStatus INT,  \n" +
                "	IN pStatus INT,  \n" +
                "	IN pBillToAddressID INT,  \n" +
                "	IN pBillToContactPersonID INT,  \n" +
                "	IN pBillToContactPerson VARCHAR(1000)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_db_mainRefundAmount DECIMAL(18,8) ;  \n" +
                "	IF(pTotSelectedPayOfCust > 0  \n" +
                "					AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN  \n" +
                "		/* get/map all Customer Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustPaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustPaymentDetList_JT ;  \n" +
                "		-- select * from temp_UI_CustPaymentDetList;  \n" +
                "  \n" +
                "		/* get all customer refund > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS  \n" +
                "			SELECT psip.id AS paymentMstID,  \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "				psipd.id AS paymentDetMstID,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID = psip.id  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0)  AS totalRefundIssuedAmount  \n" +
                "			FROM packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN packingslip_invoice_payment_det psipd  \n" +
                "					ON psipd.refPayementid = pCustRefundMstID AND psip.id = psipd.refRefundPaymentID AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "			AND psip.isDeleted = 0  \n" +
                "			AND psip.isPaymentVoided = 0 ;  \n" +
                "  \n" +
                "            -- select * from temp_DB_Available_CustPaymentDetList;  \n" +
                "  \n" +
                "            /* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected payment not found from db > tdacipl.paymentMstID comes NULL  \n" +
                "			> original agreed refund Amount Of payment Pay  mismatch > tdacipl.agreedRefundAmount comes NULL  \n" +
                "			> refund issued Amount mismatch > tdacipl.totalRefundIssuedAmount comes NULL  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustPaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "				-- select * from temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "  \n" +
                "  \n" +
                "				/* get/map all deleting customer Payment Detail List send from UI */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM 	JSON_TABLE(  \n" +
                "					pDeleteCustPaymentDetList,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "							`refRefundPaymentID` INT PATH \"$.refRefundPaymentID\"  \n" +
                "						)  \n" +
                "				) AS DeleteCustPaymentDetList_JT ;  \n" +
                "  \n" +
                "				 /* get all deleted invoice payment det (passed from UI but not in db)  \n" +
                "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS  \n" +
                "					SELECT id FROM packingslip_invoice_payment_det  \n" +
                "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
                "					AND (isDeleted = 1 OR isPaymentVoided = 1);  \n" +
                "  \n" +
                "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;  \n" +
                "  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) = 0)  \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0)) THEN  \n" +
                "  \n" +
                "			/* start - create/update/delete payment refund process */  \n" +
                "			IF(pDeleteCustPaymentDetList IS NOT NULL AND pDeleteCustPaymentDetList != '') THEN  \n" +
                "				/* delete those which are unselected(from UI) payment det */  \n" +
                "				UPDATE packingslip_invoice_payment_det  \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList_Copy1 AS  \n" +
                "					SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList ;  \n" +
                "  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy2;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList_Copy2 AS  \n" +
                "					SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList ;  \n" +
                "  \n" +
                "				/* update refund payment status details and lock status which are deleted (unselected from UI) */  \n" +
                "				UPDATE packingslip_invoice_payment psip  \n" +
                "					LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "							FROM packingslip_invoice_payment_det psipd  \n" +
                "							WHERE psipd.refPayementid IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList_Copy2)  \n" +
                "							AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "							AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "							GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "						ON psip.id = invPayDetTemp.refPayementid  \n" +
                "					LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "							FROM packingslip_invoice_payment_det  \n" +
                "							WHERE refRefundPaymentID IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "							GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "						ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "				SET  psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) = 0 THEN 'RL'  \n" +
                "						ELSE psip.lockStatus END ,  \n" +
                "					psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
                "								(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "								END)  \n" +
                "							ELSE 'NA' END),  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE psip.id IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList_Copy1)  \n" +
                "				AND psip.isPaymentVoided = 0  \n" +
                "				AND psip.isDeleted = 0 ;  \n" +
                "  			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all payment det amount whose amount is changed from UI */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedPayment , paymentMstID , COMMENT  \n" +
                "					FROM temp_UI_CustPaymentDetList  \n" +
                "					WHERE paymentDetMstID IS NOT NULL) tucipdl  \n" +
                "				ON pipd.id = tucipdl.paymentDetMstID  \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedPayment,0),  \n" +
                "				pipd.comment = tucipdl.comment ,  \n" +
                "				pipd.updatedBy = pUserID,  \n" +
                "				pipd.updateByRoleId = pUserRoleID ,  \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE pipd.refPayementid = pCustRefundMstID  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0  \n" +
                "			;  \n" +
                "			-- select * from packingslip_invoice_payment_det where refPayementid =pCustRefundMstID;  \n" +
                "  \n" +
                "			/* insert newly selected payment det */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,  \n" +
                "				`comment` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedPayment,0), paymentMstID,  \n" +
                "				COMMENT ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustPaymentDetList  \n" +
                "			WHERE paymentDetMstID IS NULL  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy1 AS  \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy2;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy2 AS  \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			/* update refund payment status details and lock status which are newly created/updated */  \n" +
                "			UPDATE packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "							FROM packingslip_invoice_payment_det psipd  \n" +
                "							WHERE psipd.refPayementid IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy2)  \n" +
                "							AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "							AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "							GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "						ON psip.id = invPayDetTemp.refPayementid  \n" +
                "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "					ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "			SET  psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) = 0 THEN (CASE WHEN psip.lockStatus = 'LC' THEN 'LC' ELSE 'RL' END)  \n" +
                "						ELSE psip.lockStatus END ,  \n" +
                "			       psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
                "							(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "							END)  \n" +
                "						ELSE 'NA' END) ,  \n" +
                "				updatedBy = pUserID,  \n" +
                "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy1)  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	/* customer credit memo refund cases */  \n" +
                "	ELSEIF (pTotSelectedCMOfCust > 0 AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN  \n" +
                "  \n" +
                "	        /* get/map all Customer CM Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustCMDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustCMDetList_JT ;  \n" +
                "		-- select temp_UI_CustCMDetList.* from temp_UI_CustCMDetList;  \n" +
                "  \n" +
                "		/* get all customer Refund > against total CM list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS  \n" +
                "				SELECT cps.id AS custCreditMemoMstID,  \n" +
                "				 cps.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "		    (SELECT IFNULL(SUM(paymentAmount),0)  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0  \n" +
                "			    ) totalRefundIssuedAmount  \n" +
                "			FROM customer_packingslip AS cps  \n" +
                "			WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "			AND cps.isDeleted = 0 ;  \n" +
                "  \n" +
                "		-- select temp_DB_Available_CustCMDetList.* from temp_DB_Available_CustCMDetList;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected CM not found from db  \n" +
                "			> original Agreed Refund Amount Of Refund mismatch  \n" +
                "			> Total Refund Issued Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "			SELECT tucml.*  \n" +
                "			FROM temp_UI_CustCMDetList tucml  \n" +
                "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID  \n" +
                "			WHERE (  \n" +
                "				(tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "			-- select temp_UI_Mismatch_Amount_CustCMDetList.* from temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "  \n" +
                "			/* get/map all deleting customer CM Detail List send from UI */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM 	JSON_TABLE(  \n" +
                "					pDeleteCustCMDetList,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "							`refRefundCustCreditMemoID` INT PATH \"$.refRefundCustCreditMemoID\"  \n" +
                "						)  \n" +
                "				) AS DeleteCustCMtDetList_JT ;  \n" +
                "				-- select * from temp_UI_Delete_CustCMDetList;  \n" +
                "  \n" +
                "			/* get all deleted invoice payment det (passed from UI but not in db)  \n" +
                "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustCMDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS  \n" +
                "					SELECT id FROM packingslip_invoice_payment_det  \n" +
                "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)  \n" +
                "					AND (isDeleted = 1 OR isPaymentVoided = 1);  \n" +
                "  \n" +
                "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) = 0)  \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0)) THEN  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			IF(pDeleteCustCMDetList IS NOT NULL AND pDeleteCustCMDetList != '') THEN  \n" +
                "				/* delete those which are unselected(from UI) CM det */  \n" +
                "				UPDATE packingslip_invoice_payment_det  \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "				-- select 'deleted refund for CM list' ;  \n" +
                "  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList_Copy1;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList_Copy1 AS  \n" +
                "					SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				/* update customer credit memo - payment status and credit memo refund status   */  \n" +
                "				UPDATE customer_packingslip cps  \n" +
                "				LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList)  \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "						GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "					 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "				SET  cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
                "									(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
                "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
                "									END)  \n" +
                "							ELSE 'NA' END),  \n" +
                "					cps.updatedBy = pUserID,  \n" +
                "					cps.updateByRoleId = pUserRoleID ,  \n" +
                "					cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE cps.id IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList_Copy1)  \n" +
                "				AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all CM det amount whose amount is changed from UI */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedCM , paymentMstID , COMMENT  \n" +
                "					FROM temp_UI_CustCMDetList  \n" +
                "					WHERE paymentDetMstID IS NOT NULL) tucipdl  \n" +
                "				ON pipd.id = tucipdl.paymentDetMstID  \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedCM,0),  \n" +
                "				pipd.comment = tucipdl.comment ,  \n" +
                "				pipd.updatedBy = pUserID,  \n" +
                "				pipd.updateByRoleId = pUserRoleID ,  \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE pipd.refPayementid = pCustRefundMstID  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "			/* insert newly selected CM det */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,  \n" +
                "				`comment` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedCM,0), custCreditMemoMstID,  \n" +
                "				COMMENT ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustCMDetList  \n" +
                "			WHERE paymentDetMstID IS NULL  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy1 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy2;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy2 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status and refund status   */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy1)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
                "					FROM packingslip_invoice_payment  \n" +
                "					WHERE refCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy2)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0) refCMAppliedDet  \n" +
                "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN  \n" +
                "									(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
                "								(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
                "								END)  \n" +
                "						      ELSE 'NA' END),  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* update payment master details */  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,  \n" +
                "			paymentType = pPaymentType, paymentAmount = pPaymentAmount ,  \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,  \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,  \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,  \n" +
                "			payToName = pBillToName , payToAddress = pBillToAddress,  \n" +
                "			billToAddress = pBillToAddress, billToName = pBillToName,  \n" +
                "			billToAddressID = pBillToAddressID, billToContactPersonID = pBillToContactPersonID,  \n" +
                "			billToContactPerson = pBillToContactPerson, payToAddressID = pBillToAddressID,  \n" +
                "			payToContactPersonID = pBillToContactPersonID, payToContactPerson = pBillToContactPerson,  \n" +
                "			isMarkAsPaid = pIsMarkAsPaid ,  \n" +
                "			subStatus = pSubStatus , `status` = pStatus ,  \n" +
                "			updatedBy = pUserID, offsetAmount = pOffsetAmount,  \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE id = pCustRefundMstID  \n" +
                "		-- AND isPaymentVoided = 0  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
                "  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)  \n" +
                "		) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted payment det (passed from UI but not in db) */  \n" +
                "	 SELECT * FROM temp_Deleted_CustPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - get all deleted CM det (passed from UI but not in db) */  \n" +
                "	SELECT * FROM temp_Deleted_CustCMDetList ;  \n" +
                "  \n" +
                "	/* Resp[3] - get all mis match payment amount records or deleted  */  \n" +
                "	 SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;  \n" +
                "  \n" +
                "	/*  Resp[4] - get all mis match credit memo amount records or deleted  */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList ;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy2;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy2;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 05-01-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerRefundByMstID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerRefundByMstID`(  \n" +
                "	IN pCustRefundMstID INT ,  \n" +
                "	IN pRefPaymentMode VARCHAR(5)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SELECT 	psip.id,  \n" +
                "			psip.mfgcodeID, psip.paymentNumber, psip.paymentDate, psip.paymentAmount,  \n" +
                "			psip.paymentType,  gc.gencCategoryName AS paymentMethodName,  \n" +
                "			psip.accountReference, psip.bankAccountMasID, psip.bankAccountNo,  \n" +
                "			psip.bankName,  psip.remark,  psip.isPaymentVoided, psip.systemId ,  \n" +
                "			psip.lockStatus, psip.isZeroPayment,  psip.depositBatchNumber,  \n" +
                "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  psip.offsetAmount , psip.refGencTransModeID ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided = 0 THEN  '' ELSE 'Voided' END) AS isRefundVoidedConvertedValue,  \n" +
                "			psip.status , psip.subStatus , psip.isMarkAsPaid ,  \n" +
                "			(CASE WHEN psip.subStatus = 1 THEN 'Pending' WHEN psip.subStatus = 2 THEN 'Approved to Refund'  \n" +
                "				WHEN psip.subStatus = 3 THEN 'Approved To Pay' WHEN psip.subStatus = 4 THEN 'Paid'  \n" +
                "				ELSE '' END) AS refundSubStatusText,  \n" +
                "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone , v_DateTimeDisplayFormat) AS lockedAt,  \n" +
                "			psip.billToName, psip.billToAddress,  \n" +
                "			psip.billToAddressID, psip.billToContactPersonID, psip.billToContactPerson,  \n" +
                "			fun_getMfgCodeAndNameByID(psip.mfgcodeID) AS mfgFullName ,  \n" +
                "			fun_getEmployeeIDByUserID(psip.updatedBy) AS updatedByEmp ,  \n" +
                "			fun_getEmployeeIDByUserID(psip.createdBy) AS createdByEmp ,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedbyInitial,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,  \n" +
                "			fun_getUserNameByID(psip.createdBy) createdbyInitial  \n" +
                "  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "			JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "		WHERE id = pCustRefundMstID  \n" +
                "		AND refPaymentMode = pRefPaymentMode  \n" +
                "		AND psip.isDeleted = 0  \n" +
                "		;  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 05-01-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCheckPrintAndRemittanceCustRefundReport` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceCustRefundReport`(  \n" +
                "	IN pPaymentID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		/* Refund master details */  \n" +
                "		SELECT pip.id, pip.accountReference,  \n" +
                "			pip.paymentDate, pip.paymentNumber,  \n" +
                "			pip.paymentAmount,  \n" +
                "			fun_NumberToWords(pip.paymentAmount) AS paymentAmountInWords,  \n" +
                "			pip.payToName ,   -- pip.payToAddress,  \n" +
                "			fun_getAddressbyIDForCheckPrint(pip.payToAddressID, pip.payToContactPersonID) AS payToAddress,  \n" +
                "			 pip.billToName AS customerName,  \n" +
                "			 -- pip.billToAddress AS customerAddress,  \n" +
                "			fun_getAddressbyIDForCheckPrint(pip.billToAddressID, pip.billToContactPersonID) AS customerAddress,  \n" +
                "			-- ca.email AS customerEmail, ca.faxNumber AS customerFaxNumber,  \n" +
                "			fun_getPrimaryEmailFromJsonList(cp.email) AS customerEmail ,  \n" +
                "			cp.faxNumber AS customerFaxNumber ,  \n" +
                "			pip.bankAccountNo, pip.refGencTransModeID,  \n" +
                "			g.gencCategoryName AS paymentType ,  \n" +
                "			pip.remark  \n" +
                "		FROM packingslip_invoice_payment pip  \n" +
                "			-- LEFT JOIN customer_addresses ca ON ca.customerId = pip.mfgcodeID AND ca.isDeleted = 0 AND ca.addressType = 'B' AND ca.isDefault = 1  \n" +
                "			LEFT JOIN contactperson cp ON cp.personId = pip.billToContactPersonID AND cp.isDeleted = 0  \n" +
                "			JOIN genericcategory g ON g.categoryType = 'Payable Payment Method' AND g.gencCategoryID = pip.paymentType  \n" +
                "		WHERE pip.id = pPaymentID  \n" +
                "		AND pip.refPaymentMode = 'CR'  \n" +
                "		AND pip.isDeleted = 0  ;  \n" +
                "  \n" +
                "		/* get refunded payment or refunded credit memo details */  \n" +
                "		SELECT  \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoNumber  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumber  \n" +
                "				ELSE NULL END) AS paymentCMNumber ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoDate  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentDate  \n" +
                "				ELSE NULL END) AS paymentCMDate ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.paymentAmount  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentAmount  \n" +
                "				ELSE NULL END) AS refundedAmountForPaymentCM ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.comment  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.comment  \n" +
                "				ELSE NULL END) AS commentForPaymentCM  \n" +
                "  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount, psipd.comment, psipt.paymentNumber, psipt.paymentDate  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0 AND psipt.isPaymentVoided = 0  \n" +
                "					WHERE psipd.refPayementid = pPaymentID  \n" +
                "					AND psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					 ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount ,psipd.comment, cps.creditMemoNumber, cps.creditMemoDate  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refPayementid = pPaymentID  \n" +
                "					AND psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		WHERE psip.id = pPaymentID  \n" +
                "		AND psip.refPaymentMode = 'CR'  \n" +
                "		AND psip.isDeleted = 0  ;  \n" +
                "  \n" +
                "		/* Default set company (isCompany = 1) address details  */  \n" +
                "		SELECT CONCAT('<b>', IF(ci.legalName = '' OR ci.legalName IS NULL,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'</b><br/>',IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''),'<br/>',  \n" +
                "			IFNULL(c.countryName,''))AS address,  \n" +
                "			ci.personName AS companyContactName,ci.registeredEmail AS companyEmail,ci.faxNumber,ci.contactNumber AS phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail AS email  \n" +
                "		FROM company_info ci  \n" +
                "		LEFT JOIN countrymst c ON ci.countryID=c.countryID AND c.isDeleted = 0  \n" +
                "		WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 05-01-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipInvoicePaymentToInformation` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipInvoicePaymentToInformation`(  \n" +
                "	IN pPaymentId INT,  \n" +
                "	IN pMfgCodeId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE v_mfgNameFormat INT;  \n" +
                "  \n" +
                "SELECT FUN_GETMFGCODENAMEFORMAT() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	IF pPaymentId IS NOT NULL THEN  \n" +
                "  \n" +
                "        SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "		SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SELECT  \n" +
                "    pi.systemId,  \n" +
                "    pi.id paymentId,  \n" +
                "    pi.accountReference,  \n" +
                "    pi.mfgcodeID,  \n" +
                "    m.mfgCode,  \n" +
                "    m.mfgName,  \n" +
                "    FUN_GETFORMATTEDMFGCODE(m.mfgCode, m.mfgName, v_mfgNameFormat) fullMfgName,  \n" +
                "    pi.paymentType,  \n" +
                "    p.gencCategoryName paymentTypeName,  \n" +
                "    pi.paymentNumber,  \n" +
                "    pi.bankAccountMasID,  \n" +
                "    pi.bankName,  \n" +
                "    pi.bankAccountNo,  \n" +
                "    pi.paymentDate,  \n" +
                "    pi.paymentAmount,  \n" +
                "    pi.payToName,  \n" +
                "    pi.payToAddress,  \n" +
                "    pi.remark,  \n" +
                "    pi.isPaymentVoided,  \n" +
                "    pi.voidPaymentReason,  \n" +
                "    pi.billToName,  \n" +
                "    pi.billToAddress,  \n" +
                "    pi.lockStatus,  \n" +
                "    FUN_GETUSERNAMEBYID(pi.lockedBy) lockByName,  \n" +
                "    FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(pi.lockedAt,  \n" +
                "            v_TimeZone,  \n" +
                "            v_DateTimeDisplayFormat) lockedAt,  \n" +
                "    PI.refPaymentMode  \n" +
                "FROM  \n" +
                "    packingslip_invoice_payment PI  \n" +
                "        INNER JOIN  \n" +
                "    mfgcodemst m ON m.id = pi.mfgcodeID  \n" +
                "        INNER JOIN  \n" +
                "    genericcategory p ON p.gencCategoryID = pi.paymentType  \n" +
                "WHERE  \n" +
                "    pi.isDeleted = 0  \n" +
                "        AND PI.refPaymentMode = 'P'  \n" +
                "        AND pi.id = pPaymentId;  \n" +
                "	ELSE  \n" +
                "		SELECT 		m.accountRef accountReference,  \n" +
                "				m.id mfgcodeID,  \n" +
                "				m.mfgCode,  \n" +
                "				m.mfgName,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) fullMfgName,  \n" +
                "				m.paymentMethodID paymentType,  \n" +
                "				p.gencCategoryName paymentTypeName,  \n" +
                "				NULL paymentNumber,  \n" +
                "				b.id bankAccountMasID,  \n" +
                "				b.bankName,  \n" +
                "				b.accountCode bankAccountNo,  \n" +
                "				NULL paymentDate,  \n" +
                "				NULL paymentAmount,  \n" +
                "				ca.bankRemitToName payToName,  \n" +
                "				fun_getAddressbyIDForCheckPrint(ca.id) payToAddress,  \n" +
                "				NULL remark,  \n" +
                "				0 isPaymentVoided,  \n" +
                "				NULL voidPaymentReason,  \n" +
                "				cb.companyName billToName,  \n" +
                "				fun_getAddressbyIDForCheckPrint(cb.id) billToAddress,  \n" +
                "                NULL lockStatus,  \n" +
                "				NULL lockByName,  \n" +
                "				NULL lockedAt  \n" +
                "		FROM 		mfgcodemst m  \n" +
                "		LEFT JOIN 	genericcategory p ON p.gencCategoryID = m.paymentMethodID  \n" +
                "        LEFT JOIN 	bank_mst b ON b.id = p.bankid AND b.isDeleted = 0 AND b.isActive = 1  \n" +
                "		LEFT JOIN 	customer_addresses ca ON ca.customerId = m.id AND ca.isDeleted = 0 AND ca.addressType = 'P' AND ca.isDefault = 1  \n" +
                "		LEFT JOIN 	customer_addresses cb ON cb.customerId = m.id AND cb.isDeleted = 0 AND cb.addressType = 'B' AND cb.isDefault = 1  \n" +
                "		WHERE 		m.isDeleted = 0  \n" +
                "					AND m.id = pMfgCodeId;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 05-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5766,'2.00','V1',' #40002 - SPS for address contact  - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5766:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetManufacturer`;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturer`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	-- IN pIsMFG TINYINT(1),  \n" +
                "	IN pmfgType VARCHAR(20),  \n" +
                "	IN pisCustOrDisty TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(\"  \n" +
                "       SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,mc.legalName,mc.customerType, (case when  mc.customerType='B'  then 'Broker' when   mc.customerType='E' then 'End Customer'  else '' end) as customerTypeName,  \n" +
                "       (CASE WHEN (mc.isPricingApi = 1 OR mc.systemGenerated = 1) THEN 1 ELSE 0 END) isDisabledDelete, mc.isPricingApi , mc.systemGenerated,fun_getDateCodeFormatById(mc.dateCodeFormatID) dateCodeFormat,  \n" +
                "		fun_getUserNameByEmployeID(mc.salesCommissionTo) salesCommissionTo,  \n" +
                "		mc.isSupplierEnable,  \n" +
                "		mc.externalSupplierOrder,  \n" +
                "		mc.systemID,mc.customerSystemID,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.carrierID) carrierName,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmaCarrierID) rmacarrierName,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmashippingMethodId) rmaShippingName,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.shippingMethodId) ShippingName,  \n" +
                "		mc.carrierAccount,mc.rmaCarrierAccount,case when mc.shippingInsurence =1 then 'Yes' else 'No' end shippingInsuranceName,  \n" +
                "	        case when mc.rmaShippingInsurence =1 then 'Yes' else 'No' end rmashippingInsuranceName,  \n" +
                "	        case when mc.isPricingApi =1 and mc.isSupplierEnable=1 then 'Yes' else 'No' end supplierEnableText,  \n" +
                "	        mc.shippingInsurence, mc.rmaShippingInsurence,  \n" +
                "		fun_getUserNameByID(mc.updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(mc.createdBy) createdby,  \n" +
                "		fun_getRoleByID(mc.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(mc.updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		smm.mappingMfr,  \n" +
                "        cmm.customerMapping,  \n" +
                "       CASE WHEN mc.authorizeType=1 THEN 'Authorized'  \n" +
                "            WHEN mc.authorizeType=2 THEN 'Independent'  \n" +
                "            WHEN mc.authorizeType=3 THEN 'Authorized & Independent'  \n" +
                "            ELSE '' END   authorizeTypeTxt,mc.authorizeType,  \n" +
                "		     wbw.buyBy,wbw.buyDate,wbw.description,wbw.id AS `acquiredID`,  \n" +
                "            wbw.acquired,  \n" +
                "		(SELECT GROUP_CONCAT(CONCAT(alias, '@@@',fun_getMappingManufacturerCount(id),  \n" +
                "        '@@@',fun_getUserNameByID(createdBy),  \n" +
                "        '@@@',fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"')  \n" +
                "        ) SEPARATOR '!!!!')  FROM mfgcodealias  \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist  ,  \n" +
                "		mc.primaryContactName, mc.email , mc.website, mc.contact, mc.comments , mc.phExtension,  \n" +
                "		mc.contactCountryCode,mc.faxNumber, mc.faxCountryCode,mc.isActive, mc.isCompany,  \n" +
                "        (CASE WHEN (mc.`isCompany` = 0) THEN 'No'  \n" +
                "				WHEN (mc.`isCompany` = 1) THEN 'Yes' ELSE '' END) AS `isCompanyConvertedValue`,  \n" +
                "		(CASE WHEN (mc.systemGenerated = 0) THEN 'No'  \n" +
                "				WHEN (mc.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,  \n" +
                "		(CASE WHEN (mc.`isActive` = 0) THEN 'Inactive'  \n" +
                "				WHEN (mc.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`  \n" +
                "		 ,gc.gencCategoryName,  \n" +
                "		 CASE WHEN mc.isCustOrDisty = 1 THEN 'Both'  \n" +
                "			WHEN mc.isCustOrDisty = 0 OR mc.isCustOrDisty IS NULL THEN 'Manufacturer Only'  \n" +
                "		END AS isCustOrDistyText,  \n" +
                "        mc.displayOrder,  \n" +
                "        mc.invoicesRequireManagementApproval,  \n" +
                "        (CASE WHEN (mc.invoicesRequireManagementApproval = 0) THEN 'No'  \n" +
                "				WHEN (mc.invoicesRequireManagementApproval = 1) THEN 'Yes' ELSE '' END) AS `invoicesRequireManagementApprovalValue`,  \n" +
                "		mc.taxID,  \n" +
                "        mc.accountRef,  \n" +
                "        mc.paymentMethodID,  \n" +
                "		pc.gencCategoryName paymentMethodName,  \n" +
                "        pc.systemGenerated systemGeneratedPaymentMethod  ,  \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS ChartOfAccounts,  \n" +
                "		mc.acctId  \n" +
                "	FROM mfgcodemst mc  \n" +
                "    LEFT JOIN  \n" +
                "		(SELECT supplierid,GROUP_CONCAT(fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,\", vMfgCodeFormat ,\") SEPARATOR '##$$') mappingmfr  \n" +
                "				FROM supplier_mapping_mst smm inner join mfgcodemst mfg on smm.refmfgcodemstid = mfg.id  where  smm.isCustMapping=0 and smm.isDeleted= 0  \n" +
                "		group by supplierid)smm on smm.supplierid=mc.id  \n" +
                "	LEFT JOIN  \n" +
                "		(SELECT supplierid,GROUP_CONCAT(fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,\", vMfgCodeFormat ,\") SEPARATOR '##$$') customerMapping  \n" +
                "				FROM supplier_mapping_mst smm inner join mfgcodemst mfg on smm.refmfgcodemstid = mfg.id  where  smm.isCustMapping=1 and smm.isDeleted= 0  \n" +
                "			group by supplierid) cmm on cmm.supplierid=mc.id  \n" +
                "    LEFT JOIN acct_acctmst aam ON aam.acct_id = mc.acctId AND aam.isDeleted=0  \n" +
                "    LEFT JOIN genericcategory gc ON gc.gencCategoryID = mc.paymentTermsID AND gc.isDeleted = 0  \n" +
                "    LEFT JOIN genericcategory pc ON pc.gencCategoryID = mc.paymentMethodID AND pc.isDeleted = 0  \n" +
                "	LEFT JOIN (SELECT wbwi.buyBy,wbwi.buyDate,wbwi.description,wbwi.id , wbwi.buyTo ,  \n" +
                "				CONCAT('(', mci.mfgcode,')' , ' ' ,mci.mfgName ) AS `acquired`  \n" +
                "			FROM  who_bought_who wbwi  \n" +
                "            JOIN mfgcodemst mci ON wbwi.buyBy = mci.id  \n" +
                "            AND wbwi.isDeleted = 0) wbw  \n" +
                "			ON wbw.buyTo = mc.id  \n" +
                "	WHERE mc.isdeleted = 0  \n" +
                "	AND mc.mfgType = '\", pmfgType , \"' \");  \n" +
                "  \n" +
                "	IF(pisCustOrDisty IS NOT NULL OR pisCustOrDisty != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(@temp_Sproc_RetriveWhereUsedComponents,\" and mc.isCustOrDisty = \",pisCustOrDisty);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" ,\"displayOrder IS NULL, displayOrder ASC ,mfgName ASC\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetriveWhereUsedComponents,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveWhereUsedComponents,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	 PREPARE query1 FROM @SQLStatement2;  \n" +
                "	 EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 05-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5767,'2.00','V1',' Sample entry - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5767:
            allDbChangesArray.push(
                /* **************************** New Script -> 05-01-2022 *********************************** */
                "ALTER TABLE customer_addresses  \n" +
                "ADD COLUMN shippingMethodID INT ;  \n" +
                "  \n" +
                "ALTER TABLE customer_addresses  \n" +
                "ADD COLUMN carrierID INT ;  \n" +
                "  \n" +
                "ALTER TABLE customer_addresses  \n" +
                "ADD COLUMN `carrierAccount` VARCHAR(50) ;  \n" +
                /* **************************** Add Script Version -> 05-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5768,'2.00','V1','User Story 39742: Shipping Address Changes: Allow to Select Shipping Method, Carrier and Carrier A/C - VS '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5768:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-01-2022 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_convertJsonEmailToCommaSepList` ;  \n" +
                "CREATE FUNCTION `fun_convertJsonEmailToCommaSepList`(  \n" +
                "	pJsonEmailList TEXT  \n" +
                ") RETURNS TEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_Emails TEXT;  \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(jsonTblEmails.email SEPARATOR ', ') INTO v_Emails  \n" +
                "		FROM JSON_TABLE(pJsonEmailList, '$[*]' COLUMNS (email VARCHAR(100)  PATH '$.email')) jsonTblEmails  \n" +
                "		;  \n" +
                "  \n" +
                "  \n" +
                "	RETURN v_Emails;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5769,'2.00','V1',' fun_convertJsonEmailToCommaSepList - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5769:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentHistory`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetComponentHistory = CONCAT(\"  \n" +
                "    select a.*,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(a.updatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "                fun_getRoleByID(a.createByRoleId) updatedbyRoleValue  \n" +
                "		from  \n" +
                "        (SELECT h.id,  			h.Colname,  			h.Oldval,  \n" +
                "			h.Newval,  			fun_getUserNameByID(h.updatedBy) ModifiedUser,  \n" +
                "			h.updatedAt,		h.valueDataType,				h.createByRoleId  \n" +
                "	FROM component_history h  \n" +
                "	WHERE h.refComponentID = \",pPartID,  \n" +
                "    \" union all  \n" +
                "					SELECT h.id,  						h.Colname,  						h.Oldval,  \n" +
                "						h.Newval,  						fun_getUserNameByID(h.createdBy) AS ModifiedUser,  \n" +
                "						h.updatedAt,                          h.valueDataType,				h.createByRoleId  \n" +
                "					FROM common_longtext_history h  \n" +
                "					WHERE h.tablename = 'component'  \n" +
                "					and h.refTransId = \",pPartID,\" ) as a\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY updatedAt DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetComponentHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetComponentHistory,\" ) c  \n" +
                "		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SELECT co.id,  \n" +
                "			fun_getUserNameByID(co.createdBy) createdbyValue,  \n" +
                "			fun_getRoleByID(co.createByRoleId) createdbyRoleValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(co.createdAt,vTimeZone, vDateTimeDisplayFormat) createdAtValue,  \n" +
                "            m.mfgType  \n" +
                "	FROM component co  \n" +
                "    join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "	WHERE co.id = pPartID;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5770,'2.00','V1',' Bug 40206: Created By and Created At data not showing at Part Master History tab - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5770:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesOrderSummaryList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pfilterPOStatus VARCHAR(20)  ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "    IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
                "       s.salesOrderNumber,  \n" +
                "       s.poNumber,  \n" +
                "       s.poDate,  \n" +
                "       s.customerID,  \n" +
                "       s.contactPersonID,  \n" +
                "       s.billingAddressID,  \n" +
                "       s.shippingAddressID,  \n" +
                "       s.shippingMethodID,  \n" +
                "       s.revision,  \n" +
                "       s.shippingComment,  \n" +
                "       s.termsID,  \n" +
                "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
                "       CASE WHEN s.blanketPOOption=1 THEN 'Use This Blanket PO# for All Releases' WHEN s.blanketPOOption=2 THEN 'Link Future PO(s) to This Blanket PO' WHEN s.blanketPOOption=3 THEN 'Use Blanket PO# and Release#' ELSE '' END blanketPOOptionText,  \n" +
                "       s.blanketPOOption,  \n" +
                "       s.status,  \n" +
                "       s.soDate,  \n" +
                "       s.revisionChangeNote,  \n" +
                "       s.salesCommissionTo,  \n" +
                "       s.intermediateShipmentId,  \n" +
                "       s.freeOnBoardId,  \n" +
                "       s.internalComment as internalCommentSo,  \n" +
                "       s.serialNumber,  \n" +
                "       s.carrierID,  \n" +
                "       s.carrierAccountNumber,  \n" +
                "       s.originalPODate,  \n" +
                "       s.isLegacyPO,  \n" +
                "       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
                "       s.isRmaPO,  \n" +
                "       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
                "       s.poRevision,  \n" +
                "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
                "       s.isBlanketPO,  \n" +
                "       CONCAT('(',mg.mfgCode,')',mg.mfgName) AS companyName,  \n" +
                "       mg.mfgName,  \n" +
                "       s.poRevisionDate,  \n" +
                "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
                "       fb.name freeOnBoardName,  \n" +
                "       s.`rmaNumber` AS `rmaNumber`,  \n" +
                "	   s.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "	   (CASE WHEN (s.`isDebitedByCustomer` = 1) THEN 'Yes' ELSE 'No' END) AS `debitedByCustText`,  \n" +
                "       s.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "       s.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "		s.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "       (CASE  WHEN (s.`isReworkRequired` = 1) THEN 'Yes'  ELSE 'No'  END) AS `reworkReqText`,  \n" +
                "	   s.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "      ifnull(sodCnt.totalLineCount,0)  totalSOLines,  \n" +
                "       ifnull(sodCnt.completedLineCount,0) totalCompletedSOLines,  \n" +
                "       (case when sodCnt.totalLineCount is null then 0 else  Round((sodCnt.completedLineCount * 100/sodCnt.totalLineCount),2) end)soCompletionPercentage,  \n" +
                "      (case when sodCnt.canceledLineCount = ifnull(sodCnt.totalLineCount,0) then 'Canceled'  \n" +
                "			when (sodCnt.canceledLineCount + sodCnt.completedLineCount) = ifnull(sodCnt.totalLineCount,0)  then 'Completed'  \n" +
                "            else 'In Progress' end) salesOrderDetStatusConvertedValues,  \n" +
                "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
                "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
                "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
                "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
                "		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  \n" +
                "		       FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
                "			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
                "    LEFT JOIN ( select sod.refSalesOrderID as soId ,  \n" +
                "							sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
                "							count(1) totalLineCount,  \n" +
                "                            sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
                "                            From salesorderdet sod where sod.isDeleted = 0  \n" +
                "                            Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = s.id  \n" +
                "			WHERE s.isdeleted=0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "                IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "		END IF;  \n" +
                "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "		END IF;  \n" +
                "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "			IF(psearchposotype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "			IF(psearchextPricetype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "        IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "		ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "		ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "  \n" +
                "			 EXECUTE query2;  \n" +
                "			 DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "  \n" +
                "			 EXECUTE query1;  \n" +
                "		       DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-01-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5771,'2.00','V1','Bug 40202: [Main Branch] -Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5771:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesorderList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 and vuss.blanketPOOption=2 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				vuss.blanketPOOption,  \n" +
                "				vuss.blanketPOOptionText,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToreturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount ,  \n" +
                "				vuss.rmaNumber,vuss.isDebitedByCustomer, vuss.debitedByCustText,  \n" +
                "				vuss.rmaOrgPONumber,vuss.orgSalesOrderID,vuss.isReworkRequired,  \n" +
                "				vuss.reworkReqText, vuss.reworkPONumber,vuss.custOrgPOLineNumber \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'' OR rmaNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''' OR rmaNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "    IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsRmaPO = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isRmaPO = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "	ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-01-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5772,'2.00','V1',' - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5772:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 06-01-2022 **************************** */
                "INSERT INTO systemconfigrations (`key`, `values`,`isActive`, `createdBy`, `createdAt` , `updatedBy` , `updatedAt`, `displayName`,`isEditable`,`description`,`createByRoleId`,`updateByRoleId`)  \n" +
                "VALUES ('EmployeeNameFormat', 4 ,1, 1, fun_DatetimetoUTCDateTime(), 1 , fun_DatetimetoUTCDateTime(), 'Employee Name Format',1,  \n" +
                "'Employee Name format which we use and display personnel name globally with defined format.',1,1) ;  \n" +
                /* **************************** Add Script Version -> 06-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5773,'2.00','V1','User Story 39376: Code Refactor: Employees controller Dec-2021 - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5773:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 06-01-2022 **************************** */
                "DROP function IF EXISTS `fun_getEmployeeDisplayFormat`;  \n" +
                "CREATE FUNCTION `fun_getEmployeeDisplayFormat`() RETURNS int  \n" +
                "BEGIN  \n" +
                "DECLARE vFormatValue INT;  \n" +
                "	SELECT `values` INTO vFormatValue FROM systemconfigrations WHERE `key`='EmployeeNameFormat';  \n" +
                "RETURN vFormatValue;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-01-2022 **************************** */
                "DROP function IF EXISTS `fun_GetEmployeeFormattedName`;  \n" +
                "CREATE FUNCTION `fun_GetEmployeeFormattedName`(  \n" +
                "    pFirstName VARCHAR(255),  \n" +
                "    pMiddleName VARCHAR(255),  \n" +
                "    pLastName VARCHAR(255),  \n" +
                "    pInitialName VARCHAR(255),  \n" +
                "    pFormateType INT  \n" +
                ") RETURNS varchar(10000) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pEmployeeFormat VARCHAR(1000);  \n" +
                "    DECLARE pMame VARCHAR(2);  \n" +
                "    SET pMame = IF(pMiddleName IS NULL OR pMiddleName <> '', SUBSTRING(pMiddleName, 1,1),'');  \n" +
                "  \n" +
                "	SELECT (CASE  \n" +
                "        WHEN pFormateType = 1 THEN  \n" +
                "			# 1 - (Initial) First Middle Last  \n" +
                "			CONCAT('(', pInitialName ,') ', pFirstName, ' ', IFNULL(pMiddleName,''), ' ', pLastName)  \n" +
                "         WHEN pFormateType = 2 THEN  \n" +
                "			# 2 - (Initial) First Last  \n" +
                "			CONCAT('(', pInitialName ,') ', pFirstName, ' ', pLastName)  \n" +
                "		 WHEN pFormateType = 3 THEN  \n" +
                "			# 3 - (Initial) First Middle-Initial Last  \n" +
                "			CONCAT('(', pInitialName ,') ', pFirstName, ' ', IF(pMame <> '',CONCAT(pMame,' '),''), pLastName)  \n" +
                "		WHEN pFormateType = 5 THEN  \n" +
                "			# 5 - (Initial) Last, First Middle  \n" +
                "			CONCAT('(', pInitialName ,') ', pLastName, ', ',pFirstName, ' ', IFNULL(pMiddleName,''))  \n" +
                "		WHEN pFormateType = 6 THEN  \n" +
                "			# 6 - (Initial) Last, First  \n" +
                "			CONCAT('(', pInitialName ,') ', pLastName, ', ',pFirstName)  \n" +
                "		WHEN pFormateType = 7 THEN  \n" +
                "			# 7 - (Initial) Last, First Middle-Initial  \n" +
                "			CONCAT('(', pInitialName ,') ', pLastName, ', ',pFirstName, IF(pMame <> '',CONCAT(' ',pMame),''))  \n" +
                "		WHEN pFormateType = 8 THEN  \n" +
                "			# 8 - (Initial) Last, First Middle-Initial.  \n" +
                "			CONCAT('(', pInitialName ,') ', pLastName, ', ',pFirstName, IF(pMame <> '',CONCAT(' ',pMame,'.'),''))  \n" +
                "		ELSE  \n" +
                "			# 4 - (Initial) First Middle-Initial. Last (Default)  \n" +
                "			CONCAT('(', pInitialName ,') ', pFirstName, ' ', IF(pMame <> '',CONCAT(pMame,'. '),''), pLastName)  \n" +
                "		END) INTO pEmployeeFormat;  \n" +
                "RETURN pEmployeeFormat;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetEmployeeDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetEmployeeDetail`(  \n" +
                "IN pOnlyActiveRecord TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE v_empFormat VARCHAR(5);  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
                "  \n" +
                "		SELECT 	emp.id,  \n" +
                "				emp.firstName,  \n" +
                "				emp.middleName,  \n" +
                "				emp.lastName,  \n" +
                "				emp.initialName,  \n" +
                "				emp.profileImg,  \n" +
                "				fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName, v_empFormat) AS empCodeName,  \n" +
                "				emp.isActive,  \n" +
                "				emp.managerID,  \n" +
                "                emp.paymentMode,  \n" +
                "                emp.burdenRate,  \n" +
                "				us.id AS userID,  \n" +
                "				emp_dep.empDeptID,  \n" +
                "				emp_dep.departmentID,  \n" +
                "				emp_dep.titleID,  \n" +
                "				dept.deptID,  \n" +
                "				dept.deptName,  \n" +
                "				gc.gencCategoryID,  \n" +
                "				gc.gencCategoryName  \n" +
                "		FROM employees AS emp  \n" +
                "		INNER JOIN users AS us ON emp.id = us.employeeID AND us.isDeleted = 0  \n" +
                "		LEFT JOIN employee_department AS emp_dep ON emp.id = emp_dep.employeeID AND emp_dep.isDeleted = 0 AND emp_dep.isDefault = 1  \n" +
                "		LEFT JOIN department AS dept ON emp_dep.departmentID = dept.deptID AND dept.isDeleted = 0  \n" +
                "		LEFT JOIN genericcategory AS gc ON emp_dep.titleID = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "		WHERE emp.isDeleted = 0 AND (CASE WHEN pOnlyActiveRecord = 1 THEN emp.isActive = 1 ELSE 1 = 1 END)  \n" +
                "        ORDER BY emp.firstName ASC;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveActivityManualEntryList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveActivityManualEntryList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pTransType VARCHAR(200),  \n" +
                "    IN pActivityType VARCHAR(200),  \n" +
                "    IN pEmployeeIds VARCHAR(16000),  \n" +
                "    IN pAssyIds VARCHAR(16000)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255);  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "        DECLARE v_empFormat VARCHAR(5);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
                "  \n" +
                "		SET @temp_Sproc_RetrieveActivityManualEntryList = CONCAT(\"  \n" +
                "			SELECT * FROM (  \n" +
                "				SELECT 	a.id,  \n" +
                "						a.refTransID,  \n" +
                "						a.transactionType,  \n" +
                "                        cp.id AS partID,  \n" +
                "                        cp.PIDCode,  \n" +
                "                        cp.mfgPN,  \n" +
                "                        cp.isCustom,  \n" +
                "                        cp.custAssyPN,  \n" +
                "                        ro.rohsIcon,  \n" +
                "                        ro.name AS rohsName,  \n" +
                "                        (CASE  WHEN (a.transactionType = 'B') THEN  'BOM'  \n" +
                "								WHEN (a.transactionType = 'C') THEN  'Costing'  \n" +
                "								WHEN (a.transactionType = 'K') THEN  'Kit'  \n" +
                "						ELSE  ''  END ) AS transactionTypeConvertedValue,  \n" +
                "						a.activityType,  \n" +
                "                        IF(a.activityType = 'P', 'Production','Setup') AS activityTypeConvertedValue,  \n" +
                "						a.checkinTime,  \n" +
                "						a.checkoutTime,  \n" +
                "						a.totalTime,  \n" +
                "						a.burdenRate,  \n" +
                "						a.paymentMode,  \n" +
                "						a.remark,  \n" +
                "                        u.employeeID,  \n" +
                "                        fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName,'\", v_empFormat,\"') AS userName,  \n" +
                "						fun_getUserNameByID(a.updatedBy) updatedby,  \n" +
                "						fun_getUserNameByID(a.createdBy) createdby,  \n" +
                "						fun_getRoleByID(a.createByRoleId) createdbyRole,  \n" +
                "						fun_getRoleByID(a.updateByRoleId) updatedbyRole,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(a.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "					FROM assembly_trans_history AS a  \n" +
                "                    INNER JOIN Component cp ON a.refTransID = cp.id AND cp.isDeleted = 0  \n" +
                "                    JOIN rfq_rohsmst ro ON cp.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "					LEFT JOIN users AS u ON a.userID = u.id AND u.isDeleted = 0  \n" +
                "                    JOIN employees emp on emp.id = u.employeeID AND emp.isDeleted = 0  \n" +
                "					WHERE a.isDeleted = 0 AND  \n" +
                "                    a.checkOutTime IS NOT NULL  \n" +
                "                    AND (CASE WHEN '\",pAssyIds,\"' <> '' THEN FIND_IN_SET(a.refTransID, '\",pAssyIds,\"') ELSE 1 = 1 END)  \n" +
                "			UNION ALL  \n" +
                "				SELECT 	a.id,  \n" +
                "						a.refTransID,  \n" +
                "						a.transactionType,  \n" +
                "                        ra.partID,  \n" +
                "                        cp.PIDCode,  \n" +
                "                        cp.mfgPN,  \n" +
                "                        cp.isCustom,  \n" +
                "                        cp.custAssyPN,  \n" +
                "                        ro.rohsIcon,  \n" +
                "                        ro.name AS rohsName,  \n" +
                "                        (CASE  WHEN (a.transactionType = 'B') THEN  'BOM'  \n" +
                "								WHEN (a.transactionType = 'C') THEN  'Costing'  \n" +
                "								WHEN (a.transactionType = 'K') THEN  'Kit'  \n" +
                "						ELSE  ''  END ) AS transactionTypeConvertedValue,  \n" +
                "						a.activityType,  \n" +
                "                        IF(a.activityType = 'P', 'Production','Setup') AS activityTypeConvertedValue,  \n" +
                "						a.checkinTime,  \n" +
                "						a.checkoutTime,  \n" +
                "						a.totalTime,  \n" +
                "						a.burdenRate,  \n" +
                "						a.paymentMode,  \n" +
                "						a.remark,  \n" +
                "                        u.employeeID,  \n" +
                "                        fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName,'\", v_empFormat,\"') AS userName,  \n" +
                "						fun_getUserNameByID(a.updatedBy) updatedby,  \n" +
                "						fun_getUserNameByID(a.createdBy) createdby,  \n" +
                "						fun_getRoleByID(a.createByRoleId) createdbyRole,  \n" +
                "						fun_getRoleByID(a.updateByRoleId) updatedbyRole,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(a.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "					FROM assembly_trans_history AS a  \n" +
                "                    INNER JOIN rfq_assemblies ra ON  a.refTransID = ra.id AND ra.isDeleted = 0  \n" +
                "                    INNER JOIN Component cp ON ra.partID = cp.id AND cp.isDeleted = 0  \n" +
                "                    JOIN rfq_rohsmst ro ON cp.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "					LEFT JOIN users AS u ON a.userID = u.id AND u.isDeleted = 0  \n" +
                "                    JOIN employees emp on emp.id = u.employeeID AND emp.isDeleted = 0  \n" +
                "					WHERE a.isDeleted = 0 AND  \n" +
                "                    a.checkOutTime IS NOT NULL  \n" +
                "                    AND (CASE WHEN '\",pAssyIds,\"' <> '' THEN FIND_IN_SET(ra.partID, '\",pAssyIds,\"') ELSE 1 = 1 END)  \n" +
                "			UNION ALL  \n" +
                "				SELECT 	a.id,  \n" +
                "						a.refTransID,  \n" +
                "						a.transactionType,  \n" +
                "                        sd.partID,  \n" +
                "                        cp.PIDCode,  \n" +
                "                        cp.mfgPN,  \n" +
                "                        cp.isCustom,  \n" +
                "                        cp.custAssyPN,  \n" +
                "                        ro.rohsIcon,  \n" +
                "                        ro.name AS rohsName,  \n" +
                "                        (CASE  WHEN (a.transactionType = 'B') THEN  'BOM'  \n" +
                "								WHEN (a.transactionType = 'C') THEN  'Costing'  \n" +
                "								WHEN (a.transactionType = 'K') THEN  'Kit'  \n" +
                "						ELSE  ''  END ) AS transactionTypeConvertedValue,  \n" +
                "						a.activityType,  \n" +
                "                        IF(a.activityType = 'P', 'Production','Setup') AS activityTypeConvertedValue,  \n" +
                "						a.checkinTime,  \n" +
                "						a.checkoutTime,  \n" +
                "						a.totalTime,  \n" +
                "						a.burdenRate,  \n" +
                "						a.paymentMode,  \n" +
                "						a.remark,  \n" +
                "                        u.employeeID,  \n" +
                "                        fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName,'\", v_empFormat,\"') AS userName,  \n" +
                "						fun_getUserNameByID(a.updatedBy) updatedby,  \n" +
                "						fun_getUserNameByID(a.createdBy) createdby,  \n" +
                "						fun_getRoleByID(a.createByRoleId) createdbyRole,  \n" +
                "						fun_getRoleByID(a.updateByRoleId) updatedbyRole,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(a.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "					FROM assembly_trans_history AS a  \n" +
                "                    INNER JOIN salesorderdet sd ON  a.refTransID = sd.id AND sd.isDeleted = 0  \n" +
                "                    INNER JOIN Component cp ON sd.partID = cp.id AND cp.isDeleted = 0  \n" +
                "                    JOIN rfq_rohsmst ro ON cp.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "					LEFT JOIN users AS u ON a.userID = u.id AND u.isDeleted = 0  \n" +
                "                    JOIN employees emp on emp.id = u.employeeID AND emp.isDeleted = 0  \n" +
                "					WHERE a.isDeleted = 0 AND  \n" +
                "                    a.checkOutTime IS NOT NULL  \n" +
                "                    AND (CASE WHEN '\",pAssyIds,\"' <> '' THEN FIND_IN_SET(sd.partID, '\",pAssyIds,\"') ELSE 1 = 1 END)  \n" +
                "		) AS tmp \");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY refTransID DESC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1 = 1 ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pEmployeeIds IS NOT NULL OR pEmployeeIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND employeeID in (\"',pEmployeeIds,'\")');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pTransType IS NOT NULL OR pTransType != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(transactionType, \"',pTransType,'\")');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF(pActivityType IS NOT NULL OR pActivityType != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(activityType, \"',pActivityType,'\")');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveActivityManualEntryList,\" ) c where \", pWhereClause);  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveActivityManualEntryList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 06-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5774,'2.00','V1','User Story 39376: Code Refactor: Employees controller Dec-2021 - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5774:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 06-01-2022 **************************** */
                "DROP function IF EXISTS `fun_GetEmployeeFormattedName`;  \n" +
                "CREATE FUNCTION `fun_GetEmployeeFormattedName`(  \n" +
                "    pFirstName VARCHAR(255),  \n" +
                "    pMiddleName VARCHAR(255),  \n" +
                "    pLastName VARCHAR(255),  \n" +
                "    pInitialName VARCHAR(255),  \n" +
                "    pFormateType INT  \n" +
                ") RETURNS varchar(10000) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pEmployeeFormat VARCHAR(10000);  \n" +
                "    DECLARE pMame VARCHAR(2);  \n" +
                "    SET pMame = IF(pMiddleName IS NULL OR pMiddleName <> '', SUBSTRING(pMiddleName, 1,1),'');  \n" +
                "  \n" +
                "	SELECT (CASE  \n" +
                "        WHEN pFormateType = 1 THEN  \n" +
                "			# 1 - (Initial) First Middle Last  \n" +
                "			CONCAT('(', pInitialName ,') ', pFirstName, ' ', IFNULL(pMiddleName,''), ' ', pLastName)  \n" +
                "         WHEN pFormateType = 2 THEN  \n" +
                "			# 2 - (Initial) First Last  \n" +
                "			CONCAT('(', pInitialName ,') ', pFirstName, ' ', pLastName)  \n" +
                "		 WHEN pFormateType = 3 THEN  \n" +
                "			# 3 - (Initial) First Middle-Initial Last  \n" +
                "			CONCAT('(', pInitialName ,') ', pFirstName, ' ', IF(pMame <> '',CONCAT(pMame,' '),''), pLastName)  \n" +
                "		WHEN pFormateType = 5 THEN  \n" +
                "			# 5 - (Initial) Last, First Middle  \n" +
                "			CONCAT('(', pInitialName ,') ', pLastName, ', ',pFirstName, ' ', IFNULL(pMiddleName,''))  \n" +
                "		WHEN pFormateType = 6 THEN  \n" +
                "			# 6 - (Initial) Last, First  \n" +
                "			CONCAT('(', pInitialName ,') ', pLastName, ', ',pFirstName)  \n" +
                "		WHEN pFormateType = 7 THEN  \n" +
                "			# 7 - (Initial) Last, First Middle-Initial  \n" +
                "			CONCAT('(', pInitialName ,') ', pLastName, ', ',pFirstName, IF(pMame <> '',CONCAT(' ',pMame),''))  \n" +
                "		WHEN pFormateType = 8 THEN  \n" +
                "			# 8 - (Initial) Last, First Middle-Initial.  \n" +
                "			CONCAT('(', pInitialName ,') ', pLastName, ', ',pFirstName, IF(pMame <> '',CONCAT(' ',pMame,'.'),''))  \n" +
                "		ELSE  \n" +
                "			# 4 - (Initial) First Middle-Initial. Last (Default)  \n" +
                "			CONCAT('(', pInitialName ,') ', pFirstName, ' ', IF(pMame <> '',CONCAT(pMame,'. '),''), pLastName)  \n" +
                "		END) INTO pEmployeeFormat;  \n" +
                "RETURN pEmployeeFormat;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitReleasePlanDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitReleasePlanDetail`(  \n" +
                "	IN pRefSalesOrderDetID INT,  \n" +
                "	IN pAssyID INT,  \n" +
                "	IN pSubAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vSubAssyQPA DECIMAL(18,8);  \n" +
                "	DECLARE vMismatchItem DECIMAL(18,8);  \n" +
                "	DECLARE vFeasibilityWithAllocatedQty DECIMAL(18,8);  \n" +
                "	DECLARE vCurrentDateTime DATETIME;  \n" +
                "    DECLARE vKitQty DECIMAL(18,8);  \n" +
                "	DECLARE vCustomerId INT;  \n" +
                "  \n" +
                "	SET vCurrentDateTime =  STR_TO_DATE(fun_ConvertUTCDateToDataKeyTimeZone(fun_DatetimetoUTCDateTime()),'%m/%d/%Y');  \n" +
                "  \n" +
                "    SELECT 		customerID  ,kitQty  \n" +
                "	INTO		vCustomerId ,vKitQty  \n" +
                "	FROM 		salesorderdet sd  \n" +
                "	INNER JOIN 	salesordermst s ON s.id = sd.refSalesOrderID  \n" +
                "	WHERE 		sd.id = pRefSalesOrderDetID;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempMountingTypeWiseKitDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempMountingTypeWiseKitDet  \n" +
                "	(  \n" +
                "		mountingTypeID INT(11),  \n" +
                "		mountingType VARCHAR(50),  \n" +
                "		connecterTypeID INT(11),  \n" +
                "		connecterType VARCHAR(50),  \n" +
                "		feasibilityWithAllocation DECIMAL(18,8),  \n" +
                "		shortageLine DECIMAL(18,8),  \n" +
                "		feasibilityWithAvailableAndAllocatedStock DECIMAL(18,8),  \n" +
                "		shortageWithAvailableQty DECIMAL(18,8),  \n" +
                "		shortageForInputQty DECIMAL(18,8),  \n" +
                "		releasedQty DECIMAL(18,8),  \n" +
                "		pendingQty DECIMAL(18,8),  \n" +
                "		releasePercentage DECIMAL(18,8),  \n" +
                "		totalLine INT  \n" +
                "	);  \n" +
                "  \n" +
                "	/* Get assembly parts detail from kit_allocation_lineitems and kit_allocation_lineitems_alternatepart table */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Consolidate_Detail;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Consolidate_Detail AS  \n" +
                "	SELECT 	k.id,					kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
                "		kl.mountingTypeID, 			kl.connecterTypeID, 		kl.consolidatedMfgPNIDs, 		k.numOfPosition,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
                "					(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "				ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "			END  \n" +
                "		) AS kitQPAWithDNP,  \n" +
                "		kl.uomMismatchedStep,  \n" +
                "		k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
                "	FROM 	(  \n" +
                "			SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
                "					(  \n" +
                "						CASE 	WHEN MIN(c.mountingTypeID) = MAX(c.mountingTypeID) # Matched Mounting Type  \n" +
                "								THEN  MIN(c.mountingTypeID)  \n" +
                "							WHEN MIN(c.mountingTypeID) !=  MAX(c.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 # Mismatched with Approval Mounting Type  \n" +
                "								THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE NULL END))  \n" +
                "							ELSE  -1  \n" +
                "						END  \n" +
                "					) mountingTypeID,  \n" +
                "					IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,  \n" +
                "					GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,  \n" +
                "					MIN(kal.uomMismatchedStep) uomMismatchedStep    # Zero indicate to part value does not match with BOM UOM  \n" +
                "			FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
                "			JOIN 		component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "			LEFT JOIN 	component cp ON c.packaginggroupID = cp.packaginggroupID  AND cp.isDeleted = 0  \n" +
                "			WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
                "			AND 		kal.partID = IFNULL(pSubAssyID, pAssyID)  \n" +
                "			AND 		kal.isDeleted = 0  \n" +
                "			AND			c.isDeleted = 0  \n" +
                "			GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "	) AS kl  \n" +
                "	INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0;  \n" +
                "	/* Get available and allocated stock for selected assembly*/  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_Stock_Det;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_Stock_Det AS  \n" +
                "	SELECT  	r.consolidatedMfgPNIDs, 	r.id,  \n" +
                "			IFNULL(ks.allocatedUnit, 0) allocatedunit,  \n" +
                "			IFNULL(ks.allocatedPins,0) allocatedPin,  \n" +
                "			SUM(IFNULL(fun_convertUOM(v.uom, IFNULL(ks.allocatedUOM, r.uomID), IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)),0)) availableStock,  \n" +
                "			SUM((FLOOR(IFNULL(v.noOfPosition, 0)/IFNULL(r.numOfPosition, 0)) * IFNULL(r.numOfPosition, 0)) * IF(v.customerConsign = 0 OR (v.customerConsign = 1 AND v.customerID = vCustomerId),IFNULL(v.availableStock, 0),0)) availableStockInPin  \n" +
                "	FROM 		temp_Kit_Consolidate_Detail r  \n" +
                "	LEFT JOIN 	vu_kit_allocation_summary ks ON r.refsalesORderDetid = ks.refsalesOrderDetId  \n" +
                "                    AND ks.assyID =  pAssyID  \n" +
                "					AND FIND_IN_SET(ks.refBOMLineID, r.consolidatedLineItemIDs)  \n" +
                "	LEFT JOIN 	vu_deducted_allocation_available_Stock v ON FIND_IN_SET(v.refcompid, (CASE WHEN custPNID IS NOT NULL THEN CONCAT(custPNID,\",\",consolidatedMfgPNIDs) ELSE consolidatedMfgPNIDs END))  \n" +
                "	WHERE 		r.isNotRequiredKitAllocation != 1  \n" +
                "	GROUP BY 	r.consolidatedMfgPNIDs, r.id, ks.allocatedunit, ks.allocatedPins;  \n" +
                "  \n" +
                "    /* Calculate kit line total & shortage & feasibility with allocation */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Kit_calculateshortageLinperPlan;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Kit_calculateshortageLinperPlan AS  \n" +
                "	SELECT 	a.salesorderPlanId,		a.salesOrderdetid,		a.kitreleaseQty,	a.refAssyId,	a.calculatedKitQty,  \n" +
                "			count(1) TotalLine ,  \n" +
                "			concat(FLOOR(sum(CASE WHEN (feasibilityWithAllocation - calculatedKitQty) >= 0 then 0 else 1 end) ), '/',   count(1)) shortageLines,  \n" +
                "			min(feasibilityWithAllocation) feasibilityWithAllocation  \n" +
                "	FROM  \n" +
                "	(  \n" +
                "			SELECT 	b.id salesorderPlanId,	r.id kitallocationlineitemid,	t.id,b.salesOrderdetid,  \n" +
                "					b.refAssyID,			b.SubAssyId,b.kitReleaseQty,	r.kitQPAWithDNP qpa,  \n" +
                "                    t.allocatedUnit,  		b.calculatedKitQty,				t.allocatedPin,  \n" +
                "                    t.availableStock,		t.availableStockInPin,          r.mountingTypeID,  \n" +
                "                    (CASE WHEN r.connecterTypeID = -2 THEN r.connecterTypeID ELSE NULL END) connecterTypeID,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
                "								(t.allocatedUnit/r.kitQPAWithDNP)  \n" +
                "							ELSE (IFNULL(t.allocatedPin, 0) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
                "						END  \n" +
                "					) feasibilityWithAllocation,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (r.numOfPosition IS NULL OR r.numOfPosition = 0) THEN  \n" +
                "								((t.availableStock + t.allocatedUnit)/r.kitQPAWithDNP)  \n" +
                "							ELSE ((IFNULL(t.allocatedPin, 0) + IFNULL(t.availableStockInPin, 0)) / (r.kitQPAWithDNP * r.numOfPosition))  \n" +
                "						END  \n" +
                "					) feasibilityWithAvailableAndAllocatedStock,  \n" +
                "					(CASE  \n" +
                "						WHEN r.uomMismatchedStep = 0 THEN 0  \n" +
                "						ELSE  \n" +
                "							CASE  \n" +
                "								WHEN r.connecterTypeID = -2 THEN  \n" +
                "									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty* IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0)) < 0)  \n" +
                "											THEN 0  \n" +
                "											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty * IFNULL(r.numOfPosition, 0)) - IFNULL(t.allocatedPin, 0))  \n" +
                "									END)  \n" +
                "								ELSE  \n" +
                "									(CASE WHEN (((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0)) < 0)  \n" +
                "											THEN 0  \n" +
                "											ELSE ((IFNULL(r.kitQPAWithDNP, 0) * b.calculatedKitQty) - IFNULL(t.allocatedUnit, 0))  \n" +
                "									END)  \n" +
                "							END  \n" +
                "					END) shortagePerBuild  \n" +
                "			FROM  \n" +
                "				(  \n" +
                "					SELECT 	k.id,		kl.refSalesOrderDetID, 		CAST(kl.refRfqLineitem AS CHAR(100)) consolidatedLineItemIDs,  \n" +
                "							kl.mountingTypeID, 						kl.connecterTypeID,  \n" +
                "                            kl.consolidatedMfgPNIDs, 				k.numOfPosition,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN k.isPurchase = 1 OR k.isInstall = 1 THEN  \n" +
                "										(IFNULL(k.qpa, 0) + IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "									ELSE (IF(k.isBuyDNPQty = 'Y' OR k.isBuyDNPQty = 'P' OR k.isBuyDNPQty = 'C', IFNULL(k.dnpQty, 0), 0))  \n" +
                "								END  \n" +
                "							) AS kitQPAWithDNP,  \n" +
                "							kl.uomMismatchedStep,          k.isNotRequiredKitAllocation, 		k.uomID,	k.custPNID  \n" +
                "					FROM 	(  \n" +
                "								SELECT 		kal.refSalesOrderDetID,		 kal.partID,	kal.refRfqLineitem,  \n" +
                "											(  \n" +
                "												CASE 	WHEN MIN(c.mountingTypeID) = MAX(c.mountingTypeID) /* Matched Mounting Type */  \n" +
                "														THEN  MIN(c.mountingTypeID)  \n" +
                "													WHEN MIN(c.mountingTypeID) !=  MAX(c.mountingTypeID) AND MAX(kal.approvedMountingType) = 1 /* Mismatched with Approval Mounting Type */  \n" +
                "														THEN MAX((CASE WHEN kal.approvedMountingType = 1 THEN c.mountingTypeID ELSE NULL END))  \n" +
                "													ELSE  -1  \n" +
                "												END  \n" +
                "											) mountingTypeID,  \n" +
                "											IFNULL(MAX(c.connecterTypeID), -1) connecterTypeID,  \n" +
                "											GROUP_CONCAT(IFNULL(cp.id, c.id)) consolidatedMfgPNIDs,  \n" +
                "											MIN(kal.uomMismatchedStep) uomMismatchedStep    /* Zero indicate to part value does not match with BOM UOM */  \n" +
                "									FROM 		kit_allocation_lineitems_alternatepart kal  \n" +
                "									JOIN 		component c ON kal.mfgPNID = c.id AND c.isGoodPart = 1  \n" +
                "									LEFT JOIN 	component cp ON c.packaginggroupID = cp.packaginggroupID  AND cp.isDeleted = 0  \n" +
                "									WHERE		kal.refSalesOrderDetID =  pRefSalesOrderDetID  \n" +
                "									AND 		kal.partID = IFNULL(pSubAssyID, pAssyID)  \n" +
                "									AND 		kal.isDeleted = 0  \n" +
                "									AND			c.isDeleted = 0  \n" +
                "									GROUP BY  	kal.refSalesOrderDetID, kal.partID, kal.refRfqLineitem  \n" +
                "							) AS kl  \n" +
                "							INNER JOIN 	kit_allocation_lineitems k ON k.refSalesOrderDetID = kl.refSalesOrderDetID AND k.partID = kl.partID AND k.refRfqLineitem = kl.refRfqLineitem AND k.isDeleted = 0  \n" +
                "				) r  \n" +
                "				INNER JOIN (  \n" +
                "							SELECT 	id,		salesOrderdetid,	refAssyID,	SubAssyId,	kitReleaseQty,  \n" +
                "									SUM(kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
                "							FROM salesorder_plan_detailsmst where salesorderdetid= pRefSalesOrderDetID  AND isDeleted = 0  \n" +
                "                            ) b  \n" +
                "				INNER JOIN 	temp_Kit_Stock_Det t ON r.id = t.id  \n" +
                "		) a  \n" +
                "		GROUP BY  salesorderPlanId,salesOrderdetid,kitreleaseQty,refAssyId,calculatedKitQty;  \n" +
                "  \n" +
                "	SELECT 	id,  \n" +
                "			plannKitNumber,  \n" +
                "			poQty,  \n" +
                "			poDueDate,  \n" +
                "			materialDockDate,  \n" +
                "			b.kitReleaseQty,  \n" +
                "			kitReleaseDate,  \n" +
                "			feasibilityWithAllocatedQty AS currentBuildFeasibility,  \n" +
                "			(CASE WHEN buildFeasibility > 0 THEN buildFeasibility ELSE 0 END) AS buildFeasibility,  \n" +
                "			(CASE WHEN (buildFeasibility > 0 AND buildFeasibility > b.kitReleaseQty) THEN 0 WHEN (buildFeasibility > 0) THEN (b.kitReleaseQty - buildFeasibility) ELSE b.kitReleaseQty END) AS Shortage,  \n" +
                "            c.shortageLines,  \n" +
                "			b.calculatedKitQty,  \n" +
                "			actualKitReleaseDate,  \n" +
                "			releaseTimeFeasibility,  \n" +
                "			releasedByName,  \n" +
                "			mfrLeadTime,  \n" +
                "			kitStatus,  \n" +
                "			RushJob,  \n" +
                "			FUNC_MISMATCHITEMFORKIT(b.salesOrderDetID, IFNULL(b.subAssyID,b.refAssyId), 'M', NULL, NULL) mismatchItem,  \n" +
                "			fun_getWorkorderNumberByID(woID) workorderNumber,  \n" +
                "			releasedNote,  \n" +
                "			releaseKitNumber,  \n" +
                "			subAssyReleaseCount,  \n" +
                "			subAssyReleasedCount,  \n" +
                "			woID,  \n" +
                "			kitReturnDate,  \n" +
                "			kitReturnStatus,  \n" +
                "			woStatusID,  \n" +
                "            woSubStatusID,  \n" +
                "            IF(pSubAssyID IS NULL, 0, 1) AS isSubAssembly  \n" +
                "	FROM  \n" +
                "			(  \n" +
                "				SELECT *,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN (calculatedKitQty >  feasibilityWithAllocatedQty) THEN  (kitReleaseQty - (calculatedKitQty - feasibilityWithAllocatedQty))  \n" +
                "							ELSE kitReleaseQty  \n" +
                "						END  \n" +
                "					) buildFeasibility  \n" +
                "				FROM	(  \n" +
                "						SELECT 	r.*,  \n" +
                "							SUM(r.kitReleaseQty) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS calculatedKitQty  \n" +
                "						FROM 	vu_release_plan_detail r  \n" +
                "						WHERE 	r.salesOrderDetID = pRefSalesOrderDetID  \n" +
                "								AND r.refAssyId = pAssyID  \n" +
                "								AND (  \n" +
                "				 					CASE  \n" +
                "										WHEN pSubAssyID IS NOT NULL THEN r.subAssyID = pSubAssyID  \n" +
                "										ELSE r.subAssyID IS NULL  \n" +
                "									END  \n" +
                "								)  \n" +
                "						ORDER BY r.salesOrderDetID, r.refAssyId, r.subAssyID, r.refPlanId DESC, r.id  \n" +
                "					)  \n" +
                "				AS a  \n" +
                "	 		)  \n" +
                "	AS b   inner join     temp_Kit_calculateshortageLinperPlan c on  b.id =  c.salesorderplanid  \n" +
                "	ORDER BY poDueDate, plannKitNumber ASC;  \n" +
                "  \n" +
                "	SELECT MIN(promisedShipDate) promisedShipDate FROM salesshippingmst WHERE  sDetID = pRefSalesOrderDetID and isdeleted = 0 ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetReleaseReturnHistoryList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReleaseReturnHistoryList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pSalesOrderDetID INT,  \n" +
                "    IN pRefAssyId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetReleaseReturnHistoryList = CONCAT(\"  \n" +
                "		SELECT 	rrh.id, rrh.refPlanId, rrh.salesOrderDetID, rrh.woID, rrh.refAssyId, rrh.plannKitNumber,  \n" +
                "                rrh.releaseStatus, rrh.releasedNote, rrh.releaseKitNumber, rrh.returnStatus,  \n" +
                "                (CASE WHEN returnStatus = 'FR' THEN  \n" +
                "						'Fully Returned'  \n" +
                "					WHEN returnStatus = 'RS' THEN  \n" +
                "							'Returned With Shortage'  \n" +
                "					WHEN returnStatus = 'PR' THEN  \n" +
                "							'Partially Returned'  \n" +
                "					WHEN returnStatus = 'RR' THEN  \n" +
                "							'Ready To Return'  \n" +
                "					WHEN returnStatus = 'NR' THEN  \n" +
                "							'Not Returned'  \n" +
                "				ELSE 'N/A' END) AS returnStatusValue,  \n" +
                "                IF(releaseStatus = 'R', 'Released', 'In Progress') AS releaseStatusValue,  \n" +
                "                fun_getWorkorderNumberByID(rrh.woID) woNumber,  \n" +
                "                fun_getUserNameByID(rrh.releasedBy) releasedBy,  \n" +
                "                fun_getUserNameByID(rrh.returnBy) returnBy,  \n" +
                "				fun_getUserNameByID(rrh.updatedBy) updatedby,  \n" +
                "				fun_getRoleByID(rrh.updateByRoleId) updatedbyRole,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(rrh.releaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') releaseDate,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(rrh.returnDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') returnDate,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(rrh.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "		FROM 	kit_release_return_trans_history rrh  \n" +
                "		WHERE   rrh.isDeleted = 0 AND rrh.salesOrderDetID = \",pSalesOrderDetID,\" AND  rrh.refAssyId = \",pRefAssyId,\"  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY id DESC \") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1=1 ' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetReleaseReturnHistoryList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT a.* FROM ( \", @temp_Sproc_GetReleaseReturnHistoryList,\" ) a WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5775,'2.00','V1','Bug 39807: QA Testing for User Story 34796: Kit Released And Return Flow changes for Re-released Kit Plan 27-12-2021 - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5775:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_InvoicePaymentVoidAndReIssue` ;  \n" +
                "CREATE PROCEDURE `Sproc_InvoicePaymentVoidAndReIssue`(  \n" +
                "	IN pSystemId VARCHAR(20),  \n" +
                "	IN pRefVoidPaymentId INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pRemark VARCHAR(255),  \n" +
                "	IN pPayToName VARCHAR(255),  \n" +
                "	IN pPayToAddress VARCHAR(255),  \n" +
                "	IN pVoidPaymentReason VARCHAR(255),  \n" +
                "	IN pRefPaymentModeOfInvPayment VARCHAR(2),  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vCount INT;  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE vNewPaymentID INT;  \n" +
                "	DECLARE vOldPaymentOrCheckNo VARCHAR(50);  \n" +
                "	DECLARE vPMTLockStatus VARCHAR(5) DEFAULT '';  \n" +
                "	DECLARE vPMTRefundStatus VARCHAR(5) DEFAULT '';  \n" +
                "  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "  \n" +
                "	/* pRefPaymentModeOfInvPayment >> P-Payable   R-Receivable */  \n" +
                "	SELECT 	COUNT(1)   INTO 	vCount  \n" +
                "	FROM 	packingslip_invoice_payment  \n" +
                "	WHERE 	id = pRefVoidPaymentId  \n" +
                "	AND isPaymentVoided = 0  \n" +
                "	AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'P') THEN  \n" +
                "		/*check duplicate check number validation*/  \n" +
                "		SELECT 	COUNT(1)  INTO 	vCountExistsCheckNo  \n" +
                "		FROM 	packingslip_invoice_payment  \n" +
                "		WHERE 	isdeleted = 0  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND bankAccountMasID = pBankAccountMasID  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "	 ELSEIF (pRefPaymentModeOfInvPayment = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check duplicate check number if confirmation not taken */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	 IF (pRefPaymentModeOfInvPayment = 'R') THEN  \n" +
                "		/* if Receivable payment and already locked/refunded payment then not allowed to void and rereceive */  \n" +
                "		SELECT lockStatus, refundStatus INTO vPMTLockStatus, vPMTRefundStatus  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id = pRefVoidPaymentId  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
                "		AND isPaymentVoided = 0 AND isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (vCount = 1 AND vCountExistsCheckNo = 0 AND vPMTLockStatus != 'LC' AND vPMTRefundStatus != 'PR' AND vPMTRefundStatus != 'FR') THEN  \n" +
                "  \n" +
                "		UPDATE 	packingslip_invoice_payment  \n" +
                "		SET 	voidPaymentReason = pVoidPaymentReason,  \n" +
                "			isPaymentVoided = 1,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pRoleID,  \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	id = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment transaction*/  \n" +
                "		INSERT INTO packingslip_invoice_payment  \n" +
                "				(systemId, mfgcodeID, paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID,  \n" +
                "				bankAccountNo, bankName, payToName, payToAddress, remark, createdBy, createByRoleId,  \n" +
                "				updatedBy, updateByRoleId, refVoidedPaymentNumber, refVoidedPaymentId, refPaymentMode,  \n" +
                "				billToName, billToAddress, isZeroPayment, depositBatchNumber,  \n" +
                "				lockStatus, refundStatus)  \n" +
                "		SELECT 	pSystemId, mfgcodeID, pPaymentNumber, pPaymentDate, paymentAmount, pPaymentType, pAccountReference, pBankAccountMasID,  \n" +
                "				pBankAccountNo, pBankName, pPayToName, pPayToAddress, pRemark, pUserID, pRoleID,  \n" +
                "				pUserID, pRoleID, paymentNumber, id, refPaymentMode,  \n" +
                "				billToName, billToAddress, isZeroPayment, pDepositBatchNumber,  \n" +
                "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN  (CASE WHEN lockStatus = 'LC' THEN 'RL' ELSE lockStatus END)  \n" +
                "					WHEN pRefPaymentModeOfInvPayment = 'P' THEN 'RL'  \n" +
                "					ELSE NULL END),  \n" +
                "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN 'NA' ELSE NULL END)  \n" +
                "		FROM 	packingslip_invoice_payment  \n" +
                "		WHERE 	id = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "  \n" +
                "		SET vNewPaymentID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		/*update payment void flag in detail table*/  \n" +
                "		UPDATE 	packingslip_invoice_payment_det  \n" +
                "		SET 	isPaymentVoided = 1,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pRoleID,  \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment detail transaction*/  \n" +
                "		INSERT INTO packingslip_invoice_payment_det  \n" +
                "				(refPayementid, refPackingslipInvoiceID, createdBy, createByRoleId, updatedBy, updateByRoleId, paymentAmount,  \n" +
                "				isPaymentVoided, refCustPackingslipInvoiceID)  \n" +
                "		SELECT 	vNewPaymentID, refPackingslipInvoiceID, pUserID, pRoleID,  \n" +
                "			pUserID, pRoleID, paymentAmount,  \n" +
                "			FALSE, refCustPackingslipInvoiceID  \n" +
                "		FROM 	packingslip_invoice_payment_det  \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT vNewPaymentID refPayementid;  \n" +
                "	ELSE  \n" +
                "		IF vCountExistsCheckNo != 0 THEN  \n" +
                "			SELECT 'DUPLICATE_CHECKNO' AS message;  \n" +
                "		ELSEIF vCount = 0 THEN  \n" +
                "			IF (pRefPaymentModeOfInvPayment = 'R' AND (SELECT COUNT(1) FROM packingslip_invoice_payment WHERE id = pRefVoidPaymentId  \n" +
                "									AND isPaymentVoided = 1  AND refPaymentMode = pRefPaymentModeOfInvPayment) > 0) THEN  \n" +
                "				SELECT 'ALREADY_VOIDED' AS message;  \n" +
                "			ELSE  \n" +
                "				SELECT 'NOT_FOUND' AS message;  \n" +
                "			END IF;  \n" +
                "		ELSEIF vPMTLockStatus = 'LC' THEN  \n" +
                "			SELECT 'ALREADY_LOCKED' AS message;  \n" +
                "		ELSEIF (pRefPaymentModeOfInvPayment = 'R' AND (vPMTRefundStatus = 'PR' OR vPMTRefundStatus = 'FR')) THEN  \n" +
                "			SELECT 'ALREADY_PMT_REFUNDED' AS message;  \n" +
                "		ELSE  \n" +
                "			SELECT 'NOT_FOUND' AS message;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5776,'2.00','V1',' Sproc_InvoicePaymentVoidAndReIssue - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5776:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-01-2022 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_GetFormattedContactPersonName` ;  \n" +
                "CREATE FUNCTION `fun_GetFormattedContactPersonName`(  \n" +
                "    pCPFirstName VARCHAR(255),  \n" +
                "    pCPMiddleName VARCHAR(255),  \n" +
                "    pCPLastName VARCHAR(255)  \n" +
                ") RETURNS VARCHAR(550) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vFormatValue INT;  \n" +
                "	DECLARE vContPersonFormattedName VARCHAR(550) DEFAULT '';  \n" +
                "	/* { id: '1', value: 'Firstname Middlename Lastname' }, { id: '2', value: 'Firstname Lastname' },  \n" +
                "		{ id: '3', value: 'Firstname Mname Lastname' }, { id: '4', value: 'Firstname Mname. Lastname' },  \n" +
                "		{ id: '5', value: 'Lastname, Firstname Middlename' }, { id: '6', value: 'Lastname, Firstname' },  \n" +
                "		{ id: '7', value: 'Lastname, Firstname Mname' },	{ id: '8', value: 'Lastname, Firstname Mname.' } */  \n" +
                "  \n" +
                "	IF (pCPFirstName IS NOT NULL AND pCPFirstName != '' AND pCPLastName IS NOT NULL AND pCPLastName != '') THEN  \n" +
                "		SELECT `values` INTO vFormatValue  \n" +
                "		FROM systemconfigrations  \n" +
                "		WHERE `key`='ContactPersonDisplayNameFormat';  \n" +
                "  \n" +
                "		SELECT (CASE WHEN vFormatValue = 1 THEN CONCAT(pCPFirstName, ' ', IF(pCPMiddleName IS NOT NULL, CONCAT(pCPMiddleName, ' '),''), pCPLastName)  \n" +
                "				WHEN vFormatValue = 2 THEN CONCAT(pCPFirstName, ' ', pCPLastName)  \n" +
                "				WHEN vFormatValue = 3 THEN CONCAT(pCPFirstName, ' ', IF(pCPMiddleName IS NOT NULL, CONCAT(LEFT(pCPMiddleName,1), ' '),''), pCPLastName)  \n" +
                "				WHEN vFormatValue = 4 THEN CONCAT(pCPFirstName, ' ', IF(pCPMiddleName IS NOT NULL, CONCAT(LEFT(pCPMiddleName,1), '. '),''), pCPLastName)  \n" +
                "				WHEN vFormatValue = 5 THEN CONCAT(pCPLastName, ', ', pCPFirstName , IF(pCPMiddleName IS NOT NULL, CONCAT(' ', pCPMiddleName),''))  \n" +
                "				WHEN vFormatValue = 6 THEN  CONCAT(pCPLastName, ', ', pCPFirstName)  \n" +
                "				WHEN vFormatValue = 7 THEN CONCAT(pCPLastName, ', ', pCPFirstName , IF(pCPMiddleName IS NOT NULL, CONCAT(' ', LEFT(pCPMiddleName,1)),''))  \n" +
                "				WHEN vFormatValue = 8 THEN CONCAT(pCPLastName, ', ', pCPFirstName , IF(pCPMiddleName IS NOT NULL, CONCAT(' ', LEFT(pCPMiddleName,1),'.'),''))  \n" +
                "				ELSE CONCAT(pCPFirstName, ' ', IF(pCPMiddleName IS NOT NULL, CONCAT(LEFT(pCPMiddleName,1), '. '),''), pCPLastName)  \n" +
                "			END) INTO vContPersonFormattedName;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	RETURN vContPersonFormattedName;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 06-01-2022 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getPrimaryEmailFromJsonList` ;  \n" +
                "CREATE FUNCTION `fun_getPrimaryEmailFromJsonList`(  \n" +
                "	pJsonEmailList TEXT  \n" +
                ") RETURNS TEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_Email VARCHAR(100);  \n" +
                "  \n" +
                "  \n" +
                "		SELECT jsonTblEmails.email INTO v_Email  \n" +
                "		FROM JSON_TABLE(pJsonEmailList, '$[*]' COLUMNS (email VARCHAR(100)  PATH '$.email', isprimary TINYINT  PATH '$.isprimary')) jsonTblEmails  \n" +
                "		WHERE isprimary = 1  \n" +
                "		;  \n" +
                "  \n" +
                "  \n" +
                "	RETURN v_Email;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5777,'2.00','V1',' fun_GetFormattedContactPersonName - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5777:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-01-2021 *********************************** */
                "INSERT INTO `table_mapping_details` (`tabel_name`, `display_page_name`) VALUES ('contactperson', 'Contact Person');  \n" +
                /* **************************** New Script -> 07-01-2021 *********************************** */
                "INSERT INTO `entity`(`entityID`,`entityName`,`remark`,`isActive`,`createdAt`,`createdBy`,`systemGenerated`,`columnView`,`entityStatus`,`createByRoleId`,`unqDate`,`displayName`,`jsonObjOfEnterprise`,`searchDisplayOrder`)  \n" +
                " values (-69,'Contact Person','Contact Person',1,UTC_TIMESTAMP(),1,1,null,null,1,'2001-01-01 00:00:00','Contact Person',  \n" +
                " \"{\\\"EntityName\\\": \\\"Contact Person\\\",\\\"FunctionName\\\": \\\"manageContactPersonInElastic\\\",\\\"Type\\\": \\\"Contact Person\\\", \\\"TypeID\\\":\\\"5dc47391-696f-11ec-b789-18c04db2ec50\\\",\\\"Title\\\":\\\"Contact Person\\\",\\\"EntityPrefix\\\":\\\"ContactPerson_\\\"}\",69);  \n" +
                /* **************************** New Script -> 07-01-2021 *********************************** */
                "INSERT INTO `fixed_entity_dataelement` (`tableName`, `displayColumnPKField`, `displayColumnField`, `displayFormattedColumnField`, `createdAt`, `updatedAt`, `createdBy`, `isDeleted`, `filter`, `displayEntityName`) VALUES ('mfgcodemst', 'id', 'mfgName', '{\\\"displayFormat\\\": \\\"concat(\\\'(\\\', mfgCode, \\\') \\\', mfgName)\\\",\\\"searchColmns\\\": [\\\"mfgCode\\\", \\\"mfgName\\\"],\\\"sortBy\\\": [],\\\"alias\\\": \\\"\\\"}', fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime(), '1', '0', '(mfgType = \\\'MFG\\\' OR (mfgType = \\\'DIST\\\' AND isCustOrDisty = 1)) AND isActive = 1', 'Customers And Manufacturers');  \n" +
                /* **************************** New Script -> 07-01-2021 *********************************** */
                "SELECT pageID INTO @adminPageID FROM page_detail WHERE pageName = 'Admin';  \n" +
                "INSERT INTO `page_detail`  \n" +
                "(`pageName`, `RO`, `RW`,`menuRoute`, `menuName`, `parentPageID`, `hasChild`,`orderBy`, `iconClass`, `isActive`, `createdBy`,`updatedBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`)  \n" +
                "VALUES  \n" +
                "('ContactPerson Menu', '0', '0','setting.contactPersonMenu', 'Contact Person', @adminPageID, '1', '33.00','t-icons-contact-person-menu', '1', '1','1', '0', '0', 'Contact Person', '0', '0', '0');  \n" +
                /* **************************** New Script -> 07-01-2021 *********************************** */
                "SELECT pageID INTO @contactPersonMenu FROM page_detail WHERE pageName = 'ContactPerson Menu';  \n" +
                "INSERT INTO `page_detail`  \n" +
                "(`pageName`, `RO`, `RW`,`menuRoute`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`,`orderBy`, `iconClass`,`tabLevel`, `isActive`, `createdBy`,`updatedBy`, `isDeleted`, `isDisplay`, `displayMenuName`, `isAllowAsHomePage`, `isPopup`, `isHideFromMenuList`,`isReadOnlyDeveloped`)  \n" +
                "VALUES  \n" +
                "('Contact Person', '0', '0','setting.contactPersonMenu.contactPerson','app.contactperson', '/contactperson', 'Contact Persons', @contactPersonMenu, '0', '33.10','t-icons-contact-person', '1', '1', '1','1', '0', '1', 'Contact Persons', '1', '0', '0', '1');  \n" +
                /* **************************** Add Script Version -> 07-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5778,'2.00','V1',' User Story 39487: Master Page: Contact Person - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5778:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-01-2021 *********************************** */
                "Drop procedure if Exists `Sproc_RetrieveContactPersonList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveContactPersonList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefEntityType VARCHAR(255),  \n" +
                "	IN pisPrimary tinyint,  \n" +
                "	IN pisDefault tinyint,  \n" +
                "	IN prefName VARCHAR(255),  \n" +
                "	IN padditionalComment VARCHAR(2000)  \n" +
                "   )  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "        DECLARE mfgcodemstCondition varchar(255) DEFAULT '';  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE vMfgCodeFormat INT;  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "  \n" +
                "  		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = ' 1=1 ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefEntityType = 'Manufacturer') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'MFG'\");  \n" +
                "		ELSEIF (prefEntityType = 'Supplier') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisPrimary) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isPrimary = '\",pisPrimary,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisDefault) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isDefault = '\",pisDefault,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefName IS NOT NULL AND prefName != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND refName LIKE '%\",prefName,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(padditionalComment IS NOT NULL AND padditionalComment != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND additionalComment LIKE '%\",padditionalComment,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # Common Details for Retrive Contact Person.  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_Common = CONCAT(\"  \n" +
                "			fun_GetFormattedContactPersonName(a.firstName, a.middleName, a.lastName) formattedName,  \n" +
                "			fun_getUserNameByID(a.updatedBy) updatedbyValue, fun_getUserNameByID(a.createdBy) createdbyValue,  \n" +
                "			fun_getRoleByID(a.createByRoleId) createdbyRoleValue, fun_getRoleByID(a.updateByRoleId) updatedbyRoleValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "			(CASE WHEN (a.systemGenerated = 0) THEN 'No' WHEN (a.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `syatemGeneratedValue`,  \n" +
                "			(CASE WHEN (a.isDefault = 0) THEN 'No' WHEN (a.isDefault = 1) THEN 'Yes' ELSE '' END) AS `isDefaultValue`,  \n" +
                "			(CASE WHEN (a.isPrimary = 0) THEN 'No' WHEN (a.isPrimary = 1) THEN 'Yes' ELSE '' END) AS `isPrimaryValue`  \n" +
                "		\");  \n" +
                "  \n" +
                "		# Filter: Personnel  \n" +
                "		SET @temp_Sproc_RetrieveMasterTemplate_employees = CONCAT(\"  \n" +
                "			select cp.personId, cp.refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.email, cp.isDefault, cp.additionalComment,  \n" +
                "					cp.phone, cp.mobile, cp.division, cp.faxNumber, cp.phExtension, cp.isPrimary, cp.systemGenerated, fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName,emp.initialName,\",vEmployeeNameFormat,\") AS refName, 'Personnel' AS refEntityType,  \n" +
                "					(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) emailList,  \n" +
                "                    cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "				FROM contactperson cp  \n" +
                "				INNER JOIN employees emp ON emp.id = cp.refTransID and emp.isDeleted = 0  \n" +
                "							WHERE cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # Filter: Manufacturer AND Supplier  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_mfgcodemst = CONCAT(\"  \n" +
                "			select cp.personId, cp.refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.email, cp.isDefault, cp.additionalComment,  \n" +
                "					cp.phone, cp.mobile, cp.division, cp.faxNumber, cp.phExtension, cp.isPrimary, cp.systemGenerated, fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName, \",vMfgCodeFormat,\") AS refName,  \n" +
                "					(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "					(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) emailList,  \n" +
                "                    cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "                FROM contactperson cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID and mfg.isDeleted = 0 \",mfgcodemstCondition,\"  \n" +
                "						WHERE cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # UNION Records based of Filer : Create Final Query for Fetch Contact Person Records.  \n" +
                "        IF(prefEntityType = 'Supplier' OR prefEntityType = 'Manufacturer') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "		ELSEIF (prefEntityType = 'Personnel') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\") a \");  \n" +
                "        ELSE  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate= CONCAT(\"select *,\",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\" UNION ALL \",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY firstName ASC\" ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		 /* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveMasterTemplate,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveMasterTemplate,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 07-01-2021 *********************************** */
                "Drop procedure if exists `Sproc_checkDelete_contactperson`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_contactperson`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "/*  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempContactperson as  \n" +
                "	  (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive\" else \"\" end as msg FROM packing_slip_material_receive WHERE isDeleted = 0 AND (billToConactPerson IN (',IDs,')  \n" +
                "			OR shipToContactPersonID IN (',IDs,') OR rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted = 0 AND (payToContactPersonID IN (',IDs,') OR billToContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted = 0 AND (supplierContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_line_release_det\" else \"\" end as msg FROM purchase_order_line_release_det WHERE isDeleted = 0 AND shippingConactPersonID IN (',IDs,') LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE isDeleted = 0 AND (custBillingConactPersonID IN (',IDs,') OR custShippingConactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_quotation_submitted\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0 AND (custBillingConactPersonID IN (',IDs,') OR custShippingConactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesshippingmst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0 AND shippingContactPersonID IN (',IDs,') LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "	  (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip\" else \"\" end as msg FROM customer_packingslip WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,')) LIMIT 1)');  \n" +
                "  	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "  */  \n" +
                "  \n" +
                "	/* Temp.code:  once uncomment above code then please remove Below Code. -S */  \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempContactperson as  \n" +
                "		  (SELECT 0 cnt , \"\" as msg)');  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "    /* -E */  \n" +
                "  \n" +
                "    IF(countList=FALSE) THEN  \n" +
                "		IF(SELECT SUM(t.cnt) FROM tempContactperson t)=0 THEN  \n" +
                "			SET @SQl1 = CONCAT('update contactperson set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where personId in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			SELECT * FROM tempContactperson WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempContactperson t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "		FROM tempContactperson t1  \n" +
                "		INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "			WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "			ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE if exists tempContactperson;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 07-01-2021 *********************************** */
                "Drop procedure if exists `Sproc_GetContactPersonForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetContactPersonForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE vEmployeeNameFormat INT;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1)  \n" +
                "		FROM `contactperson`  \n" +
                "		WHERE `isDeleted` = 0 AND `personId` = IFNULL(pId,`personId`);  \n" +
                "	ELSE  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.phone, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, cp.phExtension, cp.refTransID,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName) fullName, 'Personnel' AS refEntityType,  \n" +
                "				fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName,emp.initialName,vEmployeeNameFormat) AS refName,  \n" +
                "				(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) email,  \n" +
                "				(CASE WHEN (cp.isDefault = 0) THEN 'No'  \n" +
                "					WHEN (cp.isDefault = 1) THEN 'Yes' ELSE '' END) AS isDefault,  \n" +
                "				(CASE WHEN (cp.isPrimary = 0) THEN 'No'  \n" +
                "					WHEN (cp.isPrimary = 1) THEN 'Yes' ELSE '' END) AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "				INNER JOIN employees emp ON emp.id = cp.refTransID and emp.isDeleted = 0  \n" +
                "			WHERE `personId` = IFNULL(pId,`personId`)  \n" +
                "				AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END)  \n" +
                "		UNION ALL  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.phone, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, cp.phExtension, cp.refTransID,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName) fullName,  \n" +
                "				(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "                fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,vMfgCodeFormat) AS refName,  \n" +
                "				(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) email,  \n" +
                "				(CASE WHEN (cp.isDefault = 0) THEN 'No'  \n" +
                "					WHEN (cp.isDefault = 1) THEN 'Yes' ELSE '' END) AS isDefault,  \n" +
                "				(CASE WHEN (cp.isPrimary = 0) THEN 'No'  \n" +
                "					WHEN (cp.isPrimary = 1) THEN 'Yes' ELSE '' END) AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID and mfg.isDeleted = 0  \n" +
                "			WHERE `personId` = IFNULL(pId,`personId`)  \n" +
                "				AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 07-01-2021 *********************************** */
                "Drop procedure if exists `Sproc_checkDelete`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete`(  \n" +
                "    IN tableName VARCHAR(255),  \n" +
                "    IN IDs LONGTEXT,  \n" +
                "    IN deletedBy INT,  \n" +
                "    IN entityID VARCHAR(255),  \n" +
                "    IN refrenceIDs LONGTEXT,  \n" +
                "    IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "IF tableName=\"employees\" THEN  \n" +
                "    CALL Sproc_checkDelete_employees(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"eco_type_category\" THEN  \n" +
                "     CALL Sproc_checkDelete_eco_type_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"eco_type_values\" THEN  \n" +
                "      CALL Sproc_checkDelete_eco_type_values(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customers\" THEN  \n" +
                "     CALL Sproc_checkDelete_customers(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"certificate_standards\" THEN  \n" +
                "    CALL Sproc_checkDelete_certificate_standards(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"department\" THEN  \n" +
                "    CALL Sproc_checkDelete_department(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"genericcategory\" THEN  \n" +
                "    CALL Sproc_checkDelete_genericcategory(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"equipment\" THEN  \n" +
                "    CALL  Sproc_checkDelete_equipment (tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"master_templates\" THEN  \n" +
                "   CALL Sproc_checkDelete_master_templates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"operations\" THEN  \n" +
                "   CALL Sproc_checkDelete_operations(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder\" THEN  \n" +
                "   CALL Sproc_checkDelete_workorder(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"roles\" THEN  \n" +
                "   CALL Sproc_checkDelete_roles(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"standard_class\" THEN  \n" +
                "   CALL Sproc_checkDelete_standard_class(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"dataelement\" THEN  \n" +
                "   CALL Sproc_checkDelete_dataelement(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_preprogcomp\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_preprogcomp(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component\" THEN  \n" +
                "    CALL Sproc_checkDelete_component(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_cluster\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_part\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_part(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_equipment\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_employee\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_employee(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_cluster\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_cluster(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"entity\" THEN  \n" +
                "    CALL Sproc_checkDelete_entity(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"salesordermst\" THEN  \n" +
                "    CALL Sproc_checkDelete_salesordermst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"mfgcodemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_mfgcodemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"dataelement_transactionvalues_manual\" THEN  \n" +
                "  CALL Sproc_checkDelete_dataelement_transactionvalues_manual(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"shippedassembly\" THEN  \n" +
                "   CALL Sproc_checkDelete_shippedassembly(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_serialno\" THEN  \n" +
                "   CALL Sproc_checkDelete_workorder_trans_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"br_label_template\" THEN  \n" +
                "   CALL Sproc_checkDelete_br_label_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"measurement_types\" THEN  \n" +
                "   CALL Sproc_checkDelete_measurement_types(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"uoms\" THEN  \n" +
                "   CALL Sproc_checkDelete_uoms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"jobtypes\" THEN  \n" +
                "   CALL Sproc_checkDelete_jobtypes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfqtype\" THEN  \n" +
                "   CALL Sproc_checkDelete_rfqtype(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"reasonmst\" THEN  \n" +
                "   CALL Sproc_checkDelete_reasonmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_sid_stock\" THEN  \n" +
                "   CALL Sproc_checkDelete_component_sid_stock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_sid_stock_dataelement_values\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_sid_stock_dataelement_values(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"chart_templatemst\" THEN  \n" +
                "    CALL Sproc_checkDelete_chart_templatemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"shipping_requestdet\" THEN  \n" +
                "    CALL Sproc_checkDelete_shipping_requestdet(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"chart_rawdata_category\" THEN  \n" +
                "     CALL Sproc_checkDelete_chart_rawdata_category(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_lineitems\" THEN  \n" +
                "      CALL Sproc_checkDelete_rfq_lineitems(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"requirement\" THEN  \n" +
                "    CALL Sproc_checkDelete_requirement(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_packagingdetail\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_trans_packagingdetail(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customer_addresses\" THEN  \n" +
                "   CALL Sproc_checkDelete_customer_addresses(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfqforms\" THEN  \n" +
                "    CALL Sproc_checkDelete_rfqforms(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_mountingtypemst\" THEN  \n" +
                "    CALL Sproc_checkDelete_rfq_mountingtypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"who_bought_who\" THEN  \n" +
                "  CALL Sproc_checkDelete_who_bought_who(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_parttypemst\" THEN  \n" +
                "   CALL Sproc_checkDelete_rfq_parttypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_lineitems_errorcode\" THEN  \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_errorcode(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_lineitems_keywords\" THEN  \n" +
                "  CALL Sproc_checkDelete_rfq_lineitems_keywords(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"quotecharges_dynamic_fields_mst\" THEN  \n" +
                "  CALL Sproc_checkDelete_quotecharges_dynamic_fields_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"cost_category\" THEN  \n" +
                "    CALL Sproc_checkDelete_cost_category(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"chartypemst\" THEN  \n" +
                "    CALL Sproc_checkDelete_chartypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"countrymst\" THEN  \n" +
                "     CALL Sproc_checkDelete_countrymst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_connectertypemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_rfq_connectertypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_assy_typemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_rfq_assy_typemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"warehousemst\" THEN  \n" +
                "     CALL Sproc_checkDelete_warehousemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"binmst\" THEN  \n" +
                "     CALL Sproc_checkDelete_binmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rackmst\" THEN  \n" +
                "     CALL Sproc_checkDelete_rackmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_logicalgroup\" THEN  \n" +
                "     CALL Sproc_checkDelete_component_logical_group(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"packing_slip_material_receive\" THEN  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"packing_slip_material_receive_det\" THEN  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_det(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"packing_slip_material_receive_memo\" THEN  \n" +
                "     CALL Sproc_checkDelete_packing_slip_material_receive_memo(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"packing_slip_track_number\" THEN  \n" +
                "     CALL Sproc_checkDelete_packing_slip_track_number(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"reserve_stock_request\" THEN  \n" +
                "       	 CALL Sproc_checkDelete_reserve_stock_request(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_packagingmst\" THEN  \n" +
                "     CALL Sproc_checkDelete_component_packagingmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_narrative_history\" THEN  \n" +
                "     CALL Sproc_checkDelete_workorder_trans_narrative_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"scannermst\" THEN  \n" +
                "     CALL Sproc_checkDelete_Scanner(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_alternatepn_validations\" THEN  \n" +
                "     CALL Sproc_checkDelete_Alias_Parts_Validation(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_operation_equipment_feeder_details\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_operation_equipment_feeder_details(tableName,IDs,deletedBy,entityID,refrenceIDs,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_price_break_details\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_price_break_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"department_location\" THEN  \n" +
                "    CALL Sproc_checkDelete_department_location(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"purchase_parts_details\" THEN  \n" +
                "    CALL Sproc_checkDelete_purchase_parts_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_rohsmst\" THEN  \n" +
                "    CALL Sproc_checkDelete_rfq_rohsmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_partstatusmst\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_partstatusmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_umid_details\" THEN  \n" +
                "    CALL Sproc_checkDelete_workorder_trans_umid_details(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"labor_cost_template\" THEN  \n" +
                "    CALL Sproc_checkDelete_labor_cost_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"rfq_packagecasetypemst\" THEN  \n" +
                "    CALL Sproc_checkDelete_rfq_packagecasetypemst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_dynamic_attribute\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"component_dynamic_attribute_mapping_part\" THEN  \n" +
                "    CALL Sproc_checkDelete_component_dynamic_attribute_mapping_part(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"labeltemplatesmst\" THEN  \n" +
                "    CALL Sproc_checkDelete_labeltemplates(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"reportmaster\" THEN  \n" +
                "    CALL Sproc_checkDelete_reportMaster(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"operating_temperature_conversion_mst\" THEN  \n" +
                "    CALL Sproc_checkDelete_operating_temperature_conversion_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"inspection_mst\" THEN  \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementMst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"inspection_template_mst\" THEN  \n" +
                "    CALL Sproc_checkDelete_inspectionRequirementTemplate(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"componenet_inspection_requirement_det\" THEN  \n" +
                "    CALL Sproc_checkDelete_componenet_inspection_requirement_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"supplier_quote_mst\" THEN  \n" +
                "   CALL Sproc_checkDelete_supplier_quote(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"supplier_quote_parts_det\" THEN  \n" +
                "   CALL Sproc_checkDelete_supplier_quote_parts(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"calibration_details\" THEN  \n" +
                "   CALL Sproc_checkDelete_CalibrationDetails(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customer_packingslip\" THEN  \n" +
                "   CALL Sproc_checkDelete_customer_packingslip(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customer_packingslip_det\" THEN  \n" +
                "   CALL Sproc_checkDelete_customer_packingslip_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"supplier_attribute_template_mst\" THEN  \n" +
                "      CALL Sproc_checkDelete_supplier_attribute_template(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"freeonboardmst\" THEN  \n" +
                "   CALL Sproc_checkDelete_freeonboard(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"generic_file_extension\" THEN  \n" +
                "   CALL Sproc_checkDelete_genericFileExtension(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"assemblystock\" THEN  \n" +
                "   CALL Sproc_checkDelete_assemblystock(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"customer_invoice\" THEN  \n" +
                "   CALL Sproc_checkDelete_customer_invoice(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_boxserialno\" THEN  \n" +
                "   CALL Sproc_checkDelete_wo_box_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"workorder_trans_boxserialno\" THEN  \n" +
                "   CALL Sproc_checkDelete_wo_trans_box_serialno(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"bank_mst\" THEN  \n" +
                "   CALL Sproc_checkDelete_bank(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"cameramst\" THEN  \n" +
                "   CALL Sproc_checkDelete_cameramst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"release_notes_detail\" THEN  \n" +
                "   CALL Sproc_checkDelete_releasenotes_detail(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"release_notes\" THEN  \n" +
                "   CALL Sproc_checkDelete_releasenotes(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"purchase_order_mst\" THEN  \n" +
                "   CALL Sproc_checkDelete_purchase_order_mst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"acct_acctmst\" THEN  \n" +
                "    CALL Sproc_checkDelete_acct_acctmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"help_blog_det\" THEN  \n" +
                "   CALL Sproc_checkDelete_helpblog_detail(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"acct_classmst\" THEN  \n" +
                "	CALL Sproc_checkDelete_acct_classmst(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"mfgcodemst_comment_det\" THEN  \n" +
                "    CALL Sproc_checkDelete_mfgcodemst_comment_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"generic_transmode_mst\" THEN  \n" +
                "    CALL Sproc_checkDelete_generic_transmode_mst_det(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"assembly_trans_history\" THEN  \n" +
                "   CALL Sproc_checkDelete_assy_trans_history(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "IF tableName=\"contactperson\" THEN  \n" +
                "   CALL Sproc_checkDelete_contactperson(tableName,IDs,deletedBy,entityID,refrenceIDs,countList,pRoleID);  \n" +
                "END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 07-01-2021 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_contactperson`;  \n" +
                "CREATE TRIGGER `Trg_AU_contactperson` AFTER UPDATE ON `contactperson` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_createdAt DATETIME DEFAULT fun_DatetimetoUTCDateTime();  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"contactperson\";  \n" +
                "  \n" +
                "	IF IFNULL(OLD.firstName,0) != IFNULL(NEW.firstName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'First Name',CAST(OLD.firstName AS CHAR), CAST(NEW.firstName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'firstName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.lastName,0) != IFNULL(NEW.lastName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Last Name',CAST(OLD.lastName AS CHAR), CAST(NEW.lastName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'lastName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Email',CAST((SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(OLD.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails) AS CHAR),  \n" +
                "			CAST(( SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(NEW.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails)AS CHAR), v_createdAt,NEW.createdBy,v_createdAt,  \n" +
                "            NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'email'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phone,0) != IFNULL(NEW.phone,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Phone',CAST(OLD.phone AS CHAR), CAST(NEW.phone AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phone'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mobile,0) != IFNULL(NEW.mobile,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Mobile',CAST(OLD.mobile AS CHAR), CAST(NEW.mobile AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'mobile'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.division,0) != IFNULL(NEW.division,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Department',CAST(OLD.division AS CHAR), CAST(NEW.division AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'division'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'faxNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phExtension,0) != IFNULL(NEW.phExtension,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Ext.',CAST(OLD.phExtension AS CHAR), CAST(NEW.phExtension AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phExtension'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phoneCountryCode,0) != IFNULL(NEW.phoneCountryCode,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Phone Country Code',CAST(OLD.phoneCountryCode AS CHAR), CAST(NEW.phoneCountryCode AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phoneCountryCode'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.faxCountryCode,0) != IFNULL(NEW.faxCountryCode,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Fax Country Code',CAST(OLD.faxCountryCode AS CHAR), CAST(NEW.faxCountryCode AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'faxCountryCode'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mobileCountryCode,0) != IFNULL(NEW.mobileCountryCode,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Mobile Country Code',CAST(OLD.mobileCountryCode AS CHAR), CAST(NEW.mobileCountryCode AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'mobileCountryCode'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.middleName,0) != IFNULL(NEW.middleName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Middle Name',CAST(OLD.middleName AS CHAR), CAST(NEW.middleName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'middleName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDefault,0) != IFNULL(NEW.isDefault,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Is Default',CAST((CASE WHEN OLD.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isDefault'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.additionalComment,0) != IFNULL(NEW.additionalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Comment',CAST(OLD.additionalComment AS CHAR), CAST(NEW.additionalComment AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'longtext');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPrimary,0) != IFNULL(NEW.isPrimary,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Is Primary',CAST((CASE WHEN OLD.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isPrimary'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(OLD.refTableName,0) != IFNULL(NEW.refTableName,0) OR IFNULL(OLD.refTransID,0) != IFNULL(NEW.refTransID,0) ) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Contact Person Type',CAST((CASE WHEN (OLD.refTableName = 'employees') THEN 'Personnel' WHEN (OLD.refTableName = 'mfgcodemst') THEN (SELECT (CASE  \n" +
                "			WHEN a.mfgType = 'MFG' THEN 'Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = OLD.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "			CAST((CASE WHEN (NEW.refTableName = 'employees') THEN 'Personnel' WHEN (NEW.refTableName = 'mfgcodemst') THEN (SELECT (CASE WHEN a.mfgType = 'MFG' THEN 'Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = NEW.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "             v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'refTableName'));  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5779,'2.00','V1',' User Story 39487: Master Page: Contact Person - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5779:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesorderList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				fun_GetFormattedMfgCode(vuss.mfgCode, vuss.mfgName,\", vMfgCodeFormat ,\") AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 and vuss.blanketPOOption=2 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				vuss.blanketPOOption,  \n" +
                "				vuss.blanketPOOptionText,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "                fun_GetFormattedMfgCode(vuss.mfgCode, vuss.mfgName,\", vMfgCodeFormat ,\") ,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToReturnCount,vrr.shortageReturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount ,  \n" +
                "				vuss.rmaNumber,vuss.isDebitedByCustomer, vuss.debitedByCustText,  \n" +
                "				vuss.rmaOrgPONumber,vuss.orgSalesOrderID,vuss.isReworkRequired,  \n" +
                "				vuss.reworkReqText, vuss.reworkPONumber,vuss.custOrgPOLineNumber \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToReturnCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'' OR rmaNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''' OR rmaNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "    IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsRmaPO = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isRmaPO = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "	ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5780,'2.00','V1','Sproc_GetSalesorderList - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5780:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_warehouse_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_warehouse_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pGlobalSearchWHString VARCHAR(1000),  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pParamSearchWHId INT,  \n" +
                "	pSearchWHString VARCHAR(1000),  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchClusterWHID INT,  \n" +
                "	pRefSalesOrderDetID INT,  \n" +
                "	pAssyId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_CurrentKit VARCHAR(1000);  \n" +
                "	DECLARE v_GlobalSearchBinWHId VARCHAR(10000);  \n" +
                "  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	IF(pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "  \n" +
                "		SELECT  GROUP_CONCAT(b.WarehouseID)  \n" +
                "		INTO 	v_GlobalSearchBinWHId  \n" +
                "		FROM 	binmst b WHERE b.id IN (  \n" +
                "			SELECT 	c.binID  \n" +
                "			FROM 	component_sid_stock c  \n" +
                "			WHERE 	isdeleted  = 0  \n" +
                "			AND uid LIKE CONCAT(\"%\", pGlobalSearchUIDString ,\"%\")  \n" +
                "            group by c.binID  \n" +
                "			);  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pGlobalSearchBinString IS NOT NULL) THEN  \n" +
                "		SELECT GROUP_CONCAT(b.WarehouseID) INTO v_GlobalSearchBinWHId FROM binmst b WHERE  `Name` LIKE CONCAT(\"%\", pGlobalSearchBinString ,\"%\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  \"  \n" +
                "			SELECT 	w.id,  \n" +
                "				w.name,  \n" +
                "				w.isPermanentWH,  \n" +
                "				w.uniqueCartID,  \n" +
                "				w.parentWHID,  \n" +
                "				pw.parentWHType,  \n" +
                "				pw.name deptName,  \n" +
                "				0 binCount,  \n" +
                "				0 uidCount,  \n" +
                "				0 totalEmptyBin,  \n" +
                "				0 anotherKitStock,  \n" +
                "				0 unallocatekitStock,  \n" +
                "				0 numberTotalKit,  \n" +
                "				0 unallocatedUMID,  \n" +
                "				w.allMovableBin,  \n" +
                "				w.warehouseType,  \n" +
                "				fun_getWarehouseTypeByKey(w.warehouseType) warehouseTypeValue,  \n" +
                "				CAST(NULL AS CHAR(10000)) kitName,  \n" +
                "				CAST(NULL AS CHAR(15000)) emptyBinName,  \n" +
                "				CAST(w.updatedAt AS DATETIME) updatedAt  \n" +
                "			FROM 	warehousemst w,  warehousemst pw  \n" +
                "			WHERE 	w.isDepartment != 1  and w.parentWHID = pw.id  \n" +
                "					AND 	w.isDeleted = 0  \n" +
                "					AND 	w.isActive = 1  \n" +
                "					AND	w.id > 0  \n" +
                "			\";  \n" +
                "  \n" +
                "	IF (pRefSalesOrderDetID IS NOT NULL AND pAssyId IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id IN (  \n" +
                "									SELECT 	 b.WarehouseID  \n" +
                "									FROM 	component_sid_stock a inner join binmst b on  a.binid = b.id  \n" +
                "									WHERE 	a.isdeleted = 0  \n" +
                "										AND a.id IN (  \n" +
                "											SELECT 	refUIDId  \n" +
                "											FROM 	kit_allocation  \n" +
                "											WHERE 	`status` = 'A'  \n" +
                "													AND refSalesOrderDetID = \", pRefSalesOrderDetID ,\"  \n" +
                "													AND assyID = \", pAssyId ,\"  \n" +
                "										)  \n" +
                "                                      group by b.WarehouseID  \n" +
                "									)\");  \n" +
                "	END IF;  \n" +
                "    iF pGlobalSearchWHString IS NOT NULL  then  \n" +
                "		SET @vSQLMainQuery =CONCAT(@vSQLMainQuery, \"and  w.`Name` LIKE '%\", pGlobalSearchWHString ,\"%' \");  \n" +
                "	end if;  \n" +
                "	if pSearchWHString IS NOT NULL then  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"   AND w.Name LIKE '%\", pSearchWHString ,\"%' \");  \n" +
                "	end if;  \n" +
                "  \n" +
                "	IF(v_GlobalSearchBinWHId IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND FIND_IN_SET(w.id, '\", v_GlobalSearchBinWHId ,\"')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pGlobalSearchClusterWHID IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id = \",pGlobalSearchClusterWHID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pDeptID IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.parentWHID = \",pDeptID);  \n" +
                "	END IF;  \n" +
                "	IF(pSearchString IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND w.name like '%\", pSearchString ,\"%' \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_GlobalSearchBinWHId IS NULL AND (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL)) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id = NULL\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pParamSearchWHId IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id = \",pParamSearchWHId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "   SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" ORDER BY w.updatedAt DESC \");  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempWarehouseDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempWarehouseDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	-- select  @vSQLMainQuery;  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	/* old logic  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempBinDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS  \n" +
                "	SELECT 	b.id, b.name, 0 uidCount, b.warehouseID  \n" +
                "	FROM 	binmst b  \n" +
                "	WHERE 	b.warehouseID IN (SELECT w.id FROM tempWarehouseDet w)  \n" +
                "		AND 	b.isActive = 1  \n" +
                "		AND 	b.isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempActiveBinIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS  \n" +
                "	SELECT 	 binID, COUNT(1) uidCount  \n" +
                "	FROM 	component_sid_stock  \n" +
                "	WHERE 	binID IN  (SELECT b.id FROM tempBinDet b)  \n" +
                "		AND		isDeleted = 0  \n" +
                "		AND		isinStk = 1  \n" +
                "	GROUP BY binID;  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t,  tempActiveBinIDs c  \n" +
                "	SET    	t.uidCount = c.uidCount  \n" +
                "	WHERE   t.id = c.binID;    */  \n" +
                "    /*new logic */  \n" +
                "      DROP TEMPORARY TABLE IF EXISTS tempBinDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS  \n" +
                "    SELECT 	b.id, b.name,  b.warehouseID   , ifnull(c.uidCount,0) uidCount  \n" +
                "	FROM 	binmst b Left join (select binid , count(1) uidcount from   component_sid_stock where isdeleted = 0 and isinstk  = 1 group by binid)  c on b.id =    c.binid  \n" +
                "	WHERE 	b.warehouseID IN (SELECT w.id FROM tempWarehouseDet w)  \n" +
                "		AND 	b.isActive = 1  \n" +
                "		AND 	b.isDeleted = 0 ;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempActiveWarehouseIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveWarehouseIDs AS  \n" +
                "	SELECT 	 warehouseID, COUNT(1) binCount, SUM(uidCount) uidCount  \n" +
                "	FROM 	tempBinDet  \n" +
                "	GROUP BY warehouseID;  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t,   tempActiveWarehouseIDs c  \n" +
                "	SET   	t.binCount = c.binCount,  \n" +
                "			t.uidCount = c.uidCount  \n" +
                "	WHERE  	t.id = c.warehouseID;  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.totalEmptyBin = (SELECT COUNT(1) FROM tempBinDet tb WHERE uidCount = 0 AND tb.warehouseID = t.id);  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.emptyBinName = (SELECT GROUP_CONCAT(`name`) FROM tempBinDet tb WHERE uidCount = 0 AND tb.warehouseID = t.id);  \n" +
                "  \n" +
                "	-- SELECT TRIM(fun_getKitNameBySalesOrderSetIDAndAssyID(pRefSalesOrderDetID, pAssyId)) INTO v_CurrentKit;  \n" +
                "  \n" +
                "	/* - Old query and wrong comparision on kit  \n" +
                "    UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.anotherKitStock = (SELECT COUNT(1)  \n" +
                "				FROM 	(  \n" +
                "						SELECT 	*  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.binID , GROUP_CONCAT(DISTINCT a.allocatedToKit) allocatedToKit, COUNT(DISTINCT a.allocatedToKit) kitCount  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	id, binID, fun_getAllocatedKitsNameByID(id, 'A') allocatedToKit  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "												AND isDeleted = 0  \n" +
                "												AND isinStk = 1  \n" +
                "									) a  \n" +
                "								WHERE 	a.allocatedToKit IS NOT NULL  \n" +
                "								GROUP BY a.binID  \n" +
                "							) b  \n" +
                "						WHERE b.allocatedToKit LIKE CONCAT('%', v_CurrentKit, '%')  \n" +
                "							AND kitCount > 1  \n" +
                "					) c  \n" +
                "				);  \n" +
                "  */  \n" +
                "  /*new query */  \n" +
                "   UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.anotherKitStock = (select count(1)  \n" +
                "									from (  \n" +
                "											select binID,concat(',',GROUP_CONCAT(DISTINCT a.allocatedToKit),',') allocatedToKit ,count(DISTINCT a.allocatedToKit) kitCount  \n" +
                "											from (SELECT	cs.id, binID,  ka.allocatedToKit  \n" +
                "													FROM 	component_sid_stock cs  \n" +
                "															Left join (select refuidid, GROUP_CONCAT(refsalesorderdetid) allocatedToKit  from kit_allocation ka where ka.status = 'A'  group by refuidid) ka  \n" +
                "															on cs.id = ka.refuidid  \n" +
                "													WHERE 	 cs.binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)   and isDeleted = 0 AND isinStk = 1  \n" +
                "													) a  \n" +
                "											WHERE 	 a.allocatedToKit IS NOT NULL  \n" +
                "											group by a.binID  \n" +
                "											having   count(DISTINCT a.allocatedToKit) > 1  and  \n" +
                "													concat(',',GROUP_CONCAT(DISTINCT a.allocatedToKit),',') like CONCAT('%,', pRefSalesOrderDetID, ',%')  \n" +
                "										)  a  \n" +
                "								);  \n" +
                " /*old query and its wrong as currentkit and select query kit not match in any case  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.unallocatekitStock = (SELECT COUNT(1)  \n" +
                "					FROM 	(  \n" +
                "						SELECT 	*  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.binID, GROUP_CONCAT(DISTINCT a.allocatedToKit) allocatedToKit  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	id, binID, fun_getAllocatedKitsNameByID(id, 'A') allocatedToKit  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "												AND isDeleted = 0  \n" +
                "												AND isinStk = 1  \n" +
                "									) a  \n" +
                "								WHERE 	a.allocatedToKit IS NOT NULL  \n" +
                "								GROUP BY a.binID  \n" +
                "							) b  \n" +
                "						WHERE b.allocatedToKit NOT LIKE CONCAT('%', v_CurrentKit, '%')  \n" +
                "					) c  \n" +
                "				);   */  \n" +
                "/*new query */  \n" +
                "  UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.unallocatekitStock = (select count(1)  \n" +
                "									from (  \n" +
                "											select binID,concat(',',GROUP_CONCAT(DISTINCT a.allocatedToKit),',') allocatedToKit ,count(DISTINCT a.allocatedToKit) kitCount  \n" +
                "											from (SELECT	cs.id, binID,  ka.allocatedToKit  \n" +
                "													FROM 	component_sid_stock cs  \n" +
                "															Left join (select refuidid, GROUP_CONCAT(refsalesorderdetid) allocatedToKit  from kit_allocation ka where ka.status = 'A'  group by refuidid) ka  \n" +
                "															on cs.id = ka.refuidid  \n" +
                "													WHERE 	 cs.binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)   and isDeleted = 0 AND isinStk = 1  \n" +
                "													) a  \n" +
                "											WHERE 	 a.allocatedToKit IS NOT NULL  \n" +
                "											group by a.binID  \n" +
                "											having   count(DISTINCT a.allocatedToKit) > 1  and  \n" +
                "													concat(',',GROUP_CONCAT(DISTINCT a.allocatedToKit),',') not like CONCAT('%,', pRefSalesOrderDetID, ',%')  \n" +
                "										)  a  \n" +
                "								);  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.kitName = (  \n" +
                "			SELECT 	GROUP_CONCAT(DISTINCT CONCAT(refSalesOrderDetID, '###', assyID, '###', fun_getAllocatedKitsNameByID(refUIDId, 'A')) SEPARATOR '@@@') allocatedToKit  \n" +
                "			FROM 	kit_allocation  \n" +
                "			WHERE	`status` = 'A'  \n" +
                "					AND refUIDId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	component_sid_stock  \n" +
                "						WHERE	isdeleted = 0  \n" +
                "								AND binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "					)  \n" +
                "					AND (CASE WHEN pRefSalesOrderDetID IS NOT NULL THEN refSalesOrderDetID != pRefSalesOrderDetID ELSE 1=1 END)  \n" +
                "					AND (CASE WHEN pAssyId IS NOT NULL THEN assyID != pAssyId ELSE 1=1 END)  \n" +
                "			);  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.numberTotalKit = (  \n" +
                "			SELECT 	COUNT(1)  \n" +
                "			FROM 	(  \n" +
                "					SELECT   refSalesOrderDetID, assyID  \n" +
                "					FROM 	kit_allocation  \n" +
                "					WHERE	`status` = 'A'  \n" +
                "							AND refUIDId IN (  \n" +
                "								SELECT 	id  \n" +
                "								FROM 	component_sid_stock  \n" +
                "								WHERE	isdeleted = 0  \n" +
                "										AND binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "							)  \n" +
                "					  GROUP BY refSalesOrderDetID, assyID  \n" +
                "				) a  \n" +
                "			);  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.unallocatedUMID = (  \n" +
                "			SELECT 	COUNT(1)  \n" +
                "			FROM 	(  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock c  \n" +
                "					WHERE	isdeleted = 0  \n" +
                "							AND binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "							AND NOT EXISTS (  \n" +
                "								SELECT 	refUIDId  \n" +
                "								FROM 	kit_allocation k  \n" +
                "								WHERE	`status` = 'A'  \n" +
                "										AND c.id = k.refUIDId  \n" +
                "							)  \n" +
                "				) a  \n" +
                "			);  \n" +
                "  \n" +
                "	SELECT 	t.*,  \n" +
                "		a.partCount umidPendingParts  \n" +
                "	FROM tempWarehouseDet t  \n" +
                "	LEFT JOIN (  \n" +
                "					SELECT b.warehouseID, COUNT(v.PartId) partCount  \n" +
                "					FROM vu_umid_creation_pending v  \n" +
                "					INNER JOIN binmst b ON b.id = v.binID  \n" +
                "					WHERE BalanceQty > 0  \n" +
                "					GROUP BY b.warehouseID  \n" +
                "				) AS a ON a.warehouseID = t.id  \n" +
                "	-- GROUP BY  t.id  \n" +
                "	ORDER BY  t.updatedAt DESC;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_bin_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_bin_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pWarehouseID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchBinString VARCHAR(1000),  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchClusterWHID INT,  \n" +
                "	pKitSalesOrderDetID INT,  \n" +
                "	pKitAssyID INT,  \n" +
                "	pDeptID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_GlobalSearchUIDBinId VARCHAR(10000);  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		SELECT  GROUP_CONCAT(c.binID)  \n" +
                "		INTO 	v_GlobalSearchUIDBinId  \n" +
                "		FROM 	component_sid_stock c  \n" +
                "		WHERE 	isdeleted = 0 and  \n" +
                "				uid LIKE CONCAT(\"%\", pGlobalSearchUIDString ,\"%\")  ;  \n" +
                "  END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitBinIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempKitBinIDs (  \n" +
                "		binID INT  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitBinDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempKitBinDet (  \n" +
                "		binID INT,  \n" +
                "		uidCount INT,  \n" +
                "		PIDCount INT  \n" +
                "	);  \n" +
                "  \n" +
                "	SET @vWhere = \"\";  \n" +
                "	SET @vUIDCountWhere = \"\";  \n" +
                "	SET @vInnerJoinQuery=\"\";  \n" +
                "  \n" +
                "	IF (pGlobalSearchBinString IS NOT NULL ) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND `Name` LIKE '%\", pGlobalSearchBinString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  	IF ( pSearchBinString IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND `Name` LIKE '%\", pSearchBinString ,\"%' \");  \n" +
                "	END IF;  \n" +
                "	IF (v_GlobalSearchUIDBinId IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND FIND_IN_SET(b.id, '\", v_GlobalSearchUIDBinId ,\"')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
                "  \n" +
                "		INSERT INTO tempKitBinIDs  \n" +
                "		SELECT DISTINCT csd.binID  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		INNER JOIN component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "		INNER JOIN binmst b ON b.id = csd.binID  \n" +
                "		INNER JOIN warehousemst w ON w.id = b.warehouseID  \n" +
                "		WHERE 	k.status = 'A'  \n" +
                "				AND k.refSalesOrderDetID = pKitSalesOrderDetID  \n" +
                "				AND k.assyID = pKitAssyID  \n" +
                "				AND w.parentWHID = IFNULL(pDeptID, w.parentWHID)  \n" +
                "				AND csd.isDeleted = 0;  \n" +
                "  \n" +
                "		-- SET @vWhere = CONCAT(@vWhere, \" AND b.id IN (SELECT binID FROM tempKitBinIDs)\");  \n" +
                "		SET @vInnerJoinQuery = \"inner join kit_allocation k on csd.id = k.refUIDId and k.status = 'A'\";  \n" +
                "		SET @vUIDCountWhere = CONCAT(@vUIDCountWhere, \" AND csd.binID IN (SELECT binID FROM tempKitBinIDs)\");  \n" +
                "		SET @vUIDCountWhere = CONCAT(@vUIDCountWhere, \" and k.refSalesOrderDetID = \",pKitSalesOrderDetID,\" AND k.assyID = \",pKitAssyID);  \n" +
                "  \n" +
                "		-- Store bin's UMID and PID Count  \n" +
                "		INSERT INTO tempKitBinDet  \n" +
                "		SELECT 	bin.binID,  \n" +
                "			SUM(bin.uidCount) uidCount,  \n" +
                "			COUNT(1) PIDCount  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		csd.binID, csd.refcompid, COUNT(1) uidCount  \n" +
                "				FROM 		component_sid_stock  csd  \n" +
                "				WHERE 		csd.isDeleted = 0  \n" +
                "							AND csd.binID IN (SELECT binID FROM tempKitBinIDs)  \n" +
                "				GROUP BY 	csd.binID, csd.refcompid  \n" +
                "			) BIN  \n" +
                "		GROUP BY bin.binID  \n" +
                "		ORDER BY bin.binid;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWarehouseID IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND b.warehouseID = \", pWarehouseID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchClusterWHID IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND b.warehouseID = \", pGlobalSearchClusterWHID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchString IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND  b.name like '%\", pSearchString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"  \n" +
                "		SELECT 	b.id,  \n" +
                "			b.name,  \n" +
                "			b.isPermanentBin,  \n" +
                "			b.warehouseID,  \n" +
                "			cast(NULL as char(50)) warehouseName,  \n" +
                "			0 departmentID,  \n" +
                "			cast(NULL as char(50)) deptName,  \n" +
                "			0 uidCount,  \n" +
                "			0 PIDCount,  \n" +
                "			0 mismatchUMID,  \n" +
                "			0 mismatchPID,  \n" +
                "			CAST(NULL AS char(50)) warehouseType,  \n" +
                "			CAST(NULL AS char(15000)) kitName,  \n" +
                "			0 numberTotalKit,  \n" +
                "			0 unallocatedUMID  \n" +
                "			-- b.updatedAt  \n" +
                "		FROM 	binmst b  \n" +
                "		WHERE 	b.isDeleted = 0  \n" +
                "		AND 	b.isActive = 1  \n" +
                "	\", @vWhere ,\" ORDER BY updatedAt DESC \");  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@SQLStatement1,\" ) c \");  \n" +
                "	PREPARE queryCount FROM @SQLStatementCount;  \n" +
                "	EXECUTE queryCount;  \n" +
                "	DEALLOCATE PREPARE queryCount;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempBinDet;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS \", @SQLStatement1, \" \", rowNumWhere);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempActiveBinIDs;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS  \n" +
                "		SELECT  csd.binID,  \n" +
                "			csd.refcompid,  \n" +
                "			sum(uidCount) uidCount ,  \n" +
                "            count(1) PIDCount  \n" +
                "		FROM 	(  \n" +
                "				SELECT  csd.binID,  \n" +
                "					csd.refcompid , count(1) uidcount  \n" +
                "				FROM 	component_sid_stock  csd \",@vInnerJoinQuery,\"  \n" +
                "				WHERE 	csd.isDeleted = 0  \n" +
                "						AND csd.isinStk = 1  \n" +
                "			\", @vUIDCountWhere,\"  \n" +
                "             group by csd.binID, csd.refcompid  \n" +
                "		) as csd group by csd.binID, csd.refcompid \");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "/* Will use direct tempActiveBinIDs no need to create this temp table.  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempBinCounts;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinCounts AS  \n" +
                "	SELECT 		b.binID,  \n" +
                "			SUM(b.uidCount) uidCount,  \n" +
                "			COUNT(1) PIDCount  \n" +
                "	FROM 		tempActiveBinIDs b  \n" +
                "	GROUP BY 	b.binID  \n" +
                "	ORDER BY 	b.binid;    */  \n" +
                "  \n" +
                "  \n" +
                "	-- Update UMID Count  / PID Count  \n" +
                "	UPDATE tempBinDet t,  (select binid ,sum(c.uidcount) uidcount, sum(c.pidcount) pidcount from tempActiveBinIDs c group by binid ) c  \n" +
                "	SET t.uidCount = c.uidCount ,  \n" +
                "    t.PIDCount = c.PIDCount  \n" +
                "	WHERE t.id = c.binID;  \n" +
                "  \n" +
                "	-- Update mismatch UMID Count  \n" +
                "	UPDATE tempBinDet t, tempKitBinDet k  \n" +
                "	SET t.mismatchUMID =  (k.uidCount - t.uidCount)  ,  \n" +
                "    t.mismatchPID =  (k.PIDCount - t.PIDCount)  \n" +
                "	WHERE t.id = k.binID;  \n" +
                "  \n" +
                "	-- SET warehouse name  \n" +
                "	UPDATE 	tempBinDet t, warehousemst w  \n" +
                "	SET   	t.warehouseName = w.Name,  \n" +
                "		t.departmentID = w.parentWHID,  \n" +
                "		t.warehouseType = w.warehouseType  \n" +
                "	WHERE	t.warehouseID = w.id;  \n" +
                "  \n" +
                "	-- SET department name  \n" +
                "	UPDATE 	tempBinDet t, warehousemst w  \n" +
                "	SET   	t.deptName = w.Name  \n" +
                "	WHERE	t.departmentID = w.id;  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t  \n" +
                "	SET   	t.kitName = (  \n" +
                "					SELECT 	GROUP_CONCAT(DISTINCT CONCAT(refSalesOrderDetID, '###', assyID, '###', TRIM(fun_getKitNameBySalesOrderSetIDAndAssyID(refSalesOrderDetID, assyID))) SEPARATOR '@@@')  \n" +
                "					FROM 	(  \n" +
                "							SELECT 	refSalesOrderDetID, assyID  \n" +
                "							FROM 	kit_allocation  \n" +
                "							WHERE 	`status` = 'A'  \n" +
                "									AND refUIDId IN (  \n" +
                "										SELECT 	id  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	isdeleted =0  \n" +
                "												AND binID = t.id  \n" +
                "									)  \n" +
                "									AND (CASE WHEN pKitSalesOrderDetID IS NOT NULL THEN refSalesOrderDetID != pKitSalesOrderDetID ELSE 1 = 1 END)  \n" +
                "									AND (CASE WHEN pKitAssyID IS NOT NULL THEN assyID != pKitAssyID ELSE 1 = 1 END)  \n" +
                "							GROUP BY 	refSalesOrderDetID, AssyID  \n" +
                "						) a  \n" +
                "				);  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t  \n" +
                "	SET   	t.numberTotalKit = (  \n" +
                "					SELECT 	COUNT(1)  \n" +
                "					FROM 	(  \n" +
                "							SELECT 	refSalesOrderDetID, assyID  \n" +
                "							FROM 	kit_allocation  \n" +
                "							WHERE 	`status` = 'A'  \n" +
                "									AND refUIDId IN (  \n" +
                "										SELECT 	id  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	isdeleted = 0  \n" +
                "												AND binID = t.id  \n" +
                "									)  \n" +
                "									AND (CASE WHEN pKitSalesOrderDetID IS NOT NULL THEN refSalesOrderDetID != pKitSalesOrderDetID ELSE 1 = 1 END)  \n" +
                "									AND (CASE WHEN pKitAssyID IS NOT NULL THEN assyID != pKitAssyID ELSE 1 = 1 END)  \n" +
                "							GROUP BY 	refSalesOrderDetID, AssyID  \n" +
                "						) a  \n" +
                "				);  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t  \n" +
                "	SET   	t.unallocatedUMID = (  \n" +
                "					SELECT 	COUNT(1)  \n" +
                "					FROM 	(  \n" +
                "							SELECT 	id  \n" +
                "							FROM 	component_sid_stock c  \n" +
                "							WHERE	isdeleted = 0  \n" +
                "									AND binID = t.id  \n" +
                "									AND NOT EXISTS (  \n" +
                "										SELECT 	refUIDId  \n" +
                "										FROM 	kit_allocation k  \n" +
                "										WHERE	`status` = 'A'  \n" +
                "												AND c.id = k.refUIDId  \n" +
                "									)  \n" +
                "						) a  \n" +
                "				);  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempClusterBin;  \n" +
                "	CREATE TEMPORARY TABLE tempClusterBin  \n" +
                "	SELECT 	*,  \n" +
                "		1 binCount,  \n" +
                "		FALSE isCluster  \n" +
                "	FROM tempBinDet  \n" +
                "	WHERE isPermanentBin = 0;  \n" +
                "  \n" +
                "	INSERT INTO tempClusterBin  \n" +
                "	SELECT  0,  \n" +
                "		warehouseName,  \n" +
                "		isPermanentBin,  \n" +
                "		warehouseID,  \n" +
                "		warehouseName,  \n" +
                "		departmentID,  \n" +
                "		deptName,  \n" +
                "		SUM(uidCount),  \n" +
                "		SUM(PIDCount),  \n" +
                "		SUM(mismatchUMID),  \n" +
                "		SUM(mismatchPID),  \n" +
                "		warehouseType,  \n" +
                "		kitName,  \n" +
                "		numberTotalKit,  \n" +
                "		unallocatedUMID,  \n" +
                "		COUNT(1) binCount,  \n" +
                "		TRUE isCluster  \n" +
                "		-- updatedAt  \n" +
                "	FROM 	tempBinDet  \n" +
                "	WHERE 	isPermanentBin = 1  \n" +
                "	GROUP BY warehouseName, isPermanentBin, warehouseID, departmentID, deptName, isCluster, warehouseType, kitName, numberTotalKit, unallocatedUMID ;  \n" +
                "  \n" +
                "	-- Update UMID and PID count for bin cluster  \n" +
                "	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempBinClusterNotInKit;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempBinClusterNotInKit AS  \n" +
                "		SELECT 	csd.warehouseID,  \n" +
                "			SUM(uidCount) uidCount,  \n" +
                "			COUNT(1) PIDCount  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		csd.binID,  \n" +
                "						w.id  warehouseID,  \n" +
                "						csd.refcompid,  \n" +
                "						COUNT(1) uidCount  \n" +
                "				FROM 		component_sid_stock  csd  \n" +
                "				INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "				INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "				WHERE 		csd.isDeleted = 0  \n" +
                "							AND binid NOT IN (SELECT id FROM tempBinDet WHERE isPermanentBin = 1)  \n" +
                "							AND w.id IN (SELECT warehouseID FROM tempClusterBin WHERE isPermanentBin = 1)  \n" +
                "				GROUP BY 	csd.binID, w.id, csd.refcompid  \n" +
                "			) csd  \n" +
                "		GROUP BY csd.warehouseID;  \n" +
                "  \n" +
                "		-- Update mismatch UMID Count  \n" +
                "		UPDATE tempClusterBin t, tempBinClusterNotInKit k  \n" +
                "		SET t.mismatchUMID =  (t.mismatchUMID + k.uidCount)  \n" +
                "		WHERE t.warehouseID = k.warehouseID;  \n" +
                "  \n" +
                "		-- Update mismatch PID Count  \n" +
                "		UPDATE tempClusterBin t, tempBinClusterNotInKit k  \n" +
                "		SET t.mismatchPID =  (t.mismatchPID + k.PIDCount)  \n" +
                "		WHERE t.warehouseID = k.warehouseID;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT 		t.*,  \n" +
                "			COUNT(v.PartId) umidPendingParts  \n" +
                "	FROM 		tempClusterBin t  \n" +
                "	LEFT JOIN 	vu_umid_creation_pending v ON v.binID = t.id AND v.BalanceQty > 0  \n" +
                "	GROUP BY 	t.id, t.name, t.isPermanentBin, t.warehouseID, t.warehouseName, t.departmentID, t.deptName, t.PIDCount, t.uidCount, t.mismatchPID, t.mismatchUMID, t.warehouseType, t.kitName, t.numberTotalKit, t.unallocatedUMID, t.binCount, t.isCluster;  \n" +
                "	-- order by 	t.updatedAt desc;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pBinID INT,  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pClusterWHID INT,  \n" +
                "	pKitSalesOrderDetID INT,  \n" +
                "	pKitAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_Where VARCHAR(10000);  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "  \n" +
                "	SET v_Where = \"\";  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "    IF (pGlobalSearchUIDString IS NOT NULL ) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.uid LIKE '%\", pGlobalSearchUIDString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  	IF ( pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.uid LIKE '%\", pSearchUIDString ,\"%' \");  \n" +
                "	END IF;  \n" +
                "	/* old Logic  \n" +
                "    IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND (css.id IN (  \n" +
                "				SELECT 	id  \n" +
                "				FROM 	component_sid_stock  \n" +
                "				WHERE 	isdeleted = 0  \n" +
                "						AND (uid LIKE '%\", pGlobalSearchUIDString ,\"%' AND uid LIKE '%\", pSearchUIDString ,\"%')  \n" +
                "			)  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
                "			SELECT 	id  \n" +
                "			FROM 	component_sid_stock  \n" +
                "			WHERE 	deletedAt IS NULL  \n" +
                "					AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchUIDString IS NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
                "			SELECT 	id  \n" +
                "			FROM 	component_sid_stock  \n" +
                "			WHERE 	deletedAt IS NULL  \n" +
                "					AND uid LIKE '%\", pSearchUIDString ,\"%'  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  */  \n" +
                "	IF (pBinID IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.binID  = \", pBinID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pClusterWHID IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.binID  in (SELECT id FROM binmst WHERE WarehouseID = \", pClusterWHID, \" AND css.isdeleted = 0)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.uid like '%\", pSearchString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"  \n" +
                "				SELECT 		css.id,  \n" +
                "						css.scanlabel,  \n" +
                "						css.pkgQty,  \n" +
                "						css.uid,  \n" +
                "						c.PIDCode,  \n" +
                "						c.mfgcodeID,  \n" +
                "						c.mfgPN,  \n" +
                "						mfg.mfgCode,  \n" +
                "						mfg.mfgName,  \n" +
                "						ro.rohsIcon,  \n" +
                "						ro.name AS rohsName,  \n" +
                "						css.nickName,  \n" +
                "						css.binID,  \n" +
                "						cast(NULL as char(50)) binName,  \n" +
                "						0 warehouseID,  \n" +
                "						cast(NULL as char(50)) warehouseName,  \n" +
                "						0 parentWHID,  \n" +
                "						cast(NULL as char(50)) deptName,  \n" +
                "						css.uom,  \n" +
                "						cast('' as char(100)) uomName,  \n" +
                "						false isAllocatedToKit,  \n" +
                "						css.receiveMaterialType,  \n" +
                "						css.refcompid,  \n" +
                "						css.pkgUnit,  \n" +
                "						false isBelongsToSameKit,  \n" +
                "						fun_getMountingTypeNameByID(c.mountingTypeID) mountingTypeName,  \n" +
                "						0 refSalesOrderDetID, 	0 assyID,  \n" +
                "						fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKits,  \n" +
                "						cast(NULL as char(50)) warehouseType,  \n" +
                "						c.isCustom,  \n" +
                "						css.updatedAt  \n" +
                "				FROM 		component_sid_stock css  \n" +
                "				LEFT OUTER JOIN component c ON c.id=css.refcompid AND c.isdeleted=0  \n" +
                "				LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND ro.isdeleted=0  \n" +
                "				LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND mfg.isdeleted=0  \n" +
                "				WHERE	css.isdeleted = 0  \n" +
                "							AND css.isinStk = 1  \n" +
                "			\", v_Where , \" ORDER BY css.updatedAt DESC \"  \n" +
                "		);  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@SQLStatement1,\" ) c \");  \n" +
                "	PREPARE query1 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS Results AS \", @SQLStatement1, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @SQLStatement1;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	-- SET Bin name  \n" +
                "	UPDATE 	Results r, binmst b  \n" +
                "	SET   	r.binName = b.Name, r.warehouseID = b.WarehouseID  \n" +
                "	WHERE	r.binID = b.id;  \n" +
                "  \n" +
                "	-- SET warehouse name  \n" +
                "	UPDATE 	Results r, warehousemst w  \n" +
                "	SET   	r.warehouseName = w.Name, r.parentWHID = w.parentWHID, r.warehouseType = w.warehouseType  \n" +
                "	WHERE	r.warehouseID = w.id;  \n" +
                "  \n" +
                "	-- SET department name  \n" +
                "	UPDATE 	Results r, warehousemst w  \n" +
                "	SET   	r.deptName = w.Name  \n" +
                "	WHERE	r.parentWHID = w.id;  \n" +
                "  \n" +
                "	-- Set UOM  \n" +
                "	UPDATE 	Results r, uoms u  \n" +
                "	SET   	r.uomName = u.unitName  \n" +
                "	WHERE	r.uom = u.id;  \n" +
                "  \n" +
                "	-- Set UMID is allocated to kit  \n" +
                "	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
                "		UPDATE 	Results r, kit_allocation k  \n" +
                "		SET   	r.isAllocatedToKit = TRUE,  \n" +
                "			r.refSalesOrderDetID = k.refSalesOrderDetID,  \n" +
                "			r.assyID = k.assyID,  \n" +
                "			r.isBelongsToSameKit = (CASE WHEN k.refSalesOrderDetID = pKitSalesOrderDetID AND k.assyID = pKitAssyID THEN TRUE ELSE FALSE END)  \n" +
                "		WHERE	r.id = k.refUIDId  \n" +
                "		AND 	k.status = 'A'  \n" +
                "		AND 	k.refSalesOrderDetID = pKitSalesOrderDetID  \n" +
                "		AND 	k.assyID = pKitAssyID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results \"); -- order by isBelongsToSameKit desc  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);  \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);  \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vUTCDateTime datetime;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() into vUTCDateTime;  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "     SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "							select  a.*  \n" +
                "							from  \n" +
                "							(SELECT 	        c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                            c.actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "							c.kitReturnStatus,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber ,  \n" +
                "                            min(kitreleasedate)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minKitReleaseDate,  \n" +
                "                             min(id)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minkitid  \n" +
                "					FROM     vu_release_plan_detail AS c where c.kitstatus = case when '\",v_ParentWHType,\"' ='M' then 'P' else 'R' end  \n" +
                "                      ) a where a.kitreleasedate = a.minKitReleaseDate  and a.id =a.minkitid \");  \n" +
                "  \n" +
                "  IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
                "				csd.binId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	binmst  \n" +
                "						WHERE 	isdeleted = 0  \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
                "					)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
                "				ka.refUIDId IN (  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock  \n" +
                "					WHERE 	isdeleted = 0  \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "				)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"  \n" +
                "			EXISTS (  \n" +
                "				SELECT 		1  \n" +
                "				FROM 		kit_allocation ka  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "							AND ka.status = 'A'  \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")  \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
                "	END IF;  \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET v_WhereKitFilterCondition = CONCAT(\" 1 = 1 \");  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus != 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRP = 0 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND kitReleaseStatus = 'Fully Released' AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "		IF (pIsCheckMRP = 1 AND pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND salesOrderDetailCompleteStatus != 'Completed' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" AND shortageLines > 0 \");  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (pIsCheckPRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Fully Released' \"), \" kitReleaseStatus = 'Fully Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Partially Released' \"), \" kitReleaseStatus = 'Partially Released' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = IF(v_WhereKitFilterCondition IS NOT NULL, CONCAT(v_WhereKitFilterCondition, \" OR kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \"), \" kitReleaseStatus = 'Not Released' OR kitReleaseStatus = 'Ready To Release' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPRE = 0 AND pIsCheckPPR = 0 AND pIsCheckPNR = 0) THEN  \n" +
                "			SET v_WhereKitFilterCondition = \" 1 = 1 \";  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"  \n" +
                "		SELECT k.* FROM  \n" +
                "			(SELECT	a.*,  \n" +
                "					(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore,  \n" +
                "					FUNC_MISMATCHITEMFORKIT(a.refSalesOrderDetID, IFNULL(a.subAssyID,a.refAssyId), 'M', NULL, NULL) AS mismatchItem,  \n" +
                "					fun_getKitReleaseStatus(a.kitPlanPercentage,totalKitReleaseQty,totalPOReleaseQty,a.assyKitQty,a.assyPOQty,a.totalKitReleasePlan,a.pendingCount) kitReleaseStatus  \n" +
                "				FROM	(  \n" +
                "					SELECT 	sd.id refSalesOrderDetID,  \n" +
                "							sd.kitNumber,  \n" +
                "							IFNULL(kad.partId, sd.partID) assyID,  \n" +
                "							(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
                "							(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
                "							sd.partID assyMainId,  \n" +
                "							c.mfgPN assyMainName,  \n" +
                "							c.PIDCode assyMainPIDCode,  \n" +
                "							kad.partId assySubId,  \n" +
                "							cs.mfgPN assySubName,  \n" +
                "							cs.PIDCode assySubPIDCode,  \n" +
                "							CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
                "							sd.kitNumber kitName,  \n" +
                "							s.id soId,  \n" +
                "							s.poNumber,  \n" +
                "							s.salesOrderNumber,  \n" +
                "							s.poDate,  \n" +
                "							sd.qty,  \n" +
                "							sd.kitQty,  \n" +
                "							kad.totalAssyBuildQty,  \n" +
                "							\", pDeptID ,\" AS deptID,  \n" +
                "							'\", v_ParentWHType ,\"' AS deptType,  \n" +
                "							fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
                "							IFNULL(b.uidCount, 0) uidCount,  \n" +
                "							IFNULL(b.binCount, 0) binCount,  \n" +
                "							ka.totalLines,  \n" +
                "							ka.shortageLines,  \n" +
                "							sd.isHotJob,  \n" +
                "							IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
                "                            r.name as  rohs,  \n" +
                "                         r.rohsIcon as rohsIcon,  \n" +
                "							/*fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
                "							fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
                "							fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  */  \n" +
                "                             ka.minBuild kitBuildFeasibility,  \n" +
                "							fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
                "							sp.totalKitPlan,  \n" +
                "							sp.pendingCount,  \n" +
                "							sp.totalKitReleasePlan,  \n" +
                "                            IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.qty,0) AS assyPOQty,  \n" +
                "							IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.kitQty,0) AS assyKitQty,  \n" +
                "							sp.totalKitReleaseQty,  \n" +
                "							sp.totalPOReleaseQty,  \n" +
                "							(  \n" +
                "								SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
                "								FROM 	holdunholdtrans h  \n" +
                "								WHERE 	h.refTransId = sd.id  \n" +
                "										AND h.refType = 'PO'  \n" +
                "										AND h.`status` = 'H'  \n" +
                "								ORDER BY h.id DESC  \n" +
                "								LIMIT 1  \n" +
                "							) poHalt,  \n" +
                "							(  \n" +
                "								SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	a.haltTooltip  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "												FROM 	holdunholdtrans h  \n" +
                "												WHERE 	h.refTransId = sd.id  \n" +
                "														AND h.refType = 'KR'  \n" +
                "														AND h.`status` = 'H'  \n" +
                "												ORDER BY h.id DESC  \n" +
                "												LIMIT 1  \n" +
                "										) a  \n" +
                "										UNION  \n" +
                "										SELECT 	b.haltTooltip  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "												FROM 	holdunholdtrans h  \n" +
                "												WHERE 	h.refTransId = sd.id  \n" +
                "														AND h.refType = 'KA'  \n" +
                "														AND h.`status` = 'H'  \n" +
                "												ORDER BY h.id DESC  \n" +
                "												LIMIT 1  \n" +
                "										) b  \n" +
                "								) c  \n" +
                "							) kitHalt,  \n" +
                "							p.woID,  \n" +
                "							p.workorderNumber,  \n" +
                "							p.id AS id,  \n" +
                "							p.salesOrderDetID,  \n" +
                "							p.refAssyId,  \n" +
                "							p.subAssyID,  \n" +
                "							p.plannKitNumber,  \n" +
                "							p.poQty,  \n" +
                "							p.poDueDate,  \n" +
                "							p.mfrLeadTime,  \n" +
                "							p.materialDockDate,  \n" +
                "							p.kitReleaseQty,  \n" +
                "							p.kitReleaseDate,  \n" +
                "							(DATEDIFF(fun_ConvertUTCDatetimeToSpecificTimeZone('\",vUTCDateTime,\"','\",v_TimeZone,\"'), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
                "							p.feasibilityWithAllocatedQty,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
                "							p.releasedBy,  \n" +
                "							p.releaseTimeFeasibility,  \n" +
                "							p.kitStatus,  \n" +
                "							p.rushJob,  \n" +
                "							p.woStatusID,  \n" +
                "							p.refPlanId,  \n" +
                "							p.releasedNote,  \n" +
                "							p.releaseKitNumber,  \n" +
                "							p.kitReturnStatus,  \n" +
                "							ka.kitPlanPercentage,  \n" +
                "							fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,'\",vUTCDateTime,\"'), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0), FALSE) kitReleaseIndicator,  \n" +
                "							ka.allocationUMIDCount allocationUMIDCount  \n" +
                "					FROM 		salesorderdet sd  \n" +
                "					INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "					INNER JOIN	component c ON sd.partID = c.id  \n" +
                "					Inner Join rfq_rohsmst r on r.id = c.RoHSStatusID  \n" +
                "					LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
                "					LEFT JOIN  	component cs ON kad.partId = cs.id  \n" +
                "					LEFT JOIN (  \n" +
                "							SELECT  salesOrderDetID, refAssyId, subAssyID,  \n" +
                "									COUNT(1) totalKitPlan,  \n" +
                "									SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) totalKitReleasePlan,  \n" +
                "									SUM(CASE WHEN kitStatus = 'P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "									SUM(kitReleaseQty) totalKitReleaseQty,  \n" +
                "									SUM(poQty) totalPOReleaseQty  \n" +
                "									FROM salesorder_plan_detailsmst WHERE isDeleted = 0  \n" +
                "									GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "						) AS sp ON sp.salesOrderDetID =  sd.id  AND sp.refAssyId = sd.partID  AND (CASE WHEN kad.partId = sd.partID THEN sp.subAssyID IS NULL ELSE sp.subAssyID = kad.partId END)  \n" +
                "					LEFT JOIN	(  \n" +
                "								SELECT 	a.refSalesOrderDetID,  \n" +
                "									a.assyID,  \n" +
                "									# a.binID,  \n" +
                "									COUNT(1) binCount,  \n" +
                "									SUM(a.uidCount) uidCount,  \n" +
                "									SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
                "								FROM 	(  \n" +
                "										SELECT 		k.refSalesOrderDetID,  \n" +
                "												k.assyID,  \n" +
                "												csd.binID,  \n" +
                "												COUNT(1) uidCount,  \n" +
                "												(  \n" +
                "													SELECT IF( EXISTS(  \n" +
                "														SELECT 	binId  \n" +
                "														FROM 	component_sid_stock  \n" +
                "														WHERE 	binID = csd.binID  \n" +
                "															AND isdeleted = 0  \n" +
                "															and isinstk  =1  \n" +
                "															AND id NOT IN (  \n" +
                "																SELECT 	refUIDId  \n" +
                "																FROM 	kit_allocation  \n" +
                "																WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
                "																		AND assyID = k.assyID  \n" +
                "																		AND `status` = 'A'  \n" +
                "															)  \n" +
                "													), 1, 0)  \n" +
                "												) mismatchUMIDBin  \n" +
                "											FROM 		kit_allocation k  \n" +
                "											INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "											INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "											INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "											WHERE		k.status = 'A'  \n" +
                "														AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
                "														AND	csd.isDeleted = 0  \n" +
                "														AND	b.isDeleted = 0  \n" +
                "														AND	w.isDeleted = 0  \n" +
                "											GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
                "									) AS a  \n" +
                "								GROUP BY   a.refSalesOrderDetID, a.assyID  \n" +
                "							) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	k.refSalesOrderDetID,  \n" +
                "									k.assyID,  \n" +
                "									k.totalLines,  \n" +
                "									k.shortageLines,  \n" +
                "									k.kitAllocationPercentage kitPlanPercentage,  \n" +
                "									(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  ,  \n" +
                "                                    k.minBuild  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	k.refSalesOrderDetID,  \n" +
                "											k.assyID,  \n" +
                "											COUNT(1) AS totalLines,  \n" +
                "											SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
                "											ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS kitAllocationPercentage  ,  \n" +
                "                                             min(minBuild) minBuild  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	vk.refSalesOrderDetID,  \n" +
                "														vk.assyID,  vk.qpaWithDnp,  \n" +
                "														vk.isNotRequiredKitAllocation AS isNotRequiredKitAllocation,  \n" +
                "														IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "														(CASE WHEN vk.connecterTypeID = -2 THEN vk.shortagePins ELSE vk.shortage END) AS shortage ,  \n" +
                "                                                        (  \n" +
                "															CASE  \n" +
                "																WHEN connecterTypeID = -2 THEN  \n" +
                "																	(IFNULL(allocatedpin, 0) / (IFNULL(qpaWithDnp, 0) * bomNumOfPosition))  \n" +
                "																ELSE  \n" +
                "																	(IFNULL(allocatedunit, 0) / IFNULL(qpaWithDnp, 0))  \n" +
                "  \n" +
                "															END  \n" +
                "														) AS minBuild  \n" +
                "												FROM 	vu_kit_allocation_detail vk  \n" +
                "                                                Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  AND sd.isDeleted = 0  \n" +
                "												WHERE    vk.`isNotRequiredKitAllocation` != 1 and vk.qpaWithDnp != 0  \n" +
                "											) k  GROUP BY k.refSalesOrderDetID, k.assyID  \n" +
                "									) k  \n" +
                "							) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
                "					LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
                "									AND p.refAssyId = sd.partID  \n" +
                "									AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
                "					WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
                "								AND 	s.isDeleted = 0  \n" +
                "								AND 	sd.isCancle != 1  \n" +
                "								AND 	(\", v_WhereClauseFilter ,\")  \n" +
                "								AND 	(\", v_WhereClause ,\")  \n" +
                "				) AS a  \n" +
                "		) AS k WHERE 	(\", v_WhereKitFilterCondition ,\")  \n" +
                "	\");  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 kitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 actualKitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5781,'2.00','V1','Bug 40216: UMID and Xfer bulk Material related issues - Group by issue resolved by - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5781:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-01-2022 *********************************** */
                "ALTER TABLE `customer_addresses`  \n" +
                "ADD CONSTRAINT FK_customer_address_shippingMethodID  \n" +
                "FOREIGN KEY (shippingMethodID) REFERENCES `genericcategory`(`gencCategoryID`);  \n" +
                "  \n" +
                "ALTER TABLE `customer_addresses`  \n" +
                "ADD CONSTRAINT FK_customer_address_carrierID  \n" +
                "FOREIGN KEY (carrierID) REFERENCES `genericcategory`(`gencCategoryID`);  \n" +
                /* **************************** Add Script Version -> 07-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5782,'2.00','V1','Added pending script for FOREIGN KEY for carrierID and shippingmethodID in contact person - VS'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5782:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipInvoicePaymentToInformation` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipInvoicePaymentToInformation`(  \n" +
                "	IN pPaymentId INT,  \n" +
                "	IN pMfgCodeId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE v_mfgNameFormat INT;  \n" +
                "  \n" +
                "SELECT FUN_GETMFGCODENAMEFORMAT() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	IF pPaymentId IS NOT NULL THEN  \n" +
                "  \n" +
                "        SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "		SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SELECT  \n" +
                "    pi.systemId,  \n" +
                "    pi.id paymentId,  \n" +
                "    pi.accountReference,  \n" +
                "    pi.mfgcodeID,  \n" +
                "    m.mfgCode,  \n" +
                "    m.mfgName,  \n" +
                "    FUN_GETFORMATTEDMFGCODE(m.mfgCode, m.mfgName, v_mfgNameFormat) fullMfgName,  \n" +
                "    pi.paymentType,  \n" +
                "    p.gencCategoryName paymentTypeName,  \n" +
                "    pi.paymentNumber,  \n" +
                "    pi.bankAccountMasID,  \n" +
                "    pi.bankName,  \n" +
                "    pi.bankAccountNo,  \n" +
                "    pi.paymentDate,  \n" +
                "    pi.paymentAmount,  \n" +
                "    pi.payToName,  \n" +
                "    pi.payToAddress,  \n" +
                "    pi.remark,  \n" +
                "    pi.isPaymentVoided,  \n" +
                "    pi.voidPaymentReason,  \n" +
                "    pi.billToName,  \n" +
                "    pi.billToAddress,  \n" +
                "    pi.lockStatus,  \n" +
                "    FUN_GETUSERNAMEBYID(pi.lockedBy) lockByName,  \n" +
                "    FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(pi.lockedAt,  \n" +
                "            v_TimeZone,  \n" +
                "            v_DateTimeDisplayFormat) lockedAt,  \n" +
                "    PI.refPaymentMode  \n" +
                "FROM  \n" +
                "    packingslip_invoice_payment PI  \n" +
                "        INNER JOIN  \n" +
                "    mfgcodemst m ON m.id = pi.mfgcodeID  \n" +
                "        INNER JOIN  \n" +
                "    genericcategory p ON p.gencCategoryID = pi.paymentType  \n" +
                "WHERE  \n" +
                "    pi.isDeleted = 0  \n" +
                "        AND PI.refPaymentMode = 'P'  \n" +
                "        AND pi.id = pPaymentId;  \n" +
                "	ELSE  \n" +
                "		SELECT 		m.accountRef accountReference,  \n" +
                "				m.id mfgcodeID,  \n" +
                "				m.mfgCode,  \n" +
                "				m.mfgName,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) fullMfgName,  \n" +
                "				m.paymentMethodID paymentType,  \n" +
                "				p.gencCategoryName paymentTypeName,  \n" +
                "				NULL paymentNumber,  \n" +
                "				b.id bankAccountMasID,  \n" +
                "				b.bankName,  \n" +
                "				b.accountCode bankAccountNo,  \n" +
                "				NULL paymentDate,  \n" +
                "				NULL paymentAmount,  \n" +
                "				ca.bankRemitToName payToName,  \n" +
                "				fun_getAddressbyIDForCheckPrint(ca.id, ca.defaultContactPersonID) payToAddress,  \n" +
                "				NULL remark,  \n" +
                "				0 isPaymentVoided,  \n" +
                "				NULL voidPaymentReason,  \n" +
                "				cb.companyName billToName,  \n" +
                "				fun_getAddressbyIDForCheckPrint(cb.id, cb.defaultContactPersonID) billToAddress,  \n" +
                "				NULL lockStatus,  \n" +
                "				NULL lockByName,  \n" +
                "				NULL lockedAt  \n" +
                "		FROM 		mfgcodemst m  \n" +
                "		LEFT JOIN 	genericcategory p ON p.gencCategoryID = m.paymentMethodID  \n" +
                "        LEFT JOIN 	bank_mst b ON b.id = p.bankid AND b.isDeleted = 0 AND b.isActive = 1  \n" +
                "		LEFT JOIN 	customer_addresses ca ON ca.customerId = m.id AND ca.isDeleted = 0 AND ca.addressType = 'P' AND ca.isDefault = 1  \n" +
                "		LEFT JOIN 	customer_addresses cb ON cb.customerId = m.id AND cb.isDeleted = 0 AND cb.addressType = 'B' AND cb.isDefault = 1  \n" +
                "		WHERE 		m.isDeleted = 0  \n" +
                "					AND m.id = pMfgCodeId;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5783,'2.00','V1',' Sproc_GetPackingSlipInvoicePaymentToInformation - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5783:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 07-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsSubAssembly TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE,  \n" +
                "    IN pSubAssemblyTab TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            (CASE WHEN kaad.bomAssyLevel = 0 THEN kaad.bomInternalVersionString ELSE 'N/A' END) AS kitAllocationInternalVersion,  \n" +
                "            kaad.bomAssyLevel  \n" +
                "		\");  \n" +
                "  \n" +
                "	SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND kaad.isDeleted = 0\") ;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetKitList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				(CASE WHEN assyID = partID THEN 0 ELSE 1 END) AS isSubAssembly,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned,  \n" +
                "				fun_getKitReleaseStatus(subKitStatusPercentage,totalKitQty,totalPOQty,assyKitQty,assyPOQty,releasedPlanCount,pendingCount) AS  kitReleaseStatus,  \n" +
                "				fun_getKitReturnStatus(pendingReleaseCount,releasedNotReturnedCount,returnedCount,readyToReturnCount,shortageReturnCount) AS kitReturnStatus  \n" +
                "		FROM  \n" +
                "			(SELECT  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "                `vuss`.`Status` AS completedStatus,  \n" +
                "                (  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "                				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "                p.releasedPlanCount,  \n" +
                "                p.pendingCount,  \n" +
                "                vrr.pendingReleaseCount,  \n" +
                "                vrr.releasedNotReturnedCount,  \n" +
                "                vrr.returnedCount,  \n" +
                "                vrr.readyToReturnCount,  \n" +
                "                vrr.shortageReturnCount,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				`vuss`.`PartID` AS assyID,  \n" +
                "                ro.rohsIcon,  \n" +
                "                ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "                `vuss`.`custAssyPN` AS custAssyPN,  \n" +
                "                `vuss`.`liveVersion` AS liveVersion,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "                `vuss`.`kitQty` AS kitQty,  \n" +
                "				(CASE  WHEN (`vuss`.`isHotJob` = 0) THEN  'No'  \n" +
                "					   WHEN (`vuss`.`isHotJob` = 1) THEN  'Yes'  \n" +
                "					   ELSE  ''  END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "                (  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				`vuss`.`price` AS price,`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				fun_GetFormattedMfgCode(vuss.mfgCode, vuss.mfgName,\", vMfgCodeFormat ,\") AS companyName,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				`vuss`.`Balanced Due Qty` AS openQty,  \n" +
                "				`vuss`.frequency AS frequencyName,  \n" +
                "				vuss.frequencyType AS frequencyTypeName,  \n" +
                "				case when vuss.refSODetID is not null then sa.salesAssy else '' end  AS salesAssy,  \n" +
                "				sr.salesRelease AS salesRelease,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				vuss.assignQty AS assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO = 1 AND vuss.blanketPOOption = 2 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) AS  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) AS totalextPriceDisplayValue,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				vuss.poRevisionDate  AS poRevisionDate,  \n" +
                "				vuss.releaseLevelComment AS releaseLevelComment,  \n" +
                "				vuss.blanketPOOption,  \n" +
                "				vuss.blanketPOOptionText,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) AS pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "                ifnull(p.ishotjob,0) AS isBuildWiseHotJob ,  \n" +
                "                p.nextShipDate AS nextShipDate,  \n" +
                "                wo.WONumber AS workorders,  \n" +
                "                wo.WOIds AS workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				hutkit.refType AS refTypeKA,  \n" +
                "				hutkit.status AS haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' ON ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutkit.startDate))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "				kaad.perAssyBuildQty,  \n" +
                "				kaad.partId AS partID,  \n" +
                "                cassy.PIDCode AS assyPIDCode,  \n" +
                "				cassy.mfgPN AS assyMfgPN,  \n" +
                "                roassy.rohsIcon AS assyRohsIcon,  \n" +
                "                roassy.name assyRohsName,  \n" +
                "				cassy.isCustom AS assyIsCustomPart,  \n" +
                "                cassy.custAssyPN AS assyCustAssyPN,  \n" +
                "                cassy.nickName AS assyNickName,  \n" +
                "				cassy.mfgPNDescription AS assyPartDescription,  \n" +
                "				IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`PO Qty`,0) AS assyPOQty,  \n" +
                "				IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`mrpQty`,0) AS assyMRPQty,  \n" +
                "				IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`kitQty`,0) AS assyKitQty,  \n" +
                "				(CASE WHEN kaad.bomAssyLevel = 0 THEN COUNT(1) OVER (PARTITION BY kaad.refSalesOrderDetID) - 1 ELSE 0 END) AS subAssyCount\",v_DynamicColumns, \"  \n" +
                "		FROM   vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "			INNER JOIN  component cassy ON kaad.partId = cassy.id AND cassy.isDeleted = 0 AND cassy.parttype IN (3,2)  \n" +
                "			LEFT JOIN  rfq_rohsmst roassy ON cassy.RoHSStatusID = roassy.id AND roassy.isDeleted = 0  \n" +
                "			LEFT JOIN (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s INNER JOIN component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 AND c.parttype IN (3,2)) AS sa ON sa.id = vuss.refSODetID  \n" +
                "			LEFT JOIN (SELECT shippingid,Sdetid, qty, CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),'%m/%d/%y')) salesRelease  \n" +
                "					FROM salesshippingmst  b WHERE isdeleted = 0 ) AS sr ON sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "			LEFT JOIN (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details WHERE isdeleted = 0  \n" +
                "					GROUP BY refSalesOrderDetID ) AS so ON so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "			LEFT JOIN (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds, GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE  wsd.isdeleted = 0  \n" +
                "					GROUP BY wsd.salesOrderDetailID  \n" +
                "				) AS wo ON wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "			LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  IFNULL(subAssyID, refAssyId) AS partID,  \n" +
                "							MAX(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  AND  kitStatus!='R' then 1 else 0 end )  AS ishotjob,  \n" +
                "							MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "							MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "							COUNT(1) totalPlan,  \n" +
                "							SUM(poQty) totalPOQty,  \n" +
                "							SUM(kitReleaseQty) totalKitQty,  \n" +
                "							SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "							SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  WHERE 	isDeleted = 0  \n" +
                "					GROUP BY salesOrderDetID, partID  \n" +
                "				) AS p ON p.salesOrderDetID = `vuss`.`salesOrderDetailId` AND p.partID = kaad.partId  \n" +
                "					#AND (CASE WHEN p.subAssyID IS NOT NULL THEN p.subAssyID = kaad.partId END)  \n" +
                "			LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,   IFNULL(subAssyID, refAssyId) AS partID,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToReturnCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, partID  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId AND vrr.partID = kaad.partId  \n" +
                "			#AND (CASE WHEN vrr.subAssyID IS NOT NULL THEN vrr.subAssyID = kaad.partId END)  \n" +
                "		LEFT JOIN 	(  \n" +
                "			SELECT 	refSalesOrderDetID, assyID, mainAssy,  \n" +
                "					(k.totalLine - k.totalNotRequireLine) AS totalLine,  \n" +
                "					k.shortageLine,  \n" +
                "					Round(k.allocPerComponent,2) allocPerComponent,  \n" +
                "					Round(k.allocPerWithSubAssy,2) allocPerWithSubAssy,  \n" +
                "					Round((k.shortageLine/k.totalLine)*100) AS shortagePer  \n" +
                "			FROM  \n" +
                "				(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
                "						COUNT(1) AS `totalLine`,  \n" +
                "						SUM( k.shortageline) shortageline,  \n" +
                "						SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "						(CASE WHEN assyID = mainAssy THEN  \n" +
                "							MIN(mainAssyPerForSubAssy)  /* Main Assembly Case */  \n" +
                "						ELSE /* Sub Assembly Case */  \n" +
                "							0 END) AS allocPerWithSubAssy,  \n" +
                "						(CASE WHEN assyID = mainAssy THEN  \n" +
                "							MIN(mainAssyPerForComponent)  /* Main Assembly Case */  \n" +
                "						ELSE /* Sub Assembly Case */  \n" +
                "							ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) END) AS allocPerComponent  \n" +
                "				FROM  \n" +
                "					(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
                "							k.qpaWithDnp, k.allocationPer, k.isNotRequiredKitAllocation,  k.allocatedPercePerLine, k.MainAssyLine, k.shortageline,  \n" +
                "							SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForSubAssy,  \n" +
                "							SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN k.MainAssyLine ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForComponent  \n" +
                "				 FROM  \n" +
                "						(SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "								vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "								IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "								(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "								(case when vk.assyid = sd.partid then vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "								(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "								(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "								vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "							FROM  	`vu_kit_allocation_detail` vk  \n" +
                "							INNER JOIN    salesorderdet sd ON vk.refSalesorderdetid  = sd.id  \n" +
                "							WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "						) AS k  \n" +
                "					) AS k GROUP bY assyID, refSalesorderdetid, mainAssy  \n" +
                "				) AS k  \n" +
                "            ) AS ka ON ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` AND ka.mainAssy =  `vuss`.`PartID` AND ka.assyID = kaad.partId  \n" +
                "			LEFT JOIN  rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN  holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId AND hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId AND htk.refType='KA' AND htk.isDeleted=0)  \n" +
                "            LEFT JOIN (SELECT ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) AS initialStockCount  \n" +
                "							FROM assemblystock ass WHERE ass.isDeleted =0 AND ass.type = 'OS'  \n" +
                "                            GROUP BY ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID)  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` AND astk.refSalesOrderID = vuss.`Sales Order ID` AND astk.partID = kaad.partId  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY (nextReleaseDate IS NULL),  nextReleaseDate ASC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  #need to check once  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "       ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pIsSubAssembly = 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND isSubAssembly = 0 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSubAssemblyTab = 1) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND subAssyCount > 0 \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetKitList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount, sum(subAssyCount > 0) SubAssemblyCount  FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5784,'2.00','V1','Bug 40216: UMID and Xfer bulk Material related issues - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5784:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingCustomerSalesDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingCustomerSalesDetails`(  \n" +
                "	IN psalesorderID INT ,  \n" +
                "	IN packingSlipID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE vMfgCodeFormat INT;  \n" +
                "select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                " SELECT  \n" +
                "        sd.id,  \n" +
                "        IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "        sd.tentativeBuild,  \n" +
                "        sd.qty AS poQty,  \n" +
                "        sd.partID,  \n" +
                "        sd.price,  \n" +
                "        sd.lineID,  \n" +
                "		CONCAT(c.pidcode,' | ',IFNULL(sd.custPOLineNumber,1)) soDets,  \n" +
                "		(SELECT CASE WHEN SUM(cpd.shipQty)>=sd.qty THEN TRUE ELSE FALSE END  \n" +
                "			FROM customer_packingslip_det cpd  \n" +
                "			WHERE cpd.refsalesorderDetid=sd.id AND cpd.isDeleted = 0  \n" +
                "			AND cpd.refCustPackingSlipID IN (SELECT id FROM customer_packingslip  \n" +
                "						WHERE isDeleted = 0  \n" +
                "						AND transType = 'P')) isShipped  ,  \n" +
                "		sd.partCategory,  \n" +
                "		c.partType    ,  \n" +
                "		c.rfqOnly,  \n" +
                "		c.PIDCode  ,  \n" +
                "		c.partStatus ,  \n" +
                "		sd.internalComment,  \n" +
                "        sd.partDescription,  \n" +
                "        sd.remark,  \n" +
                "        c.iscustom,  \n" +
                "		c.mfgpn,  \n" +
                "		c.mfgpndescription,  \n" +
                "		fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "		c.nickName,  \n" +
                "		c.mfgcodeID,  \n" +
                "		sd.originalPOQty,  \n" +
                "        fun_GetFormattedMfgCode(mfg.mfgcode,mfg.mfgName,vMfgCodeFormat) mfgName,  \n" +
                "        -- fun_getMfgCodeAndNameByID(c.mfgcodeID)mfgName,  \n" +
                "		fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "		fun_getRoHSNameByPartID(sd.partID) rohsName	,  \n" +
                "        c.category partCategory  \n" +
                "	FROM salesorderdet sd  \n" +
                "	LEFT JOIN COMPONENT c ON c.id=sd.partid  \n" +
                "    LEFT JOIN mfgcodemst mfg ON mfg.id = c.mfgCodeId and mfg.isDeleted = 0  \n" +
                "	WHERE sd.refsalesOrderID=psalesorderID  \n" +
                "	AND sd.isdeleted=0 AND sd.isCancle=0  \n" +
                "	AND sd.partCategory IN (2,3)  \n" +
                "    AND c.partType != 4;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5785,'2.00','V1','Sproc_GetPendingCustomerSalesDetails - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5785:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDetailPerLine;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDetailPerLine`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       ss.releaseNumber,  \n" +
                "		       ss.qty as releaseLineQty,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname,\", vMfgCodeFormat,\") customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cpd.internalComment,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "            cpd.poReleaseNumber,  \n" +
                "			cpd.refBlanketPONumber,  \n" +
                "            cpd.partId,  \n" +
                "            fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "            `cpd`.assyDescription,  \n" +
                "            fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "            c.mfgPN as assyName ,  \n" +
                "            c.PIDCode as assyId,  \n" +
                "            c.mfgCodeID,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "            fun_GetFormattedMfgCode(co_mfgmst.mfgcode,co_mfgmst.mfgname,\", vMfgCodeFormat,\")  mfrName,  \n" +
                "			mfgmst.mfgcode custCode,  \n" +
                "			case when som.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
                "			som.isBlanketPO,  \n" +
                "			ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "			case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "			case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "			cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
                "			cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,  \n" +
                "			case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "			fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "			concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "		(CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  createdAt,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt ,  \n" +
                "		if(cd.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
                "        if(cd.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
                "        if(cd.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "		if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "        if(cd.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "        if(cd.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "        if(cd.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "		if(cd.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "		(case when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText,  \n" +
                "        (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "        cd.revision,  \n" +
                "		(select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "			where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "			from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "		c.isCustom,   c.custAssyPN customPartNumber  ,        cpd.remainingQty ,  \n" +
                "			som.rmaNumber,som.isRmaPO,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'YES' when som.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'Yes' when som.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp  ,  \n" +
                "            cpd.releaseNotes  \n" +
                "		FROM customer_packingslip cd  \n" +
                "		LEFT JOIN mfgcodemst mfgmst ON mfgmst.id = cd.customerId and mfgmst.isDeleted = 0  \n" +
                "		JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0  \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid  \n" +
                "        LEFT JOIN mfgcodemst co_mfgmst ON co_mfgmst.id = c.mfgcodeID and co_mfgmst.isDeleted = 0  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0 and invoice.transType ='I'  \n" +
                "        LEFT JOIN salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "        LEFT JOIN salesordermst som on som.id = cd.refSalesOrderID and som.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "    if (pfilterStatus = '0') then  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    else  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    end if;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgPartID IS NOT NULL)THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cpd.partId in ( ',pmfgPartID,')');  \n" +
                "  END IF;  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or som.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'' or som.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "	 SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                " -- select   @temp_Sproc_RetrieveCustomerPackingSlipDetails ,pWhereClause ;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5786,'2.00','V1','Sproc_RetrieveCustomerPackingSlipDetailPerLine - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5786:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-01-2022 *********************************** */
                "Drop procedure if Exists `Sproc_RetrieveContactPersonList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveContactPersonList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefEntityType VARCHAR(255),  \n" +
                "	IN pisPrimary tinyint,  \n" +
                "	IN pisDefault tinyint,  \n" +
                "	IN prefName VARCHAR(255),  \n" +
                "	IN padditionalComment VARCHAR(2000)  \n" +
                "   )  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "        DECLARE mfgcodemstCondition varchar(255) DEFAULT '';  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE vMfgCodeFormat INT;  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "  \n" +
                "  		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = ' 1=1 ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefEntityType = 'Manufacturer') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'MFG'\");  \n" +
                "		ELSEIF (prefEntityType = 'Supplier') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisPrimary) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isPrimary = '\",pisPrimary,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisDefault) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isDefault = '\",pisDefault,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefName IS NOT NULL AND prefName != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND refName LIKE '%\",prefName,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(padditionalComment IS NOT NULL AND padditionalComment != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND additionalComment LIKE '%\",padditionalComment,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # Common Details for Retrive Contact Person.  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_Common = CONCAT(\"  \n" +
                "			fun_GetFormattedContactPersonName(a.firstName, a.middleName, a.lastName) formattedName,  \n" +
                "			fun_getUserNameByID(a.updatedBy) updatedbyValue, fun_getUserNameByID(a.createdBy) createdbyValue,  \n" +
                "			fun_getRoleByID(a.createByRoleId) createdbyRoleValue, fun_getRoleByID(a.updateByRoleId) updatedbyRoleValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "			(CASE WHEN (a.systemGenerated = 0) THEN 'No' WHEN (a.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `syatemGeneratedValue`,  \n" +
                "			(CASE WHEN (a.isDefault = 0) THEN 'No' WHEN (a.isDefault = 1) THEN 'Yes' ELSE '' END) AS `isDefaultValue`,  \n" +
                "			(CASE WHEN (a.isPrimary = 0) THEN 'No' WHEN (a.isPrimary = 1) THEN 'Yes' ELSE '' END) AS `isPrimaryValue`  \n" +
                "		\");  \n" +
                "  \n" +
                "		# Filter: Personnel  \n" +
                "		SET @temp_Sproc_RetrieveMasterTemplate_employees = CONCAT(\"  \n" +
                "			select cp.personId, cp.refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.email, cp.isDefault, cp.additionalComment,  \n" +
                "					cp.phone, cp.mobile, cp.division, cp.faxNumber, cp.phExtension, cp.isPrimary, cp.systemGenerated, '' As refName, 'Personnel' AS refEntityType,  \n" +
                "					(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) emailList,  \n" +
                "                    cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "				FROM contactperson cp  \n" +
                "				WHERE cp.refTableName = 'employees' AND cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # Filter: Manufacturer AND Supplier  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_mfgcodemst = CONCAT(\"  \n" +
                "			select cp.personId, cp.refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.email, cp.isDefault, cp.additionalComment,  \n" +
                "					cp.phone, cp.mobile, cp.division, cp.faxNumber, cp.phExtension, cp.isPrimary, cp.systemGenerated, fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName, \",vMfgCodeFormat,\") AS refName,  \n" +
                "					(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "					(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) emailList,  \n" +
                "                    cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "                FROM contactperson cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID and mfg.isDeleted = 0 \",mfgcodemstCondition,\"  \n" +
                "						WHERE cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # UNION Records based of Filer : Create Final Query for Fetch Contact Person Records.  \n" +
                "        IF(prefEntityType = 'Supplier' OR prefEntityType = 'Manufacturer') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "		ELSEIF (prefEntityType = 'Personnel') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\") a \");  \n" +
                "        ELSE  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate= CONCAT(\"select *,\",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\" UNION ALL \",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY firstName ASC\" ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		 /* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveMasterTemplate,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveMasterTemplate,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 10-01-2022 *********************************** */
                "Drop procedure if Exists `Sproc_GetContactPersonForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetContactPersonForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE vEmployeeNameFormat INT;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1)  \n" +
                "		FROM `contactperson`  \n" +
                "		WHERE `isDeleted` = 0 AND `personId` = IFNULL(pId,`personId`);  \n" +
                "	ELSE  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.phone, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, cp.phExtension, cp.refTransID,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName) fullName, 'Personnel' AS refEntityType,  \n" +
                "				null AS refName,  \n" +
                "				(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) email,  \n" +
                "				(CASE WHEN (cp.isDefault = 0) THEN 'No'  \n" +
                "					WHEN (cp.isDefault = 1) THEN 'Yes' ELSE '' END) AS isDefault,  \n" +
                "				(CASE WHEN (cp.isPrimary = 0) THEN 'No'  \n" +
                "					WHEN (cp.isPrimary = 1) THEN 'Yes' ELSE '' END) AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "			WHERE `personId` = IFNULL(pId,`personId`) AND cp.refTableName ='employees'  \n" +
                "				AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END)  \n" +
                "		UNION ALL  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.phone, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, cp.phExtension, cp.refTransID,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName) fullName,  \n" +
                "				(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "                fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,vMfgCodeFormat) AS refName,  \n" +
                "				(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) email,  \n" +
                "				(CASE WHEN (cp.isDefault = 0) THEN 'No'  \n" +
                "					WHEN (cp.isDefault = 1) THEN 'Yes' ELSE '' END) AS isDefault,  \n" +
                "				(CASE WHEN (cp.isPrimary = 0) THEN 'No'  \n" +
                "					WHEN (cp.isPrimary = 1) THEN 'Yes' ELSE '' END) AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID and mfg.isDeleted = 0  \n" +
                "			WHERE `personId` = IFNULL(pId,`personId`)  \n" +
                "				AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5787,'2.00','V1',' User Story 39487: Master Page: Contact Person - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5787:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pBinID INT,  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pClusterWHID INT,  \n" +
                "	pKitSalesOrderDetID INT,  \n" +
                "	pKitAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_Where VARCHAR(10000);  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "  \n" +
                "	SET v_Where = \"\";  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "    IF (pGlobalSearchUIDString IS NOT NULL ) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.uid LIKE '%\", pGlobalSearchUIDString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  	IF ( pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.uid LIKE '%\", pSearchUIDString ,\"%' \");  \n" +
                "	END IF;  \n" +
                "	/* old Logic  \n" +
                "    IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND (css.id IN (  \n" +
                "				SELECT 	id  \n" +
                "				FROM 	component_sid_stock  \n" +
                "				WHERE 	isdeleted = 0  \n" +
                "						AND (uid LIKE '%\", pGlobalSearchUIDString ,\"%' AND uid LIKE '%\", pSearchUIDString ,\"%')  \n" +
                "			)  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
                "			SELECT 	id  \n" +
                "			FROM 	component_sid_stock  \n" +
                "			WHERE 	deletedAt IS NULL  \n" +
                "					AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchUIDString IS NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
                "			SELECT 	id  \n" +
                "			FROM 	component_sid_stock  \n" +
                "			WHERE 	deletedAt IS NULL  \n" +
                "					AND uid LIKE '%\", pSearchUIDString ,\"%'  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  */  \n" +
                "	IF (pBinID IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.binID  = \", pBinID);  \n" +
                "	END IF;  \n" +
                "   IF (pBinID IS  NULL and pClusterWHID is null  ) THEN  /*Xfer Screen if bin and warehouse both nulll then dont return any result of UMID*/  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  1 = 0\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pClusterWHID IS NOT NULL and pBinID is null) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.binID  in (SELECT id FROM binmst bm WHERE   isdeleted = 0 and  \n" +
                "															 bm.warehouseid in (Select id from warehousemst where id = \", pClusterWHID, \" and warehouseType ='SMC' )	)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.uid like '%\", pSearchString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"  \n" +
                "				SELECT 		css.id,  \n" +
                "						css.scanlabel,  \n" +
                "						css.pkgQty,  \n" +
                "						css.uid,  \n" +
                "						c.PIDCode,  \n" +
                "						c.mfgcodeID,  \n" +
                "						c.mfgPN,  \n" +
                "						mfg.mfgCode,  \n" +
                "						mfg.mfgName,  \n" +
                "						ro.rohsIcon,  \n" +
                "						ro.name AS rohsName,  \n" +
                "						css.nickName,  \n" +
                "						css.binID,  \n" +
                "						cast(NULL as char(50)) binName,  \n" +
                "						0 warehouseID,  \n" +
                "						cast(NULL as char(50)) warehouseName,  \n" +
                "						0 parentWHID,  \n" +
                "						cast(NULL as char(50)) deptName,  \n" +
                "						css.uom,  \n" +
                "						cast('' as char(100)) uomName,  \n" +
                "						false isAllocatedToKit,  \n" +
                "						css.receiveMaterialType,  \n" +
                "						css.refcompid,  \n" +
                "						css.pkgUnit,  \n" +
                "						false isBelongsToSameKit,  \n" +
                "						fun_getMountingTypeNameByID(c.mountingTypeID) mountingTypeName,  \n" +
                "						0 refSalesOrderDetID, 	0 assyID,  \n" +
                "						fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKits,  \n" +
                "						cast(NULL as char(50)) warehouseType,  \n" +
                "						c.isCustom,  \n" +
                "						css.updatedAt  \n" +
                "				FROM 		component_sid_stock css  \n" +
                "				LEFT OUTER JOIN component c ON c.id=css.refcompid AND c.isdeleted=0  \n" +
                "				LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND ro.isdeleted=0  \n" +
                "				LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND mfg.isdeleted=0  \n" +
                "				WHERE	css.isdeleted = 0  \n" +
                "							AND css.isinStk = 1  \n" +
                "			\", v_Where , \" ORDER BY css.updatedAt DESC \"  \n" +
                "		);  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@SQLStatement1,\" ) c \");  \n" +
                "	PREPARE query1 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS Results AS \", @SQLStatement1, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @SQLStatement1;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	-- SET Bin name  \n" +
                "	UPDATE 	Results r, binmst b  \n" +
                "	SET   	r.binName = b.Name, r.warehouseID = b.WarehouseID  \n" +
                "	WHERE	r.binID = b.id;  \n" +
                "  \n" +
                "	-- SET warehouse name  \n" +
                "	UPDATE 	Results r, warehousemst w  \n" +
                "	SET   	r.warehouseName = w.Name, r.parentWHID = w.parentWHID, r.warehouseType = w.warehouseType  \n" +
                "	WHERE	r.warehouseID = w.id;  \n" +
                "  \n" +
                "	-- SET department name  \n" +
                "	UPDATE 	Results r, warehousemst w  \n" +
                "	SET   	r.deptName = w.Name  \n" +
                "	WHERE	r.parentWHID = w.id;  \n" +
                "  \n" +
                "	-- Set UOM  \n" +
                "	UPDATE 	Results r, uoms u  \n" +
                "	SET   	r.uomName = u.unitName  \n" +
                "	WHERE	r.uom = u.id;  \n" +
                "  \n" +
                "	-- Set UMID is allocated to kit  \n" +
                "	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
                "		UPDATE 	Results r, kit_allocation k  \n" +
                "		SET   	r.isAllocatedToKit = TRUE,  \n" +
                "			r.refSalesOrderDetID = k.refSalesOrderDetID,  \n" +
                "			r.assyID = k.assyID,  \n" +
                "			r.isBelongsToSameKit = (CASE WHEN k.refSalesOrderDetID = pKitSalesOrderDetID AND k.assyID = pKitAssyID THEN TRUE ELSE FALSE END)  \n" +
                "		WHERE	r.id = k.refUIDId  \n" +
                "		AND 	k.status = 'A'  \n" +
                "		AND 	k.refSalesOrderDetID = pKitSalesOrderDetID  \n" +
                "		AND 	k.assyID = pKitAssyID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results \"); -- order by isBelongsToSameKit desc  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5788,'2.00','V1',' Fixed Bug 40216: Xfer bulk Material related issues (Check list) -DP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5788:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-01-2021 *********************************** */
                "ALTER TABLE salesordermst MODIFY COLUMN shippingComment VARCHAR(2000);  \n" +
                "ALTER TABLE salesordermst ADD COLUMN billingAddress VARCHAR(1000) AFTER  billingAddressID;  \n" +
                "ALTER TABLE salesordermst ADD COLUMN billingContactPerson VARCHAR(1000) AFTER  billingAddress;  \n" +
                "ALTER TABLE salesordermst ADD COLUMN billingContactPersonID INT AFTER  billingContactPerson;  \n" +
                "ALTER TABLE salesordermst ADD COLUMN shippingAddress VARCHAR(1000) AFTER  shippingAddressID;  \n" +
                "ALTER TABLE salesordermst ADD COLUMN shippingContactPerson VARCHAR(1000) AFTER  shippingAddress;  \n" +
                "ALTER TABLE salesordermst ADD COLUMN shippingContactPersonID INT AFTER  shippingContactPerson;  \n" +
                "ALTER TABLE salesordermst ADD COLUMN intermediateAddress VARCHAR(1000) AFTER  intermediateShipmentId;  \n" +
                "ALTER TABLE salesordermst ADD COLUMN intermediateContactPerson VARCHAR(1000) AFTER  intermediateAddress;  \n" +
                "ALTER TABLE salesordermst ADD COLUMN intermediateContactPersonID INT AFTER  intermediateContactPerson;  \n" +
                "ALTER TABLE salesshippingmst ADD COLUMN shippingContactPersonID INT AFTER  shippingAddressID;  \n" +
                "ALTER TABLE salesordermst  \n" +
                "ADD CONSTRAINT FK_salesordermst_billingContactPersonID  \n" +
                "FOREIGN KEY (billingContactPersonID) REFERENCES contactperson(personId);  \n" +
                "  \n" +
                "ALTER TABLE salesordermst  \n" +
                "ADD CONSTRAINT FK_salesordermst_shippingContactPersonID  \n" +
                "FOREIGN KEY (shippingContactPersonID) REFERENCES contactperson(personId);  \n" +
                "  \n" +
                "ALTER TABLE salesordermst  \n" +
                "ADD CONSTRAINT FK_salesordermst_intermediateContactPersonID  \n" +
                "FOREIGN KEY (intermediateContactPersonID) REFERENCES contactperson(personId);  \n" +
                "  \n" +
                "ALTER TABLE salesshippingmst  \n" +
                "ADD CONSTRAINT FK_salesshippingmst_shippingContactPersonID  \n" +
                "FOREIGN KEY (shippingContactPersonID) REFERENCES contactperson(personId);  \n" +
                /* **************************** New Script -> 10-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5789,'2.00','V1','User Story 40092: Add Default Contact Person with Address Selection for Billing/Shipping/Mark For Address in SO-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5789:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-01-2021 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderReportDetails`(  \n" +
                "	IN pid INT(11)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		SELECT sm.salesOrderNumber,sm.poNumber,sm.poDate, sm.poRevision,sm.revision,  \n" +
                "		sm.soDate,  \n" +
                "		sm.status,  \n" +
                "		sm.serialNumber,  \n" +
                "		sm.shippingComment,  \n" +
                "		sm.isBlanketPO,  \n" +
                "		sm.blanketPOOption,  \n" +
                "		CASE WHEN sm.isBlanketPO=1 THEN 'Yes' ELSE 'No' END blanketPOText,  \n" +
                "		mfg.mfgName AS customer,  \n" +
                "		gctsm.gencCategoryName AS shippingMethod,  \n" +
                "		gctpm.gencCategoryName AS paymentMethod,  \n" +
                "		-- get intermediate shipment address  \n" +
                "		CASE  \n" +
                "        WHEN sm.intermediateShipmentId IS NOT NULL THEN  \n" +
                "	fun_getAddressbyIDAndContactPersonID (sm.intermediateShipmentId,sm.intermediateContactPersonID) END AS intermediateShippingAddress,  \n" +
                "  \n" +
                "        -- get shipping detils of customer  \n" +
                "        CASE  \n" +
                "        WHEN sm.shippingAddressID IS NOT NULL THEN  \n" +
                "	fun_getAddressbyIDAndContactPersonID (sm.shippingAddressID,sm.shippingContactPersonID) END AS shippingAddress,  \n" +
                "	-- get billing Address  \n" +
                "	CASE  \n" +
                "        WHEN sm.billingAddressID IS NOT NULL THEN  \n" +
                "	fun_getAddressbyIDAndContactPersonID (sm.billingAddressID,sm.billingContactPersonID) END AS billingAddress,fb.name AS fob,CONCAT(emp.firstName,' ',emp.lastName) AS salesCommissionPerson ,  \n" +
                "    '1.00' docNumber  \n" +
                "  \n" +
                "	FROM salesordermst sm  \n" +
                "	LEFT JOIN genericcategory gctsm ON (gctsm.gencCategoryID = sm.shippingMethodID AND gctsm.deletedAt IS NULL)  \n" +
                "	LEFT JOIN genericcategory gctpm ON (gctpm.gencCategoryID = sm.termsID AND gctpm.deletedAt IS NULL)  \n" +
                "	LEFT JOIN mfgcodemst mfg ON sm.customerID = mfg.id AND mfg.isDeleted = 0  \n" +
                "	LEFT JOIN freeonboardmst fb ON fb.id=sm.freeOnBoardId  \n" +
                "	LEFT JOIN employees emp ON emp.id=sm.salesCommissionTo  \n" +
                "	WHERE sm.deletedAt IS NULL AND sm.id=pid;-- (IFNULL(sm.status,0)=1 AND sm.id=pid);  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "SELECT  \n" +
                "    sd.lineID,  \n" +
                "    c.PIDCode,  \n" +
                "    sd.id AS sDetID,  \n" +
                "    (CONCAT(CASE  \n" +
                "        WHEN (c.partType = 4 OR c.iscustom=0) THEN c.mfgPN  \n" +
                "        ELSE c.custAssyPN  \n" +
                "    END)) mfgPN,  \n" +
                "    c.rev revision,  \n" +
                "    CONCAT(IFNULL(REPLACE(sd.partDescription,'  \n" +
                "','<br/>'), ''), '<br/>',  \n" +
                "            IFNULL(CONCAT(' ', ro.name), ''),  \n" +
                "            IFNULL(CONCAT(', ',  \n" +
                "                            fun_getCertificationByPartID(sd.partID)),  \n" +
                "                    ''),  \n" +
                "            IFNULL(CONCAT(', Quote#', CASE  \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber  \n" +
                "        ELSE sd.quoteNumber  \n" +
                "    END), ''),  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS DESCRIPTION,  \n" +
                "    sd.qty,  \n" +
                "    sd.price,  \n" +
                "    sd.qty * sd.price AS extPrice,  \n" +
                "    sd.materialTentitiveDocDate,  \n" +
                "    CASE WHEN sd.materialTentitiveDocDate IS NOT NULL THEN DATE_FORMAT(sd.materialTentitiveDocDate, \"%Y\") ELSE '' END strmaterialTentitiveDocDate,  \n" +
                "    CASE  \n" +
                "        WHEN sd.partCategory = 2 THEN NULL  \n" +
                "        ELSE sd.shippingQty  \n" +
                "    END shippingQty,  \n" +
                "    ro.rohsIcon AS rohsIcon,  \n" +
                "    ro.name AS rohsStatus,  \n" +
                "   -- CONCAT(su.firstName, ' ', su.lastName) AS submittedBy,  \n" +
                "   fun_getUserNameByID(sm.updatedBy) AS submittedBy,  \n" +
                "    su.emailAddress,  \n" +
                "    sd.custPOLineNumber,  \n" +
                "    CASE  \n" +
                "        WHEN sd.quoteNumber IS NULL THEN raq.quoteNumber  \n" +
                "        ELSE sd.quoteNumber  \n" +
                "    END quoteNumber,  \n" +
                "    sd.remark,  \n" +
                "    emp.phExtension,  \n" +
                "    fun_getUOMAbbreviationByID(sd.uom) unitMeaser ,  \n" +
                "    smb.poNumber AS blanketPONumber  \n" +
                "FROM  \n" +
                "    salesorderdet sd  \n" +
                "        JOIN  \n" +
                "    salesordermst sm ON (sd.refSalesOrderID = sm.id  \n" +
                "        AND sm.deletedAt IS NULL)  \n" +
                "        LEFT JOIN  \n" +
                "    salesorderdet sdb ON (sdb.id=sd.refBlanketPOID AND sdb.isdeleted=0)  \n" +
                "        LEFT JOIN  \n" +
                "     salesordermst smb ON (smb.id=sdb.refSalesOrderID AND smb.isdeleted=0)  \n" +
                "        JOIN  \n" +
                "    COMPONENT c ON (c.id = sd.partID AND c.deletedAt IS NULL)  \n" +
                "        JOIN  \n" +
                "    rfq_rohsmst ro ON (c.RoHSStatusID = ro.id  \n" +
                "        AND ro.deletedAt IS NULL)  \n" +
                "        LEFT JOIN  \n" +
                "    users su ON su.id = sm.updatedBy  \n" +
                "        LEFT JOIN  \n" +
                "    employees emp ON emp.id = su.employeeID  \n" +
                "        LEFT JOIN  \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id  \n" +
                "        AND ra.partID = sd.partID  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id  \n" +
                "WHERE  \n" +
                "    (sm.isdeleted = 0 AND sd.isdeleted = 0)  \n" +
                "        AND sm.id = pid  \n" +
                "ORDER BY sd.partCategory DESC , sd.lineID ASC;  \n" +
                "  \n" +
                "	# get salesorder level total details  \n" +
                "    SELECT  \n" +
                "		IFNULL(SUM(sd.qty * sd.price),0) totalLinePrice,  \n" +
                "        IFNULL(SUM(IF(c.partType = 4,(sd.qty * sd.price), 0)),0) AS totalSOMiscPrice,  \n" +
                "        IFNULL(SUM(sod.totalLineMiscPrice),0) AS totalLineMiscPrice  \n" +
                "    FROM salesorderdet sd  \n" +
                "    LEFT JOIN (SELECT refSalesOrderDetID, SUM(sod.qty * sod.price) AS totalLineMiscPrice  \n" +
                "					FROM salesorder_otherexpense_details sod WHERE sod.isdeleted = 0  \n" +
                "			GROUP BY sod.refSalesOrderDetID) sod ON sod.refSalesOrderDetID = sd.id  \n" +
                "	INNER JOIN COMPONENT c ON c.id = sd.partId AND c.isDeleted = 0  \n" +
                "	WHERE sd.refsalesorderID=pid  AND sd.isdeleted =0 ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-01-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAddressbyIDAndContactPersonID` ;  \n" +
                "CREATE FUNCTION `fun_getAddressbyIDAndContactPersonID`(  \n" +
                "	pAddressID INT,  \n" +
                "	pcontactPersonID INT  \n" +
                ") RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pAddress VARCHAR(2000);  \n" +
                "  \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>','ATTN: ', IFNULL(cp.firstName,''),' ',IFNULL(cp.lastName,'') ,'<br/>', IFNULL(cp.division,''),(CASE WHEN cp.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),  \n" +
                "	(CASE WHEN cp.phone THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', cp.phone),''),IFNULL(CONCAT(' Ext. ',cp.phExtension), ''),  \n" +
                "	(CASE WHEN cp.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',cp.faxNumber),''),  \n" +
                "	(CASE WHEN cp.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',fun_getPrimaryEmailFromJsonList(cp.email)),'')) INTO  pAddress  \n" +
                "	FROM customer_addresses ca  \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "	LEFT JOIN contactperson cp ON ca.customerId=cp.refTransID AND cp.personId=pcontactPersonID  \n" +
                "	WHERE ca.id = pAddressID  AND ca.isDeleted = 0;  \n" +
                "  \n" +
                "	RETURN pAddress;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-01-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_contactPersonDetailByID` ;  \n" +
                "CREATE FUNCTION `fun_contactPersonDetailByID`(  \n" +
                "	pContactPersonID INT  \n" +
                ") RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pContactPerson VARCHAR(2000);  \n" +
                "	  SELECT  CONCAT('ATTN: ',firstName,' ',lastName, CASE WHEN division IS NULL THEN '' ELSE CONCAT('\r',division) END,  \n" +
                "	                 CASE WHEN email IS NULL THEN '' ELSE CONCAT('\r',fun_convertJsonEmailToCommaSepList(email)) END,  \n" +
                "	                 CASE WHEN phone IS NULL THEN '' ELSE CONCAT('\r',phone) END,  \n" +
                "	                 CASE WHEN phExtension IS NULL THEN '' ELSE CONCAT('Ext. ',phExtension) END,  \n" +
                "	                 CASE WHEN mobile IS NULL THEN '' ELSE CONCAT('\r',mobile) END,  \n" +
                "	                 CASE WHEN faxNumber IS NULL THEN '' ELSE CONCAT('\r',faxNumber) END) INTO  pContactPerson FROM contactperson  \n" +
                "	                 WHERE personID=pContactPersonID;  \n" +
                "  \n" +
                "	RETURN pContactPerson;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5790,'2.00','V1','User Story 40092: Add Default Contact Person with Address Selection for Billing/Shipping/Mark For Address in SO-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5790:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-01-2021 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAddressbyIDAndContactPersonID` ;  \n" +
                "CREATE FUNCTION `fun_getAddressbyIDAndContactPersonID`(  \n" +
                "	pAddressID INT,  \n" +
                "	pcontactPersonID INT  \n" +
                ") RETURNS VARCHAR(2000) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pAddress VARCHAR(2000);  \n" +
                "  \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>','ATTN: ', IFNULL(cp.firstName,''),' ',IFNULL(cp.lastName,'') ,'<br/>', IFNULL(cp.division,''),(CASE WHEN cp.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),  \n" +
                "	 CASE WHEN cp.phone IS NOT NULL THEN '<br/>' ELSE '' END,  \n" +
                "	 CASE WHEN cp.phone IS NULL THEN '' ELSE CONCAT('Phone: ', CAST(cp.phone AS CHAR(100))) END,  \n" +
                "	CASE WHEN cp.phExtension IS NULL THEN '' ELSE CONCAT(' Ext. ',CAST(cp.phExtension AS CHAR(100))) END,  \n" +
                "	 (CASE WHEN cp.faxNumber IS NOT NULL THEN '<br/>' ELSE '' END), CASE WHEN cp.faxNumber IS NULL THEN '' ELSE  CONCAT('Fax: ',CAST(cp.faxNumber AS CHAR(100))) END,  \n" +
                "	(CASE WHEN cp.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',fun_getPrimaryEmailFromJsonList(cp.email)),'')) INTO  pAddress  \n" +
                "	FROM customer_addresses ca  \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "	LEFT JOIN contactperson cp ON ca.customerId=cp.refTransID AND cp.personId=pcontactPersonID  \n" +
                "	WHERE ca.id = pAddressID  AND ca.isDeleted = 0;  \n" +
                "  \n" +
                "	RETURN pAddress;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5791,'2.00','V1',' Alter function fun_getAddressbyIDAndContactPersonID-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5791:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 10-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsSubAssembly TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE,  \n" +
                "    IN pSubAssemblyTab TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            (CASE WHEN kaad.bomAssyLevel = 0 THEN kaad.bomInternalVersionString ELSE 'N/A' END) AS kitAllocationInternalVersion,  \n" +
                "            kaad.bomAssyLevel  \n" +
                "		\");  \n" +
                "  \n" +
                "	SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND kaad.isDeleted = 0\") ;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetKitList = CONCAT(\"  \n" +
                "		SELECT  t.*,  \n" +
                "				fun_getKitReleaseIndication(releaseDayDiffwithCurrentDate, shortagePer, isKitPlanningRequired) AS kitReleaseIndication,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT  a.*,  \n" +
                "					(CASE WHEN assyID = partID THEN 0 ELSE 1 END) AS isSubAssembly,  \n" +
                "					(  \n" +
                "					CASE  \n" +
                "						WHEN ((IFNULL(kitReleasePlanCount, 0) = 0) OR (IFNULL(kitReleasePlanCount, 0) > 0 AND (IFNULL(totalPOQty, 0) <> assyPOQty OR IFNULL(totalKitQty, 0) <> assyKitQty))) THEN  \n" +
                "							TRUE  \n" +
                "						ELSE  \n" +
                "							FALSE  \n" +
                "					END  \n" +
                "					) as isKitPlanningRequired,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN ifnull(kitReleasePlanCount, 0) = 0 THEN  \n" +
                "								'Unplanned'  \n" +
                "							WHEN ifnull(kitReleasePlanCount, 0) > 0  AND  (IFNULL(totalPOQty, 0) <> assyPOQty OR IFNULL(totalKitQty, 0) <> assyKitQty) THEN  \n" +
                "								'Partially Planned'  \n" +
                "							WHEN ifnull(kitReleasePlanCount, 0) > 0 AND  IFNULL(totalPOQty, 0) = assyPOQty AND IFNULL(totalKitQty, 0) = assyKitQty THEN  \n" +
                "								'Fully Planned'  \n" +
                "							ELSE  \n" +
                "								NULL  \n" +
                "						END  \n" +
                "					) as kitPlanStatus,  \n" +
                "					fun_getKitReleaseStatus(subKitStatusPercentage,totalKitQty,totalPOQty,assyKitQty,assyPOQty,releasedPlanCount,pendingCount) AS  kitReleaseStatus,  \n" +
                "					fun_getKitReturnStatus(pendingReleaseCount,releasedNotReturnedCount,returnedCount,readyToReturnCount,shortageReturnCount) AS kitReturnStatus  \n" +
                "			FROM  \n" +
                "				(SELECT  \n" +
                "					`vuss`.`Sales Order ID` AS id,  \n" +
                "					`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "					`vuss`.`PartID` AS assyID,  \n" +
                "					kaad.partId AS partID,  \n" +
                "					`vuss`.`Status` AS completedStatus,  \n" +
                "					(  \n" +
                "						CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "								'Draft'  \n" +
                "							WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "								'Published'  \n" +
                "							ELSE  \n" +
                "								''  \n" +
                "						END  \n" +
                "					) AS `statusConvertedValue`,  \n" +
                "					ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "					ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "					ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "					td.releasedPlanCount,  \n" +
                "					td.pendingCount,  \n" +
                "					vrr.pendingReleaseCount,  \n" +
                "					vrr.releasedNotReturnedCount,  \n" +
                "					vrr.returnedCount,  \n" +
                "					vrr.readyToReturnCount,  \n" +
                "					vrr.shortageReturnCount,  \n" +
                "					CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "					td.nextReleaseDate,  \n" +
                "					`vuss`.`So Date` AS soDate,  \n" +
                "					`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "					`vuss`.`Revision` AS revision,  \n" +
                "					`vuss`.`Po Number` AS poNumber,  \n" +
                "					`vuss`.`Po Date` AS poDate,  \n" +
                "					`vuss`.`Assy ID` AS PIDCode,  \n" +
                "					`vuss`.`Assy Name` AS mfgPN,  \n" +
                "					ro.rohsIcon,  \n" +
                "					ro.name AS `rohsComplientConvertedValue`,  \n" +
                "					`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "					`vuss`.`custAssyPN` AS custAssyPN,  \n" +
                "					`vuss`.`liveVersion` AS liveVersion,  \n" +
                "					`vuss`.`releasedWorkorder` AS releasedWorkorder,  \n" +
                "					`vuss`.`NickName` AS nickName,  \n" +
                "					`vuss`.`partDescription` AS partDescription,  \n" +
                "					`vuss`.`PO Qty` AS qty,  \n" +
                "					`vuss`.`mrpQty` AS mrpQty,  \n" +
                "					`vuss`.`kitQty` AS kitQty,  \n" +
                "					(CASE  WHEN (`vuss`.`isHotJob` = 0) THEN  'No'  \n" +
                "						   WHEN (`vuss`.`isHotJob` = 1) THEN  'Yes'  \n" +
                "						   ELSE  ''  END  \n" +
                "					) AS `isHotJobValue`,  \n" +
                "					`vuss`.`isHotJob`,  \n" +
                "					`vuss`.`price` AS price,`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "					`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "					`vuss`.`remark` AS remark,  \n" +
                "					`vuss`.`cancleReason` AS cancleReason,  \n" +
                "					`vuss`.`Customer ID` AS customerID,  \n" +
                "					fun_GetFormattedMfgCode(vuss.mfgCode, vuss.mfgName,\", vMfgCodeFormat ,\") AS companyName,  \n" +
                "					`vuss`.`Full Name` AS fullName,  \n" +
                "					`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "					`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "					`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "					`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "					`vuss`.`shippingQty` AS shippingQty,  \n" +
                "					ifnull(td.totalPlan, 0) kitReleasePlanCount,  \n" +
                "					`vuss`.`kitNumber` AS kitNumber,  \n" +
                "					 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "					 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "					`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "					`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "					`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "					`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "					case when vuss.refSODetID is not null then sa.salesAssy else '' end  AS salesAssy,  \n" +
                "					`vuss`.`Sales Order Status` AS `status`,  \n" +
                "					`vuss`.`Terms ID` AS termsID,  \n" +
                "					`vuss`.`mfgCode` AS mfgCode,  \n" +
                "					vuss.partType,  \n" +
                "					vuss.isCancle,  \n" +
                "					vuss.mfgcodeID,  \n" +
                "					vuss.manufacturerName,  \n" +
                "					`vuss`.`serialNumber` AS serialNumber,  \n" +
                "					`vuss`.partCategory,  \n" +
                "					vuss.lineID,  \n" +
                "					`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "					ifnull(td.ishotjob,0) AS isBuildWiseHotJob ,  \n" +
                "					td.nextShipDate AS nextShipDate,  \n" +
                "					wo.WONumber AS workorders,  \n" +
                "					wo.WOIds AS workorderIds,  \n" +
                "					`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "					hutkit.refType AS refTypeKA,  \n" +
                "					hutkit.status AS haltStatusKA,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN 	hutkit.status = 'H' THEN  \n" +
                "									CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' ON ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutkit.startDate))  \n" +
                "							ELSE 	''  \n" +
                "						END  \n" +
                "					) AS reasonKA,  \n" +
                "					`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "					IFNULL(td.totalPOQty, 0) totalPOQty,  \n" +
                "					IFNULL(td.totalKitQty, 0) totalKitQty,  \n" +
                "					ka.shortagePer,  \n" +
                "					DATEDIFF(td.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "					kaad.perAssyBuildQty,  \n" +
                "					cassy.PIDCode AS assyPIDCode,  \n" +
                "					cassy.mfgPN AS assyMfgPN,  \n" +
                "					roassy.rohsIcon AS assyRohsIcon,  \n" +
                "					roassy.name assyRohsName,  \n" +
                "					cassy.isCustom AS assyIsCustomPart,  \n" +
                "					cassy.custAssyPN AS assyCustAssyPN,  \n" +
                "					cassy.nickName AS assyNickName,  \n" +
                "					cassy.mfgPNDescription AS assyPartDescription,  \n" +
                "					IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`PO Qty`,0) AS assyPOQty,  \n" +
                "					IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`mrpQty`,0) AS assyMRPQty,  \n" +
                "					IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`kitQty`,0) AS assyKitQty,  \n" +
                "					(CASE WHEN kaad.bomAssyLevel = 0 THEN COUNT(1) OVER (PARTITION BY kaad.refSalesOrderDetID) - 1 ELSE 0 END) AS subAssyCount\",v_DynamicColumns, \"  \n" +
                "			FROM   vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "				INNER JOIN  component cassy ON kaad.partId = cassy.id AND cassy.isDeleted = 0 AND cassy.parttype IN (3,2)  \n" +
                "				LEFT JOIN  rfq_rohsmst roassy ON cassy.RoHSStatusID = roassy.id AND roassy.isDeleted = 0  \n" +
                "				LEFT JOIN (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "						FROM  salesorderdet s INNER JOIN component c ON s.partID =c.id  \n" +
                "						WHERE  s.isdeleted=0 AND c.parttype IN (3,2)) AS sa ON sa.id = vuss.refSODetID  \n" +
                "				LEFT JOIN (SELECT shippingid,Sdetid, qty, CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),'%m/%d/%y')) salesRelease  \n" +
                "						FROM salesshippingmst  b WHERE isdeleted = 0 ) AS sr ON sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "				LEFT JOIN (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "						FROM salesorder_otherexpense_details WHERE isdeleted = 0  \n" +
                "						GROUP BY refSalesOrderDetID ) AS so ON so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "				LEFT JOIN (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds, GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "						FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "						ON wsd.woID=w.woID WHERE  wsd.isdeleted = 0  \n" +
                "						GROUP BY wsd.salesOrderDetailID  \n" +
                "					) AS wo ON wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "				LEFT JOIN (  \n" +
                "					SELECT	salesOrderDetID,   IFNULL(subAssyID, refAssyId) AS partID,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToReturnCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "					FROM 	vu_release_plan_release_return_status_det  \n" +
                "					GROUP BY salesOrderDetID, partID  \n" +
                "			) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId AND vrr.partID = kaad.partId  \n" +
                "		LEFT JOIN (  \n" +
                "			SELECT 	t.salesOrderDetID,  \n" +
                "					IFNULL(t.subAssyID,t.refAssyId) As partID,  \n" +
                "                    SUM(kitReleaseQty) AS totalKitQty,  \n" +
                "                    SUM(poQty) AS totalPOQty,  \n" +
                "                    COUNT(1) totalPlan,  \n" +
                "                    MAX(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  AND  kitStatus!='R' then 1 else 0 end )  AS ishotjob,  \n" +
                "					MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "					MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "					SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "					SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "            FROM (  \n" +
                "				SELECT 	r.salesOrderDetID,  r.subAssyID, r.refAssyId, r.kitReleaseQty , r.poQty, r.kitStatus, r.kitReleaseDate  \n" +
                "				FROM 	vu_release_plan_detail r  \n" +
                "			) AS t  \n" +
                "			GROUP BY  t.salesOrderDetID, partID  \n" +
                "        ) AS td  ON td.salesOrderDetID = vuss.salesOrderDetailId AND td.partID = kaad.partId  \n" +
                "			LEFT JOIN 	(  \n" +
                "				SELECT 	refSalesOrderDetID, assyID, mainAssy,  \n" +
                "						(k.totalLine - k.totalNotRequireLine) AS totalLine,  \n" +
                "						k.shortageLine,  \n" +
                "						Round(k.allocPerComponent,2) allocPerComponent,  \n" +
                "						Round(k.allocPerWithSubAssy,2) allocPerWithSubAssy,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS shortagePer  \n" +
                "				FROM  \n" +
                "					(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
                "							COUNT(1) AS `totalLine`,  \n" +
                "							SUM( k.shortageline) shortageline,  \n" +
                "							SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "							(CASE WHEN assyID = mainAssy THEN  \n" +
                "								MIN(mainAssyPerForSubAssy)  /* Main Assembly Case */  \n" +
                "							ELSE /* Sub Assembly Case */  \n" +
                "								0 END) AS allocPerWithSubAssy,  \n" +
                "							(CASE WHEN assyID = mainAssy THEN  \n" +
                "								MIN(mainAssyPerForComponent)  /* Main Assembly Case */  \n" +
                "							ELSE /* Sub Assembly Case */  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) END) AS allocPerComponent  \n" +
                "					FROM  \n" +
                "						(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
                "								k.qpaWithDnp, k.allocationPer, k.isNotRequiredKitAllocation,  k.allocatedPercePerLine, k.MainAssyLine, k.shortageline,  \n" +
                "								SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForSubAssy,  \n" +
                "								SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN k.MainAssyLine ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForComponent  \n" +
                "					 FROM  \n" +
                "							(SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "									vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "									IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "									(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "									(case when vk.assyid = sd.partid then vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "									vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "								FROM  	`vu_kit_allocation_detail` vk  \n" +
                "								INNER JOIN    salesorderdet sd ON vk.refSalesorderdetid  = sd.id  \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "							) AS k  \n" +
                "						) AS k GROUP bY assyID, refSalesorderdetid, mainAssy  \n" +
                "					) AS k  \n" +
                "				) AS ka ON ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` AND ka.mainAssy =  `vuss`.`PartID` AND ka.assyID = kaad.partId  \n" +
                "				LEFT JOIN  rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "				LEFT JOIN  holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId AND hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId AND htk.refType='KA' AND htk.isDeleted=0)  \n" +
                "				LEFT JOIN (SELECT ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) AS initialStockCount  \n" +
                "								FROM assemblystock ass WHERE ass.isDeleted =0 AND ass.type = 'OS'  \n" +
                "								GROUP BY ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID)  AS astk  \n" +
                "							ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` AND astk.refSalesOrderID = vuss.`Sales Order ID` AND astk.partID = kaad.partId  \n" +
                "				) AS a  \n" +
                "		) AS t  \n" +
                "    \");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY (nextReleaseDate IS NULL),  nextReleaseDate ASC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  #need to check once  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "       ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pIsSubAssembly = 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND isSubAssembly = 0 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSubAssemblyTab = 1) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND subAssyCount > 0 \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetKitList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount, sum(subAssyCount > 0) SubAssemblyCount  FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5792,'2.00','V1','Bug 40270: Showing incorrect data for Kit Allocation % and Sub assemblies on Kit List - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5792:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customer_addresses` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customer_addresses`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "	IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as  \n" +
                "		    SELECT SUM(cnt) TotalCount,  GROUP_CONCAT(msg SEPARATOR\",\") Message  \n" +
                "		    FROM  \n" +
                "		    (  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND billingAddressID IN (',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingAddressID IN (',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE refPaymentMode = \"CR\"  \n" +
                "				AND (billToAddressID IN (',IDs,') OR  payToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		    ) q');  \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "		IF (SELECT TotalCount FROM tempcustomer_addresses)=0 THEN  \n" +
                "  \n" +
                "		SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "			SELECT * FROM tempcustomer_addresses;  \n" +
                "		ELSE  \n" +
                "			SELECT * FROM tempcustomer_addresses;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE tempcustomer_addresses;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5793,'2.00','V1',' Sproc_checkDelete_customer_addresses - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5793:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-01-2022 *********************************** */
                "INSERT INTO `table_mapping_details`(`tabel_name`,`display_page_name`) VALUES ('packingslip_invoice_payment_cust  ', 'Customer Refund');  \n" +
                /* **************************** New Script -> 10-01-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_contactperson`;  \n" +
                "CREATE TRIGGER `Trg_AU_contactperson` AFTER UPDATE ON `contactperson` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_createdAt DATETIME DEFAULT fun_DatetimetoUTCDateTime();  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"contactperson\";  \n" +
                "  \n" +
                "	IF IFNULL(OLD.firstName,0) != IFNULL(NEW.firstName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'First Name',CAST(OLD.firstName AS CHAR), CAST(NEW.firstName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'firstName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.lastName,0) != IFNULL(NEW.lastName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Last Name',CAST(OLD.lastName AS CHAR), CAST(NEW.lastName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'lastName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Email',CAST((SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(OLD.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails) AS CHAR),  \n" +
                "			CAST(( SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(NEW.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails)AS CHAR), v_createdAt,NEW.createdBy,v_createdAt,  \n" +
                "            NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'email'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phone,0) != IFNULL(NEW.phone,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Phone',CAST(OLD.phone AS CHAR), CAST(NEW.phone AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phone'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mobile,0) != IFNULL(NEW.mobile,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Mobile',CAST(OLD.mobile AS CHAR), CAST(NEW.mobile AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'mobile'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.division,0) != IFNULL(NEW.division,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Department',CAST(OLD.division AS CHAR), CAST(NEW.division AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'division'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'faxNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phExtension,0) != IFNULL(NEW.phExtension,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Ext.',CAST(OLD.phExtension AS CHAR), CAST(NEW.phExtension AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phExtension'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.middleName,0) != IFNULL(NEW.middleName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Middle Name',CAST(OLD.middleName AS CHAR), CAST(NEW.middleName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'middleName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDefault,0) != IFNULL(NEW.isDefault,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Is Default',CAST((CASE WHEN OLD.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isDefault'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.additionalComment,0) != IFNULL(NEW.additionalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Comment',CAST(OLD.additionalComment AS CHAR), CAST(NEW.additionalComment AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'longtext');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPrimary,0) != IFNULL(NEW.isPrimary,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Is Primary',CAST((CASE WHEN OLD.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isPrimary'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(OLD.refTableName,0) != IFNULL(NEW.refTableName,0) OR IFNULL(OLD.refTransID,0) != IFNULL(NEW.refTransID,0) ) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Contact Person Type',CAST((CASE WHEN (OLD.refTableName = 'employees') THEN 'Personnel' WHEN (OLD.refTableName = 'mfgcodemst') THEN (SELECT (CASE  \n" +
                "			WHEN a.mfgType = 'MFG' THEN 'Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = OLD.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "			CAST((CASE WHEN (NEW.refTableName = 'employees') THEN 'Personnel' WHEN (NEW.refTableName = 'mfgcodemst') THEN (SELECT (CASE WHEN a.mfgType = 'MFG' THEN 'Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = NEW.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "             v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'refTableName'));  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-01-2022 *********************************** */
                "Drop procedure if Exists `Sproc_checkDelete_contactperson`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_contactperson`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempContactperson as  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust\" else \"\" end as msg FROM packingslip_invoice_payment  WHERE (billToContactPersonID IN (',IDs,') OR payToContactPersonID IN (',IDs,')) AND refPaymentMode = \"CR\" AND isDeleted = 0 LIMIT 1)  \n" +
                "     ');  \n" +
                "/*	  (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive\" else \"\" end as msg FROM packing_slip_material_receive WHERE isDeleted = 0 AND (billToConactPerson IN (',IDs,')  \n" +
                "			OR shipToContactPersonID IN (',IDs,') OR rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted = 0 AND (payToContactPersonID IN (',IDs,') OR billToContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted = 0 AND (supplierContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_line_release_det\" else \"\" end as msg FROM purchase_order_line_release_det WHERE isDeleted = 0 AND shippingConactPersonID IN (',IDs,') LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE isDeleted = 0 AND (custBillingConactPersonID IN (',IDs,') OR custShippingConactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies_quotation_submitted\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0 AND (custBillingConactPersonID IN (',IDs,') OR custShippingConactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesshippingmst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0 AND shippingContactPersonID IN (',IDs,') LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "	  (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip\" else \"\" end as msg FROM customer_packingslip WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,')) LIMIT 1)');  */  \n" +
                "  	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "  \n" +
                "  \n" +
                "    IF(countList=FALSE) THEN  \n" +
                "		IF(SELECT SUM(t.cnt) FROM tempContactperson t)=0 THEN  \n" +
                "			SET @SQl1 = CONCAT('update contactperson set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where personId in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			SELECT * FROM tempContactperson WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempContactperson t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "		FROM tempContactperson t1  \n" +
                "		INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "			WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "			ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE if exists tempContactperson;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5794,'2.00','V1',' BUG 40285 And Check contact person is used in customer refund - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5794:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-01-2022*********************************** */
                "DROP FUNCTION IF EXISTS fun_getFormattedContactPerson;  \n" +
                "CREATE FUNCTION `fun_getFormattedContactPerson`(  \n" +
                "	pFirstName VARCHAR(255),  \n" +
                "     pMiddleName VARCHAR(255),  \n" +
                "     pLastName VARCHAR(255),  \n" +
                "     pDivision VARCHAR(100),  \n" +
                "     pEmail LONGTEXT,  \n" +
                "     pPhoneCountryCode VARCHAR(5),  \n" +
                "     pPhone VARCHAR(255),  \n" +
                "     pPhExtension VARCHAR(8)  ,  \n" +
                "     pMobile VARCHAR(255),  \n" +
                "     pFaxCountryCode VARCHAR(5),  \n" +
                "     pFaxNumber VARCHAR(255)  \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn LONGTEXT;  \n" +
                "	SELECT  CONCAT(fun_GetFormattedContactPersonName(pFirstName, pMiddleName,pLastName),  \n" +
                "		 CASE WHEN pDivision IS NULL THEN '' ELSE pDivision END,  \n" +
                "		 CASE WHEN pEmail IS NULL THEN '' ELSE fun_convertJsonEmailToCommaSepList(pEmail) END,  \n" +
                "         CASE WHEN pPhoneCountryCode IS NULL THEN '' ELSE CONCAT(pPhoneCountryCode,'-') END,  \n" +
                "		 CASE WHEN pPhone IS NULL THEN '' ELSE pPhone END,  \n" +
                "		 CASE WHEN pPhExtension IS NULL THEN '' ELSE CONCAT('Ext. ',pPhExtension) END,  \n" +
                "		 CASE WHEN pMobile IS NULL THEN '' ELSE pMobile END,  \n" +
                "         CASE WHEN pFaxCountryCode IS NULL THEN '' ELSE CONCAT(pFaxCountryCode,'-') END,  \n" +
                "		 CASE WHEN pFaxNumber IS NULL THEN '' ELSE pFaxNumber END) INTO  vReturn  ;  \n" +
                "	RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5795,'2.00','V1','fun_getFormattedContactPerson - User Story 39977: Add Default Contact Person with Address Selection for Billing/Shipping/Mark  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5795:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-01-2021 *********************************** */
                "ALTER TABLE `packing_slip_material_receive`  \n" +
                "ADD COLUMN `rmaShippingContactPerson` VARCHAR(1000) NULL,  \n" +
                "ADD COLUMN `rmaShippingContactPersonID` INT NULL,  \n" +
                "ADD COLUMN `rmaMarkForContactPerson` VARCHAR(1000) NULL,  \n" +
                "ADD COLUMN `rmaMarkForContactPersonID` INT NULL;  \n" +
                "ALTER TABLE `packing_slip_material_receive`  \n" +
                "ADD INDEX `FK_packing_slip_material_receive_rmaShippingContactPersonID_idx` (`rmaShippingContactPersonID` ASC) VISIBLE,  \n" +
                "ADD INDEX `FK_packing_slip_material_receive_rmaMarkForContactPersonID_idx` (`rmaMarkForContactPersonID` ASC) VISIBLE;  \n" +
                "ALTER TABLE `packing_slip_material_receive` ALTER INDEX `FK_packing_slip_material_receive_customerID_idx` VISIBLE;  \n" +
                "ALTER TABLE `packing_slip_material_receive`  \n" +
                "ADD CONSTRAINT `FK_packing_slip_material_receive_rmaShippingContactPersonID`  \n" +
                "  FOREIGN KEY (`rmaShippingContactPersonID`)  \n" +
                "  REFERENCES `contactperson` (`personId`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION,  \n" +
                "ADD CONSTRAINT `FK_packing_slip_material_receive_rmaMarkForContactPersonID`  \n" +
                "  FOREIGN KEY (`rmaMarkForContactPersonID`)  \n" +
                "  REFERENCES `contactperson` (`personId`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                /* **************************** Add Script Version -> 11-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5796,'2.00','V1','User Story 39978: Add Default Contact Person with Address Selection for Billing/Shipping/Mark For Address in SRMA - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5796:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-01-2021 *********************************** */
                "Drop procedure if exists `Sproc_GetSupplierRMAReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierRMAReportDetails`(  \n" +
                "	IN pid INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	#Supplier RMA Master Report  \n" +
                "	SELECT  	pr.id,  \n" +
                "			pr.poNumber,  \n" +
                "			pr.poDate,  \n" +
                "			pr.packingSlipNumber,  \n" +
                "			pr.packingSlipDate,  \n" +
                "			fun_getAddressbyIDAndContactPersonID(pr.rmaShippingAddressId,pr.rmaShippingContactPersonID) rmaShippingAddress,  \n" +
                "			fun_getAddressbyIDAndContactPersonID(pr.rmaMarkForAddressId,pr.rmaMarkForContactPersonID) rmaMarkForAddress,  \n" +
                "			pr.shippingInsurance,  \n" +
                "			pr.remark,  \n" +
                "			pr.status,  \n" +
                "			IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,  \n" +
                "			CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,  \n" +
                "			us.emailAddress,  \n" +
                "			emp.phExtension  \n" +
                "	FROM 		packing_slip_material_receive pr  \n" +
                "	INNER JOIN 	genericcategory gcs ON gcs.gencCategoryID = pr.shippingMethodId AND gcs.isDeleted = 0  \n" +
                "	LEFT JOIN 	users us ON us.id = pr.updatedBy AND us.isDeleted = 0  \n" +
                "	LEFT JOIN 	employees emp ON emp.id = us.employeeID  AND emp.isDeleted = 0  \n" +
                "        WHERE 		pr.id = pid  \n" +
                "				AND pr.receiptType = 'R'  \n" +
                "				AND pr.isDeleted = 0;  \n" +
                "  \n" +
                "	# Supplier RMA Line Level Details  \n" +
                "	SELECT 		prd.id AS prDetID,  \n" +
                "			prd.packingSlipSerialNumber,  \n" +
                "			fun_getMfgNameByPartID(prd.partID) mfgName,  \n" +
                "			fun_getMFGPNByID(prd.partID) mfgPN,  \n" +
                "			prd.remark,  \n" +
                "			IFNULL(prd.receivedQty,0) AS qty,  \n" +
                "			c.mfgPNDescription AS description,  \n" +
                "			IFNULL(c.rev, '') AS revision,  \n" +
                "			fun_getUOMAbbreviationByID(c.uom) uom  \n" +
                "	FROM 		packing_slip_material_receive_det prd  \n" +
                "	INNER JOIN 	component c ON (c.id = prd.partID AND c.isDeleted = 0)  \n" +
                "	WHERE 		prd.refPackingSlipMaterialRecID = pid AND prd.isDeleted = 0  \n" +
                "	ORDER BY 	prd.packingSlipSerialNumber ASC;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5797,'2.00','V1','User Story 39978: Add Default Contact Person with Address Selection for Billing/Shipping/Mark For Address in SRMA - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5797:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-01-2022 *********************************** */
                "ALTER TABLE `purchase_order_mst`  \n" +
                "	ADD COLUMN `supplierContactPerson` VARCHAR(1000),  \n" +
                "	ADD COLUMN `supplierContactPersonID` INT,  \n" +
                "	ADD COLUMN `shippingContactPerson` VARCHAR(1000),  \n" +
                "	ADD COLUMN `shippingContactPersonID` INT,  \n" +
                "	ADD COLUMN `intermediateContactPerson` VARCHAR(1000),  \n" +
                "	ADD COLUMN `intermediateContactPersonID` INT;  \n" +
                /* **************************** New Script -> 12-01-2022 *********************************** */
                "ALTER TABLE `purchase_order_mst`  \n" +
                "ADD INDEX `FK_purchase_order_mst_suppilerContactPersonID_idx` (`supplierContactPersonID` ASC) VISIBLE,  \n" +
                "ADD INDEX `FK_purchase_order_mst_shippingContactPersonID_idx` (`shippingContactPersonID` ASC) VISIBLE,  \n" +
                "ADD INDEX `FK_purchase_order_mst_IntermediateContactPersonID_idx` (`intermediateContactPersonID` ASC) VISIBLE;  \n" +
                /* **************************** New Script -> 12-01-2022 *********************************** */
                "ALTER TABLE `purchase_order_mst`  \n" +
                "ADD CONSTRAINT `FK_purchase_order_mst_suppilerContactPersonID`  \n" +
                "  FOREIGN KEY (`supplierContactPersonID`)  \n" +
                "  REFERENCES `contactperson` (`personId`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION,  \n" +
                "ADD CONSTRAINT `FK_purchase_order_mst_shippingContactPersonID`  \n" +
                "  FOREIGN KEY (`shippingContactPersonID`)  \n" +
                "  REFERENCES `contactperson` (`personId`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION,  \n" +
                "ADD CONSTRAINT `FK_purchase_order_mst_IntermediateContactPersonID`  \n" +
                "  FOREIGN KEY (`intermediateContactPersonID`)  \n" +
                "  REFERENCES `contactperson` (`personId`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                /* **************************** New Script -> 12-01-2022 *********************************** */
                "ALTER TABLE `purchase_order_line_release_det`  \n" +
                "  ADD COLUMN `shippingAddress` VARCHAR(1000),  \n" +
                "  ADD COLUMN `shippingContactPerson` VARCHAR(1000),  \n" +
                "  ADD COLUMN `shippingContactPersonID` INT;  \n" +
                /* **************************** New Script -> 12-01-2022 *********************************** */
                "ALTER TABLE `purchase_order_line_release_det`  \n" +
                "ADD INDEX `FK_purchase_order_line_release_det_shippingContactPersonID_idx` (`shippingContactPersonID` ASC) VISIBLE;  \n" +
                /* **************************** New Script -> 12-01-2022 *********************************** */
                "ALTER TABLE `purchase_order_line_release_det`  \n" +
                "ADD CONSTRAINT `FK_purchase_order_line_release_det_shippingContactPersonID`  \n" +
                "  FOREIGN KEY (`shippingContactPersonID`)  \n" +
                "  REFERENCES `contactperson` (`personId`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                /* **************************** Add Script Version -> 12-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5798,'2.00','V1',' User Story 39979: Add Default Contact Person with Address Selection for Billing/Shipping/Mark For Address in PO - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5798:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-01-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_mst`;  \n" +
                "CREATE TRIGGER `Trg_AU_purchase_order_mst` AFTER UPDATE ON `purchase_order_mst` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "    DECLARE vOldSupplier VARCHAR(100);  \n" +
                "    DECLARE vNewSupplier VARCHAR(100);  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO#',CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SO#',CAST(OLD.soNumber AS CHAR), CAST(new.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Date',CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SO Date',CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.supplierID,0) != IFNULL(NEW.supplierID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldSupplier FROM mfgcodemst WHERE id=OLD.supplierID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewSupplier FROM mfgcodemst WHERE id=NEW.supplierID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Supplier', CAST(vOldSupplier AS CHAR), CAST(vNewSupplier AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Terms', CAST(fun_getGenericCategoryCodeNameByID(OLD.termsID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.termsID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Revision', CAST(OLD.poRevision AS CHAR), CAST(new.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Internal Notes', CAST(OLD.shippingComment AS CHAR), CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.poComment ,0) != IFNULL(NEW.poComment ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Comment', CAST(OLD.poComment AS CHAR), CAST(new.poComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Status', CAST(CASE WHEN OLD.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), CAST(CASE WHEN NEW.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.carrierID ,0) != IFNULL(NEW.carrierID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber ,0) != IFNULL(NEW.carrierAccountNumber ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'DELETE', CAST(CASE WHEN OLD.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Blanket PO', CAST(CASE WHEN OLD.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Shipping with Insurance', CAST(CASE WHEN OLD.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.supplierAddressID ,0) != IFNULL(NEW.supplierAddressID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Supplier Address', CAST(OLD.supplierAddress AS CHAR), CAST(NEW.supplierAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingAddressID ,0) != IFNULL(NEW.shippingAddressID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Bill To / Ship To', CAST(OLD.shippingAddress AS CHAR), CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.intermediateShipmentID ,0) != IFNULL(NEW.intermediateShipmentID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Mark For (Intermediate Ship to)', CAST(OLD.intermediateAddress AS CHAR), CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.freeOnBoardID ,0) != IFNULL(NEW.freeOnBoardID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'FOB', CAST(fun_getFOBById(OLD.freeOnBoardID) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poWorkingStatus ,0) != IFNULL(NEW.poWorkingStatus ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Working Status', CAST(CASE WHEN IFNULL(OLD.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN OLD.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END  AS CHAR), CAST(CASE WHEN IFNULL(NEW.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN NEW.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.cancleReason ,0) != IFNULL(NEW.cancleReason ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Cancellation / Undo Reason', CAST(OLD.cancleReason AS CHAR), CAST(NEW.cancleReason AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CancellationConfirmed ,0) != IFNULL(NEW.CancellationConfirmed ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Cancellation Confirmed by Supplier',  CAST(CASE WHEN OLD.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.customerID, 0) != IFNULL(NEW.customerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.customerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.customerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lockStatus, 0) != IFNULL(NEW.lockStatus,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Lock Status',  CAST(CASE WHEN OLD.lockStatus='RL' THEN 'Ready To Lock' WHEN OLD.lockStatus='LC' THEN 'Locked' ELSE 'Not Applicable' END AS CHAR), CAST(CASE WHEN NEW.lockStatus='RL' THEN 'Ready To Lock' WHEN NEW.lockStatus='LC' THEN 'Locked' ELSE 'Not Applicable' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lockedBy, 0) != IFNULL(NEW.lockedBy,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Locked By',  CAST(fun_getUserNameByID(OLD.lockedBy) AS CHAR), CAST(fun_getUserNameByID(NEW.lockedBy) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.lockedAt, 0) != IFNULL(NEW.lockedAt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Locked Date',  CAST(fun_ApplyCommonDateTimeFormatByParaValue(OLD.lockedAt,vTimeZone,vDateTimeDisplayFormat) AS CHAR), CAST(fun_ApplyCommonDateTimeFormatByParaValue(NEW.lockedAt,vTimeZone,vDateTimeDisplayFormat) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.lockedByRoleId, 0) != IFNULL(NEW.lockedByRoleId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Locked By Role',  CAST(fun_getRoleByID(OLD.lockedByRoleId) AS CHAR), CAST(fun_getRoleByID(NEW.lockedByRoleId) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poCompleteReason, 0) != IFNULL(NEW.poCompleteReason, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PO Complete Reason', CAST(OLD.poCompleteReason AS CHAR), CAST(NEW.poCompleteReason AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "      IF IFNULL(OLD.supplierContactPersonID ,0) != IFNULL(NEW.supplierContactPersonID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Supplier Address Contact Person', CAST(OLD.supplierContactPerson AS CHAR), CAST(NEW.supplierContactPerson AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingContactPersonID ,0) != IFNULL(NEW.shippingContactPersonID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Bill To / Ship To Contact Person', CAST(OLD.shippingContactPerson AS CHAR), CAST(NEW.shippingContactPerson AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.intermediateContactPersonID ,0) != IFNULL(NEW.intermediateContactPersonID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'Mark For (Intermediate Ship to) Contact Person', CAST(OLD.intermediateContactPerson AS CHAR), CAST(NEW.intermediateContactPerson AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5799,'2.00','V1',' User Story 39979: Add Default Contact Person with Address Selection for Billing/Shipping/Mark For Address in PO - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5799:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetPurchaseOrderReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPurchaseOrderReportDetails`(  \n" +
                "	IN pid INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    # Purchase Order Master details  \n" +
                "    SELECT  po.id,  \n" +
                "		po.status,  \n" +
                "		po.poNumber,  \n" +
                "        po.poRevision,  \n" +
                "        po.poDate,  \n" +
                "        po.poWorkingStatus,  \n" +
                "        fun_getAddressbyIDAndContactPersonID (po.supplierAddressID,po.supplierContactPersonID) AS supplierAddress,  \n" +
                "		fun_getAddressbyIDAndContactPersonID (po.shippingAddressID,po.shippingContactPersonID) AS shippingAddress,  \n" +
                "        fun_getAddressbyIDAndContactPersonID (po.intermediateShipmentID,po.intermediateContactPersonID) AS intermediateAddress,  \n" +
                "		IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,  \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,  \n" +
                "        po.shippingInsurance,  \n" +
                "        IFNULL(FUN_GETFOBBYID(po.freeOnBoardID), ' - ') AS freeOnBoard,  \n" +
                "        po.poComment,  \n" +
                "        po.serialNumber,  \n" +
                "		CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,  \n" +
                "		us.emailAddress,  \n" +
                "		emp.phExtension  ,  \n" +
                "        '1.00' AS docNumber  \n" +
                "	FROM purchase_order_mst po  \n" +
                "         INNER JOIN  \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = po.shippingMethodID  \n" +
                "        AND gcs.isDeleted = 0  \n" +
                "        INNER JOIN  \n" +
                "    genericcategory gcp ON gcp.gencCategoryID =  po.termsID  \n" +
                "        AND gcp.isDeleted = 0  \n" +
                "     LEFT JOIN users us ON us.id = po.updatedBy  \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID  \n" +
                "        WHERE po.isDeleted = 0 AND po.id = pid;  \n" +
                "  \n" +
                "	# Purchase Order Line details  \n" +
                "    SELECT  pod.lineID,  \n" +
                "		pod.id AS pODetID,  \n" +
                "        fun_getMfgNameByPartID(pod.mfgPartID) mfgName,  \n" +
                "		(CASE WHEN (c.iscustom=1) THEN  \n" +
                "			c.custAssyPN  \n" +
                "		  WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN  \n" +
                "			c.mfgPN  \n" +
                "        ELSE ''  END) AS mfgPN ,  \n" +
                "        IFNULL(c.rev, '') AS revision,  \n" +
                "        fun_getRoHSNameByID(pod.rohsStatusID) rohsName,  \n" +
                "		pod.supplierQuoteNumber,  \n" +
                "        pod.internalRef,  \n" +
                "        fun_getPackagingNameByID(pod.packagingID) packagingType,  \n" +
                "        pod.qty,  \n" +
                "        'EA' uom,  \n" +
                "        pod.price,  \n" +
                "        (SELECT SUM(IFNULL(pold.receivedQty,0)) FROM purchase_order_line_release_det pold WHERE pold.isdeleted=0 AND pold.refPurchaseOrderDetID=pod.id) receivedQty,  \n" +
                "       fun_getMFGPNByID(pod.supplierPartID) supplierPN,  \n" +
                "        (IFNULL(pod.qty,0)*IFNULL(pod.price,0)) extPrice,  \n" +
                "        CONCAT(IFNULL(replace(pod.partDescription,'  \n" +
                "','<br/>'), ''),CASE WHEN (fun_getCertificationByPartID(pod.mfgPartID) IS NULL AND c.htsCode IS NULL AND c.countryOfOrigin IS NULL) THEN '' ELSE '<br/>' END,  \n" +
                "            IFNULL(CONCAT(  \n" +
                "                            fun_getCertificationByPartID(pod.mfgPartID)),  \n" +
                "                    ''),  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS description,  \n" +
                "        pod.lineComment  \n" +
                "	 FROM purchase_order_det pod  \n" +
                "	 INNER JOIN component c ON (c.id = pod.mfgPartID AND c.isDeleted = 0)  \n" +
                "	 WHERE pod.isDeleted = 0 AND pod.refPurchaseOrderID = pid  \n" +
                "	 ORDER BY pod.lineID ASC;  \n" +
                "  \n" +
                "	# Get purchase order Total Price table details  \n" +
                "	SELECT  \n" +
                "        IFNULL(SUM(IF(c.partType <> 4,(pd.qty * pd.price), 0)),0) AS totalLinePrice,  \n" +
                "        IFNULL(SUM(IF(c.partType = 4,(pd.qty * pd.price), 0)),0)AS totalPOMiscPrice,  \n" +
                "        IFNULL(SUM(pod.totalLineMiscPrice),0) AS totalLineMiscPrice  \n" +
                "    FROM purchase_order_det pd  \n" +
                "    LEFT JOIN (SELECT refPurchaseOrderDetID, SUM(pod.qty * pod.price) AS totalLineMiscPrice  \n" +
                "					FROM purchase_order_line_othercharges pod WHERE pod.isdeleted = 0  \n" +
                "			GROUP BY pod.refPurchaseOrderDetID) pod ON pod.refPurchaseOrderDetID = pd.id  \n" +
                "	INNER JOIN COMPONENT c ON c.id = pd.mfgPartID AND c.isDeleted = 0  \n" +
                "	WHERE pd.refPurchaseOrderID = pid AND pd.isdeleted = 0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5800,'2.00','V1',' User Story 39979: Add Default Contact Person with Address Selection for Billing/Shipping/Mark For Address in PO - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5800:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_removeBlanketPOLinkFuturePOOption` ;  \n" +
                "CREATE PROCEDURE `Sproc_removeBlanketPOLinkFuturePOOption`(  \n" +
                "		IN pSoDetID INT,  \n" +
                "		IN pBlanketPOID INT,  \n" +
                "		IN pisBPORemove TINYINT,  \n" +
                "		IN pUserID VARCHAR(10),  \n" +
                "		IN pUserRoleID VARCHAR(10),  \n" +
                "		IN punlink TINYINT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "                IF(pisBPORemove=1)THEN  \n" +
                "  \n" +
                "                 CREATE TEMPORARY TABLE IF NOT EXISTS tempBlanketPOTbl AS  \n" +
                "                  SELECT shippingID FROM salesshippingmst WHERE  sDetID=pSoDetID ;  \n" +
                "  \n" +
                "                    UPDATE salesshippingmst  \n" +
                "                   SET isdeleted=1,  \n" +
                "                   deletedAt=CURRENT_TIMESTAMP,  \n" +
                "                   deletedBy=pUserID,  \n" +
                "                   deleteByRoleId=pUserRoleID  \n" +
                "                   WHERE refShippingLineID IN (SELECT shippingID FROM tempBlanketPOTbl) AND sDetID=pBlanketPOID;  \n" +
                "  \n" +
                "                DROP TEMPORARY TABLE IF EXISTS tempBlanketPOTbl;  \n" +
                "  \n" +
                "                IF(punlink=1)THEN  \n" +
                "                        UPDATE salesorderdet SET refBlanketPOID=(NULL),updatedBy=pUserID, updateByRoleId= pUserRoleID WHERE id=pSoDetID;  \n" +
                "  \n" +
                "                END IF;  \n" +
                "                END IF;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 12-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "          DECLARE v_mfrFormatType INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormatType;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				fun_GetFormattedMfgCode(vuss.mfgCode,vuss.mfgName,\",v_mfrFormatType,\") AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 and vuss.blanketPOOption=2 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				vuss.blanketPOOption,  \n" +
                "				vuss.blanketPOOptionText,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.linkToBlanketPO,  \n" +
                "				vuss.linkToBlanketPOText,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				vuss.requestedBPOStartDate,  \n" +
                "				 vuss.blanketPOEndDate,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "               fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToReturnCount,vrr.shortageReturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount ,  \n" +
                "				vuss.rmaNumber,vuss.isDebitedByCustomer, vuss.debitedByCustText,  \n" +
                "				vuss.rmaOrgPONumber,vuss.orgSalesOrderID,vuss.isReworkRequired,  \n" +
                "				vuss.reworkReqText, vuss.reworkPONumber,vuss.custOrgPOLineNumber \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToReturnCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'' OR rmaNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''' OR rmaNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "    IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsRmaPO = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isRmaPO = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "	ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getBlanketPOUsedQty` ;  \n" +
                "CREATE PROCEDURE `Sproc_getBlanketPOUsedQty`(  \n" +
                "pSdetID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	         SELECT  \n" +
                "	          CASE WHEN sd.qty>sdbp.qty THEN sdbp.qty ELSE sd.qty END qty,  \n" +
                "	          sm.id,  \n" +
                "	          sm.salesOrderNumber,  \n" +
                "	          sm.poNumber,  \n" +
                "	          sm.revision,  \n" +
                "	          sm.poRevision,  \n" +
                "	          sd.custPOLineNumber,  \n" +
                "	          sd.id AS soDetID  \n" +
                "  \n" +
                "	          FROM salesorderdet sd JOIN salesordermst sm ON sm.id= sd.refsalesOrderID  \n" +
                "	          LEFT JOIN salesorderdet sdbp ON sdbp.id=sd.refBlanketPOID AND sdbp.isdeleted=0  \n" +
                "	          WHERE sd.refBlanketPOID=pSdetID AND sd.isdeleted=0;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllOtherComponentList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllOtherComponentList`(  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "      DECLARE pmfgCodeID INT;  \n" +
                "      DECLARE vMfgCodeIds VARCHAR(50) DEFAULT '';  \n" +
                "      DECLARE v_mfgNameFormat VARCHAR(10);  \n" +
                "  \n" +
                "	  SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "      SELECT id INTO pmfgCodeID FROM mfgcodemst WHERE iscompany=1  AND isdeleted=0;  \n" +
                "  \n" +
                "      SELECT GROUP_CONCAT(refMfgCodeMstID) INTO vMfgCodeIds  \n" +
                "      FROM supplier_mapping_mst  \n" +
                "      WHERE supplierID  = pmfgCodeID AND isDeleted =0 AND isCustMapping=0;  \n" +
                "  \n" +
                "      #get component having mfg as iscompany and part type other  \n" +
                "      SELECT c.pidcode,c.id,c.mfgPN,rr.name AS rohsName,rr.rohsIcon,c.frequency,c.mfgPNDescription,c.category,c.partType,  \n" +
                "      cp.name AS packagingName,  \n" +
                "      c.packagingId,u.unitName,c.rohsStatusID,mc.mfgCode,mc.mfgName,c.mfgcodeid , pmfgCodeID   fcaCompId , c.partStatus,  \n" +
                "      c.frequencyType, fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, v_mfgNameFormat) mfgCodeName  \n" +
                "      FROM COMPONENT c JOIN rfq_rohsmst rr ON rr.id=c.rohsStatusID  \n" +
                "      LEFT JOIN component_packagingmst cp ON cp.id=c.packagingId  \n" +
                "      LEFT JOIN uoms u ON u.id=c.uom  \n" +
                "      JOIN mfgcodemst mc ON  mc.id=c.mfgcodeid  \n" +
                "      WHERE c.partType=4  \n" +
                "      AND c.isdeleted=0  \n" +
                "      AND (c.mfgcodeid=pmfgCodeID OR FIND_IN_SET(c.mfgcodeid ,vMfgCodeIds))  \n" +
                "      AND c.isGoodPart  = 1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getBlanketPOAssyList` ;  \n" +
                "CREATE PROCEDURE `Sproc_getBlanketPOAssyList`(  \n" +
                "pCustomerID INT,  \n" +
                "pPartID INT,  \n" +
                "pblanketPOID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	         SELECT  \n" +
                "	          c.mfgPN,  \n" +
                "		  c.PIDCode,  \n" +
                "		  c.id partID,  \n" +
                "		  sd.qty,  \n" +
                "		  IFNULL(bp.assignPOQty,0) assignPOQty,  \n" +
                "		  (sd.qty - IFNULL(bp. assignPOQty,0))AS pendingToAssign,  \n" +
                "		  sm.salesOrderNumber,  \n" +
                "		  sm.poNumber,  \n" +
                "		  sm.id AS soID,  \n" +
                "		  sm.poDate,  \n" +
                "		  sm.poRevision,  \n" +
                "		  sm.revision,  \n" +
                "		  sd.price,  \n" +
                "		  sm.poRevisionDate,  \n" +
                "		  sd. quotefrom,  \n" +
                "		  sd.refRFQQtyTurnTimeID,  \n" +
                "		  sd.refAssyQtyTurnTimeID,  \n" +
                "		  sd.refRFQGroupID,  \n" +
                "		   sd.id,  \n" +
                "		   sd.quoteNumber,  \n" +
                "		   sd.assyQtyTurnTimeText,  \n" +
                "		 CONCAT('(',mg.mfgcode,') ',c.mfgPN,' | ',sm.salesOrderNumber,' | ',sm.poNumber) blanketAssy  \n" +
                "	         FROM salesorderdet sd  \n" +
                "	         JOIN COMPONENT c ON c.id=sd.partID AND c.isdeleted=0  \n" +
                "	         JOIN mfgcodemst mg ON mg.id=c.mfgcodeid AND mg.isdeleted=0  \n" +
                "	         JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isdeleted=0  \n" +
                "	         LEFT JOIN (  \n" +
                "	         SELECT  \n" +
                "			SUM(qty) AS assignPOQty,  \n" +
                "			sd.partID compID,sd.refBlanketPOID FROM salesorderdet sd JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isdeleted=0  \n" +
                "			WHERE sm.isBlanketPO=0 AND sd.refBlanketPOID IS NOT NULL AND sm.customerID=pCustomerID AND sd.partID=pPartID AND sd.isdeleted=0 GROUP BY sd.partID,sd.refBlanketPOID  \n" +
                "	         ) bp ON bp.refBlanketPOID=sd.id  \n" +
                "	         WHERE sm.customerID=pCustomerID AND sm.status=1 AND sd.partID=pPartID AND sm.blanketPOOption=2 AND sm.isBlanketPO=1 AND refSODetID IS NULL  \n" +
                "	                AND sd.isdeleted=0 AND (sd.id=IFNULL(pblanketPOID,0) OR (sd.qty - IFNULL(bp. assignPOQty,0))>0);  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 12-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pfilterPOStatus VARCHAR(20)  ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "    IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		     DECLARE v_mfrFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		 SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormat;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
                "       s.salesOrderNumber,  \n" +
                "       s.poNumber,  \n" +
                "       s.poDate,  \n" +
                "       s.customerID,  \n" +
                "       s.contactPersonID,  \n" +
                "       s.billingAddressID,  \n" +
                "       s.shippingAddressID,  \n" +
                "       s.shippingMethodID,  \n" +
                "       s.revision,  \n" +
                "       s.shippingComment,  \n" +
                "       s.termsID,  \n" +
                "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
                "       CASE WHEN s.blanketPOOption=1 THEN 'Use This Blanket PO# for All Releases' WHEN s.blanketPOOption=2 THEN 'Link Future PO(s) to This Blanket PO' WHEN s.blanketPOOption=3 THEN 'Use Blanket PO# and Release#' ELSE '' END blanketPOOptionText,  \n" +
                "       s.blanketPOOption,  \n" +
                "       s.status,  \n" +
                "       s.soDate,  \n" +
                "       s.revisionChangeNote,  \n" +
                "       s.salesCommissionTo,  \n" +
                "       s.intermediateShipmentId,  \n" +
                "       s.freeOnBoardId,  \n" +
                "       s.internalComment as internalCommentSo,  \n" +
                "       s.serialNumber,  \n" +
                "       s.carrierID,  \n" +
                "       s.carrierAccountNumber,  \n" +
                "       s.originalPODate,  \n" +
                "       s.isLegacyPO,  \n" +
                "       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
                "       s.isRmaPO,  \n" +
                "       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
                "       s.poRevision,  \n" +
                "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
                "       s.isBlanketPO,  \n" +
                "        fun_GetFormattedMfgCode(mg.mfgCode,mg.mfgName,\",v_mfrFormat,\") companyName,  \n" +
                "       mg.mfgName,  \n" +
                "       s.poRevisionDate,  \n" +
                "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
                "        s.linkToBlanketPO,  \n" +
                "        CASE WHEN s.linkToBlanketPO=1 THEN 'Yes' ELSE 'No' END linkToBlanketPOText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
                "       fb.name freeOnBoardName,  \n" +
                "       s.`rmaNumber` AS `rmaNumber`,  \n" +
                "	   s.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "	   (CASE WHEN (s.`isDebitedByCustomer` = 1) THEN 'Yes' ELSE 'No' END) AS `debitedByCustText`,  \n" +
                "       s.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "       s.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "		s.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "       (CASE  WHEN (s.`isReworkRequired` = 1) THEN 'Yes'  ELSE 'No'  END) AS `reworkReqText`,  \n" +
                "	   s.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "      ifnull(sodCnt.totalLineCount,0)  totalSOLines,  \n" +
                "       ifnull(sodCnt.completedLineCount,0) totalCompletedSOLines,  \n" +
                "       (case when sodCnt.totalLineCount is null then 0 else  Round((sodCnt.completedLineCount * 100/sodCnt.totalLineCount),2) end)soCompletionPercentage,  \n" +
                "      (case when sodCnt.canceledLineCount = ifnull(sodCnt.totalLineCount,0) then 'Canceled'  \n" +
                "			when (sodCnt.canceledLineCount + sodCnt.completedLineCount) = ifnull(sodCnt.totalLineCount,0)  then 'Completed'  \n" +
                "            else 'In Progress' end) salesOrderDetStatusConvertedValues,  \n" +
                "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
                "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
                "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
                "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
                "		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  \n" +
                "		       FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
                "			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
                "    LEFT JOIN ( select sod.refSalesOrderID as soId ,  \n" +
                "							sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
                "							count(1) totalLineCount,  \n" +
                "                            sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
                "                            From salesorderdet sod where sod.isDeleted = 0  \n" +
                "                            Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = s.id  \n" +
                "			WHERE s.isdeleted=0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "                IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "		END IF;  \n" +
                "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "		END IF;  \n" +
                "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "			IF(psearchposotype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "			IF(psearchextPricetype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "        IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "		ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "		ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "  \n" +
                "			 EXECUTE query2;  \n" +
                "			 DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "  \n" +
                "			 EXECUTE query1;  \n" +
                "		       DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-01-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesordermst` ;  \n" +
                "CREATE TRIGGER `Trg_AU_salesordermst` AFTER UPDATE ON `salesordermst`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "    IF (IFNULL(OLD.blanketPOOption,0)=3 AND IFNULL(NEW.blanketPOOption,0)!=3) OR (IFNULL(OLD.blanketPOOption,0)!=3 AND IFNULL(NEW.blanketPOOption,0)=3) THEN  \n" +
                "    CREATE TEMPORARY TABLE IF NOT EXISTS tempsalesDet  \n" +
                "       SELECT sd.id FROM salesorderdet sd WHERE sd.refSalesOrderID=NEW.id AND NEW.isDeleted=0;  \n" +
                "       IF(IFNULL(OLD.blanketPOOption,0)=3 AND IFNULL(NEW.blanketPOOption,0)!=3)THEN  \n" +
                "		UPDATE salesshippingmst ss SET ss.poReleaseNumber=NULL WHERE ss.sDetID IN (SELECT sd.id FROM tempsalesDet sd) AND ss.isdeleted=0;  \n" +
                "		UPDATE salesorderdet sd SET sd.requestedBPOStartDate=NULL,sd.blanketPOEndDate=NULL WHERE sd.refSalesOrderID=NEW.id AND NEW.isDeleted=0;  \n" +
                "       END IF;  \n" +
                "       IF(IFNULL(OLD.blanketPOOption,0)=2 AND IFNULL(NEW.blanketPOOption,0)!=2)THEN  \n" +
                "		UPDATE salesorderdet sd SET sd.requestedBPOStartDate=NULL,sd.blanketPOEndDate=NULL WHERE sd.refSalesOrderID=NEW.id AND NEW.isDeleted=0;  \n" +
                "       END IF;  \n" +
                "       IF(IFNULL(OLD.blanketPOOption,0)!=3 AND IFNULL(NEW.blanketPOOption,0)=3)THEN  \n" +
                "		UPDATE salesshippingmst ss SET ss.poReleaseNumber=CONCAT(new.poNumber,'-',ss.customerReleaseLine) WHERE ss.sDetID IN (SELECT sd.id FROM tempsalesDet sd) AND ss.isdeleted=0;  \n" +
                "       END IF;  \n" +
                "      DROP TEMPORARY TABLE IF EXISTS tempsalesDet;  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.salesOrderNumber,0) != IFNULL(NEW.salesOrderNumber,0) THEN  \n" +
                "       UPDATE customer_packingslip SET soNumber=NEW.salesOrderNumber,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SALESORDERNUMBER',CAST(OLD.salesOrderNumber AS CHAR),  \n" +
                "       CAST(new.salesOrderNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "    UPDATE customer_packingslip SET poNumber=NEW.poNumber,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'PONUMBER',CAST(OLD.poNumber AS CHAR),  \n" +
                "       CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "    UPDATE customer_packingslip SET poDate=NEW.poDate,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'PODATE',CAST(OLD.poDate AS CHAR),  \n" +
                "       CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.customerID,0) != IFNULL(NEW.customerID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'CUSTOMERID', CAST(OLD.customerID AS CHAR),  \n" +
                "       CAST(new.customerID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'CONTACTPERSONID', CAST(OLD.contactPersonID AS CHAR),  \n" +
                "       CAST(new.contactPersonID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.billingAddressID,0) != IFNULL(NEW.billingAddressID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'BILLINGADDRESSID', CAST(OLD.billingAddressID AS CHAR),  \n" +
                "       CAST(new.billingAddressID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingAddressID ,0) != IFNULL(NEW.shippingAddressID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGADDRESSID', CAST(OLD.shippingAddressID AS CHAR),  \n" +
                "       CAST(new.shippingAddressID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingMethodID ,0) != IFNULL(NEW.shippingMethodID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGMETHODID', CAST(OLD.shippingMethodID AS CHAR),  \n" +
                "       CAST(new.shippingMethodID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REVISION', CAST(OLD.revision AS CHAR),  \n" +
                "       CAST(new.revision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGCOMMENT', CAST(OLD.shippingComment AS CHAR),  \n" +
                "       CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "     IF IFNULL(OLD.internalComment ,0) != IFNULL(NEW.internalComment ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'INTERNALCOMMENT', CAST(OLD.internalComment AS CHAR),  \n" +
                "       CAST(new.internalComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.termsID ,0) != IFNULL(NEW.termsID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'TERMSID', CAST(OLD.termsID AS CHAR),  \n" +
                "       CAST(new.termsID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'STATUS', CAST(OLD.status AS CHAR),  \n" +
                "       CAST(new.status AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.soDate ,0) != IFNULL(NEW.soDate ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SODATE', CAST(OLD.soDate AS CHAR),  \n" +
                "       CAST(new.soDate AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.revisionChangeNote ,0) != IFNULL(NEW.revisionChangeNote ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REVISIONCHANGENOTE', CAST(OLD.revisionChangeNote AS CHAR),  \n" +
                "       CAST(new.revisionChangeNote AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'BLANKETPO', CASE WHEN old.isBlanketPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "      CASE WHEN new.isBlanketPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'POREVISION', CAST(OLD.poRevision AS CHAR),  \n" +
                "      CAST(NEW.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'', CAST(OLD.isDeleted AS CHAR),  \n" +
                "       CAST(new.isDeleted AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isRmaPO ,0) != IFNULL(NEW.isRmaPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'RMAPO', CASE WHEN old.isRmaPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.isRmaPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isLegacyPO ,0) != IFNULL(NEW.isLegacyPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'LEGACYPO', CASE WHEN old.isLegacyPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.isLegacyPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.originalPODate ,0) != IFNULL(NEW.originalPODate ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'ORGPODATE', CAST(DATE_FORMAT(OLD.originalPODate, \"%m/%d/%Y\") AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(new.originalPODate, \"%m/%d/%Y\") AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.rmaNumber ,0) != IFNULL(NEW.rmaNumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'RMANUMBER', CAST(OLD.rmaNumber AS CHAR),  \n" +
                "       CAST(new.rmaNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isDebitedByCustomer ,0) != IFNULL(NEW.isDebitedByCustomer ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'DEBITBYCUST', CASE WHEN OLD.isDebitedByCustomer=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "        CASE WHEN new.isDebitedByCustomer=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.orgPONumber ,0) != IFNULL(NEW.orgPONumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'ORGPONUMBER', CAST(OLD.orgPONumber AS CHAR),  \n" +
                "       CAST(new.orgPONumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isReworkRequired ,0) != IFNULL(NEW.isReworkRequired ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REWORKREQ', CASE WHEN OLD.isReworkRequired=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "        CASE WHEN new.isReworkRequired=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.reworkPONumber ,0) != IFNULL(NEW.reworkPONumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REWORKPONUMBER', CAST(OLD.reworkPONumber AS CHAR),  \n" +
                "       CAST(new.reworkPONumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.blanketPOOption ,0) != IFNULL(NEW.blanketPOOption ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'BLANKETPOOPTION', CASE WHEN OLD.blanketPOOption=1 THEN 'Use This Blanket PO# for All Releases' WHEN OLD.blanketPOOption=2 THEN 'Link Future PO(s) to This Blanket PO' WHEN OLD.blanketPOOption=3 THEN 'Use Blanket PO# and Release#' ELSE '' END,  \n" +
                "       CASE WHEN NEW.blanketPOOption=1 THEN 'Use This Blanket PO# for All Releases' WHEN NEW.blanketPOOption=2 THEN 'Link Future PO(s) to This Blanket PO' WHEN NEW.blanketPOOption=3 THEN 'Use Blanket PO# and Release#' ELSE '' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.linkToBlanketPO ,0) != IFNULL(NEW.linkToBlanketPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'LINKTOBLANKETPO', CASE WHEN old.linkToBlanketPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.linkToBlanketPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-01-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `TRG_BI_salesorderdet` ;  \n" +
                "CREATE TRIGGER `TRG_BI_salesorderdet` BEFORE INSERT ON `salesorderdet`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "              IF(SELECT COUNT(1) FROM salesorderdet WHERE custPOLineNumber=NEW.custPOLineNumber AND isdeleted=0 AND refSalesOrderID=NEW.refSalesOrderID)THEN  \n" +
                "              SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='Duplicate entry';  \n" +
                "  \n" +
                "              END IF;  \n" +
                "              IF(SELECT COUNT(1) FROM salesorderdet WHERE lineID=NEW.lineID AND isdeleted=0 AND refSalesOrderID=NEW.refSalesOrderID)THEN  \n" +
                "              SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='Duplicate entry';  \n" +
                "  \n" +
                "              END IF;  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM salesordermst sm WHERE sm.isDeleted = 0  \n" +
                "		AND sm.id = NEW.refSalesOrderID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM COMPONENT c WHERE c.isDeleted = 0  \n" +
                "		AND c.id = NEW.partID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-01-2022 *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report` ;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`custAssyPN` AS `custAssyPN`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`rmaNumber` AS `rmaNumber`,  \n" +
                "        `a`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "        `a`.`debitedByCustText` AS `debitedByCustText`,  \n" +
                "        `a`.`rmaOrgPONumber` AS `rmaOrgPONumber`,  \n" +
                "        `a`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "        `a`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "        `a`.`reworkReqText` AS `reworkReqText`,  \n" +
                "        `a`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "        `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "        `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "        `a`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "        `a`.`blanketPOOptionText` AS `blanketPOOptionText`,  \n" +
                "        `a`.`requestedBPOStartDate` AS `requestedBPOStartDate`,  \n" +
                "        `a`.`blanketPOEndDate` AS `blanketPOEndDate`,  \n" +
                "        `a`.`linkToBlanketPO` AS `linkToBlanketPO`,  \n" +
                "        `a`.`linkToBlanketPOText` AS `linkToBlanketPOText`,  \n" +
                "        `a`.`mfgName` AS `mfgName`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                `sm`.`rmaNumber` AS `rmaNumber`,  \n" +
                "                `sm`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isDebitedByCustomer` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `debitedByCustText`,  \n" +
                "                `sm`.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "                `sm`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "                `sm`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isReworkRequired` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `reworkReqText`,  \n" +
                "                `sm`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                `sm`.`createdAt` AS `createdDate`,  \n" +
                "                `sm`.`updatedAt` AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                  `co`.`custAssyPN` AS `custAssyPN`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`mfgName` AS `mfgName`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                `a`.`requestedBPOStartDate` AS `requestedBPOStartDate`,  \n" +
                "                `a`.`blanketPOEndDate` AS `blanketPOEndDate`,  \n" +
                "                `sm`.`linkToBlanketPO` AS `linkToBlanketPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`linkToBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `linkToBlanketPOText`,  \n" +
                "                IFNULL((CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN `sqt`.`BPOShippedQty`  \n" +
                "                    ELSE `sq`.`ShippedQty`  \n" +
                "                END), 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "                `sm`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 1) THEN 'Use This Blanket PO# for All Releases'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN 'Link Future PO(s) to This Blanket PO'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 3) THEN 'Use Blanket PO# and Release#'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `blanketPOOptionText`  \n" +
                "        FROM  \n" +
                "            (((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            IFNULL(SUM(`sbt`.`ShippedQty`), 0) AS `BPOShippedQty`,  \n" +
                "                `sbt`.`refBlanketPOID` AS `blanketPOSoDetID`  \n" +
                "        FROM  \n" +
                "            (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                `sdd`.`refBlanketPOID` AS `refBlanketPOID`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            ((`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        JOIN `salesorderdet` `sdd` ON (((`sdd`.`id` = `cpd`.`refSalesorderDetid`)  \n" +
                "            AND (`sdd`.`isDeleted` = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid` , `sdd`.`refBlanketPOID`) `sbt`  \n" +
                "        GROUP BY `sbt`.`refBlanketPOID`) `sqt` ON ((`sqt`.`blanketPOSoDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refBlanketPOID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refBlanketPOID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "         GROUP BY `s`.`salesOrderDetID` , `s`.`refAssyId`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** Add Script Version -> 12-01-2022 *********************************** */
                /* **************************** Add Script Version -> 12-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5801,'2.00','V1',' BPO Changes -CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5801:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 12-01-2022 **************************** */
                "UPDATE systemconfigrations sys SET sys.key = 'PersonnelNameFormat', sys.displayName = 'Personnel Name Format',  \n" +
                "                sys.description = 'Personnel Name format which we use and display personnel name globally with defined format.'  \n" +
                "        WHERE sys.key = 'EmployeeNameFormat';  \n" +
                /* **************************** Add Script Version -> 12-01-2022 **************************** */
                "DROP function IF EXISTS `fun_getEmployeeDisplayFormat`;  \n" +
                "CREATE FUNCTION `fun_getEmployeeDisplayFormat`() RETURNS int  \n" +
                "BEGIN  \n" +
                "DECLARE vFormatValue INT;  \n" +
                "	SELECT `values` INTO vFormatValue FROM systemconfigrations WHERE `key`='PersonnelNameFormat';  \n" +
                "RETURN vFormatValue;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 12-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5802,'2.00','V1','Bug 40270: Showing incorrect data for Kit Allocation % and Sub assemblies on Kit List - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5802:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_bin_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_bin_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pWarehouseID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchBinString VARCHAR(1000),  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchClusterWHID INT,  \n" +
                "	pKitSalesOrderDetID INT,  \n" +
                "	pKitAssyID INT,  \n" +
                "	pDeptID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_GlobalSearchUIDBinId VARCHAR(10000);  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		SELECT  GROUP_CONCAT(c.binID)  \n" +
                "		INTO 	v_GlobalSearchUIDBinId  \n" +
                "		FROM 	component_sid_stock c  \n" +
                "		WHERE 	isdeleted = 0 and  \n" +
                "				uid LIKE CONCAT(\"%\", pGlobalSearchUIDString ,\"%\")  ;  \n" +
                "  END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitBinIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempKitBinIDs (  \n" +
                "		binID INT  \n" +
                "	);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitBinDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempKitBinDet (  \n" +
                "		binID INT,  \n" +
                "		uidCount INT,  \n" +
                "		PIDCount INT  \n" +
                "	);  \n" +
                "  \n" +
                "	SET @vWhere = \"\";  \n" +
                "	SET @vUIDCountWhere = \"\";  \n" +
                "	SET @vInnerJoinQuery=\"\";  \n" +
                "  \n" +
                "	IF (pGlobalSearchBinString IS NOT NULL ) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND `Name` LIKE '%\", pGlobalSearchBinString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  	IF ( pSearchBinString IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND `Name` LIKE '%\", pSearchBinString ,\"%' \");  \n" +
                "	END IF;  \n" +
                "	IF (v_GlobalSearchUIDBinId IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND FIND_IN_SET(b.id, '\", v_GlobalSearchUIDBinId ,\"')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
                "  \n" +
                "		INSERT INTO tempKitBinIDs  \n" +
                "		SELECT DISTINCT csd.binID  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		INNER JOIN component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "		INNER JOIN binmst b ON b.id = csd.binID  \n" +
                "		INNER JOIN warehousemst w ON w.id = b.warehouseID  \n" +
                "		WHERE 	k.status = 'A'  \n" +
                "				AND k.refSalesOrderDetID = pKitSalesOrderDetID  \n" +
                "				AND k.assyID = pKitAssyID  \n" +
                "				AND w.parentWHID = IFNULL(pDeptID, w.parentWHID)  \n" +
                "				AND csd.isDeleted = 0;  \n" +
                "  \n" +
                "		-- SET @vWhere = CONCAT(@vWhere, \" AND b.id IN (SELECT binID FROM tempKitBinIDs)\");  \n" +
                "		SET @vInnerJoinQuery = \"inner join kit_allocation k on csd.id = k.refUIDId and k.status = 'A'\";  \n" +
                "		SET @vUIDCountWhere = CONCAT(@vUIDCountWhere, \" AND csd.binID IN (SELECT binID FROM tempKitBinIDs)\");  \n" +
                "		SET @vUIDCountWhere = CONCAT(@vUIDCountWhere, \" and k.refSalesOrderDetID = \",pKitSalesOrderDetID,\" AND k.assyID = \",pKitAssyID);  \n" +
                "  \n" +
                "		-- Store bin's UMID and PID Count  \n" +
                "		INSERT INTO tempKitBinDet  \n" +
                "		SELECT 	bin.binID,  \n" +
                "			SUM(bin.uidCount) uidCount,  \n" +
                "			COUNT(1) PIDCount  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		csd.binID, csd.refcompid, COUNT(1) uidCount  \n" +
                "				FROM 		component_sid_stock  csd  \n" +
                "				WHERE 		csd.isDeleted = 0  \n" +
                "							AND csd.binID IN (SELECT binID FROM tempKitBinIDs)  \n" +
                "				GROUP BY 	csd.binID, csd.refcompid  \n" +
                "			) BIN  \n" +
                "		GROUP BY bin.binID  \n" +
                "		ORDER BY bin.binid;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWarehouseID IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND b.warehouseID = \", pWarehouseID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchClusterWHID IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND b.warehouseID = \", pGlobalSearchClusterWHID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchString IS NOT NULL) THEN  \n" +
                "		SET @vWhere = CONCAT(@vWhere, \" AND  b.name like '%\", pSearchString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"  \n" +
                "		SELECT 	b.id,  \n" +
                "			b.name,  \n" +
                "			b.isPermanentBin,  \n" +
                "			b.warehouseID,  \n" +
                "			cast(NULL as char(50)) warehouseName,  \n" +
                "			0 departmentID,  \n" +
                "			cast(NULL as char(50)) deptName,  \n" +
                "			0 uidCount,  \n" +
                "			0 PIDCount,  \n" +
                "			0 mismatchUMID,  \n" +
                "			0 mismatchPID,  \n" +
                "			CAST(NULL AS char(50)) warehouseType,  \n" +
                "			CAST(NULL AS char(15000)) kitName,  \n" +
                "			0 numberTotalKit,  \n" +
                "			0 unallocatedUMID  \n" +
                "			-- b.updatedAt  \n" +
                "		FROM 	binmst b  \n" +
                "		WHERE 	b.isDeleted = 0  \n" +
                "		AND 	b.isActive = 1  \n" +
                "	\", @vWhere ,\" ORDER BY updatedAt DESC \");  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@SQLStatement1,\" ) c \");  \n" +
                "	PREPARE queryCount FROM @SQLStatementCount;  \n" +
                "	EXECUTE queryCount;  \n" +
                "	DEALLOCATE PREPARE queryCount;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempBinDet;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS \", @SQLStatement1, \" \", rowNumWhere);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "   EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempActiveBinIDs;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS  \n" +
                "		SELECT  csd.binID,  \n" +
                "			csd.refcompid,  \n" +
                "			sum(uidCount) uidCount ,  \n" +
                "            count(1) PIDCount  \n" +
                "		FROM 	(  \n" +
                "				SELECT  csd.binID,  \n" +
                "					csd.refcompid , count(1) uidcount  \n" +
                "				FROM 	component_sid_stock  csd \",@vInnerJoinQuery,\"  \n" +
                "				WHERE 	csd.isDeleted = 0  \n" +
                "						AND csd.isinStk = 1  \n" +
                "			\", @vUIDCountWhere,\"  \n" +
                "             group by csd.binID, csd.refcompid  \n" +
                "		) as csd group by csd.binID, csd.refcompid \");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "/* Will use direct tempActiveBinIDs no need to create this temp table.  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempBinCounts;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinCounts AS  \n" +
                "	SELECT 		b.binID,  \n" +
                "			SUM(b.uidCount) uidCount,  \n" +
                "			COUNT(1) PIDCount  \n" +
                "	FROM 		tempActiveBinIDs b  \n" +
                "	GROUP BY 	b.binID  \n" +
                "	ORDER BY 	b.binid;    */  \n" +
                "  \n" +
                "  \n" +
                "	-- Update UMID Count  / PID Count  \n" +
                "	UPDATE tempBinDet t,  (select binid ,sum(c.uidcount) uidcount, sum(c.pidcount) pidcount from tempActiveBinIDs c group by binid ) c  \n" +
                "	SET t.uidCount = c.uidCount ,  \n" +
                "    t.PIDCount = c.PIDCount  \n" +
                "	WHERE t.id = c.binID;  \n" +
                "  \n" +
                "	-- Update mismatch UMID Count  \n" +
                "	UPDATE tempBinDet t, tempKitBinDet k  \n" +
                "	SET t.mismatchUMID =  (k.uidCount - t.uidCount)  ,  \n" +
                "    t.mismatchPID =  (k.PIDCount - t.PIDCount)  \n" +
                "	WHERE t.id = k.binID;  \n" +
                "  \n" +
                "	-- SET warehouse name  \n" +
                "	UPDATE 	tempBinDet t, warehousemst w  \n" +
                "	SET   	t.warehouseName = w.Name,  \n" +
                "		t.departmentID = w.parentWHID,  \n" +
                "		t.warehouseType = w.warehouseType  \n" +
                "	WHERE	t.warehouseID = w.id;  \n" +
                "  \n" +
                "	-- SET department name  \n" +
                "	UPDATE 	tempBinDet t, warehousemst w  \n" +
                "	SET   	t.deptName = w.Name  \n" +
                "	WHERE	t.departmentID = w.id;  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t  \n" +
                "	SET   	t.kitName = (  \n" +
                "					SELECT 	GROUP_CONCAT(DISTINCT CONCAT(refSalesOrderDetID, '###', assyID, '###', TRIM(fun_getKitNameBySalesOrderSetIDAndAssyID(refSalesOrderDetID, assyID))) SEPARATOR '@@@')  \n" +
                "					FROM 	(  \n" +
                "							SELECT 	refSalesOrderDetID, assyID  \n" +
                "							FROM 	kit_allocation  \n" +
                "							WHERE 	`status` = 'A'  \n" +
                "									AND refUIDId IN (  \n" +
                "										SELECT 	id  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	isdeleted =0  \n" +
                "												AND binID = t.id  \n" +
                "									)  \n" +
                "									AND (CASE WHEN pKitSalesOrderDetID IS NOT NULL THEN refSalesOrderDetID != pKitSalesOrderDetID ELSE 1 = 1 END)  \n" +
                "									AND (CASE WHEN pKitAssyID IS NOT NULL THEN assyID != pKitAssyID ELSE 1 = 1 END)  \n" +
                "							GROUP BY 	refSalesOrderDetID, AssyID  \n" +
                "						) a  \n" +
                "				);  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t  \n" +
                "	SET   	t.numberTotalKit = (  \n" +
                "					SELECT 	COUNT(1)  \n" +
                "					FROM 	(  \n" +
                "							SELECT 	refSalesOrderDetID, assyID  \n" +
                "							FROM 	kit_allocation  \n" +
                "							WHERE 	`status` = 'A'  \n" +
                "									AND refUIDId IN (  \n" +
                "										SELECT 	id  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	isdeleted = 0  \n" +
                "												AND binID = t.id  \n" +
                "									)  \n" +
                "									AND (CASE WHEN pKitSalesOrderDetID IS NOT NULL THEN refSalesOrderDetID != pKitSalesOrderDetID ELSE 1 = 1 END)  \n" +
                "									AND (CASE WHEN pKitAssyID IS NOT NULL THEN assyID != pKitAssyID ELSE 1 = 1 END)  \n" +
                "							GROUP BY 	refSalesOrderDetID, AssyID  \n" +
                "						) a  \n" +
                "				);  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t  \n" +
                "	SET   	t.unallocatedUMID = (  \n" +
                "					SELECT 	COUNT(1)  \n" +
                "					FROM 	(  \n" +
                "							SELECT 	id  \n" +
                "							FROM 	component_sid_stock c  \n" +
                "							WHERE	isdeleted = 0  \n" +
                "									AND binID = t.id  \n" +
                "									AND NOT EXISTS (  \n" +
                "										SELECT 	refUIDId  \n" +
                "										FROM 	kit_allocation k  \n" +
                "										WHERE	`status` = 'A'  \n" +
                "												AND c.id = k.refUIDId  \n" +
                "									)  \n" +
                "						) a  \n" +
                "				);  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempClusterBin;  \n" +
                "	CREATE TEMPORARY TABLE tempClusterBin  \n" +
                "	SELECT 	*,  \n" +
                "		1 binCount,  \n" +
                "		FALSE isCluster  \n" +
                "	FROM tempBinDet  \n" +
                "	WHERE isPermanentBin = 0;  \n" +
                "  \n" +
                "	INSERT INTO tempClusterBin  \n" +
                "	SELECT  0,  \n" +
                "		warehouseName,  \n" +
                "		isPermanentBin,  \n" +
                "		warehouseID,  \n" +
                "		warehouseName,  \n" +
                "		departmentID,  \n" +
                "		deptName,  \n" +
                "		SUM(uidCount),  \n" +
                "		SUM(PIDCount),  \n" +
                "		SUM(mismatchUMID),  \n" +
                "		SUM(mismatchPID),  \n" +
                "		warehouseType,  \n" +
                "		group_concat(kitName) kitName,  \n" +
                "		sum(numberTotalKit) numberTotalKit,  \n" +
                "		sum(unallocatedUMID) unallocatedUMID,  \n" +
                "		COUNT(1) binCount,  \n" +
                "		TRUE isCluster  \n" +
                "		-- updatedAt  \n" +
                "	FROM 	tempBinDet  \n" +
                "	WHERE 	isPermanentBin = 1  \n" +
                "	GROUP BY warehouseName, isPermanentBin, warehouseID, departmentID, deptName, isCluster, warehouseType;  \n" +
                "  \n" +
                "	-- Update UMID and PID count for bin cluster  \n" +
                "	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempBinClusterNotInKit;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempBinClusterNotInKit AS  \n" +
                "		SELECT 	csd.warehouseID,  \n" +
                "			SUM(uidCount) uidCount,  \n" +
                "			COUNT(1) PIDCount  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		csd.binID,  \n" +
                "						w.id  warehouseID,  \n" +
                "						csd.refcompid,  \n" +
                "						COUNT(1) uidCount  \n" +
                "				FROM 		component_sid_stock  csd  \n" +
                "				INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "				INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "				WHERE 		csd.isDeleted = 0  \n" +
                "							AND binid NOT IN (SELECT id FROM tempBinDet WHERE isPermanentBin = 1)  \n" +
                "							AND w.id IN (SELECT warehouseID FROM tempClusterBin WHERE isPermanentBin = 1)  \n" +
                "				GROUP BY 	csd.binID, w.id, csd.refcompid  \n" +
                "			) csd  \n" +
                "		GROUP BY csd.warehouseID;  \n" +
                "  \n" +
                "		-- Update mismatch UMID Count  \n" +
                "		UPDATE tempClusterBin t, tempBinClusterNotInKit k  \n" +
                "		SET t.mismatchUMID =  (t.mismatchUMID + k.uidCount)  \n" +
                "		WHERE t.warehouseID = k.warehouseID;  \n" +
                "  \n" +
                "		-- Update mismatch PID Count  \n" +
                "		UPDATE tempClusterBin t, tempBinClusterNotInKit k  \n" +
                "		SET t.mismatchPID =  (t.mismatchPID + k.PIDCount)  \n" +
                "		WHERE t.warehouseID = k.warehouseID;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT 		t.*,  \n" +
                "			COUNT(v.PartId) umidPendingParts  \n" +
                "	FROM 		tempClusterBin t  \n" +
                "	LEFT JOIN 	vu_umid_creation_pending v ON v.binID = t.id AND v.BalanceQty > 0  \n" +
                "	GROUP BY 	t.id, t.name, t.isPermanentBin, t.warehouseID, t.warehouseName, t.departmentID, t.deptName, t.PIDCount, t.uidCount, t.mismatchPID, t.mismatchUMID, t.warehouseType, t.kitName, t.numberTotalKit, t.unallocatedUMID, t.binCount, t.isCluster;  \n" +
                "	-- order by 	t.updatedAt desc;  \n" +
                "END;  \n" +
                "DROP procedure IF EXISTS `Sproc_retrive_warehouse_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_warehouse_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pGlobalSearchWHString VARCHAR(1000),  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pParamSearchWHId INT,  \n" +
                "	pSearchWHString VARCHAR(1000),  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchClusterWHID INT,  \n" +
                "	pRefSalesOrderDetID INT,  \n" +
                "	pAssyId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_CurrentKit VARCHAR(1000);  \n" +
                "	DECLARE v_GlobalSearchBinWHId VARCHAR(10000);  \n" +
                "  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "	IF(pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "  \n" +
                "		SELECT  GROUP_CONCAT(b.WarehouseID)  \n" +
                "		INTO 	v_GlobalSearchBinWHId  \n" +
                "		FROM 	binmst b WHERE b.id IN (  \n" +
                "			SELECT 	c.binID  \n" +
                "			FROM 	component_sid_stock c  \n" +
                "			WHERE 	isdeleted  = 0  \n" +
                "			AND uid LIKE CONCAT(\"%\", pGlobalSearchUIDString ,\"%\")  \n" +
                "            group by c.binID  \n" +
                "			);  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pGlobalSearchBinString IS NOT NULL) THEN  \n" +
                "		SELECT GROUP_CONCAT(b.WarehouseID) INTO v_GlobalSearchBinWHId FROM binmst b WHERE  `Name` LIKE CONCAT(\"%\", pGlobalSearchBinString ,\"%\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  \"  \n" +
                "			SELECT 	w.id,  \n" +
                "				w.name,  \n" +
                "				w.isPermanentWH,  \n" +
                "				w.uniqueCartID,  \n" +
                "				w.parentWHID,  \n" +
                "				pw.parentWHType,  \n" +
                "				pw.name deptName,  \n" +
                "				0 binCount,  \n" +
                "				0 uidCount,  \n" +
                "				0 totalEmptyBin,  \n" +
                "				0 anotherKitStock,  \n" +
                "				0 unallocatekitStock,  \n" +
                "				0 numberTotalKit,  \n" +
                "				0 unallocatedUMID,  \n" +
                "				w.allMovableBin,  \n" +
                "				w.warehouseType,  \n" +
                "				fun_getWarehouseTypeByKey(w.warehouseType) warehouseTypeValue,  \n" +
                "				CAST(NULL AS CHAR(10000)) kitName,  \n" +
                "				CAST(NULL AS CHAR(15000)) emptyBinName,  \n" +
                "				CAST(w.updatedAt AS DATETIME) updatedAt  \n" +
                "			FROM 	warehousemst w,  warehousemst pw  \n" +
                "			WHERE 	w.isDepartment != 1  and w.parentWHID = pw.id  \n" +
                "					AND 	w.isDeleted = 0  \n" +
                "					AND 	w.isActive = 1  \n" +
                "					AND	w.id > 0  \n" +
                "			\";  \n" +
                "  \n" +
                "	IF (pRefSalesOrderDetID IS NOT NULL AND pAssyId IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id IN (  \n" +
                "									SELECT 	 b.WarehouseID  \n" +
                "									FROM 	component_sid_stock a inner join binmst b on  a.binid = b.id  \n" +
                "									WHERE 	a.isdeleted = 0  \n" +
                "										AND a.id IN (  \n" +
                "											SELECT 	refUIDId  \n" +
                "											FROM 	kit_allocation  \n" +
                "											WHERE 	`status` = 'A'  \n" +
                "													AND refSalesOrderDetID = \", pRefSalesOrderDetID ,\"  \n" +
                "													AND assyID = \", pAssyId ,\"  \n" +
                "										)  \n" +
                "                                      group by b.WarehouseID  \n" +
                "									)\");  \n" +
                "	END IF;  \n" +
                "    iF pGlobalSearchWHString IS NOT NULL  then  \n" +
                "		SET @vSQLMainQuery =CONCAT(@vSQLMainQuery, \"and  w.`Name` LIKE '%\", pGlobalSearchWHString ,\"%' \");  \n" +
                "	end if;  \n" +
                "	if pSearchWHString IS NOT NULL then  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"   AND w.Name LIKE '%\", pSearchWHString ,\"%' \");  \n" +
                "	end if;  \n" +
                "  \n" +
                "	IF(v_GlobalSearchBinWHId IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND FIND_IN_SET(w.id, '\", v_GlobalSearchBinWHId ,\"')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pGlobalSearchClusterWHID IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id = \",pGlobalSearchClusterWHID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pDeptID IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.parentWHID = \",pDeptID);  \n" +
                "	END IF;  \n" +
                "	IF(pSearchString IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND w.name like '%\", pSearchString ,\"%' \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (v_GlobalSearchBinWHId IS NULL AND (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL)) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id = NULL\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pParamSearchWHId IS NOT NULL) THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" AND  w.id = \",pParamSearchWHId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "   SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \" ORDER BY w.updatedAt DESC \");  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempWarehouseDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempWarehouseDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	-- select  @vSQLMainQuery;  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	/* old logic  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempBinDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS  \n" +
                "	SELECT 	b.id, b.name, 0 uidCount, b.warehouseID  \n" +
                "	FROM 	binmst b  \n" +
                "	WHERE 	b.warehouseID IN (SELECT w.id FROM tempWarehouseDet w)  \n" +
                "		AND 	b.isActive = 1  \n" +
                "		AND 	b.isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempActiveBinIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveBinIDs AS  \n" +
                "	SELECT 	 binID, COUNT(1) uidCount  \n" +
                "	FROM 	component_sid_stock  \n" +
                "	WHERE 	binID IN  (SELECT b.id FROM tempBinDet b)  \n" +
                "		AND		isDeleted = 0  \n" +
                "		AND		isinStk = 1  \n" +
                "	GROUP BY binID;  \n" +
                "  \n" +
                "	UPDATE 	tempBinDet t,  tempActiveBinIDs c  \n" +
                "	SET    	t.uidCount = c.uidCount  \n" +
                "	WHERE   t.id = c.binID;    */  \n" +
                "    /*new logic */  \n" +
                "      DROP TEMPORARY TABLE IF EXISTS tempBinDet;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBinDet AS  \n" +
                "    SELECT 	b.id, b.name,  b.warehouseID   , ifnull(c.uidCount,0) uidCount , ifnull(d.isNonUmidStockbin,0) isNonUmidStockbin  \n" +
                "	FROM 	binmst b Left join (select binid , count(1) uidcount from   component_sid_stock where isdeleted = 0 and isinstk  = 1 group by binid)  c on b.id =    c.binid  \n" +
                "    Left join (select binid ,1 isNonUmidStockbin from vu_umid_creation_pending a where balanceqty > 0 group by binid) d on b.id = d.binid  \n" +
                "	WHERE 	b.warehouseID IN (SELECT w.id FROM tempWarehouseDet w)  \n" +
                "		AND 	b.isActive = 1  \n" +
                "		AND 	b.isDeleted = 0 ;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempActiveWarehouseIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempActiveWarehouseIDs AS  \n" +
                "	SELECT 	 warehouseID, COUNT(1) binCount, SUM(uidCount) uidCount  \n" +
                "	FROM 	tempBinDet  \n" +
                "	GROUP BY warehouseID;  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t,   tempActiveWarehouseIDs c  \n" +
                "	SET   	t.binCount = c.binCount,  \n" +
                "			t.uidCount = c.uidCount  \n" +
                "	WHERE  	t.id = c.warehouseID;  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.totalEmptyBin = (SELECT COUNT(1) FROM tempBinDet tb WHERE uidCount = 0 and isNonUmidStockbin = 0 AND tb.warehouseID = t.id);  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.emptyBinName = (SELECT GROUP_CONCAT(`name`) FROM tempBinDet tb WHERE uidCount = 0 AND tb.warehouseID = t.id);  \n" +
                "  \n" +
                "	-- SELECT TRIM(fun_getKitNameBySalesOrderSetIDAndAssyID(pRefSalesOrderDetID, pAssyId)) INTO v_CurrentKit;  \n" +
                "  \n" +
                "	/* - Old query and wrong comparision on kit  \n" +
                "    UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.anotherKitStock = (SELECT COUNT(1)  \n" +
                "				FROM 	(  \n" +
                "						SELECT 	*  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.binID , GROUP_CONCAT(DISTINCT a.allocatedToKit) allocatedToKit, COUNT(DISTINCT a.allocatedToKit) kitCount  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	id, binID, fun_getAllocatedKitsNameByID(id, 'A') allocatedToKit  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "												AND isDeleted = 0  \n" +
                "												AND isinStk = 1  \n" +
                "									) a  \n" +
                "								WHERE 	a.allocatedToKit IS NOT NULL  \n" +
                "								GROUP BY a.binID  \n" +
                "							) b  \n" +
                "						WHERE b.allocatedToKit LIKE CONCAT('%', v_CurrentKit, '%')  \n" +
                "							AND kitCount > 1  \n" +
                "					) c  \n" +
                "				);  \n" +
                "  */  \n" +
                "  /*new query */  \n" +
                "   UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.anotherKitStock = (select count(1)  \n" +
                "									from (  \n" +
                "											select binID,concat(',',GROUP_CONCAT(DISTINCT a.allocatedToKit),',') allocatedToKit ,count(DISTINCT a.allocatedToKit) kitCount  \n" +
                "											from (SELECT	cs.id, binID,  ka.allocatedToKit  \n" +
                "													FROM 	component_sid_stock cs  \n" +
                "															Left join (select refuidid, GROUP_CONCAT(refsalesorderdetid) allocatedToKit  from kit_allocation ka where ka.status = 'A'  group by refuidid) ka  \n" +
                "															on cs.id = ka.refuidid  \n" +
                "													WHERE 	 cs.binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)   and isDeleted = 0 AND isinStk = 1  \n" +
                "													) a  \n" +
                "											WHERE 	 a.allocatedToKit IS NOT NULL  \n" +
                "											group by a.binID  \n" +
                "											having   count(DISTINCT a.allocatedToKit) > 1  and  \n" +
                "													concat(',',GROUP_CONCAT(DISTINCT a.allocatedToKit),',') like CONCAT('%,', pRefSalesOrderDetID, ',%')  \n" +
                "										)  a  \n" +
                "								);  \n" +
                " /*old query and its wrong as currentkit and select query kit not match in any case  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.unallocatekitStock = (SELECT COUNT(1)  \n" +
                "					FROM 	(  \n" +
                "						SELECT 	*  \n" +
                "						FROM 	(  \n" +
                "								SELECT 	a.binID, GROUP_CONCAT(DISTINCT a.allocatedToKit) allocatedToKit  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	id, binID, fun_getAllocatedKitsNameByID(id, 'A') allocatedToKit  \n" +
                "										FROM 	component_sid_stock  \n" +
                "										WHERE 	binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "												AND isDeleted = 0  \n" +
                "												AND isinStk = 1  \n" +
                "									) a  \n" +
                "								WHERE 	a.allocatedToKit IS NOT NULL  \n" +
                "								GROUP BY a.binID  \n" +
                "							) b  \n" +
                "						WHERE b.allocatedToKit NOT LIKE CONCAT('%', v_CurrentKit, '%')  \n" +
                "					) c  \n" +
                "				);   */  \n" +
                "/*new query */  \n" +
                "  UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.unallocatekitStock = (select count(1)  \n" +
                "									from (  \n" +
                "											select binID,concat(',',GROUP_CONCAT(DISTINCT a.allocatedToKit),',') allocatedToKit ,count(DISTINCT a.allocatedToKit) kitCount  \n" +
                "											from (SELECT	cs.id, binID,  ka.allocatedToKit  \n" +
                "													FROM 	component_sid_stock cs  \n" +
                "															Left join (select refuidid, GROUP_CONCAT(refsalesorderdetid) allocatedToKit  from kit_allocation ka where ka.status = 'A'  group by refuidid) ka  \n" +
                "															on cs.id = ka.refuidid  \n" +
                "													WHERE 	 cs.binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)   and isDeleted = 0 AND isinStk = 1  \n" +
                "													) a  \n" +
                "											WHERE 	 a.allocatedToKit IS NOT NULL  \n" +
                "											group by a.binID  \n" +
                "											having   count(DISTINCT a.allocatedToKit) > 1  and  \n" +
                "													concat(',',GROUP_CONCAT(DISTINCT a.allocatedToKit),',') not like CONCAT('%,', pRefSalesOrderDetID, ',%')  \n" +
                "										)  a  \n" +
                "								);  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.kitName = (  \n" +
                "			SELECT 	GROUP_CONCAT(DISTINCT CONCAT(refSalesOrderDetID, '###', assyID, '###', fun_getAllocatedKitsNameByID(refUIDId, 'A')) SEPARATOR '@@@') allocatedToKit  \n" +
                "			FROM 	kit_allocation  \n" +
                "			WHERE	`status` = 'A'  \n" +
                "					AND refUIDId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	component_sid_stock  \n" +
                "						WHERE	isdeleted = 0  \n" +
                "								AND binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "					)  \n" +
                "					AND (CASE WHEN pRefSalesOrderDetID IS NOT NULL THEN refSalesOrderDetID != pRefSalesOrderDetID ELSE 1=1 END)  \n" +
                "					AND (CASE WHEN pAssyId IS NOT NULL THEN assyID != pAssyId ELSE 1=1 END)  \n" +
                "			);  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.numberTotalKit = (  \n" +
                "			SELECT 	COUNT(1)  \n" +
                "			FROM 	(  \n" +
                "					SELECT   refSalesOrderDetID, assyID  \n" +
                "					FROM 	kit_allocation  \n" +
                "					WHERE	`status` = 'A'  \n" +
                "							AND refUIDId IN (  \n" +
                "								SELECT 	id  \n" +
                "								FROM 	component_sid_stock  \n" +
                "								WHERE	isdeleted = 0  \n" +
                "										AND binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "							)  \n" +
                "					  GROUP BY refSalesOrderDetID, assyID  \n" +
                "				) a  \n" +
                "			);  \n" +
                "  \n" +
                "	UPDATE 	tempWarehouseDet t  \n" +
                "	SET 	t.unallocatedUMID = (  \n" +
                "			SELECT 	COUNT(1)  \n" +
                "			FROM 	(  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock c  \n" +
                "					WHERE	isdeleted = 0  \n" +
                "							AND binID IN (SELECT b.id FROM tempBinDet b WHERE b.warehouseID = t.id)  \n" +
                "							AND NOT EXISTS (  \n" +
                "								SELECT 	refUIDId  \n" +
                "								FROM 	kit_allocation k  \n" +
                "								WHERE	`status` = 'A'  \n" +
                "										AND c.id = k.refUIDId  \n" +
                "							)  \n" +
                "				) a  \n" +
                "			);  \n" +
                "  \n" +
                "	SELECT 	t.*,  \n" +
                "		a.partCount umidPendingParts  \n" +
                "	FROM tempWarehouseDet t  \n" +
                "	LEFT JOIN (  \n" +
                "					SELECT b.warehouseID, COUNT(v.PartId) partCount  \n" +
                "					FROM vu_umid_creation_pending v  \n" +
                "					INNER JOIN binmst b ON b.id = v.binID  \n" +
                "					WHERE BalanceQty > 0  \n" +
                "					GROUP BY b.warehouseID  \n" +
                "				) AS a ON a.warehouseID = t.id  \n" +
                "	-- GROUP BY  t.id  \n" +
                "	ORDER BY  t.updatedAt DESC;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5803,'2.00','V1',' Fix bug 40216 Xfer bulk Material related issues (Check list) Point-DP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5803:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-01-2022*********************************** */
                "alter table customer_packingslip add billingContactPersonID int ;  \n" +
                "alter table customer_packingslip add billingContactPerson varchar(1000);  \n" +
                "  \n" +
                "alter table customer_packingslip add shippingContactPersonID	INT;  \n" +
                "alter table customer_packingslip add shippingContactPerson varchar(1000);  \n" +
                "  \n" +
                "alter table customer_packingslip add intermediateContactPersonID INT;  \n" +
                "alter table customer_packingslip add intermediateContactPerson varchar(1000);  \n" +
                "  \n" +
                "alter table customer_packingslip modify billingAddress varchar(1000);  \n" +
                "alter table customer_packingslip modify shippingAddress varchar(1000);  \n" +
                "alter table customer_packingslip modify intermediateAddress varchar(1000);  \n" +
                "  \n" +
                "ALTER TABLE customer_packingslip ADD CONSTRAINT `FK_customer_packingslip_billToContactPersId`  \n" +
                "  FOREIGN KEY (`billingContactPersonID`)  REFERENCES contactperson(`personId`);  \n" +
                "  \n" +
                "ALTER TABLE customer_packingslip ADD CONSTRAINT `FK_customer_packingslip_shipToContactPersId`  \n" +
                "  FOREIGN KEY (`shippingContactPersonID`)  REFERENCES contactperson(`personId`);  \n" +
                "  \n" +
                "ALTER TABLE customer_packingslip ADD CONSTRAINT `FK_customer_packingslip_intermediateToContactPersId`  \n" +
                "  FOREIGN KEY (`intermediateContactPersonID`)  REFERENCES contactperson(`personId`);  \n" +
                /* **************************** Add Script Version -> 13-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5804,'2.00','V1','Add Address Contact Person field in customer_packingslip  table- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 5804:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-01-2022*********************************** */
                "DROP FUNCTION IF EXISTS fun_getAddressbyID;  \n" +
                "CREATE FUNCTION `fun_getAddressbyID`(  \n" +
                "	pAddressID INT  \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pAddress VARCHAR(2000);  \n" +
                "	SELECT CONCAT(ca.street1,',',ifnull(ca.street2,''),',',ifnull(ca.street3,''),',',ca.city,',',ca.state,',',c.countryName,'-',ca.postcode) INTO pAddress  \n" +
                "    FROM customer_addresses ca  \n" +
                "    LEFT JOIN countrymst c ON c.countryID=ca.countryID  \n" +
                "	WHERE ca.id=pAddressID ;  \n" +
                "  \n" +
                "	RETURN pAddress;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5805,'2.00','V1','fun_getAddressbyID-User Story 39977: Add Default Contact Person Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 5805:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCreditMemoReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoReportDetails`(  \n" +
                "	IN cpID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vReceivedAmt  DECIMAL(18,6);  \n" +
                "	DECLARE vTotRefundIssuedAgainstCreditMemo  DECIMAL(18,6);  \n" +
                "  \n" +
                "	# Customer Invoice Master table details  \n" +
                "		SELECT  cp.id,  \n" +
                "			cp.invoiceNumber,  \n" +
                "			cp.invoiceDate,  \n" +
                "			cp.creditMemoNumber,  \n" +
                "			cp.creditMemoDate,  \n" +
                "			cp.refDebitMemoNumber,  \n" +
                "			refDebitMemoDate,  \n" +
                "			cp.poNumber,  \n" +
                "			cp.poDate,  \n" +
                "			mg.customerSystemID,  \n" +
                "			mg.accountRef,  \n" +
                "			cp.status,  \n" +
                "             fun_getAddressbyIDAndContactPersonID(cp.billToId,cp.billingContactPersonID) billingAddress,  \n" +
                "			fun_getAddressbyIDAndContactPersonID(cp.shipToId,cp.shippingContactPersonID) shippingAddress,  \n" +
                "			cp.packingSlipComment,  \n" +
                "			cp.rmaNumber,  \n" +
                "			IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,  \n" +
                "			IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,  \n" +
                "			cp.systemID AS legalnumber,  \n" +
                "			CONCAT(us.firstName,' ',us.lastName) AS  preparedBy,  \n" +
                "			us.emailAddress,  \n" +
                "			emp.phExtension,  \n" +
                "			'1.00' docNumber ,  \n" +
                "			cp.revision creditMemoVersion  \n" +
                "		FROM customer_packingslip cp  \n" +
                "			JOIN mfgcodemst mg ON mg.id=cp.customerID  \n" +
                "			LEFT JOIN genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId  AND gcs.isDeleted = 0  \n" +
                "			LEFT JOIN genericcategory gcp ON gcp.gencCategoryID = cp.termsID AND gcp.isDeleted = 0  \n" +
                "			LEFT JOIN users us ON us.id = cp.updatedBy  \n" +
                "			LEFT JOIN employees emp ON emp.id = us.employeeID  \n" +
                "		WHERE cp.id=cpID AND cp.isDeleted = 0  \n" +
                "		AND transType='C'  \n" +
                "		LIMIT 1;  \n" +
                "  \n" +
                "	# Customer Invoice line level details  \n" +
                "		SELECT  \n" +
                "			cpd.id,  \n" +
                "			cpd.partId,  \n" +
                "			cpd.id AS refCustomerPackingSlipDetID,  \n" +
                "			cpd.lineID,  \n" +
                "			cpd.reflineID,  \n" +
                "			(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN fun_getGenericCategoryNameByID(cpd.refChargesTypeID)  \n" +
                "				WHEN (c.iscustom=1) THEN  c.custAssyPN  \n" +
                "				WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN  c.mfgPN  \n" +
                "				ELSE  ''  END) AS mfgPN ,  \n" +
                "			(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN 'Other Charges'  \n" +
                "				ELSE  fun_getMfgNameByPartID(cpd.partId)  \n" +
                "				END) AS  mfgName,  \n" +
                "			IFNULL(c.rev, '') AS revision,  \n" +
                "			(CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN  'EA'  \n" +
                "				ELSE  fun_getUOMAbbreviationByID(c.uom)  \n" +
                "				END) AS uom,  \n" +
                "			cpd.shipQty AS qty,  \n" +
                "			IFNULL(cpd.unitPrice,0) AS price,  \n" +
                "			IFNULL(cpd.extendedPrice,0) AS extPrice,  \n" +
                "			CONCAT(IFNULL(REPLACE(cpd.assyDescription,'  \n" +
                "					','<br/>'), ''),'<br/>',  \n" +
                "			IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),  \n" +
                "			IFNULL(CONCAT(', ',  \n" +
                "					fun_getCertificationByPartID(cpd.partid)),  \n" +
                "				''),  \n" +
                "			IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),  \n" +
                "			IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),'<br/><br/>',  \n" +
                "			IFNULL(REPLACE(cpd.shippingNotes,'  \n" +
                "			','<br/>'),'')) AS DESCRIPTION  \n" +
                "  \n" +
                "		FROM  customer_packingslip_det cpd  \n" +
                "			LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)  \n" +
                "		WHERE  \n" +
                "		cpd.isDeleted = 0  \n" +
                "		AND cpd.refCustPackingSlipID = cpID  \n" +
                "		ORDER BY reflineID ASC;  \n" +
                "  \n" +
                "	# Credit Memo Total charges details which we will use at the end of report  \n" +
                "    SELECT IFNULL(SUM(paymentAmount),0)  INTO @totalCMRefundedAmt  \n" +
                "		FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cpID  AND isDeleted = 0 AND isPaymentVoided = 0;  \n" +
                "	SELECT fun_getTotalCustomerCreditMemoAppliedAmountById(cpID) INTO @totalRecvAmt;  \n" +
                "  \n" +
                "	SELECT  \n" +
                "		IFNULL(SUM(cpd.extendedPrice),0) AS totalLinePrice,  \n" +
                "        IFNULL(@totalCMRefundedAmt,0) AS totalCMRefundedAmt,  \n" +
                "        IFNULL(@totalRecvAmt,0) AS totalRecvAmt  \n" +
                "	FROM customer_packingslip_det cpd  \n" +
                "	WHERE cpd.refCustPackingSlipID = cpID AND cpd.isdeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5806,'2.00','V1',' Sproc_GetCreditMemoReportDetails-User Story 39977: Add Default Contact Person -  Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 5806:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetail`(  \n" +
                "	IN invoiceID INT      ,  \n" +
                "    IN pTransType VARCHAR(5)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "     DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	                 SELECT inv.id,   inv.transType,  \n" +
                "						inv.packingSlipNumber,inv.packingSlipDate,  \n" +
                "                        -- (SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = inv.id AND packing.isDeleted = 0) packingSlipID,  \n" +
                "                        cps.id packingSlipID,  \n" +
                "						inv.refSalesOrderId  ,  \n" +
                "                        inv.systemID,  \n" +
                "						fun_GetFormattedMfgCode(mfg.mfgcode,mfg.mfgname, vMfgCodeFormat) customerName,  \n" +
                "                        fun_getMfgNameByID(inv.customerID) customerNameOnly,  \n" +
                "                        inv.customerID,inv.poNumber,inv.poDate, inv.poRevision,  \n" +
                "						inv.soNumber,inv.soDate,  \n" +
                "                        inv.packingSlipType,inv.`status`,  \n" +
                "                        fun_getGenericCategoryCodeNameByID(inv.shippingMethodId) shippingMethod,inv.shippingMethodId,  \n" +
                "						inv.shipToId,inv.contactPersonId,inv.intermediateShipmentId, inv.billToId,  \n" +
                "						inv.invoiceNumber,inv.invoiceDate,  \n" +
                "                        inv.headerComment  ,   inv.packingSlipComment,  \n" +
                "						inv.freeOnBoardId,inv.salesCommissionTo,  \n" +
                "						CONCAT('(',fun_getEmployeeInitialNameByEmpID(inv.salesCommissionTo),') ',fun_getEmployeeNameByEmpID(inv.salesCommissionTo) ) salesCommName,  \n" +
                "						fun_getFOBById(inv.freeOnBoardId) FOBName,  \n" +
                "						fun_getGenericCategoryNameByID(inv.termsId) terms, inv.termsId,  \n" +
                "                        inv.intermediateShipmentId ,  \n" +
                "						inv.billingAddress,  \n" +
                "						inv.shippingAddress,  \n" +
                "						inv.intermediateAddress,  \n" +
                "                        inv.isLocked,  \n" +
                "                        inv.subStatus,  \n" +
                "                        inv.paymentStatus,  \n" +
                "                        inv.packingSlipType,  \n" +
                "                        fun_getUserNameByID(inv.lockedBy) lockedBy ,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,vTimeZone,vDateTimeDisplayFormat) lockedAt,  \n" +
                "                        inv.creditMemoNumber, inv.creditMemoDate, inv.isMarkForRefund , inv.agreedRefundAmt ,  \n" +
                "						inv.refDebitMemoNumber, inv.refDebitMemoDate,   inv.rmaNumber,  \n" +
                "                        (CASE WHEN inv.packingSlipType = 1 THEN 'MISC' WHEN inv.packingSlipType = 2 THEN 'PO/SO' END) packingSlipTypeText,  \n" +
                "                        (CASE WHEN inv.packingSlipType = 1 OR inv.packingSlipType = 2  THEN 'Invoice' WHEN inv.packingSlipType = 3 THEN 'MISC Invoice' ELSE null END) invoiceTypeText,  \n" +
                "                        inv.isZeroValue,  \n" +
                "                        inv.revision,  \n" +
                "                        cps.subStatus packingSlipSubStatus,  \n" +
                "                        (CASE WHEN cps.subStatus = 5 AND (inv.subStatus = 4 OR inv.subStatus = 5) THEN CONCAT( fun_getCustomerInvoiceSubStatusName(cps.subStatus, 'P'),' - ', fun_getCustomerInvoiceSubStatusName(inv.subStatus, 'I'))  \n" +
                "						ELSE '' END) materialStatus ,  \n" +
                "                        inv.isAlreadyPublished ,  \n" +
                "			fun_getMfgCodeByID(inv.customerID) customerCodeOnly,  \n" +
                "			cps.revision packingSlipVersion,  \n" +
                "			(CASE WHEN inv.transType = 'I' THEN get_totalCustomerInvoiceReceivedAmountById(inv.id)  \n" +
                "					WHEN inv.transType='C' THEN fun_getTotalCustomerCreditMemoAppliedAmountById(inv.id)  \n" +
                "			ELSE NULL END) receivedAmount,  \n" +
                "			(SELECT psip.id FROM packingslip_invoice_payment psip WHERE psip.refCustCreditMemoID=invoiceID AND psip.refPaymentMode = 'CA'  \n" +
                "								AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0) custPaymentMstID,  \n" +
                "			(CASE WHEN inv.transType = 'C' THEN  \n" +
                "					(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = inv.id  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0)  \n" +
                "				ELSE NULL END) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "			(CASE WHEN inv.transType = 'I' THEN  fun_getPaymentStatusByCustPackingSlipSubStatus(inv.subStatus,inv.transType,inv.paymentStatus,'CODE')  \n" +
                "				END) AS paymentStatusCode,  \n" +
                "			inv.refundStatus,  \n" +
                "			(CASE WHEN inv.transType = 'C' THEN fun_getCustCreditMemoRefundStatusTextByValue(inv.refundStatus)  \n" +
                "				ELSE NULL END) AS creditMemoRefundStatusText ,  \n" +
                "				sm.isRmaPO,  \n" +
                "				sm.isLegacyPO,  \n" +
                "			fun_getUserNameByID(inv.updatedBy) updatedByInitial,  \n" +
                "			fun_getEmployeeIDByUserID(inv.updatedBy) updatedByEmp,  \n" +
                "			fun_getUserNameByID(inv.createdBy) createdByInitial,  \n" +
                "			fun_getEmployeeIDByUserID(inv.createdBy) createdByEmp,  \n" +
                "			inv.isAskForVersionConfirmation,  \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,  \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt  ,  \n" +
                "                        fun_getPOTypeByID(inv.refSalesOrderId) poType  ,  \n" +
                "                        fun_getGenericCategoryCodeNameByID(inv.carrierID) carrier,inv.carrierID , inv.carrierAccountNumber  ,  \n" +
                "                        inv.billingContactPersonID,  \n" +
                "                        inv.billingContactPerson,  \n" +
                "                        inv.shippingContactPersonID,  \n" +
                "                        inv.shippingContactPerson,  \n" +
                "                        inv.intermediateContactPersonID,  \n" +
                "                        inv.intermediateContactPerson  \n" +
                "		FROM customer_packingslip inv  \n" +
                "                 LEFT JOIN customer_packingslip cps ON cps.refCustInvoiceID = inv.id AND cps.isDeleted = 0  AND cps.transType = 'P'  \n" +
                "                 LEFT JOIN salesordermst sm ON sm.id=cps.refSalesOrderId AND sm.isdeleted=0  \n" +
                "				 LEFT JOIN mfgcodemst mfg  ON mfg.id = inv.customerId and mfg.isDeleted = 0  \n" +
                "                 WHERE inv.id = invoiceID  \n" +
                "                 AND inv.transType = pTransType  \n" +
                "                 AND inv.isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "				 SELECT cpd.refSalesorderDetid,  \n" +
                "					cpd.id,  \n" +
                "                    cpd.refCustPackingSlipID,  \n" +
                "					cpd.custPOLineID,  \n" +
                "					cpd.reflineID AS packingSlipSerialNumber,  \n" +
                "                    cpd.lineID,  \n" +
                "                    co.PIDCode,  \n" +
                "                    co.mfgcodeID,  \n" +
                "                    ss.releaseNumber,  \n" +
                "                    fun_getMfgCodeAndNameByID(co.mfgcodeID) mfgName,  \n" +
                "					co.mfgpn,  \n" +
                "                    fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "					fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "                    cpd.partId,  \n" +
                "                    cpd.refChargesTypeID,  \n" +
                "					#(select c.partType from component c where c.isDeleted = 0 and c.id = partId) partType,  \n" +
                "					cpd.shipQty,cpd.unitPrice,cpd.extendedPrice,  \n" +
                "                    fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,  \n" +
                "                    #(IFNULL(shipQty,0)*IFNULL(unitPrice,0)) extPrice,  \n" +
                "                    CASE WHEN co.partType = 4 THEN FALSE ELSE TRUE END materialType,  \n" +
                "                    othercharges AS lineOtherCharges,  \n" +
                "                    (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,  \n" +
                "					cpd.shippingNotes,  \n" +
                "                    cpd.internalComment,  \n" +
                "                    cpd.assyDescription,  \n" +
                "					fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "					fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "					fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(cpd.updateByRoleId) updatedbyRole ,  \n" +
                "                    fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(cpd.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt ,  \n" +
                "                    (SELECT sod.quoteNumber FROM  salesorderdet sod WHERE sod.id = refSalesorderDetid AND sod.isDeleted = 0) quoteNumber,  \n" +
                "                    co.partType,  \n" +
                "                    vu.packingLineID,  \n" +
                "                    (CASE WHEN vu.packingDetID IS NOT NULL THEN 1 ELSE 0 END) isFromPackingSlip,  \n" +
                "                    co.isCustom, co.isCPN , co.nickName ,  \n" +
                "                    (SELECT GROUP_CONCAT(cert.fullName)FROM  certificate_standards cert  \n" +
                "						WHERE cert.certificateStandardID IN (SELECT compstd.certificateStandardID  \n" +
                "							FROM component_standard_details compstd WHERE compstd.componentID = co.id AND compstd.isDeleted= 0) )componentStandardList,  \n" +
                "					quoteFrom,refAssyQtyTurnTimeID,quoteNumber,refRFQGroupID,refRFQQtyTurnTimeID,  \n" +
                "                    (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,  \n" +
                "                    IFNULL(assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
                "					JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
                "                    WHERE rfqAssyTurn.id = cpd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
                "                    cpd.isZeroValue,  \n" +
                "                    fun_getIntToText(cpd.isZeroValue) isZeroValueConverted  \n" +
                "                    ,cpd.releaseNotes  \n" +
                "				 FROM customer_packingslip_det cpd  \n" +
                "                 LEFT JOIN COMPONENT co ON co.id = cpd.partId AND co.isDeleted = 0  \n" +
                "                 LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0  \n" +
                "                 LEFT JOIN vu_inv_ps_so_line_detail vu ON vu.invDetId= cpd.id AND vu.invoiceId = cpd.refCustPackingSlipId  \n" +
                "                 WHERE cpd.refCustPackingSlipID = invoiceID AND cpd.isdeleted=0  \n" +
                "                 ORDER BY cpd.lineID ASC;  \n" +
                "  \n" +
                "                 SELECT cpOther.id,  \n" +
                "						cpOther.refCustomerPackingSlipDetID,  \n" +
                "						cpOther.partID,  \n" +
                "						fun_getMFGPNByID(cpOther.partID) mfgPN,  \n" +
                "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,  \n" +
                "                        cpOther.qty,  \n" +
                "                        cpOther.price,  \n" +
                "                        cpOther.lineComment,  \n" +
                "                         cpOther.lineInternalComment,  \n" +
                "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,  \n" +
                "                        cpOther.frequency ,  \n" +
                "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'  \n" +
                "								WHEN (cpOther.frequency = 2) THEN 'First'  \n" +
                "								WHEN (cpOther.frequency = 3) THEN  'Last'  \n" +
                "								ELSE ''  \n" +
                "						END) AS frequencyName,  \n" +
                "			cpOther.frequencyType,  \n" +
                "			  (CASE  	WHEN (cpOther.frequencyType = 1) THEN 'Release'  \n" +
                "								WHEN (cpOther.frequencyType = 2) THEN 'Shipment'  \n" +
                "								ELSE ''  \n" +
                "						END) AS frequencyTypeName  \n" +
                "                 FROM customer_packingslip_otherexpense_details cpOther  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cpOther.refCustomerPackingSlipDetId AND cpd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cpOther.isdeleted=0;  \n" +
                "  \n" +
                "                  --  Tracking Number  \n" +
                "                SELECT id,trackNumber  \n" +
                "                FROM customer_packing_slip_track_number  \n" +
                "                WHERE refCustPackingSlipID = invoiceID  \n" +
                "                AND isDeleted = 0;  \n" +
                "  \n" +
                "                -- sales commission attribute  \n" +
                "                SELECT cca.id,  \n" +
                "		    cca.refCustPackingSlipDetID,  \n" +
                "                    cca.unitPrice,  \n" +
                "                    cca.commissionPercentage,  \n" +
                "                    cca.commissionValue,  \n" +
                "                    cca.quoted_commissionPercentage,  \n" +
                "                    cca.quoted_commissionValue,  \n" +
                "                    cca.poQty,  \n" +
                "                    cca.partId,  \n" +
                "                    cca.quotedQty,  \n" +
                "                    cca.type,  \n" +
                "                    cca.rfqAssyID,  \n" +
                "                    cca.commissionCalculateFrom,  \n" +
                "                    cca.salesCommissionNotes,  \n" +
                "                    cca.refComponentSalesPriceBreakID,  \n" +
                "                    cca.quoted_unitPrice  \n" +
                "				FROM customer_packingslip_commission_attribute_mstdet cca  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cca.isdeleted=0;  \n" +
                "                 -- sales commission child attribute  \n" +
                "                SELECT cca.id,  \n" +
                "		    cca.refCustPackingSlipDetID,  \n" +
                "		    cca.refcustInvoiceCommissionID,  \n" +
                "                    cca.unitPrice,  \n" +
                "                    cca.refQuoteAttributeId,  \n" +
                "                    cca.commissionPercentage,  \n" +
                "                    cca.commissionValue,  \n" +
                "                    cca.org_commissionPercentage,  \n" +
                "                    cca.org_commissionValue,  \n" +
                "                    cca.category,  \n" +
                "                    cca.partId,  \n" +
                "                    cca.refComponentSalesPriceBreakID,  \n" +
                "                    cca.org_unitPrice,  \n" +
                "                    (cca.commissionValue * cpd.shipQty) extendedCommissionValue,  \n" +
                "                    (cca.org_commissionValue * cpd.shipQty) extendedOrgCommissionValue,  \n" +
                "                    IFNULL(qd.fieldName,'Sales Commission') fieldName  \n" +
                "				FROM customer_packingslip_commission_attribute cca  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "                 LEFT JOIN quotecharges_dynamic_fields_mst qd ON cca.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cca.isdeleted=0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5807,'2.00','V1','Sproc_GetCustomerInvoiceDetail-User Story 39977: Add Default Contact Person - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 5807:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerInvoiceReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceReportDetails`(  \n" +
                "	IN cpID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vReceivedAmt  DECIMAL(18,6);  \n" +
                "    # Customer Invoice Master table details  \n" +
                "    SELECT  cp.id,  \n" +
                "		cp.invoiceNumber,  \n" +
                "        cp.invoiceDate,  \n" +
                "		cp.packingSlipNumber,  \n" +
                "		cp.packingSlipDate,  \n" +
                "		cp.poDate,  \n" +
                "		cp.poNumber,  \n" +
                "        cp.poRevision,  \n" +
                "		mg.customerSystemID,  \n" +
                "		mg.accountRef,  \n" +
                "		cp.packingSlipComment,  \n" +
                "        cp.status,  \n" +
                "		(SELECT GROUP_CONCAT(cpt.trackNumber SEPARATOR '  \n" +
                "') FROM customer_packing_slip_track_number cpt WHERE cpt.isDeleted = 0 AND cpt.refCustPackingSlipID = cpID) AS trackingNumber,  \n" +
                "		fun_getDueDate(cp.invoiceDate,cp.termsID) AS dueDate,  \n" +
                "        fun_getAddressbyIDAndContactPersonID(cp.billToId,cp.billingContactPersonID) billingAddress,  \n" +
                "    fun_getAddressbyIDAndContactPersonID(cp.shipToId,cp.shippingContactPersonID) shippingAddress,  \n" +
                "	fun_getAddressbyIDAndContactPersonID(cp.intermediateShipmentId,cp.intermediateContactPersonID) intermediateAddress,  \n" +
                "		IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),'-') AS salesPerson,  \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,  \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,  \n" +
                "        IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), ' - ') AS freeOnBoard,  \n" +
                "        cp.systemID AS legalnumber,  \n" +
                "        fun_getUserNameByID(cp.updatedBy)AS  preparedBy,  \n" +
                "		us.emailAddress,  \n" +
                "		emp.phExtension,  \n" +
                "        cp.revision invoiceVersion,  \n" +
                "        '2.00' AS docNumber,  \n" +
                "        subStatus  \n" +
                "		FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID  \n" +
                "                LEFT JOIN  \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId  \n" +
                "        AND gcs.isDeleted = 0  \n" +
                "           LEFT JOIN  \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID  \n" +
                "        AND gcp.isDeleted = 0  \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy  \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID  \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;  \n" +
                "  \n" +
                "	# Customer Invoice line level details  \n" +
                "	SELECT  \n" +
                "		cpd.id,  \n" +
                "		cpd.partId,  \n" +
                "		cpd.id AS refDetID,  \n" +
                "		cpd.lineID,  \n" +
                "		IFNULL(ss.releaseNumber,'') releaseNumber,  \n" +
                "		IFNULL(cpd.custPOLineID,'')   custPOLineID,  \n" +
                "        c.iscustom,  \n" +
                "        c.partType,  \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN  \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)  \n" +
                "		  WHEN (c.iscustom=1) THEN  \n" +
                "			c.custAssyPN  \n" +
                "		  WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN  \n" +
                "			c.mfgPN  \n" +
                "        ELSE  \n" +
                "			  ''  \n" +
                "			END) AS mfgPN ,  \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN  \n" +
                "			'Other Charges'  \n" +
                "		ELSE  \n" +
                "			fun_getMfgNameByPartID(cpd.partId)  \n" +
                "			END) AS  mfgName,  \n" +
                "		IFNULL(c.rev, '') AS revision,  \n" +
                "		IFNULL(fun_getUOMAbbreviationByID(c.uom),'') uom,  \n" +
                "		cpd.shipQty AS qty,  \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,  \n" +
                "		IFNULL(cpd.extendedPrice,0) extPrice,  \n" +
                "		CONCAT(  \n" +
                "		IFNULL(replace(cpd.assyDescription,'  \n" +
                "','<br/>'), ''),'<br/>',  \n" +
                "                IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),  \n" +
                "                IFNULL(CONCAT(', ',  \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),  \n" +
                "                    ''),  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),  \n" +
                "            CASE WHEN (IFNULL(cpd.shippingNotes,'') <>'') THEN '<br/><br/>' ELSE '' END,  \n" +
                "            IFNULL(replace(cpd.shippingNotes,'  \n" +
                "','<br/>'),'')) AS DESCRIPTION  ,  \n" +
                "		IFNULL(replace(cpd.releaseNotes,'  \n" +
                "','<br/>'),'-') releaseNotes  \n" +
                "	FROM  \n" +
                "		customer_packingslip_det cpd  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0  \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)  \n" +
                "	WHERE  \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID;  \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report  \n" +
                "    SELECT get_totalCustomerInvoiceReceivedAmountById(cpID) INTO @totalRecvAmt;  \n" +
                "	SELECT  \n" +
                "		IFNULL(SUM(cpd.shipQty * cpd.unitPrice),0) AS totalLinePrice,  \n" +
                "		IFNULL(SUM(totalLineMiscPrice),0) AS totalLineMiscPrice,  \n" +
                "        IFNULL(@totalRecvAmt,0) As totalRecvAmt  \n" +
                "	FROM  customer_packingslip_det cpd  \n" +
                "	LEFT JOIN (SELECT refCustomerPackingSlipDetID, SUM(cpod.qty * cpod.price) AS totalLineMiscPrice  \n" +
                "				FROM customer_packingslip_otherexpense_details cpod WHERE cpod.isdeleted = 0  \n" +
                "		GROUP BY cpod.refCustomerPackingSlipDetID) cpod ON cpod.refCustomerPackingSlipDetID = cpd.id  \n" +
                "	WHERE cpd.refCustPackingSlipID = cpID AND  cpd.isdeleted = 0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5808,'2.00','V1','Sproc_GetCustomerInvoiceReportDetails-User Story 39977: Add Default Contact Person- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 5808:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber`(  \n" +
                "	IN pPackingSlipNumber VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountOfPSRecord INT;  \n" +
                "	DECLARE v_CountOfSIRecord INT;  \n" +
                "	DECLARE v_StringOfMFGCode VARCHAR(255);  \n" +
                "	DECLARE Status_Check TINYINT;  \n" +
                "	DECLARE vPackingSlipId INT;  \n" +
                "	DECLARE vrefSalesOrderID INT;  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_CustomerPackingSlip_Validation_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_CustomerPackingSlip_Validation_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		Error VARCHAR(1000)  \n" +
                "	);  \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_CountOfPSRecord  \n" +
                "	FROM 	customer_packingslip  \n" +
                "	WHERE 	packingSlipNumber = pPackingSlipNumber  \n" +
                "			AND transType = 'P'  \n" +
                "			AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF (v_CountOfPSRecord = 0) THEN  \n" +
                "		INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT('Customer Packing Slip# <b>',pPackingSlipNumber,'</b> not found.'));  \n" +
                "		SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		SELECT 	a.refCustInvoiceID, GROUP_CONCAT(a.fullCustCode),a.`subStatus` ,a.id ,a.refSalesOrderID  \n" +
                "        INTO v_CountOfSIRecord, v_StringOfMFGCode,Status_Check  ,  vPackingSlipId ,vrefSalesOrderID  \n" +
                "		FROM 	(  \n" +
                "				SELECT 	cp.id, cp.packingSlipNumber,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgCodeFormat) fullCustCode,  \n" +
                "					cp.`subStatus`,cp.refCustInvoiceID,cp.refSalesOrderID  \n" +
                "				FROM 	customer_packingslip  cp  \n" +
                "                left join mfgcodemst mfg on mfg.id= cp.customerID  \n" +
                "				WHERE 	cp.packingSlipNumber = pPackingSlipNumber  \n" +
                "						AND cp.transType = 'P'  \n" +
                "						AND cp.isDeleted =0  \n" +
                "		) a  \n" +
                "        GROUP BY a.refCustInvoiceID,id ,a.refSalesOrderID  ;  \n" +
                "  \n" +
                "			IF(Status_Check=1)THEN      /* status 1-> Draft */  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"</b> is in <b>Draft</b>. So you cannot get any details of packing slip.\"));  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "			ELSEIF(v_CountOfSIRecord IS NOT NULL)THEN  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"'s</b> customer invoice is already created for customer \",v_StringOfMFGCode,\".\"));  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "			ELSE  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (TRUE, '');  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "  \n" +
                "				SELECT packingSlipNumber,packingSlipDate,  \n" +
                "                fun_getMfgCodeAndNameByID(customerID) customerName,  \n" +
                "                customerID,  \n" +
                "                    id AS packingSlipID,  \n" +
                "                    poNumber, poDate,poRevision,  \n" +
                "					soNumber, soDate, refSalesOrderId,sorevision,  \n" +
                "                    packingSlipType,  \n" +
                "                    (CASE WHEN packingSlipType = 1 THEN 'MISC' WHEN packingSlipType = 2 THEN 'PO' END) packingSlipTypeText,  \n" +
                "					fun_getGenericCategoryCodeNameByID(shippingMethodId) shippingMethod,      shippingMethodId,  \n" +
                "                    fun_getGenericCategoryNameByID(termsId) terms,termsId,  \n" +
                "                    shipToId, billToId ,  \n" +
                "                    freeOnBoardId,salesCommissionTo,  \n" +
                "                    fun_getEmployeeInitialNameByEmpID(salesCommissionTo) salesCommInitial,  \n" +
                "                    CONCAT('(',fun_getEmployeeInitialNameByEmpID(salesCommissionTo),') ',fun_getEmployeeNameByEmpID(salesCommissionTo) ) salesCommName,  \n" +
                "                    fun_getFOBById(freeOnBoardId) FOBName,  \n" +
                "                    contactPersonId,  \n" +
                "                    intermediateShipmentId ,  \n" +
                "                    billingAddress,  \n" +
                "                    shippingAddress,  \n" +
                "                    intermediateAddress,  \n" +
                "                    packingSlipComment,  \n" +
                "                    headerComment,  \n" +
                "                    revision packingSlipVersion,  \n" +
                "                    billingContactPersonID,  \n" +
                "                    shippingContactPersonID,  \n" +
                "                    intermediateContactPersonID,  \n" +
                "                    carrierID,  \n" +
                "                    fun_getGenericCategoryCodeNameByID(carrierID) carrier,  \n" +
                "                    carrierAccountNumber  \n" +
                "				 FROM customer_packingslip WHERE packingSlipNumber = pPackingSlipNumber  \n" +
                "						AND transType = 'P'  \n" +
                "						AND isDeleted = 0 ;  \n" +
                "  \n" +
                "				SELECT  cpd.custPOLineID,  \n" +
                "						cpd.refSalesorderDetid,  \n" +
                "						cpd.reflineID AS packingSlipSerialNumber,  \n" +
                "                        fun_getMFGPNByID(cpd.partId) mfgpn,  \n" +
                "                        fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "                        fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "                        cpd.partId,cpd.refChargesTypeID,  \n" +
                "                        cpd.shippingId,  \n" +
                "					(SELECT c.partType FROM component c WHERE c.isDeleted = 0 AND c.id = cpd.partId) partType,  \n" +
                "						cpd.shipQty,  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.price, cpd.unitPrice) unitPrice,  \n" +
                "						cpd.assyDescription,  \n" +
                "						fun_getAssyPIDCodeByID(cpd.partId)	PIDCode,  \n" +
                "						fun_getMfgCodeAndNameByPartID(cpd.partId) mfgName,  \n" +
                "						(SELECT ss.releaseNumber FROM salesshippingmst ss WHERE  ss.shippingId = cpd.shippingId AND ss.isdeleted=0) releaseNumber,  \n" +
                "						fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,  \n" +
                "						(IFNULL(cpd.shipQty,0)* IF(cp.packingSlipType = 2 ,sod.price,IFNULL(cpd.unitPrice,0))) extPrice,  \n" +
                "						cpd.otherCharges AS lineOtherCharges,  \n" +
                "						0 totalExtPrice ,  \n" +
                "						1 isFromPackingSlip,  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteNumber, cpd.quoteNumber) quoteNumber,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQGroupID ,cpd.refRFQGroupID) refRFQGroupID,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "						(CASE 	WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 1 THEN 'From RFQ'  \n" +
                "								WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 3 THEN 'N/A'  \n" +
                "                                WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 2 THEN 'From Part Master' ELSE '' END) quoteFromText  ,  \n" +
                "					    cpd.releaseNotes  \n" +
                "				 FROM customer_packingslip_det cpd  \n" +
                "                 LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0  AND cp.transType = 'P'  \n" +
                "                 LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0  \n" +
                "                 WHERE cpd.isDeleted=0  \n" +
                "                 AND cp.packingSlipNumber = pPackingSlipNumber  \n" +
                "                ORDER BY refSalesorderdetid,shippingId ASC;  \n" +
                "  \n" +
                "                -- get other charges  \n" +
                "                -- 1, Every 2 First 3 Last  \n" +
                "			  SELECT dtl.refCustPackingSlipID ,  \n" +
                "					 dtl.refSalesorderDetid,  \n" +
                "                     dtl.remainingQty,  \n" +
                "                     sother.partID,  \n" +
                "                     fun_getMFGPNByID(sother.partID) mfgPN,  \n" +
                "					 fun_getRoHSIconByPartID(sother.partID) rohsIcon,  \n" +
                "					 fun_getRoHSNameByPartID(sother.partID) rohsName,  \n" +
                "                     sother.price ,  \n" +
                "                     sother.qty,  \n" +
                "                     (IFNULL(sother.qty,0)*IFNULL(sother.price,0)) extOtherPrice,  \n" +
                "                     sother.frequency,  \n" +
                "                      sother.lineComment,  \n" +
                "                       sother.lineInternalComment,  \n" +
                "                       sother.frequencyType,  \n" +
                "                     (CASE  WHEN (sother.frequency = 1) THEN 'Every'  \n" +
                "							WHEN (sother.frequency = 2) THEN 'First'  \n" +
                "							WHEN (sother.frequency = 3) THEN  'Last'  \n" +
                "							ELSE ''  \n" +
                "						END) AS frequencyName ,  \n" +
                "						(CASE  WHEN (sother.frequencyType = 1) THEN 'Release'  \n" +
                "							WHEN (sother.frequencyType = 2) THEN 'Shipment'  \n" +
                "							ELSE ''  \n" +
                "						END) AS frequencyTypeName  \n" +
                "				FROM (  \n" +
                "					SELECT b.refCustPackingSlipID , b.refSalesorderDetid, b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency FROM  \n" +
                "					 	(SELECT  a.refCustPackingSlipID , a.refSalesorderDetid, a.poQty, a.shipQty ,a.remainingQty, a.packingslipIndex ,a.shippingId,  \n" +
                "						CASE WHEN packingslipIndex = 1 AND  remainingQty > 0 THEN '1,2'  \n" +
                "							 WHEN packingslipIndex = 1 AND  remainingQty = 0 THEN '1,2,3'  \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty > 0 THEN '1'  \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty =  0 THEN '1,3' END AS calcFrequency  \n" +
                "						FROM (  \n" +
                "							SELECT cpd2.refCustPackingSlipID,cpd2.refSalesorderDetid,cpd2.poQty,cpd2.shipQty ,  \n" +
                "								cpd2.remainingQty,cpd2.shippingId,  \n" +
                "                                cpd2.partID,  \n" +
                "								row_number() over(PARTITION BY cpd1.refSalesorderDetid,cpd1.shippingId  ORDER BY cpd2.id ) packingslipIndex  \n" +
                "							FROM customer_packingslip_det cpd1  \n" +
                "							JOIN customer_packingslip_det cpd2 ON cpd2.refSalesOrderDetid = cpd1.refSalesOrderDetid AND cpd2.isDeleted = 0  \n" +
                "							WHERE cpd1.refCustPackingSlipID = vPackingSlipId  \n" +
                "                            AND cpd1.isDeleted = 0  \n" +
                "						) AS a  \n" +
                "						)AS b  GROUP BY b.refCustPackingSlipID,b.refSalesorderDetid,b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency  \n" +
                "				) AS dtl  \n" +
                "				JOIN salesorder_otherexpense_details sother  \n" +
                "                ON sother.refSalesOrderDetID = dtl.refSalesorderDetid AND sother.isDeleted = 0  \n" +
                "				WHERE FIND_IN_SET ( sother.frequency ,dtl.calcFrequency)  \n" +
                "				AND dtl.refCustPackingSlipID = vPackingSlipId;  \n" +
                "  \n" +
                "  \n" +
                "                 --  Tracking Number  \n" +
                "                SELECT trackNumber  \n" +
                "                FROM customer_packing_slip_track_number  \n" +
                "                WHERE refCustPackingSlipID = vPackingSlipId  \n" +
                "                AND isDeleted = 0;  \n" +
                "  \n" +
                "                -- other charges  \n" +
                "                SELECT cpd.partId,cpd.shipQty,cpd.poQty,cpd.refSalesorderDetid,cpd.shippingId  \n" +
                "		FROM customer_packingslip cp JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID=cp.id  \n" +
                "			WHERE transType='I' AND cp.refSalesOrderID=vrefSalesOrderID AND cp.isdeleted=0  ;  \n" +
                "			END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5809,'2.00','V1',' Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber-User Story 39977: Add Default Contact Person- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5809:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerPackingslipReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipReportDetails`(  \n" +
                "	IN cpid INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	SELECT  \n" +
                "    cp.id,  \n" +
                "    cp.status,  \n" +
                "    cp.packingSlipType,  \n" +
                "    cp.packingSlipNumber AS PackingSlip,  \n" +
                "    cp.packingSlipDate AS PackingSlipDate,  \n" +
                "    cp.poDate AS PODate,  \n" +
                "    cp.soNumber AS SalesOrderNumber,  \n" +
                "    cp.poNumber AS PONumber,  \n" +
                "    cp.packingSlipComment,  \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,  \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,  \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,  \n" +
                "    cp.soDate AS SODate,  \n" +
                "    cp.sorevision AS SORevision,  \n" +
                "	/*cp.billingAddress AS SoldToAddress,  \n" +
                "	cp.shippingAddress AS ShippingAddress,  \n" +
                "	cp.intermediateAddress AS IntermediateAddress, */  \n" +
                "    fun_getAddressbyIDAndContactPersonID(cp.billToId,cp.billingContactPersonID) SoldToAddress,  \n" +
                "    fun_getAddressbyIDAndContactPersonID(cp.shipToId,cp.shippingContactPersonID) ShippingAddress,  \n" +
                "	fun_getAddressbyIDAndContactPersonID(cp.intermediateShipmentId,cp.intermediateContactPersonID) IntermediateAddress,  \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo), '-') AS SalesOrderPersonName,  \n" +
                "	fun_getUserNameByID(cp.updatedBy) AS  preparedBy, us.emailAddress, emp.phExtension ,  \n" +
                "    cp.revision packingSlipVersion  ,  \n" +
                "    '1.00' docNumber ,  \n" +
                "    cp.systemID AS legalNumber,  \n" +
                "    sm.isBlanketPO,  \n" +
                "	CASE WHEN sm.isBlanketPO=1 THEN 'Yes' ELSE 'No' END blanketPOText,  \n" +
                "    gcCarrier.gencCategoryName carrier  \n" +
                "FROM   customer_packingslip cp  \n" +
                "LEFT JOIN salesordermst sm ON sm.id = cp.refSalesOrderID AND sm.isDeleted = 0  \n" +
                "LEFT JOIN genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId AND gc.isDeleted = 0  AND gc.categoryType = 'Shipping Methods'  \n" +
                "LEFT JOIN genericcategory gcc ON gcc.gencCategoryID = cp.termsID AND gcc.isDeleted = 0  AND gcc.categoryType = 'Payment Terms'  \n" +
                "LEFT JOIN genericcategory gcCarrier ON gcCarrier.gencCategoryID = cp.carrierID AND gcCarrier.isDeleted = 0  AND gcCarrier.categoryType = 'Carrier'  \n" +
                "LEFT JOIN users us ON us.id = cp.updatedBy  \n" +
                "LEFT JOIN employees emp ON emp.id = us.employeeID  \n" +
                "WHERE  cp.isDeleted = 0 AND cp.id = cpid  \n" +
                "LIMIT 1;  \n" +
                "  \n" +
                "SELECT  \n" +
                "	cpd.lineID AS PSLine,  \n" +
                "    cpd.id AS cpDetID,  \n" +
                "    ss.releaseNumber,  \n" +
                "    cpd.refCustPackingSlipID AS cpID,  \n" +
                "    cpd.partId,  \n" +
                "    IFNULL(cpd.shipQty,0) AS ShippedQty,  \n" +
                "    CASE WHEN c.partType = 4 THEN NULL ELSE  IFNULL(cpd.remainingQty,0) END AS RemainingQty,  \n" +
                "    cpd.custPOLineID AS POLine,  \n" +
                "    cpd.shippingNotes AS ShippingComment,  \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN  fun_getGenericCategoryNameByID(cpd.refChargesTypeID)  \n" +
                "		WHEN (c.iscustom = 1) THEN  c.custAssyPN  \n" +
                "		WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN  c.mfgPN  \n" +
                "		ELSE ''  END) AS PartNumber,  \n" +
                "	 CASE WHEN c.partType = 4 THEN '' ELSE  FUN_GETUOMABBREVIATIONBYID(c.uom) END AS UOM,  \n" +
                "    IFNULL(c.rev, '') AS Revision,  \n" +
                "    c.partType,  \n" +
                "    CONCAT(IFNULL(REPLACE(cpd.assyDescription,'  \n" +
                "','<br/>'), ''), '<br/>',  \n" +
                "            IFNULL(CONCAT(' ', rr.name), ''),  \n" +
                "            IFNULL(CONCAT(', ',  \n" +
                "                            cpd.standrads),  \n" +
                "                    ''),  \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton,  \n" +
                "            CASE WHEN cpd.poReleaseNumber IS NOT NULL THEN CONCAT('PO Release#: ',cpd.poReleaseNumber)  WHEN  cpd.refBlanketPONumber IS NOT NULL THEN CONCAT('Ref. Blanket PO#: ',cpd.refBlanketPONumber)  \n" +
                "            ELSE '' END  refBlanketPONumber  ,  \n" +
                "           replace(cpd.releaseNotes,'  \n" +
                "','<br/>')  AS releaseNotes  \n" +
                "FROM  \n" +
                "    customer_packingslip_det cpd  \n" +
                "        LEFT JOIN  \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id  \n" +
                "        AND cp.isDeleted = 0  \n" +
                "        LEFT JOIN  \n" +
                "    component c ON c.id = cpd.partid  \n" +
                "        LEFT JOIN  \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID  \n" +
                "        AND sd.isDeleted = 0  \n" +
                "        LEFT JOIN  \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID  \n" +
                "    LEFT JOIN  \n" +
                "    salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id  \n" +
                "        AND ra.partID = cpd.partId  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id  \n" +
                "WHERE  \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid AND cpd.refChargesTypeID IS NULL ;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5810,'2.00','V1','Sproc_GetCustomerPackingslipReportDetails-User Story 39977: Add Default Contact Person - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5810:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingSalesorderDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesorderDetails`(  \n" +
                "	IN psoposearch LONGTEXT,  \n" +
                "	IN salesorderID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "	-- Blanket Po option blanketPOOption 2 for Link BPO to Future PO(s)  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS   tempsalesorder AS  \n" +
                "		   SELECT som.id FROM salesordermst som  \n" +
                "		 WHERE som.id IN  \n" +
                "			  (SELECT sd.refSalesOrderID FROM salesorderdet sd JOIN COMPONENT c ON c.id=sd.partID AND c.isdeleted=0 WHERE  \n" +
                "			   EXISTS (SELECT 1 FROM salesordermst sm WHERE  sm.id=sd.refSalesOrderID AND (sm.isBlanketPO=0 OR (sm.isBlanketPO=1 AND sm.blanketPOOption!=2)) AND sm.isdeleted=0 )  \n" +
                "						AND sd.isdeleted=0  \n" +
                "						AND NOT EXISTS (SELECT 1 FROM customer_packingslip_det cpd  \n" +
                "								JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType='P'  \n" +
                "								WHERE cpd.refsalesorderDetid=sd.id AND cpd.remainingQty=0 AND cpd.isdeleted=0  \n" +
                "						   )) OR som.id=salesorderID;  \n" +
                "  \n" +
                " SET @pWhereClause=\"1=1\";  \n" +
                "  \n" +
                " SET @temp_Sproc_GetPendingSOPO=CONCAT(\"  \n" +
                "	select so.ID,  \n" +
                "		fun_GetFormattedMfgCode(m.mfgcode,m.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
                "		so.salesOrderNumber as `SO#`,so.poNumber as `PO#` , so.poRevision, so.customerID,so.billingAddressID,  \n" +
                "		so.termsID , so.shippingAddressID,  \n" +
                "		so.shippingMethodID,so.revision,so.shippingcomment,so.soDate, so.internalComment,  \n" +
                "		so.poDate,  \n" +
                "		(CASE WHEN so.freeOnBoardId IS NULL THEN m.freeOnBoardId ELSE so.freeOnBoardId END) freeOnBoardId ,  \n" +
                "		so.intermediateShipmentId,m.mfgcode,so.contactPersonID,  \n" +
                "		(CASE WHEN so.salesCommissionTo IS NULL THEN m.salesCommissionTo ELSE so.salesCommissionTo END) salesCommissionTo ,  \n" +
                "		concat(fun_GetFormattedMfgCode(m.mfgcode,m.mfgName,\",vMfgCodeFormat,\"), ' | ',so.salesOrderNumber,' | ',so.poNumber) pendingSOPO,  \n" +
                "		m.mfgName,  \n" +
                "		so.status,so.isLegacyPO,so.isRmaPO,so.isBlanketPO,so.blanketPOOption,  \n" +
                "        so.carrierID,so.carrierAccountNumber,  \n" +
                "        so.billingContactPersonID , so.shippingContactPersonID  \n" +
                "	from salesordermst so  \n" +
                "		join mfgcodemst m on m.id=so.customerID  \n" +
                "	where so.id in (select id from tempsalesorder) and so.isDeleted=0\");  \n" +
                "  \n" +
                "IF(salesorderID IS NOT NULL)THEN  \n" +
                "	SET @temp_Sproc_GetPendingSOPO=CONCAT(@temp_Sproc_GetPendingSOPO,' and so.id=',salesorderID);  \n" +
                "END IF;  \n" +
                "IF(psoposearch IS NOT NULL)THEN  \n" +
                "	SET @pWhereClause=CONCAT(\"pendingSOPO like '%\",psoposearch,\"%'\");  \n" +
                "END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"select * from ( \", @temp_Sproc_GetPendingSOPO,\" ) c  where \", @pWhereClause);  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5811,'2.00','V1','Sproc_GetPendingSalesorderDetails-User Story 39977: Add Default Contact Person - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5811:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDeatils;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname,\", vMfgCodeFormat,\") customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "			mfgmst.mfgCode custCode,  \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "            case when sm.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
                "            sm.isBlanketPO,  \n" +
                "cd.id AS customerslipId,  \n" +
                "case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "  fun_getAddressbyID(cd.intermediateShipmentId) markFor,  \n" +
                "  fun_getAddressbyID(cd.shipToId) shipTo,  \n" +
                "  fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "  fun_getFormattedContactPerson(billCP.firstName,billCP.middleName,billCP.lastName,billCP.division,billCP.email,billCP.phoneCountryCode, billCP.phone, billCP.phExtension, billCP.mobile, billCP.faxCountryCode, billCP.faxNumber) billToContactPerson,  \n" +
                "  fun_getFormattedContactPerson(shipCP.firstName,shipCP.middleName,shipCP.lastName,shipCP.division,shipCP.email,shipCP.phoneCountryCode, shipCP.phone, shipCP.phExtension, shipCP.mobile, shipCP.faxCountryCode, shipCP.faxNumber) shipToToContactPerson,  \n" +
                "  fun_getFormattedContactPerson(interCP.firstName,interCP.middleName,interCP.lastName,interCP.division,interCP.email,interCP.phoneCountryCode, interCP.phone, interCP.phExtension, interCP.mobile, interCP.faxCountryCode, interCP.faxNumber) markToToContactPerson,  \n" +
                "   concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "     (CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         fun_getUserNameByID(cd.updatedBy) updatedby,  \n" +
                "         fun_getUserNameByID(cd.createdBy) createdby,  \n" +
                "         fun_getRoleByID(cd.createByRoleId) createdbyRole,  \n" +
                "         fun_getRoleByID(cd.updateByRoleId) updatedbyRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdAt,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS lockedAt,  \n" +
                "         cpTrack.cpTrackNumber,  \n" +
                "         ifnull(cpTrack.cpTrackNumberCount,0) cpTrackNumberCount,  \n" +
                "         (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "                        cd.revision ,  \n" +
                "           ifnull(packingdtl.packingSlipCnt,0)  packingSlipCnt,  \n" +
                "           sm.rmaNumber,sm.isRmaPO,  \n" +
                "           (CASE when sm.isRmaPO = 1 then 'YES' when sm.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "           (CASE when sm.isRmaPO = 1 then 'Yes' when sm.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp,  \n" +
                "           fun_getGenericCategoryCodeNameByID(cd.carrierID)  carrierName,  \n" +
                "           cd.carrierID , cd.carrierAccountNumber  \n" +
                "		FROM customer_packingslip cd  \n" +
                "        LEFT JOIN mfgcodemst mfgmst ON mfgmst.id = cd.customerId and mfgmst.isDeleted = 0  \n" +
                "		LEFT JOIN salesordermst sm on sm.id=cd.refSalesOrderID and sm.isdeleted=0  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0  \n" +
                "		LEFT JOIN (  \n" +
                "		SELECT COUNT(cpTrack.trackNumber) cpTrackNumberCount,GROUP_CONCAT(cpTrack.trackNumber SEPARATOR ', ') cpTrackNumber,cpTrack.refCustPackingSlipID FROM customer_packing_slip_track_number cpTrack WHERE  cpTrack.isDeleted = 0 GROUP BY cpTrack.refCustPackingSlipID  \n" +
                "		) cpTrack on cpTrack.refCustPackingSlipID=cd.id  \n" +
                "		left join ( select count(1) packingSlipCnt,packingdtl.refCustPackingSlipID from customer_packingslip_det packingdtl where packingdtl.isDeleted = 0 GRoup by packingdtl.refCustPackingSlipID  \n" +
                "		) packingdtl on packingdtl.refCustPackingSlipID=cd.id  \n" +
                "        LEFT JOIN contactperson billCP ON billCP.personId = cd.billingContactPersonID and billCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson shipCP ON shipCP.personId = cd.shippingContactPersonID and shipCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson interCP ON interCP.personId = cd.intermediateContactPersonID and interCP.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "	 IF (pfilterStatus = 0) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    ELSE  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  \n" +
                "   IF pmfgPartID IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails= CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' AND cd.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pmfgPartID , ')) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "		padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,'''  or cd.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "        SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "		padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%''  or cd.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "  SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5812,'2.00','V1','Sproc_RetrieveCustomerPackingSlipDeatils-User Story 39977: Add Default Contact Person - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5812:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_SaveCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerInvoiceDetail`(  \n" +
                "	IN pTransType VARCHAR(5),  \n" +
                "	IN pInvoiceType VARCHAR(1),  \n" +
                "	IN pInvoiceID INT,  \n" +
                "	IN pInvData JSON,  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "	IN puserID INT,  \n" +
                "	IN puserRoleID INT ,  \n" +
                "	IN pCustomerInvoiceSystemIDTypeConst VARCHAR(50),  \n" +
                "	IN pSystemId VARCHAR(20)  ,  \n" +
                "	IN pPackingSlipType INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_maxCurrSystemIDForInv VARCHAR(20) ;  \n" +
                "	DECLARE v_prefix VARCHAR(20);  \n" +
                "	DECLARE vTermsDays INT ;  \n" +
                "	DECLARE v_incrementI INT;  \n" +
                "	DECLARE v_commissionPercentage DECIMAL(10,2);  \n" +
                "	DECLARE vTotRefundIssuedOfCreditMemo DECIMAL(18,8);  \n" +
                "	DECLARE vIsAgreedRefundLessThanTotIssued TINYINT;  \n" +
                "  \n" +
                "  \n" +
                "	SET vIsAgreedRefundLessThanTotIssued = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customerInvoice;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customerInvoice AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "			pInvData,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",  \n" +
                "				`invoiceID` INT PATH \"$.invoiceID\",  \n" +
                "				`packingSlipID` INT PATH \"$.packingSlipID\",  \n" +
                "				`packingSlipType` INT PATH \"$.packingSlipType\",  \n" +
                "				`customerID` INT PATH \"$.customerID\" ,  \n" +
                "				`status` INT PATH \"$.status\",  \n" +
                "				`subStatus` INT PATH \"$.subStatus\",  \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",  \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",  \n" +
                "				`poDate` DATE PATH \"$.poDate\",  \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",  \n" +
                "				`soDate` DATE PATH \"$.soDate\",  \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,  \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,  \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,  \n" +
                "				`invoiceNumber` VARCHAR(50) PATH \"$.invoiceNumber\" ,  \n" +
                "				`invoiceDate` DATE PATH \"$.invoiceDate\" ,  \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",  \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,  \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,  \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,  \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,  \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,  \n" +
                "				`billToId` INT PATH \"$.billToId\" ,  \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,  \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,  \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,  \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,  \n" +
                "				`termsId` INT PATH \"$.termsId\" ,  \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,  \n" +
                "				`creditMemoNumber` VARCHAR(50) PATH \"$.creditMemoNumber\" ,  \n" +
                "				`creditMemoDate` DATE PATH \"$.creditMemoDate\" ,  \n" +
                "				`refDebitMemoNumber` VARCHAR(50) PATH \"$.refDebitMemoNumber\" ,  \n" +
                "				`refDebitMemoDate` DATE PATH \"$.refDebitMemoDate\",  \n" +
                "				`rmaNumber`  VARCHAR(50) PATH \"$.rmaNumber\" ,  \n" +
                "				`contactPersonId` INT PATH \"$.contactPersonId\",  \n" +
                "				`revision` VARCHAR(10) PATH \"$.revision\",  \n" +
                "				`isZeroValue` TINYINT PATH \"$.isZeroValue\",  \n" +
                "				`isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\",  \n" +
                "				`poRevision` VARCHAR(50) PATH \"$.poRevision\" ,  \n" +
                "				`isMarkForRefund` TINYINT PATH \"$.isMarkForRefund\",  \n" +
                "				`agreedRefundAmt` DECIMAL(18,8) PATH \"$.agreedRefundAmt\",  \n" +
                "				`isAskForVersionConfirmation` TINYINT PATH \"$.isAskForVersionConfirmation\",  \n" +
                "				`refundStatus` VARCHAR(5) PATH \"$.refundStatus\" ,  \n" +
                "				`carrierID` INT PATH \"$.carrierID\",  \n" +
                "				`carrierAccountNumber` VARCHAR(50) PATH \"$.carrierAccountNumber\"  ,  \n" +
                "                `billingContactPersonID` INT PATH \"$.billingContactPersonID\",  \n" +
                "                `billingContactPerson` VARCHAR(1000) PATH \"$.billingContactPerson\",  \n" +
                "                `shippingContactPersonID` INT PATH \"$.shippingContactPersonID\",  \n" +
                "                `shippingContactPerson` VARCHAR(1000) PATH \"$.shippingContactPerson\",  \n" +
                "                `intermediateContactPersonID` INT PATH \"$.intermediateContactPersonID\",  \n" +
                "                `intermediateContactPerson` VARCHAR(1000) PATH \"$.intermediateContactPerson\"  \n" +
                "			)  \n" +
                "		) AS CustInv_JT;  \n" +
                "  \n" +
                "  \n" +
                "	SELECT  termsDays INTO 	vTermsDays  \n" +
                "	FROM genericCategory gc  \n" +
                "	WHERE gc.gencCategoryID IN (SELECT temp.termsId FROM temp_customerInvoice temp)  \n" +
                "	AND categoryType = 'Payment Terms';  \n" +
                "  \n" +
                "	IF (pInvoiceID IS NULL)THEN  \n" +
                "			/* get max identity value of 'CustomerInvoiceSystemID' for systemID */  \n" +
                "			/* SELECT `maxValue`,prefix INTO v_maxCurrSystemIDForInv,v_prefix  \n" +
                "			FROM `identity`  \n" +
                "			WHERE `type` = pCustomerInvoiceSystemIDTypeConst ; */  \n" +
                "  \n" +
                "			INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "				packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,  \n" +
                "				packingSlipComment,headerComment,sorevision,  \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,  \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,  \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus, paymentStatus ,  \n" +
                "				totalAmount,termsDays, freeOnBoardName, creditMemoNumber,creditMemoDate ,  \n" +
                "				refDebitMemoNumber,refDebitMemoDate, rmaNumber , billToId,shipToId ,intermediateShipmentId,  \n" +
                "				contactPersonId, revision, isZeroValue ,isAlreadyPublished, poRevision,isAskForVersionConfirmation,  \n" +
                "				refundStatus,carrierID,carrierAccountNumber,  \n" +
                "                billingContactPersonID,billingContactPerson,  \n" +
                "                shippingContactPersonID,shippingContactPerson,  \n" +
                "                intermediateContactPersonID,intermediateContactPerson)  \n" +
                "			SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "					packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,  \n" +
                "					packingSlipComment,headerComment,sorevision,  \n" +
                "					freeOnBoardId,puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,  \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,  \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus , 'PE' ,  \n" +
                "					IFNULL(totalAmount,0),vTermsDays ,   fun_getFOBById(freeOnBoardId) ,creditMemoNumber,creditMemoDate ,  \n" +
                "					refDebitMemoNumber,refDebitMemoDate , rmaNumber  , billToId,shipToId ,intermediateShipmentId ,  \n" +
                "					contactPersonId,  LPAD(IFNULL(revision,0),2,'0'), IFNULL(isZeroValue,0), isAlreadyPublished, poRevision ,0,  \n" +
                "					refundStatus,carrierID,carrierAccountNumber,  \n" +
                "                     billingContactPersonID,billingContactPerson,  \n" +
                "					shippingContactPersonID,shippingContactPerson,  \n" +
                "					intermediateContactPersonID,intermediateContactPerson  \n" +
                "			FROM temp_customerInvoice ;  \n" +
                "  \n" +
                "		 SET pInvoiceID=LAST_INSERT_ID();  \n" +
                "  \n" +
                "		 UPDATE customer_packingslip  \n" +
                "		 SET refCustInvoiceID=LAST_INSERT_ID(),packingSlipStatus='A'  \n" +
                "		 WHERE id= pPackingSlipID;  \n" +
                "  \n" +
                "	 IF pPackingSlipID IS NOT NULL THEN  \n" +
                "			-- FOR PO/SO flow quote related data not store in packing slip. retrieve it from sales order  \n" +
                "			 INSERT INTO customer_packingslip_det(refCustPackingSlipID,refSalesorderDetid,partId,custPOLineID,  \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  extendedPrice,  \n" +
                "					shippingNotes,whID,binID,createdBy,updatedBy,createdAt, updatedAt,  \n" +
                "					createByRoleId,updateByRoleId,shippingId,reflineID,otherCharges,  \n" +
                "					assyDescription,lineID, internalComment, quoteNumber,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,  \n" +
                "		    refRFQGroupID,refRFQQtyTurnTimeID, isZeroValue,releaseNotes)  \n" +
                "			  SELECT LAST_INSERT_ID(),cpd.refSalesorderDetid,cpd.partId,cpd.custPOLineID,  \n" +
                "					cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,  \n" +
                "		    IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice),  \n" +
                "		    (cpd.shipQty * (IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice))),  \n" +
                "					cpd.shippingNotes,cpd.whID,cpd.binID,  \n" +
                "		    puserID,puserID,  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),  \n" +
                "					puserRoleID,puserRoleID,  \n" +
                "		    cpd.shippingId,cpd.reflineID,cpd.otherCharges,  \n" +
                "					cpd.assyDescription, cpd.lineID, cpd.internalComment ,  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.quoteNumber,cpd.quoteNumber),  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.quoteFrom,cpd.quoteFrom),  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID,cpd.refAssyQtyTurnTimeID),  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText),  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.refRFQGroupID,cpd.refRFQGroupID),  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) ,  \n" +
                "		    cpd.isZeroValue, cpd.releaseNotes  \n" +
                "			FROM customer_packingslip_det   cpd  \n" +
                "	    LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0  \n" +
                "	    LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0  \n" +
                "			WHERE cpd.refCustPackingSlipID= pPackingSlipID  \n" +
                "			AND cpd.isDeleted = 0;  \n" +
                "  \n" +
                "	    IF pPackingSlipType = 2 THEN -- PO/SO INV  \n" +
                "	    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,  \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,  \n" +
                "							quoted_commissionValue, poQty, partId, refComponentSalesPriceBreakID,  \n" +
                "							quoted_unitPrice, quotedQty,commissionCalculateFrom,`type`, isDeleted,createdBy,createdAt,createByRoleId,salesCommissionNotes)  \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,	sca.unitPrice,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.quoted_commissionPercentage,  \n" +
                "							sca.quoted_commissionValue, cpd.shipQty, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.quoted_unitPrice,sca.quotedQty,sca.commissionCalculateFrom,sca.type, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,salesCommissionNotes  \n" +
                "					FROM salesorderdet_commission_attribute_mstdet sca  \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;  \n" +
                "					-- child records  \n" +
                "				INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,  \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,  \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,  \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)  \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,(SELECT id FROM customer_packingslip_commission_attribute_mstdet WHERE refCustPackingSlipDetID=cpd.id AND `type`=2 AND isdeleted=0 LIMIT 1),sca.unitPrice, sca.refQuoteAttributeId,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,  \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.org_unitPrice, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID  \n" +
                "					FROM salesorderdet_commission_attribute sca  \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;  \n" +
                "  \n" +
                "	     ELSEIF pPackingSlipType = 1 THEN -- MISC packing slip INV  \n" +
                "					-- SP to generate line wise sales commission.  \n" +
                "		    CALL Sproc_GetSalesCommissionDetailsForMultiplePart(pInvoiceID);  \n" +
                "		-- Sales Price details for Part master  \n" +
                "		    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,  \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,  \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,  \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)  \n" +
                "					SELECT sca.refCustPackingSlipDetID,	sca.unitPrice,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,  \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID  \n" +
                "					FROM temp_salesCommission sca  \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=1;  \n" +
                "  \n" +
                "  \n" +
                "					-- save sales commission details for RFQ  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_salescommission_mst;  \n" +
                "			     CREATE TEMPORARY TABLE IF NOT EXISTS temp_salescommission_mst AS  \n" +
                "			       SELECT   sca.refCustPackingSlipDetID FROM temp_salesCommission sca  \n" +
                "			       JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=2 GROUP BY sca.refCustPackingSlipDetID;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO @mstCommissionCount FROM  temp_salescommission_mst;  \n" +
                "			SET v_incrementI=0;  \n" +
                "			temp_commission_Det: WHILE v_incrementI < @mstCommissionCount DO  \n" +
                "				SELECT refCustPackingSlipDetID INTO @refCustPackingSlipDetID FROM temp_salescommission_mst LIMIT v_incrementI,1;  \n" +
                "  \n" +
                "				SELECT unitPrice INTO @totalUnitPrice FROM customer_packingslip_det WHERE id=@refCustPackingSlipDetID;  \n" +
                "  \n" +
                "				SELECT SUM(commissionValue) INTO @totalCommissionValue FROM  \n" +
                "				temp_salesCommission WHERE refCustPackingSlipDetID=@refCustPackingSlipDetID;  \n" +
                "  \n" +
                "				IF(@totalCommissionValue>(@totalUnitPrice/2))THEN  \n" +
                "					SET @totalCommissionValue=(@totalUnitPrice/2);  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET v_commissionPercentage=((@totalUnitPrice - (@totalUnitPrice - @totalCommissionValue)) *100/ (@totalUnitPrice - @totalCommissionValue));  \n" +
                "  \n" +
                "				INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,  \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,  \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,  \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId,rfqAssyID)  \n" +
                "					SELECT sca.refCustPackingSlipDetID,	@totalUnitPrice,  \n" +
                "							v_commissionPercentage, @totalCommissionValue, v_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,  \n" +
                "							@totalCommissionValue, 'All', sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							@totalUnitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,sca.rfqAssyID  \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID LIMIT 1;  \n" +
                "					-- sales commission child details  \n" +
                "					SELECT LAST_INSERT_ID() INTO @lstID;  \n" +
                "					INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,  \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,  \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,  \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)  \n" +
                "					SELECT sca.refCustPackingSlipDetID,@lstID,sca.unitPrice, sca.refQuoteAttributeId,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,  \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID  \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID;  \n" +
                "  \n" +
                "					SET v_incrementI=v_incrementI+1;  \n" +
                "  \n" +
                "			END WHILE temp_commission_Det;  \n" +
                "	     END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "  \n" +
                "  \n" +
                "		IF pInvoiceType = 'I' AND pTransType = 'I' THEN  \n" +
                "			UPDATE customer_packingslip cp  \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id  \n" +
                "			SET cp.invoiceDate= tci.invoiceDate,  \n" +
                "				cp.`status`= tci.status,  \n" +
                "				cp.subStatus = tci.subStatus,  \n" +
                "				cp.headerComment= tci.headerComment,  \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,  \n" +
                "				cp.totalAmount = IFNULL(tci.totalAmount,0) ,  \n" +
                "				cp.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				cp.updatedBy = puserID,  \n" +
                "				cp.updateByRoleId = puserRoleID  ,  \n" +
                "				cp.billingAddress= tci.billingAddress,  \n" +
                "				cp.shippingAddress= tci.shippingAddress,  \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,  \n" +
                "				cp.contactPersonId = tci.contactPersonId,  \n" +
                "				cp.billToId = tci.billToId,  \n" +
                "				cp.shipToId  = tci.shipToId,  \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId,  \n" +
                "				cp.revision = LPAD(tci.revision,2,'0'),  \n" +
                "				cp.isZeroValue = IFNULL(tci.isZeroValue,0)  ,  \n" +
                "				cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),  \n" +
                "				cp.poRevision = tci.poRevision ,  \n" +
                "				cp.isAskForVersionConfirmation = tci.isAskForVersionConfirmation,  \n" +
                "				cp.carrierID = tci.carrierID,  \n" +
                "				cp.carrierAccountNumber = tci.carrierAccountNumber,  \n" +
                "                cp.billingContactPersonID = tci.billingContactPersonID,  \n" +
                "                cp.billingContactPerson = tci.billingContactPerson,  \n" +
                "                cp.shippingContactPersonID = tci.shippingContactPersonID,  \n" +
                "                cp.shippingContactPerson = tci.shippingContactPerson,  \n" +
                "                 cp.intermediateContactPersonID = tci.intermediateContactPersonID,  \n" +
                "                cp.intermediateContactPerson = tci.intermediateContactPerson  \n" +
                "			WHERE cp.id=pInvoiceID  \n" +
                "			AND cp.transType = pTransType;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "  \n" +
                "			IF (pTransType = 'C') THEN  \n" +
                "				/* get total refunded amount till now  */  \n" +
                "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedOfCreditMemo  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refRefundCustCreditMemoID = pInvoiceID  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "				;  \n" +
                "  \n" +
                "				/* check agreed refund amount is less than total refunded amount , if yes then give error  */  \n" +
                "				IF (IFNULL((SELECT agreedRefundAmt FROM temp_customerInvoice),0) < vTotRefundIssuedOfCreditMemo) THEN  \n" +
                "					SET vIsAgreedRefundLessThanTotIssued = 1;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF (vIsAgreedRefundLessThanTotIssued = 0) THEN  \n" +
                "				# in case of tariff invoice & credit memo update all other field  \n" +
                "				UPDATE customer_packingslip  cp  \n" +
                "					JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id  \n" +
                "				SET	cp.status= tci.status,  \n" +
                "					cp.subStatus= tci.subStatus,  \n" +
                "					cp.poNumber= tci.poNumber,  \n" +
                "					cp.poDate= tci.poDate,  \n" +
                "					cp.soNumber= tci.soNumber,  \n" +
                "					cp.soDate= tci.soDate,  \n" +
                "					cp.packingSlipNumber= tci.packingSlipNumber,  \n" +
                "					cp.packingSlipDate= tci.packingSlipDate,  \n" +
                "					cp.invoiceDate= tci.invoiceDate,  \n" +
                "					cp.shippingMethodID= tci.shippingMethodID,  \n" +
                "					cp.headerComment= tci.headerComment,  \n" +
                "					cp.packingSlipComment= tci.packingSlipComment,  \n" +
                "					cp.billingAddress= tci.billingAddress,  \n" +
                "					cp.shippingAddress= tci.shippingAddress,  \n" +
                "					cp.intermediateAddress= tci.intermediateAddress,  \n" +
                "					cp.totalAmount= IFNULL(tci.totalAmount,0),  \n" +
                "					cp.freeOnBoardId= tci.freeOnBoardId,  \n" +
                "					cp.termsId= tci.termsId,  \n" +
                "					cp.termsDays = vTermsDays,  \n" +
                "					cp.salesCommissionTo= tci.salesCommissionTo ,  \n" +
                "					cp.refDebitMemoNumber = tci.refDebitMemoNumber,  \n" +
                "					cp.refDebitMemoDate = tci.refDebitMemoDate,  \n" +
                "					cp.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "					cp.updatedBy = puserID,  \n" +
                "					cp.updateByRoleId = puserRoleID,  \n" +
                "					cp.rmaNumber= tci.rmaNumber,  \n" +
                "					cp.billToId = tci.billToId,  \n" +
                "					cp.shipToId  = tci.shipToId,  \n" +
                "					cp.intermediateShipmentId = tci.intermediateShipmentId ,  \n" +
                "					cp.invoiceNumber = tci.invoiceNumber ,  \n" +
                "					cp.contactPersonId = tci.contactPersonId,  \n" +
                "					cp.revision =  LPAD(tci.revision,2,'0'),  \n" +
                "					cp.isZeroValue = IFNULL(tci.isZeroValue,0),  \n" +
                "					cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),  \n" +
                "					cp.poRevision = tci.poRevision ,  \n" +
                "					cp.isMarkForRefund = tci.isMarkForRefund,  \n" +
                "					cp.agreedRefundAmt = IFNULL(tci.agreedRefundAmt,0),  \n" +
                "					cp.isAskForVersionConfirmation = tci.isAskForVersionConfirmation,  \n" +
                "					cp.refundStatus = (CASE WHEN pTransType = 'C' THEN  \n" +
                "								(CASE WHEN tci.isMarkForRefund = 1 THEN  \n" +
                "									(CASE WHEN vTotRefundIssuedOfCreditMemo = 0 THEN 'PE'  \n" +
                "										WHEN vTotRefundIssuedOfCreditMemo < ABS(IFNULL(tci.totalAmount,0)) THEN 'PR'  \n" +
                "										WHEN vTotRefundIssuedOfCreditMemo = ABS(IFNULL(tci.totalAmount,0)) THEN 'FR'  \n" +
                "									   END)  \n" +
                "								ELSE 'NA' END)  \n" +
                "							ELSE NULL END)  ,  \n" +
                "					cp.carrierID = tci.carrierID,  \n" +
                "					cp.carrierAccountNumber = tci.carrierAccountNumber,  \n" +
                "                    cp.billingContactPersonID = tci.billingContactPersonID,  \n" +
                "                cp.billingContactPerson = tci.billingContactPerson,  \n" +
                "                cp.shippingContactPersonID = tci.shippingContactPersonID,  \n" +
                "                cp.shippingContactPerson = tci.shippingContactPerson,  \n" +
                "                 cp.intermediateContactPersonID = tci.intermediateContactPersonID,  \n" +
                "                cp.intermediateContactPerson = tci.intermediateContactPerson  \n" +
                "				 WHERE cp.id = pInvoiceID  \n" +
                "				 AND cp.transType = pTransType;  \n" +
                "  \n" +
                "			 END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "  \n" +
                "	  /* Resp[0] - created invoice/credit memo mst ID  */  \n" +
                "	  SELECT pInvoiceID invoiceID;  \n" +
                "	/* Resp[1] - detail Id  */  \n" +
                "	SELECT id  detId ,refSalesorderDetId , reflineID  \n" +
                "	FROM customer_packingslip_det  \n" +
                "	WHERE  refCustPackingSlipID = pInvoiceID  \n" +
                "	AND isDeleted = 0;  \n" +
                "  \n" +
                "	/* Resp[2] - store procedure status  */  \n" +
                "	  IF (vIsAgreedRefundLessThanTotIssued > 0) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	  ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "	  /* Resp[3] -  Agreed Refund Amount Less Than Total Issued Amout */  \n" +
                "	IF (vIsAgreedRefundLessThanTotIssued > 0) THEN  \n" +
                "		SELECT 1 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfCreditMemo AS totRefundIssuedAgainstCreditMemo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfCreditMemo AS totRefundIssuedAgainstCreditMemo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	  DROP TEMPORARY TABLE IF EXISTS temp_part_data ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5813,'2.00','V1','Sproc_SaveCustomerInvoiceDetail-User Story 39977: Add Default Contact Person - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5813:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-01-2022*********************************** */
                "DROP TRIGGER Trg_AU_customer_packingslip;  \n" +
                "CREATE TRIGGER `Trg_AU_customer_packingslip` AFTER UPDATE ON `customer_packingslip` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTransTypeText VARCHAR(20);  \n" +
                "	SET vTransTypeText= IF(NEW.transType='I','Invoice','Credit Memo');  \n" +
                "  \n" +
                "    IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO#',CAST(OLD.soNumber AS CHAR),  \n" +
                "       CAST(NEW.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO#',CAST(OLD.poNumber AS CHAR),  \n" +
                "       CAST(NEW.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO Date',CAST(DATE_FORMAT(OLD.poDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.poDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Date', CAST(DATE_FORMAT(OLD.soDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.soDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Contact Person',(SELECT CONCAT(firstName,' ',lastName) FROM contactperson WHERE personId=OLD.contactPersonId),  \n" +
                "      (SELECT CONCAT(firstName,' ',lastName) FROM contactperson WHERE personId=NEW.contactPersonId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipComment,0) != IFNULL(NEW.packingSlipComment,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Shipping Comments', OLD.packingSlipComment,  \n" +
                "       NEW.packingSlipComment, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.substatus ,0) != IFNULL(NEW.substatus ,0) THEN  \n" +
                "	IF(NEW.transType='P')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft'WHEN OLD.substatus=2 THEN 'Ready To Ship'WHEN OLD.substatus=3 THEN 'Waiting For Shipping Label'WHEN OLD.substatus=4 THEN 'Waiting For Pickup' WHEN OLD.substatus= 6 THEN 'Published' WHEN OLD.substatus= 5 THEN 'Shipped'  ELSE '' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Draft'WHEN NEW.substatus=2 THEN 'Ready To Ship'WHEN NEW.substatus=3 THEN 'Waiting For Shipping Label'WHEN NEW.substatus=4 THEN 'Waiting For Pickup' ELSE 'Shipped' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	ELSEIF (NEW.transType='I')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Shipped - Not Invoiced' WHEN OLD.substatus=2 THEN 'Invoiced' WHEN Old.subStatus=3 THEN 'Corrected and Invoiced'  WHEN Old.subStatus=4 THEN 'Draft' WHEN Old.subStatus=5 THEN 'Published' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Shipped - Not Invoiced' WHEN NEW.substatus=2 THEN 'Invoiced' WHEN NEW.subStatus=3 THEN 'Corrected and Invoiced'  WHEN NEW.subStatus=4 THEN 'Draft' WHEN NEW.subStatus=5 THEN 'Published' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	ELSEIF (NEW.transType='C')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft' WHEN OLD.substatus=2 THEN 'Published' ELSE '' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Draft' WHEN NEW.substatus=2 THEN 'Published' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippingMethodId ,0) != IFNULL(NEW.shippingMethodId ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Shipping Method', fun_getGenericCategoryNameByID(OLD.shippingMethodId),  \n" +
                "       fun_getGenericCategoryNameByID(NEW.shippingMethodId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.sorevision ,0) != IFNULL(NEW.sorevision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Version', CAST(OLD.sorevision AS CHAR),  \n" +
                "       CAST(NEW.sorevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.freeOnBoardId ,0) != IFNULL(NEW.freeOnBoardId ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'FOB',(SELECT `name` FROM freeonboardmst WHERE id=OLD.freeOnBoardId) ,  \n" +
                "     (SELECT `name` FROM freeonboardmst WHERE id=NEW.freeOnBoardId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.invoiceNumber ,0) != IFNULL(NEW.invoiceNumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice#',CAST(OLD.invoiceNumber AS CHAR) ,  \n" +
                "     CAST(NEW.invoiceNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.invoiceDate ,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice Date',CAST(DATE_FORMAT(OLD.invoiceDate, '%m/%d/%y') AS CHAR) ,  \n" +
                "     CAST(DATE_FORMAT(NEW.invoiceDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.headerComment ,0) != IFNULL(NEW.headerComment,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Internal Notes',CAST(OLD.headerComment AS CHAR),  \n" +
                "     CAST(NEW.headerComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip Date',CAST(DATE_FORMAT(OLD.packingSlipDate, '%m/%d/%y') AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.packingSlipDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip#',CAST(OLD.packingSlipNumber AS CHAR),  \n" +
                "		CAST(NEW.packingSlipNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Terms',  \n" +
                "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
                "			FROM genericcategory  WHERE gencCategoryID = OLD.termsID) ,  \n" +
                "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
                "			FROM genericcategory  WHERE gencCategoryID = NEW.termsID) ,  \n" +
                "	fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Sales Commission To',  \n" +
                "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = OLD.salesCommissionTo),  \n" +
                "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = NEW.salesCommissionTo),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.totalAmount ,0) != IFNULL(NEW.totalAmount ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Total Amount ($)',  \n" +
                "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(OLD.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(OLD.totalAmount,2) AS CHAR) END,  \n" +
                "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(NEW.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(NEW.totalAmount,2) AS CHAR) END,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isLocked,0) != IFNULL(NEW.isLocked,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Locked',(CASE WHEN OLD.isLocked=0 THEN 'No' WHEN OLD.isLocked=1 THEN 'Yes' ELSE '' END),  \n" +
                "      (CASE WHEN NEW.isLocked=0 THEN 'No' WHEN NEW.isLocked=1 THEN 'Yes' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedAt ,0) != IFNULL(NEW.lockedAt ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked Date' ELSE 'Locked Date' END),'',  \n" +
                "		(CASE WHEN OLD.isLocked = 1 THEN fun_DatetimetoUTCDateTime() ELSE NEW.lockedAt END),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName(\"CUSTOMER_PACKINGSLIP\",'lockedAt'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedBy ,0) != IFNULL(NEW.lockedBy ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked By' ELSE 'Locked By' END),'',  \n" +
                "		(CASE WHEN OLD.isLocked = 1 THEN fun_getUserNameByID(NEW.updatedBy) ELSE fun_getUserNameByID(NEW.lockedBy) END) ,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "   IF IFNULL(OLD.billingAddress ,0) != IFNULL(NEW.billingAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Bill To',CAST(OLD.billingAddress AS CHAR),  \n" +
                "		CAST(NEW.billingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippingAddress ,0) != IFNULL(NEW.shippingAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ship To',CAST(OLD.shippingAddress AS CHAR),  \n" +
                "		CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.intermediateAddress ,0) != IFNULL(NEW.intermediateAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Mark For',CAST(OLD.intermediateAddress AS CHAR) ,  \n" +
                "		CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.creditMemoNumber ,0) != IFNULL(NEW.creditMemoNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Number',CAST(OLD.creditMemoNumber AS CHAR),  \n" +
                "		CAST(NEW.creditMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Date',CAST(DATE_FORMAT(OLD.creditMemoDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.creditMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refDebitMemoNumber ,0) != IFNULL(NEW.refDebitMemoNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo#',CAST(OLD.refDebitMemoNumber AS CHAR) ,  \n" +
                "		CAST(NEW.refDebitMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refDebitMemoDate,0) != IFNULL(NEW.refDebitMemoDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo Date',CAST(DATE_FORMAT(OLD.refDebitMemoDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.refDebitMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaNumber ,0) != IFNULL(NEW.rmaNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'RMA#',CAST(OLD.rmaNumber AS CHAR) ,  \n" +
                "		CAST(NEW.rmaNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "   IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Revision',OLD.revision  ,  \n" +
                "		NEW.revision , fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),CONCAT('Confirming Zero Value',vTransTypeText),(CASE WHEN OLD.isZeroValue =0 THEN 'False' ELSE 'True' END),  \n" +
                "	   (CASE WHEN NEW.isZeroValue =0 THEN 'False' ELSE 'True' END),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.poRevision,0) != IFNULL(NEW.poRevision,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'PO Revision',OLD.poRevision,NEW.poRevision,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isMarkForRefund,0) != IFNULL(NEW.isMarkForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Mark For Refund',OLD.isMarkForRefund,NEW.isMarkForRefund,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.agreedRefundAmt,0) != IFNULL(NEW.agreedRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Agreed Refund Amt',OLD.agreedRefundAmt,NEW.agreedRefundAmt,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "      IF IFNULL(OLD.carrierID ,0) != IFNULL(NEW.carrierID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Carrier', fun_getGenericCategoryNameByID(OLD.carrierID),  \n" +
                "       fun_getGenericCategoryNameByID(NEW.carrierID), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.carrierAccountNumber ,0) != IFNULL(NEW.carrierAccountNumber ,0) THEN  \n" +
                "		 INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Carrier Account# ', CAST(OLD.carrierAccountNumber AS CHAR),  \n" +
                "		   CAST(NEW.carrierAccountNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.billingContactPersonID,0) != IFNULL(NEW.billingContactPersonID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'BillTo Contact Person',  \n" +
                "        fun_contactPersonDetailByID(OLD.billingContactPersonID),fun_contactPersonDetailByID(NEW.billingContactPersonID),  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shippingContactPersonID,0) != IFNULL(NEW.shippingContactPersonID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'ShipTo Contact Person',  \n" +
                "        fun_contactPersonDetailByID(OLD.shippingContactPersonID),fun_contactPersonDetailByID(NEW.shippingContactPersonID),  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.intermediateContactPersonID,0) != IFNULL(NEW.intermediateContactPersonID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Mark For Contact Person',  \n" +
                "        fun_contactPersonDetailByID(OLD.intermediateContactPersonID),fun_contactPersonDetailByID(NEW.intermediateContactPersonID),  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "   END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5814,'2.00','V1','Trg_AU_customer_packingslip-User Story 39977: Add Default Contact Person - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5814:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 13-01-2022 **************************** */
                "ALTER TABLE supplier_quote_mst ADD COLUMN billingAddress varchar(1000) AFTER  billingAddressID;  \n" +
                "ALTER TABLE supplier_quote_mst ADD COLUMN shippingAddress varchar(1000) AFTER  shippingAddressID;  \n" +
                "ALTER TABLE supplier_quote_mst ADD COLUMN billingContactPerson varchar(1000)  AFTER  billingAddress;  \n" +
                "ALTER TABLE supplier_quote_mst ADD COLUMN billingContactPersonID int AFTER  billingContactPerson;  \n" +
                "ALTER TABLE supplier_quote_mst ADD COLUMN shippingContactPerson varchar(1000) AFTER  shippingAddress;  \n" +
                "ALTER TABLE supplier_quote_mst ADD COLUMN shippingContactPersonID int AFTER  shippingContactPerson;  \n" +
                "ALTER TABLE supplier_quote_mst  \n" +
                "                ADD CONSTRAINT FK_supplier_quote_mst_billingContactPersonID  \n" +
                "                FOREIGN KEY (billingContactPersonID) REFERENCES contactperson(personId);  \n" +
                "ALTER TABLE supplier_quote_mst  \n" +
                "                ADD CONSTRAINT FK_supplier_quote_mst_shippingContactPersonID  \n" +
                "                FOREIGN KEY (shippingContactPersonID) REFERENCES contactperson(personId);  \n" +
                /* **************************** Add Script Version -> 13-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5815,'2.00','V1','User Story 39319: Supplier Quote Delete/Address functionality related changes - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5815:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 13-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_SupplierQuoteCopy`;  \n" +
                "CREATE PROCEDURE `Sproc_SupplierQuoteCopy`(  \n" +
                "	IN pSupplierQuoteID INT,  \n" +
                "	IN pSupplierQuotePartDetID INT,  \n" +
                "    IN pNewQuoteNumber VARCHAR(50),  \n" +
                "	IN pNewQuoteDate DATE,  \n" +
                "    IN pNewReferences VARCHAR(255),  \n" +
                "    IN pUserId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE V_EXIST INT;  \n" +
                "    DECLARE V_INSERTEDSQID INT;  \n" +
                "    DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "    START TRANSACTION;  \n" +
                "    IF(pSupplierQuotePartDetID IS NOT NULL) THEN  \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_parts_det (supplierQuoteMstID,partID,supplierPartID,isActive,createdBy, updatedBy,createdAt,updatedAt)  \n" +
                "		SELECT pSupplierQuoteID,sqpd.partID,sqpd.supplierPartID,sqpd.isActive,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()  \n" +
                "		FROM supplier_quote_parts_det sqpd  \n" +
                "		WHERE sqpd.id = pSupplierQuotePartDetID AND sqpd.isDeleted = 0;  \n" +
                "  \n" +
                "		SET V_INSERTEDSQID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_part_attribute(supplierQuotePartDetID,attributeID,createdBy, updatedBy,createdAt,updatedAt)  \n" +
                "		SELECT V_INSERTEDSQID,sqpa.attributeID,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()  \n" +
                "		FROM supplier_quote_part_attribute sqpa  \n" +
                "		WHERE sqpa.supplierQuotePartDetID = pSupplierQuotePartDetID AND sqpa.isDeleted = 0;  \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_part_price(supplierQuotePartDetID,itemNumber,qty,leadTime,UnitOfTime,UnitPrice,`min`,mult,stock,packageID,reeling,NCNR,createdBy, updatedBy,createdAt,updatedAt)  \n" +
                "		SELECT V_INSERTEDSQID,sqpp.itemNumber,sqpp.qty,sqpp.leadTime,sqpp.UnitOfTime,sqpp.UnitPrice,sqpp.`min`,sqpp.mult,sqpp.stock,sqpp.packageID,sqpp.reeling,sqpp.NCNR,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()  \n" +
                "		FROM supplier_quote_part_price sqpp  \n" +
                "		WHERE sqpp.supplierQuotePartDetID = pSupplierQuotePartDetID AND sqpp.isDeleted = 0;  \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_part_price_attribute(supplierQuotePartPriceID,attributeID,Price,createdBy, updatedBy,createdAt,updatedAt)  \n" +
                "		SELECT newRec.id,sqppa.attributeID,sqppa.Price,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()  \n" +
                "		FROM supplier_quote_part_price_attribute sqppa  \n" +
                "		JOIN  \n" +
                "		(SELECT sqp.id,sqpd.supplierQuoteMstID,sqpd.partID,sqp.supplierQuotePartDetID,sqp.itemNumber  \n" +
                "		FROM supplier_quote_part_price sqp  \n" +
                "		LEFT JOIN supplier_quote_parts_det sqpd ON sqp.supplierQuotePartDetID = sqpd.id AND sqpd.isDeleted = 0  \n" +
                "		WHERE sqpd.id=pSupplierQuotePartDetID AND sqp.isDeleted = 0  \n" +
                "		) AS oldRec ON oldRec.id = sqppa.supplierQuotePartPriceID  \n" +
                "		LEFT JOIN (SELECT sqp.id,sqpd.supplierQuoteMstID,sqpd.partID,sqp.supplierQuotePartDetID,sqp.itemNumber FROM supplier_quote_part_price sqp  \n" +
                "		LEFT JOIN supplier_quote_parts_det sqpd ON sqp.supplierQuotePartDetID = sqpd.id AND sqpd.isDeleted = 0  \n" +
                "		WHERE sqpd.id=V_INSERTEDSQID AND sqp.isDeleted = 0) AS newRec ON newRec.partID = oldRec.partID AND newRec.itemNumber = oldRec.itemNumber  \n" +
                "		WHERE sqppa.isDeleted = 0;  \n" +
                "   ELSE  \n" +
                "		 INSERT INTO supplier_quote_mst(supplierID,quoteNumber,quoteDate,quoteStatus,`reference`,shippingAddressID,billingAddressID, billingAddress, shippingAddress, billingContactPerson, billingContactPersonID, shippingContactPerson, shippingContactPersonID,createdBy, updatedBy,createdAt,updatedAt)  \n" +
                "		 SELECT supplierID,pNewQuoteNumber,pNewQuoteDate,\"D\",pNewReferences,shippingAddressID,billingAddressID, billingAddress, shippingAddress, billingContactPerson, billingContactPersonID, shippingContactPerson, shippingContactPersonID, pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime() FROM supplier_quote_mst WHERE id=pSupplierQuoteID AND isDeleted = 0;  \n" +
                "  \n" +
                "		 SET V_INSERTEDSQID = LAST_INSERT_ID();  \n" +
                "		 INSERT INTO supplier_quote_parts_det (supplierQuoteMstID,partID,supplierPartID,isActive,createdBy, updatedBy,createdAt,updatedAt)  \n" +
                "		 SELECT V_INSERTEDSQID,sqpd.partID,sqpd.supplierPartID,sqpd.isActive,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime() FROM supplier_quote_parts_det sqpd WHERE sqpd.supplierQuoteMstID=pSupplierQuoteID AND sqpd.isDeleted = 0;  \n" +
                "  \n" +
                "		 INSERT INTO supplier_quote_part_attribute(supplierQuotePartDetID,attributeID,createdBy, updatedBy,createdAt,updatedAt)  \n" +
                "		 SELECT sqpdNew.id,sqpa.attributeID,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()  \n" +
                "		 FROM supplier_quote_part_attribute sqpa  \n" +
                "		 JOIN supplier_quote_parts_det sqpdOld ON sqpa.supplierQuotePartDetID = sqpdOld.id  AND sqpdOld.isDeleted = 0  \n" +
                "		 JOIN supplier_quote_parts_det sqpdNew ON sqpdOld.partID = sqpdNew.partID AND sqpdNew.supplierQuoteMstID=V_INSERTEDSQID AND sqpdNew.isDeleted = 0  \n" +
                "		 WHERE sqpdOld.supplierQuoteMstID = pSupplierQuoteID AND sqpa.isDeleted = 0;  \n" +
                "  \n" +
                "		 INSERT INTO supplier_quote_part_price(supplierQuotePartDetID,itemNumber,qty,leadTime,UnitOfTime,UnitPrice,`min`,mult,stock,packageID,reeling,NCNR,createdBy, updatedBy,createdAt,updatedAt)  \n" +
                "		SELECT sqpdNew.id,sqpp.itemNumber,sqpp.qty,sqpp.leadTime,sqpp.UnitOfTime,sqpp.UnitPrice,sqpp.`min`,sqpp.mult,sqpp.stock,sqpp.packageID,sqpp.reeling,sqpp.NCNR,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()  \n" +
                "		FROM supplier_quote_part_price sqpp  \n" +
                "		JOIN supplier_quote_parts_det sqpdOld ON sqpp.supplierQuotePartDetID = sqpdOld.id  AND sqpdOld.isDeleted = 0  \n" +
                "		JOIN supplier_quote_parts_det sqpdNew ON sqpdOld.partID = sqpdNew.partID AND sqpdNew.supplierQuoteMstID=V_INSERTEDSQID AND sqpdNew.isDeleted = 0  \n" +
                "		WHERE sqpdOld.supplierQuoteMstID = pSupplierQuoteID AND sqpp.isDeleted = 0;  \n" +
                "  \n" +
                "		INSERT INTO supplier_quote_part_price_attribute(supplierQuotePartPriceID,attributeID,Price,createdBy, updatedBy,createdAt,updatedAt)  \n" +
                "		SELECT newRec.id,sqppa.attributeID,sqppa.Price,pUserId, pUserId, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()  \n" +
                "		FROM supplier_quote_part_price_attribute sqppa  \n" +
                "		JOIN  \n" +
                "		(SELECT sqp.id,sqpd.supplierQuoteMstID,sqpd.partID,sqp.supplierQuotePartDetID,sqp.itemNumber  \n" +
                "		FROM supplier_quote_part_price sqp  \n" +
                "		LEFT JOIN supplier_quote_parts_det sqpd ON sqp.supplierQuotePartDetID = sqpd.id AND sqpd.isDeleted = 0  \n" +
                "		WHERE sqpd.supplierQuoteMstID=pSupplierQuoteID AND sqp.isDeleted = 0  \n" +
                "		) AS oldRec ON oldRec.id = sqppa.supplierQuotePartPriceID  \n" +
                "		LEFT JOIN (SELECT sqp.id,sqpd.supplierQuoteMstID,sqpd.partID,sqp.supplierQuotePartDetID,sqp.itemNumber FROM supplier_quote_part_price sqp  \n" +
                "		LEFT JOIN supplier_quote_parts_det sqpd ON sqp.supplierQuotePartDetID = sqpd.id AND sqpd.isDeleted = 0  \n" +
                "		WHERE sqpd.supplierQuoteMstID=V_INSERTEDSQID AND sqp.isDeleted = 0) AS newRec ON newRec.partID = oldRec.partID AND newRec.itemNumber = oldRec.itemNumber  \n" +
                "		WHERE sqppa.isDeleted = 0;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "    COMMIT;  \n" +
                "    SELECT V_INSERTEDSQID;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierQuote`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuote`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pIsSummary TINYINT,  \n" +
                "	IN pSupplierIds VARCHAR(16000),  \n" +
                "	IN pQuoteStatus VARCHAR(1000),  \n" +
                "	IN pSearchType VARCHAR(5),  \n" +
                "	IN pAdvanceSearchSQ VARCHAR(100),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN pPartIds VARCHAR(16000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_MfgNameFormat VARCHAR(100);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO v_MfgNameFormat;  \n" +
                "  \n" +
                "	IF (pIsSummary = FALSE) THEN  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "				SELECT  \n" +
                "					s.id,  \n" +
                "					spd.id AS supplierQuotePartDetID,  \n" +
                "					fun_GetFormattedMfgCode(cm.mfgCode, cm.mfgName, \",v_MfgNameFormat,\") mfgName,  \n" +
                "					cm.mfgCode,  \n" +
                "					s.supplierID,  \n" +
                "					spd.partID,  \n" +
                "                    c.custAssyPN,  \n" +
                "					c.mfgPN AS mfgPN,  \n" +
                "                    c.mfgPNDescription,  \n" +
                "					c.mfgcodeID,  \n" +
                "					sc.mfgPN AS supplierPN,  \n" +
                "					spd.supplierPartID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "					IF(spd.isActive = 0, 'Inactive', 'Active') AS isActiveConvertedValueDetail,  \n" +
                "					spd.isActive,  \n" +
                "					spd.scanLabel,  \n" +
                "                    IF(s.quoteStatus = 'P',true, false) AS isDisabledDelete,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricing,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledCopySupplierQuote,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricingHistory,  \n" +
                "                    IF(spd.id IS NULL, false, true) AS isRequirementReference,  \n" +
                "					c.isCustom,  \n" +
                "					sc.isCustom AS isCustomSupplier,  \n" +
                "					rhc.rohsIcon,  \n" +
                "					rhc.name rohsName,  \n" +
                "					rhsc.rohsIcon supplierRohsIcon,  \n" +
                "					rhsc.name supplierRohsName,  \n" +
                "					fun_getPartAttibutesBySupplierQuoteDetailID(spd.id) AS attributesList,  \n" +
                "					fun_getPartPricingCountBySupplierQuoteDetailID(spd.id) AS pricingCount,  \n" +
                "					fun_getUserNameByID(spd.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(spd.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(spd.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(spd.createByRoleId) createdByRole  \n" +
                "				FROM  supplier_quote_parts_det spd  \n" +
                "				LEFT JOIN supplier_quote_mst s ON spd.supplierQuoteMstID = s.id AND s.isDeleted = 0  \n" +
                "				LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN rfq_rohsmst rhc ON c.id = rhc.id AND rhc.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "				LEFT JOIN rfq_rohsmst rhsc ON sc.id = rhsc.id AND rhsc.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst cm ON cm.id = c.mfgcodeID  AND cm.isDeleted = 0  \n" +
                "				WHERE spd.isDeleted = 0 \");  \n" +
                "	 ELSE  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "			SELECT 	s.id,  \n" +
                "					s.supplierID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "                    IF(s.quoteStatus = 'P', true, false) AS isDisabledDelete,  \n" +
                "                    fun_getAddressbyID(s.billingAddressID) billTo,  \n" +
                "                    fun_getAddressbyID(s.shippingAddressID) shipTo,  \n" +
                "                    fun_GetFormattedContactPerson(cntb.firstName, cntb.middleName, cntb.lastName, cntb.division, cntb.email, cntb.phoneCountryCode, cntb.phone, cntb.phExtension, cntb.mobile, cntb.faxCountryCode, cntb.faxNumber ) billToContactName,  \n" +
                "					fun_GetFormattedContactPerson(cnts.firstName, cnts.middleName, cnts.lastName, cnts.division, cnts.email, cnts.phoneCountryCode, cnts.phone, cnts.phExtension, cnts.mobile, cnts.faxCountryCode, cnts.faxNumber ) shipToContactName,  \n" +
                "                    (SELECT COUNT(0) FROM supplier_quote_parts_det WHERE isDeleted = 0 AND supplierQuoteMstID = s.id) AS noOfSupplierPartLine,  \n" +
                "					fun_getUserNameByID(s.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(s.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(s.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(s.createByRoleId) createdByRole  \n" +
                "			FROM   supplier_quote_mst s  \n" +
                "			LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "			LEFT JOIN contactperson cntb ON s.billingContactPersonID = cntb.personId AND cntb.isDeleted = 0  \n" +
                "			LEFT JOIN contactperson cnts ON s.shippingContactPersonID = cnts.personId AND cnts.isDeleted = 0  \n" +
                "			WHERE  s.isDeleted = 0  AND  \n" +
                "            (CASE WHEN ('\",pPartIds,\"' != '') THEN  \n" +
                "				s.id IN  (SELECT spd.supplierQuoteMstID FROM  \n" +
                "				supplier_quote_parts_det spd  \n" +
                "                LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "                WHERE spd.isDeleted = 0 AND (FIND_IN_SET(spd.supplierPartID, ('\",pPartIds,\"')) OR FIND_IN_SET(spd.partID, ('\",pPartIds,\"'))))  \n" +
                "				ELSE 1 = 1 END)  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSupplierIds IS NOT NULL OR pSupplierIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND supplierID in (\"',pSupplierIds,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pQuoteStatus IS NOT NULL OR pQuoteStatus != '') THEn  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND quoteStatus in (\"',pQuoteStatus,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pAdvanceSearchSQ IS NOT NULL OR pAdvanceSearchSQ != '') THEN  \n" +
                "		IF(pSearchType = 'E') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber = \"', pAdvanceSearchSQ , '\" ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber LIKE \"%', pAdvanceSearchSQ ,'%\" ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''' and quoteDate <= ''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate <= ''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPartIds != '' AND (pIsSummary = FALSE)) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( supplierPartID in (\"',pPartIds,'\") OR partID in (\"',pPartIds,'\") )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuote,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuote,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "   PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5816,'2.00','V1','User Story 39319: Supplier Quote Delete/Address functionality related changes - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5816:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 13-01-2022 **************************** */
                "ALTER TABLE rfq_assemblies_quotation_submitted ADD COLUMN custShippingAddress VARCHAR(2000) AFTER  custShippingAddressID;  \n" +
                "ALTER TABLE rfq_assemblies_quotation_submitted ADD COLUMN custShippingContactPerson VARCHAR(2000) AFTER  custShippingAddress;  \n" +
                "ALTER TABLE rfq_assemblies_quotation_submitted ADD COLUMN custShippingContactPersonID INT AFTER  custShippingContactPerson;  \n" +
                "  \n" +
                "ALTER TABLE rfq_assemblies_quotation_submitted ADD COLUMN custBillingAddress VARCHAR(2000) AFTER  custBillingAddressID;  \n" +
                "ALTER TABLE rfq_assemblies_quotation_submitted ADD COLUMN custBillingContactPerson VARCHAR(2000) AFTER  custBillingAddress;  \n" +
                "ALTER TABLE rfq_assemblies_quotation_submitted ADD COLUMN custBillingContactPersonID INT AFTER  custBillingContactPerson;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 **************************** */
                "ALTER TABLE rfq_assemblies_quotation_submitted  \n" +
                "ADD CONSTRAINT FK_rfq_assy_quote_submitted_custShippingContactPersonID  \n" +
                "FOREIGN KEY (custShippingContactPersonID) REFERENCES contactperson(personId);  \n" +
                "  \n" +
                "ALTER TABLE rfq_assemblies_quotation_submitted  \n" +
                "ADD CONSTRAINT FK_rfq_assy_quote_submitted_custBillingContactPersonID  \n" +
                "FOREIGN KEY (custBillingContactPersonID) REFERENCES contactperson(personId);  \n" +
                /* **************************** Add Script Version -> 13-01-2022 **************************** */

                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5817,'2.00','V1',' User Story 39980: Add Default Contact Person with Address Selection for Billing/Shipping/Mark For Address in Quote-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5817:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 13-01-2022 **************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetQuoteSummaryDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails`(  \n" +
                "	IN prfqAssyID INT,  \n" +
                "    IN pAssyQuoteSubmittedID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "  DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "   DECLARE v_mfrFormat INT;  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormat;  \n" +
                "		# select list for quote summary details of last submitted quote  \n" +
                "			SELECT unitPrice, qty, turnTime,priceGroup,  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN CEILING(7*(turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "            WHEN qo.turnType = 'D' THEN turntime  \n" +
                "            WHEN qo.turnType = 'W' THEN (turntime*7) END) turntimedays,  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN 'Business Days'  \n" +
                "            WHEN qo.turnType = 'D' THEN 'Week Days'  \n" +
                "            WHEN qo.turnType = 'W' THEN 'Week' END) turnType,  \n" +
                "            qo.excessMaterialCost, qo.extendedCost, (qo.nreCost + qo.toolingCost) nreCost ,(qo.nreDays + qo.toolingDays) nreDays, qo.nretoolingdescription,  \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime,  qo.allCost, qo.allDays  \n" +
                "			FROM rfq_assy_quote_submitted_assydetail qo  \n" +
                "			JOIN rfq_assemblies_quotation_submitted sb ON sb.id = qo.refSubmittedQuoteID  \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            ORDER BY qo.rfqPriceGroupId,qo.qty, qo.turnTime;  \n" +
                "  \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy  \n" +
                "			SELECT ra.id rfqAssyID, ra.partID, rf.id quoteID, part.PIDCode , part.isCustom , part.nickName, part.liveInternalVersion, part.mfgPNDescription, part.mfgPN, part.rev,part.assyCode,  \n" +
                "            part.custAssyPN, fun_GetFormattedMfgCode(cu.mfgCode,cu.mfgName,v_mfrFormat) mfrCompanyName,  cu.mfgName,cu.mfgCode,rf.customerid,rqs.custBillingAddressID, IFNULL(rqs.custTermsID, cu.custTermsID) AS custTermsID, rqs.custShippingAddressID,  \n" +
                "            rqs.custShippingContactPersonID,rqs.custBillingContactPersonID,  \n" +
                "            (CASE WHEN rqs.quoteNumber IS NOT NULL THEN IFNULL(rqs.BOMIssues,'')  \n" +
                "            WHEN rqs.quoteNumber IS NULL THEN IFNULL(fun_getQuoteSubjectToFollowing(ra.id),'') END) AS BOMIssues,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN  \n" +
                "                    (  \n" +
                "						SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)  \n" +
                "					)  \n" +
                "                    ELSE  \n" +
                "                    (  \n" +
                "                    	SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID  \n" +
                "                    )  \n" +
                "                    END  \n" +
                "				)  \n" +
                "			)paymentTerm,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custTermsID IS NULL THEN  \n" +
                "                    (  \n" +
                "						SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = (SELECT custTermsID FROM mfgcodemst WHERE id = rf.customerid)  \n" +
                "					)  \n" +
                "                    ELSE  \n" +
                "                    (  \n" +
                "                    	SELECT termsDays FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID  \n" +
                "                    )  \n" +
                "                    END  \n" +
                "				)  \n" +
                "			)termDays,  \n" +
                "            rqs.bomInternalVersion, rqs.quoteSubmitDate, rqs.quoteNumber, rqs.id quoteSubmittedID, ra.assyNote,  \n" +
                "            fun_getTextAngularData(ra.additionalRequirement, vTextAngularKeyCode) additionalRequirement ,  \n" +
                "            rf.quoteNote, rt.name RFQType, jt.name JobType, rat.name AssyType,  \n" +
                "            fun_getTextAngularData(rqs.OtherNotes, vTextAngularKeyCode) OtherNotes,  \n" +
                "            ra.isSummaryComplete, ra.isReadyForPricing, CONCAT(su.firstName,' ',su.lastName) `submittedBy`, su.emailAddress,  \n" +
                "            ra.quoteFinalStatus, ra.isCustomPartDetShowInReport,  \n" +
                "            fun_getTextAngularData(rqs.promotions, vTextAngularKeyCode) promotions,  \n" +
                "            ra.assyNote,    part.RoHSStatusID, ro.name AS rohsComplientConvertedValue, ro.rohsIcon AS rohsIconPath,  \n" +
                "            ro.rohsIcon AS rohsIcon,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN  \n" +
                "					(  \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "						FROM customer_addresses ca  \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "						WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'B'  \n" +
                "					)  \n" +
                "					ELSE  \n" +
                "					(  \n" +
                "						SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "						IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "						FROM customer_addresses ca  \n" +
                "						JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "						WHERE id = rqs.custBillingAddressID  \n" +
                "					)  \n" +
                "					END  \n" +
                "				)  \n" +
                "			) billingAddress,  \n" +
                "            (  \n" +
                "				(  \n" +
                "					CASE WHEN rqs.custBillingAddressID IS NULL THEN  \n" +
                "						(  \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "							FROM customer_addresses ca  \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "							WHERE customerID = rf.customerid AND ca.isDefault = 1 AND ca.isDeleted = 0 AND ca.addressType = 'S'  \n" +
                "						)  \n" +
                "					ELSE  \n" +
                "						(  \n" +
                "							SELECT CONCAT(IFNULL(ca.companyName,''),'<br/>', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''),(CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "							IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''),(CASE WHEN ca.contact THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Phone: ', ca.contact),''),IFNULL(CONCAT(' Ext. ',ca.phExtension), ''), (CASE WHEN ca.faxNumber THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Fax: ',ca.faxNumber),''))  \n" +
                "							FROM customer_addresses ca  \n" +
                "							JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "							WHERE id = rqs.custShippingAddressID  \n" +
                "						)  \n" +
                "					END  \n" +
                "                )  \n" +
                "			) shippingAddress,  \n" +
                "            (  \n" +
                "				(  \n" +
                "				CASE WHEN ra.isSummaryComplete = 1 THEN  \n" +
                "					(  \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards  \n" +
                "						FROM rfq_assy_standard_class_detail csd  \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0  \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0  \n" +
                "						WHERE csd.refSubmittedQuoteID = rqs.id  \n" +
                "					)  \n" +
                "					ELSE  \n" +
                "					(  \n" +
                "						SELECT GROUP_CONCAT(CONCAT(cs.fullName,(CASE WHEN sc.className IS NULL THEN '' ELSE ' ' END),IFNULL(sc.className,'')) SEPARATOR ' | ') standards  \n" +
                "						FROM component_standard_details  csd  \n" +
                "						JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0  \n" +
                "						LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0  \n" +
                "						WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = ra.id)  \n" +
                "					)  \n" +
                "                END  \n" +
                "				)  \n" +
                "			) standards,  \n" +
                "            (  \n" +
                "				(  \n" +
                "				CASE WHEN ra.isSummaryComplete = 0 AND (SELECT MAX(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyId = ra.id) = rqs.id THEN  \n" +
                "					(  \n" +
                "						(SELECT GROUP_CONCAT(dataelement SEPARATOR '<br/>') dataelementdata FROM (  \n" +
                "						SELECT CONCAT((CASE WHEN subFormName ='' THEN '' ELSE CONCAT('<b>',subFormName,'</b><br/>') END), GROUP_CONCAT(dataelement SEPARATOR '<br/>')) dataelement  \n" +
                "						FROM (SELECT (CASE WHEN refSubFormTransID IS NOT NULL THEN fun_getDataElementSubFormNameByID(refSubFormTransID) ELSE '' END) subFormName,  \n" +
                "						CONCAT(fun_getDataElementNameByID(dataElementID),': ',`value`) dataelement  \n" +
                "						FROM dataelement_transactionvalues WHERE entityID = -12 AND isDeleted = 0 AND refTransID = (SELECT rfqrefID FROM rfq_assemblies WHERE id = ra.id)  \n" +
                "						)dataelementForms  \n" +
                "						GROUP BY subFormName  \n" +
                "						)a)  \n" +
                "					)  \n" +
                "					ELSE  \n" +
                "					(  \n" +
                "						   rqs.RFQMISCData  \n" +
                "					)  \n" +
                "                END  \n" +
                "				)  \n" +
                "			) dataelementdata,  \n" +
                "            (SELECT COUNT(1) > 0 FROM rfq_assemblies_quotation_submitted WHERE id>rqs.id AND rfqAssyID = ra.id AND isDeleted = 0) isQuoteHistory,  \n" +
                "            (CASE WHEN ra.status = 1 THEN 'In Progress'  \n" +
                "			  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'  \n" +
                "			  WHEN ra.status = 3 THEN 'Won'  \n" +
                "			  WHEN ra.status = 4 THEN 'Lost'  \n" +
                "              WHEN ra.status = 5 THEN 'Canceled' END) `status` ,  \n" +
                "			ra.status rfq_statusID,  \n" +
                "            ra.winPrice, ra.isActivityStart,  \n" +
                "            TIMESTAMPDIFF(SECOND, ra.activityStartAt,fun_DatetimetoUTCDateTime()) activityStartAt, fun_getEmpployeeNameByUserID(ra.activityStartBy) userName,  \n" +
                "            ra.winQuantity,ra.activityStartBy,  \n" +
                "            fun_getTextAngularData(ra.reason,vTextAngularKeyCode) reason  \n" +
                "            FROM rfq_assemblies ra  \n" +
                "            JOIN rfq_assemblies_quotation_submitted rqs ON rqs.rfqAssyID = ra.id  \n" +
                "			JOIN rfqforms rf ON rf.id = ra.rfqrefID AND rf.isDeleted = 0  \n" +
                "            JOIN rfqtype rt ON rt.id = ra.rfqTypeID AND rt.isDeleted = 0  \n" +
                "            JOIN jobtype jt ON jt.id = ra.jobTypeID AND jt.isDeleted = 0  \n" +
                "            JOIN rfq_assy_typemst rat ON rat.id = ra.assemblyTypeID AND rat.isDeleted = 0  \n" +
                "			JOIN mfgcodemst cu ON cu.id = rf.customerid AND cu.isDeleted = 0  \n" +
                "			JOIN COMPONENT part ON part.id = ra.partID AND part.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_rohsmst ro ON ro.id = part.RoHSStatusID  \n" +
                "            LEFT JOIN users su ON su.id = ra.quoteSubmittedBy  \n" +
                "			WHERE ra.id= prfqAssyID AND rqs.id = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "  \n" +
                "        # select list of submitted quote summary  \n" +
                "			SELECT bomInternalVersion,BOMIssues, bomLastVersion, createByRoleId, createdAt, createdBy, custBillingAddressID,  \n" +
                "			custShippingAddressID, custTermsID, deleteByRoleId, deletedAt, deletedBy, id, isDeleted, fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,  \n" +
                "			fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions, quoteDueDate, quoteInDate, quoteNumber, quoteSubmitDate,  \n" +
                "			rfqAssyID, RFQMISCData, updateByRoleId, updatedAt, updatedBy  \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND id = pAssyQuoteSubmittedID ;  \n" +
                "  \n" +
                "   # select list select terms and conditions of submitted quote summary  \n" +
                "			SELECT qst.*, ec.name ecoTypeName, CONCAT('<ul><li>', GROUP_CONCAT(CONCAT(ecv.name, (CASE WHEN qst.note IS NOT NULL THEN CONCAT(' <b>Note:</b>', qst.note) ELSE '' END)) SEPARATOR '</li><li>'),'</li></ul>') ecoTypeValues  \n" +
                "            FROM rfq_assy_quote_submitted_termsconditions qst  \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID  \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID  \n" +
                "            WHERE qst.isDeleted = 0  \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            GROUP BY ecv.ecoTypeCatID;  \n" +
                "  \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote  \n" +
                "			SELECT csd.id, csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className stdclass  \n" +
                "            FROM rfq_assy_standard_class_detail csd  \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0  \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0  \n" +
                "			WHERE csd.refSubmittedQuoteID = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "		# select letest submited quote summary detail  \n" +
                "			SELECT bomInternalVersion, BOMIssues, bomLastVersion, createByRoleId, createdAt, createdBy, custBillingAddressID, custShippingAddressID,  \n" +
                "            custTermsID, deleteByRoleId, deletedAt, deletedBy, id, isDeleted, fun_getTextAngularData(OtherNotes, vTextAngularKeyCode) OtherNotes,  \n" +
                "            fun_getTextAngularData(promotions, vTextAngularKeyCode) promotions, quoteDueDate, quoteInDate, quoteNumber, quoteSubmitDate, rfqAssyID,  \n" +
                "            RFQMISCData, updateByRoleId, updatedAt, updatedBy  \n" +
                "            FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1;  \n" +
                "  \n" +
                "		#select list of Custom Part detail of assembly.  \n" +
                "  \n" +
                "			  SELECT *, (amount*requestedQty) AS extendedCost FROM (  \n" +
                "				SELECT prfqAssyID `rfqAssyID`,  com.mfgPn CustomPart,com.PIDCode,raqc.mfgPNID, com.custAssyPN,  \n" +
                "				qoa.id additi, qo.requestedQty, fun_getRoHSNameByID(com.RoHSStatusID) rohsName, fun_getRoHSIconByID(com.RoHSStatusID) rohsIcon,  \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,  \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,  \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime  \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa  \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'Material'  \n" +
                "				LEFT JOIN rfq_assy_quotations_customparts raqc ON raqc.rfqAssyQuoteID = qoa.rfqAssyQuoteID AND raqc.id = qoa.refCustomPartQuoteID AND qo.isDeleted = 0  \n" +
                "				LEFT JOIN COMPONENT com ON com.id = raqc.mfgPNID  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID AND qoa.refCustomPartQuoteID IS NOT NULL  \n" +
                "				#HAVING amount>0  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime,qdf.displayOrder  \n" +
                "			) a  \n" +
                "			GROUP BY requestedQty, turnTime,fieldName,amount,days;  \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.  \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (  \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,  \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,  \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,  \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime  \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa  \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'NRE'  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "				HAVING amount>0  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime  \n" +
                "            ) a  \n" +
                "            GROUP BY fieldName,amount;  \n" +
                "  \n" +
                "  \n" +
                "		#select list of NRE detail of assembly.  \n" +
                "  \n" +
                "            SELECT *, (amount*toolingQty) AS extendedCost FROM (  \n" +
                "				SELECT prfqAssyID `rfqAssyID`, qoa.id, qo.requestedQty,  \n" +
                "				qoa.quoteChargeDynamicFieldID, qdf.fieldName,qdf.costingType,  \n" +
                "				requestedQty `qty`, IFNULL(TRIM(IFNULL(qoa.amount,0))+0,0) AS amount, IFNULL(qoa.days,0) days, qdf.isDaysRequire,  \n" +
                "				(CASE WHEN qo.timeType = 'B' THEN CEILING(7*(qo.turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "							WHEN qo.timeType = 'D' THEN qo.turntime  \n" +
                "							WHEN qo.timeType = 'W' THEN (qo.turntime*7) END) turnTime , qoa.toolingQty  \n" +
                "				FROM rfq_assy_quotations_additionalcost qoa  \n" +
                "				LEFT JOIN  rfq_assy_quotations qo ON qoa.rfqAssyQuoteID = qo.id AND qo.isDeleted = 0  \n" +
                "				JOIN quotecharges_dynamic_fields_mst qdf ON qdf.id = quoteChargeDynamicFieldID AND qdf.costingType = 'TooLing'  \n" +
                "				WHERE qo.rfqAssyID = prfqAssyID AND qoa.isDeleted = 0 AND qo.refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "				HAVING amount>0  \n" +
                "				ORDER BY qo.requestedQty, qo.turnTime  \n" +
                "            ) a  \n" +
                "            GROUP BY fieldName,amount,toolingQty;  \n" +
                "  \n" +
                "		# Company detail  \n" +
                "		SELECT CONCAT(IFNULL(ci.street1, ', '),', ',IFNULL(ci.city,', '),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode,''))AS address,  \n" +
                "			ci.personName AS companyContactName,ci.registeredEmail AS companyEmail,ci.faxNumber,ci.contactNumber AS phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail AS email  \n" +
                "		FROM company_info ci  \n" +
                "		LEFT JOIN countrymst c ON ci.countryID=c.countryID AND c.isDeleted = 0  \n" +
                "		WHERE ci.isDeleted=0;  \n" +
                "		# select list of price Group detail  \n" +
                "            SELECT rpg.id priceGroupID, rpg.name priceGroup, rpg.qty, rpg.rfqAssyID,  \n" +
                "			com.mfgPN, com.PIDCode, ro.name rohsName, ro.rohsIcon, ra.partID ,com.isCustom, com.custAssyPN  \n" +
                "			FROM rfq_assy_submitted_price_group_detail rpg  \n" +
                "			JOIN rfq_assemblies ra ON ra.id = rpg.rfqAssyID  \n" +
                "			JOIN COMPONENT com ON com.id = ra.partID  \n" +
                "			JOIN rfq_rohsmst ro ON ro.id = com.RoHSStatusID  \n" +
                "			WHERE rpg.refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            ORDER BY rpg.name;  \n" +
                "  \n" +
                "        # select list of price Group  \n" +
                "			SELECT DISTINCT `name` FROM rfq_assy_submitted_price_group_detail  \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            ORDER BY NAME;  \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary  \n" +
                "			SELECT qst.*, ec.name ecoTypeName, ecv.name ecoTypeValues FROM rfq_assy_quote_submitted_termsconditions qst  \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID  \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID  \n" +
                "            WHERE qst.isDeleted = 0  \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "  \n" +
                "		# total requote count  \n" +
                "			SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL AND isDeleted = 0;  \n" +
                "  \n" +
                "		#select list of standard certification detail of assembly for not submitted quote  \n" +
                "			SELECT csd.id, csd.certificateStandardID, csd.ClassID, cs.fullName standard,sc.className stdclass  \n" +
                "            FROM component_standard_details  csd  \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0  \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0  \n" +
                "			WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID);  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 **************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetQuoteSummaryDetails_report` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetQuoteSummaryDetails_report`(  \n" +
                "	IN prfqAssyID INT(11),  \n" +
                "    IN pAssyQuoteSubmittedID INT(11)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "			# select list for quote summary details of last submitted quote  \n" +
                "			SELECT unitPrice, qty, turnTime,  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN CEILING(7*(turnTime/5))  #(turnTime+(2*ceiling(turnTime/5)))  \n" +
                "            WHEN qo.turnType = 'D' THEN turntime  \n" +
                "            WHEN qo.turnType = 'W' THEN (turntime*7) END) turntimedays,  \n" +
                "            (CASE WHEN qo.turnType = 'B' THEN 'Business Days'  \n" +
                "            WHEN qo.turnType = 'D' THEN 'Week Days'  \n" +
                "            WHEN qo.turnType = 'W' THEN 'Week' END) turnType  \n" +
                "            , qo.excessMaterialCost, qo.extendedCost, qo.nreCost,qo.nreDays,  \n" +
                "            qo.additionalCost,qo.materialCost,qo.materialLeadTime,qo.laborCost,qo.laborLeadTime,qo.customItemLeadTime,qo.totalLeadTime  \n" +
                "			FROM rfq_assy_quote_submitted_assydetail qo  \n" +
                "			JOIN rfq_assemblies_quotation_submitted sb ON sb.id = qo.refSubmittedQuoteID  \n" +
                "			WHERE refSubmittedQuoteID = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "        # select details for assembly,customer, submitted quote of selected rfq assy  \n" +
                "			SELECT ra.id rfqAssyID, ra.partID, rf.id quoteID, part.PIDCode, part.nickName, part.liveInternalVersion, part.mfgPNDescription, part.mfgPN, part.rev,part.assyCode,  \n" +
                "            part.custAssyPN, cu.mfgName,cu.mfgCode,rf.customerid,rqs.custBillingAddressID, rqs.custTermsID AS custTermsID, rqs.custShippingAddressID,  \n" +
                "            IFNULL(rqs.BOMIssues,'') BOMIssues, (SELECT gencCategoryName FROM genericcategory WHERE categoryType = 'Payment Terms' AND gencCategoryID = rqs.custTermsID) paymentTerm,  \n" +
                "            rqs.bomInternalVersion, rqs.quoteSubmitDate, rqs.quoteNumber, rqs.id quoteSubmittedID, ra.assyNote, ra.additionalRequirement,rf.quoteNote, rt.name RFQType,  \n" +
                "            jt.name JobType, rat.name AssyType, rqs.OtherNotes,ra.isSummaryComplete, ra.isReadyForPricing, CONCAT(su.firstName,' ',su.lastName) `submittedBy`, su.emailAddress,  \n" +
                "            ra.quoteFinalStatus,rqs.promotions,ra.assyNote, ra.additionalRequirement,part.RoHSStatusID, ro.name AS rohsComplientConvertedValue, ro.rohsIcon,  \n" +
                "            fun_getAddressbyIDAndContactPersonID(rqs.custBillingAddressID,rqs.custBillingContactPersonID) billingAddress,  \n" +
                "            fun_getAddressbyIDAndContactPersonID(rqs.custShippingAddressID,rqs.custShippingContactPersonID) shippingAddress,  \n" +
                "            (  \n" +
                "				SELECT GROUP_CONCAT(CONCAT(cs.fullName,IFNULL(sc.className,'')) SEPARATOR ' | ') standards  \n" +
                "				FROM rfq_assy_standard_class_detail csd  \n" +
                "				JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0  \n" +
                "				LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0  \n" +
                "				WHERE csd.refSubmittedQuoteID = rqs.id  \n" +
                "			) standards  \n" +
                "            FROM rfq_assemblies ra  \n" +
                "            JOIN rfq_assemblies_quotation_submitted rqs ON rqs.rfqAssyID = ra.id  \n" +
                "			JOIN rfqforms rf ON rf.id = ra.rfqrefID AND rf.isDeleted = 0  \n" +
                "            JOIN rfqtype rt ON rt.id = ra.rfqTypeID AND rt.isDeleted = 0  \n" +
                "            JOIN jobtype jt ON jt.id = ra.jobTypeID AND jt.isDeleted = 0  \n" +
                "            JOIN rfq_assy_typemst rat ON rat.id = ra.assemblyTypeID AND rat.isDeleted = 0  \n" +
                "			JOIN mfgcodemst cu ON cu.id = rf.customerid AND cu.isDeleted = 0  \n" +
                "			JOIN COMPONENT part ON part.id = ra.partID AND part.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_rohsmst ro ON ro.id = part.RoHSStatusID  \n" +
                "            LEFT JOIN users su ON su.id = ra.quoteSubmittedBy  \n" +
                "			WHERE ra.id= prfqAssyID AND rqs.id = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "  \n" +
                "        # select list of submitted quote summary  \n" +
                "			SELECT * FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND id = pAssyQuoteSubmittedID ;  \n" +
                "  \n" +
                "		#select list of standard certification detail of submitted quote  \n" +
                "			SELECT csd.id, csd.refSubmittedQuoteID, csd.standardID, csd.standardClassIDs, cs.fullName standard,sc.className stdclass  \n" +
                "            FROM rfq_assy_standard_class_detail csd  \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.standardID AND cs.isDeleted = 0  \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.standardClassIDs AND cs.isDeleted = 0  \n" +
                "			WHERE csd.refSubmittedQuoteID = pAssyQuoteSubmittedID;  \n" +
                "  \n" +
                "  \n" +
                "        # select list select terms and conditions of submitted quote summary  \n" +
                "			SELECT qst.*, ec.name ecoTypeName, CONCAT('<ul><li>', GROUP_CONCAT(ecv.name SEPARATOR '</li><li>'),'</li></ul>') ecoTypeValues  \n" +
                "            FROM rfq_assy_quote_submitted_termsconditions qst  \n" +
                "            JOIN eco_type_category ec ON qst.termsconditionCatID = ec.ecoTypeCatID  \n" +
                "            JOIN eco_type_values ecv ON qst.termsconditionTypeValueID = ecv.ecoTypeValID  \n" +
                "            WHERE qst.isDeleted = 0  \n" +
                "            AND RefSubmittedQuoteID = pAssyQuoteSubmittedID  \n" +
                "            GROUP BY ecv.ecoTypeCatID;  \n" +
                "  \n" +
                "  \n" +
                "		# select letest submited quote summary detail  \n" +
                "			SELECT * FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1;  \n" +
                "  \n" +
                "		# total requote count  \n" +
                "			SELECT COUNT(*) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL AND isDeleted = 0;  \n" +
                "  \n" +
                "		#select list of standard certification detail of assembly for not submitted quote  \n" +
                "			SELECT GROUP_CONCAT(CONCAT(cs.fullName,IFNULL(sc.className,''), ' | ' ) SEPARATOR '') standards  \n" +
                "            FROM component_standard_details  csd  \n" +
                "			JOIN certificate_standards cs ON cs.certificateStandardID =  csd.certificateStandardID AND cs.isDeleted = 0  \n" +
                "			LEFT JOIN standard_class sc  ON sc.classID =  csd.ClassID AND cs.isDeleted = 0  \n" +
                "			WHERE csd.isDeleted = 0 AND csd.componentID = (SELECT partID FROM rfq_assemblies WHERE id = prfqAssyID);  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 **************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_rfq_assemblies` ;  \n" +
                "CREATE TRIGGER `Trg_AI_rfq_assemblies` AFTER INSERT ON `rfq_assemblies`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE pcustShippingAddressID INT(11) DEFAULT NULL;  \n" +
                "	DECLARE pcustBillingAddressID INT(11) DEFAULT NULL;  \n" +
                "	DECLARE pcustTermsID INT(11) DEFAULT NULL;  \n" +
                "	DECLARE pcustShippingAddress VARCHAR(1000);  \n" +
                "	DECLARE pcustShippingContactPerson VARCHAR(1000);  \n" +
                "	DECLARE pcustShippingContactPersonID INT;  \n" +
                "	DECLARE pcustBillingAddress VARCHAR(1000);  \n" +
                "	DECLARE pcustBillingContactPerson VARCHAR(1000);  \n" +
                "	DECLARE pcustBillingContactPersonID INT;  \n" +
                "  \n" +
                "	SELECT id,defaultContactPersonID INTO pcustShippingAddressID,pcustShippingContactPersonID FROM customer_addresses WHERE addressType = 'S' AND isDefault = 1 AND deletedAt IS NULL AND customerId = (SELECT customerid FROM rfqforms WHERE id = new.rfqrefID);  \n" +
                "	SELECT id,defaultContactPersonID INTO pcustBillingAddressID,pcustBillingContactPersonID FROM customer_addresses WHERE addressType = 'B' AND isDefault = 1 AND deletedAt IS NULL AND customerId = (SELECT customerid FROM rfqforms WHERE id = new.rfqrefID);  \n" +
                "	SELECT custTermsID INTO pcustTermsID FROM mfgcodemst WHERE id = (SELECT customerid FROM rfqforms WHERE id = new.rfqrefID) AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	INSERT INTO rfq_assemblies_quotation_submitted  \n" +
                "	(`rfqAssyID`, `quoteNumber`, `quoteInDate`, `quoteDueDate`, `quoteSubmitDate`, `createdBy`, `createdAt`,  \n" +
                "	 `updatedBy`, `updatedAt`, `custShippingAddressID`, `custBillingAddressID`, `custTermsID`,custShippingAddress,custShippingContactPerson,custShippingContactPersonID,custBillingAddress,custBillingContactPerson,  \n" +
                "	 custBillingContactPersonID)  \n" +
                "	VALUES  \n" +
                "	(NEW.id, NULL, new.quoteInDate, new.quoteInDate, NULL, NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,fun_DatetimetoUTCDateTime(),  \n" +
                "	 pcustShippingAddressID,pcustBillingAddressID,pcustTermsID,fun_getAddressbyID(pcustShippingAddressID),fun_contactPersonDetailByID(pcustShippingContactPersonID),pcustShippingContactPersonID,fun_getAddressbyID(pcustBillingAddressID),  \n" +
                "	 fun_contactPersonDetailByID(pcustBillingContactPersonID),pcustBillingContactPersonID);  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 **************************** */
                "DROP FUNCTION IF EXISTS `fun_contactPersonDetailByID` ;  \n" +
                "CREATE FUNCTION `fun_contactPersonDetailByID`(  \n" +
                "	pContactPersonID INT  \n" +
                ") RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pContactPerson VARCHAR(2000);  \n" +
                "	  SELECT  CONCAT('ATTN: ',fun_GetFormattedContactPersonName(firstName,middleName,lastName), CASE WHEN division IS NULL THEN '' ELSE CONCAT('\r',division) END,  \n" +
                "	                 CASE WHEN email IS NULL THEN '' ELSE CONCAT('\rEmail: ',fun_convertJsonEmailToCommaSepList(email)) END,  \n" +
                "	                 CASE WHEN phone IS NULL THEN '' ELSE CONCAT('\rPhone: ',phone) END,  \n" +
                "	                 CASE WHEN phExtension IS NULL THEN '' ELSE CONCAT('Ext. ',phExtension) END,  \n" +
                "	                 CASE WHEN mobile IS NULL THEN '' ELSE CONCAT('\rPhone: ',mobile) END,  \n" +
                "	                 CASE WHEN faxNumber IS NULL THEN '' ELSE CONCAT('\rFax: ',faxNumber) END) INTO  pContactPerson FROM contactperson  \n" +
                "	                 WHERE personID=pContactPersonID;  \n" +
                "  \n" +
                "	RETURN pContactPerson;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 **************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CopyAssyQuoteSummary` ;  \n" +
                "CREATE PROCEDURE `Sproc_CopyAssyQuoteSummary`(  \n" +
                "	IN prfqAssyID INT,  \n" +
                "    IN pUserID INT,  \n" +
                "    IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                " -- declare variable for   rfq_assemblies_quotation_submitted  \n" +
                "    DECLARE vcustBillingAddressID INT DEFAULT NULL;  \n" +
                "    DECLARE vcustShippingAddressID INT DEFAULT NULL;  \n" +
                "    DECLARE vcustShippingContactPersonID INT DEFAULT NULL;  \n" +
                "    DECLARE vcustBillingContactPersonID INT DEFAULT NULL;  \n" +
                "    DECLARE vTermsID INT DEFAULT NULL;  \n" +
                "    DECLARE vcustShippingContactPerson VARCHAR(1000);  \n" +
                "    DECLARE vcustBillingContactPerson VARCHAR(1000);  \n" +
                "    DECLARE vcustShippingAddress VARCHAR(1000);  \n" +
                "    DECLARE vcustBillingAddress VARCHAR(1000);  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "    START TRANSACTION;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "# copy  rfq_assy_quotations Detail with null ref submitted id  \n" +
                "		INSERT INTO `rfq_assy_quotations`  \n" +
                "		(`rfqAssyID`,`rfqAssyQtyID`,`rfqAssyQtyTurnTimeID`,`requestedQty`,`turnTime`,`timeType`,`unitPrice`,`materialCost`,`materialDays`,`total`,  \n" +
                "        `createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`excessQtyTotalPrice`,`days`,`nreCost`,`nreDays`,`toolingCost`,`toolingDays`,`laborCost`,`laborDays`,  \n" +
                "        `laborunitPrice`,`laborday`,`rfqPriceGroupId`,`rfqPriceGroupDetailId`,`createByRoleId`,`updateByRoleId`, `overheadCost`,`overheadDays`, `allCost`, `allDays`,  \n" +
                "        `overheadUnitPrice`,`overheadDay`, `manualTurnTime`, `manualTurnType`)  \n" +
                "		SELECT rfqAssyID, rfqAssyQtyID, rfqAssyQtyTurnTimeID, requestedQty, turnTime, timeType, unitPrice, materialCost, materialDays, total,  \n" +
                "		pUserID AS `createdBy`, fun_DatetimetoUTCDateTime() AS `createdAt`, pUserID AS `updatedBy`, fun_DatetimetoUTCDateTime() AS `updatedAt`, excessQtyTotalPrice, days,  \n" +
                "        aq.nreCost, aq.nreDays, aq.toolingCost, aq.toolingDays, laborCost, laborDays, laborunitPrice, laborday, rfqPriceGroupId, rfqPriceGroupDetailId,  \n" +
                "        pRoleID AS `createByRoleId`, pRoleID AS `updateByRoleId`, aq.`overheadCost`, aq.`overheadDays`, aq.`allCost`, aq.`allDays`,aq.`overheadUnitPrice`,aq.`overheadDay`,  \n" +
                "        aq.`manualTurnTime`, aq.`manualTurnType`  \n" +
                "        FROM rfq_assy_quotations aq  \n" +
                "		WHERE aq.rfqAssyID = prfqAssyID AND aq.isDeleted = 0  \n" +
                "        AND aq.refSubmittedQuoteID = (SELECT id FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1);  \n" +
                "	# copy  rfq_assy_quotations_customparts details for new generated quotaion records  \n" +
                "		INSERT INTO `rfq_assy_quotations_customparts`  \n" +
                "		(`rfqAssyQuoteId`,`mfgPNID`,`unitPrice`,`totalPrice`,`leadTimeDays`,`totalLeadTimeDays`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`createByRoleId`,`updateByRoleId`)  \n" +
                "		SELECT raqn.id `rfqAssyQuoteID`, raqc.mfgPNID, raqc.unitPrice, raqc.totalPrice, raqc.leadTimeDays, raqc.totalLeadTimeDays,  \n" +
                "		pUserID AS `createdBy`, fun_DatetimetoUTCDateTime() AS `createdAt`, pUserID AS `updatedBy`, fun_DatetimetoUTCDateTime() AS `updatedAt`, pRoleID AS `createByRoleId`, pRoleID AS `updateByRoleId`  \n" +
                "		FROM rfq_assy_quotations_customparts raqc  \n" +
                "		JOIN rfq_assy_quotations raq ON raqc.rfqAssyQuoteID = raq.id AND raq.rfqAssyID = prfqAssyID AND raq.isDeleted = 0  \n" +
                "		AND refSubmittedQuoteID = (SELECT id FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL ORDER BY id DESC LIMIT 1)  \n" +
                "		LEFT JOIN rfq_assy_quotations raqn ON raqn.rfqAssyQtyID = raq.rfqAssyQtyID AND raqn.rfqAssyQtyTurnTimeID = raq.rfqAssyQtyTurnTimeID AND raqn.refSubmittedQuoteID IS NULL  \n" +
                "		WHERE raqc.isDeleted = 0;  \n" +
                "# Copy rfq_assy_quotations_additionalcost details for new generated quotaion records  \n" +
                "/*        INSERT INTO `rfq_assy_quotations_additionalcost`  \n" +
                "		(`rfqAssyQuoteID`, `quoteChargeDynamicFieldID`, `amount`, `percentage`, `margin`,  \n" +
                "        `createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `days`,`toolingQty`)  \n" +
                "		select raqn.id `rfqAssyQuoteID`, raqa.`quoteChargeDynamicFieldID`, raqa.`amount`, raqa.`percentage`, raqa.`margin`,  \n" +
                "        pUserID `createdBy`, fun_DatetimetoUTCDateTime() as `createdAt`, pUserID `updatedBy`, fun_DatetimetoUTCDateTime() as `updatedAt`, raqa.`days`,raqa.`toolingQty`  \n" +
                "        from rfq_assy_quotations_additionalcost raqa  \n" +
                "		join rfq_assy_quotations raq on raqa.rfqAssyQuoteID = raq.id and raq.rfqAssyID = prfqAssyID and raq.isDeleted = 0  \n" +
                "		and refSubmittedQuoteID = (select id from rfq_assemblies_quotation_submitted where rfqAssyID = prfqAssyID and quoteNumber is not null order by id desc limit 1)  \n" +
                "		left join rfq_assy_quotations raqn on raqn.rfqAssyQtyID = raq.rfqAssyQtyID and raqn.rfqAssyQtyTurnTimeID = raq.rfqAssyQtyTurnTimeID and raqn.refSubmittedQuoteID IS NULL  \n" +
                "        where raqa.isDeleted = 0;  \n" +
                "  */  \n" +
                "        INSERT INTO `rfq_assy_quotations_additionalcost`  \n" +
                "		(`rfqAssyQuoteID`, `quoteChargeDynamicFieldID`, `amount`, `percentage`, `margin`,  \n" +
                "       `createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `days`,`toolingQty`, `refCustomPartQuoteID`, `createByRoleId`, `updateByRoleId`)  \n" +
                "		SELECT raqn.id `rfqAssyQuoteID`, raqa.`quoteChargeDynamicFieldID`, raqa.`amount`, raqa.`percentage`, raqa.`margin`,  \n" +
                "		pUserID `createdBy`, fun_DatetimetoUTCDateTime() AS `createdAt`, pUserID `updatedBy`, fun_DatetimetoUTCDateTime() AS `updatedAt`, raqa.`days`, raqa.`toolingQty`,  \n" +
                "        (SELECT id FROM rfq_assy_quotations_customparts WHERE rfqAssyQuoteID = raqn.id AND mfgPNID = (SELECT mfgPNID FROM rfq_assy_quotations_customparts WHERE id = raqa.refCustomPartQuoteID)) AS `refCustomPartQuoteID`,  \n" +
                "        pRoleID AS `createByRoleId`, pRoleID AS `updateByRoleId`  \n" +
                "		FROM rfq_assy_quotations_additionalcost raqa  \n" +
                "		JOIN rfq_assy_quotations raq ON raqa.rfqAssyQuoteID = raq.id AND raq.rfqAssyID = prfqAssyID AND raq.isDeleted = 0  \n" +
                "			AND refSubmittedQuoteID = (SELECT id FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NOT NULL ORDER BY id DESC LIMIT 1)  \n" +
                "		LEFT JOIN rfq_assy_quotations raqn ON raqn.rfqAssyQtyID = raq.rfqAssyQtyID AND raqn.rfqAssyQtyTurnTimeID = raq.rfqAssyQtyTurnTimeID AND raqn.refSubmittedQuoteID IS NULL  \n" +
                "		WHERE raqa.isDeleted = 0;  \n" +
                "  \n" +
                "# update rfq_assembly details  \n" +
                "       UPDATE rfq_assemblies ra,  \n" +
                "			(SELECT DATE_ADD(CURRENT_TIMESTAMP(), INTERVAL TIMESTAMPDIFF(DAY,quoteInDate,quoteDueDate) DAY) AS duedate  \n" +
                "			FROM rfq_assemblies WHERE id=prfqAssyID) ran  \n" +
                "		SET ra.isSummaryComplete = FALSE, ra.quoteSubmittedBy = NULL, ra.status = 1, ra.quoteFinalStatus = 2, ra.quoteNumber = NULL, ra.quoteSubmitDate = NULL,ra.quoteValidTillDate=NULL, ra.updatedAt = CURRENT_TIMESTAMP(),  \n" +
                "		ra.quoteInDate = CURRENT_TIMESTAMP(), ra.quoteDueDate = ran.duedate,updatedBy = prfqAssyID  \n" +
                "		WHERE ra.id = prfqAssyID;  \n" +
                "  \n" +
                "# insert in rfq_assemblies_quotation_submitted for quote preview  \n" +
                "          SELECT custBillingAddressID,custShippingAddressID,custBillingAddress,custShippingAddress,custBillingContactPerson,custShippingContactPerson,  \n" +
                "          custBillingContactPersonID,custShippingContactPersonID,custTermsID INTO vcustBillingAddressID,vcustShippingAddressID,vcustBillingAddress,vcustShippingAddress,vcustBillingContactPerson,  \n" +
                "          vcustShippingContactPerson,vcustBillingContactPersonID,vcustShippingContactPersonID,vTermsID FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1;  \n" +
                "  \n" +
                "		INSERT INTO `rfq_assemblies_quotation_submitted`  \n" +
                "		(`rfqAssyID`, `quoteInDate`, `quoteDueDate`, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`,  \n" +
                "		`custBillingAddressID`, `custShippingAddressID`, `custTermsID`, `createByRoleId`, `updateByRoleId`,custShippingAddress,custShippingContactPerson,custShippingContactPersonID,custBillingAddress,  \n" +
                "		custBillingContactPerson,custBillingContactPersonID)  \n" +
                "		SELECT ra.id `rfqAssyID`, ra.quoteInDate `quoteInDate`, ra.quoteDueDate `quoteDueDate`, pUserID AS `createdBy`, fun_DatetimetoUTCDateTime() AS `createdAt`, pUserID AS `updatedBy`, fun_DatetimetoUTCDateTime() AS `updatedAt`,  \n" +
                "		vcustBillingAddressID,vcustShippingAddressID,vTermsID,  \n" +
                "        pRoleID AS `createByRoleId`, pRoleID AS `updateByRoleId`, vcustShippingAddress,vcustShippingContactPerson, vcustShippingContactPersonID,vcustBillingAddress, vcustBillingContactPerson,vcustBillingContactPersonID  \n" +
                "		FROM rfq_assemblies ra  \n" +
                "		WHERE ra.id = prfqAssyID;  \n" +
                "  \n" +
                "# insert rfq_assy_quote_submitted_termsconditions as selected in erlier history  \n" +
                "		INSERT INTO `rfq_assy_quote_submitted_termsconditions`  \n" +
                "		(`RefSubmittedQuoteID`, `termsconditionCatID`, `termsconditionTypeValueID`, `note`, `createdBy`, `createdAt`, `updatedBy`, `updatedAt`, `createByRoleId`, `updateByRoleId`)  \n" +
                "		SELECT (SELECT id FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NULL ORDER BY id DESC LIMIT 1) `RefSubmittedQuoteID`,  \n" +
                "		`termsconditionCatID`, `termsconditionTypeValueID`, `note`, pUserID `createdBy`, fun_DatetimetoUTCDateTime() AS `createdAt`,pUserID `updatedBy`,fun_DatetimetoUTCDateTime() AS `updatedAt`,  \n" +
                "        pRoleID AS `createByRoleId`, pRoleID AS `updateByRoleId`  \n" +
                "		FROM rfq_assy_quote_submitted_termsconditions  \n" +
                "		WHERE isDeleted = 0 AND RefSubmittedQuoteID = (SELECT id FROM rfq_assemblies_quotation_submitted WHERE quoteNumber IS NOT NULL AND rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1);  \n" +
                "# Insert Issue require customer engineering resolution in to new Quote submitted  \n" +
                "		INSERT INTO `rfq_quote_issue_history`  \n" +
                "        (`refSubmittedQuoteID`,`rfqAssyID`,`issueType`,`PIDCode`,`lineID`,`BOMIssue`,`createdAt`,`updatedAt`,`createdBy`,`updatedBy`, `createByRoleId`, `updateByRoleId`)  \n" +
                "        SELECT (SELECT MAX(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID AND quoteNumber IS NULL) AS refSubmittedQuoteID,  \n" +
                "        prfqAssyID AS `rfqAssyID`, \"CustomerEngineeringResolution\" AS `issueType`,`PIDCode`,`lineID`,`BOMIssue`,  \n" +
                "        fun_DatetimetoUTCDateTime() AS `createdAt`,fun_DatetimetoUTCDateTime() AS `updatedAt`,pUserID `createdBy`, pUserID `updatedBy`,  \n" +
                "        pRoleID AS `createByRoleId`, pRoleID AS `updateByRoleId`  \n" +
                "        FROM rfq_quote_issue_history  \n" +
                "        WHERE isDeleted =0 AND issueType = \"CustomerEngineeringResolution\" AND rfqAssyID = prfqAssyID AND refSubmittedQuoteID = (SELECT MAX(id) FROM rfq_assemblies_quotation_submitted WHERE quoteNumber IS NOT NULL AND rfqAssyID = prfqAssyID);  \n" +
                "  \n" +
                "  SELECT * FROM rfq_assy_quotations WHERE rfqAssyID = prfqAssyID AND isDeleted = 0 AND refSubmittedQuoteID IS NULL;  \n" +
                "  SELECT * FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = prfqAssyID ORDER BY id DESC LIMIT 1;  \n" +
                " COMMIT;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 **************************** */
                /* **************************** Add Script Version -> 13-01-2022 **************************** */

                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5818,'2.00','V1','User Story 39980: Add Default Contact Person with Address Selection for Billing/Shipping/Mark For Address in Quote-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5818:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 13-01-2022 **************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_costingStopActivityForMultipleAssembly` ;  \n" +
                "CREATE PROCEDURE `Sproc_costingStopActivityForMultipleAssembly`(  \n" +
                "	IN prfqAssyID TEXT,  \n" +
                "	IN pUserId INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() INTO @pCurrentTime;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRFQAssembly;  \n" +
                "    SET @tempAssemblyDetail = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempRFQAssembly AS  \n" +
                "    select * from rfq_assemblies where id in (\",prfqAssyID,\")\");  \n" +
                "  \n" +
                "    PREPARE query2 FROM @tempAssemblyDetail;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  \n" +
                "	UPDATE rfq_assemblies SET  \n" +
                "		isActivityStart = 0,  \n" +
                "		activityStartBy = pUserId,  \n" +
                "		activityStopAt = @pCurrentTime  \n" +
                "	WHERE id IN (SELECT id FROM tempRFQAssembly);  \n" +
                "	# update transaction time on stop activity  \n" +
                "	UPDATE assembly_trans_history rth,(SELECT * FROM assembly_trans_history WHERE transactionType = 'B' AND activityType = 'P' AND refTransID IN (SELECT partid FROM tempRFQAssembly) AND  checkoutTime IS NULL) rath  \n" +
                "    SET  \n" +
                "		rth.checkoutTime = @pCurrentTime,  \n" +
                "		rth.totalTime = TIMESTAMPDIFF(SECOND, rath.checkinTime,@pCurrentTime),  \n" +
                "		rth.updatedBy = pUserId,  \n" +
                "		rth.updatedAt = @pCurrentTime  \n" +
                "	 WHERE rth.id = rath.id AND rth.refTransID = rath.refTransID;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempRFQAssembly;  \n" +
                "    COMMIT;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5819,'2.00','V1',' Alter procedure Sproc_costingStopActivityForMultipleAssembly-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5819:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 13-01-2022 **************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getCustomerListbyEmployee` ;  \n" +
                "CREATE PROCEDURE `Sproc_getCustomerListbyEmployee`(  \n" +
                "	IN pEmployeeID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                " DECLARE v_mfrFormatType INT;  \n" +
                " SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormatType;  \n" +
                "  \n" +
                "		SELECT mc.id,mc.mfgCode,mc.mfgName,mc.mfgType,mc.isCustOrDisty,mc.isActive,mc.salesCommissionTo ,  \n" +
                "		fun_GetFormattedMfgCode(mc.mfgCode,mc.mfgName,v_mfrFormatType) AS companyName  \n" +
                "        FROM mfgcodemst mc WHERE isDeleted = 0 AND isActive = 1 AND isCustOrDisty = 1 AND mfgType = 'MFG'  \n" +
                "		AND (CASE WHEN (SELECT COUNT(1) FROM employee_mfg_mapping WHERE employeeId = pEmployeeID AND isDeleted = 0) > 0 THEN  \n" +
                "		EXISTS (SELECT 1 FROM employee_mfg_mapping WHERE mfgCodeId =  mc.id AND employeeId = pEmployeeID AND isDeleted = 0)  \n" +
                "		ELSE 1=1 END)  \n" +
                "        ORDER BY mc.mfgName;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 13-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5820,'2.00','V1',' Bug 39729: QA Testing findings for MFGCodeNameFormat datakeys configuration and disable fields using inspect in RFQ-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5820:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustRefundedListByRefTrans` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustRefundedListByRefTrans`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPayCMID INT,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTransModeType INT,  \n" +
                "	IN pIsDisplayAllTransWhereCreditUsed TINYINT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE paymentCMJoin VARCHAR(1000);  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	IF (pTransModeType IS NOT NULL) THEN  \n" +
                "		IF (pTransModeType = -9) THEN  \n" +
                "			SET paymentCMJoin = CONCAT(\"  \n" +
                "				JOIN (SELECT psipd.refPayementid , psipd.paymentAmount As paymentAmountForPaymentCM ,  \n" +
                "							psipd.comment AS commentForPaymentCM  \n" +
                "						FROM packingslip_invoice_payment_det psipd  \n" +
                "							JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0 AND psipt.isPaymentVoided = 0  \n" +
                "						WHERE psipd.refRefundPaymentID = \",pPayCMID,\" AND psipd.refRefundPaymentID IS NOT NULL  \n" +
                "						AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "						) payCMRefundDetTemp  \n" +
                "					ON psip.id = payCMRefundDetTemp.refPayementid  \n" +
                "			\");  \n" +
                "		ELSEIF (pTransModeType = -6) THEN  \n" +
                "			SET paymentCMJoin = CONCAT(\"  \n" +
                "				JOIN (SELECT psipd.refPayementid , psipd.paymentAmount As paymentAmountForPaymentCM , psipd.comment AS commentForPaymentCM,  \n" +
                "							 cps.creditMemoNumber AS paymentCMNumber  \n" +
                "						 FROM packingslip_invoice_payment_det psipd  \n" +
                "							JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "						WHERE psipd.refRefundCustCreditMemoID = \",pPayCMID,\" AND psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "						AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "						) payCMRefundDetTemp  \n" +
                "					ON psip.id = payCMRefundDetTemp.refPayementid  \n" +
                "				\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustAllRefundTransactionPopupList = CONCAT(\"  \n" +
                "		SELECT  psip.id AS custPaymentDBMstID,  \n" +
                "			psip.mfgcodeID ,  \n" +
                "			fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, '\",v_mfgNameFormat,\"') customerCodeName,  \n" +
                "			psip.bankName,  \n" +
                "			psip.bankAccountNo,  \n" +
                "			psip.paymentType,  \n" +
                "			psip.paymentDate AS refundDate,  \n" +
                "			psip.paymentNumber,  \n" +
                "			gc.gencCategoryName paymentMethod,  \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "			payCMRefundDetTemp.paymentAmountForPaymentCM ,  \n" +
                "			payCMRefundDetTemp.commentForPaymentCM ,  \n" +
                "			gtmm.modeName,  \n" +
                "			psip.refPaymentMode,  \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "			fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		     JOIN mfgcodemst mcm ON mcm.id = psip.mfgcodeID AND mcm.isDeleted = 0  \n" +
                "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0  \n" +
                "		      \",paymentCMJoin,\"  \n" +
                "		WHERE psip.refPaymentMode = '\", pRefPaymentMode ,\"'  \n" +
                "		AND refGencTransModeID = '\",pTransModeType,\"'  \n" +
                "		AND psip.isPaymentVoided = 0  \n" +
                "		AND psip.isDeleted = 0  \"  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pIsDisplayAllTransWhereCreditUsed = 1) THEN  \n" +
                "  \n" +
                "		SET @Sproc_RetrieveCustAllRefundTransactionPopupList = CONCAT(@Sproc_RetrieveCustAllRefundTransactionPopupList, \"  \n" +
                "			UNION  \n" +
                "  \n" +
                "			SELECT 	psip.id AS custPaymentDBMstID,  \n" +
                "				psip.mfgcodeID ,  \n" +
                "				fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, '\",v_mfgNameFormat,\"') customerCodeName,  \n" +
                "				psip.bankName,  \n" +
                "				psip.bankAccountNo,  \n" +
                "				psip.paymentType,  \n" +
                "				psip.paymentDate AS refundDate,  \n" +
                "				psip.paymentNumber,  \n" +
                "				gc.gencCategoryName paymentMethod,  \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "				psip.paymentAmount AS paymentAmountForPaymentCM ,  \n" +
                "				psip.remark AS commentForPaymentCM ,  \n" +
                "				'Applied Credit Memo' AS modeName,  \n" +
                "				psip.refPaymentMode,  \n" +
                "				fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "				fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "				fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "			FROM packingslip_invoice_payment psip  \n" +
                "				JOIN mfgcodemst mcm ON mcm.id = psip.mfgcodeID AND mcm.isDeleted = 0  \n" +
                "				JOIN genericcategory gc ON gc.gencCategoryID = psip.paymentType AND gc.isDeleted = 0  \n" +
                "			WHERE psip.refPaymentMode = 'CA'  \n" +
                "			AND psip.refCustCreditMemoID = \",pPayCMID,\"  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0  \n" +
                "  \n" +
                "		\");  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY refPaymentMode ASC\");  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustAllRefundTransactionPopupList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	-- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustAllRefundTransactionPopupList,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerInvoicePayment` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(1000),  \n" +
                "	IN pInvoiceNumber VARCHAR(1000),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromAppliedDate DATE,  \n" +
                "	IN pToAppliedDate DATE,  \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pIsIncludeVoidedTransaction TINYINT ,  \n" +
                "	IN pPaymentRefundStatusFilter VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(5000);  \n" +
                "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);  \n" +
                "	DECLARE v_JoinWithCPSForCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedCM VARCHAR(5000);  \n" +
                "	DECLARE v_AppliedDateWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_AppliedDateCon VARCHAR(200);  \n" +
                "	DECLARE v_FieldsForAppliedWOFF VARCHAR(1000);  \n" +
                "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);  \n" +
                "	DECLARE v_PayRefundTblJoin VARCHAR(1000);  \n" +
                "	DECLARE v_FieldsForPayRefundTbl VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForPayStatus VARCHAR(1000);  \n" +
                "	DECLARE v_PaymentRefundStatusWhereClause VARCHAR(500);  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "	SET v_JoinWithCPSForCM = '';  \n" +
                "	SET v_FieldsForAppliedCM = '';  \n" +
                "	SET v_AppliedDateWhereClause = '';  \n" +
                "	SET v_AppliedDateCon = '';  \n" +
                "	SET v_FieldsForAppliedWOFF = '';  \n" +
                "	SET v_TypeOfPaymentWhereClause = '';  \n" +
                "	SET v_IsIncludeVoidedTransWhereClause = '';  \n" +
                "	SET v_PayRefundTblJoin = '';  \n" +
                "	SET v_FieldsForPayRefundTbl = '';  \n" +
                "	SET v_FieldsForPayStatus = '\"\"';  \n" +
                "	SET v_PaymentRefundStatusWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPaymentRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET v_PaymentRefundStatusWhereClause = CONCAT(' AND FIND_IN_SET(psip.refundStatus,''', pPaymentRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* show direct payment data or customer credit memo data */  \n" +
                "  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R') THEN  \n" +
                "		SET v_PayRefundTblJoin = CONCAT(' LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "								FROM packingslip_invoice_payment_det  \n" +
                "								WHERE refRefundPaymentID IS NOT NULL  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "								GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "							ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID ');  \n" +
                "		SET v_FieldsForPayRefundTbl = CONCAT(' paymentTotRefundDetTemp.totRefundIssuedOfPayment ,  \n" +
                "						psip.refundStatus , fun_getCustRefundPaymentStatusTextByValue(psip.refundStatus) AS refundPaymentStatusText ,  \n" +
                "						IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0)) AS adjustmenPendingAmt , ');  \n" +
                "		SET v_FieldsForPayStatus = CONCAT('  (CASE WHEN psip.paymentAmount =  \n" +
                "										(IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0)) THEN  \n" +
                "									(CASE WHEN psip.paymentAmount = IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) THEN \"Fully Applied\"  \n" +
                "										ELSE \"No Pending Amount\" END)  \n" +
                "							ELSE  \n" +
                "								(CASE WHEN IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) = 0 AND IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0  \n" +
                "									THEN \"Not Applied\"  \n" +
                "									ELSE \"Partially Applied\" END)  \n" +
                "							END) ') ;  \n" +
                "  \n" +
                "  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  /* CreditMemoApplied: 'CA' */  \n" +
                "  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');  \n" +
                "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cps ON psip.refCustCreditMemoID = cps.id AND cps.isDeleted = 0 ');  \n" +
                "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cps.creditMemoDate , cps.creditMemoNumber ,  \n" +
                "			cps.totalAmount AS creditMemoAmount ,cps.isMarkForRefund AS isMarkForRefundCM, cps.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "			fun_getIntToText(cps.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "			IFNULL(cps.totalAmount,0) + IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(CMTotRefundDetTemp.totRefundIssuedOfCM,0) AS adjustmenPendingAmtOfCM ,  \n" +
                "			cps.paymentStatus AS CMPaymentStatus,  \n" +
                "			fun_getCustCreditAppliedStatusTextByValue(cps.paymentStatus) AS creditAppliedStatus,  \n" +
                "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "			');  \n" +
                "		SET v_PayRefundTblJoin = CONCAT(' LEFT JOIN (SELECT refRefundCustCreditMemoID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfCM  \n" +
                "								FROM packingslip_invoice_payment_det  \n" +
                "								WHERE refRefundCustCreditMemoID IS NOT NULL  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "								GROUP BY refRefundCustCreditMemoID) AS CMTotRefundDetTemp  \n" +
                "							ON cps.id = CMTotRefundDetTemp.refRefundCustCreditMemoID ');  \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  /* 'COFF' - Write Off */  \n" +
                "		SET v_FieldsForAppliedWOFF = CONCAT(' (SELECT modeName FROM generic_transmode_mst WHERE id = refGencTransModeID AND isDeleted = 0) AS refGencTransModeIDText , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "             EXISTS(  \n" +
                "			SELECT  1  \n" +
                "			FROM packingslip_invoice_payment_det  \n" +
                "			WHERE refPayementid = psip.id  \n" +
                "			AND isDeleted=0  \n" +
                "			AND refCustPackingslipInvoiceID IN (SELECT id  \n" +
                "								FROM customer_packingslip  \n" +
                "								WHERE transType = \"I\"  \n" +
                "								AND invoiceNumber = \"',pInvoiceNumber,'\"  \n" +
                "								AND isDeleted=0)  \n" +
                "			 )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromAppliedDate IS NOT NULL OR pToAppliedDate IS NOT NULL) THEN  \n" +
                "		IF (pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NOT NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "		ELSEIF(pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate >= \"',pFromAppliedDate,'\" ');  \n" +
                "		ELSEIF(pToAppliedDate IS NOT NULL AND pFromAppliedDate IS NULL) THEN  \n" +
                "			SET v_AppliedDateCon = CONCAT(' AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET v_AppliedDateWhereClause = CONCAT(' AND  \n" +
                "			EXISTS(  \n" +
                "				SELECT  1  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refPayementid = psip.id  \n" +
                "				',v_AppliedDateCon,'  \n" +
                "				AND isDeleted=0  \n" +
                "			 )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pIsDisplayZeroPaymentDataOnly = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsIncludeVoidedTransaction = 0) THEN  \n" +
                "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"  \n" +
                "            SELECT  \n" +
                "		psip.id,  \n" +
                "                psip.mfgcodeID,  \n" +
                "		fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, '\",v_mfgNameFormat,\"') customerCodeName,  \n" +
                "                psip.isPaymentVoided,  \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN  \",v_FieldsForPayStatus,\"  \n" +
                "                    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue,  \n" +
                "                (CASE WHEN psip.isPaymentVoided = 0 THEN 'No' ELSE 'Yes' END) AS isPaymentVoidedBooleanConverted,  \n" +
                "		psip.voidPaymentReason,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
                "		(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')  \n" +
                "										ELSE NULL END) AS voidedAt,  \n" +
                "                psip.refVoidedPaymentNumber,  \n" +
                "                psip.refVoidedPaymentId,  \n" +
                "                psip.paymentNumber,  \n" +
                "                psip.bankName,  \n" +
                "                psip.bankAccountNo,  \n" +
                "                psip.paymentType,  \n" +
                "                psip.bankAccountMasID,  \n" +
                "                psip.systemId ,  \n" +
                "                psip.isMarkForRefund AS isMarkForRefundCP, psip.agreedRefundAmt AS agreedRefundAmtCP,  \n" +
                "				fun_getIntToText(psip.isMarkForRefund) isMarkRefundConvertedValueCP,  \n" +
                "                gc.gencCategoryName paymentMethod,  \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		psip.paymentDate,  \n" +
                "                psip.paymentAmount,  \n" +
                "		psip.payToAddress payToAddress,  \n" +
                "                psip.accountReference,  \n" +
                "                psip.remark,  \n" +
                "                psip.lockStatus,  \n" +
                "		(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "			 WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "		(CASE WHEN psip.lockStatus = 'LC' THEN 1 ELSE 0 END) AS isTransLocked,  \n" +
                "			(CASE WHEN psip.lockStatus = 'LC' THEN 'Yes' ELSE 'No' END) AS isTransLockedConvertedValue,  \n" +
                "                fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                invPayDetTemp.invoiceNumberList,  \n" +
                "                IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) AS selectedInvoiceTotPaymentAmount,  \n" +
                "  \n" +
                "                (CASE WHEN '\",pRefPaymentMode,\"' = 'R' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_packingslip_invoice_payment'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'CA' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_credit_memo_to_inv'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			WHEN '\",pRefPaymentMode,\"' = 'WOFF' THEN (SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'apply_cust_write_off_to_inv'  \n" +
                "								AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0)  \n" +
                "			ELSE NULL END) AS totalDocuments ,  \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
                "		\" ,v_FieldsForPayRefundTbl ,\"  \n" +
                "		\" , v_FieldsForAppliedCM ,\"  \n" +
                "		\" , v_FieldsForAppliedWOFF ,\"  \n" +
                "		invPayDetTemp.totDetLevelSelectedInvCount ,  \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "	   FROM packingslip_invoice_payment psip  \n" +
                "			JOIN mfgcodemst mcm ON mcm.id = psip.mfgcodeID AND mcm.isDeleted = 0  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber, '#####',cps.id SEPARATOR '@@@@@') invoiceNumberList ,  \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount ,  \n" +
                "					COUNT(1) AS totDetLevelSelectedInvCount  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "											AND cps.isDeleted = 0  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isDeleted = 0  \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "			\", v_JoinWithCPSForCM ,\"  \n" +
                "			\", v_PayRefundTblJoin ,\"  \n" +
                "            WHERE psip.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "             \" ,v_InvoiceNumberWhereClause ,  v_TypeOfPaymentWhereClause , v_AppliedDateWhereClause ,  \n" +
                "		v_IsIncludeVoidedTransWhereClause ,v_PaymentRefundStatusWhereClause , \"  \n" +
                "             AND psip.isDeleted = 0 \"  \n" +
                "             );  \n" +
                "  \n" +
                "  \n" +
                "	-- select @Sproc_RetrieveCustomerInvoicePayment ;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustomerAllRefundDetailLst` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerAllRefundDetailLst`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(1000),  \n" +
                "	IN pPaymentCMNumber VARCHAR(1000),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactRefundAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromCMPaymentDate DATE,  \n" +
                "	IN pToCMPaymentDate DATE,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTransModeType INT ,  \n" +
                "	IN pRefPaymentMstID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "        -- DECLARE v_PaymentNumberWhereClause VARCHAR(5000);  \n" +
                "        -- DECLARE v_CMNumberWhereClause VARCHAR(5000);  \n" +
                "		DECLARE v_CMPaymentWhereClause VARCHAR(1000);  \n" +
                "        DECLARE v_PaymentDateCon VARCHAR(1000);  \n" +
                "        DECLARE v_CMDateCon VARCHAR(1000);  \n" +
                "        DECLARE v_paymentDateWhereClause VARCHAR(1000);  \n" +
                "        DECLARE v_CMDateWhereClause VARCHAR(1000);  \n" +
                "        DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "        -- SET v_PaymentNumberWhereClause = '';  \n" +
                "        -- SET v_CMNumberWhereClause = '';  \n" +
                "        SET v_CMDateCon = '';  \n" +
                "        SET v_PaymentDateCon = '';  \n" +
                "        SET v_paymentDateWhereClause = '';  \n" +
                "        SET v_CMDateWhereClause = '';  \n" +
                "  \n" +
                "        IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pPaymentCMNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentCMNumber = \"', pPaymentCMNumber ,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND totalRefundIssuedAmount ',CASE WHEN pExactRefundAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" AND refundDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentCMDate >= \"',pFromCMPaymentDate,'\" AND paymentCMDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "	ELSEIF(pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentCMDate >= \"',pFromCMPaymentDate,'\" ');  \n" +
                "	ELSEIF(pToCMPaymentDate IS NOT NULL AND pFromCMPaymentDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentCMDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		SET @Sproc_RetrieveCustomerRefundDetails = CONCAT(\"  \n" +
                "		SELECT  psip.id,  \n" +
                "			psip.mfgcodeID ,  \n" +
                "			fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, '\",v_mfgNameFormat,\"') customerCodeName,  \n" +
                "			psip.bankName,  \n" +
                "			psip.bankAccountNo,  \n" +
                "			psip.paymentType,  \n" +
                "			psip.bankAccountMasID,  \n" +
                "			psip.systemId ,  \n" +
                "			psip.paymentDate AS refundDate,  \n" +
                "			psip.paymentAmount,  \n" +
                "			psip.remark,  \n" +
                "			psip.paymentNumber,  \n" +
                "			gc.gencCategoryName paymentMethod,  \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "             (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.totalAmount  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.payPaymentAmout  \n" +
                "				ELSE NULL END) AS paymentCMAmount ,  \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoNumber  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumber  \n" +
                "				ELSE NULL END) AS paymentCMNumber ,  \n" +
                "                 (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.id  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.id  \n" +
                "				ELSE NULL END) AS paymentCMMstID ,  \n" +
                "                (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.paymentAmount  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentAmount  \n" +
                "				ELSE NULL END) AS paymentAmountForPaymentCM ,  \n" +
                "                (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.comment  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.comment  \n" +
                "				ELSE NULL END) AS commentForPaymentCM ,  \n" +
                "		(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoDate  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentDate  \n" +
                "				ELSE NULL END) AS paymentCMDate ,  \n" +
                "			 psip.refGencTransModeID , gtmm.modeName,  \n" +
                "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,  \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "			fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		     JOIN mfgcodemst mcm ON mcm.id = psip.mfgcodeID AND mcm.isDeleted = 0  \n" +
                "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount, psipd.comment, psipt.paymentAmount As payPaymentAmout,  \n" +
                "						psipt.paymentNumber, psipt.id, psipt.paymentDate  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0 AND psipt.isPaymentVoided = 0  \n" +
                "					WHERE psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					 ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount ,psipd.comment,  \n" +
                "						 cps.creditMemoNumber, cps.id, cps.creditMemoDate , cps.totalAmount  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		WHERE psip.refPaymentMode = 'CR'  \n" +
                "		AND refGencTransModeID IN (-6,-7,-8,-9,-10,-11)  \n" +
                "		AND psip.isPaymentVoided = 0  \n" +
                "		AND psip.isDeleted = 0  \n" +
                "		 \"  \n" +
                "            );  \n" +
                "      -- select @Sproc_RetrieveCustomerRefundDetails;  \n" +
                "  \n" +
                "	IF (pRefPaymentMstID IS NOT NULL AND pRefPaymentMstID != '') THEN  \n" +
                "		SET @Sproc_RetrieveCustomerRefundDetails= CONCAT(@Sproc_RetrieveCustomerRefundDetails, ' AND psip.id = ',pRefPaymentMstID,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "			/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerRefundDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	 -- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerRefundDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustInvPaymentDetailList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustInvPaymentDetailList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromInvoiceDate DATE,  \n" +
                "	IN pToInvoiceDate DATE,  \n" +
                "	IN pFromAppliedDate DATE,  \n" +
                "	IN pToAppliedDate DATE,  \n" +
                "	IN pIsDisplayZeroPaymentDataOnly TINYINT,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pRefPaymentMstID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_TypeOfPaymentWhereClause VARCHAR(500);  \n" +
                "	DECLARE v_JoinWithCPSForCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedCM VARCHAR(500);  \n" +
                "	DECLARE v_FieldsForAppliedWOFF VARCHAR(1000);  \n" +
                "	DECLARE v_FieldsForPayStatus VARCHAR(1000);  \n" +
                "	DECLARE v_PayStatusDetTblJoin VARCHAR(1000);  \n" +
                "	DECLARE v_PayRefundTblJoin VARCHAR(1000);  \n" +
                "	DECLARE v_FieldsForPayRefundTbl VARCHAR(500);  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	SET v_JoinWithCPSForCM = '';  \n" +
                "	SET v_FieldsForAppliedCM = '';  \n" +
                "	SET v_FieldsForAppliedWOFF = '';  \n" +
                "	SET v_TypeOfPaymentWhereClause = '';  \n" +
                "	SET v_FieldsForPayStatus = '\"\"';  \n" +
                "	SET v_PayStatusDetTblJoin = '';  \n" +
                "	SET v_PayRefundTblJoin = '';  \n" +
                "	SET v_FieldsForPayRefundTbl = '';  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceNumber = \"',pInvoiceNumber,'\"');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromInvoiceDate IS NOT NULL AND pToInvoiceDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate >= \"',pFromInvoiceDate,'\" AND invoiceDate <= \"',pToInvoiceDate,'\" ');  \n" +
                "	ELSEIF(pFromInvoiceDate IS NOT NULL AND pToInvoiceDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate >= \"',pFromInvoiceDate,'\" ');  \n" +
                "	ELSEIF(pToInvoiceDate IS NOT NULL AND pFromInvoiceDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceDate <= \"',pToInvoiceDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate >= \"',pFromAppliedDate,'\" AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "	ELSEIF(pFromAppliedDate IS NOT NULL AND pToAppliedDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate >= \"',pFromAppliedDate,'\" ');  \n" +
                "	ELSEIF(pToAppliedDate IS NOT NULL AND pFromAppliedDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND appliedDate <= \"',pToAppliedDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pIsDisplayZeroPaymentDataOnly = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isZeroPayment = 1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pRefPaymentMode = 'R') THEN  \n" +
                "		SET v_PayRefundTblJoin = CONCAT(' LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "								FROM packingslip_invoice_payment_det  \n" +
                "								WHERE refRefundPaymentID IS NOT NULL  \n" +
                "								AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "								GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "							ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID ');  \n" +
                "		SET v_FieldsForPayRefundTbl = CONCAT(' psip.refundStatus , fun_getCustRefundPaymentStatusTextByValue(psip.refundStatus) AS refundPaymentStatusText , ');  \n" +
                "  \n" +
                "		SET v_PayStatusDetTblJoin = CONCAT(' LEFT JOIN (SELECT psipd.refPayementid, IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isPaymentVoided = 0 AND psipd.isDeleted = 0  \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid ');  \n" +
                "		SET v_FieldsForPayStatus = CONCAT('  (CASE WHEN psip.paymentAmount =  \n" +
                "										(IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0)) THEN  \n" +
                "									(CASE WHEN psip.paymentAmount = IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) THEN \"Fully Applied\"  \n" +
                "										ELSE \"No Pending Amount\" END)  \n" +
                "							ELSE  \n" +
                "								(CASE WHEN IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) = 0 AND IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0  \n" +
                "									THEN \"Not Applied\"  \n" +
                "									ELSE \"Partially Applied\" END)  \n" +
                "							END) ') ;  \n" +
                "	ELSEIF (pRefPaymentMode = 'CA') THEN  /* CreditMemoApplied: 'CA' */  \n" +
                "		SET v_TypeOfPaymentWhereClause = CONCAT(' AND psip.refCustCreditMemoID IS NOT NULL ');  \n" +
                "		SET v_JoinWithCPSForCM = CONCAT(' JOIN `customer_packingslip` cpscm ON psip.refCustCreditMemoID = cpscm.id AND cpscm.isDeleted = 0 ');  \n" +
                "		SET v_FieldsForAppliedCM = CONCAT(' psip.refCustCreditMemoID , cpscm.creditMemoDate , cpscm.creditMemoNumber ,  \n" +
                "			cpscm.totalAmount AS creditMemoAmount ,  \n" +
                "			fun_getCustCreditAppliedStatusTextByValue(cps.paymentStatus) AS creditAppliedStatus ,  \n" +
                "			');  \n" +
                "	ELSEIF (pRefPaymentMode = 'WOFF') THEN  /* 'COFF' - Write Off */  \n" +
                "		SET v_FieldsForAppliedWOFF = CONCAT(' (SELECT modeName FROM generic_transmode_mst WHERE id = refGencTransModeID AND isDeleted = 0) AS refGencTransModeIDText , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerInvoicePayment = CONCAT(\"  \n" +
                "            SELECT  \n" +
                "		psip.id AS paymentMstID ,  \n" +
                "                psip.mfgcodeID,  \n" +
                "		fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, '\",v_mfgNameFormat,\"') customerCodeName,  \n" +
                "                psip.paymentNumber,  \n" +
                "                psip.bankName,  \n" +
                "                psip.bankAccountNo,  \n" +
                "                psip.paymentType,  \n" +
                "                psip.bankAccountMasID,  \n" +
                "                gc.gencCategoryName paymentMethod,  \n" +
                "                gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		psip.paymentDate,  \n" +
                "                psip.paymentAmount,  \n" +
                "		psip.isZeroPayment , psip.depositBatchNumber ,  \n" +
                "		psip.refPaymentMode ,  \n" +
                "		cps.id AS invoiceMstID, cps.invoiceNumber , cps.invoiceDate ,  \n" +
                "		cps.totalAmount AS invoiceOrgAmount ,  \n" +
                "		psipd.paymentAmount AS invoiceDepositAmount ,  \n" +
                "		\" ,v_FieldsForPayRefundTbl ,\"  \n" +
                "		\" , v_FieldsForAppliedCM ,\"  \n" +
                "		\" , v_FieldsForAppliedWOFF ,\"  \n" +
                "		psipd.appliedDate ,  \n" +
                "		(CASE WHEN psip.isPaymentVoided = 0 THEN  \",v_FieldsForPayStatus,\"  \n" +
                "                    ELSE 'Voided' END) AS isPaymentVoidedConvertedValue,  \n" +
                "		fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "		fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "		fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "	   FROM packingslip_invoice_payment psip  \n" +
                "			JOIN mfgcodemst mcm ON mcm.id = psip.mfgcodeID AND mcm.isDeleted = 0  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			JOIN  packingslip_invoice_payment_det psipd ON psip.id = psipd.refPayementid AND psipd.isPaymentVoided = 0 AND psipd.isDeleted = 0  \n" +
                "				JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id AND transType = 'I' AND cps.isDeleted = 0  \n" +
                "			\",v_JoinWithCPSForCM ,\"  \n" +
                "			\",v_PayStatusDetTblJoin ,\"  \n" +
                "			\", v_PayRefundTblJoin ,\"  \n" +
                "            WHERE psip.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "		\" ,v_TypeOfPaymentWhereClause, \"  \n" +
                "            AND psip.isPaymentVoided = 0  \n" +
                "            AND psip.isDeleted = 0  \n" +
                "             \");  \n" +
                "  \n" +
                "  \n" +
                "	IF (pRefPaymentMstID IS NOT NULL AND pRefPaymentMstID != '') THEN  \n" +
                "		SET @Sproc_RetrieveCustomerInvoicePayment= CONCAT(@Sproc_RetrieveCustomerInvoicePayment, ' AND psipd.refPayementid = ',pRefPaymentMstID,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY appliedDate DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustAllRefundSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustAllRefundSummaryList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "	IN pRefundSubStatusIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(1000),  \n" +
                "	IN pPaymentCMNumber VARCHAR(1000),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactRefundAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromCMPaymentDate DATE,  \n" +
                "	IN pToCMPaymentDate DATE,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTransModeType INT,  \n" +
                "	IN pIsIncludeVoidedTransaction TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_CMPaymentWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_PaymentDateCon VARCHAR(1000);  \n" +
                "	DECLARE v_CMDateCon VARCHAR(1000);  \n" +
                "	DECLARE v_CMPaymentDateWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "        SET v_CMDateCon = '';  \n" +
                "        SET v_PaymentDateCon = '';  \n" +
                "        SET v_CMPaymentDateWhereClause = '';  \n" +
                "        SET v_IsIncludeVoidedTransWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "        IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pRefundSubStatusIDs IS NOT NULL AND pRefundSubStatusIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND subStatus in (',pRefundSubStatusIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pPaymentCMNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET (\"',pPaymentCMNumber,'\",c.paymentCMNumWithOutIDList) ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND totalRefundIssuedAmount ',CASE WHEN pExactRefundAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" AND refundDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromCMPaymentDate IS NOT NULL OR pToCMPaymentDate IS NOT NULL) THEN  \n" +
                "  \n" +
                "		IF (pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NOT NULL) THEN  \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "		ELSEIF(pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NULL) THEN  \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" ');  \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" ');  \n" +
                "		ELSEIF(pToCMPaymentDate IS NOT NULL AND pFromCMPaymentDate IS NULL) THEN  \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		SET v_CMPaymentDateWhereClause = CONCAT('  \n" +
                "			AND  \n" +
                "			(  \n" +
                "				EXISTS(  \n" +
                "					SELECT  1  \n" +
                "					FROM packingslip_invoice_payment_det pipddt  \n" +
                "						JOIN packingslip_invoice_payment pipdt ON pipddt.refRefundPaymentID = pipdt.id AND pipdt.isDeleted = 0  \n" +
                "					WHERE pipddt.refPayementid = psip.id  \n" +
                "					',v_PaymentDateCon,'  \n" +
                "					AND pipddt.isDeleted=0  \n" +
                "				 )  \n" +
                "				 OR  \n" +
                "				 EXISTS(  \n" +
                "					SELECT  1  \n" +
                "					FROM packingslip_invoice_payment_det pipddt  \n" +
                "						JOIN customer_packingslip cpsdt ON pipddt.refRefundCustCreditMemoID = cpsdt.id AND cpsdt.isDeleted = 0  \n" +
                "					WHERE pipddt.refPayementid = psip.id  \n" +
                "					',v_CMDateCon,'  \n" +
                "					AND pipddt.isDeleted=0  \n" +
                "				 )  \n" +
                "			)  \n" +
                "  \n" +
                "		');  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsIncludeVoidedTransaction = 0) THEN  \n" +
                "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerRefundDetails = CONCAT(\"  \n" +
                "		SELECT  psip.id,  \n" +
                "			psip.mfgcodeID ,  \n" +
                "			fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, '\",v_mfgNameFormat,\"') customerCodeName,  \n" +
                "			psip.isPaymentVoided,  psip.voidPaymentReason,  \n" +
                "			psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided = 0 THEN 'No' ELSE 'Yes' END) AS isPaymentVoidedBooleanConverted,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')  \n" +
                "									ELSE NULL END) AS voidedAt,  \n" +
                "			psip.bankName,  \n" +
                "			psip.bankAccountNo,  \n" +
                "			psip.paymentType,  \n" +
                "			psip.bankAccountMasID,  \n" +
                "			psip.systemId ,  \n" +
                "			psip.paymentDate AS refundDate,  \n" +
                "			psip.paymentAmount,  \n" +
                "			psip.accountReference,  \n" +
                "			psip.remark,  \n" +
                "			psip.paymentNumber,  \n" +
                "			gc.gencCategoryName paymentMethod,  \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMList  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentList  \n" +
                "				ELSE NULL END) AS paymentCMList ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMNumWithOutIDList  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumWithOutIDListList  \n" +
                "				ELSE NULL END) AS paymentCMNumWithOutIDList ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.totDetLevelSelectedCMCount  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.totDetLevelSelectedPaymentCount  \n" +
                "				ELSE NULL END) AS totDetLevelSelectedPaymentCMCount ,  \n" +
                "			(SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_payment_CM_Refund'  \n" +
                "			AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0) AS totalDocuments ,  \n" +
                "			psip.offsetAmount ,  \n" +
                "			psip.refGencTransModeID , gtmm.modeName,  \n" +
                "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,  \n" +
                "			psip.status , psip.subStatus ,  \n" +
                "			(CASE WHEN psip.subStatus = 1 THEN 'Draft' WHEN psip.subStatus = 2 THEN 'Published'  \n" +
                "				WHEN psip.subStatus = 3 THEN 'Ready to Print Check' WHEN psip.subStatus = 4 THEN 'Refunded'  \n" +
                "				ELSE '' END) AS refundSubStatusText,  \n" +
                "			(CASE WHEN psip.subStatus = 1 THEN 'Pending' WHEN psip.subStatus = 2 THEN 'Approved to Refund'  \n" +
                "				WHEN psip.subStatus = 3 THEN 'Approved To Pay' WHEN psip.subStatus = 4 THEN 'Paid'  \n" +
                "				ELSE '' END) AS refundSubStatusLogicalText,  \n" +
                "			psip.isMarkAsPaid,  \n" +
                "			(CASE WHEN psip.isMarkAsPaid = 0 THEN 'No'  WHEN psip.isMarkAsPaid = 1 THEN 'Yes'  \n" +
                "				ELSE 'Not Applicable' END) AS isMarkAsPaidBooleanConverted,  \n" +
                "			psip.lockStatus,  \n" +
                "			(CASE WHEN psip.lockStatus = 'LC' THEN 1 ELSE 0 END) AS isTransLocked,  \n" +
                "			(CASE WHEN psip.lockStatus = 'LC' THEN 'Yes' ELSE 'No' END) AS isTransLockedConvertedValue,  \n" +
                "			(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "				WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "			fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "			fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		     JOIN mfgcodemst mcm ON mcm.id = psip.mfgcodeID AND mcm.isDeleted = 0  \n" +
                "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber, '#####',psipt.id SEPARATOR '@@@@@') paymentList ,  \n" +
                "						GROUP_CONCAT(psipt.paymentNumber) paymentNumWithOutIDListList ,  \n" +
                "						COUNT(1) AS totDetLevelSelectedPaymentCount  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.creditMemoNumber, '#####',cps.id SEPARATOR '@@@@@') CMList ,  \n" +
                "						GROUP_CONCAT(cps.creditMemoNumber) CMNumWithOutIDList ,  \n" +
                "						COUNT(1) AS totDetLevelSelectedCMCount  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		WHERE psip.refPaymentMode = 'CR'  \n" +
                "		AND refGencTransModeID IN (-6,-7,-8,-9,-10,-11)  \n" +
                "		\",v_CMPaymentDateWhereClause, v_IsIncludeVoidedTransWhereClause ,\"  \n" +
                "		AND psip.isDeleted = 0  \n" +
                "  \n" +
                "            \");  \n" +
                "  \n" +
                "      -- select @Sproc_RetrieveCustomerRefundDetails;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "			/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerRefundDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	 -- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerRefundDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustSuppRefundListByPaymentNum` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustSuppRefundListByPaymentNum`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPaymentNumber VARCHAR(100),  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pCustRefundMstID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_refundMstIDWhrClause VARCHAR(50);  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "	SET v_refundMstIDWhrClause = '';  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "  \n" +
                "        IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pCustRefundMstID IS NULL AND pCustRefundMstID != '') THEN  \n" +
                "  		SET v_refundMstIDWhrClause = CONCAT(\" AND psip.id = \", pRefundMstID );  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	SET @Sproc_GetCustSuppRefundListByPaymentNum = CONCAT(\"  \n" +
                "		SELECT  psip.id,  \n" +
                "			psip.mfgcodeID ,  \n" +
                "			fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, '\",v_mfgNameFormat,\"') AS customerCodeName,  \n" +
                "			psip.bankName,  \n" +
                "			psip.bankAccountNo,  \n" +
                "			psip.paymentType,  \n" +
                "			psip.bankAccountMasID,  \n" +
                "			psip.systemId ,  \n" +
                "			psip.paymentDate AS refundDate,  \n" +
                "			psip.paymentAmount,  \n" +
                "			psip.accountReference,  \n" +
                "			psip.remark,  \n" +
                "			psip.paymentNumber,  \n" +
                "			gc.gencCategoryName AS paymentMethod,  \n" +
                "			gc.systemGenerated AS systemGeneratedPaymentMethod,  \n" +
                "			psip.refGencTransModeID , gtmm.modeName,  \n" +
                "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,  \n" +
                "			psip.refPaymentMode ,  \n" +
                "			(CASE WHEN psip.refPaymentMode = 'CR' THEN 'Customer Refund'  \n" +
                "				WHEN psip.refPaymentMode = 'P' THEN 'Supplier Payment' ELSE ''  \n" +
                "				END) AS entityNameInApplied,  \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "			fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		     JOIN mfgcodemst mcm ON mcm.id = psip.mfgcodeID AND mcm.isDeleted = 0  \n" +
                "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "		     LEFT JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0  \n" +
                "		WHERE psip.paymentNumber = '\", pPaymentNumber ,\"'  \n" +
                "		AND psip.bankAccountNo = '\", pBankAccountNo ,\"'  \n" +
                "		\",v_refundMstIDWhrClause,\"  \n" +
                "		AND psip.refPaymentMode IN ('CR','P')  \n" +
                "		AND psip.isPaymentVoided = 0  \n" +
                "		AND psip.isDeleted = 0  \n" +
                "  \n" +
                "            \");  \n" +
                "  \n" +
                "      --  select @Sproc_GetCustSuppRefundListByPaymentNum;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "			/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetCustSuppRefundListByPaymentNum,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	 -- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetCustSuppRefundListByPaymentNum,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerRefundByMstID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerRefundByMstID`(  \n" +
                "	IN pCustRefundMstID INT ,  \n" +
                "	IN pRefPaymentMode VARCHAR(5)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "		SELECT 	psip.id,  \n" +
                "			psip.mfgcodeID, psip.paymentNumber, psip.paymentDate, psip.paymentAmount,  \n" +
                "			psip.paymentType,  gc.gencCategoryName AS paymentMethodName,  \n" +
                "			psip.accountReference, psip.bankAccountMasID, psip.bankAccountNo,  \n" +
                "			psip.bankName,  psip.remark,  psip.isPaymentVoided, psip.systemId ,  \n" +
                "			psip.lockStatus, psip.isZeroPayment,  psip.depositBatchNumber,  \n" +
                "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  psip.offsetAmount , psip.refGencTransModeID ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided = 0 THEN  '' ELSE 'Voided' END) AS isRefundVoidedConvertedValue,  \n" +
                "			psip.status , psip.subStatus , psip.isMarkAsPaid ,  \n" +
                "			(CASE WHEN psip.subStatus = 1 THEN 'Pending' WHEN psip.subStatus = 2 THEN 'Approved to Refund'  \n" +
                "				WHEN psip.subStatus = 3 THEN 'Approved To Pay' WHEN psip.subStatus = 4 THEN 'Paid'  \n" +
                "				ELSE '' END) AS refundSubStatusText,  \n" +
                "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone , v_DateTimeDisplayFormat) AS lockedAt,  \n" +
                "			psip.billToName, psip.billToAddress,  \n" +
                "			psip.billToAddressID, psip.billToContactPersonID, psip.billToContactPerson,  \n" +
                "			fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, v_mfgNameFormat) AS mfgFullName ,  \n" +
                "			fun_getEmployeeIDByUserID(psip.updatedBy) AS updatedByEmp ,  \n" +
                "			fun_getEmployeeIDByUserID(psip.createdBy) AS createdByEmp ,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedbyInitial,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,  \n" +
                "			fun_getUserNameByID(psip.createdBy) createdbyInitial  \n" +
                "  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "			JOIN mfgcodemst mcm ON mcm.id = psip.mfgcodeID AND mcm.isDeleted = 0  \n" +
                "			JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "		WHERE psip.id = pCustRefundMstID  \n" +
                "		AND psip.refPaymentMode = pRefPaymentMode  \n" +
                "		AND psip.isDeleted = 0  \n" +
                "		;  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 17-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentDetForElastic` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentDetForElastic`(  \n" +
                "	IN pPaymentMstID INT,  \n" +
                "	IN pRefPaymentMode VARCHAR(5),  \n" +
                "	IN pFromdate DATE,  \n" +
                "	IN pTodate DATE,  \n" +
                "	IN pRequiredCount TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	IF (pRequiredCount) THEN  \n" +
                "		SELECT COUNT(1) totalCount  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		WHERE psip.refPaymentMode = IFNULL(pRefPaymentMode,psip.refPaymentMode)  \n" +
                "		AND psip.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT  \n" +
                "			psip.id,  \n" +
                "			psip.mfgcodeID, cps1.id AS custCreditMemoID , cps1.creditMemoNumber ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cps1.creditMemoDate, v_TimeZone, v_DateTimeDisplayFormat) AS creditMemoDate ,  \n" +
                "			fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, v_mfgNameFormat) customerCodeName,  \n" +
                "			psip.isPaymentVoided, psip.refPaymentMode ,  \n" +
                "			fun_getIntToText(psip.isPaymentVoided) AS isPaymentVoidedConvertedValue,  \n" +
                "			psip.voidPaymentReason,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone, v_DateTimeDisplayFormat)  \n" +
                "									ELSE NULL END) AS voidedAt,  \n" +
                "			psip.refVoidedPaymentNumber,  \n" +
                "			psip.refVoidedPaymentId,  \n" +
                "			psip.paymentNumber,  \n" +
                "			psip.bankName,  \n" +
                "			psip.bankAccountNo,  \n" +
                "			psip.paymentType,  \n" +
                "			psip.bankAccountMasID,  \n" +
                "			psip.systemId ,  \n" +
                "			gc.gencCategoryName paymentMethod,  \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "			psip.paymentDate,  \n" +
                "			psip.accountReference,  \n" +
                "			(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "			WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "			fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) lockedAt,  \n" +
                "			invPayDetTemp.invoiceNumberList,  \n" +
                "			psip.remark  , psip.depositBatchNumber,  \n" +
                "			psip.isDeleted,  \n" +
                "			(CASE WHEN psip.refPaymentMode IN ('WOFF','CR') THEN (SELECT modeName FROM `generic_transmode_mst` WHERE id = psip.refGencTransModeID)  \n" +
                "				ELSE NULL END) transactionModeName,  \n" +
                "			payRefundDetTemp.paymentNumListAgainstRefund,  \n" +
                "			cmRefundDetTemp.CMNumListAgainstRefund  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN mfgcodemst mcm ON mcm.id = psip.mfgcodeID AND mcm.isDeleted = 0  \n" +
                "			LEFT JOIN customer_packingslip cps1 ON cps1.id = refCustCreditMemoID AND cps1.transType = 'C' AND cps1.isDeleted = 0  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			LEFT JOIN generic_transmode_mst tm ON psip.refGencTransModeID = tm.id  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber SEPARATOR ', ') AS invoiceNumberList  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id AND cps.isDeleted = 0  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isDeleted = 0  \n" +
                "				      GROUP BY psipd.refPayementid) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber SEPARATOR ', ') AS paymentNumListAgainstRefund  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid,  GROUP_CONCAT(cps.creditMemoNumber SEPARATOR ', ') AS CMNumListAgainstRefund  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "            WHERE psip.id = IFNULL(pPaymentMstID,psip.id)  \n" +
                "            AND psip.refPaymentMode = IFNULL(pRefPaymentMode,psip.refPaymentMode)  \n" +
                "            AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(psip.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "					OR (DATE(fun_CovnertDateTimeByTimezoneValue(psip.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "				ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentByMstID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentByMstID`(  \n" +
                "	IN pPaymentMstID INT ,  \n" +
                "	IN pRefPaymentMode VARCHAR(10)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE v_PayRefundTblJoin VARCHAR(1000);  \n" +
                "		DECLARE v_FieldsForPayStatus VARCHAR(1000);  \n" +
                "		DECLARE v_FieldsForCustPayment VARCHAR(1000);  \n" +
                "		DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "		SET v_PayRefundTblJoin = '';  \n" +
                "		SET v_FieldsForPayStatus = '\"\"';  \n" +
                "		SET v_FieldsForCustPayment = '';  \n" +
                "  \n" +
                "		IF (pRefPaymentMode = 'R') THEN  \n" +
                "			SET v_PayRefundTblJoin = CONCAT(' LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "									FROM packingslip_invoice_payment_det  \n" +
                "									WHERE refRefundPaymentID = ',pPaymentMstID,'  \n" +
                "									AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "									GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "								ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID ');  \n" +
                "  \n" +
                "			SET v_FieldsForPayStatus = CONCAT('  (CASE WHEN psip.paymentAmount =  \n" +
                "											(IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0)) THEN  \n" +
                "										(CASE WHEN psip.paymentAmount = IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) THEN \"Fully Applied\"  \n" +
                "											ELSE \"No Pending Amount\" END)  \n" +
                "								ELSE  \n" +
                "									(CASE WHEN IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) = 0 AND IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0  \n" +
                "										THEN \"Not Applied\"  \n" +
                "										ELSE \"Partially Applied\" END)  \n" +
                "								END) ') ;  \n" +
                "  \n" +
                "			SET v_FieldsForCustPayment = CONCAT(' psip.refundStatus , fun_getCustRefundPaymentStatusTextByValue(psip.refundStatus) AS refundPaymentStatusText , ');  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		SET @v_querySt = CONCAT(\"  \n" +
                "		SELECT 	psip.id,  \n" +
                "			psip.mfgcodeID, psip.paymentNumber, psip.paymentDate, psip.paymentAmount,  \n" +
                "			psip.paymentType,  psip.accountReference, psip.bankAccountMasID, psip.bankAccountNo,  \n" +
                "			psip.bankName,  psip.remark,  psip.isPaymentVoided, psip.systemId ,  \n" +
                "			psip.refGencTransModeID ,  \n" +
                "			psip.lockStatus, psip.isZeroPayment,  psip.depositBatchNumber,  psip.isMarkForRefund , psip.agreedRefundAmt ,  \n" +
                "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  \n" +
                "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, '\",v_TimeZone,\"' , '\",v_DateTimeDisplayFormat,\"') AS lockedAt,  \n" +
                "			fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, '\",v_mfgNameFormat,\"') AS mfgFullName ,  \n" +
                "			\", v_FieldsForCustPayment,\"  \n" +
                "			(CASE WHEN psip.isPaymentVoided = 0 THEN  \",v_FieldsForPayStatus,\"  \n" +
                "				ELSE 'Voided' END) AS isPaymentVoidedConvertedValue ,  \n" +
                "			 (CASE WHEN psip.refPaymentID IS NULL THEN NULL  \n" +
                "				ELSE (SELECT paymentNumber FROM packingslip_invoice_payment WHERE id = psip.refPaymentID AND isDeleted = 0)  \n" +
                "					END) AS refPaymentNumFromTransInitiate ,  \n" +
                "			psip.refPaymentID  ,  \n" +
                "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundPaymentID = psip.id  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedOfPayment ,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) AS updatedByEmpInitialName,  \n" +
                "			fun_getEmployeeIDByUserID(psip.updatedBy) AS updatedByEmpID ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, '\",v_TimeZone,\"' , '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getUserNameByID(psip.createdBy) AS createdByEmpInitialName ,  \n" +
                "			fun_getEmployeeIDByUserID(psip.createdBy) AS createdByEmpID  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "			JOIN mfgcodemst mcm ON mcm.id = psip.mfgcodeID AND mcm.isDeleted = 0  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber) invoiceNumberList ,  \n" +
                "					IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id  \n" +
                "											AND cps.isDeleted = 0  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isDeleted = 0  \n" +
                "				     GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "			\", v_PayRefundTblJoin ,\"  \n" +
                "		WHERE psip.id = \",pPaymentMstID,\"  \n" +
                "		AND psip.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "		AND psip.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "  \n" +
                "		PREPARE query1 FROM @v_querySt;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** New Script -> 17-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentBalanceAndPastDue` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentBalanceAndPastDue`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pRequestType VARCHAR(5),  \n" +
                "	IN pAgedReceivablesDueAsOfDate DATE ,  \n" +
                "	IN pDueDate DATE ,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT  ,  \n" +
                "	IN pIsIncludeZeroValueInvoices TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	/* pRequestType Aged Receivable - 'AR' , Past Due - 'PD'  */  \n" +
                "	DECLARE vDueDate DATE;  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	/* cps.subStatus 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "  \n" +
                "	IF (pRequestType = 'AR') THEN	/* pRequestType Aged Receivable - 'AR' */  \n" +
                "		SET vDueDate = pAgedReceivablesDueAsOfDate;  \n" +
                "  \n" +
                "	ELSEIF (pRequestType = 'PD') THEN /* Past Due - 'PD' */  \n" +
                "		IF (pTermsAndAboveDays IS NOT NULL) THEN  \n" +
                "			SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;  \n" +
                "			SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "			SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;  \n" +
                "			SET vDueDate = DATE_ADD(currDateWithAppliedTimeZone, INTERVAL IFNULL(pTermsAndAboveDays,0) DAY);  \n" +
                "		ELSE  \n" +
                "			SET vDueDate = DATE_ADD(pDueDate, INTERVAL IFNULL(pAdditionalDays,0) DAY);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_balanceDue = CONCAT(\"  \n" +
                "	SELECT  \n" +
                "		temp_aged_details.customerID,  \n" +
                "		fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, '\",v_mfgNameFormat,\"') AS customerCodeName,  \n" +
                "		temp_aged_details.custCurrTermDays,  \n" +
                "		(SUM(temp_aged_details.invoiceCount) - SUM(temp_aged_details.paidInvoiceCount)) totalInvCount,  \n" +
                "		(SUM(temp_aged_details.unInvoiceCount)) totalUnInvCount,  \n" +
                "		(SUM(temp_aged_details.dratftCreditMemoCount)) totalDraftCreditMemoCount,  \n" +
                "		(SELECT count(1) FROM customer_packingslip WHERE transType='P' AND refCustInvoiceID IS NULL AND isDeleted=0 and customerID=temp_aged_details.customerID) packingSlipNotInvoicedCount,  \n" +
                "		SUM(temp_aged_details.totalDueAmount) totalAmountOfAgedDueReceivable,  \n" +
                "		SUM(temp_aged_details.currentAmount) totalAmountWithinTerms,  \n" +
                "		SUM(temp_aged_details.agedAmountAs0To30) agedAmountAs0To30,  \n" +
                "		SUM(temp_aged_details.agedAmountAs31To60) agedAmountAs31To60,  \n" +
                "		SUM(temp_aged_details.agedAmountAs61To90) agedAmountAs61To90,  \n" +
                "		SUM(temp_aged_details.agedAmountAs91To120) agedAmountAs91To120,  \n" +
                "		SUM(temp_aged_details.agedAmountAs121more) agedAmountAs121More,  \n" +
                "		SUM(temp_aged_details.totalOutstandingAmount) totalOutstandingAmount,  \n" +
                "		SUM(temp_aged_details.totalCreditMemoAmount) totalCreditMemoAmount,  \n" +
                "		SUM(temp_aged_details.totalUnappliedAmount) totalAdjustmentPendingAmount,  \n" +
                "		SUM(temp_aged_details.totalCreditAmount) totalCreditAmount,  \n" +
                "		(SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) totalOutStandingWithoutCreditMemo,  \n" +
                "		SUM(temp_aged_details.totalDraftAmount) totalNotInvoicedAmount,  \n" +
                "		SUM(temp_aged_details.totalRecievedAmount) totalRecievedAmount FROM (  \n" +
                "		SELECT  \n" +
                "				  `cid`.`customerID`                  AS `customerID`,  \n" +
                "				  `cid`.`refCustPackingslipInvoiceID` AS `refCustPackingslipInvoiceID`,  \n" +
                "				  SUM(`cid`.`invoiceCount`)           AS `invoiceCount`,  \n" +
                "				  SUM(`cid`.`unInvoiceCount`)         AS `unInvoiceCount`,  \n" +
                "				  SUM(`cid`.`dratftCreditMemoCount`)  AS `dratftCreditMemoCount`,  \n" +
                "				  -- `cid`.`DocDate`                  AS `DocDate`,  \n" +
                "				  -- `cpt`.`paymentTermsID`           AS `paymentTermsID`,  \n" +
                "				  `cid`.`termsDays`                   AS `termsDays`,  \n" +
                "				  `cpt`.`termsDays`                   AS `custCurrTermDays`,  \n" +
                "				  (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) AS `DueDaysDiff`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 30)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs0To30`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 31) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 60)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs31To60`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 61) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 90)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs61To90`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 91) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 120)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs91To120`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 121) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs121more`,  \n" +
                "				  SUM(`cid`.`totalInvoicedAmount`) , SUM(`cid`.`totalRecievedAmount`) , SUM(`cid`.`totalUnappliedCreditMemoAmount`) , SUM(`cid`.`totalCreditMemoAppliedAmount`),  \n" +
                "				  (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) AS `totalOutstandingAmount`,  \n" +
                "				  -- (CASE WHEN (`cid`.`refCustPackingslipInvoiceID`) IS NOT NULL THEN SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalCreditMemoAmount`) ELSE 0 END) AS `totalOutstandingAmount`,  \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`))  AS `totalCreditMemoAmount`,  \n" +
                "				  SUM(`cid`.`totalUnappliedAmount`)   AS `totalUnappliedAmount`,  \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`) + SUM(`cid`.`totalUnappliedAmount`)) AS `totalCreditAmount`,  \n" +
                "				  SUM(`cid`.`totalInvoicedAmount`)    AS `totalCustomerInvoicedAmount`,  \n" +
                "				  SUM(`cid`.`totalDraftAmount`)       AS `totalDraftAmount`,  \n" +
                "				  SUM(`cid`.`totalRecievedAmount`)    AS `totalRecievedAmount`,  \n" +
                "				  (CASE WHEN ((SUM(`cid`.`totalInvoicedAmount`) <> 0) AND (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`)) = 0) THEN 1 ELSE 0 END) paidInvoiceCount  \n" +
                "                  FROM  \n" +
                "(  \n" +
                "	SELECT  \n" +
                "					 `a`.`customerID`                     AS `customerID`,  \n" +
                "					 `a`.termsDays			      AS `termsDays`,  \n" +
                "					 `a`.`id`                             AS `refCustPackingslipInvoiceID`,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),1,0) AS `invoiceCount`,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),1,0) AS `unInvoiceCount`,  \n" +
                "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '1')),1,0) AS `dratftCreditMemoCount`,  \n" +
                "					IF((`a`.`transType` = 'I'),`a`.`invoiceDate`,`a`.`creditMemoDate`) AS `DocDate`,  \n" +
                "					IFNULL(b.totalCustomerInvoiceReceivedAmount,0)  AS `totalRecievedAmount`,  \n" +
                "					0                                    AS `totalUnappliedAmount`,  \n" +
                "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '2')),(IFNULL(`a`.`totalAmount`,0) + (IFNULL(c.totalCreditMemoAppliedAmount,0) + IFNULL(d.totRefundIssuedAgainstCreditMemo,0))),0) AS `totalUnappliedCreditMemoAmount`,  \n" +
                "					IFNULL(c.totalCreditMemoAppliedAmount, 0) AS totalCreditMemoAppliedAmount,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalInvoicedAmount`,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalDraftAmount`  \n" +
                "                       FROM `customer_packingslip` `a`  \n" +
                "						LEFT JOIN 	(SELECT     `b`.`refCustPackingslipInvoiceID`     					AS `refCustPackingslipInvoiceID`,  \n" +
                "										      SUM(IF(a.refPaymentMode='R',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalRecievedAmount`,  \n" +
                "										      0									  	AS `totalCreditMemoAppliedAmount`,  \n" +
                "											SUM(IFNULL(`b`.`paymentAmount`,0))    					AS `totalCustomerInvoiceReceivedAmount`  \n" +
                "										    FROM (`packingslip_invoice_payment` `a`  \n" +
                "										       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "											 ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "										    WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "											   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "											   AND (`a`.`refPaymentMode` IN ('R','CA','WOFF')))  \n" +
                "										    GROUP BY `b`.`refCustPackingslipInvoiceID` ) b  \n" +
                "										ON a.id = b.refCustPackingslipInvoiceID  \n" +
                "  \n" +
                "						LEFT JOIN 	(  \n" +
                "									SELECT  \n" +
                "											a.`refCustCreditMemoID` AS refCustCreditMemoID,  \n" +
                "											SUM(IF(a.refPaymentMode='CA',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalCreditMemoAppliedAmount`  \n" +
                "									FROM `packingslip_invoice_payment` `a`  \n" +
                "										       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "											 ON (`b`.`refPayementid` = `a`.`id`)  \n" +
                "										    WHERE (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "											   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "											   AND (`a`.`refPaymentMode` IN ('R','CA'))  \n" +
                "										    GROUP BY `a`.`refCustCreditMemoID`  \n" +
                "										    ) c  ON a.id = c.refCustCreditMemoID  \n" +
                "						LEFT JOIN (  \n" +
                "									SELECT SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo , refRefundCustCreditMemoID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										GROUP BY refRefundCustCreditMemoID  \n" +
                "									) d  ON a.id = d.refRefundCustCreditMemoID  \n" +
                "					WHERE ((`a`.`transType` IN('I','C'))  \n" +
                "                -- AND a.paymentStatus <> 'RE'  \n" +
                "					      AND (CASE WHEN \",pIsIncludeZeroValueInvoices,\" = 0 AND a.transType = 'I' THEN IFNULL(a.totalAmount,0) > 0 ELSE 1=1 END)  \n" +
                "					      AND (`a`.`isDeleted` = 0))  \n" +
                "	UNION  \n" +
                "      SELECT  \n" +
                "			`a`.`mfgcodeID`                       					AS `customerID`,  \n" +
                "			NULL									AS `termsDays`,  \n" +
                "			NULL									AS `refCustPackingslipInvoiceID`,  \n" +
                "			0                                     					AS `invoiceCount`,  \n" +
                "			0                                     					AS `unInvoiceCount`,  \n" +
                "			0                                     					AS `dratftCreditMemoCount`,  \n" +
                "			`a`.`paymentDate`                     					AS `DocDate`,  \n" +
                "			0  									AS `totalRecievedAmount`,  \n" +
                "			((IFNULL(`a`.`paymentAmount`,0) - (SUM(IFNULL(`b`.`paymentAmount`,0)) + IFNULL(c.totRefundIssuedOfPayment,0))) * -(1)) 	AS `totalUnappliedAmount`,  \n" +
                "			0                                     					AS `totalUnappliedCreditMemoAmount`,  \n" +
                "			0									AS `totalCreditMemoAppliedAmount`,  \n" +
                "			0                                     					AS `totalInvoicedAmount`,  \n" +
                "			0                                     					AS `totalDraftAmount`  \n" +
                "			FROM (`packingslip_invoice_payment` `a`  \n" +
                "				LEFT JOIN `packingslip_invoice_payment_det` `b` ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "				LEFT JOIN (  \n" +
                "						SELECT SUM(paymentAmount) AS totRefundIssuedOfPayment , refRefundPaymentID  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID  \n" +
                "					     ) c  ON a.id = c.refRefundPaymentID  \n" +
                "			WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "			AND (`a`.`isPaymentVoided` = 0)  \n" +
                "			AND (`a`.`refPaymentMode` = 'R'))  \n" +
                "			GROUP BY `a`.`mfgcodeID`,a.id  ,`a`.`paymentDate`,`a`.`paymentAmount` , c.totRefundIssuedOfPayment  \n" +
                "                   HAVING  ((IFNULL(`a`.`paymentAmount`,0) - SUM(IFNULL(`b`.`paymentAmount`,0))) * -(1))  != 0  \n" +
                "                ) AS  cid  \n" +
                "                     INNER JOIN `vu_customer_payment_terms` `cpt` ON (`cid`.`customerID` = `cpt`.`mfgCodeID`)  \n" +
                "                  GROUP BY `cid`.`customerID`,`cid`.`refCustPackingslipInvoiceID`, `cid`.`termsDays` , `cpt`.`termsDays`,  \n" +
                "				`cid`.`DocDate` ,  \n" +
                "			(TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY)))  \n" +
                "                ) AS temp_aged_details  \n" +
                "  \n" +
                "		JOIN mfgcodemst mcm ON mcm.id = temp_aged_details.customerID AND mcm.isDeleted = 0  \n" +
                "		GROUP BY temp_aged_details.customerID, temp_aged_details.custCurrTermDays  \n" +
                "		HAVING ((SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) <> 0)  \n" +
                "		 OR SUM(temp_aged_details.totalDraftAmount) <> 0  \n" +
                "	\");  \n" +
                "  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY totalOutstandingAmount desc, customerCodeName asc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_balanceDue ,\" ) c where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*  \n" +
                "			FROM 	(\", @temp_balanceDue ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "	-- SELECT @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustAgedReceivablesRangeDet` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustAgedReceivablesRangeDet`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pAgedReceivablesDueAsOfDate DATE ,  \n" +
                "	IN pDueDate DATE ,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT  ,  \n" +
                "	IN pIsIncludeZeroValueInvoices TINYINT ,  \n" +
                "	IN pCustomerID VARCHAR(10000) ,  \n" +
                "	IN pAgedRecvAmtWithIn VARCHAR(20),  \n" +
                "	IN pIsAllCustAllInvOnly TINYINT,  \n" +
                "	IN pIsAllCustAllUninvOnly TINYINT,  \n" +
                "	IN pIsAllCustAllDraftCMOnly TINYINT,  \n" +
                "	IN pIsAllCustAllPSWithOutInv TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE vDueDate DATE;  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);  \n" +
                "	DECLARE vAgedAmtWithIn VARCHAR(1000);  \n" +
                "	-- DECLARE vSumOfAgedAmtWithIn VARCHAR(1000);  \n" +
                "	DECLARE vWCCustIDForInv VARCHAR(10000);  \n" +
                "	DECLARE vWCCustIDForPMT VARCHAR(10000);  \n" +
                "	DECLARE vWCAllCustAllInv VARCHAR(100);  \n" +
                "	DECLARE vAgedAmtWithInCondition VARCHAR(1000);  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	SET vAgedAmtWithIn = \" \";  \n" +
                "	-- SET vSumOfAgedAmtWithIn = \" \";  \n" +
                "	SET vWCCustIDForInv = \" \";  \n" +
                "	SET vWCCustIDForPMT = \" \";  \n" +
                "	SET vWCAllCustAllInv = \" \";  \n" +
                "	SET vAgedAmtWithInCondition = '';  \n" +
                "	/* cps.subStatus 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "	IF (pTermsAndAboveDays IS NOT NULL) THEN  \n" +
                "		SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;  \n" +
                "		SET vDueDate = DATE_ADD(currDateWithAppliedTimeZone, INTERVAL IFNULL(pTermsAndAboveDays,0) DAY);  \n" +
                "	ELSE  \n" +
                "		SET vDueDate = DATE_ADD(pDueDate, INTERVAL IFNULL(pAdditionalDays,0) DAY);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pIsAllCustAllPSWithOutInv = 1) THEN  /* get all customer packing slip which */  \n" +
                "		IF (pCustomerID IS NOT NULL AND pCustomerID != '') THEN  \n" +
                "			SET vWCCustIDForInv = CONCAT(' AND cps.customerID IN (',pCustomerID,') ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET @temp_balanceDue = CONCAT(\"  \n" +
                "				SELECT cps.id AS cpsMstID, cps.packingSlipNumber, cps.packingSlipDate, cps.refSalesOrderID,  \n" +
                "					cps.transType, 'Customer Packing Slip' AS `transTypeText` ,  \n" +
                "					fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, '\",v_mfgNameFormat,\"') AS customerCodeName  \n" +
                "				FROM customer_packingslip cps  \n" +
                "					JOIN mfgcodemst mcm ON mcm.id = cps.customerID AND mcm.isDeleted = 0  \n" +
                "				WHERE cps.transType = 'P'  \n" +
                "				\",vWCCustIDForInv,\"  \n" +
                "				AND cps.refCustInvoiceID IS NULL  \n" +
                "				AND cps.isDeleted = 0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "	ELSE  /* aged receivable details */  \n" +
                "  \n" +
                "		IF (pAgedRecvAmtWithIn IS NOT NULL AND pAgedRecvAmtWithIn != '') THEN  \n" +
                "			IF (pAgedRecvAmtWithIn = 'TotPastDue') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.totalDueAmount) totalAmountOfAgedDueReceivable , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) ');  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = 'CurrAmtWithinTerms') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.currentAmount) totalAmountWithinTerms , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) ');  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = '0-30') THEN  \n" +
                "				-- set vSumOfAgedAmtWithIn = concat( ' SUM(temp_aged_details.agedAmountAs0To30) agedAmountAs0To30 , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 30)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs0To30` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 30)) ');  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = '31-60') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs31To60) agedAmountAs31To60 , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 31) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 60)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs31To60` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 31) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 60)) ' );  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = '61-90') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs61To90) agedAmountAs61To90 , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 61) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 90)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs61To90` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 61) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 90)) ' );  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = '91-120') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs91To120) agedAmountAs91To120 , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 91) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 120)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs91To120` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 91) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 120)) ' );  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = '120+') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs121more) agedAmountAs121More , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 121) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs121more` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 121) ' );  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pCustomerID IS NOT NULL AND pCustomerID != '') THEN  \n" +
                "			SET vWCCustIDForInv = CONCAT(' AND `a`.`customerID` IN (',pCustomerID,') ');  \n" +
                "			SET vWCCustIDForPMT = CONCAT(' AND `a`.`mfgcodeID` IN (',pCustomerID,') ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsAllCustAllInvOnly = 1) THEN  \n" +
                "			SET vWCAllCustAllInv = CONCAT(' WHERE `cid`.`invoiceCount` = 1 ');  \n" +
                "		ELSEIF (pIsAllCustAllUninvOnly = 1) THEN  \n" +
                "			SET vWCAllCustAllInv = CONCAT(' WHERE `cid`.`unInvoiceCount` = 1 ');  \n" +
                "		ELSEIF (pIsAllCustAllDraftCMOnly = 1) THEN  \n" +
                "			SET vWCAllCustAllInv = CONCAT(' WHERE `cid`.`dratftCreditMemoCount` = 1 ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		SET @temp_balanceDue = CONCAT(\"  \n" +
                "		SELECT  temp_aged_details.*,  \n" +
                "			fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, '\",v_mfgNameFormat,\"') AS customerCodeName  \n" +
                "  \n" +
                "		 FROM (  \n" +
                "				SELECT  \n" +
                "					  `cid`.`customerID`                  AS `customerID`,  \n" +
                "					  `cid`.`transMstID` 		      AS `transMstID`,  \n" +
                "					  `cid`.`transNumber` 		      AS `transNumber` ,  \n" +
                "					  `cid`.`transType`		      AS  `transType` ,  \n" +
                "					  `cid`.`transTypeText` 	      AS `transTypeText` ,  \n" +
                "					  SUM(`cid`.`invoiceCount`)           AS `invoiceCount`,  \n" +
                "					  SUM(`cid`.`unInvoiceCount`)         AS `unInvoiceCount`,  \n" +
                "					  SUM(`cid`.`dratftCreditMemoCount`)  AS `dratftCreditMemoCount`,  \n" +
                "					  `cid`.`DocDate`                     AS `DocDate`,  \n" +
                "					  `cid`.`termsDays`                   AS `termsDays`,  \n" +
                "					  (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) AS `DueDaysDiff`,  \n" +
                "					  -- (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount`,  \n" +
                "					  -- (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount`,  \n" +
                "					  \",vAgedAmtWithIn,\"  \n" +
                "					  (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) AS `totalOutstandingAmount`,  \n" +
                "					  (SUM(`cid`.`totalUnappliedCreditMemoAmount`))  AS `totalCreditMemoAmount`,  \n" +
                "					  SUM(`cid`.`totalUnappliedAmount`)   AS `totalUnappliedAmount`,  \n" +
                "					  (SUM(`cid`.`totalUnappliedCreditMemoAmount`) + SUM(`cid`.`totalUnappliedAmount`)) AS `totalCreditAmount`,  \n" +
                "					  SUM(`cid`.`totalInvoicedAmount`)    AS `totalCustomerInvoicedAmount`,  \n" +
                "					  SUM(`cid`.`totalDraftAmount`)       AS `totalDraftAmount`,  \n" +
                "					  SUM(`cid`.`totalRecievedAmount`)    AS `totalRecievedAmount`,  \n" +
                "					  (CASE WHEN ((SUM(`cid`.`totalInvoicedAmount`) <> 0) AND (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`)) = 0) THEN 1 ELSE 0 END) paidInvoiceCount  \n" +
                "				FROM  \n" +
                "					(  \n" +
                "						SELECT  \n" +
                "							 `a`.`customerID`                     AS `customerID`,  \n" +
                "							 `a`.termsDays			      AS `termsDays`,  \n" +
                "							 `a`.`id`                             AS `transMstID`,  \n" +
                "							 IF((`a`.`transType` = 'I'), `a`.`invoiceNumber`, `a`.`creditMemoNumber`) AS `transNumber`,  \n" +
                "							 `a`.`transType`		      AS `transType` ,  \n" +
                "							IF((`a`.`transType` = 'I'), 'Customer Invoice', 'Customer Credit Memo') AS `transTypeText`,  \n" +
                "							IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),1,0) AS `invoiceCount`,  \n" +
                "							IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),1,0) AS `unInvoiceCount`,  \n" +
                "							IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '1')),1,0) AS `dratftCreditMemoCount`,  \n" +
                "							IF((`a`.`transType` = 'I'),`a`.`invoiceDate`,`a`.`creditMemoDate`) AS `DocDate`,  \n" +
                "							IFNULL(b.totalCustomerInvoiceReceivedAmount,0)  AS `totalRecievedAmount`,  \n" +
                "							0                                    AS `totalUnappliedAmount`,  \n" +
                "							IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '2')),(IFNULL(`a`.`totalAmount`,0) + (IFNULL(c.totalCreditMemoAppliedAmount,0) + IFNULL(d.totRefundIssuedAgainstCreditMemo,0))),0) AS `totalUnappliedCreditMemoAmount`,  \n" +
                "							IFNULL(c.totalCreditMemoAppliedAmount, 0) AS totalCreditMemoAppliedAmount,  \n" +
                "							IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalInvoicedAmount`,  \n" +
                "							-- IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalDraftAmount`  \n" +
                "							(CASE WHEN `a`.`transType` = 'I' AND (`a`.`subStatus` = '1' OR `a`.`subStatus` > '3') THEN IFNULL(`a`.`totalAmount`,0)  \n" +
                "								WHEN `a`.`transType` = 'C' AND `a`.`subStatus` = '1' THEN IFNULL(`a`.`totalAmount`,0)  \n" +
                "								ELSE 0 END) AS totalDraftAmount  \n" +
                "						FROM `customer_packingslip` `a`  \n" +
                "								LEFT JOIN 	(SELECT     `b`.`refCustPackingslipInvoiceID`     					AS `refCustPackingslipInvoiceID`,  \n" +
                "												      SUM(IF(a.refPaymentMode='R',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalRecievedAmount`,  \n" +
                "												      0									  	AS `totalCreditMemoAppliedAmount`,  \n" +
                "													SUM(IFNULL(`b`.`paymentAmount`,0))    					AS `totalCustomerInvoiceReceivedAmount`  \n" +
                "												    FROM (`packingslip_invoice_payment` `a`  \n" +
                "												       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "													 ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "												    WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "													   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "													   AND (`a`.`refPaymentMode` IN ('R','CA','WOFF')))  \n" +
                "												    GROUP BY `b`.`refCustPackingslipInvoiceID` ) b  \n" +
                "												ON a.id = b.refCustPackingslipInvoiceID  \n" +
                "  \n" +
                "								LEFT JOIN 	(  \n" +
                "											SELECT  \n" +
                "													a.`refCustCreditMemoID` AS refCustCreditMemoID,  \n" +
                "													SUM(IF(a.refPaymentMode='CA',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalCreditMemoAppliedAmount`  \n" +
                "											FROM `packingslip_invoice_payment` `a`  \n" +
                "												       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "													 ON (`b`.`refPayementid` = `a`.`id`)  \n" +
                "												    WHERE (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "													   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "													   AND (`a`.`refPaymentMode` IN ('R','CA'))  \n" +
                "												    GROUP BY `a`.`refCustCreditMemoID`  \n" +
                "												    ) c  ON a.id = c.refCustCreditMemoID  \n" +
                "								LEFT JOIN (  \n" +
                "											SELECT SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo , refRefundCustCreditMemoID  \n" +
                "												FROM packingslip_invoice_payment_det  \n" +
                "												WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "												GROUP BY refRefundCustCreditMemoID  \n" +
                "											) d  ON a.id = d.refRefundCustCreditMemoID  \n" +
                "						WHERE ( (`a`.`transType` IN('I','C'))  \n" +
                "						\",vWCCustIDForInv,\"  \n" +
                "						AND  (a.paymentStatus <> 'RE')  \n" +
                "						-- AND  (IFNULL(a.totalAmount,0) != 0)  \n" +
                "						AND (CASE WHEN \",pIsIncludeZeroValueInvoices,\" = 0 AND a.transType = 'I' THEN IFNULL(a.totalAmount,0) > 0 ELSE 1=1 END)  \n" +
                "						AND (`a`.`isDeleted` = 0))  \n" +
                "  \n" +
                "					UNION  \n" +
                "  \n" +
                "						SELECT  \n" +
                "							`a`.`mfgcodeID`                       					AS `customerID`,  \n" +
                "							NULL									AS `termsDays`,  \n" +
                "							`a`.`id`								AS `transMstID`,  \n" +
                "							`a`.`paymentNumber`							AS `transNumber` ,  \n" +
                "							'R'		  	    						AS `transType` ,  \n" +
                "							'Customer Payment' 							AS `transTypeText`,  \n" +
                "							0                                     					AS `invoiceCount`,  \n" +
                "							0                                     					AS `unInvoiceCount`,  \n" +
                "							0                                     					AS `dratftCreditMemoCount`,  \n" +
                "							`a`.`paymentDate`                     					AS `DocDate`,  \n" +
                "							0  									AS `totalRecievedAmount`,  \n" +
                "							((IFNULL(`a`.`paymentAmount`,0) - (SUM(IFNULL(`b`.`paymentAmount`,0)) + IFNULL(c.totRefundIssuedOfPayment,0))) * -(1)) 	AS `totalUnappliedAmount`,  \n" +
                "							0                                     					AS `totalUnappliedCreditMemoAmount`,  \n" +
                "							0									AS `totalCreditMemoAppliedAmount`,  \n" +
                "							0                                     					AS `totalInvoicedAmount`,  \n" +
                "							0                                     					AS `totalDraftAmount`  \n" +
                "							FROM (`packingslip_invoice_payment` `a`  \n" +
                "								LEFT JOIN `packingslip_invoice_payment_det` `b` ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "								LEFT JOIN (  \n" +
                "										SELECT SUM(paymentAmount) AS totRefundIssuedOfPayment , refRefundPaymentID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										GROUP BY refRefundPaymentID  \n" +
                "									     ) c  ON a.id = c.refRefundPaymentID  \n" +
                "							WHERE ( (`a`.`refPaymentMode` = 'R')  \n" +
                "							\",vWCCustIDForPMT,\"  \n" +
                "							AND (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "							AND (`a`.`isPaymentVoided` = 0) )  \n" +
                "							GROUP BY `a`.`mfgcodeID`, a.id  ,`a`.`paymentDate`,`a`.`paymentAmount` , `a`.`paymentNumber` ,  \n" +
                "									c.totRefundIssuedOfPayment  \n" +
                "							HAVING  ((IFNULL(`a`.`paymentAmount`,0) - SUM(IFNULL(`b`.`paymentAmount`,0))) * -(1))  != 0  \n" +
                "					) AS  cid  \n" +
                "  \n" +
                "				\",vWCAllCustAllInv,\"  \n" +
                "				GROUP BY `cid`.`customerID`,`cid`.`transMstID`, `cid`.`transNumber` ,  \n" +
                "					`cid`.`DocDate`, `cid`.`termsDays` ,  `cid`.`transType` , `cid`.`transTypeText` ,  \n" +
                "					(TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY)))  \n" +
                "				HAVING (CASE WHEN `cid`.`transType` = 'C' AND \",pIsAllCustAllDraftCMOnly,\" != 1 THEN SUM(`cid`.`totalUnappliedCreditMemoAmount`) != 0  \n" +
                "							\",vAgedAmtWithInCondition,\"  \n" +
                "						WHEN `cid`.`transType` = 'I' AND \",pIsAllCustAllUninvOnly,\" != 1 THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) != 0)  \n" +
                "							\",vAgedAmtWithInCondition,\"  \n" +
                "						WHEN `cid`.`transType` = 'R' THEN SUM(`cid`.`totalUnappliedAmount`) != 0  \n" +
                "					ELSE 1=1 END)  \n" +
                "  \n" +
                "  \n" +
                "			   ) AS temp_aged_details  \n" +
                "			JOIN mfgcodemst mcm ON mcm.id = temp_aged_details.customerID AND mcm.isDeleted = 0  \n" +
                "  \n" +
                "  \n" +
                "		\");  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY transTypeText asc, customerCodeName asc \") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_balanceDue ,\" ) c where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*  \n" +
                "			FROM 	(\", @temp_balanceDue ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "	-- SELECT @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCreditMemoDetailForApplyInInvByMstID` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCreditMemoDetailForApplyInInvByMstID`(  \n" +
                "	IN pCustCreditMemoMstID INT ,  \n" +
                "	IN pCustomerPaymentMstID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	SELECT psip.id , cps.id AS custCreditMemoMstID, cps.customerID , cps.creditMemoNumber , cps.creditMemoDate ,  \n" +
                "			cps.totalAmount ,  cps.agreedRefundAmt , cps.isLocked ,  \n" +
                "			psip.systemId , psip.mfgcodeID , psip.paymentNumber , psip.paymentDate , psip.paymentAmount ,  \n" +
                "			psip.accountReference , psip.remark, psip.depositBatchNumber, psip.isPaymentVoided , psip.refPaymentMode ,  \n" +
                "			psip.paymentNumber , psip.lockStatus,  \n" +
                "			fun_getUserNameByID(psip.lockedBy) AS lockedByUserInitialName ,  \n" +
                "			fun_getEmpployeeNameByUserID(psip.lockedBy) AS lockedByUserName ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) AS lockedAt,  \n" +
                "			(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "					AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "			fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, v_mfgNameFormat) AS mfgFullName ,  \n" +
                "			(CASE WHEN IFNULL(psip.isPaymentVoided,0) = 0  THEN NULL ELSE 'Voided' END) AS isPaymentVoidedConvertedValue  ,  \n" +
                "			cps.paymentStatus AS CMPaymentStatus,  \n" +
                "			fun_getCustCreditAppliedStatusTextByValue(cps.paymentStatus) AS creditAppliedStatus,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) AS updatedByEmpInitialName,  \n" +
                "			fun_getEmployeeIDByUserID(psip.updatedBy) AS updatedByEmpID ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone , v_DateTimeDisplayFormat) updatedAt,  \n" +
                "			fun_getUserNameByID(psip.createdBy) AS createdByEmpInitialName ,  \n" +
                "			fun_getEmployeeIDByUserID(psip.createdBy) AS createdByEmpID  \n" +
                "	FROM customer_packingslip AS cps  \n" +
                "		JOIN mfgcodemst mcm ON mcm.id = cps.customerID AND mcm.isDeleted = 0  \n" +
                "		LEFT JOIN packingslip_invoice_payment AS psip ON cps.id = psip.refCustCreditMemoID  \n" +
                "				AND psip.isDeleted = 0  AND refCustCreditMemoID IS NOT NULL AND refPaymentMode = 'CA'  \n" +
                "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN isPaymentVoided = 0 ELSE 1=1 END)  \n" +
                "				AND (CASE WHEN pCustomerPaymentMstID IS NULL THEN 1=1 ELSE psip.id = pCustomerPaymentMstID END)  \n" +
                "	WHERE cps.id = pCustCreditMemoMstID  \n" +
                "	AND cps.isDeleted = 0  \n" +
                "		;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5821,'2.00','V1',' mfg code name format related changes - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
    }
    return allDbChangesArray;
});

// sample
//break;
//case 5698:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 28-12-2021 *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version -> 28-12-2021 *********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
//  "VALUES (5699,'2.00','V1',' Sample entry - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
//  );
//break;

/* ******** **********************/
// Please Note : Don't forgot to set schemaVersion as '2.00' instead of '1.00' as branch is Dev Branch
/* ******** **********************/