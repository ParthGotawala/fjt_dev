(function (maxBuildNumber, userid, requiredDet) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 5821:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-01-2022 *********************************** */
                "ALTER TABLE `packing_slip_material_receive`  \n" +
                "ADD COLUMN `billToAddressID` INT NULL,  \n" +
                "ADD COLUMN `billToConactPerson` VARCHAR(1000) NULL,  \n" +
                "ADD COLUMN `billToContactPersonID` INT NULL;  \n" +
                "ALTER TABLE `packing_slip_material_receive`  \n" +
                "ADD INDEX `FK_packing_slip_material_receive_billToAddressID_idx` (`billToAddressID` ASC) VISIBLE,  \n" +
                "ADD INDEX `FK_packing_slip_material_receive_billToContactPersonID_idx` (`billToContactPersonID` ASC) VISIBLE;  \n" +
                "ALTER TABLE `packing_slip_material_receive`  \n" +
                "ADD CONSTRAINT `FK_packing_slip_material_receive_billToAddressID`  \n" +
                "  FOREIGN KEY (`billToAddressID`)  \n" +
                "  REFERENCES `customer_addresses` (`id`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION,  \n" +
                "ADD CONSTRAINT `FK_packing_slip_material_receive_billToContactPersonID`  \n" +
                "  FOREIGN KEY (`billToContactPersonID`)  \n" +
                "  REFERENCES `contactperson` (`personId`)  \n" +
                "  ON DELETE NO ACTION  \n" +
                "  ON UPDATE NO ACTION;  \n" +
                /* **************************** Add Script Version -> 17-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5822,'2.00','V1','User Story 39978: Add Default Contact Person with Address Selection for Billing/Shipping/Mark For Address in SDM - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5822:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-01-2022 *********************************** */
                "drop procedure if exists `Sproc_SaveInvoiceAndInvoiceLineDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_SaveInvoiceAndInvoiceLineDetail`(  \n" +
                "	IN pInvoiceDetail JSON,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pSystemId VARCHAR(20),  \n" +
                "	IN pUserId VARCHAR(50),  \n" +
                "	IN pUserRoleId VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountOfInvoiceDetail INT;  \n" +
                "	DECLARE v_CountOfInvoiceLineDetail INT;  \n" +
                "    DECLARE v_CountOfRMA INT;  \n" +
                "	DECLARE v_IdOfInvoice INT;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Detail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Invoice_Detail AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pInvoiceDetail,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				poNumber VARCHAR(50) PATH \"$.poNumber\",  \n" +
                "				poDate DATE PATH \"$.poDate\",  \n" +
                "				mfgCodeID INT PATH \"$.mfgCodeID\",  \n" +
                "				supplierSONumber VARCHAR(50) PATH \"$.supplierSONumber\",  \n" +
                "                soDate DATE PATH \"$.soDate\",  \n" +
                "				packingSlipNumber VARCHAR(50) PATH \"$.packingSlipNumber\",  \n" +
                "				packingSlipDate DATE PATH \"$.packingSlipDate\",  \n" +
                "				invoiceNumber VARCHAR(50) PATH \"$.invoiceNumber\",  \n" +
                "				invoiceDate DATE PATH \"$.invoiceDate\",  \n" +
                "				creditMemoNumber VARCHAR(50) PATH \"$.creditMemoNumber\",  \n" +
                "				creditMemoDate DATE PATH \"$.creditMemoDate\",  \n" +
                "				debitMemoNumber VARCHAR(50) PATH \"$.debitMemoNumber\",  \n" +
                "				debitMemoDate DATE PATH \"$.debitMemoDate\",  \n" +
                "				receiptDate DATE PATH \"$.receiptDate\",  \n" +
                "				receiptType VARCHAR(1) PATH \"$.receiptType\",  \n" +
                "				`status` VARCHAR(5) PATH \"$.status\",  \n" +
                "				applyDate DATE PATH \"$.applyDate\",  \n" +
                "				invoiceTotalDue DECIMAL(18,8) PATH \"$.invoiceTotalDue\",  \n" +
                "				isTariffInvoice TINYINT PATH \"$.isTariffInvoice\",  \n" +
                "				refPackingSlipId INT PATH \"$.refPackingSlipId\",  \n" +
                "				paymentTermsID INT PATH \"$.paymentTermsID\",  \n" +
                "				termsDays INT PATH \"$.termsDays\",  \n" +
                "				creditMemoType VARCHAR(5) PATH \"$.creditMemoType\",  \n" +
                "                invoiceRequireManagementApproval INT PATH \"$.invoiceRequireManagementApproval\",  \n" +
                "                internalRemark  VARCHAR(1000) PATH \"$.internalRemark\",  \n" +
                "                remark  VARCHAR(1000) PATH \"$.remark\",  \n" +
                "                refSupplierCreditMemoNumber  VARCHAR(50) PATH \"$.refSupplierCreditMemoNumber\",  \n" +
                "                refPurchaseOrderID INT PATH \"$.refPurchaseOrderID\",  \n" +
                "                billToAddress VARCHAR(1000) PATH \"$.billToAddress\",  \n" +
                "                billToAddressID INT PATH \"$.billToAddressID\",  \n" +
                "                billToConactPerson VARCHAR(1000) PATH \"$.billToConactPerson\",  \n" +
                "                billToContactPersonID INT PATH \"$.billToContactPersonID\"  \n" +
                "			)  \n" +
                "		) AS Invoice_Detail_JT;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Line_Detail;  \n" +
                "		CREATE TEMPORARY TABLE temp_Invoice_Line_Detail  \n" +
                "		(  \n" +
                "			packingSlipSerialNumber VARCHAR(50),  \n" +
                "			nickname VARCHAR(50),  \n" +
                "			partID INT,  \n" +
                "			refSupplierPartId INT,  \n" +
                "			scanLabel VARCHAR(1000),  \n" +
                "			receivedQty DECIMAL(18,8),  \n" +
                "			packingSlipQty DECIMAL(18,8),  \n" +
                "			binID INT,  \n" +
                "			warehouseID INT,  \n" +
                "			parentWarehouseID INT,  \n" +
                "			invoicePrice DECIMAL(18,8),  \n" +
                "			purchasePrice DECIMAL(18,8),  \n" +
                "			disputedPrice DECIMAL(18,8),  \n" +
                "			approveNote VARCHAR(1000),  \n" +
                "			otherCharges INT,  \n" +
                "			`status` VARCHAR(1),  \n" +
                "			extendedPrice DECIMAL(18,8),  \n" +
                "			refCreditDebitInvoiceNo INT,  \n" +
                "			difference DECIMAL(18,8),  \n" +
                "			umidCreated TINYINT,  \n" +
                "			poReleaseNumber VARCHAR(1000),  \n" +
                "			packagingID INT,  \n" +
                "			receivedStatus VARCHAR(2),  \n" +
                "			remark LONGTEXT  \n" +
                "		);  \n" +
                "  \n" +
                "		INSERT INTO temp_Invoice_Line_Detail (  \n" +
                "			packingSlipSerialNumber,  \n" +
                "			nickname,  \n" +
                "			partID,  \n" +
                "			refSupplierPartId,  \n" +
                "			scanLabel,  \n" +
                "			receivedQty,  \n" +
                "			packingSlipQty,  \n" +
                "			binID,  \n" +
                "			warehouseID,  \n" +
                "			parentWarehouseID,  \n" +
                "			invoicePrice,  \n" +
                "			disputedPrice,  \n" +
                "			approveNote,  \n" +
                "			otherCharges,  \n" +
                "			`status`,  \n" +
                "			extendedPrice,  \n" +
                "			refCreditDebitInvoiceNo,  \n" +
                "			difference,  \n" +
                "			umidCreated,  \n" +
                "			poReleaseNumber,  \n" +
                "			packagingID,  \n" +
                "			receivedStatus,  \n" +
                "			remark  \n" +
                "		)  \n" +
                "		SELECT  packingSlipSerialNumber,  \n" +
                "			nickname,  \n" +
                "			partID,  \n" +
                "			refSupplierPartId,  \n" +
                "			scanLabel,  \n" +
                "			receivedQty,  \n" +
                "			packingSlipQty,  \n" +
                "			binID,  \n" +
                "			warehouseID,  \n" +
                "			parentWarehouseID,  \n" +
                "			invoicePrice,  \n" +
                "			disputedPrice,  \n" +
                "			approveNote,  \n" +
                "			otherCharges,  \n" +
                "			`status`,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN (packingSlipQty IS NOT NULL AND invoicePrice IS NOT NULL) THEN  \n" +
                "						(packingSlipQty * invoicePrice)  \n" +
                "					ELSE  \n" +
                "						NULL  \n" +
                "				END  \n" +
                "			),  \n" +
                "			refCreditDebitInvoiceNo,  \n" +
                "			difference,  \n" +
                "			umidCreated,  \n" +
                "			poReleaseNumber,  \n" +
                "			packagingID,  \n" +
                "			receivedStatus,  \n" +
                "			remark  \n" +
                "		FROM 	packing_slip_material_receive_det  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "				AND refPackingSlipMaterialRecID = pPackingSlipId;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_CountOfInvoiceDetail FROM temp_Invoice_Detail;  \n" +
                "  \n" +
                "			IF (v_CountOfInvoiceDetail > 0) THEN  \n" +
                "				INSERT INTO packing_slip_material_receive (systemId, poNumber, poDate, mfgCodeID, supplierSONumber, soDate, packingSlipNumber, packingSlipDate, invoiceNumber, invoiceDate,  \n" +
                "							creditMemoNumber, creditMemoDate, debitMemoNumber, debitMemoDate, receiptDate, receiptType, `status`, applyDate, invoiceTotalDue, isTariffInvoice,  \n" +
                "							creditMemoType, createdBy, updatedBy, createByRoleId, updateByRoleId, paymentTermsID,termsDays, invoiceRequireManagementApproval,  \n" +
                "                            internalRemark, remark, invoiceApprovalStatus, refSupplierCreditMemoNumber, refPurchaseOrderID,  \n" +
                "                            billToAddress, billToAddressID, billToConactPerson, billToContactPersonID)  \n" +
                "				SELECT 	pSystemId,  \n" +
                "					(CASE WHEN (poNumber IS NULL OR poNumber = \"\") THEN NULL ELSE poNumber END),  \n" +
                "					(CASE WHEN (poDate IS NULL OR poDate = \"0000-00-00\") THEN NULL ELSE poDate END),  \n" +
                "					mfgCodeID,  \n" +
                "					(CASE WHEN (supplierSONumber IS NULL OR supplierSONumber = \"\") THEN NULL ELSE supplierSONumber END),  \n" +
                "                    (CASE WHEN (soDate IS NULL OR soDate = \"0000-00-00\") THEN NULL ELSE soDate END),  \n" +
                "					packingSlipNumber, packingSlipDate,  \n" +
                "					(CASE WHEN (invoiceNumber IS NULL OR invoiceNumber = \"\") THEN NULL ELSE invoiceNumber END),  \n" +
                "					(CASE WHEN (invoiceDate IS NULL OR invoiceDate = \"0000-00-00\") THEN NULL ELSE invoiceDate END),  \n" +
                "					(CASE WHEN (creditMemoNumber IS NULL OR creditMemoNumber = \"\") THEN NULL ELSE creditMemoNumber END),  \n" +
                "					(CASE WHEN (creditMemoDate IS NULL OR creditMemoDate = \"0000-00-00\") THEN NULL ELSE creditMemoDate END),  \n" +
                "					(CASE WHEN (debitMemoNumber IS NULL OR debitMemoNumber = \"\") THEN NULL ELSE debitMemoNumber END),  \n" +
                "					(CASE WHEN (debitMemoDate IS NULL OR debitMemoDate = \"0000-00-00\") THEN NULL ELSE debitMemoDate END),  \n" +
                "					receiptDate, receiptType,  \n" +
                "					`status`, -- (case when invoiceRequireManagementApproval = 0 then `status` else 'I' end), /*status*/  \n" +
                "					applyDate, invoiceTotalDue, isTariffInvoice,  \n" +
                "					(CASE WHEN creditMemoType IS NULL OR creditMemoType = \"\" THEN NULL ELSE creditMemoType END),  \n" +
                "					pUserId, pUserId, pUserRoleId, pUserRoleId, paymentTermsID, termsDays, invoiceRequireManagementApproval,  \n" +
                "                    internalRemark,  \n" +
                "                    remark,  \n" +
                "					(CASE WHEN invoiceRequireManagementApproval = 0 THEN 3 ELSE 2 END) /*invoiceApprovalStatus*/,  \n" +
                "                    (CASE WHEN (refSupplierCreditMemoNumber IS NULL OR refSupplierCreditMemoNumber = \"\") THEN NULL ELSE refSupplierCreditMemoNumber END) /*refSupplierCreditMemoNumber*/,  \n" +
                "                    (CASE WHEN (refPurchaseOrderID IS NULL OR refPurchaseOrderID = 0) THEN NULL ELSE refPurchaseOrderID END)  /*refPurchaseOrderID*/,  \n" +
                "                    (CASE WHEN (billToAddress IS NULL OR billToAddress = \"\") THEN NULL ELSE billToAddress END) /*billToAddress*/,  \n" +
                "                    (CASE WHEN (billToAddressID IS NULL OR billToAddressID = 0) THEN NULL ELSE billToAddressID END)  /*billToAddressID*/,  \n" +
                "                    (CASE WHEN (billToConactPerson IS NULL OR billToConactPerson = \"\") THEN NULL ELSE billToConactPerson END) /*billToConactPerson*/,  \n" +
                "                    (CASE WHEN (billToContactPersonID IS NULL OR billToContactPersonID = 0) THEN NULL ELSE billToContactPersonID END)  /*billToContactPersonID*/  \n" +
                "				FROM 	temp_Invoice_Detail;  \n" +
                "  \n" +
                "				SELECT LAST_INSERT_ID() INTO v_IdOfInvoice;  \n" +
                "  \n" +
                "				UPDATE 	packing_slip_material_receive  \n" +
                "				SET 	refPackingSlipNumberForInvoice = v_IdOfInvoice,  \n" +
                "					`status` = (CASE WHEN receiptType = 'P' THEN 'IR' WHEN receiptType = 'R' THEN 'CR' ELSE NULL END)  \n" +
                "				WHERE	id = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1)  \n" +
                "						AND isDeleted = 0;  \n" +
                "  \n" +
                "				select count(1) into v_CountOfRMA  \n" +
                "                  from packing_slip_material_receive_det d  \n" +
                "				 where exists (select 1 from packing_slip_material_receive p where p.id = d.refPackingSlipMaterialRecID and p.receiptType = 'R' and p.isDeleted = 0)  \n" +
                "					and d.refPackingSlipIdForRma = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1) /*packing slip id*/  \n" +
                "                    and d.isDeleted = 0  \n" +
                "					and d.refPackingSlipForRma is null/*manual packing slip*/  \n" +
                "					and d.refInvoiceIdForRma is null /* invoice id */;  \n" +
                "                 IF v_CountOfRMA != 0 THEN  \n" +
                "					/*update invoice id in RMA packing slip which is created before creating invoice*/  \n" +
                "                    update packing_slip_material_receive_det d  \n" +
                "						set d.refInvoiceIdForRma = v_IdOfInvoice  \n" +
                "					 where exists (select 1 from packing_slip_material_receive p where p.id = d.refPackingSlipMaterialRecID and p.receiptType = 'R' and p.isDeleted = 0)  \n" +
                "						and d.refPackingSlipIdForRma = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1) /*packing slip id*/  \n" +
                "						and d.isDeleted = 0  \n" +
                "						and d.refPackingSlipForRma is null/*manual packing slip*/  \n" +
                "						and d.refInvoiceIdForRma is null /* invoice id */;  \n" +
                "				 END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_CountOfInvoiceLineDetail FROM temp_Invoice_Line_Detail;  \n" +
                "			IF (v_CountOfInvoiceLineDetail > 0) THEN  \n" +
                "				INSERT INTO packing_slip_material_receive_det (refPackingSlipMaterialRecID, packingSlipSerialNumber, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, purchasePrice, disputedPrice, otherCharges, `status`, extendedPrice, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, createdBy, updatedBy, createByRoleId, updateByRoleId)  \n" +
                "				SELECT 	v_IdOfInvoice, packingSlipSerialNumber,  \n" +
                "					nickname,  \n" +
                "					(CASE WHEN ( partID > 0) THEN  partID ELSE NULL END),  \n" +
                "					(CASE WHEN ( refSupplierPartId > 0) THEN  refSupplierPartId ELSE NULL END),  \n" +
                "					scanLabel,  \n" +
                "					receivedQty,  \n" +
                "					packingSlipQty,  \n" +
                "					(CASE WHEN ( binID > 0) THEN  binID ELSE NULL END),  \n" +
                "					(CASE WHEN ( warehouseID > 0) THEN  warehouseID ELSE NULL END),  \n" +
                "					(CASE WHEN ( parentWarehouseID < 0) THEN  parentWarehouseID ELSE NULL END),  \n" +
                "					invoicePrice,  \n" +
                "					purchasePrice,  \n" +
                "					disputedPrice,  \n" +
                "					otherCharges,  \n" +
                "					`status`,  \n" +
                "					extendedPrice,  \n" +
                "					(CASE WHEN ( refCreditDebitInvoiceNo > 0) THEN  refCreditDebitInvoiceNo ELSE NULL END),  \n" +
                "					difference,  \n" +
                "					umidCreated,  \n" +
                "					poReleaseNumber,  \n" +
                "					(CASE WHEN ( packagingID > 0) THEN  packagingID ELSE NULL END),  \n" +
                "					receivedStatus,  \n" +
                "					remark,  \n" +
                "					pUserId,  \n" +
                "					pUserId,  \n" +
                "					pUserRoleId,  \n" +
                "					pUserRoleId  \n" +
                "				FROM 	temp_Invoice_Line_Detail;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "	SELECT v_IdOfInvoice AS PackingSlipId;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5823,'2.00','V1','User Story 39978: Add Default Contact Person with Address Selection for Billing/Shipping/Mark For Address in SDM - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5823:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-01-2022 *********************************** */
                "drop procedure if exists `Sproc_getDebitMemoReportDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_getDebitMemoReportDetail`(  \n" +
                "	IN pReceiptID INT,  \n" +
                "    IN pEmployeeID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    # Debit Memo report details which shows in 2nd section as table format  \n" +
                "         SELECT c.mfgPN partNumber, c.mfgPNDescription description,  \n" +
                "				psd.packingSlipQty quantity, psd.invoicePrice, psd.extendedPrice, psd.approveNote,  \n" +
                "				ps.debitMemoDate, ps.debitMemoNumber  \n" +
                "			FROM packing_slip_material_receive_det psd  \n" +
                "	  INNER JOIN packing_slip_material_receive ps ON ps.id = psd.refPackingSlipMaterialRecID  \n" +
                "	   LEFT JOIN component c ON psd.partID = c.id AND c.isDeleted = 0  \n" +
                "		   WHERE psd.isDeleted = 0  \n" +
                "             AND psd.refPackingSlipMaterialRecID  = pReceiptID  \n" +
                "             AND ps.isDeleted =0;  \n" +
                "  \n" +
                "	# Debit Memo report main section details which shows in 1st section  \n" +
                "       SELECT ps.id, ps.poNumber, ps.debitMemoNumber,  \n" +
                "				DATE_FORMAT(ps.debitMemoDate, '%m/%d/%Y') debitMemoDate,  \n" +
                "				DATE_FORMAT(psr.invoiceDate, '%m/%d/%Y') refInvoiceDate,  \n" +
                "				psr.invoiceNumber refInvoiceNumber,  \n" +
                "				fun_getMfgNameByID(ps.mfgCodeID) supplier,  \n" +
                "				/*CONCAT('ATTN: ', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''), (CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/> ',  \n" +
                "				IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ',IFNULL(ca.postcode,''),'<br/>',IFNULL(co.countryName,'')) billingAddress*/  \n" +
                "                fun_getAddressbyIDAndContactPersonID(ps.billToAddressID, ps.billToContactPersonID) billingAddress  \n" +
                "		FROM packing_slip_material_receive ps  \n" +
                "	left JOIN packing_slip_material_receive psr ON psr.id = ps.refParentCreditDebitInvoiceno  and psr.isDeleted = 0  \n" +
                "	LEFT JOIN customer_addresses ca ON ca.customerID = ps.mfgCodeID AND ca.isDeleted = 0 AND ca.addressType = 'B' AND ca.isDefault = 1  \n" +
                "	LEFT JOIN countrymst co ON co.countryID = ca.countryID  AND co.isDeleted = 0  \n" +
                "		WHERE ps.id = pReceiptID  \n" +
                "          AND ps.receiptType = 'D'  \n" +
                "          AND ps.isDeleted = 0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5824,'2.00','V1','User Story 39978: Add Default Contact Person with Address Selection for Billing/Shipping/Mark For Address in SDM - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5824:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-01-2021 *********************************** */
                "update entity set isDeleted = 1 ,deletedAt =fun_DatetimetoUTCDateTime(),deleteByRoleId=1,deletedBy =1 where entityName = 'Chats';  \n" +
                /* **************************** Add Script Version -> 17-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5825,'2.00','V1',' User Story 8985:  - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5825:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-01-2021 *********************************** */
                "Drop procedure if exists `Sproc_GetPackingSlipInvoicePaymentToInformation`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipInvoicePaymentToInformation`(  \n" +
                "	IN pPaymentId INT,  \n" +
                "	IN pMfgCodeId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE v_mfgNameFormat INT;  \n" +
                "  \n" +
                "SELECT FUN_GETMFGCODENAMEFORMAT() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	IF pPaymentId IS NOT NULL THEN  \n" +
                "  \n" +
                "        SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "		SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SELECT  pi.systemId,  \n" +
                "				pi.id paymentId,  \n" +
                "				pi.accountReference,  \n" +
                "				pi.mfgcodeID,  \n" +
                "				m.mfgCode,  \n" +
                "				m.mfgName,  \n" +
                "				FUN_GETFORMATTEDMFGCODE(m.mfgCode, m.mfgName, v_mfgNameFormat) fullMfgName,  \n" +
                "				pi.paymentType,  \n" +
                "				p.gencCategoryName paymentTypeName,  \n" +
                "				pi.paymentNumber,  \n" +
                "				pi.bankAccountMasID,  \n" +
                "				pi.bankName,  \n" +
                "				pi.bankAccountNo,  \n" +
                "				pi.paymentDate,  \n" +
                "				pi.paymentAmount,  \n" +
                "				pi.payToName,  \n" +
                "				pi.payToAddress,  \n" +
                "                pi.payToAddressID,  \n" +
                "				pi.payToContactPersonID,  \n" +
                "				pi.remark,  \n" +
                "				pi.isPaymentVoided,  \n" +
                "				pi.voidPaymentReason,  \n" +
                "				pi.billToName,  \n" +
                "				pi.billToAddress,  \n" +
                "                pi.billToAddressID,  \n" +
                "				pi.billToContactPersonID,  \n" +
                "				pi.lockStatus,  \n" +
                "				FUN_GETUSERNAMEBYID(pi.lockedBy) lockByName,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(pi.lockedAt,  v_TimeZone,  v_DateTimeDisplayFormat) lockedAt,  \n" +
                "				PI.refPaymentMode  \n" +
                "		FROM  packingslip_invoice_payment PI  \n" +
                "        INNER JOIN  mfgcodemst m ON m.id = pi.mfgcodeID  \n" +
                "        INNER JOIN  genericcategory p ON p.gencCategoryID = pi.paymentType  \n" +
                "		WHERE  pi.isDeleted = 0  \n" +
                "        AND PI.refPaymentMode = 'P'  \n" +
                "        AND pi.id = pPaymentId;  \n" +
                "	ELSE  \n" +
                "		SELECT 		m.accountRef accountReference,  \n" +
                "				m.id mfgcodeID,  \n" +
                "				m.mfgCode,  \n" +
                "				m.mfgName,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) fullMfgName,  \n" +
                "				m.paymentMethodID paymentType,  \n" +
                "				p.gencCategoryName paymentTypeName,  \n" +
                "				NULL paymentNumber,  \n" +
                "				b.id bankAccountMasID,  \n" +
                "				b.bankName,  \n" +
                "				b.accountCode bankAccountNo,  \n" +
                "				NULL paymentDate,  \n" +
                "				NULL paymentAmount,  \n" +
                "				ca.bankRemitToName payToName,  \n" +
                "				fun_getAddressbyIDForCheckPrint(ca.id, ca.defaultContactPersonID) payToAddress,  \n" +
                "				NULL remark,  \n" +
                "				0 isPaymentVoided,  \n" +
                "				NULL voidPaymentReason,  \n" +
                "				cb.companyName billToName,  \n" +
                "				fun_getAddressbyIDForCheckPrint(cb.id, cb.defaultContactPersonID) billToAddress,  \n" +
                "				NULL lockStatus,  \n" +
                "				NULL lockByName,  \n" +
                "				NULL lockedAt  \n" +
                "		FROM 		mfgcodemst m  \n" +
                "		LEFT JOIN 	genericcategory p ON p.gencCategoryID = m.paymentMethodID  \n" +
                "        LEFT JOIN 	bank_mst b ON b.id = p.bankid AND b.isDeleted = 0 AND b.isActive = 1  \n" +
                "		LEFT JOIN 	customer_addresses ca ON ca.customerId = m.id AND ca.isDeleted = 0 AND ca.addressType = 'P' AND ca.isDefault = 1  \n" +
                "		LEFT JOIN 	customer_addresses cb ON cb.customerId = m.id AND cb.isDeleted = 0 AND cb.addressType = 'B' AND cb.isDefault = 1  \n" +
                "		WHERE 		m.isDeleted = 0  \n" +
                "					AND m.id = pMfgCodeId;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5826,'2.00','V1','User Story 39978: Add Default Contact Person with Address Selection for Billing/Shipping/Mark For Address in SPMT - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5826:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-01-2021 *********************************** */
                "Drop procedure if exists `Sproc_GetCheckPrintAndRemittanceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(  \n" +
                "	IN pPaymentID int  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		select pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,  \n" +
                "				pip.paymentAmount,  \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,  \n" +
                "                fun_getAddressbyIDForCheckPrint(pip.payToAddressID, pip.payToContactPersonID) payToAddress,  \n" +
                "				/*pip.payToAddress,  */  \n" +
                "				pip.billToName supplierName,  \n" +
                "                fun_getAddressbyIDForCheckPrint(pip.billToAddressID, pip.billToContactPersonID) supplierAddress,  \n" +
                "                /*pip.billToAddress supplierAddress,*/  \n" +
                "                ca.email supplierEmail, ca.faxNumber supplierFaxNumber,  \n" +
                "                pip.bankAccountNo,  \n" +
                "                g.gencCategoryName paymentType  \n" +
                "		  from packingslip_invoice_payment pip  \n" +
                "          left join customer_addresses ca ON ca.customerId = pip.mfgcodeID and ca.isDeleted = 0 and ca.addressType = 'B' and ca.isDefault = 1  \n" +
                "          join genericcategory g ON g.categoryType = 'Payable Payment Method' and g.gencCategoryID = pip.paymentType  \n" +
                "		 where pip.isDeleted = 0  \n" +
                "			and pip.refPaymentMode = 'P'  \n" +
                "		   and pip.id = pPaymentID;  \n" +
                "  \n" +
                "		  SELECT pd.refPayementid id,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoNumber  \n" +
                "						ELSE  \n" +
                "							p.debitMemoNumber  \n" +
                "					END) invoiceNumber,  \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "				else  \n" +
                "					(SELECT 	ps.invoiceNumber  \n" +
                "					FROM 	packing_slip_material_receive ps  \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno  \n" +
                "							AND ps.isDeleted = 0  )  \n" +
                "				end  \n" +
                "				) refInvoiceNumber,  \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceDate  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoDate  \n" +
                "						ELSE  \n" +
                "							p.debitMemoDate  \n" +
                "					END) invoiceDate,  \n" +
                "  \n" +
                "				p.remark `description`,  \n" +
                "				/*(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,*/  \n" +
                "                pd.paymentAmount extendedPrice,  \n" +
                "				0 discount,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							'Invoice'  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							'Credit Memo'  \n" +
                "						ELSE  \n" +
                "							'Debit Memo'  \n" +
                "					END) receiptMemoType,  \n" +
                "                    p.poNumber  \n" +
                "			FROM packing_slip_material_receive p  \n" +
                "            join packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id  \n" +
                "			WHERE /*p.isDeleted =0  \n" +
                "			and*/ p.receiptType in ('I','C','D')  \n" +
                "            and exists (select 1 from packingslip_invoice_payment pip where pip.refPaymentMode = 'P' and pip.id = pd.refPayementid)  \n" +
                "			/*and p.`status` = 'P'*/  \n" +
                "			and pd.refPayementid = pPaymentID  \n" +
                "            order by invoiceDate, invoiceNumber;  \n" +
                "  \n" +
                "        	SELECT CONCAT('<b>',IF(ci.legalName = '' OR ci.legalName is null,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'</b><br/>',IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''),'<br/>',  \n" +
                "				IFNULL(c.countryName,''))AS address,  \n" +
                "				ci.personName as companyContactName,ci.registeredEmail as companyEmail,ci.faxNumber,ci.contactNumber as phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName,ci.registeredEmail as email  \n" +
                "			FROM company_info ci  \n" +
                "			LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "			WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-01-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5827,'2.00','V1','User Story 39978: Add Default Contact Person with Address Selection for Billing/Shipping/Mark For Address in SPMT - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5827:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-01-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_contactperson`;  \n" +
                "CREATE TRIGGER `Trg_AU_contactperson` AFTER UPDATE ON `contactperson` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_createdAt DATETIME DEFAULT fun_DatetimetoUTCDateTime();  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"contactperson\";  \n" +
                "  \n" +
                "	IF IFNULL(OLD.firstName,0) != IFNULL(NEW.firstName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'First Name',CAST(OLD.firstName AS CHAR), CAST(NEW.firstName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'firstName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.lastName,0) != IFNULL(NEW.lastName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Last Name',CAST(OLD.lastName AS CHAR), CAST(NEW.lastName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'lastName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Email',CAST((SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(OLD.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails) AS CHAR),  \n" +
                "			CAST(( SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(NEW.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails)AS CHAR), v_createdAt,NEW.createdBy,v_createdAt,  \n" +
                "            NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'email'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phone,0) != IFNULL(NEW.phone,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Phone',CAST(OLD.phone AS CHAR), CAST(NEW.phone AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phone'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mobile,0) != IFNULL(NEW.mobile,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Mobile',CAST(OLD.mobile AS CHAR), CAST(NEW.mobile AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'mobile'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.division,0) != IFNULL(NEW.division,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Department',CAST(OLD.division AS CHAR), CAST(NEW.division AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'division'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'faxNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phExtension,0) != IFNULL(NEW.phExtension,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Ext.',CAST(OLD.phExtension AS CHAR), CAST(NEW.phExtension AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phExtension'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.middleName,0) != IFNULL(NEW.middleName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Middle Name',CAST(OLD.middleName AS CHAR), CAST(NEW.middleName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'middleName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDefault,0) != IFNULL(NEW.isDefault,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Default',CAST((CASE WHEN OLD.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isDefault'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.additionalComment,0) != IFNULL(NEW.additionalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Comment',CAST(OLD.additionalComment AS CHAR), CAST(NEW.additionalComment AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'longtext');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPrimary,0) != IFNULL(NEW.isPrimary,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Primary',CAST((CASE WHEN OLD.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isPrimary'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(OLD.refTableName,0) != IFNULL(NEW.refTableName,0) OR IFNULL(OLD.refTransID,0) != IFNULL(NEW.refTransID,0) ) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Contact Person Type',CAST((CASE WHEN (OLD.refTableName = 'employees') THEN 'Personnel' WHEN (OLD.refTableName = 'mfgcodemst') THEN (SELECT (CASE  \n" +
                "			WHEN a.mfgType = 'MFG' THEN 'Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = OLD.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "			CAST((CASE WHEN (NEW.refTableName = 'employees') THEN 'Personnel' WHEN (NEW.refTableName = 'mfgcodemst') THEN (SELECT (CASE WHEN a.mfgType = 'MFG' THEN 'Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = NEW.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "             v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'refTableName'));  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 17-01-2022 *********************************** */
                "Drop procedure if Exists `Sproc_checkDelete_contactperson`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_contactperson`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempContactperson as  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust\" else \"\" end as msg FROM packingslip_invoice_payment  WHERE (billToContactPersonID IN (',IDs,') OR payToContactPersonID IN (',IDs,')) AND refPaymentMode = \"CR\" AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"P\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_invoice\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"I\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_creditmemo\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"C\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE  (supplierContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_line_release_det WHERE shippingContactPersonID IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0 AND (custBillingContactPersonID IN (',IDs,') OR custShippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0 AND shippingContactPersonID IN (',IDs,') LIMIT 1)  \n" +
                "		');  \n" +
                "/*	  (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive\" else \"\" end as msg FROM packing_slip_material_receive WHERE isDeleted = 0 AND (billToConactPerson IN (',IDs,')  \n" +
                "			OR shipToContactPersonID IN (',IDs,') OR rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted = 0 AND (payToContactPersonID IN (',IDs,') OR billToContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE isDeleted = 0 AND (custBillingConactPersonID IN (',IDs,') OR custShippingConactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "  */  \n" +
                "  \n" +
                "  	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "  \n" +
                "  \n" +
                "    IF(countList=FALSE) THEN  \n" +
                "		IF(SELECT SUM(t.cnt) FROM tempContactperson t)=0 THEN  \n" +
                "			SET @SQl1 = CONCAT('update contactperson set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where personId in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			SELECT * FROM tempContactperson WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempContactperson t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "		FROM tempContactperson t1  \n" +
                "		INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "			WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "			ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE if exists tempContactperson;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5828,'2.00','V1',' Delete Contact Person and BUG: 40381 - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5828:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 17-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetNotAssignedFuturePOList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetNotAssignedFuturePOList`(  \n" +
                "	IN pPartID INT(11),  \n" +
                "	IN pcustomerID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "         SELECT sm.salesOrderNumber,sm.poNumber,sm.poDate,sd.qty,sd.price,sd.custPOLineNumber,sm.revision,sm.id,sm.poRevision,sd.id AS soID,sm.status,CASE WHEN sm.status=0 THEN 'Draft' ELSE 'Published' END AS statusText FROM salesorderdet sd JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isdeleted=0  \n" +
                "                LEFT JOIN customer_packingslip_det cpd ON sd.id=cpd.refSalesorderDetid AND cpd.isDeleted=0  \n" +
                "                WHERE sm.customerID=pcustomerID AND sd.partID=pPartID  AND salesOrderDetStatus=1  \n" +
                "                AND cpd.refSalesorderDetid IS NULL AND sd.refBlanketPOID IS NULL AND sm.isBlanketPO=0 AND sd.isDeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5829,'2.00','V1',' Alter procedure Sproc_GetNotAssignedFuturePOList-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5829:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 17-01-2022 *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report` ;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`custAssyPN` AS `custAssyPN`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`rmaNumber` AS `rmaNumber`,  \n" +
                "        `a`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "        `a`.`debitedByCustText` AS `debitedByCustText`,  \n" +
                "        `a`.`rmaOrgPONumber` AS `rmaOrgPONumber`,  \n" +
                "        `a`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "        `a`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "        `a`.`reworkReqText` AS `reworkReqText`,  \n" +
                "        `a`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "        `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "        `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "        `a`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "        `a`.`blanketPOOptionText` AS `blanketPOOptionText`,  \n" +
                "        `a`.`requestedBPOStartDate` AS `requestedBPOStartDate`,  \n" +
                "        `a`.`blanketPOEndDate` AS `blanketPOEndDate`,  \n" +
                "        `a`.`linkToBlanketPO` AS `linkToBlanketPO`,  \n" +
                "        `a`.`linkToBlanketPOText` AS `linkToBlanketPOText`,  \n" +
                "        `a`.`mfgName` AS `mfgName`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                `sm`.`rmaNumber` AS `rmaNumber`,  \n" +
                "                `sm`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isDebitedByCustomer` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `debitedByCustText`,  \n" +
                "                `sm`.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "                `sm`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "                `sm`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isReworkRequired` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `reworkReqText`,  \n" +
                "                `sm`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                `sm`.`createdAt` AS `createdDate`,  \n" +
                "                `sm`.`updatedAt` AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`custAssyPN` AS `custAssyPN`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`mfgName` AS `mfgName`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                `a`.`requestedBPOStartDate` AS `requestedBPOStartDate`,  \n" +
                "                `a`.`blanketPOEndDate` AS `blanketPOEndDate`,  \n" +
                "                `sm`.`linkToBlanketPO` AS `linkToBlanketPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`linkToBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `linkToBlanketPOText`,  \n" +
                "                IFNULL((CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN `sqt`.`BPOShippedQty`  \n" +
                "                    ELSE `sq`.`ShippedQty`  \n" +
                "                END), 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "                `sm`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 1) THEN 'Use This Blanket PO# for All Releases'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN 'Link Future PO(s) to This Blanket PO'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 3) THEN 'Use Blanket PO# and Release# for All Releases'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `blanketPOOptionText`  \n" +
                "        FROM  \n" +
                "            (((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            IFNULL(SUM(`sbt`.`ShippedQty`), 0) AS `BPOShippedQty`,  \n" +
                "                `sbt`.`refBlanketPOID` AS `blanketPOSoDetID`  \n" +
                "        FROM  \n" +
                "            (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                `sdd`.`refBlanketPOID` AS `refBlanketPOID`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            ((`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        JOIN `salesorderdet` `sdd` ON (((`sdd`.`id` = `cpd`.`refSalesorderDetid`)  \n" +
                "            AND (`sdd`.`isDeleted` = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid` , `sdd`.`refBlanketPOID`) `sbt`  \n" +
                "        GROUP BY `sbt`.`refBlanketPOID`) `sqt` ON ((`sqt`.`blanketPOSoDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refBlanketPOID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refBlanketPOID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID` , `s`.`refAssyId`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** Add Script Version -> 17-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5830,'2.00','V1',' Alter view vu_salesorder_updatedlist_report-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5830:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesOrderSummaryList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pfilterPOStatus VARCHAR(20)  ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "    IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE v_mfrFormat INT;  \n" +
                "		DECLARE v_empFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
                "       s.salesOrderNumber,  \n" +
                "       s.poNumber,  \n" +
                "       s.poDate,  \n" +
                "       s.customerID,  \n" +
                "       s.contactPersonID,  \n" +
                "       s.billingAddressID,  \n" +
                "       s.shippingAddressID,  \n" +
                "       s.shippingMethodID,  \n" +
                "       s.revision,  \n" +
                "       s.shippingComment,  \n" +
                "       s.termsID,  \n" +
                "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
                "       CASE WHEN s.blanketPOOption=1 THEN 'Use This Blanket PO# for All Releases' WHEN s.blanketPOOption=2 THEN 'Link Future PO(s) to This Blanket PO' WHEN s.blanketPOOption=3 THEN 'Use Blanket PO# and Release# for All Releases' ELSE '' END blanketPOOptionText,  \n" +
                "       s.blanketPOOption,  \n" +
                "       s.status,  \n" +
                "       s.soDate,  \n" +
                "       s.revisionChangeNote,  \n" +
                "       s.salesCommissionTo,  \n" +
                "       s.intermediateShipmentId,  \n" +
                "       s.freeOnBoardId,  \n" +
                "       s.internalComment as internalCommentSo,  \n" +
                "       s.serialNumber,  \n" +
                "       s.carrierID,  \n" +
                "       s.carrierAccountNumber,  \n" +
                "       s.originalPODate,  \n" +
                "       s.isLegacyPO,  \n" +
                "       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
                "       s.isRmaPO,  \n" +
                "       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
                "       s.poRevision,  \n" +
                "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
                "       s.isBlanketPO,  \n" +
                "        fun_GetFormattedMfgCode(mg.mfgCode,mg.mfgName,\",v_mfrFormat,\") companyName,  \n" +
                "       mg.mfgName,  \n" +
                "       s.poRevisionDate,  \n" +
                "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
                "        s.linkToBlanketPO,  \n" +
                "        CASE WHEN s.linkToBlanketPO=1 THEN 'Yes' ELSE 'No' END linkToBlanketPOText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
                "       fb.name freeOnBoardName,  \n" +
                "       s.`rmaNumber` AS `rmaNumber`,  \n" +
                "	   s.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "	   (CASE WHEN (s.`isDebitedByCustomer` = 1) THEN 'Yes' ELSE 'No' END) AS `debitedByCustText`,  \n" +
                "       s.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "       s.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "		s.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "       (CASE  WHEN (s.`isReworkRequired` = 1) THEN 'Yes'  ELSE 'No'  END) AS `reworkReqText`,  \n" +
                "	   s.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "      ifnull(sodCnt.totalLineCount,0)  totalSOLines,  \n" +
                "       ifnull(sodCnt.completedLineCount,0) totalCompletedSOLines,  \n" +
                "       (case when sodCnt.totalLineCount is null then 0 else  Round((sodCnt.completedLineCount * 100/sodCnt.totalLineCount),2) end)soCompletionPercentage,  \n" +
                "      (case when sodCnt.canceledLineCount = ifnull(sodCnt.totalLineCount,0) then 'Canceled'  \n" +
                "			when (sodCnt.canceledLineCount + sodCnt.completedLineCount) = ifnull(sodCnt.totalLineCount,0)  then 'Completed'  \n" +
                "            else 'In Progress' end) salesOrderDetStatusConvertedValues,  \n" +
                "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
                "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
                "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
                "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
                "		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  ,  \n" +
                "               fun_GetEmployeeFormattedName(salecomm.firstName,salecomm.middleName,salecomm.lastName,salecomm.initialName,\",v_empFormat,\") salesCommName  \n" +
                "			FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
                "			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
                "            LEFT JOIN employees salecomm ON salecomm.id = s.salesCommissionTo and salecomm.isDeleted = 0  \n" +
                "			LEFT JOIN ( select sod.refSalesOrderID as soId ,  \n" +
                "							sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
                "							count(1) totalLineCount,  \n" +
                "                            sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
                "                            From salesorderdet sod where sod.isDeleted = 0  \n" +
                "                            Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = s.id  \n" +
                "			WHERE s.isdeleted=0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "                IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "		END IF;  \n" +
                "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "		END IF;  \n" +
                "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "			IF(psearchposotype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "			IF(psearchextPricetype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "        IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "		ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "		ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "  \n" +
                "			 EXECUTE query2;  \n" +
                "			 DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "  \n" +
                "			 EXECUTE query1;  \n" +
                "		       DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5831,'2.00','V1','Sproc_GetSalesOrderSummaryList  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 5831:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerInvoiceDetails;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pFilterStatus LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pPoNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearchPO TINYINT,  \n" +
                "	IN pMfgCodeIds LONGTEXT ,  \n" +
                "	IN pPaymentTermsIds LONGTEXT ,  \n" +
                "	IN pPartId VARCHAR(5000) ,  \n" +
                "	IN pTransType VARCHAR(5) ,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
                "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
                "	IN pZeroAmountFilter TINYINT,  \n" +
                "	IN pCreditMemoRefundStatusFilter VARCHAR(100)      ,  \n" +
                "	IN pMarkedForRefund TINYINT  \n" +
                "	-- IN pChequeNumber  VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_empFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET v_appliedCMPDJoin = '';  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN  \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
                "	ELSE  \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount ,  \n" +
                "						NULL as totRefundIssuedAgainstCreditMemo , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"  \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,  \n" +
                "        cp.invoiceNumber,cp.invoiceDate, cp.revision,  \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
                "        cp.soNumber,cp.soDate,  \n" +
                "		cp.sorevision,  \n" +
                "        cp.refSalesOrderID,  \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,  \n" +
                "        cp.refCustInvoiceID,  \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "		 cp.status,  \n" +
                "         cp.subStatus,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
                "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
                "			ELSE '' END) AS creditAppliedStatus ,  \n" +
                "		  cp.paymentStatus,  \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
                "		  ifnull(cp.totalAmount,0) totalAmount,  \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,  \n" +
                "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,  \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,  \n" +
                "		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\", vMfgCodeFormat,\") as customerName,  \n" +
                "		 m.mfgcode as customerCode,  \n" +
                "         cp.customerID,  \n" +
                "         cp.createdBy as createdById,  \n" +
                "		\",v_receivedAmtSF,\"  \n" +
                "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,  \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,  \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,  \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,  \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,  \n" +
                "         cp.salesCommissionTo,  \n" +
                "         fun_GetEmployeeFormattedName(salecomm.firstName,salecomm.middleName,salecomm.lastName,salecomm.initialName,\",v_empFormat,\") salesCommissionToName,  \n" +
                "         cp.termsDays termDays,  \n" +
                "         cp.freeOnBoardId,  \n" +
                "         cp.freeOnBoardName,  \n" +
                "         cp.isLocked,  \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "         cp.shippingMethodId, fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
                "         packingSlip.id packingSlipId,  \n" +
                "         (select group_concat(paymentNumber)  \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,  \n" +
                "		 (select COUNT(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) cpTrackNumberCount,  \n" +
                "         cp.rmaNumber , cp.systemId,  \n" +
                "        fun_getAddressbyID(cp.intermediateShipmentId) intermediateAddress,  \n" +
                "		fun_getAddressbyID(cp.shipToId) shippingAddress,  \n" +
                "		fun_getAddressbyID(cp.billToId) billingAddress,  \n" +
                "          fun_getFormattedContactPerson(billCP.firstName,billCP.middleName,billCP.lastName,billCP.division,billCP.email,billCP.phoneCountryCode, billCP.phone, billCP.phExtension, billCP.mobile, billCP.faxCountryCode, billCP.faxNumber) billToContactPerson,  \n" +
                "  fun_getFormattedContactPerson(shipCP.firstName,shipCP.middleName,shipCP.lastName,shipCP.division,shipCP.email,shipCP.phoneCountryCode, shipCP.phone, shipCP.phExtension, shipCP.mobile, shipCP.faxCountryCode, shipCP.faxNumber) shipToToContactPerson,  \n" +
                "  fun_getFormattedContactPerson(interCP.firstName,interCP.middleName,interCP.lastName,interCP.division,interCP.email,interCP.phoneCountryCode, interCP.phone, interCP.phExtension, interCP.mobile, interCP.faxCountryCode, interCP.faxNumber) markToToContactPerson,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
                "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,  \n" +
                "         (SELECT `paymentDate` FROM packingslip_invoice_payment_det pipd  \n" +
                "					JOIN packingslip_invoice_payment pip ON pipd.`refPayementid` = pip.id  \n" +
                "		WHERE pipd.`refCustPackingslipInvoiceID` = cp.id AND pip.refPaymentMode = 'R' AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "		AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0 ORDER BY pipd.id DESC LIMIT 1) AS lastRcvdPaymentDate ,  \n" +
                "		fun_getGenericCategoryCodeNameByID(cp.carrierID) carrierName,  \n" +
                "        cp.carrierID , cp.carrierAccountNumber  \n" +
                "	 FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID  \n" +
                "        LEFT JOIN contactperson billCP ON billCP.personId = cp.billingContactPersonID and billCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson shipCP ON shipCP.personId = cp.shippingContactPersonID and shipCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson interCP ON interCP.personId = cp.intermediateContactPersonID and interCP.isDeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
                "        LEFT JOIN employees salecomm ON salecomm.id = cp.salesCommissionTo and salecomm.isDeleted = 0  \n" +
                "		\" , v_appliedCMPDJoin ,\"  \n" +
                "	WHERE  cp.isDeleted=0  \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.termsId in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPartId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN  \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');  \n" +
                "	# END IF;  \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) END) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) END) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
                "		IF pIsExactSearchPO = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
                "                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
                "                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
                "	IF pFromDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pToDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- filter zero amount invoice  \n" +
                "	IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefund = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "		 round((c.totalAmount),2) totalAmount,  \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,  \n" +
                "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0) + IFNULL(c.totRefundIssuedAgainstCreditMemo,0) ),2)  \n" +
                "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,  \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
                "						else '' end) materialStatus from ( \",  \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	--  select @SQLStatement2	;  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5832,'2.00','V1','Sproc_RetrieveCustomerInvoiceDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5832:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 18-01-2022 **************************** */
                "DROP function IF EXISTS `fun_getCountOfSubAssemblyKits`;  \n" +
                "CREATE FUNCTION `fun_getCountOfSubAssemblyKits`(  \n" +
                ") RETURNS int  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountOfSubAssemblyKits INT;  \n" +
                "  \n" +
                "    SELECT COUNT(1) INTO v_CountOfSubAssemblyKits  \n" +
                "    FROM (  \n" +
                "		SELECT  \n" +
                "			kaad.partid, kaad.refSalesorderdetid, kaad.bomAssyLevel,  \n" +
                "			(CASE WHEN kaad.bomAssyLevel = 0 THEN COUNT(1) OVER (PARTITION BY kaad.refSalesOrderDetID) - 1 ELSE 0 END) AS subAssyCount,  \n" +
                "			fun_getKitReturnStatus(pendingReleaseCount,releasedNotReturnedCount,returnedCount,readyToReturnCount,shortageReturnCount) AS kitReturnStatus  \n" +
                "		FROM  kit_allocation_assy_detail kaad  \n" +
                "		LEFT JOIN (  \n" +
                "					SELECT	salesOrderDetID,   IFNULL(subAssyID, refAssyId) AS partID,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToReturnCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "					FROM 	vu_release_plan_release_return_status_det  \n" +
                "					GROUP BY salesOrderDetID, partID  \n" +
                "			) AS vrr ON  vrr.salesOrderDetID = kaad.refSalesorderdetid AND vrr.partID = kaad.partId  \n" +
                "		WHERE kaad.isDeleted = 0 #AND kaad.bomAssyLevel =  0  \n" +
                "        ORDER BY kaad.refSalesorderdetid, kaad.partId  \n" +
                "    ) AS a WHERE a.subAssyCount > 0 AND kitReturnStatus <> 'Fully Returned';  \n" +
                "  \n" +
                "  \n" +
                "	RETURN v_CountOfSubAssemblyKits;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-01-2022 **************************** */
                "DROP function IF EXISTS `fun_getKitReturnStatus`;  \n" +
                "CREATE FUNCTION `fun_getKitReturnStatus`(  \n" +
                "    pPendingReleaseCount INT,  \n" +
                "	pReleasedNotReturnedCount INT,  \n" +
                "	pReturnedCount INT,  \n" +
                "	pReadyToReturnCount INT,  \n" +
                "    pShortageReturnCount INT  \n" +
                ") RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vKitReturnStatus VARCHAR(50);  \n" +
                "  \n" +
                "	IF (pShortageReturnCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Intent to Re-Release';  \n" +
                "	ELSEIF(pPendingReleaseCount = 0 AND  pReleasedNotReturnedCount = 0 AND pReturnedCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Fully Returned';  \n" +
                "	ELSEIF (pReturnedCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Partially Returned';  \n" +
                "	ELSEIF (pReleasedNotReturnedCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Not Returned';  \n" +
                "	ELSEIF (pReadyToReturnCount > 0) THEN  \n" +
                "		SET vKitReturnStatus = 'Ready To Return';  \n" +
                "	ELSE  \n" +
                "		SET vKitReturnStatus = 'N/A';  \n" +
                "	END IF;  \n" +
                "	RETURN vKitReturnStatus;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsSubAssembly TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE,  \n" +
                "    IN pSubAssemblyTab TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            (CASE WHEN kaad.bomAssyLevel = 0 THEN kaad.bomInternalVersionString ELSE 'N/A' END) AS kitAllocationInternalVersion,  \n" +
                "            kaad.bomAssyLevel  \n" +
                "		\");  \n" +
                "  \n" +
                "	SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND kaad.isDeleted = 0\") ;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetKitList = CONCAT(\"  \n" +
                "		SELECT  t.*,  \n" +
                "				fun_getKitReleaseIndication(releaseDayDiffwithCurrentDate, shortagePer, isKitPlanningRequired) AS kitReleaseIndication,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT  a.*,  \n" +
                "					(CASE WHEN assyID = partID THEN 0 ELSE 1 END) AS isSubAssembly,  \n" +
                "					(  \n" +
                "					CASE  \n" +
                "						WHEN ((IFNULL(kitReleasePlanCount, 0) = 0) OR (IFNULL(kitReleasePlanCount, 0) > 0 AND (IFNULL(totalPOQty, 0) <> assyPOQty OR IFNULL(totalKitQty, 0) <> assyKitQty))) THEN  \n" +
                "							TRUE  \n" +
                "						ELSE  \n" +
                "							FALSE  \n" +
                "					END  \n" +
                "					) as isKitPlanningRequired,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN ifnull(kitReleasePlanCount, 0) = 0 THEN  \n" +
                "								'Unplanned'  \n" +
                "							WHEN ifnull(kitReleasePlanCount, 0) > 0  AND  (IFNULL(totalPOQty, 0) <> assyPOQty OR IFNULL(totalKitQty, 0) <> assyKitQty) THEN  \n" +
                "								'Partially Planned'  \n" +
                "							WHEN ifnull(kitReleasePlanCount, 0) > 0 AND  IFNULL(totalPOQty, 0) = assyPOQty AND IFNULL(totalKitQty, 0) = assyKitQty THEN  \n" +
                "								'Fully Planned'  \n" +
                "							ELSE  \n" +
                "								NULL  \n" +
                "						END  \n" +
                "					) as kitPlanStatus,  \n" +
                "					fun_getKitReleaseStatus(subKitStatusPercentage,totalKitQty,totalPOQty,assyKitQty,assyPOQty,releasedPlanCount,pendingCount) AS  kitReleaseStatus,  \n" +
                "					fun_getKitReturnStatus(pendingReleaseCount,releasedNotReturnedCount,returnedCount,readyToReturnCount,shortageReturnCount) AS kitReturnStatus  \n" +
                "			FROM  \n" +
                "				(SELECT  \n" +
                "					`vuss`.`Sales Order ID` AS id,  \n" +
                "					`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "					`vuss`.`PartID` AS assyID,  \n" +
                "					kaad.partId AS partID,  \n" +
                "					`vuss`.`Status` AS completedStatus,  \n" +
                "					(  \n" +
                "						CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "								'Draft'  \n" +
                "							WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "								'Published'  \n" +
                "							ELSE  \n" +
                "								''  \n" +
                "						END  \n" +
                "					) AS `statusConvertedValue`,  \n" +
                "					ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "					ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "					ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "					td.releasedPlanCount,  \n" +
                "					td.pendingCount,  \n" +
                "					vrr.pendingReleaseCount,  \n" +
                "					vrr.releasedNotReturnedCount,  \n" +
                "					vrr.returnedCount,  \n" +
                "					vrr.readyToReturnCount,  \n" +
                "					vrr.shortageReturnCount,  \n" +
                "					CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "					td.nextReleaseDate,  \n" +
                "					`vuss`.`So Date` AS soDate,  \n" +
                "					`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "					`vuss`.`Revision` AS revision,  \n" +
                "					`vuss`.`Po Number` AS poNumber,  \n" +
                "					`vuss`.`Po Date` AS poDate,  \n" +
                "					`vuss`.`Assy ID` AS PIDCode,  \n" +
                "					`vuss`.`Assy Name` AS mfgPN,  \n" +
                "					ro.rohsIcon,  \n" +
                "					ro.name AS `rohsComplientConvertedValue`,  \n" +
                "					`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "					`vuss`.`custAssyPN` AS custAssyPN,  \n" +
                "					`vuss`.`liveVersion` AS liveVersion,  \n" +
                "					`vuss`.`releasedWorkorder` AS releasedWorkorder,  \n" +
                "					`vuss`.`NickName` AS nickName,  \n" +
                "					`vuss`.`partDescription` AS partDescription,  \n" +
                "					`vuss`.`PO Qty` AS qty,  \n" +
                "					`vuss`.`mrpQty` AS mrpQty,  \n" +
                "					`vuss`.`kitQty` AS kitQty,  \n" +
                "					(CASE  WHEN (`vuss`.`isHotJob` = 0) THEN  'No'  \n" +
                "						   WHEN (`vuss`.`isHotJob` = 1) THEN  'Yes'  \n" +
                "						   ELSE  ''  END  \n" +
                "					) AS `isHotJobValue`,  \n" +
                "					`vuss`.`isHotJob`,  \n" +
                "					`vuss`.`price` AS price,`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "					`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "					`vuss`.`remark` AS remark,  \n" +
                "					`vuss`.`cancleReason` AS cancleReason,  \n" +
                "					`vuss`.`Customer ID` AS customerID,  \n" +
                "					fun_GetFormattedMfgCode(vuss.mfgCode, vuss.mfgName,\", vMfgCodeFormat ,\") AS companyName,  \n" +
                "					`vuss`.`Full Name` AS fullName,  \n" +
                "					`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "					`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "					`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "					`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "					`vuss`.`shippingQty` AS shippingQty,  \n" +
                "					ifnull(td.totalPlan, 0) kitReleasePlanCount,  \n" +
                "					`vuss`.`kitNumber` AS kitNumber,  \n" +
                "					 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "					 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "					`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "					`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "					`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "					`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "					case when vuss.refSODetID is not null then sa.salesAssy else '' end  AS salesAssy,  \n" +
                "					`vuss`.`Sales Order Status` AS `status`,  \n" +
                "					`vuss`.`Terms ID` AS termsID,  \n" +
                "					`vuss`.`mfgCode` AS mfgCode,  \n" +
                "					vuss.partType,  \n" +
                "					vuss.isCancle,  \n" +
                "					vuss.mfgcodeID,  \n" +
                "					vuss.manufacturerName,  \n" +
                "					`vuss`.`serialNumber` AS serialNumber,  \n" +
                "					`vuss`.partCategory,  \n" +
                "					vuss.lineID,  \n" +
                "					`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "					ifnull(td.ishotjob,0) AS isBuildWiseHotJob ,  \n" +
                "					td.nextShipDate AS nextShipDate,  \n" +
                "					wo.WONumber AS workorders,  \n" +
                "					wo.WOIds AS workorderIds,  \n" +
                "					`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "					hutkit.refType AS refTypeKA,  \n" +
                "					hutkit.status AS haltStatusKA,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN 	hutkit.status = 'H' THEN  \n" +
                "									CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' ON ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutkit.startDate))  \n" +
                "							ELSE 	''  \n" +
                "						END  \n" +
                "					) AS reasonKA,  \n" +
                "					`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "					IFNULL(td.totalPOQty, 0) totalPOQty,  \n" +
                "					IFNULL(td.totalKitQty, 0) totalKitQty,  \n" +
                "					ka.shortagePer,  \n" +
                "					DATEDIFF(td.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "					kaad.perAssyBuildQty,  \n" +
                "					cassy.PIDCode AS assyPIDCode,  \n" +
                "					cassy.mfgPN AS assyMfgPN,  \n" +
                "					roassy.rohsIcon AS assyRohsIcon,  \n" +
                "					roassy.name assyRohsName,  \n" +
                "					cassy.isCustom AS assyIsCustomPart,  \n" +
                "					cassy.custAssyPN AS assyCustAssyPN,  \n" +
                "					cassy.nickName AS assyNickName,  \n" +
                "					cassy.mfgPNDescription AS assyPartDescription,  \n" +
                "					IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`PO Qty`,0) AS assyPOQty,  \n" +
                "					IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`mrpQty`,0) AS assyMRPQty,  \n" +
                "					IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`kitQty`,0) AS assyKitQty,  \n" +
                "					(CASE WHEN kaad.bomAssyLevel = 0 THEN COUNT(1) OVER (PARTITION BY kaad.refSalesOrderDetID) - 1 ELSE 0 END) AS subAssyCount\",v_DynamicColumns, \"  \n" +
                "			FROM   vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "				INNER JOIN  component cassy ON kaad.partId = cassy.id AND cassy.isDeleted = 0 AND cassy.parttype IN (3,2)  \n" +
                "				LEFT JOIN  rfq_rohsmst roassy ON cassy.RoHSStatusID = roassy.id AND roassy.isDeleted = 0  \n" +
                "				LEFT JOIN (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "						FROM  salesorderdet s INNER JOIN component c ON s.partID =c.id  \n" +
                "						WHERE  s.isdeleted=0 AND c.parttype IN (3,2)) AS sa ON sa.id = vuss.refSODetID  \n" +
                "				LEFT JOIN (SELECT shippingid,Sdetid, qty, CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),'%m/%d/%y')) salesRelease  \n" +
                "						FROM salesshippingmst  b WHERE isdeleted = 0 ) AS sr ON sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "				LEFT JOIN (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "						FROM salesorder_otherexpense_details WHERE isdeleted = 0  \n" +
                "						GROUP BY refSalesOrderDetID ) AS so ON so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "				LEFT JOIN (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds, GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "						FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "						ON wsd.woID=w.woID WHERE  wsd.isdeleted = 0  \n" +
                "						GROUP BY wsd.salesOrderDetailID  \n" +
                "					) AS wo ON wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "				LEFT JOIN (  \n" +
                "					SELECT	salesOrderDetID,   IFNULL(subAssyID, refAssyId) AS partID,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToReturnCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "					FROM 	vu_release_plan_release_return_status_det  \n" +
                "					GROUP BY salesOrderDetID, partID  \n" +
                "			) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId AND vrr.partID = kaad.partId  \n" +
                "		LEFT JOIN (  \n" +
                "			SELECT 	t.salesOrderDetID,  \n" +
                "					IFNULL(t.subAssyID,t.refAssyId) As partID,  \n" +
                "                    SUM(kitReleaseQty) AS totalKitQty,  \n" +
                "                    SUM(poQty) AS totalPOQty,  \n" +
                "                    COUNT(1) totalPlan,  \n" +
                "                    MAX(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  AND  kitStatus!='R' then 1 else 0 end )  AS ishotjob,  \n" +
                "					MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "					MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "					SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "					SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "            FROM (  \n" +
                "				SELECT 	r.salesOrderDetID,  r.subAssyID, r.refAssyId, r.kitReleaseQty , r.poQty, r.kitStatus, r.kitReleaseDate  \n" +
                "				FROM 	vu_release_plan_detail r  \n" +
                "			) AS t  \n" +
                "			GROUP BY  t.salesOrderDetID, partID  \n" +
                "        ) AS td  ON td.salesOrderDetID = vuss.salesOrderDetailId AND td.partID = kaad.partId  \n" +
                "			LEFT JOIN 	(  \n" +
                "				SELECT 	refSalesOrderDetID, assyID, mainAssy,  \n" +
                "						(k.totalLine - k.totalNotRequireLine) AS totalLine,  \n" +
                "						k.shortageLine,  \n" +
                "						Round(k.allocPerComponent,2) allocPerComponent,  \n" +
                "						Round(k.allocPerWithSubAssy,2) allocPerWithSubAssy,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS shortagePer  \n" +
                "				FROM  \n" +
                "					(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
                "							COUNT(1) AS `totalLine`,  \n" +
                "							SUM( k.shortageline) shortageline,  \n" +
                "							SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "							(CASE WHEN assyID = mainAssy THEN  \n" +
                "								MIN(mainAssyPerForSubAssy)  /* Main Assembly Case */  \n" +
                "							ELSE /* Sub Assembly Case */  \n" +
                "								0 END) AS allocPerWithSubAssy,  \n" +
                "							(CASE WHEN assyID = mainAssy THEN  \n" +
                "								MIN(mainAssyPerForComponent)  /* Main Assembly Case */  \n" +
                "							ELSE /* Sub Assembly Case */  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) END) AS allocPerComponent  \n" +
                "					FROM  \n" +
                "						(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
                "								k.qpaWithDnp, k.allocationPer, k.isNotRequiredKitAllocation,  k.allocatedPercePerLine, k.MainAssyLine, k.shortageline,  \n" +
                "								SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForSubAssy,  \n" +
                "								SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN k.MainAssyLine ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForComponent  \n" +
                "					 FROM  \n" +
                "							(SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "									vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "									IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "									(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "									(case when vk.assyid = sd.partid then vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "									vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "								FROM  	`vu_kit_allocation_detail` vk  \n" +
                "								INNER JOIN    salesorderdet sd ON vk.refSalesorderdetid  = sd.id  \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "							) AS k  \n" +
                "						) AS k GROUP bY assyID, refSalesorderdetid, mainAssy  \n" +
                "					) AS k  \n" +
                "				) AS ka ON ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` AND ka.mainAssy =  `vuss`.`PartID` AND ka.assyID = kaad.partId  \n" +
                "				LEFT JOIN  rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "				LEFT JOIN  holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId AND hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId AND htk.refType='KA' AND htk.isDeleted=0)  \n" +
                "				LEFT JOIN (SELECT ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) AS initialStockCount  \n" +
                "								FROM assemblystock ass WHERE ass.isDeleted =0 AND ass.type = 'OS'  \n" +
                "								GROUP BY ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID)  AS astk  \n" +
                "							ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` AND astk.refSalesOrderID = vuss.`Sales Order ID` AND astk.partID = kaad.partId  \n" +
                "				) AS a  \n" +
                "		) AS t  \n" +
                "    \");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY (nextReleaseDate IS NULL),  nextReleaseDate ASC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  #need to check once  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "       ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pIsSubAssembly = 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND isSubAssembly = 0 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSubAssemblyTab = 1) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND (CASE WHEN assyID = partID THEN subAssyCount > 0 ELSE 1= 1 END) \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetKitList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "   #select @SQLStatement2;  \n" +
                "   PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5833,'2.00','V1','Bug #40348 & 40306, User Story #39149 & # 34796 - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5833:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustAllRefundSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustAllRefundSummaryList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "	IN pRefundSubStatusIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(1000),  \n" +
                "	IN pPaymentCMNumber VARCHAR(1000),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactRefundAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromCMPaymentDate DATE,  \n" +
                "	IN pToCMPaymentDate DATE,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTransModeType INT,  \n" +
                "	IN pIsIncludeVoidedTransaction TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_CMPaymentWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_PaymentDateCon VARCHAR(1000);  \n" +
                "	DECLARE v_CMDateCon VARCHAR(1000);  \n" +
                "	DECLARE v_CMPaymentDateWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "        SET v_CMDateCon = '';  \n" +
                "        SET v_PaymentDateCon = '';  \n" +
                "        SET v_CMPaymentDateWhereClause = '';  \n" +
                "        SET v_IsIncludeVoidedTransWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "        IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pRefundSubStatusIDs IS NOT NULL AND pRefundSubStatusIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND subStatus in (',pRefundSubStatusIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pPaymentCMNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET (\"',pPaymentCMNumber,'\",c.paymentCMNumWithOutIDList) ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND totalRefundIssuedAmount ',CASE WHEN pExactRefundAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" AND refundDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromCMPaymentDate IS NOT NULL OR pToCMPaymentDate IS NOT NULL) THEN  \n" +
                "  \n" +
                "		IF (pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NOT NULL) THEN  \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "		ELSEIF(pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NULL) THEN  \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" ');  \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" ');  \n" +
                "		ELSEIF(pToCMPaymentDate IS NOT NULL AND pFromCMPaymentDate IS NULL) THEN  \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		SET v_CMPaymentDateWhereClause = CONCAT('  \n" +
                "			AND  \n" +
                "			(  \n" +
                "				EXISTS(  \n" +
                "					SELECT  1  \n" +
                "					FROM packingslip_invoice_payment_det pipddt  \n" +
                "						JOIN packingslip_invoice_payment pipdt ON pipddt.refRefundPaymentID = pipdt.id AND pipdt.isDeleted = 0  \n" +
                "					WHERE pipddt.refPayementid = psip.id  \n" +
                "					',v_PaymentDateCon,'  \n" +
                "					AND pipddt.isDeleted=0  \n" +
                "				 )  \n" +
                "				 OR  \n" +
                "				 EXISTS(  \n" +
                "					SELECT  1  \n" +
                "					FROM packingslip_invoice_payment_det pipddt  \n" +
                "						JOIN customer_packingslip cpsdt ON pipddt.refRefundCustCreditMemoID = cpsdt.id AND cpsdt.isDeleted = 0  \n" +
                "					WHERE pipddt.refPayementid = psip.id  \n" +
                "					',v_CMDateCon,'  \n" +
                "					AND pipddt.isDeleted=0  \n" +
                "				 )  \n" +
                "			)  \n" +
                "  \n" +
                "		');  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsIncludeVoidedTransaction = 0) THEN  \n" +
                "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerRefundDetails = CONCAT(\"  \n" +
                "		SELECT  psip.id,  \n" +
                "			psip.mfgcodeID ,  \n" +
                "			fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, '\",v_mfgNameFormat,\"') customerCodeName,  \n" +
                "			psip.isPaymentVoided,  psip.voidPaymentReason,  \n" +
                "			psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided = 0 THEN 'No' ELSE 'Yes' END) AS isPaymentVoidedBooleanConverted,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')  \n" +
                "									ELSE NULL END) AS voidedAt,  \n" +
                "			psip.bankName,  \n" +
                "			psip.bankAccountNo,  \n" +
                "			psip.paymentType,  \n" +
                "			psip.bankAccountMasID,  \n" +
                "			psip.systemId ,  \n" +
                "			psip.paymentDate AS refundDate,  \n" +
                "			psip.paymentAmount,  \n" +
                "			psip.accountReference,  \n" +
                "			psip.remark,  \n" +
                "			psip.paymentNumber,  \n" +
                "			gc.gencCategoryName paymentMethod,  \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMList  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentList  \n" +
                "				ELSE NULL END) AS paymentCMList ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMNumWithOutIDList  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumWithOutIDListList  \n" +
                "				ELSE NULL END) AS paymentCMNumWithOutIDList ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.totDetLevelSelectedCMCount  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.totDetLevelSelectedPaymentCount  \n" +
                "				ELSE NULL END) AS totDetLevelSelectedPaymentCMCount ,  \n" +
                "			(SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_payment_CM_Refund'  \n" +
                "			AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0) AS totalDocuments ,  \n" +
                "			psip.offsetAmount ,  \n" +
                "			psip.refGencTransModeID , gtmm.modeName,  \n" +
                "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,  \n" +
                "			psip.status , psip.subStatus ,  \n" +
                "			(CASE WHEN psip.subStatus = 1 THEN 'Draft' WHEN psip.subStatus = 2 THEN 'Published'  \n" +
                "				WHEN psip.subStatus = 3 THEN 'Ready to Print Check' WHEN psip.subStatus = 4 THEN 'Refunded'  \n" +
                "				ELSE '' END) AS refundSubStatusText,  \n" +
                "			(CASE WHEN psip.subStatus = 1 THEN 'Pending' WHEN psip.subStatus = 2 THEN 'Approved to Refund'  \n" +
                "				WHEN psip.subStatus = 3 THEN 'Approved To Pay' WHEN psip.subStatus = 4 THEN 'Paid'  \n" +
                "				ELSE '' END) AS refundSubStatusLogicalText,  \n" +
                "			psip.isMarkAsPaid,  \n" +
                "			(CASE WHEN psip.isMarkAsPaid = 0 THEN 'No'  WHEN psip.isMarkAsPaid = 1 THEN 'Yes'  \n" +
                "				ELSE 'Not Applicable' END) AS isMarkAsPaidBooleanConverted,  \n" +
                "			psip.lockStatus,  \n" +
                "			(CASE WHEN psip.lockStatus = 'LC' THEN 1 ELSE 0 END) AS isTransLocked,  \n" +
                "			(CASE WHEN psip.lockStatus = 'LC' THEN 'Yes' ELSE 'No' END) AS isTransLockedConvertedValue,  \n" +
                "			(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "				WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "			psip.billToName , psip.billToAddress ,  \n" +
                "			fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "			fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		     JOIN mfgcodemst mcm ON mcm.id = psip.mfgcodeID AND mcm.isDeleted = 0  \n" +
                "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber, '#####',psipt.id SEPARATOR '@@@@@') paymentList ,  \n" +
                "						GROUP_CONCAT(psipt.paymentNumber) paymentNumWithOutIDListList ,  \n" +
                "						COUNT(1) AS totDetLevelSelectedPaymentCount  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.creditMemoNumber, '#####',cps.id SEPARATOR '@@@@@') CMList ,  \n" +
                "						GROUP_CONCAT(cps.creditMemoNumber) CMNumWithOutIDList ,  \n" +
                "						COUNT(1) AS totDetLevelSelectedCMCount  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		WHERE psip.refPaymentMode = 'CR'  \n" +
                "		AND refGencTransModeID IN (-6,-7,-8,-9,-10,-11)  \n" +
                "		\",v_CMPaymentDateWhereClause, v_IsIncludeVoidedTransWhereClause ,\"  \n" +
                "		AND psip.isDeleted = 0  \n" +
                "  \n" +
                "            \");  \n" +
                "  \n" +
                "      -- select @Sproc_RetrieveCustomerRefundDetails;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "			/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerRefundDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	 -- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerRefundDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateCustomerRefund` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateCustomerRefund`(  \n" +
                "	IN pCustPaymentDetList JSON,  \n" +
                "	IN pCustCMDetList JSON,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedPayOfCust INT,  \n" +
                "	IN pTotSelectedCMOfCust INT,  \n" +
                "	IN pSystemID VARCHAR(20),  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT,  \n" +
                "	IN pRefGencTransModeID INT,  \n" +
                "	IN pOffsetAmount DECIMAL(18,8),  \n" +
                "	IN pBillToName VARCHAR(100) ,  \n" +
                "	IN pBillToAddress VARCHAR(255),  \n" +
                "	IN pIsMarkAsPaid TINYINT,  \n" +
                "	IN pBillToAddressID INT,  \n" +
                "	IN pBillToContactPersonID INT,  \n" +
                "	IN pBillToContactPerson VARCHAR(1000)  \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE insertedRefundMstID INT;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF(pTotSelectedPayOfCust > 0 AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN  \n" +
                "  \n" +
                "		/* get/map all Customer payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustPaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustPaymentDetList_JT ;  \n" +
                "  \n" +
                "		/* get all customer payment > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS  \n" +
                "			SELECT psip.id AS paymentMstID,  \n" +
                "				psip.paymentAmount,  \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID = psip.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0) AS totalRefundIssuedAmount  \n" +
                "			FROM packingslip_invoice_payment psip  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "			AND psip.isDeleted = 0 ;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected payment not found from db  \n" +
                "			> original Agreed Refund Amount Of Payment  mismatch  \n" +
                "			> Total Refund Issued Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustPaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "  \n" +
                "	ELSEIF (pTotSelectedCMOfCust > 0  \n" +
                "					AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN  \n" +
                "             /* get/map all Customer CM Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustCMDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustCMDetList_JT ;  \n" +
                "	 -- select * from temp_UI_CustCMDetList;  \n" +
                "  \n" +
                "	/* get all customer Refund > against total CM list > available in data base */  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS  \n" +
                "			SELECT cps.id AS custCreditMemoMstID,  \n" +
                "			IFNULL(cps.totalAmount,0) AS originalCreditMemoAmount ,  \n" +
                "            (SELECT IFNULL(paymentAmount,0) FROM packingslip_invoice_payment  \n" +
                "				WHERE refCustCreditMemoID = cps.id  \n" +
                "				AND refPaymentMode = 'CA'  \n" +
                "				AND isPaymentVoided = 0 AND isDeleted = 0) AS pastPaidAmountFromCreditMemo ,  \n" +
                "			 cps.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "            (SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0)  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "					AND isPaymentVoided = 0  \n" +
                "					AND isDeleted = 0  \n" +
                "                    ) totalRefundIssuedAmount  \n" +
                "		FROM customer_packingslip AS cps  \n" +
                "		WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "		AND cps.isDeleted = 0 ;  \n" +
                "         -- select * from temp_DB_Available_CustCMDetList;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected CM not found from db  \n" +
                "			> original Agreed Refund Amount Of Refund mismatch  \n" +
                "			> Total Refund Issued Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "			SELECT tucml.*  \n" +
                "			FROM temp_UI_CustCMDetList tucml  \n" +
                "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID  \n" +
                "			WHERE (  \n" +
                "				 (tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "		  -- select * from temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "		 SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	IF((((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0))  \n" +
                "					) THEN  \n" +
                "  \n" +
                "  \n" +
                "		INSERT INTO packingslip_invoice_payment(`mfgcodeID`,`paymentNumber`,`paymentDate`,`paymentAmount`,  \n" +
                "			`paymentType`,`accountReference`,`bankAccountMasID`,`bankAccountNo`,  \n" +
                "			`bankName`,`remark`,`refPaymentMode`,`systemId` ,  \n" +
                "			`depositBatchNumber` ,  `offsetAmount`,`refGencTransModeID`,  \n" +
                "			`payToName` , `payToAddress`, `billToAddress` , `billToName` ,  \n" +
                "			`billToAddressID` , `billToContactPersonID` , `billToContactPerson` ,  \n" +
                "			`payToAddressID` , `payToContactPersonID` , `payToContactPerson` ,  \n" +
                "			`isMarkAsPaid` , `status` , `subStatus` ,  \n" +
                "			`createdAt`, `createdBy`, `createByRoleId`,  \n" +
                "			`updatedAt`,`updatedBy`,`updateByRoleId`)  \n" +
                "		VALUES(pMfgcodeID, pPaymentNumber, pPaymentDate, pPaymentAmount,  \n" +
                "			pPaymentType, pAccountReference, pBankAccountMasID, pBankAccountNo,  \n" +
                "			pBankName, pRemark, pRefPaymentMode, pSystemID,  \n" +
                "			pDepositBatchNumber, pOffsetAmount , pRefGencTransModeID ,  \n" +
                "			pBillToName, pBillToAddress , pBillToAddress , pBillToName ,  \n" +
                "			pBillToAddressID , pBillToContactPersonID , pBillToContactPerson ,  \n" +
                "			pBillToAddressID , pBillToContactPersonID , pBillToContactPerson ,  \n" +
                "			pIsMarkAsPaid , 1 , 1 ,  \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "			fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID) ;  \n" +
                "  \n" +
                "		SET insertedRefundMstID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF(pTotSelectedPayOfCust > 0) THEN  \n" +
                "			/* add selected refund payment details data */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,  \n" +
                "					`comment` ,  \n" +
                "					`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "					`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedRefundMstID, paymentAmountForSelectedPayment, paymentMstID,  \n" +
                "				COMMENT ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy1 AS  \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy2;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy2 AS  \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			/* update refund payment status details and lock status of defined payment */  \n" +
                "			UPDATE packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "						FROM packingslip_invoice_payment_det psipd  \n" +
                "						WHERE psipd.refPayementid IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy2)  \n" +
                "						AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "						AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "						GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "					ON psip.id = invPayDetTemp.refPayementid  \n" +
                "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "					ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "			SET  psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) = 0 THEN 'RL'  \n" +
                "						ELSE psip.lockStatus END ,  \n" +
                "				psip.refundStatus = (CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "							WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "							WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "						END) ,  \n" +
                "				updatedBy = pUserID,  \n" +
                "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy1)  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		ELSEIF(pTotSelectedCMOfCust > 0) THEN  \n" +
                "			/* add selected refund credit memo details data */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,  \n" +
                "					`comment` ,  \n" +
                "					`createdAt`, `createdBy`,`createByRoleId`,  \n" +
                "					`updatedAt`, `updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT insertedRefundMstID, paymentAmountForSelectedCM, custCreditMemoMstID,  \n" +
                "				COMMENT ,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID,  \n" +
                "				fun_DatetimetoUTCDateTime(), pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy1 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy2;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy2 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status and credit memo refund status   */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy1)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
                "					FROM packingslip_invoice_payment  \n" +
                "					WHERE refCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy2)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refCustCreditMemoID) refCMAppliedDet  \n" +
                "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN  \n" +
                "									(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.refundStatus = (CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "							WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
                "							WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
                "						END) ,  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0) OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all mis match amount records or deleted payment */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - get all mis match amount records or deleted CM */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "  \n" +
                "	/* Resp[3] - newly inserted refund master id for Refund Transaction  */  \n" +
                "	SELECT insertedRefundMstID AS insertedRefundMstID;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy2;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateCustomerRefund` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateCustomerRefund`(  \n" +
                "	IN pCustPaymentDetList JSON,  \n" +
                "	IN pCustCMDetList JSON,  \n" +
                "	IN pCustRefundMstID INT,  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pPaymentAmount DECIMAL(18,8),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pRemark VARCHAR(1000),  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTotSelectedPayOfCust INT,  \n" +
                "	IN pTotSelectedCMOfCust INT,  \n" +
                "	IN pDeleteCustPaymentDetList JSON,  \n" +
                "	IN pDeleteCustCMDetList JSON,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2) ,  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT,  \n" +
                "	IN pOffsetAmount DECIMAL(18,8) ,  \n" +
                "	IN pBillToName VARCHAR(100) ,  \n" +
                "	IN pBillToAddress VARCHAR(255) ,  \n" +
                "	IN pIsMarkAsPaid TINYINT,  \n" +
                "	IN pSubStatus INT,  \n" +
                "	IN pStatus INT,  \n" +
                "	IN pBillToAddressID INT,  \n" +
                "	IN pBillToContactPersonID INT,  \n" +
                "	IN pBillToContactPerson VARCHAR(1000)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE v_db_mainRefundAmount DECIMAL(18,8) ;  \n" +
                "	IF(pTotSelectedPayOfCust > 0  \n" +
                "					AND pCustPaymentDetList IS NOT NULL AND pCustPaymentDetList != '') THEN  \n" +
                "		/* get/map all Customer Payment Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustPaymentDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedPayment` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedPayment\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustPaymentDetList_JT ;  \n" +
                "		-- select * from temp_UI_CustPaymentDetList;  \n" +
                "  \n" +
                "		/* get all customer refund > against total payment list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustPaymentDetList AS  \n" +
                "			SELECT psip.id AS paymentMstID,  \n" +
                "				psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "				psipd.id AS paymentDetMstID,  \n" +
                "				(SELECT IFNULL(SUM(IFNULL(paymentAmount,0)),0) FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundPaymentID = psip.id  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0)  AS totalRefundIssuedAmount  \n" +
                "			FROM packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN packingslip_invoice_payment_det psipd  \n" +
                "					ON psipd.refPayementid = pCustRefundMstID AND psip.id = psipd.refRefundPaymentID AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "			AND psip.isDeleted = 0  \n" +
                "			AND psip.isPaymentVoided = 0 ;  \n" +
                "  \n" +
                "            -- select * from temp_DB_Available_CustPaymentDetList;  \n" +
                "  \n" +
                "            /* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected payment not found from db > tdacipl.paymentMstID comes NULL  \n" +
                "			> original agreed refund Amount Of payment Pay  mismatch > tdacipl.agreedRefundAmount comes NULL  \n" +
                "			> refund issued Amount mismatch > tdacipl.totalRefundIssuedAmount comes NULL  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "			SELECT tucipl.*  \n" +
                "			FROM temp_UI_CustPaymentDetList tucipl  \n" +
                "				LEFT JOIN temp_DB_Available_CustPaymentDetList tdacipl ON tucipl.paymentMstID=tdacipl.paymentMstID  \n" +
                "			WHERE (  \n" +
                "				(tucipl.paymentMstID != IFNULL(tdacipl.paymentMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.agreedRefundAmount,0) != IFNULL(tdacipl.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucipl.totalRefundIssuedAmount,0) != IFNULL(tdacipl.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "				-- select * from temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "  \n" +
                "  \n" +
                "				/* get/map all deleting customer Payment Detail List send from UI */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM 	JSON_TABLE(  \n" +
                "					pDeleteCustPaymentDetList,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "							`refRefundPaymentID` INT PATH \"$.refRefundPaymentID\"  \n" +
                "						)  \n" +
                "				) AS DeleteCustPaymentDetList_JT ;  \n" +
                "  \n" +
                "				 /* get all deleted invoice payment det (passed from UI but not in db)  \n" +
                "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS  \n" +
                "					SELECT id FROM packingslip_invoice_payment_det  \n" +
                "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
                "					AND (isDeleted = 1 OR isPaymentVoided = 1);  \n" +
                "  \n" +
                "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;  \n" +
                "  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) = 0)  \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) = 0)) THEN  \n" +
                "  \n" +
                "			/* start - create/update/delete payment refund process */  \n" +
                "			IF(pDeleteCustPaymentDetList IS NOT NULL AND pDeleteCustPaymentDetList != '') THEN  \n" +
                "				/* delete those which are unselected(from UI) payment det */  \n" +
                "				UPDATE packingslip_invoice_payment_det  \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList_Copy1 AS  \n" +
                "					SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList ;  \n" +
                "  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy2;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustPaymentDetList_Copy2 AS  \n" +
                "					SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList ;  \n" +
                "  \n" +
                "				/* update refund payment status details and lock status which are deleted (unselected from UI) */  \n" +
                "				UPDATE packingslip_invoice_payment psip  \n" +
                "					LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "							FROM packingslip_invoice_payment_det psipd  \n" +
                "							WHERE psipd.refPayementid IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList_Copy2)  \n" +
                "							AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "							AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "							GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "						ON psip.id = invPayDetTemp.refPayementid  \n" +
                "					LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "							FROM packingslip_invoice_payment_det  \n" +
                "							WHERE refRefundPaymentID IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList)  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "							GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "						ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "				SET  psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) = 0 THEN 'RL'  \n" +
                "						ELSE psip.lockStatus END ,  \n" +
                "					psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
                "								(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "									WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "								END)  \n" +
                "							ELSE 'NA' END),  \n" +
                "					updatedBy = pUserID,  \n" +
                "					updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE psip.id IN (SELECT refRefundPaymentID FROM temp_UI_Delete_CustPaymentDetList_Copy1)  \n" +
                "				AND psip.isPaymentVoided = 0  \n" +
                "				AND psip.isDeleted = 0 ;  \n" +
                "  			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all payment det amount whose amount is changed from UI */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedPayment , paymentMstID , COMMENT  \n" +
                "					FROM temp_UI_CustPaymentDetList  \n" +
                "					WHERE paymentDetMstID IS NOT NULL) tucipdl  \n" +
                "				ON pipd.id = tucipdl.paymentDetMstID  \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedPayment,0),  \n" +
                "				pipd.comment = tucipdl.comment ,  \n" +
                "				pipd.updatedBy = pUserID,  \n" +
                "				pipd.updateByRoleId = pUserRoleID ,  \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE pipd.refPayementid = pCustRefundMstID  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0  \n" +
                "			;  \n" +
                "			-- select * from packingslip_invoice_payment_det where refPayementid =pCustRefundMstID;  \n" +
                "  \n" +
                "			/* insert newly selected payment det */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundPaymentID`,  \n" +
                "				`comment` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedPayment,0), paymentMstID,  \n" +
                "				COMMENT ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustPaymentDetList  \n" +
                "			WHERE paymentDetMstID IS NULL  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy1 AS  \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy2;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustPaymentDetList_Copy2 AS  \n" +
                "				SELECT paymentMstID FROM temp_UI_CustPaymentDetList ;  \n" +
                "  \n" +
                "			/* update refund payment status details and lock status which are newly created/updated */  \n" +
                "			UPDATE packingslip_invoice_payment psip  \n" +
                "				LEFT JOIN (SELECT psipd.refPayementid , IFNULL(SUM(psipd.paymentAmount),0) AS selectedInvoiceTotPaymentAmount  \n" +
                "							FROM packingslip_invoice_payment_det psipd  \n" +
                "							WHERE psipd.refPayementid IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy2)  \n" +
                "							AND psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "							AND psipd.isDeleted = 0 AND psipd.isPaymentVoided = 0  \n" +
                "							GROUP BY psipd.refPayementid ) invPayDetTemp  \n" +
                "						ON psip.id = invPayDetTemp.refPayementid  \n" +
                "				LEFT JOIN (SELECT refRefundPaymentID, IFNULL(SUM(paymentAmount),0) AS totRefundIssuedOfPayment  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundPaymentID IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList)  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID) AS paymentTotRefundDetTemp  \n" +
                "					ON psip.id = paymentTotRefundDetTemp.refRefundPaymentID  \n" +
                "			SET  psip.lockStatus = CASE WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) > 0 THEN 'NA'  \n" +
                "						WHEN (IFNULL(psip.paymentAmount,0) - (IFNULL(invPayDetTemp.selectedInvoiceTotPaymentAmount,0) + IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0))  \n" +
                "								) = 0 THEN (CASE WHEN psip.lockStatus = 'LC' THEN 'LC' ELSE 'RL' END)  \n" +
                "						ELSE psip.lockStatus END ,  \n" +
                "			       psip.refundStatus = (CASE WHEN psip.isMarkForRefund = 1 THEN  \n" +
                "							(CASE WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = 0 THEN 'PE'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) < paymentAmount THEN 'PR'  \n" +
                "								WHEN IFNULL(paymentTotRefundDetTemp.totRefundIssuedOfPayment,0) = paymentAmount THEN 'FR'  \n" +
                "							END)  \n" +
                "						ELSE 'NA' END) ,  \n" +
                "				updatedBy = pUserID,  \n" +
                "				updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE psip.id IN (SELECT paymentMstID FROM temp_UI_CustPaymentDetList_Copy1)  \n" +
                "			AND psip.isPaymentVoided = 0  \n" +
                "			AND psip.isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	/* customer credit memo refund cases */  \n" +
                "	ELSEIF (pTotSelectedCMOfCust > 0 AND pCustCMDetList IS NOT NULL AND pCustCMDetList != '') THEN  \n" +
                "  \n" +
                "	        /* get/map all Customer CM Detail List send from UI */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pCustCMDetList,  \n" +
                "				\"$[*]\" COLUMNS(  \n" +
                "					`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "					`paymentMstID` INT PATH \"$.paymentMstID\",  \n" +
                "					`custCreditMemoMstID` INT PATH \"$.custCreditMemoMstID\",  \n" +
                "					`agreedRefundAmount` DECIMAL(18,8) PATH \"$.agreedRefundAmount\",  \n" +
                "					`totalRefundIssuedAmount` DECIMAL(18,8) PATH \"$.totalRefundIssuedAmount\" ,  \n" +
                "					`paymentAmountForSelectedCM` DECIMAL(18,8) PATH \"$.paymentAmountForSelectedCM\" ,  \n" +
                "					`comment`  VARCHAR(2000) PATH \"$.comment\"  \n" +
                "				)  \n" +
                "			) AS CustCMDetList_JT ;  \n" +
                "		-- select temp_UI_CustCMDetList.* from temp_UI_CustCMDetList;  \n" +
                "  \n" +
                "		/* get all customer Refund > against total CM list > available in data base */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustCMDetList;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_DB_Available_CustCMDetList AS  \n" +
                "				SELECT cps.id AS custCreditMemoMstID,  \n" +
                "				 cps.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "		    (SELECT IFNULL(SUM(paymentAmount),0)  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundCustCreditMemoID = cps.id  \n" +
                "						AND isPaymentVoided = 0  \n" +
                "						AND isDeleted = 0  \n" +
                "			    ) totalRefundIssuedAmount  \n" +
                "			FROM customer_packingslip AS cps  \n" +
                "			WHERE  cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "			AND cps.isDeleted = 0 ;  \n" +
                "  \n" +
                "		-- select temp_DB_Available_CustCMDetList.* from temp_DB_Available_CustCMDetList;  \n" +
                "  \n" +
                "		/* get all mis match amount records (compare UI data and db available data)  \n" +
                "			> if selected CM not found from db  \n" +
                "			> original Agreed Refund Amount Of Refund mismatch  \n" +
                "			> Total Refund Issued Amount mismatch  \n" +
                "			*/  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "			SELECT tucml.*  \n" +
                "			FROM temp_UI_CustCMDetList tucml  \n" +
                "				LEFT JOIN temp_DB_Available_CustCMDetList tdacml ON tucml.custCreditMemoMstID=tdacml.custCreditMemoMstID  \n" +
                "			WHERE (  \n" +
                "				(tucml.custCreditMemoMstID != IFNULL(tdacml.custCreditMemoMstID,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.agreedRefundAmount,0) != IFNULL(tdacml.agreedRefundAmount,0))  \n" +
                "				OR  \n" +
                "				(IFNULL(tucml.totalRefundIssuedAmount,0) != IFNULL(tdacml.totalRefundIssuedAmount,0))  \n" +
                "				)  \n" +
                "			;  \n" +
                "			-- select temp_UI_Mismatch_Amount_CustCMDetList.* from temp_UI_Mismatch_Amount_CustCMDetList;  \n" +
                "  \n" +
                "			/* get/map all deleting customer CM Detail List send from UI */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList AS  \n" +
                "				SELECT 	*  \n" +
                "				FROM 	JSON_TABLE(  \n" +
                "					pDeleteCustCMDetList,  \n" +
                "						\"$[*]\" COLUMNS(  \n" +
                "							`paymentDetMstID` INT PATH \"$.paymentDetMstID\",  \n" +
                "							`refRefundCustCreditMemoID` INT PATH \"$.refRefundCustCreditMemoID\"  \n" +
                "						)  \n" +
                "				) AS DeleteCustCMtDetList_JT ;  \n" +
                "				-- select * from temp_UI_Delete_CustCMDetList;  \n" +
                "  \n" +
                "			/* get all deleted invoice payment det (passed from UI but not in db)  \n" +
                "				if selected payment det not found from db - tdacipl.paymentDetMstID comes NULL in below query  */  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustCMDetList;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS  \n" +
                "					SELECT id FROM packingslip_invoice_payment_det  \n" +
                "					WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)  \n" +
                "					AND (isDeleted = 1 OR isPaymentVoided = 1);  \n" +
                "  \n" +
                "				-- select temp_Deleted_CustCMDetList.* from temp_Deleted_CustCMDetList;  \n" +
                "  \n" +
                "		IF (((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) = 0)  \n" +
                "			AND ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) = 0)) THEN  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "			IF(pDeleteCustCMDetList IS NOT NULL AND pDeleteCustCMDetList != '') THEN  \n" +
                "				/* delete those which are unselected(from UI) CM det */  \n" +
                "				UPDATE packingslip_invoice_payment_det  \n" +
                "				SET isDeleted = 1, deletedBy = pUserID,  \n" +
                "					deleteByRoleId = pUserRoleID, deletedAt=fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id IN (SELECT paymentDetMstID FROM temp_UI_Delete_CustCMDetList)  \n" +
                "				AND isPaymentVoided = 0  \n" +
                "				AND isDeleted = 0 ;  \n" +
                "				-- select 'deleted refund for CM list' ;  \n" +
                "  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustCMDetList_Copy1;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Delete_CustCMDetList_Copy1 AS  \n" +
                "					SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				/* update customer credit memo - payment status and credit memo refund status   */  \n" +
                "				UPDATE customer_packingslip cps  \n" +
                "				LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE refRefundCustCreditMemoID IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList)  \n" +
                "						AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "						GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "					 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "				SET  cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
                "									(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
                "										WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
                "									END)  \n" +
                "							ELSE 'NA' END),  \n" +
                "					cps.updatedBy = pUserID,  \n" +
                "					cps.updateByRoleId = pUserRoleID ,  \n" +
                "					cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE cps.id IN (SELECT refRefundCustCreditMemoID FROM temp_UI_Delete_CustCMDetList_Copy1)  \n" +
                "				AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "  \n" +
                "  \n" +
                "			/* update all CM det amount whose amount is changed from UI */  \n" +
                "			UPDATE packingslip_invoice_payment_det pipd  \n" +
                "				JOIN (SELECT paymentDetMstID, paymentAmountForSelectedCM , paymentMstID , COMMENT  \n" +
                "					FROM temp_UI_CustCMDetList  \n" +
                "					WHERE paymentDetMstID IS NOT NULL) tucipdl  \n" +
                "				ON pipd.id = tucipdl.paymentDetMstID  \n" +
                "			SET pipd.paymentAmount = IFNULL(tucipdl.paymentAmountForSelectedCM,0),  \n" +
                "				pipd.comment = tucipdl.comment ,  \n" +
                "				pipd.updatedBy = pUserID,  \n" +
                "				pipd.updateByRoleId = pUserRoleID ,  \n" +
                "				pipd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE pipd.refPayementid = pCustRefundMstID  \n" +
                "			AND pipd.isPaymentVoided = 0  \n" +
                "			AND pipd.isDeleted = 0  \n" +
                "			;  \n" +
                "  \n" +
                "			/* insert newly selected CM det */  \n" +
                "			INSERT INTO packingslip_invoice_payment_det(`refPayementid`,`paymentAmount`,`refRefundCustCreditMemoID`,  \n" +
                "				`comment` ,  \n" +
                "				`createdBy`,`createByRoleId`,`updatedBy`,`updateByRoleId`)  \n" +
                "			SELECT pCustRefundMstID, IFNULL(paymentAmountForSelectedCM,0), custCreditMemoMstID,  \n" +
                "				COMMENT ,  \n" +
                "				pUserID, pUserRoleID, pUserID, pUserRoleID  \n" +
                "			FROM temp_UI_CustCMDetList  \n" +
                "			WHERE paymentDetMstID IS NULL  \n" +
                "			;  \n" +
                "  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy1;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy1 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_UI_CustCMDetList_Copy2;  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_CustCMDetList_Copy2 AS  \n" +
                "				SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList ;  \n" +
                "  \n" +
                "			/* update customer credit memo - payment status and refund status   */  \n" +
                "			UPDATE customer_packingslip cps  \n" +
                "			LEFT JOIN ( SELECT refRefundCustCreditMemoID, SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo  \n" +
                "					FROM packingslip_invoice_payment_det  \n" +
                "					WHERE refRefundCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy1)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refRefundCustCreditMemoID) refPaymentOfCMDet  \n" +
                "				 ON cps.id = refPaymentOfCMDet.refRefundCustCreditMemoID  \n" +
                "			LEFT JOIN ( SELECT refCustCreditMemoID, SUM(paymentAmount) AS totCreditMemoAppliedAmt  \n" +
                "					FROM packingslip_invoice_payment  \n" +
                "					WHERE refCustCreditMemoID IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList_Copy2)  \n" +
                "					AND isPaymentVoided = 0 AND isDeleted = 0  \n" +
                "					GROUP BY refCustCreditMemoID) refCMAppliedDet  \n" +
                "				 ON cps.id = refCMAppliedDet.refCustCreditMemoID  \n" +
                "			SET cps.paymentStatus = ( CASE WHEN refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo IS NULL AND refCMAppliedDet.totCreditMemoAppliedAmt IS NULL THEN 'PE'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) > (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN 'PR'  \n" +
                "  \n" +
                "						   WHEN ABS(cps.totalAmount) = (IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) + IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0)) THEN  \n" +
                "									(CASE WHEN ABS(cps.totalAmount) = IFNULL(refCMAppliedDet.totCreditMemoAppliedAmt,0) THEN 'RE' ELSE \"NP\" END)  \n" +
                "  \n" +
                "						   ELSE cps.paymentStatus END  \n" +
                "						) ,  \n" +
                "				cps.refundStatus = (CASE WHEN cps.isMarkForRefund = 1 THEN  \n" +
                "								(CASE WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = 0 THEN 'PE'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) < ABS(cps.totalAmount) THEN 'PR'  \n" +
                "									WHEN IFNULL(refPaymentOfCMDet.totRefundIssuedAgainstCreditMemo,0) = ABS(cps.totalAmount) THEN 'FR'  \n" +
                "								END)  \n" +
                "						      ELSE 'NA' END),  \n" +
                "				cps.updatedBy = pUserID,  \n" +
                "				cps.updateByRoleId = pUserRoleID ,  \n" +
                "				cps.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "			WHERE cps.id IN (SELECT custCreditMemoMstID FROM temp_UI_CustCMDetList)  \n" +
                "			AND cps.isDeleted = 0	;  \n" +
                "  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* update payment master details */  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		SET paymentNumber = pPaymentNumber,  paymentDate = pPaymentDate,  \n" +
                "			paymentType = pPaymentType, paymentAmount = pPaymentAmount ,  \n" +
                "			accountReference = pAccountReference, bankAccountMasID = pBankAccountMasID,  \n" +
                "			bankAccountNo = pBankAccountNo, bankName = pBankName,  \n" +
                "			remark = pRemark, depositBatchNumber = pDepositBatchNumber ,  \n" +
                "			payToName = pBillToName , payToAddress = pBillToAddress,  \n" +
                "			billToAddress = pBillToAddress, billToName = pBillToName,  \n" +
                "			billToAddressID = pBillToAddressID, billToContactPersonID = pBillToContactPersonID,  \n" +
                "			billToContactPerson = pBillToContactPerson, payToAddressID = pBillToAddressID,  \n" +
                "			payToContactPersonID = pBillToContactPersonID, payToContactPerson = pBillToContactPerson,  \n" +
                "			isMarkAsPaid = pIsMarkAsPaid ,  \n" +
                "			subStatus = pSubStatus , `status` = pStatus ,  \n" +
                "			updatedBy = pUserID, offsetAmount = pOffsetAmount,  \n" +
                "			updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE id = pCustRefundMstID  \n" +
                "		-- AND isPaymentVoided = 0  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	/* set up default temp table if not created */  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
                "  \n" +
                "	 CREATE TEMPORARY TABLE IF NOT EXISTS temp_Deleted_CustCMDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment_det WHERE 1=0 ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustPayDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_UI_Mismatch_Amount_CustCMDetList AS  \n" +
                "		SELECT 1 FROM packingslip_invoice_payment WHERE 1=0 ;  \n" +
                "  \n" +
                "  \n" +
                "	/* Resp[0] - store procedure status */  \n" +
                "	IF(((SELECT COUNT(1) FROM temp_Deleted_CustPayDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustPayDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_Deleted_CustCMDetList) > 0)  \n" +
                "		OR ((SELECT COUNT(1) FROM temp_UI_Mismatch_Amount_CustCMDetList) > 0)  \n" +
                "		) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* Resp[1] - get all deleted payment det (passed from UI but not in db) */  \n" +
                "	 SELECT * FROM temp_Deleted_CustPayDetList ;  \n" +
                "  \n" +
                "	/* Resp[2] - get all deleted CM det (passed from UI but not in db) */  \n" +
                "	SELECT * FROM temp_Deleted_CustCMDetList ;  \n" +
                "  \n" +
                "	/* Resp[3] - get all mis match payment amount records or deleted  */  \n" +
                "	 SELECT * FROM temp_UI_Mismatch_Amount_CustPayDetList ;  \n" +
                "  \n" +
                "	/*  Resp[4] - get all mis match credit memo amount records or deleted  */  \n" +
                "	SELECT * FROM temp_UI_Mismatch_Amount_CustCMDetList ;  \n" +
                "  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_DB_Available_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Deleted_CustPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Mismatch_Amount_CustPayDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_Delete_CustPaymentDetList_Copy2;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy1;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_UI_CustPaymentDetList_Copy2;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 18-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5834,'2.00','V1',' cust refund sps - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5834:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 18-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsSubAssembly TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE,  \n" +
                "    IN pSubAssemblyTab TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            (CASE WHEN kaad.bomAssyLevel = 0 THEN kaad.bomInternalVersionString ELSE 'N/A' END) AS kitAllocationInternalVersion,  \n" +
                "            kaad.bomAssyLevel  \n" +
                "		\");  \n" +
                "  \n" +
                "	SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND kaad.isDeleted = 0\") ;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetKitList = CONCAT(\"  \n" +
                "		SELECT  t.*,  \n" +
                "				fun_getKitReleaseIndication(releaseDayDiffwithCurrentDate, shortagePer, isKitPlanningRequired) AS kitReleaseIndication,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT  a.*,  \n" +
                "					(CASE WHEN assyID = partID THEN 0 ELSE 1 END) AS isSubAssembly,  \n" +
                "					(  \n" +
                "					CASE  \n" +
                "						WHEN ((IFNULL(kitReleasePlanCount, 0) = 0) OR (IFNULL(kitReleasePlanCount, 0) > 0 AND (IFNULL(totalPOQty, 0) <> assyPOQty OR IFNULL(totalKitQty, 0) <> assyKitQty))) THEN  \n" +
                "							TRUE  \n" +
                "						ELSE  \n" +
                "							FALSE  \n" +
                "					END  \n" +
                "					) as isKitPlanningRequired,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN ifnull(kitReleasePlanCount, 0) = 0 THEN  \n" +
                "								'Unplanned'  \n" +
                "							WHEN ifnull(kitReleasePlanCount, 0) > 0  AND  (IFNULL(totalPOQty, 0) <> assyPOQty OR IFNULL(totalKitQty, 0) <> assyKitQty) THEN  \n" +
                "								'Partially Planned'  \n" +
                "							WHEN ifnull(kitReleasePlanCount, 0) > 0 AND  IFNULL(totalPOQty, 0) = assyPOQty AND IFNULL(totalKitQty, 0) = assyKitQty THEN  \n" +
                "								'Fully Planned'  \n" +
                "							ELSE  \n" +
                "								NULL  \n" +
                "						END  \n" +
                "					) as kitPlanStatus,  \n" +
                "					fun_getKitReleaseStatus(subKitStatusPercentage,totalKitQty,totalPOQty,assyKitQty,assyPOQty,releasedPlanCount,pendingCount) AS  kitReleaseStatus,  \n" +
                "					fun_getKitReturnStatus(pendingReleaseCount,releasedNotReturnedCount,returnedCount,readyToReturnCount,shortageReturnCount) AS kitReturnStatus  \n" +
                "			FROM  \n" +
                "				(SELECT  \n" +
                "					`vuss`.`Sales Order ID` AS id,  \n" +
                "					`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "					`vuss`.`PartID` AS assyID,  \n" +
                "					kaad.partId AS partID,  \n" +
                "					`vuss`.`Status` AS completedStatus,  \n" +
                "					(  \n" +
                "						CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "								'Draft'  \n" +
                "							WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "								'Published'  \n" +
                "							ELSE  \n" +
                "								''  \n" +
                "						END  \n" +
                "					) AS `statusConvertedValue`,  \n" +
                "					ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "					ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "					ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "					td.releasedPlanCount,  \n" +
                "					td.pendingCount,  \n" +
                "					vrr.pendingReleaseCount,  \n" +
                "					vrr.releasedNotReturnedCount,  \n" +
                "					vrr.returnedCount,  \n" +
                "					vrr.readyToReturnCount,  \n" +
                "					vrr.shortageReturnCount,  \n" +
                "					CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "					td.nextReleaseDate,  \n" +
                "					`vuss`.`So Date` AS soDate,  \n" +
                "					`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "					`vuss`.`Revision` AS revision,  \n" +
                "					`vuss`.`Po Number` AS poNumber,  \n" +
                "					`vuss`.`Po Date` AS poDate,  \n" +
                "					`vuss`.`Assy ID` AS PIDCode,  \n" +
                "					`vuss`.`Assy Name` AS mfgPN,  \n" +
                "					ro.rohsIcon,  \n" +
                "					ro.name AS `rohsComplientConvertedValue`,  \n" +
                "					`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "					`vuss`.`custAssyPN` AS custAssyPN,  \n" +
                "					`vuss`.`liveVersion` AS liveVersion,  \n" +
                "					`vuss`.`releasedWorkorder` AS releasedWorkorder,  \n" +
                "					`vuss`.`NickName` AS nickName,  \n" +
                "					`vuss`.`partDescription` AS partDescription,  \n" +
                "					`vuss`.`PO Qty` AS qty,  \n" +
                "					`vuss`.`mrpQty` AS mrpQty,  \n" +
                "					`vuss`.`kitQty` AS kitQty,  \n" +
                "					(CASE  WHEN (`vuss`.`isHotJob` = 0) THEN  'No'  \n" +
                "						   WHEN (`vuss`.`isHotJob` = 1) THEN  'Yes'  \n" +
                "						   ELSE  ''  END  \n" +
                "					) AS `isHotJobValue`,  \n" +
                "					`vuss`.`isHotJob`,  \n" +
                "					`vuss`.`price` AS price,`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "					`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "					`vuss`.`remark` AS remark,  \n" +
                "					`vuss`.`cancleReason` AS cancleReason,  \n" +
                "					`vuss`.`Customer ID` AS customerID,  \n" +
                "					fun_GetFormattedMfgCode(vuss.mfgCode, vuss.mfgName,\", vMfgCodeFormat ,\") AS companyName,  \n" +
                "					`vuss`.`Full Name` AS fullName,  \n" +
                "					`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "					`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "					`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "					`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "					`vuss`.`shippingQty` AS shippingQty,  \n" +
                "					ifnull(td.totalPlan, 0) kitReleasePlanCount,  \n" +
                "					`vuss`.`kitNumber` AS kitNumber,  \n" +
                "					 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "					 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "					`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "					`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "					`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "					`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "					case when vuss.refSODetID is not null then sa.salesAssy else '' end  AS salesAssy,  \n" +
                "					`vuss`.`Sales Order Status` AS `status`,  \n" +
                "					`vuss`.`Terms ID` AS termsID,  \n" +
                "					`vuss`.`mfgCode` AS mfgCode,  \n" +
                "					vuss.partType,  \n" +
                "					vuss.isCancle,  \n" +
                "					vuss.mfgcodeID,  \n" +
                "					vuss.manufacturerName,  \n" +
                "					`vuss`.`serialNumber` AS serialNumber,  \n" +
                "					`vuss`.partCategory,  \n" +
                "					vuss.lineID,  \n" +
                "					`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "					ifnull(td.ishotjob,0) AS isBuildWiseHotJob ,  \n" +
                "					td.nextShipDate AS nextShipDate,  \n" +
                "					wo.WONumber AS workorders,  \n" +
                "					wo.WOIds AS workorderIds,  \n" +
                "					`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "					hutkit.refType AS refTypeKA,  \n" +
                "					hutkit.status AS haltStatusKA,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN 	hutkit.status = 'H' THEN  \n" +
                "									CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' ON ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutkit.startDate))  \n" +
                "							ELSE 	''  \n" +
                "						END  \n" +
                "					) AS reasonKA,  \n" +
                "					`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "					IFNULL(td.totalPOQty, 0) totalPOQty,  \n" +
                "					IFNULL(td.totalKitQty, 0) totalKitQty,  \n" +
                "					ka.shortagePer,  \n" +
                "					DATEDIFF(td.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "					kaad.perAssyBuildQty,  \n" +
                "					cassy.PIDCode AS assyPIDCode,  \n" +
                "					cassy.mfgPN AS assyMfgPN,  \n" +
                "					roassy.rohsIcon AS assyRohsIcon,  \n" +
                "					roassy.name assyRohsName,  \n" +
                "					cassy.isCustom AS assyIsCustomPart,  \n" +
                "					cassy.custAssyPN AS assyCustAssyPN,  \n" +
                "					cassy.nickName AS assyNickName,  \n" +
                "					cassy.mfgPNDescription AS assyPartDescription,  \n" +
                "					IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`PO Qty`,0) AS assyPOQty,  \n" +
                "					IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`mrpQty`,0) AS assyMRPQty,  \n" +
                "					IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`kitQty`,0) AS assyKitQty,  \n" +
                "					(COUNT(1) OVER (PARTITION BY kaad.refSalesOrderDetID) - 1) AS havingSubAssyCount,  \n" +
                "					(CASE WHEN kaad.bomAssyLevel = 0 THEN COUNT(1) OVER (PARTITION BY kaad.refSalesOrderDetID) - 1 ELSE 0 END) AS subAssyCount\",v_DynamicColumns, \"  \n" +
                "			FROM   vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "				INNER JOIN  component cassy ON kaad.partId = cassy.id AND cassy.isDeleted = 0 AND cassy.parttype IN (3,2)  \n" +
                "				LEFT JOIN  rfq_rohsmst roassy ON cassy.RoHSStatusID = roassy.id AND roassy.isDeleted = 0  \n" +
                "				LEFT JOIN (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "						FROM  salesorderdet s INNER JOIN component c ON s.partID =c.id  \n" +
                "						WHERE  s.isdeleted=0 AND c.parttype IN (3,2)) AS sa ON sa.id = vuss.refSODetID  \n" +
                "				LEFT JOIN (SELECT shippingid,Sdetid, qty, CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),'%m/%d/%y')) salesRelease  \n" +
                "						FROM salesshippingmst  b WHERE isdeleted = 0 ) AS sr ON sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "				LEFT JOIN (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "						FROM salesorder_otherexpense_details WHERE isdeleted = 0  \n" +
                "						GROUP BY refSalesOrderDetID ) AS so ON so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "				LEFT JOIN (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds, GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "						FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "						ON wsd.woID=w.woID WHERE  wsd.isdeleted = 0  \n" +
                "						GROUP BY wsd.salesOrderDetailID  \n" +
                "					) AS wo ON wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "				LEFT JOIN (  \n" +
                "					SELECT	salesOrderDetID,   IFNULL(subAssyID, refAssyId) AS partID,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToReturnCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "					FROM 	vu_release_plan_release_return_status_det  \n" +
                "					GROUP BY salesOrderDetID, partID  \n" +
                "			) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId AND vrr.partID = kaad.partId  \n" +
                "		LEFT JOIN (  \n" +
                "			SELECT 	t.salesOrderDetID,  \n" +
                "					IFNULL(t.subAssyID,t.refAssyId) As partID,  \n" +
                "                    SUM(kitReleaseQty) AS totalKitQty,  \n" +
                "                    SUM(poQty) AS totalPOQty,  \n" +
                "                    COUNT(1) totalPlan,  \n" +
                "                    MAX(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  AND  kitStatus!='R' then 1 else 0 end )  AS ishotjob,  \n" +
                "					MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "					MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "					SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "					SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "            FROM (  \n" +
                "				SELECT 	r.salesOrderDetID,  r.subAssyID, r.refAssyId, r.kitReleaseQty , r.poQty, r.kitStatus, r.kitReleaseDate  \n" +
                "				FROM 	vu_release_plan_detail r  \n" +
                "			) AS t  \n" +
                "			GROUP BY  t.salesOrderDetID, partID  \n" +
                "        ) AS td  ON td.salesOrderDetID = vuss.salesOrderDetailId AND td.partID = kaad.partId  \n" +
                "			LEFT JOIN 	(  \n" +
                "				SELECT 	refSalesOrderDetID, assyID, mainAssy,  \n" +
                "						(k.totalLine - k.totalNotRequireLine) AS totalLine,  \n" +
                "						k.shortageLine,  \n" +
                "						Round(k.allocPerComponent,2) allocPerComponent,  \n" +
                "						Round(k.allocPerWithSubAssy,2) allocPerWithSubAssy,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS shortagePer  \n" +
                "				FROM  \n" +
                "					(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
                "							COUNT(1) AS `totalLine`,  \n" +
                "							SUM( k.shortageline) shortageline,  \n" +
                "							SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "							(CASE WHEN assyID = mainAssy THEN  \n" +
                "								MIN(mainAssyPerForSubAssy)  /* Main Assembly Case */  \n" +
                "							ELSE /* Sub Assembly Case */  \n" +
                "								0 END) AS allocPerWithSubAssy,  \n" +
                "							(CASE WHEN assyID = mainAssy THEN  \n" +
                "								MIN(mainAssyPerForComponent)  /* Main Assembly Case */  \n" +
                "							ELSE /* Sub Assembly Case */  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) END) AS allocPerComponent  \n" +
                "					FROM  \n" +
                "						(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
                "								k.qpaWithDnp, k.allocationPer, k.isNotRequiredKitAllocation,  k.allocatedPercePerLine, k.MainAssyLine, k.shortageline,  \n" +
                "								SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForSubAssy,  \n" +
                "								SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN k.MainAssyLine ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForComponent  \n" +
                "					 FROM  \n" +
                "							(SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "									vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "									IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "									(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "									(case when vk.assyid = sd.partid then vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "									vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "								FROM  	`vu_kit_allocation_detail` vk  \n" +
                "								INNER JOIN    salesorderdet sd ON vk.refSalesorderdetid  = sd.id  \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "							) AS k  \n" +
                "						) AS k GROUP bY assyID, refSalesorderdetid, mainAssy  \n" +
                "					) AS k  \n" +
                "				) AS ka ON ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` AND ka.mainAssy =  `vuss`.`PartID` AND ka.assyID = kaad.partId  \n" +
                "				LEFT JOIN  rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "				LEFT JOIN  holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId AND hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId AND htk.refType='KA' AND htk.isDeleted=0)  \n" +
                "				LEFT JOIN (SELECT ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) AS initialStockCount  \n" +
                "								FROM assemblystock ass WHERE ass.isDeleted =0 AND ass.type = 'OS'  \n" +
                "								GROUP BY ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID)  AS astk  \n" +
                "							ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` AND astk.refSalesOrderID = vuss.`Sales Order ID` AND astk.partID = kaad.partId  \n" +
                "				) AS a  \n" +
                "		) AS t  \n" +
                "    \");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY (nextReleaseDate IS NULL),  nextReleaseDate ASC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  #need to check once  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "       ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pIsSubAssembly = 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND isSubAssembly = 0 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSubAssemblyTab = 1) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND (CASE WHEN assyID = partID THEN subAssyCount > 0 ELSE 1= 1 END) \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetKitList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "   PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5835,'2.00','V1','User Story #39149 Improvement Point - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5835:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasPartsSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasPartsSearch`(  \n" +
                "	IN pGoodPart VARCHAR(100),  \n" +
                "	IN pSearch VARCHAR(500),  \n" +
                "	IN pId INT,  \n" +
                "	IN pMfgType VARCHAR(50),  \n" +
                "	IN pMfgCodeId INT,  \n" +
                "	IN pMountingType VARCHAR(50),  \n" +
                "	IN pMountingTypeId INT,  \n" +
                "	IN pCategoryID INT,  \n" +
                "	IN pRohsMainCategoryID INT,  \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
                "	IN pstrictCustomPart TINYINT,  \n" +
                "    IN pAlternatePartFilter TINYINT,  \n" +
                "    IN pPackagingAliasFilter TINYINT,  \n" +
                "    IN pRoHReplacementPartFilter TINYINT,  \n" +
                "    IN pDriveToolsPartFilter TINYINT,  \n" +
                "    IN pProcessMaterialPartFilter TINYINT,  \n" +
                "    IN pRequireMatingPartFilter TINYINT,  \n" +
                "    IN pPickupPadPartFilter TINYINT,  \n" +
                "    IN pRequireFunctionalPartFilter TINYINT,  \n" +
                "	IN pCurrentPartId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vRohsMainCategoryID INT;  \n" +
                "	DECLARE vPackaginggroupID INT;  \n" +
                "	SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
                "	/*===>this logic is added to compare invert rohs category*/  \n" +
                "	IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
                "		IF pRohsMainCategoryID = -1 THEN  \n" +
                "			SET vRohsMainCategoryID = -2;  \n" +
                "		ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
                "			SET vRohsMainCategoryID = -1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	/*<===this logic is added to compare invert rohs category*/  \n" +
                "	IF(pCurrentPartId is not null)  \n" +
                "	THEN  \n" +
                "		select packaginggroupID INTO vPackaginggroupID from component where id = pCurrentPartId;  \n" +
                "	END IF;  \n" +
                "	select *  \n" +
                "		from  \n" +
                "		(  \n" +
                "			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,					c.mfgPN orgMfgPN,			c.packaginggroupID,		c.PIDCode,  \n" +
                "					c.isGoodPart,				c.RoHSStatusID,						c.mfgcodeID,				c.mfgType,  				c.partType,				c.isCustom,  \n" +
                "					c.category,					c.functionalCategoryID,				c.mountingTypeID,			c.connecterTypeID ,			r.rohsIcon,				r.name AS rohsName  \n" +
                "			from component c  \n" +
                "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID  \n" +
                "            JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND  mt.name = IFNULL(pMountingType, mt.name)  \n" +
                "			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                "            AND 	c.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "            AND     (CASE WHEN pCurrentPartId is not null THEN c.id != pCurrentPartId  ELSE 1 = 1 END)  \n" +
                "		 	AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "			AND 	(CASE WHEN pstrictCustomPart = 0 THEN c.iscustom = 0 ELSE 1 = 1 END)  \n" +
                "            and 	(CASE WHEN pPackagingAliasFilter = 1 THEN  (not exists (select 1 from component_packagingalias cp where cp.componentID = c.id and cp.aliasgroupID = vPackaginggroupID and cp.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pAlternatePartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 1 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pPickupPadPartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 2 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pRequireFunctionalPartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 4 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pProcessMaterialPartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 5 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pRoHReplacementPartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 6 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pDriveToolsPartFilter = 1 THEN  (not exists (select 1 from component_drivetools cd where cd.isDeleted = 0 and cd.componentID = c.id and cd.refComponentID = pCurrentPartId )) ELSE 1= 1 END)  \n" +
                "            and ((pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND  \n" +
                "					(  \n" +
                "						c.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
                "						EXISTS( SELECT  1  \n" +
                "								FROM 	component_otherpn opn  \n" +
                "								WHERE 	opn.refcomponentid = c.id  \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
                "					)  \n" +
                "				) )  \n" +
                "		) AS a  \n" +
                "		/*WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND  \n" +
                "					(  \n" +
                "						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
                "						EXISTS( SELECT  1  \n" +
                "								FROM 	component_otherpn opn  \n" +
                "								WHERE 	opn.refcomponentid = a.id  \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
                "					)  \n" +
                "				)  \n" +
                "			)  */  \n" +
                "		ORDER BY mfgPN;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5836,'2.00','V1',' Bug 40415: Corrected part is not showing in Field for Incorrect Part at part details tab - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5836:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-12-2021 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsMFG TINYINT,  \n" +
                "    IN pMfgCodeIDs LONGTEXT,  \n" +
                "    IN pMfgCodeIdsForSupplierParts LONGTEXT,  \n" +
                "    IN pPackagingIDs LONGTEXT,  \n" +
                "    IN pPackageIDs LONGTEXT,  \n" +
                "    IN pPartStatusIDs LONGTEXT,  \n" +
                "    IN pMountingTypeIDs LONGTEXT,  \n" +
                "    IN pExternalMountingTypeValues LONGTEXT,  \n" +
                "    IN pFunctionalTypeIDs LONGTEXT,  \n" +
                "    IN pExternalFunctionalTypeValues LONGTEXT,  \n" +
                "    IN pAttributesSearchHeader LONGTEXT,  \n" +
                "    IN pAttributesSearch LONGTEXT,  \n" +
                "    IN pPackagingAlias TEXT,  \n" +
                "    IN pAlternatePart TEXT,  \n" +
                "    IN pRoHSAlternatePart TEXT,  \n" +
                "    IN pPartUsedInAssembly TEXT,  \n" +
                "    IN pMultiplePartNumbers LONGTEXT,  \n" +
                "    IN pStockQuantity TEXT,  \n" +
                "    IN pPartTypeIDs LONGTEXT,  \n" +
                "    IN pCertificateStandardsIds LONGTEXT,  \n" +
                "    IN pStandardsClassIds LONGTEXT,  \n" +
                "    IN pAssemblyIds LONGTEXT,  \n" +
                "    IN pAssemblyTypeIds LONGTEXT,  \n" +
                "    IN pRohsIds LONGTEXT,  \n" +
                "    IN pExternalRoHSStatusListValues LONGTEXT,  \n" +
                "    IN pOperationalAttributeIds LONGTEXT,  \n" +
                "    IN pAcceptableShippingCountryIds LONGTEXT,  \n" +
                "    IN pComponentOrdering TEXT,  \n" +
                "    IN pComponentUsageCriteria TEXT,  \n" +
                "    IN pIsRefreshMasterFilters TINYINT,  \n" +
                "    IN pFromDate DATE,  \n" +
                "    IN pToDate DATE,  \n" +
                "    IN pIsReversal TINYINT,  \n" +
                "    IN pIsCPN TINYINT,  \n" +
                "    IN pIsCustom TINYINT,  \n" +
                "    IN pIsBOMActivityStarted TINYINT,  \n" +
                "    IN pIsEcoDfmColumnVisible TINYINT,  \n" +
                "    IN pIsSearchFromHeader TINYINT,  \n" +
                "    IN pIsExportControl TINYINT,  \n" +
                "    IN pObsoleteDate DATE,  \n" +
                "    IN pIsOperatingTemperatureBlank TINYINT,  \n" +
                "    IN pFromCreatedOnDate DATE,  \n" +
                "    IN pToCreatedOnDate DATE,  \n" +
                "    IN pIsIdenticalMfrPN TINYINT,  \n" +
                "    IN pIsProductionPNEmpty TINYINT,  \n" +
                "    IN pDisapprovedSupplierIds LONGTEXT,  \n" +
                "	IN pIsExcludeIncorrectPart TINYINT,  \n" +
                "    IN pMultiplePartFilterFieldName VARCHAR(50),  \n" +
                "    IN pMultiplePartByUploadFileDetail LONGTEXT,  \n" +
                "    IN pIsRestrictUSEwithpermission TINYINT,  \n" +
                "    IN pIsRestrictPackagingUseWithpermission TINYINT,  \n" +
                "    IN pIsRestrictUsePermanently TINYINT,  \n" +
                "    IN pIsRestrictPackagingUsePermanently TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE attributeSearchString LONGTEXT;  \n" +
                "    DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "    DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "    DECLARE vPartUsedInAssemblyExists VARCHAR(20);  \n" +
                "    DECLARE vPartUsedInAssemblyAndOR VARCHAR(20);  \n" +
                "  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentSession datetime;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT fun_DatetimetoUTCDateTime() INTO vCurrentSession;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  SET @SQLStatement1=CONCAT(\"  \n" +
                "	SELECT co.id,co.imageURL,co.mfgPN,co.mfgcodeID,co.mfgPNDescription,co.packageQty,co.ltbDate,co.RoHSStatusID,co.PIDCode,co.custAssyPN, co.rev, co.liveVersion  \n" +
                ",co.leadTime,co.noOfPosition,co.mountingTypeID,co.partPackage,co.deviceMarking,co.minimum,co.mult,co.uomText,co.rohsText,co.dataSheetLink  \n" +
                ",co.eolDate,co.value,co.tolerance,co.minOperatingTemp,co.maxOperatingTemp,co.weight,co.length,co.width,co.height,co.saftyStock  \n" +
                ",co.specialNote,co.heightText,co.partStatusText,co.feature,co.functionalCategoryText,co.supplier,co.mountingTypeText,co.maxPriceLimit  \n" +
                ",co.selfLifeDays,co.isCustom,co.connecterTypeID,co.connectorTypeText,co.maxQtyonHand,co.noOfRows,co.powerRating,co.pitch,co.pitchMating  \n" +
                ",co.scrapRatePercentagePerBuild,co.plannedOverRunPercentagePerBuild,co.nickName,co.restrictUSEwithpermission,co.operatingTemp  \n" +
                ",co.sizeDimension,co.plannedValuePerBuild,co.scrapValuePerBuild,co.restrictUsePermanently,co.eau,co.pcbPerArray,co.isCPN,co.partType,co.category  \n" +
                ",co.shelfListDaysThresholdPercentage,co.color,co.businessRisk,co.grossWeight,co.packagingWeight,co.restrictPackagingUsePermanently  \n" +
                ",co.restrictPackagingUseWithpermission,co.reversalDate,co.serialNumber,co.isActivityStart,co.activityStartBy,co.activityStartAt  \n" +
                ",co.systemGenerated,co.purchasingComment,co.detailDescription,co.documentPath,co.obsoleteDate,co.epicorType,co.partStatus,co.packagingID,co.functionalCategoryID,co.partPackageID,co.isWaterSoluble,co.isNoClean  \n" +
                ",co.mfrNameText,co.isHazmatMaterial,co.rfqNumber,co.salesacctId,co.purchaseacctId,co.umidSPQ,co.internalReference,  fun_GetFormattedMfgCode(mf.mfgCode, mf.mfgName, \", vMfgCodeFormat ,\") as mfgCode,  \n" +
                " mf.isCustOrDisty, mf.mfgName as manufacturerName, mf.displayOrder mfgDisplayOrder,  \n" +
                "		(case when co.isGoodPart!=2 and mf.mfgType = 'MFG' then 1 else 0 end) as isCopyPart,  \n" +
                "		gc.name AS partStatusValue,  \n" +
                "        gc.displayOrder parStatusDisplayOrder,  \n" +
                "		mf.mfgType, co.isReceiveBulkItem \");  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "			null AliasMFGPN,  \n" +
                "			null AliasMFGCode,  \n" +
                "			null AliasMFGCodeID,  \n" +
                "			null AliascompID,  \n" +
                "			null AliasMFGName,  \n" +
                "            null AliasMFGDisplayOrder\");  \n" +
                "    ELSE  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		/*(case when (mf.mfgType = 'DIST' and co.refSupplierMfgpnComponentID is not null) then (select MFGPN from component vu_co where vu_co.id = co.refSupplierMfgpnComponentID limit 1) else null end) AliasMFGPN,*/  \n" +
                "         vu_co.MFGPN AliasMFGPN,  \n" +
                "          fun_GetFormattedMfgCode(mfc.mfgCode, mfc.mfgName,\", vMfgCodeFormat ,\") as AliasMFGCode,  \n" +
                "        mfc.id AliasMFGCodeID,  \n" +
                "	    co.refSupplierMfgpnComponentID AliascompID,  \n" +
                "        mfc.mfgName as AliasMFGName,  \n" +
                "        mfc.displayOrder AliasMFGDisplayOrder \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		ro.name AS `rohsComplientConvertedValue`,  \n" +
                "        ro.displayOrder rohsDisplayOrder,  \n" +
                "		ro.rohsIcon AS `rohsIcon`,  \n" +
                "        `co`.`isGoodPart`,  \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 1) THEN 'Correct Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 2) THEN 'Incorrect Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 3) THEN 'TBD Part'  \n" +
                "					ELSE '' END) AS `isGoodPartValue`,  \n" +
                "		case when co.isCustom = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCustomValue,  \n" +
                "		case when co.isCPN = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCPNValue,  \n" +
                "		pt.partTypeName functionalCategoryName,  \n" +
                "        pt.displayOrder functionalCategoryDisplayOrder,  \n" +
                "		mt.name mountingTypeName,  \n" +
                "        mt.displayOrder mountingTypeDisplayOrder,  \n" +
                "		pc.categoryName,  \n" +
                "		rct.name connecterTypeName,  \n" +
                "		u.unitName,  \n" +
                "		CONCAT(cmsl.levelRating,' (', cmsl.time,')') mslName,  \n" +
                "		pck.name packagingName,  \n" +
                "        pck.displayOrder packagingDisplayOrder,  \n" +
                "			(CASE WHEN (`co`.`isReversal` = 1) THEN 'Yes'  \n" +
                "					ELSE 'No' END) AS `reversalPart`,  \n" +
                "			(CASE WHEN (`co`.`isEpoxyMount` = 1) THEN 'Yes'  \n" +
                "					ELSE 'No' END) AS `isEpoxyMount`,  \n" +
                "		ifnull(vucomstd.isExportControl, 'No') as isExportControl,  \n" +
                "        IFNULL(vuempcre.initialName,co.createdBy) as createdbyValue,  \n" +
                "		IFNULL(vuempupd.initialName ,co.updatedBy)as updatedbyValue,  \n" +
                "		rc.name as createdbyRoleValue,  \n" +
                "		ru.name as updatedbyRoleValue,  \n" +
                "        co.createdAt,  \n" +
                " 		co.updatedAt,  \n" +
                "        co.updatedAtApi,  \n" +
                "		(CASE WHEN (co.systemGenerated = 0) THEN 'No'  \n" +
                "		WHEN (co.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,  \n" +
                "        pct.name packageCaseTypeValue,  \n" +
                "        concat(pt.partTypeName,' - ',mt.name) groupName,  \n" +
                "		case when co.category = 3 then  \n" +
                "			fun_getSamplePicturesUploadCount(co.id)  \n" +
                "		end uploadedSamplePicturesCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.count  \n" +
                "		end assemblyCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			 vurline.lineCount  \n" +
                "		end bomLineCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.quoteProgress  \n" +
                "		end quoteProgress,  \n" +
                "		CASE when co.category = 3 then  \n" +
                "		 	vurfass.id  \n" +
                "		END rfqAssyID,  \n" +
                "		concat(usr.firstName, ' ', usr.lastName) activityStartedByUserName,  \n" +
                "		case when co.isActivityStart=true then  \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt,'\",vCurrentSession,\"')  \n" +
                "			else null end activityStartTime,  \n" +
                "		rat.name assemblyTypeName,  \n" +
                "		CASE when co.frequency = 1 then  \n" +
                "		 	'Every' when    co.frequency = 2 then  \n" +
                "		 	'First' when  co.frequency = 3 then  \n" +
                "		 	'Last' else ''  \n" +
                "		END frequencyName,  \n" +
                "        CASE WHEN co.isWaterSoluble = 0 THEN 'NO' ELSE 'YES' END isWaterSolubleConvertedValue ,  \n" +
                "        CASE WHEN co.isNoClean = 0 THEN 'NO' ELSE 'YES' END isNoCleanConvertedValue,  \n" +
                "        fun_getHazmateValue(co.isHazmatMaterial) as isHazmatMaterialValue,  \n" +
                "        CASE WHEN co.isReceiveBulkItem = 0 THEN 'NO' ELSE 'YES' END isReceiveBulkConvertedValue,  \n" +
                "        CONCAT('(',am.`acct_code`,') ',am.`acct_name`) AS SalesCOA,  \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS PurchaseCOA,  \n" +
                "        vucomstd.certificatelist,  \n" +
                "        vusac.subAssemblyCount\");  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') OR pComponentOrdering = 'STOCK' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentStock(co.id) partStock \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partStock \");  \n" +
                "	END IF;  \n" +
                "    IF pComponentOrdering = 'USAGE' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentUsage(co.id,'\",pFromDate,\"','\",pToDate,\"','\",pComponentUsageCriteria,\"') partUsage \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partUsage \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsEcoDfmColumnVisible = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , (select count(1)  \n" +
                "													  from eco_request ec  \n" +
                "													 where ec.isdeleted = 0  \n" +
                "													   and ec.finalstatus = 'P'  \n" +
                "													   and ec.fromPartID = co.id) activeEcoDfmCount \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null activeEcoDfmCount \");  \n" +
                "	END IF;  \n" +
                "	IF (pFromCreatedOnDate IS NOT NULL OR pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , CAST(fun_CovnertDateTimeByTimezoneValue(co.createdAt,'\",vTimeZone,\"') AS DATE) createdAtFilter \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , count(1) over(partition by co.mfgPN,mf.mfgType) identicalPNCount \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
                "	FROM component co  \n" +
                "		JOIN rfq_partcategory pc ON pc.id = co.partType  \n" +
                " 		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id  \n" +
                " 		JOIN component_partstatusmst gc ON gc.id = co.partStatus  \n" +
                " 		JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id  \n" +
                " 		JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID  \n" +
                " 		JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID  \n" +
                " 		LEFT JOIN rfq_connectertypemst rct ON rct.id = co.connecterTypeID  \n" +
                " 		JOIN uoms u ON u.id = co.uom  \n" +
                " 		LEFT JOIN component_mslmst cmsl ON cmsl.id = co.mslID  \n" +
                "		left join rfq_packagecasetypemst pct ON pct.id = co.partPackageID  \n" +
                "        LEFT JOIN users usr ON usr.id = co.activityStartBy  \n" +
                "        left join rfq_assy_typemst rat ON rat.id = co.assemblyType  \n" +
                " 		LEFT JOIN component_packagingmst pck ON pck.id = co.packagingID  \n" +
                "        LEFT JOIN acct_acctmst am ON am.acct_id = co.salesacctId  \n" +
                "        LEFT JOIN acct_acctmst aam ON aam.acct_id = co.purchaseacctId  \n" +
                "		left JOIN vu_component_standard vucomstd ON vucomstd.componentID = co.id  \n" +
                "        left JOIN vu_emp_detail vuempcre ON vuempcre.id = co.createdBy  \n" +
                "        left JOIN vu_emp_detail vuempupd ON vuempupd.id = co.updatedBy  \n" +
                "        left JOIN roles rc ON rc.id = co.createByRoleId  \n" +
                "        left JOIN roles ru ON ru.id = co.updateByRoleId  \n" +
                "        left join vu_rfq_assembly_detail vurfass on vurfass.partId = co.id  \n" +
                "        left join vu_rfq_lineitem_count vurline on vurline.partId = co.id  \n" +
                "        left join vu_sub_assembly_count vusac on vusac.partId = co.id\");  \n" +
                "    IF pIsMFG = FALSE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "			JOIN mfgcodemst mfc ON mfc.id = co.refMfgPNMfgCodeId  \n" +
                "            JOIN COMPONENT vu_co on vu_co.id = co.refSupplierMfgpnComponentID \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "    WHERE co.isdeleted = 0 \");  \n" +
                "  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''MFG'' ');  \n" +
                "    ELSE  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''DIST'' ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pMultiplePartFilterFieldName is not null AND pMultiplePartByUploadFileDetail IS NOT NULL AND pMultiplePartByUploadFileDetail != '')  \n" +
                "    THEN  \n" +
                "		if(pMultiplePartFilterFieldName = 'SystemID')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.serialNumber IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSEif(pMultiplePartFilterFieldName = 'PID Code')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.PIDCode IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgPN IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		IF pComponentOrdering = 'MFG' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"MFGCode asc, \" , pOrderBy);  \n" +
                "            END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'MFGPN' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"mfgPN asc, \" , pOrderBy);  \n" +
                "			END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'USAGE' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partUsage desc, \" , pOrderBy);  \n" +
                "		ELSEIF pComponentOrdering = 'STOCK' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partStock desc, \" , pOrderBy);  \n" +
                "		END IF;  \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgcodeID in (', pMfgCodeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMfgCodeIdsForSupplierParts IS NOT NULL AND pMfgCodeIdsForSupplierParts != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.refMfgPNMfgCodeId in (', pMfgCodeIdsForSupplierParts, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packagingID in (', pPackagingIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackageIDs IS NOT NULL AND pPackageIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partPackageID in (', pPackageIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partStatus in (', pPartStatusIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeID in (', pMountingTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalMountingTypeValues IS NOT NULL AND pExternalMountingTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeText in (', pExternalMountingTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryID in (', pFunctionalTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalFunctionalTypeValues IS NOT NULL AND pExternalFunctionalTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryText in (', pExternalFunctionalTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMultiplePartNumbers IS NOT NULL AND pMultiplePartNumbers != '') THEN  \n" +
                "		IF pIsMFG = TRUE THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "																)');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "																and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                and cc.mfgpn in (', pMultiplePartNumbers, '))  \n" +
                "                                                                OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "                                                                )');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "    IF (pPartTypeIDs IS NOT NULL AND pPartTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partType in (', pPartTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '' AND  \n" +
                "		pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' ) and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "	ELSEIF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' )) ');  \n" +
                "	ELSEIF (pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyIds IS NOT NULL AND pAssemblyIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and rl.partID in (', pAssemblyIds, '))) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyTypeIds IS NOT NULL AND pAssemblyTypeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.assemblyType in (', pAssemblyTypeIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pRohsIds IS NOT NULL AND pRohsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.RoHSStatusID in (', pRohsIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pExternalRoHSStatusListValues IS NOT NULL AND pExternalRoHSStatusListValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsText in (', pExternalRoHSStatusListValues, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsReversal = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isReversal = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsCPN = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isCPN = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsCustom = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isCustom = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsBOMActivityStarted = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isActivityStart = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsOperatingTemperatureBlank = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.operatingTemp is not null and co.operatingTemp != \"\" and (co.minOperatingTemp is null or co.maxOperatingTemp is null) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pObsoleteDate IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, \" AND co.obsoleteDate >= '\",pObsoleteDate,\"'\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsProductionPNEmpty = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.productionPN is null ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pToCreatedOnDate IS NOT NULL AND pFromCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND identicalPNCount > 1 ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pOperationalAttributeIds IS NOT NULL AND pOperationalAttributeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_dynamic_attribute_mapping_part cd  \n" +
                "													   where cd.mfgPNID=co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.attributeID in (',pOperationalAttributeIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pDisapprovedSupplierIds IS NOT NULL AND pDisapprovedSupplierIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_approved_supplier_mst cd  \n" +
                "													   where cd.partID = co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.supplierID in (',pDisapprovedSupplierIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAcceptableShippingCountryIds IS NOT NULL AND pAcceptableShippingCountryIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_acceptable_shipping_countries ca  \n" +
                "														  where ca.isdeleted = false  \n" +
                "															and ca.deletedat is null  \n" +
                "															and ca.refComponentID = co.id  \n" +
                "															and ca.countryID in (',pAcceptableShippingCountryIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pIsRestrictUSEwithpermission = TRUE OR pIsRestrictPackagingUseWithpermission = true OR pIsRestrictUsePermanently = true OR pIsRestrictPackagingUsePermanently = true)  \n" +
                "    THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (');  \n" +
                "        set @restricStatement = '';  \n" +
                "		IF pIsRestrictUSEwithpermission = TRUE THEN  \n" +
                "			SET @restricStatement =  ' co.restrictUSEwithpermission = true ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF pIsRestrictPackagingUseWithpermission = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUseWithpermission = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END),  ' co.restrictUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictPackagingUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "        SET @SQLStatement1 = CONCAT(@SQLStatement1, @restricStatement, ')');  \n" +
                "    END IF;  \n" +
                "	IF (pAttributesSearchHeader IS NOT NULL AND pAttributesSearchHeader != '') THEN  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.minOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.maxOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientValue like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfPosition like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfRows like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.length like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.width like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.height like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', pAttributesSearchHeader, '%'' )) ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc  \n" +
                "																			where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "                                                                            and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                            and cc.mfgPN like ''%', pAttributesSearchHeader, '%'' )  \n" +
                "														      OR exists (select 1 from component_otherpn cp where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.refSupplierMfgpnComponentID and cp.name like (''%', pAttributesSearchHeader, '%'' ))  \n" +
                "																		');  \n" +
                "          END IF;  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN  \n" +
                "		SET attributeSearchString = pAttributesSearch;  \n" +
                "       do_this:  \n" +
                "	  LOOP  \n" +
                "		SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "		SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, ',', 1);  \n" +
                "		SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "		SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+2), attributeSearchLength);  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND  isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.minOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.maxOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.temperatureCoefficientValue)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfPosition)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfRows)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.length)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.width)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.height)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ) ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' )');  \n" +
                "          /*IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID and cc.mfgPN like ''%', attributeSearchChip, '%'' )');  \n" +
                "          END IF;  */  \n" +
                "		IF attributeSearchString = NULL OR attributeSearchString = \"\" THEN  \n" +
                "		  LEAVE do_this;  \n" +
                "		END IF;  \n" +
                "	  END LOOP do_this;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pPackagingAlias IS NOT NULL AND pPackagingAlias != '') THEN  \n" +
                "		IF (pPackagingAlias = '1') THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is not null ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is null ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "		IF (pAlternatePart IS NOT NULL AND pAlternatePart != '') THEN  \n" +
                "			IF (pAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
                "			END IF;  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 1 and ca.isDeleted = 0) ');  \n" +
                "		END IF;  \n" +
                "		IF (pRoHSAlternatePart IS NOT NULL AND pRoHSAlternatePart != '') THEN  \n" +
                "			IF (pRoHSAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
                "			END IF;  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 6 and ca.isDeleted = 0) ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF (pPartUsedInAssembly IS NOT NULL AND pPartUsedInAssembly != '') THEN  \n" +
                "			SET vPartUsedInAssemblyExists = \" \";  \n" +
                "            SET vPartUsedInAssemblyAndOR = \" \";  \n" +
                "			IF (pPartUsedInAssembly = '1') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" OR \";  \n" +
                "			ELSEIF (pPartUsedInAssembly = '2') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" NOT \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" AND \";  \n" +
                "            END IF;  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, 'AND co.category = 2  \n" +
                "															AND ( ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and exists (select 1 from component c where c.id = rl.partid and c.partStatus = 1))) ');  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.partStock >= \", pStockQuantity);  \n" +
                "	END IF;  \n" +
                "   IF pIsExportControl = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,' ',' and c.isExportControl = \"Yes\" ');  \n" +
                "   END IF;  \n" +
                "	IF pIsExcludeIncorrectPart = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isGoodPart in (1,3) ');  \n" +
                "	END IF;  \n" +
                "    DROP temporary TABLE IF EXISTS tempComponentListData;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"create temporary table tempComponentListData  \n" +
                "    select count(1) over(partition by c.mfgType) as totalCount,c.*,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,  \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.updatedAtApi,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtApiValue  \n" +
                "									from ( \", @SQLStatement1,\" ) c  \n" +
                "		where \", pWhereClause , \" \", pOrderBy , rowNumWhere);  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  /* to get total count of rows */  \n" +
                "	-- SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where \", pWhereClause);  \n" +
                "    SET @SQLStatement2 = CONCAT(\" SELECT totalCount from tempComponentListData limit 1\");  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	/*PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" select * from tempComponentListData\");  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "	IF pIsRefreshMasterFilters = TRUE THEN  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT mfgCodeID as mfgcodeID, mfgCode, manufacturerName as mfgName, mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID  \n" +
                "										from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\"  \n" +
                "                                        group by mfgCodeID, mfgCode, manufacturerName , mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID\");  \n" +
                "		 PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" with cte as ( SELECT id from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\" )  \n" +
                "									select * from  \n" +
                "										(select case when stdc.classID is not null then  \n" +
                "													concat(cs.certificateStandardID,':',stdc.classID)  \n" +
                "													else cs.certificateStandardID end certificateStandardID,  \n" +
                "												case when stdc.classID is not null then  \n" +
                "													concat(cs.fullName,' ',stdc.classname)  \n" +
                "													else cs.fullName end fullName,  \n" +
                "												cs.displayOrder  \n" +
                "										  from certificate_standards cs  \n" +
                "										  join component_standard_details csd on csd.certificateStandardID = cs.certificateStandardID  \n" +
                "										  left join standard_class stdc on csd.ClassID = stdc.classID  \n" +
                "										where csd.isDeleted = 0 and csd.deletedAt is null and csd.componentID in (select id from cte)  \n" +
                "										) a group by certificateStandardID, fullName, displayOrder  \n" +
                "										order by displayOrder,fullName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" select distinct cm.countryID, cm.countryName  \n" +
                "					  from component_acceptable_shipping_countries casc  \n" +
                "					  join countrymst cm ON cm.countryid = casc.countryid  \n" +
                "					 where casc.isdeleted = false  \n" +
                "					   and casc.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "									where c.id = casc.refComponentID and \", pWhereClause,\" )  \n" +
                "                                    order by cm.countryName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "         /*SET @SQLStatement2 = CONCAT(\" select distinct cda.id, cda.attributeName  \n" +
                "					  from component_dynamic_attribute_mapping_part cdam  \n" +
                "					  join component_dynamic_attribute cda ON cda.id = cdam.attributeID  \n" +
                "					 where cdam.isdeleted = false  \n" +
                "					   and cdam.deletedat is null  \n" +
                "					   and cda.isdeleted = false  \n" +
                "					   and cda.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "                                     where c.id = cdam.mfgPNID and \", pWhereClause,\" )  \n" +
                "                                     order by cda.attributeName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "    END IF;  \n" +
                "  \n" +
                "		IF (pIsSearchFromHeader = TRUE) THEN  \n" +
                "			/*Fetch Functional Type and Mounting Type wise grouping*/  \n" +
                "			SET @SQLStatement2 = CONCAT(\" select concat(functionalCategoryName,' - ',mountingTypeName) groupName,  \n" +
                "											null groupNameText,  \n" +
                "											functionalCategoryID, mountingTypeID,  \n" +
                "											count(1) recCount  \n" +
                "											from ( \",@SQLStatement1,\" ) c where \", pWhereClause,  \n" +
                "										' group by functionalCategoryName,mountingTypeName,  \n" +
                "													functionalCategoryID, mountingTypeID  \n" +
                "											order by groupName, groupNameText, recCount desc');  \n" +
                "  \n" +
                "            PREPARE query3 FROM @SQLStatement2;  \n" +
                "			EXECUTE query3;  \n" +
                "			DEALLOCATE PREPARE query3;  \n" +
                "        END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5837,'2.00','V1',' Bug 40415: Corrected part is not showing in Field for Incorrect Part at part details tab - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5837:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveCustAllRefundSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustAllRefundSummaryList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pCustomerIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "	IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "	IN pRefundSubStatusIDs VARCHAR(16383),  \n" +
                "	IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(1000),  \n" +
                "	IN pPaymentCMNumber VARCHAR(1000),  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pExactRefundAmountSearch TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pFromCMPaymentDate DATE,  \n" +
                "	IN pToCMPaymentDate DATE,  \n" +
                "	IN pRefPaymentMode VARCHAR(10),  \n" +
                "	IN pTransModeType INT,  \n" +
                "	IN pIsIncludeVoidedTransaction TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_CMPaymentWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_PaymentDateCon VARCHAR(1000);  \n" +
                "	DECLARE v_CMDateCon VARCHAR(1000);  \n" +
                "	DECLARE v_CMPaymentDateWhereClause VARCHAR(1000);  \n" +
                "	DECLARE v_IsIncludeVoidedTransWhereClause VARCHAR(100);  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "        SET v_CMDateCon = '';  \n" +
                "        SET v_PaymentDateCon = '';  \n" +
                "        SET v_CMPaymentDateWhereClause = '';  \n" +
                "        SET v_IsIncludeVoidedTransWhereClause = '';  \n" +
                "  \n" +
                "  \n" +
                "        IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pCustomerIDs IS NOT NULL AND pCustomerIDs != '' ) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pCustomerIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF (pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pRefundSubStatusIDs IS NOT NULL AND pRefundSubStatusIDs != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND subStatus in (',pRefundSubStatusIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pPaymentCMNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET (\"',pPaymentCMNumber,'\",c.paymentCMNumWithOutIDList) ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND totalRefundIssuedAmount ',CASE WHEN pExactRefundAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" AND refundDate <= \"',pToDate,'\" ');  \n" +
                "	ELSEIF(pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate >= \"',pFromDate,'\" ');  \n" +
                "	ELSEIF(pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refundDate <= \"',pToDate,'\" ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pFromCMPaymentDate IS NOT NULL OR pToCMPaymentDate IS NOT NULL) THEN  \n" +
                "  \n" +
                "		IF (pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NOT NULL) THEN  \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "		ELSEIF(pFromCMPaymentDate IS NOT NULL AND pToCMPaymentDate IS NULL) THEN  \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate >= \"',pFromCMPaymentDate,'\" ');  \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate >= \"',pFromCMPaymentDate,'\" ');  \n" +
                "		ELSEIF(pToCMPaymentDate IS NOT NULL AND pFromCMPaymentDate IS NULL) THEN  \n" +
                "			SET v_PaymentDateCon = CONCAT(' AND pipdt.paymentDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "			SET v_CMDateCon = CONCAT(' AND cpsdt.creditMemoDate <= \"',pToCMPaymentDate,'\" ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		SET v_CMPaymentDateWhereClause = CONCAT('  \n" +
                "			AND  \n" +
                "			(  \n" +
                "				EXISTS(  \n" +
                "					SELECT  1  \n" +
                "					FROM packingslip_invoice_payment_det pipddt  \n" +
                "						JOIN packingslip_invoice_payment pipdt ON pipddt.refRefundPaymentID = pipdt.id AND pipdt.isDeleted = 0  \n" +
                "					WHERE pipddt.refPayementid = psip.id  \n" +
                "					',v_PaymentDateCon,'  \n" +
                "					AND pipddt.isDeleted=0  \n" +
                "				 )  \n" +
                "				 OR  \n" +
                "				 EXISTS(  \n" +
                "					SELECT  1  \n" +
                "					FROM packingslip_invoice_payment_det pipddt  \n" +
                "						JOIN customer_packingslip cpsdt ON pipddt.refRefundCustCreditMemoID = cpsdt.id AND cpsdt.isDeleted = 0  \n" +
                "					WHERE pipddt.refPayementid = psip.id  \n" +
                "					',v_CMDateCon,'  \n" +
                "					AND pipddt.isDeleted=0  \n" +
                "				 )  \n" +
                "			)  \n" +
                "  \n" +
                "		');  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pIsIncludeVoidedTransaction = 0) THEN  \n" +
                "		SET v_IsIncludeVoidedTransWhereClause = CONCAT(v_IsIncludeVoidedTransWhereClause, ' AND psip.isPaymentVoided = 0 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveCustomerRefundDetails = CONCAT(\"  \n" +
                "		SELECT  psip.id,  \n" +
                "			psip.mfgcodeID ,  \n" +
                "			fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, '\",v_mfgNameFormat,\"') customerCodeName,  \n" +
                "			psip.isPaymentVoided,  psip.voidPaymentReason,  \n" +
                "			psip.agreedRefundAmt AS agreedRefundAmount ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided = 0 THEN 'No' ELSE 'Yes' END) AS isPaymentVoidedBooleanConverted,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"')  \n" +
                "									ELSE NULL END) AS voidedAt,  \n" +
                "			psip.bankName,  \n" +
                "			psip.bankAccountNo,  \n" +
                "			psip.paymentType,  \n" +
                "			psip.bankAccountMasID,  \n" +
                "			psip.systemId ,  \n" +
                "			psip.paymentDate AS refundDate,  \n" +
                "			psip.paymentAmount,  \n" +
                "			psip.accountReference,  \n" +
                "			psip.remark,  \n" +
                "			psip.paymentNumber,  \n" +
                "			gc.gencCategoryName paymentMethod,  \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMList  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentList  \n" +
                "				ELSE NULL END) AS paymentCMList ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.CMNumWithOutIDList  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumWithOutIDListList  \n" +
                "				ELSE NULL END) AS paymentCMNumWithOutIDList ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.totDetLevelSelectedCMCount  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.totDetLevelSelectedPaymentCount  \n" +
                "				ELSE NULL END) AS totDetLevelSelectedPaymentCMCount ,  \n" +
                "			(SELECT COUNT(1) FROM genericfiles WHERE gencFileOwnerType = 'cust_payment_CM_Refund'  \n" +
                "			AND refTransID = psip.id  AND entityID IS NULL AND isDeleted = 0 AND isRecycle = 0) AS totalDocuments ,  \n" +
                "			psip.offsetAmount ,  \n" +
                "			psip.refGencTransModeID , gtmm.modeName,  \n" +
                "			IFNULL(psip.paymentAmount,0) AS totalRefundIssuedAmount,  \n" +
                "			psip.status , psip.subStatus ,  \n" +
                "			(CASE WHEN psip.subStatus = 1 THEN 'Draft' WHEN psip.subStatus = 2 THEN 'Published'  \n" +
                "				WHEN psip.subStatus = 3 THEN 'Ready to Print Check' WHEN psip.subStatus = 4 THEN 'Refunded'  \n" +
                "				ELSE '' END) AS refundSubStatusText,  \n" +
                "			(CASE WHEN psip.subStatus = 1 THEN 'Pending' WHEN psip.subStatus = 2 THEN 'Approved to Refund'  \n" +
                "				WHEN psip.subStatus = 3 THEN 'Approved To Pay' WHEN psip.subStatus = 4 THEN 'Paid'  \n" +
                "				ELSE '' END) AS refundSubStatusLogicalText,  \n" +
                "			psip.isMarkAsPaid,  \n" +
                "			(CASE WHEN psip.isMarkAsPaid = 0 THEN 'No'  WHEN psip.isMarkAsPaid = 1 THEN 'Yes'  \n" +
                "				ELSE 'Not Applicable' END) AS isMarkAsPaidBooleanConverted,  \n" +
                "			psip.lockStatus,  \n" +
                "			(CASE WHEN psip.lockStatus = 'LC' THEN 1 ELSE 0 END) AS isTransLocked,  \n" +
                "			(CASE WHEN psip.lockStatus = 'LC' THEN 'Yes' ELSE 'No' END) AS isTransLockedConvertedValue,  \n" +
                "			(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "				WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "			psip.billToName , psip.billToAddress , psip.billToContactPerson ,  \n" +
                "			fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "			fun_getUserNameByID(psip.createdBy) createdby,  \n" +
                "			fun_getUserNameByID(psip.updatedBy) updatedby,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getRoleByID(psip.updateByRoleId) updatedbyRole,  \n" +
                "			fun_getRoleByID(psip.createByRoleId) createdbyRole  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		     JOIN mfgcodemst mcm ON mcm.id = psip.mfgcodeID AND mcm.isDeleted = 0  \n" +
                "		     JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "		     JOIN `generic_transmode_mst` gtmm ON psip.refGencTransModeID = gtmm.id AND gtmm.isDeleted = 0  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber, '#####',psipt.id SEPARATOR '@@@@@') paymentList ,  \n" +
                "						GROUP_CONCAT(psipt.paymentNumber) paymentNumWithOutIDListList ,  \n" +
                "						COUNT(1) AS totDetLevelSelectedPaymentCount  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.creditMemoNumber, '#####',cps.id SEPARATOR '@@@@@') CMList ,  \n" +
                "						GROUP_CONCAT(cps.creditMemoNumber) CMNumWithOutIDList ,  \n" +
                "						COUNT(1) AS totDetLevelSelectedCMCount  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		WHERE psip.refPaymentMode = 'CR'  \n" +
                "		AND refGencTransModeID IN (-6,-7,-8,-9,-10,-11)  \n" +
                "		\",v_CMPaymentDateWhereClause, v_IsIncludeVoidedTransWhereClause ,\"  \n" +
                "		AND psip.isDeleted = 0  \n" +
                "  \n" +
                "            \");  \n" +
                "  \n" +
                "      -- select @Sproc_RetrieveCustomerRefundDetails;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY id DESC \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "			/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveCustomerRefundDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	 -- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveCustomerRefundDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5838,'2.00','V1',' Sproc_RetrieveCustAllRefundSummaryList - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5838:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 18-01-2022 **************************** */
                "SELECT pageID INTO @pageID FROM page_detail WHERE pageName = 'Reason';  \n" +
                "INSERT INTO page_detail (pageName, RO, RW, pageRoute, pageURL, menuName, parentPageID, hasChild, iconClass, isActive, createdBy, isDeleted, isDisplay, displayMenuName, isAllowAsHomePage,isPopup, isHideFromMenuList, isReadOnlyDeveloped)  \n" +
                "VALUES ('Predefined Kit Release Comment', 0, 0, 'app.reason.kitreleasecomment', '/rfqsetting/reason/kitrelease/:reasonId', 'Predefined Kit Release Comment', @pageID, 0, 't-icons-release-comment', 1, 1, 0, 1, 'Predefined Kit Release Comment', 1, 0, 0, 0);  \n" +
                /* **************************** Add Script Version -> 18-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5839,'2.00','V1','Task 40394: Manage Predefined Message directive changes for release comment - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5839:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 18-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierAttributeTemplate`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierAttributeTemplate`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	SET @Sproc_RetrieveSupplierAttributeTemplate = CONCAT(\"  \n" +
                "            SELECT  \n" +
                "				s.id,  \n" +
                "                s.supplierID,  \n" +
                "                s.name,  \n" +
                "                m.id AS supplieID,  \n" +
                "                fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat ,\") AS supplier,  \n" +
                "				fun_getAttibutesBySupplierAttributeTemplateDetailID(s.id) AS attributesList,  \n" +
                "				fun_getUserNameByID(s.createdBy) createdby,  \n" +
                "				fun_getUserNameByID(s.updatedBy) updatedby,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "				fun_getRoleByID(s.createByRoleId) createdbyRole  \n" +
                "			FROM  \n" +
                "				supplier_attribute_template_mst s  \n" +
                "            LEFT JOIN mfgcodemst m ON s.supplierID = m.id AND m.isDeleted = 0  \n" +
                "            WHERE  \n" +
                "				s.isDeleted = 0\");  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id desc\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_RetrieveSupplierAttributeTemplate,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_RetrieveSupplierAttributeTemplate,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5840,'2.00','V1','Bug 40418: Supplier Attribute Template page Hyperlink missing/not working for Supplier- Code Refactor - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5840:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 18-01-2022 **************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pfilterPOStatus VARCHAR(20)  ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "    IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE v_mfrFormat INT;  \n" +
                "		DECLARE v_empFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
                "       s.salesOrderNumber,  \n" +
                "       s.poNumber,  \n" +
                "       s.poDate,  \n" +
                "       s.customerID,  \n" +
                "       s.contactPersonID,  \n" +
                "       s.billingAddressID,  \n" +
                "       s.shippingAddressID,  \n" +
                "       s.shippingMethodID,  \n" +
                "       s.revision,  \n" +
                "       s.shippingComment,  \n" +
                "       s.termsID,  \n" +
                "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
                "       CASE WHEN s.blanketPOOption=1 THEN 'Use This Blanket PO# for All Releases' WHEN s.blanketPOOption=2 THEN 'Link Future PO(s) to This Blanket PO' WHEN s.blanketPOOption=3 THEN 'Use Blanket PO# and Release# for All Releases' ELSE '' END blanketPOOptionText,  \n" +
                "       s.blanketPOOption,  \n" +
                "       s.status,  \n" +
                "       s.soDate,  \n" +
                "       s.revisionChangeNote,  \n" +
                "       s.salesCommissionTo,  \n" +
                "       s.intermediateShipmentId,  \n" +
                "       s.freeOnBoardId,  \n" +
                "       s.internalComment as internalCommentSo,  \n" +
                "       s.serialNumber,  \n" +
                "       s.carrierID,  \n" +
                "       s.carrierAccountNumber,  \n" +
                "       s.originalPODate,  \n" +
                "       s.isLegacyPO,  \n" +
                "       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
                "       s.isRmaPO,  \n" +
                "       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
                "       s.poRevision,  \n" +
                "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
                "       s.isBlanketPO,  \n" +
                "        fun_GetFormattedMfgCode(mg.mfgCode,mg.mfgName,\",v_mfrFormat,\") companyName,  \n" +
                "       mg.mfgName,  \n" +
                "       s.poRevisionDate,  \n" +
                "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
                "        s.linkToBlanketPO,  \n" +
                "        CASE WHEN s.linkToBlanketPO=1 THEN 'Yes' ELSE 'No' END linkToBlanketPOText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
                "       fb.name freeOnBoardName,  \n" +
                "       s.`rmaNumber` AS `rmaNumber`,  \n" +
                "	   s.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "	   (CASE WHEN (s.`isDebitedByCustomer` = 1) THEN 'Yes' ELSE 'No' END) AS `debitedByCustText`,  \n" +
                "       s.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "       s.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "		s.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "       (CASE  WHEN (s.`isReworkRequired` = 1) THEN 'Yes'  ELSE 'No'  END) AS `reworkReqText`,  \n" +
                "	   s.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "      ifnull(sodCnt.totalLineCount,0)  totalSOLines,  \n" +
                "       ifnull(sodCnt.completedLineCount,0) totalCompletedSOLines,  \n" +
                "       (case when sodCnt.totalLineCount is null then 0 else  Round((sodCnt.completedLineCount * 100/sodCnt.totalLineCount),2) end)soCompletionPercentage,  \n" +
                "      (case when sodCnt.canceledLineCount = ifnull(sodCnt.totalLineCount,0) then 'Canceled'  \n" +
                "			when (sodCnt.canceledLineCount + sodCnt.completedLineCount) = ifnull(sodCnt.totalLineCount,0)  then 'Completed'  \n" +
                "            else 'In Progress' end) salesOrderDetStatusConvertedValues,  \n" +
                "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
                "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
                "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
                "			fun_getAddressbyID(s.billingAddressID) billingAddressText,  \n" +
                "			fun_getAddressbyID(s.shippingAddressID) shippingAddressText,  \n" +
                "			fun_getAddressbyID(s.intermediateShipmentId) intermediateText,  \n" +
                "			fun_contactPersonDetailByID(s.billingContactPersonID) billToContactPerson,  \n" +
                "			fun_contactPersonDetailByID(s.shippingContactPersonID) shipToToContactPerson,  \n" +
                "			fun_contactPersonDetailByID(s.intermediateContactPersonID) markToToContactPerson,  \n" +
                "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
                "		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  ,  \n" +
                "               fun_GetEmployeeFormattedName(salecomm.firstName,salecomm.middleName,salecomm.lastName,salecomm.initialName,\",v_empFormat,\") salesCommName  \n" +
                "			FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
                "			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
                "            LEFT JOIN employees salecomm ON salecomm.id = s.salesCommissionTo and salecomm.isDeleted = 0  \n" +
                "			LEFT JOIN ( select sod.refSalesOrderID as soId ,  \n" +
                "							sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
                "							count(1) totalLineCount,  \n" +
                "                            sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
                "                            From salesorderdet sod where sod.isDeleted = 0  \n" +
                "                            Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = s.id  \n" +
                "			WHERE s.isdeleted=0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "                IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "		END IF;  \n" +
                "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "		END IF;  \n" +
                "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "			IF(psearchposotype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "			IF(psearchextPricetype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "        IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "		ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "		ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "  \n" +
                "			 EXECUTE query2;  \n" +
                "			 DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "  \n" +
                "			 EXECUTE query1;  \n" +
                "		       DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5841,'2.00','V1',' Alter Sproc_GetSalesOrderSummaryList-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5841:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "ALTER TABLE `contactperson` ADD COLUMN `title` VARCHAR(255);  \n" +
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "INSERT INTO `table_mapping_details`(`tabel_name`,`display_page_name`) VALUES ('employee_contactperson_emp', 'Personnel');  \n" +
                "INSERT INTO `table_mapping_details`(`tabel_name`,`display_page_name`) VALUES ('employee_contactperson_cp', 'Contact Person');  \n" +
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "CREATE TABLE `employee_contactperson` (  \n" +
                "  `id` int NOT NULL AUTO_INCREMENT,  \n" +
                "  `employeeId` int NOT NULL,  \n" +
                "  `contactPersonId` int NOT NULL,  \n" +
                "  `assignedAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `releasedAt` datetime DEFAULT NULL,  \n" +
                "  `isDeleted` tinyint NOT NULL DEFAULT '0',  \n" +
                "  `createdBy` varchar(255) NOT NULL,  \n" +
                "  `updatedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `deletedBy` varchar(255) DEFAULT NULL,  \n" +
                "  `createdAt` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `updatedAt` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
                "  `deletedAt` datetime DEFAULT NULL,  \n" +
                "  `createByRoleId` int DEFAULT NULL,  \n" +
                "  `updateByRoleId` int DEFAULT NULL,  \n" +
                "  `deleteByRoleId` int DEFAULT NULL,  \n" +
                "  `unqDate` datetime NOT NULL DEFAULT '2001-01-01 00:00:00',  \n" +
                "  PRIMARY KEY (`id`),  \n" +
                "  UNIQUE KEY `IDX_UNQ_repor_reportName` (`employeeId`,`contactPersonId`,`releasedAt`,`isDeleted`,`unqDate`),  \n" +
                "  KEY `FK_employee_contactperson_employeeId_idx` (`employeeId`),  \n" +
                "  KEY `FK_employee_contactperson_contactPersonId_idx` (`contactPersonId`),  \n" +
                "  CONSTRAINT `FK_employee_contactperson_employeeId` FOREIGN KEY (`employeeId`) REFERENCES `employees` (`id`),  \n" +
                "  CONSTRAINT `FK_employee_contactperson_contactPersonId` FOREIGN KEY (`contactPersonId`) REFERENCES `contactperson` (`personId`)  \n" +
                ");  \n" +
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "ALTER TABLE `employees` ADD COLUMN `isContactPersonRequired` TINYINT NOT NULL DEFAULT 0;  \n" +
                /* **************************** Add Script Version -> 18-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5842,'2.00','V1',' User Story 39811: Personnel: Allow to Add Alias (Contact Person) - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;

        case 5842:
            allDbChangesArray.push(
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_UNQDATE_employee_contactperson`;  \n" +
                "CREATE TRIGGER `TRG_UNQDATE_employee_contactperson` BEFORE UPDATE ON `employee_contactperson` FOR EACH ROW BEGIN  \n" +
                "		IF (OLD.isDeleted = 0  and NEW.isDeleted = 1) THEN  \n" +
                "				set NEW.unqDate = utc_timestamp();  \n" +
                "		END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "Drop procedure if Exists `Sproc_checkDelete_employees`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_employees`(  \n" +
                " IN tableName VARCHAR(255),  \n" +
                " IN IDs LONGTEXT,  \n" +
                " IN deletedBy INT,  \n" +
                " IN entityID VARCHAR(255),  \n" +
                " IN refrenceIDs LONGTEXT,  \n" +
                " IN countList INT,  \n" +
                " IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                " ROLLBACK;  \n" +
                " RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                " ROLLBACK;  \n" +
                " RESIGNAL;  \n" +
                "END;  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempEmp as  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM department d WHERE d.deletedAt IS NULL AND d.deptMngrID IN(',IDs,') LIMIT 1)  \n" +
                "	UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM employee_equipment d WHERE d.deletedAt IS NULL AND  d.employeeID IN(',IDs,') LIMIT 1)  \n" +
                "	UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"eco_request\" ELSE \"\" END AS msg FROM  eco_request er WHERE er.deletedAt IS NULL AND (er.finalStatusInit IN(',IDs,') OR er.initiateBy IN(',IDs,')) LIMIT 1)  \n" +
                "	UNION ALL  \n" +
                "		(SELECT  COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 THEN \"workorder_trans\" ELSE \"\" END AS msg FROM workorder_trans wt WHERE (wt.checkinEmployeeID IN(',IDs,') OR wt.checkoutEmployeeID IN(',IDs,')) LIMIT 1)  \n" +
                "	UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"operations\" ELSE \"\" END AS msg FROM  operation_employee oe WHERE oe.deletedAt IS NULL AND oe.employeeID IN(',IDs,') LIMIT 1)  \n" +
                "    UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.employeeID IN(',IDs,') LIMIT 1)  \n" +
                "	UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"department\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND departmentID IN(',IDs,') LIMIT 1)  \n" +
                "	UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employee_contactperson WHERE deletedAt IS NULL AND employeeId IN(',IDs,') LIMIT 1)  \n" +
                "          ');  \n" +
                "  PREPARE stmt FROM @SQL;  \n" +
                "  EXECUTE stmt;  \n" +
                "	IF(countList=FALSE) THEN  \n" +
                "	 IF(SELECT SUM(t.cnt) FROM tempEmp t)=0 THEN  \n" +
                "	   START TRANSACTION;  \n" +
                "  \n" +
                "	   SET @SQl1 = CONCAT('update employees set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in(',IDs,') and deletedAt is NULL');  \n" +
                "	   SET @SQl2 = CONCAT('update users set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where employeeID in(',IDs,') and deletedAt is NULL');  \n" +
                "	   SET @SQl3 = CONCAT('update subform_transaction set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where subFormTransID in(select refSubFormTransID FROM dataelement_transactionvalues WHERE refTransID IN (',IDs,')and entityID in(',entityID,') and deletedAt is NULL)');  \n" +
                "	   SET @SQl4 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refTransID in(',IDs,') and entityID in(',entityID,') and deletedAt IS NULL');  \n" +
                "	   SET @SQL5 = CONCAT('update employee_department set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where employeeID in(',IDs,') and deletedAt is NULL');  \n" +
                "	   SET @SQl6 = CONCAT('update user_configuration set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where userId in ( SELECT id FROM users WHERE employeeID in (',IDs,')) and deletedAt is NULL');  \n" +
                "  \n" +
                "	   PREPARE stmt1 FROM @SQL1;  \n" +
                "	   PREPARE stmt2 FROM @SQL2;  \n" +
                "	   PREPARE stmt3 FROM @SQL3;  \n" +
                "	   PREPARE stmt4 FROM @SQL4;  \n" +
                "	   PREPARE stmt5 FROM @SQL5;  \n" +
                "  \n" +
                "	   EXECUTE stmt1;  \n" +
                "	   EXECUTE stmt2;  \n" +
                "	   EXECUTE stmt3;  \n" +
                "	   EXECUTE stmt4;  \n" +
                "	   EXECUTE stmt5;  \n" +
                "  \n" +
                "		SELECT * FROM tempEmp WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "	  ELSE  \n" +
                "		SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempEmp t;  \n" +
                "	  END IF;  \n" +
                "	ELSE  \n" +
                "				  SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "									   FROM tempEmp t1  \n" +
                "										INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "										WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "										ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "   DROP temporary TABLE if exists tempEmp;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "Drop procedure if Exists `Sproc_checkDelete_contactperson`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_contactperson`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempContactperson as  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"contactperson\" else \"\" end as msg FROM employee_contactperson WHERE contactPersonId IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust\" else \"\" end as msg FROM packingslip_invoice_payment  WHERE (billToContactPersonID IN (',IDs,') OR payToContactPersonID IN (',IDs,')) AND refPaymentMode = \"CR\" AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"P\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_invoice\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"I\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_creditmemo\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"C\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE  (supplierContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_line_release_det WHERE shippingContactPersonID IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0 AND (custBillingContactPersonID IN (',IDs,') OR custShippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0 AND shippingContactPersonID IN (',IDs,') LIMIT 1)  \n" +
                "		');  \n" +
                "/*	  (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive\" else \"\" end as msg FROM packing_slip_material_receive WHERE isDeleted = 0 AND (billToConactPerson IN (',IDs,')  \n" +
                "			OR shipToContactPersonID IN (',IDs,') OR rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted = 0 AND (payToContactPersonID IN (',IDs,') OR billToContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE isDeleted = 0 AND (custBillingConactPersonID IN (',IDs,') OR custShippingConactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "  */  \n" +
                "  \n" +
                "  	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "  \n" +
                "  \n" +
                "    IF(countList=FALSE) THEN  \n" +
                "		IF(SELECT SUM(t.cnt) FROM tempContactperson t)=0 THEN  \n" +
                "			SET @SQl1 = CONCAT('update contactperson set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where personId in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			SELECT * FROM tempContactperson WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempContactperson t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "		FROM tempContactperson t1  \n" +
                "		INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "			WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "			ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE if exists tempContactperson;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "Drop function if exists `fun_GetContactPersonNameForAutocomplete`;  \n" +
                "CREATE FUNCTION `fun_GetContactPersonNameForAutocomplete`(  \n" +
                "    pCPFirstName VARCHAR(255),  \n" +
                "    pCPMiddleName VARCHAR(255),  \n" +
                "    pCPLastName VARCHAR(255),  \n" +
                "    ptitle VARCHAR(255),  \n" +
                "    pdepartment VARCHAR(255)  \n" +
                ") RETURNS varchar(1380) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vContPersonName VARCHAR(1380) DEFAULT '';  \n" +
                "		SELECT CONCAT(fun_GetFormattedContactPersonName(pCPFirstName,pCPMiddleName,pCPLastName),  \n" +
                "			CASE WHEN ptitle IS NOT NULL AND ptitle != '' THEN CONCAT (' | ', ptitle) ELSE '' END,  \n" +
                "			CASE WHEN pdepartment IS NOT NULL AND pdepartment != ''THEN CONCAT (' | ', pdepartment) ELSE '' END) INTO vContPersonName;  \n" +
                "  \n" +
                "	RETURN vContPersonName;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveEmployee`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveEmployee`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE vTimeZone VARCHAR(50);  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat ;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "  \n" +
                "  		SET @temp_Sproc_RetrieveEmployee = CONCAT(\"  \n" +
                "			SELECT  \n" +
                "				`Employee`.id,  \n" +
                "				`Employee`.firstName,  \n" +
                "				`Employee`.email,  \n" +
                "				`Employee`.contact,  \n" +
                "				`Employee`.burdenRate,  \n" +
                "				`Employee`.street1,  \n" +
                "				`Employee`.street2,  \n" +
                "				`Employee`.postcode,  \n" +
                "				`Employee`.city,  \n" +
                "				`Employee`.state,  \n" +
                "				`Employee`.countryID,  \n" +
                "				`Employee`.paymentMode,  \n" +
                "				`Employee`.isActive,  \n" +
                "				`Employee`.middleName,  \n" +
                "				`Employee`.lastName,  \n" +
                "				`Employee`.initialName,  \n" +
                "				`Employee`.visibleCode,  \n" +
                "				`Employee`.phExtension,  \n" +
                "				`Employee`.profileImg ,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName) contactPerson,  \n" +
                "				fun_GetEmployeeFormattedName(Employee.firstName, Employee.middleName, Employee.lastName, Employee.initialName, \",vEmployeeNameFormat,\" ) fullName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(ecp.assignedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') assignedAt,  \n" +
                "				fun_getUserNameByID(`Employee`.updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(`Employee`.createdBy) createdby,  \n" +
                "				fun_getRoleByID(`Employee`.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(`Employee`.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(`Employee`.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(`Employee`.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				`user`.`id` AS `userID`,  \n" +
                "				fun_getEmployeeInitialNameByEmpID (`Employee`.`managerID`) AS `managerEmployeeName`,  \n" +
                "				fun_getStatusByValue(`Employee`.`isActive`) AS `isActiveConvertedValue`,  \n" +
                "				fun_getEmployeeCertificationByEmpID(`Employee`.`id`) AS `empCertificationList`,  \n" +
                "				fun_getEmployeeResponsibilitByEmpID (`Employee`.`id`) AS employeeResponsibility  \n" +
                "			FROM `employees` AS `Employee`  \n" +
                "				INNER JOIN `users` AS `user` ON `Employee`.`id` = `user`.`employeeID` AND `user`.`isDeleted`=0  \n" +
                "				LEFT JOIN employee_contactperson AS ecp ON  ecp.employeeId = Employee.id and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "				LEFT JOIN contactperson cp ON cp.personId = ecp.contactPersonId and cp.isDeleted = 0  \n" +
                "			WHERE `Employee`.`isDeleted` = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY firstName ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveEmployee,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveEmployee,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "Drop procedure if Exists `Sproc_RetrieveEmployeeContactpersonList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveEmployeeContactpersonList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN ppersonId INT,  \n" +
                "    IN pempId INT  \n" +
                "   )  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255);  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "  \n" +
                "		IF ppersonId IS NOT NULL THEN  \n" +
                "			# Personnel  \n" +
                "			SET @temp_Sproc_RetrieveEmployeeContactpersonList = CONCAT(\"  \n" +
                "				select ecp.id, ecp.employeeId, ecp.contactPersonId,  \n" +
                "                    fun_ApplyCommonDateTimeFormatByParaValue(ecp.assignedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') assignedAtValue,  \n" +
                "				    fun_ApplyCommonDateTimeFormatByParaValue(ecp.releasedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') releasedAtValue,  \n" +
                "					fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName, \",vEmployeeNameFormat,\" ) formattedName,  \n" +
                "					fun_getUserNameByID(ecp.updatedBy) updatedbyValue, fun_getUserNameByID(ecp.createdBy) createdbyValue,  \n" +
                "					fun_getRoleByID(ecp.createByRoleId) createdbyRoleValue, fun_getRoleByID(ecp.updateByRoleId) updatedbyRoleValue,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(ecp.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(ecp.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtValue  \n" +
                "				FROM employee_contactperson ecp  \n" +
                "					INNER JOIN employees emp ON emp.id = ecp.employeeId and emp.isDeleted = 0  \n" +
                "				WHERE ecp.contactPersonId = \",ppersonId,\" AND ecp.isDeleted = 0  \n" +
                "			\");  \n" +
                "		ELSE  \n" +
                "			# Contact Person  \n" +
                "			SET @temp_Sproc_RetrieveEmployeeContactpersonList = CONCAT(\"  \n" +
                "				select ecp.id, ecp.employeeId, ecp.contactPersonId,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(ecp.assignedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') assignedAtValue,  \n" +
                "				    fun_ApplyCommonDateTimeFormatByParaValue(ecp.releasedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') releasedAtValue,  \n" +
                "					fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName) formattedName,  \n" +
                "					fun_getUserNameByID(ecp.updatedBy) updatedbyValue, fun_getUserNameByID(ecp.createdBy) createdbyValue,  \n" +
                "					fun_getRoleByID(ecp.createByRoleId) createdbyRoleValue, fun_getRoleByID(ecp.updateByRoleId) updatedbyRoleValue,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(ecp.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(ecp.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtValue  \n" +
                "				FROM employee_contactperson ecp  \n" +
                "					INNER JOIN contactperson cp ON cp.personId = ecp.contactPersonId and cp.isDeleted = 0  \n" +
                "				WHERE ecp.employeeId = \",pempId,\" AND ecp.isDeleted = 0  \n" +
                "			\");  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = ' 1=1 ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \" ORDER BY assignedAtValue DESC \" ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		 /* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveEmployeeContactpersonList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveEmployeeContactpersonList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "Drop procedure if Exists `Sproc_RetrieveContactPersonList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveContactPersonList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefEntityType VARCHAR(255),  \n" +
                "	IN pisPrimary tinyint,  \n" +
                "	IN pisDefault tinyint,  \n" +
                "	IN prefName VARCHAR(255),  \n" +
                "	IN padditionalComment VARCHAR(2000)  \n" +
                "   )  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "        DECLARE mfgcodemstCondition varchar(255) DEFAULT '';  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE vMfgCodeFormat INT;  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "  \n" +
                "  		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = ' 1=1 ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefEntityType = 'Manufacturer') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'MFG'\");  \n" +
                "		ELSEIF (prefEntityType = 'Supplier') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisPrimary) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isPrimary = '\",pisPrimary,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisDefault) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isDefault = '\",pisDefault,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefName IS NOT NULL AND prefName != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND refName LIKE '%\",prefName,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(padditionalComment IS NOT NULL AND padditionalComment != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND additionalComment LIKE '%\",padditionalComment,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # Common Details for Retrive Contact Person.  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_Common = CONCAT(\"  \n" +
                "			fun_GetFormattedContactPersonName(a.firstName, a.middleName, a.lastName) formattedName,  \n" +
                "			fun_getUserNameByID(a.updatedBy) updatedbyValue, fun_getUserNameByID(a.createdBy) createdbyValue,  \n" +
                "			fun_getRoleByID(a.createByRoleId) createdbyRoleValue, fun_getRoleByID(a.updateByRoleId) updatedbyRoleValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "			(CASE WHEN (a.systemGenerated = 0) THEN 'No' WHEN (a.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `syatemGeneratedValue`,  \n" +
                "			(CASE WHEN (a.isDefault = 0) THEN 'No' WHEN (a.isDefault = 1) THEN 'Yes' ELSE '' END) AS `isDefaultValue`,  \n" +
                "			(CASE WHEN (a.isPrimary = 0) THEN 'No' WHEN (a.isPrimary = 1) THEN 'Yes' ELSE '' END) AS `isPrimaryValue`  \n" +
                "		\");  \n" +
                "  \n" +
                "		# Filter: Personnel  \n" +
                "		SET @temp_Sproc_RetrieveMasterTemplate_employees = CONCAT(\"  \n" +
                "			select cp.personId, ecp.employeeId AS refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment,  \n" +
                "					cp.phone, cp.mobile, cp.division, cp.faxNumber, cp.phExtension, cp.isPrimary, cp.systemGenerated, '' As refName, 'Personnel' AS refEntityType,  \n" +
                "                    fun_convertJsonEmailToCommaSepList(cp.email) emailList,  \n" +
                "                    fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName,\",vEmployeeNameFormat,\") personnel,  \n" +
                "					cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "				FROM contactperson cp  \n" +
                "                LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "				LEFT JOIN employees emp ON emp.id = ecp.employeeId and emp.isDeleted = 0  \n" +
                "					WHERE cp.refTableName = 'employees' AND cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # Filter: Manufacturer AND Supplier  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_mfgcodemst = CONCAT(\"  \n" +
                "			select cp.personId, cp.refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment,  \n" +
                "					cp.phone, cp.mobile, cp.division, cp.faxNumber, cp.phExtension, cp.isPrimary, cp.systemGenerated, fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName, \",vMfgCodeFormat,\") AS refName,  \n" +
                "					(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "					(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) emailList,  '' AS personnels,  \n" +
                "                    cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "                FROM contactperson cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID and mfg.isDeleted = 0 \",mfgcodemstCondition,\"  \n" +
                "						WHERE cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # UNION Records based of Filer : Create Final Query for Fetch Contact Person Records.  \n" +
                "        IF(prefEntityType = 'Supplier' OR prefEntityType = 'Manufacturer') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "		ELSEIF (prefEntityType = 'Personnel') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\") a \");  \n" +
                "        ELSE  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate= CONCAT(\"select *,\",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\" UNION ALL \",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY firstName ASC\" ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		 /* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveMasterTemplate,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveMasterTemplate,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_contactperson`;  \n" +
                "CREATE TRIGGER `Trg_AU_contactperson` AFTER UPDATE ON `contactperson` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_createdAt DATETIME DEFAULT fun_DatetimetoUTCDateTime();  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"contactperson\";  \n" +
                "  \n" +
                "	IF IFNULL(OLD.firstName,0) != IFNULL(NEW.firstName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'First Name',CAST(OLD.firstName AS CHAR), CAST(NEW.firstName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'firstName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.lastName,0) != IFNULL(NEW.lastName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Last Name',CAST(OLD.lastName AS CHAR), CAST(NEW.lastName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'lastName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Email',CAST((SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(OLD.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails) AS CHAR),  \n" +
                "			CAST(( SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(NEW.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails)AS CHAR), v_createdAt,NEW.createdBy,v_createdAt,  \n" +
                "            NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'email'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phone,0) != IFNULL(NEW.phone,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Phone',CAST(OLD.phone AS CHAR), CAST(NEW.phone AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phone'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mobile,0) != IFNULL(NEW.mobile,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Mobile',CAST(OLD.mobile AS CHAR), CAST(NEW.mobile AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'mobile'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.division,0) != IFNULL(NEW.division,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Department',CAST(OLD.division AS CHAR), CAST(NEW.division AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'division'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'faxNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phExtension,0) != IFNULL(NEW.phExtension,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Ext.',CAST(OLD.phExtension AS CHAR), CAST(NEW.phExtension AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phExtension'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.middleName,0) != IFNULL(NEW.middleName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Middle Name',CAST(OLD.middleName AS CHAR), CAST(NEW.middleName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'middleName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDefault,0) != IFNULL(NEW.isDefault,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Is Default',CAST((CASE WHEN OLD.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isDefault'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.additionalComment,0) != IFNULL(NEW.additionalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Comment',CAST(OLD.additionalComment AS CHAR), CAST(NEW.additionalComment AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'longtext');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPrimary,0) != IFNULL(NEW.isPrimary,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Is Primary',CAST((CASE WHEN OLD.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isPrimary'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(OLD.refTableName,0) != IFNULL(NEW.refTableName,0) OR IFNULL(OLD.refTransID,0) != IFNULL(NEW.refTransID,0) ) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Contact Person Type',CAST((CASE WHEN (OLD.refTableName = 'employees') THEN 'Personnel' WHEN (OLD.refTableName = 'mfgcodemst') THEN (SELECT (CASE  \n" +
                "			WHEN a.mfgType = 'MFG' THEN 'Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = OLD.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "			CAST((CASE WHEN (NEW.refTableName = 'employees') THEN 'Personnel' WHEN (NEW.refTableName = 'mfgcodemst') THEN (SELECT (CASE WHEN a.mfgType = 'MFG' THEN 'Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = NEW.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "             v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'refTableName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.title,0) != IFNULL(NEW.title,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Title',CAST(OLD.title AS CHAR), CAST(NEW.title AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'title'));  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetContactPersonForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetContactPersonForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE vEmployeeNameFormat INT;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1)  \n" +
                "		FROM `contactperson`  \n" +
                "		WHERE `isDeleted` = 0 AND `personId` = IFNULL(pId,`personId`);  \n" +
                "	ELSE  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.phone, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, cp.phExtension, ecp.employeeId AS refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName) fullName, 'Personnel' AS refEntityType,  \n" +
                "				null AS refName, fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName, vEmployeeNameFormat) personnels,  \n" +
                "                fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "				(CASE WHEN (cp.isDefault = 0) THEN 'No'  \n" +
                "					WHEN (cp.isDefault = 1) THEN 'Yes' ELSE '' END) AS isDefault,  \n" +
                "				(CASE WHEN (cp.isPrimary = 0) THEN 'No'  \n" +
                "					WHEN (cp.isPrimary = 1) THEN 'Yes' ELSE '' END) AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "			LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "			LEFT JOIN employees emp ON emp.id = ecp.employeeId and emp.isDeleted = 0  \n" +
                "				WHERE `personId` = IFNULL(pId,`personId`) AND cp.refTableName ='employees'  \n" +
                "				AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END)  \n" +
                "		UNION ALL  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.phone, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, cp.phExtension, cp.refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName) fullName,  \n" +
                "				(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "                fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,vMfgCodeFormat) AS refName,  null As personnels,  \n" +
                "                fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "				(CASE WHEN (cp.isDefault = 0) THEN 'No'  \n" +
                "					WHEN (cp.isDefault = 1) THEN 'Yes' ELSE '' END) AS isDefault,  \n" +
                "				(CASE WHEN (cp.isPrimary = 0) THEN 'No'  \n" +
                "					WHEN (cp.isPrimary = 1) THEN 'Yes' ELSE '' END) AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID and mfg.isDeleted = 0  \n" +
                "			WHERE `personId` = IFNULL(pId,`personId`)  \n" +
                "				AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 18-01-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetPersonalDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPersonalDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "     IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		 from employees as e  \n" +
                "			 left join users u on e.id = u.employeeID  \n" +
                "			where IFNULL(e.isDeleted,0) = 0 and  e.id = IFNULL(pId,e.id);  \n" +
                "	ELSE  \n" +
                "			select  e.id,e.initialName, e.firstName, e.lastName, e.middleName, e.email, e.street1, e.contact, u.username, e.isDeleted,  \n" +
                "            fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName) contactPerson  \n" +
                "			 from employees as e  \n" +
                "			 left join users u on e.id = u.employeeID  \n" +
                "			 LEFT JOIN employee_contactperson AS ecp ON  ecp.employeeId = e.id and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "			 LEFT JOIN contactperson cp ON cp.personId = ecp.contactPersonId and cp.isDeleted = 0  \n" +
                "			where e.id = IFNULL(pId,e.id) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(e.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(e.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 18-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5843,'2.00','V1',' User Story 39811: Personnel: Allow to Add Alias (Contact Person) - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5843:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 19-01-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesorderdet` ;  \n" +
                "CREATE TRIGGER `Trg_AU_salesorderdet` AFTER UPDATE ON `salesorderdet`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "    IF IFNULL(OLD.refSalesOrderID,0) != IFNULL(NEW.refSalesOrderID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'REFSALESORDERID',CAST(OLD.refSalesOrderID AS CHAR),  \n" +
                "       CAST(new.refSalesOrderID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QTY',CAST(OLD.qty AS CHAR),  \n" +
                "       CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "        IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PRICE',CAST(CAST(OLD.price AS DECIMAL(15,5)) AS CHAR),  \n" +
                "      CAST(CAST(new.price AS DECIMAL(15,5)) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mrpQty,0) != IFNULL(NEW.mrpQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MRPQTY',CAST(OLD.mrpQty AS CHAR),  \n" +
                "       CAST(new.mrpQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingQty,0) != IFNULL(NEW.shippingQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'SHIPPINGQTY',CAST(OLD.shippingQty AS CHAR),  \n" +
                "       CAST(new.shippingQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'REMARK',CAST(OLD.remark AS CHAR),  \n" +
                "       CAST(new.remark AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.internalComment,0) != IFNULL(NEW.internalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'LINECOMMENT',CAST(OLD.internalComment AS CHAR),  \n" +
                "       CAST(new.internalComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.materialTentitiveDocDate,0) != IFNULL(NEW.materialTentitiveDocDate,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MATERIALTENTITVEDOCDATE',CAST(OLD.materialTentitiveDocDate AS CHAR),  \n" +
                "       CAST(new.materialTentitiveDocDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.prcNumberofWeek,0) != IFNULL(NEW.prcNumberofWeek,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'prcNUMBEROFWEEK',CAST(OLD.prcNumberofWeek AS CHAR),  \n" +
                "       CAST(new.prcNumberofWeek AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isHotJob,0) != IFNULL(NEW.isHotJob,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISHOTJOB',CAST(OLD.isHotJob AS CHAR),  \n" +
                "       CAST(new.isHotJob AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.materialDueDate,0) != IFNULL(NEW.materialDueDate,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'MATERIALDUEDATE',CAST(OLD.materialDueDate AS CHAR),  \n" +
                "       CAST(new.materialDueDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PARTID',CAST(OLD.partID AS CHAR),  \n" +
                "       CAST(new.partID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "      IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "	 INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISDELETED',CAST(OLD.isDeleted AS CHAR),  \n" +
                "       CAST(new.isDeleted AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.kitQty,0) != IFNULL(NEW.kitQty,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'KITQTY',CAST(OLD.kitQty AS CHAR),  \n" +
                "       CAST(new.kitQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(old.custPOLineNumber,\"\")!=IFNULL(NEW.custPOLineNumber,\"\")THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'CustPOLine',OLD.custPOLineNumber,  \n" +
                "       new.custPOLineNumber,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "  \n" +
                "       END IF;  \n" +
                "       IF IFNULL(old.salesOrderDetStatus,0)!=IFNULL(NEW.salesOrderDetStatus,0)THEN  \n" +
                "		   INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		   VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'Status',CASE  WHEN OLD.salesOrderDetStatus=1 THEN 'InProgress' WHEN OLD.salesOrderDetStatus=2 THEN 'Completed' ELSE '' END ,  \n" +
                "		   CASE WHEN NEW.salesOrderDetStatus=1 THEN 'InProgress' WHEN NEW.salesOrderDetStatus=2 THEN 'Completed' ELSE '' END,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "       END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isSkipKitCreation,0) != IFNULL(NEW.isSkipKitCreation,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ISKIPKITCREATION',CASE WHEN OLD.isSkipKitCreation = 1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.isSkipKitCreation = 1 THEN 'Yes' ELSE 'No' END,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partDescription,0) != IFNULL(NEW.partDescription,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'PARTDESCRIPTION',CAST(OLD.partDescription AS CHAR),  \n" +
                "       CAST(new.partDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.quoteNumber,0) != IFNULL(NEW.quoteNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QUOTENUMBER',CAST(OLD.quoteNumber AS CHAR),  \n" +
                "       CAST(new.quoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.frequency,0) != IFNULL(NEW.frequency,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'FREQUENCY',CAST(CASE WHEN OLD.frequency=1 THEN 'Every' WHEN OLD.frequency=2 THEN 'First' WHEN OLD.frequency=3 THEN 'Last' ELSE '' END  AS CHAR),  \n" +
                "       CAST(CASE WHEN new.frequency=1 THEN 'Every' WHEN new.frequency=2 THEN 'First' WHEN new.frequency=3 THEN 'Last' ELSE '' END  AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.originalPOQty,0) != IFNULL(NEW.originalPOQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'ORGPOQTY',CAST(OLD.originalPOQty  AS CHAR),  \n" +
                "       CAST(NEW.originalPOQty  AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.quoteFrom,0) != IFNULL(NEW.quoteFrom,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'QUOTEFROM',  \n" +
                "       CASE WHEN OLD.quoteFrom = 1 THEN 'From Quote'  \n" +
                "			WHEN OLD.quoteFrom = 2 THEN 'From Part Master'  \n" +
                "            WHEN OLD.quoteFrom = 3 THEN 'N/A'  \n" +
                "            ELSE '' END,  \n" +
                "		CASE WHEN new.quoteFrom = 1 THEN 'From Quote'  \n" +
                "			WHEN new.quoteFrom = 2 THEN 'From Part Master'  \n" +
                "            WHEN new.quoteFrom = 3 THEN 'N/A'  \n" +
                "            ELSE '' END,  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "   IF IFNULL(OLD.custOrgPOLineNumber,0) != IFNULL(NEW.custOrgPOLineNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERDET\",CAST(new.id AS CHAR),'CUSTORGPOLINENUMBER',CAST(OLD.custOrgPOLineNumber AS CHAR),  \n" +
                "       CAST(new.custOrgPOLineNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 19-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5844,'2.00','V1',' Alter trigger Trg_AU_salesorderdet-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5844:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-01-2022*********************************** */
                "alter table customer_addresses add isActive tinyint not null default 1;  \n" +
                "alter table contactperson add isActive tinyint not null default 1;  \n" +
                /* **************************** Add Script Version -> 20-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5845,'2.00','V1','Add Active flag for address and contact person  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5845:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-01-2022 *********************************** */
                "drop trigger if exists `Trg_BU_packingslip_invoice_payment`;  \n" +
                "CREATE TRIGGER `Trg_BU_packingslip_invoice_payment` BEFORE UPDATE ON `packingslip_invoice_payment` FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	/* if parent-master record available then only insert child record otherwise throw error */  \n" +
                "    /* added condition for OLD.refPaymentMode != 'P' bacause we allowed to update remark in case of supplier payment even it is in voided state*/  \n" +
                "	IF OLD.refPaymentMode != 'P' and (OLD.isDeleted = 1 OR OLD.isPaymentVoided = 1) THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 20-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5846,'2.00','V1','Added condition for supplier payment in trigger - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5846:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 20-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetAssemblyTreeViewList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyTreeViewList`(  \n" +
                "	IN pSalesOrderDetID INT,  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pViewType VARCHAR(5)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	IF (pViewType = 'MV' OR pViewType = 'SV') THEN  \n" +
                "		SELECT  \n" +
                "			psar.id,  \n" +
                "			kl.qpa as qpa,  \n" +
                "			IF(ISNULL(psar.lineItemID),  \n" +
                "				0,  \n" +
                "				psar.lineItemID) AS lineItemID,  \n" +
                "			IF(ISNULL(psar.prPartLineItemID),  \n" +
                "				IF(ISNULL(psar.lineitemID), - 1, 0),  \n" +
                "				psar.prPartLineItemID) AS prPartLineItemID,  \n" +
                "				psar.level,  \n" +
                "				IFNULL(kla.mfgPnID, pPartID) AS partID,  \n" +
                "				cp.PIDCode  \n" +
                "		FROM  part_sub_assy_relationship psar  \n" +
                "		LEFT JOIN kit_allocation_lineitems kl ON kl.refRfqLineitem = psar.lineItemID AND kl.refSalesOrderDetID = pSalesOrderDetID AND kl.isDeleted = 0  \n" +
                "		LEFT JOIN kit_allocation_lineitems_alternatepart kla ON kla.refKitAllocationLineItemId = kl.id AND kla.isDeleted = 0  \n" +
                "		LEFT JOIN component cp ON cp.id = IFNULL(kla.mfgPnID, pPartID)  \n" +
                "		WHERE psar.partId = pPartID AND psar.isDeleted = 0 AND (CASE WHEN pViewType = 'SV' THEN psar.level in (0,1) ELSE 1= 1 END);  \n" +
                "	ELSEIF(pViewType = 'FV') THEN  \n" +
                "			SELECT  \n" +
                "					psar.id,  \n" +
                "					kcl.qpa as qpa,  \n" +
                "					IF(ISNULL(psar.lineItemID),  \n" +
                "						0,  \n" +
                "						psar.lineItemID) AS lineItemID,  \n" +
                "					IF(ISNULL(psar.prPartLineItemID),  \n" +
                "						IF(ISNULL(psar.lineitemID), - 1, 0),  \n" +
                "						psar.prPartLineItemID) AS prPartLineItemID,  \n" +
                "					psar.level,  \n" +
                "					IFNULL(kcla.mfgPnID, pPartID) AS partID,  \n" +
                "					cp.PIDCode  \n" +
                "				FROM  \n" +
                "					part_sub_assy_relationship psar  \n" +
                "						LEFT JOIN  \n" +
                "					kit_allocation_consolidate_line_detail kcl ON kcl.rfqLineItemsId = psar.lineItemID AND kcl.refSalesOrderDetId = pSalesOrderDetID AND kcl.isDeleted = 0  \n" +
                "						LEFT JOIN  \n" +
                "					kit_allocation_consolidate_line_alternatepart kcla ON kcla.kitConsolidateID = kcl.id  AND kcla.isDeleted = 0  \n" +
                "						LEFT JOIN  \n" +
                "					component cp ON cp.id = IFNULL(kcla.mfgPnID, pPartID)  \n" +
                "				WHERE  psar.partId = pPartID AND (CASE WHEN psar.level = 0 THEN 1 = 1  ELSE kcl.qpa IS NOT NULL END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetAssemblyLevelDetails`;  \n" +
                /* **************************** Add Script Version -> 20-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5847,'2.00','V1','User Story 34796: Kit Released And Return Flow changes for Re-released Kit Plan - Tree View - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5847:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-01-2022 *********************************** */
                "INSERT INTO feature_mst(featureName,isactive,createdBy,updatedBy)VALUES('Allow to Update Contact Person',1,1,1);  \n" +
                /* **************************** Add Script Version -> 20-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5848,'2.00','V1',' BUG:40377 && BUG 40285 && some points of US 40421 - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5848:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-01-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_contactperson`;  \n" +
                "CREATE TRIGGER `Trg_AU_contactperson` AFTER UPDATE ON `contactperson` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_createdAt DATETIME DEFAULT fun_DatetimetoUTCDateTime();  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"contactperson\";  \n" +
                "  \n" +
                "	IF IFNULL(OLD.firstName,0) != IFNULL(NEW.firstName,1) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'First Name',CAST(OLD.firstName AS CHAR), CAST(NEW.firstName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'firstName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.lastName,0) != IFNULL(NEW.lastName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Last Name',CAST(OLD.lastName AS CHAR), CAST(NEW.lastName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'lastName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Email',CAST((SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(OLD.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails) AS CHAR),  \n" +
                "			CAST(( SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(NEW.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails)AS CHAR), v_createdAt,NEW.createdBy,v_createdAt,  \n" +
                "            NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'email'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phone,0) != IFNULL(NEW.phone,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Phone',CAST(OLD.phone AS CHAR), CAST(NEW.phone AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phone'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mobile,0) != IFNULL(NEW.mobile,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Mobile',CAST(OLD.mobile AS CHAR), CAST(NEW.mobile AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'mobile'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.division,0) != IFNULL(NEW.division,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Department',CAST(OLD.division AS CHAR), CAST(NEW.division AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'division'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'faxNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phExtension,0) != IFNULL(NEW.phExtension,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Ext.',CAST(OLD.phExtension AS CHAR), CAST(NEW.phExtension AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phExtension'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.middleName,0) != IFNULL(NEW.middleName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Middle Name',CAST(OLD.middleName AS CHAR), CAST(NEW.middleName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'middleName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDefault,0) != IFNULL(NEW.isDefault,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Set as Default \"Attention to\"',CAST((CASE WHEN OLD.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isDefault'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.additionalComment,0) != IFNULL(NEW.additionalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Comment',CAST(OLD.additionalComment AS CHAR), CAST(NEW.additionalComment AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'longtext');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPrimary,0) != IFNULL(NEW.isPrimary,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Primary Person',CAST((CASE WHEN OLD.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isPrimary'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(OLD.refTableName,0) != IFNULL(NEW.refTableName,0) OR IFNULL(OLD.refTransID,0) != IFNULL(NEW.refTransID,0) ) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Contact Person Type',CAST((CASE WHEN (OLD.refTableName = 'employees') THEN 'Personnel' WHEN (OLD.refTableName = 'mfgcodemst') THEN (SELECT (CASE  \n" +
                "			WHEN a.mfgType = 'MFG' THEN 'Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = OLD.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "			CAST((CASE WHEN (NEW.refTableName = 'employees') THEN 'Personnel' WHEN (NEW.refTableName = 'mfgcodemst') THEN (SELECT (CASE WHEN a.mfgType = 'MFG' THEN 'Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = NEW.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "             v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'refTableName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.title,0) != IFNULL(NEW.title,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Title',CAST(OLD.title AS CHAR), CAST(NEW.title AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'title'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Status',CAST((CASE WHEN OLD.isActive = '1' THEN 'Active' ELSE 'Inactive' END) AS CHAR), CAST((CASE WHEN NEW.isActive = '1' THEN 'Active' ELSE 'Inactive' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 20-01-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetContactPersonForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetContactPersonForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE vEmployeeNameFormat INT;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1)  \n" +
                "		FROM `contactperson`  \n" +
                "		WHERE `isDeleted` = 0 AND `personId` = IFNULL(pId,`personId`);  \n" +
                "	ELSE  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.phone, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, cp.phExtension, ecp.employeeId AS refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName) fullName, 'Personnel' AS refEntityType,  \n" +
                "				null AS refName, fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName, vEmployeeNameFormat) personnels,  \n" +
                "                fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "				(CASE WHEN (cp.isDefault = 0) THEN 'No'  \n" +
                "					WHEN (cp.isDefault = 1) THEN 'Yes' ELSE '' END) AS isDefault,  \n" +
                "				(CASE WHEN (cp.isPrimary = 0) THEN 'No'  \n" +
                "					WHEN (cp.isPrimary = 1) THEN 'Yes' ELSE '' END) AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) status,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "			LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "			LEFT JOIN employees emp ON emp.id = ecp.employeeId and emp.isDeleted = 0  \n" +
                "				WHERE `personId` = IFNULL(pId,`personId`) AND cp.refTableName ='employees'  \n" +
                "				AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END)  \n" +
                "		UNION ALL  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.phone, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, cp.phExtension, cp.refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName) fullName,  \n" +
                "				(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "                fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,vMfgCodeFormat) AS refName,  null As personnels,  \n" +
                "                fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "				(CASE WHEN (cp.isDefault = 0) THEN 'No'  \n" +
                "					WHEN (cp.isDefault = 1) THEN 'Yes' ELSE '' END) AS isDefault,  \n" +
                "				(CASE WHEN (cp.isPrimary = 0) THEN 'No'  \n" +
                "					WHEN (cp.isPrimary = 1) THEN 'Yes' ELSE '' END) AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) status,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID and mfg.isDeleted = 0  \n" +
                "			WHERE `personId` = IFNULL(pId,`personId`)  \n" +
                "				AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 20-01-2022 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveContactPersonList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveContactPersonList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefEntityType VARCHAR(255),  \n" +
                "	IN pisPrimary tinyint,  \n" +
                "	IN pisDefault tinyint,  \n" +
                "	IN prefName VARCHAR(255),  \n" +
                "	IN padditionalComment VARCHAR(2000)  \n" +
                "   )  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "        DECLARE mfgcodemstCondition varchar(255) DEFAULT '';  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE vMfgCodeFormat INT;  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "  \n" +
                "  		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = ' 1=1 ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefEntityType = 'Manufacturer') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'MFG'\");  \n" +
                "		ELSEIF (prefEntityType = 'Supplier') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisPrimary) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isPrimary = '\",pisPrimary,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisDefault) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isDefault = '\",pisDefault,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefName IS NOT NULL AND prefName != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND refName LIKE '%\",prefName,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(padditionalComment IS NOT NULL AND padditionalComment != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND additionalComment LIKE '%\",padditionalComment,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # Common Details for Retrive Contact Person.  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_Common = CONCAT(\"  \n" +
                "			fun_GetFormattedContactPersonName(a.firstName, a.middleName, a.lastName) formattedName,  \n" +
                "			fun_getUserNameByID(a.updatedBy) updatedbyValue, fun_getUserNameByID(a.createdBy) createdbyValue,  \n" +
                "			fun_getRoleByID(a.createByRoleId) createdbyRoleValue, fun_getRoleByID(a.updateByRoleId) updatedbyRoleValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "			(CASE WHEN (a.systemGenerated = 0) THEN 'No' WHEN (a.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `syatemGeneratedValue`,  \n" +
                "			(CASE WHEN (a.isDefault = 0) THEN 'No' WHEN (a.isDefault = 1) THEN 'Yes' ELSE '' END) AS `isDefaultValue`,  \n" +
                "			(CASE WHEN (a.isPrimary = 0) THEN 'No' WHEN (a.isPrimary = 1) THEN 'Yes' ELSE '' END) AS `isPrimaryValue`  \n" +
                "		\");  \n" +
                "  \n" +
                "		# Filter: Personnel  \n" +
                "		SET @temp_Sproc_RetrieveMasterTemplate_employees = CONCAT(\"  \n" +
                "			select cp.personId, ecp.employeeId AS refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment,  \n" +
                "					cp.phone, cp.mobile, cp.division, cp.faxNumber, cp.phExtension, cp.isPrimary, cp.systemGenerated, '' As refName, 'Personnel' AS refEntityType,  \n" +
                "                    fun_convertJsonEmailToCommaSepList(cp.email) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive,  \n" +
                "                    fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName,\",vEmployeeNameFormat,\") personnel,  \n" +
                "					cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "				FROM contactperson cp  \n" +
                "                LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "				LEFT JOIN employees emp ON emp.id = ecp.employeeId and emp.isDeleted = 0  \n" +
                "					WHERE cp.refTableName = 'employees' AND cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # Filter: Manufacturer AND Supplier  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_mfgcodemst = CONCAT(\"  \n" +
                "			select cp.personId, cp.refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment,  \n" +
                "					cp.phone, cp.mobile, cp.division, cp.faxNumber, cp.phExtension, cp.isPrimary, cp.systemGenerated, fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName, \",vMfgCodeFormat,\") AS refName,  \n" +
                "					(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "					(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive, '' AS personnels,  \n" +
                "                    cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "                FROM contactperson cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID and mfg.isDeleted = 0 \",mfgcodemstCondition,\"  \n" +
                "						WHERE cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # UNION Records based of Filer : Create Final Query for Fetch Contact Person Records.  \n" +
                "        IF(prefEntityType = 'Supplier' OR prefEntityType = 'Manufacturer') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "		ELSEIF (prefEntityType = 'Personnel') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\") a \");  \n" +
                "        ELSE  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate= CONCAT(\"select *,\",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\" UNION ALL \",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY firstName ASC\" ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		 /* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveMasterTemplate,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveMasterTemplate,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 20-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5849,'2.00','V1',' BUG:40377 && BUG 40285 && some points of US 40421 - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5849:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 20-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getSalesOrderReleaseLineDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderReleaseLineDetails`(  \n" +
                "IN pSalesOrderDetID  INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "          SELECT ss.shippingID,  \n" +
                "                 ss.qty,  \n" +
                "                 IFNULL(ss.unitMeaser,'EA') unitMeaser,  \n" +
                "                 ss.shippingDate,  \n" +
                "                 ss.shippingAddressID,  \n" +
                "                 ss.description,  \n" +
                "                 ss.priority,  \n" +
                "                 ss.packingSlipNo,  \n" +
                "                 ss.invoiceNo,  \n" +
                "                 ss.releaseNotes,  \n" +
                "                 ss.releaseNumber,  \n" +
                "                 ss.requestedDockDate,  \n" +
                "                 ss.carrierID,  \n" +
                "                 ss.carrierAccountNumber,  \n" +
                "                 ss.promisedShipDate,  \n" +
                "                 ss.shippingMethodID,  \n" +
                "                 ss.revisedRequestedDockDate,  \n" +
                "                 ss.revisedRequestedShipDate,  \n" +
                "                 ss.revisedRequestedPromisedDate,  \n" +
                "                 ss.isAgreeToShip,  \n" +
                "                 bsm.id AS futurePOID,  \n" +
                "                 bsm.poNumber AS futurePONumber,  \n" +
                "                 1 AS isShippingDateConfirm,  \n" +
                "                 1 AS isrequestedDockDateConfirm,  \n" +
                "                 1 AS promisedShipDateConfirm,  \n" +
                "                 1 AS isRevisedShippingDateConfirm,  \n" +
                "                 1 AS isrevisedRequestedDockDateConfirm,  \n" +
                "                 1 AS revisedPromisedShipDateConfirm,  \n" +
                "                 ss.customerReleaseLine,  \n" +
                "                 CASE WHEN shp.shippedQty IS NULL OR shp.shippedQty=0 THEN sbp.blanketPOShipQty ELSE shp.shippedQty END shippedQty,  \n" +
                "                 ss.isReadyToShip,  \n" +
                "                 ss.poReleaseNumber  \n" +
                "                 FROM salesshippingmst ss  LEFT JOIN (  \n" +
                "                                      SELECT SUM(cpd.shipQty) shippedQty,cpd.shippingId FROM customer_packingslip_det cpd  \n" +
                "                                      JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID WHERE  cp.transType='P' AND cpd.isdeleted=0  \n" +
                "                                    GROUP BY cpd.shippingId ) AS shp  ON shp.shippingId=ss.shippingID  \n" +
                "                                    LEFT JOIN(  \n" +
                "                                      SELECT SUM(sd.shippedQty) AS blanketPOShipQty,sd.blanketShippingID FROM   (SELECT SUM(cpd.shipQty) shippedQty,cpd.shippingId,ssm.shippingID AS blanketShippingID FROM customer_packingslip_det cpd  \n" +
                "                                      JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
                "                                      LEFT JOIN salesshippingmst ssm ON ssm.refShippingLineID=`cpd`.`shippingId` AND ssm.isDeleted=0  \n" +
                "                                      WHERE  cp.transType='P' AND cpd.isdeleted=0  \n" +
                "                                    GROUP BY cpd.shippingId ,ssm.shippingID)sd GROUP BY sd.blanketShippingID  \n" +
                "                                    ) AS sbp ON sbp.blanketShippingID=ss.shippingID  \n" +
                "                    LEFT JOIN salesshippingmst bss ON bss.shippingid=ss.refShippingLineID AND bss.isdeleted=0  \n" +
                "                    LEFT JOIN salesorderdet bsd ON bsd.id=bss.sDetID AND bsd.isdeleted=0  \n" +
                "                    LEFT JOIN salesordermst bsm ON bsm.id=bsd.refSalesOrderID AND bsm.isdeleted=0  \n" +
                "                 WHERE ss.sDetID= pSalesOrderDetID AND ss.isdeleted=0;  \n" +
                "  \n" +
                "                 SELECT releaseLevelComment,partCategory FROM salesorderdet WHERE id=pSalesOrderDetID;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5850,'2.00','V1',' Alter procedure Sproc_getSalesOrderReleaseLineDetails-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5850:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-01-2022 *********************************** */
                "drop procedure if exists `Sproc_SaveDuplicatePurchaseOrder`;  \n" +
                "CREATE PROCEDURE `Sproc_SaveDuplicatePurchaseOrder`(  \n" +
                "		IN pPOID INT,  \n" +
                "		IN pPONumber VARCHAR(100),  \n" +
                "		IN pPODate DATE,  \n" +
                "		IN puserID VARCHAR(10),  \n" +
                "		IN puserRoleID VARCHAR(10),  \n" +
                "		IN pSerialNumber VARCHAR(50),  \n" +
                "		IN pisKeepPO TINYINT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		 DECLARE vNewPOID INT;  \n" +
                "		 DECLARE vIndex INT;  \n" +
                "		 DECLARE vcount INT;  \n" +
                "		 DECLARE vOldPurchaseOrderDetID INT;  \n" +
                "		 DECLARE vNewPurchaseOrderDetID INT;  \n" +
                "		 DECLARE vmfgPartID INT;  \n" +
                "		 DECLARE vOldPODate DATE;  \n" +
                "  \n" +
                "		 -- get old po date  \n" +
                "		 SELECT poDate INTO vOldPODate FROM purchase_order_mst WHERE id=pPOID;  \n" +
                "			-- insert purchase order header detail  \n" +
                "		INSERT INTO purchase_order_mst (  \n" +
                "					supplierID,					poNumber,					poDate,						termsID,				shippingMethodID,			supplierAddressID,  \n" +
                "                    shippingAddressID,			intermediateshipmentID,		freeonboardID,				`status`,				pocomment,					shippingComment,  \n" +
                "                    isDeleted,					createdBy,					updatedBy,					createByRoleId,			updateByRoleId,				serialNumber,  \n" +
                "                    poRevision,					carrierID,					carrierAccountNumber,		shippingInsurance,		supplierAddress,			intermediateAddress,  \n" +
                "					isBlanketPO,				contactPersonEmpID,			poWorkingStatus,			shippingAddress,		isCustConsigned,			CustomerID,  \n" +
                "                    isNonUMIDStock,				supplierContactPerson,		supplierContactPersonID,	shippingContactPerson,	shippingContactPersonID,	intermediateContactPerson,  \n" +
                "                    intermediateContactPersonID)  \n" +
                "			SELECT  supplierID,					pPONumber,					pPODate,					termsID,				shippingMethodID,			supplierAddressID,  \n" +
                "					shippingAddressID,			intermediateshipmentID,		freeonboardID,				0,						pocomment,					shippingComment,  \n" +
                "                    0,							puserID,					puserID,					puserRoleID,			puserRoleID,				pSerialNumber,  \n" +
                "                    '00',						carrierID,					carrierAccountNumber,		shippingInsurance,		supplierAddress,			intermediateAddress,  \n" +
                "					isBlanketPO,				contactPersonEmpID,			'P',						shippingAddress,		isCustConsigned,			CustomerID,  \n" +
                "                    isNonUMIDStock,				supplierContactPerson,		supplierContactPersonID,	shippingContactPerson,	shippingContactPersonID,	intermediateContactPerson,  \n" +
                "                    intermediateContactPersonID  \n" +
                "				FROM purchase_order_mst  \n" +
                "               WHERE id=pPOID;  \n" +
                "  \n" +
                "				SELECT LAST_INSERT_ID() INTO vNewPOID;  \n" +
                "  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempPurchaseOrder AS  \n" +
                "  \n" +
                "				SELECT pod.id,row_number() over (PARTITION BY pod.refPurchaseOrderID) rowNumber,pod.mfgPartID FROM purchase_order_det pod  \n" +
                "					JOIN component c on c.id = pod.mfgPartID and c.partStatus != -3  \n" +
                "					WHERE pod.refPurchaseOrderID=pPOID AND pod.isdeleted=0;  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO vcount FROM tempPurchaseOrder;  \n" +
                "  \n" +
                "				SET vIndex=1;  \n" +
                "  \n" +
                "			  WHILE(vIndex <= vcount) DO  \n" +
                "			   -- get old purchase order detail id  \n" +
                "				SELECT id,mfgPartID INTO vOldPurchaseOrderDetID,vmfgPartID FROM tempPurchaseOrder WHERE rowNumber=(vIndex);  \n" +
                "  \n" +
                "				-- insert new purchase order detail  \n" +
                "  \n" +
                "	  IF(pisKeepPO=1)THEN  \n" +
                "				INSERT INTO purchase_order_det(refPurchaseOrderID,mfgPartID,supplierPartID,packagingID,partDescription,pcbPerArray,rohsstatusID,internalRef,salesCommissionTo,totalrelease,qty,price,  \n" +
                "			 lineComment,category,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId,lineID,supplierQuoteNumber,isLineCustConsigned,lineCustomerID,isNonUMIDStock)  \n" +
                "  \n" +
                "			 SELECT vNewPOID,mfgPartID,supplierPartID,packagingID,partDescription,pcbPerArray,rohsstatusID,internalRef,salesCommissionTo,totalrelease,qty,price,  \n" +
                "			 lineComment,category,0,puserID,puserID,puserRoleID,puserRoleID,lineID,supplierQuoteNumber,isLineCustConsigned,lineCustomerID,isNonUMIDStock FROM purchase_order_det WHERE id=vOldPurchaseOrderDetID;  \n" +
                "	  ELSE  \n" +
                "	  INSERT INTO purchase_order_det(refPurchaseOrderID,mfgPartID,supplierPartID,packagingID,partDescription,pcbPerArray,rohsstatusID,internalRef,salesCommissionTo,totalrelease,qty,price,  \n" +
                "			 lineComment,category,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId,lineID,supplierQuoteNumber,isLineCustConsigned,lineCustomerID,isNonUMIDStock)  \n" +
                "  \n" +
                "			 SELECT vNewPOID,pod.mfgPartID,pod.supplierPartID,pod.packagingID,c.mfgPNDescription,pod.pcbPerArray,pod.rohsstatusID,pod.internalRef,pod.salesCommissionTo,pod.totalrelease,pod.qty,pod.price,  \n" +
                "			 (SELECT GROUP_CONCAT(im.requirement SEPARATOR '  \n" +
                "	')  FROM componenet_inspection_requirement_det cid  \n" +
                "			   JOIN inspection_mst im ON cid.inspectionRequirementId=im.id AND cid.isdeleted=0  \n" +
                "			   WHERE cid.partID=pod.mfgPartID AND im.requiementType='C' AND cid.category='P' AND im.isdeleted=0),pod.category,0,puserID,puserID,puserRoleID,puserRoleID,pod.lineID,pod.supplierQuoteNumber,isLineCustConsigned,lineCustomerID,pod.isNonUMIDStock FROM purchase_order_det pod JOIN component c ON c.id=pod.mfgPartID  \n" +
                "			 WHERE pod.id=vOldPurchaseOrderDetID;  \n" +
                "			 END IF;  \n" +
                "  \n" +
                "			 -- new purchase order detail id  \n" +
                "			 SELECT LAST_INSERT_ID() INTO vNewPurchaseOrderDetID;  \n" +
                "  \n" +
                "				-- insert other charges detail for new po date  \n" +
                "				 INSERT INTO purchase_order_line_othercharges(refPurchaseOrderDetID,partID,qty,price,frequency,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId)  \n" +
                "			 SELECT  vNewPurchaseOrderDetID,partID,qty,price,frequency,0,puserID,puserID,puserRoleID,puserRoleID FROM purchase_order_line_othercharges  \n" +
                "			 WHERE refPurchaseOrderDetID=vOldPurchaseOrderDetID AND isdeleted=0;  \n" +
                "  \n" +
                "			 -- check for purchase requirement  \n" +
                "			 IF(pisKeepPO=1)THEN  -- keep same requirement of po  \n" +
                "  \n" +
                "			 INSERT INTO purchase_order_line_requirement_det(refPurchaseOrderDetID,instruction,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId)  \n" +
                "			  SELECT vNewPurchaseOrderDetID,instruction,0,puserID,puserID,puserRoleID,puserRoleID FROM purchase_order_line_requirement_det WHERE refPurchaseOrderDetID=vOldPurchaseOrderDetID  \n" +
                "			  AND isdeleted=0;  \n" +
                "  \n" +
                "			 ELSE  \n" +
                "			 -- get part requirement from part master  \n" +
                "			 INSERT INTO purchase_order_line_requirement_det(refPurchaseOrderDetID,instruction,isDeleted,createdBy,updatedBy,createByRoleId,updateByRoleId)  \n" +
                "			  SELECT vNewPurchaseOrderDetID, im.requirement,0,puserID,puserID,puserRoleID,puserRoleID  \n" +
                "			  FROM componenet_inspection_requirement_det cid  JOIN inspection_mst im ON cid.inspectionRequirementId=im.id AND cid.isdeleted=0  \n" +
                "			   WHERE cid.partID=vmfgPartID AND im.requiementType='R' AND cid.category='P' AND im.isdeleted=0 ;  \n" +
                "  \n" +
                "			 END IF;  \n" +
                "				  -- to save shipping details  \n" +
                "				  INSERT INTO purchase_order_line_release_det (  \n" +
                "							refPurchaseOrderDetID,				qty,  \n" +
                "                            shippingdate,  \n" +
                "							promisedShipDate,  \n" +
                "                            releaseNumber,						shippingmethodid,		shippingAddressID,			releaseNotes,				additionalNotes,  \n" +
                "                            isdeleted,							createdby,				updatedby,					createByRoleId,				updateByRoleId,  \n" +
                "                            poLineWorkingStatus,				shippingAddress)  \n" +
                "					SELECT vNewPurchaseOrderDetID,				pord.qty,  \n" +
                "							DATE_ADD( pPODate, INTERVAL DATEDIFF(pord.shippingDate, vOldPODate) DAY),  \n" +
                "							DATE_ADD(pPODate, INTERVAL DATEDIFF(pord.promisedShipDate,vOldPODate) DAY),  \n" +
                "							pord.releaseNumber,					pord.shippingmethodid,	pord.shippingAddressID,		pord.releaseNotes,			pord.additionalNotes,  \n" +
                "                            0,									puserID,				puserID,					puserRoleID,				puserRoleID,  \n" +
                "                            'P',								shippingAddress  \n" +
                "						FROM purchase_order_line_release_det pord  \n" +
                "					   WHERE pord.isdeleted = 0  \n" +
                "                         AND pord.refPurchaseOrderDetID = vOldPurchaseOrderDetID;  \n" +
                "  \n" +
                "				  SET vIndex = vIndex+1;  \n" +
                "			  END WHILE;  \n" +
                "  \n" +
                "			  SELECT   vNewPOID;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version -> 20-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5851,'2.00','V1','Bug 40473: PO: While navigating from supplier address navigation link of the PO - Ashish '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5851:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customer_addresses` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customer_addresses`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "	IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as  \n" +
                "  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND billingAddressID IN (',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingAddressID IN (',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust_refund\" else \"\" end as msg FROM packingslip_invoice_payment WHERE refPaymentMode = \"CR\"  \n" +
                "				AND (billToAddressID IN (',IDs,') OR  payToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		    ');  \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "	IF (countList=FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempcustomer_addresses t)=0 THEN  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "			SELECT * FROM tempcustomer_addresses WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomer_addresses t;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "                FROM tempcustomer_addresses t1  \n" +
                "                   INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "                WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "                ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE tempcustomer_addresses;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5852,'2.00','V1',' Sproc_checkDelete_customer_addresses - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5852:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-01-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Packingslip_Invoice_Payment_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_History` AFTER UPDATE ON `packingslip_invoice_payment`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment\";  \n" +
                "	DECLARE vOldval LONGTEXT DEFAULT '';  \n" +
                "	DECLARE vNewval LONGTEXT DEFAULT '';  \n" +
                "	DECLARE vLockUnlockFieldPTText VARCHAR(50) DEFAULT 'Locked' ;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentNumber, \"\") != IFNULL(NEW.paymentNumber, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Transaction#\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off#\"  \n" +
                "						ELSE \"Payment# or Check#\" END),			OLD.paymentNumber,  \n" +
                "					NEW.paymentNumber,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'paymentNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentDate, \"\") != IFNULL(NEW.paymentDate, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Date\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Date\"  \n" +
                "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Date\"  \n" +
                "						ELSE \"Payment Date\" END), 					OLD.paymentDate,  \n" +
                "					NEW.paymentDate,				OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'paymentDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\")  THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Amount ($)\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Amount ($)\"  \n" +
                "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Amount ($)\"  \n" +
                "					   ELSE \"Payment Amount ($)\" END),  						OLD.paymentAmount,  \n" +
                "					NEW.paymentAmount,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,		'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentType, \"\") != IFNULL(NEW.paymentType, \"\") THEN  \n" +
                "		SELECT IFNULL(gencCategoryName, '') INTO vOldval  \n" +
                "		  FROM genericcategory  \n" +
                "		 WHERE gencCategoryID = OLD.paymentType  \n" +
                "		 LIMIT 1;  \n" +
                "  \n" +
                "		SELECT IFNULL(gencCategoryName, '') INTO vNewval  \n" +
                "		  FROM genericcategory  \n" +
                "		 WHERE gencCategoryID = NEW.paymentType  \n" +
                "		 LIMIT 1;  \n" +
                "  \n" +
                "         INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Payment Method\",								vOldval,  \n" +
                "					vNewval,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.accountReference, \"\") != IFNULL(NEW.accountReference, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 		(vTableName,								NEW.id,  \n" +
                "					\"Account Reference\",							OLD.accountReference,  \n" +
                "					NEW.accountReference,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'accountReference'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankAccountNo, \"\") != IFNULL(NEW.bankAccountNo, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					(CASE WHEN old.refPaymentMode = \"CR\" THEN \"Refund To (Bank Account Code)\"  \n" +
                "						ELSE \"Bank Account Code\" END),						OLD.bankAccountNo,  \n" +
                "					NEW.bankAccountNo,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'bankAccountNo'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankName, \"\") != IFNULL(NEW.bankName, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,									NEW.id,  \n" +
                "					\"Bank Name\",								OLD.bankName,  \n" +
                "					NEW.bankName,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'bankName'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark, \"\") != IFNULL(NEW.remark, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Comments\",									OLD.remark,  \n" +
                "					NEW.remark,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'remark'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.agreedRefundAmt, \"\") != IFNULL(NEW.agreedRefundAmt, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,									NEW.id,  \n" +
                "					\"Agreed Refund Amount ($)\",						OLD.agreedRefundAmt,  \n" +
                "					NEW.agreedRefundAmt,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isMarkForRefund, \"\") != IFNULL(NEW.isMarkForRefund, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "			 VALUES 	(vTableName,								NEW.id,  \n" +
                "					\"Mark for Refund\",								(CASE WHEN OLD.isMarkForRefund =0 THEN 'False' ELSE 'True' END),  \n" +
                "					(CASE WHEN NEW.isMarkForRefund =0 THEN 'False' ELSE 'True' END),		OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isDeleted, \"\") != IFNULL(NEW.isDeleted, \"\") THEN  \n" +
                "		IF NEW.isDeleted = TRUE THEN  \n" +
                "			SET vNewval = 'Deleted';  \n" +
                "		ELSEIF NEW.isDeleted = FALSE THEN  \n" +
                "			SET vNewval = 'Restored';  \n" +
                "		ELSE  \n" +
                "			SET vNewval = 'Unknown action on delete';  \n" +
                "        END IF;  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "                    Colname,									Oldval,  \n" +
                "                    Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,								NEW.id,  \n" +
                "                    vNewval,									NULL,  \n" +
                "                    OLD.paymentNumber,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") THEN  \n" +
                "		SET vOldval = CASE WHEN OLD.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
                "				END;  \n" +
                "		SET vNewval = CASE WHEN NEW.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
                "				END;  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,								NEW.id,  \n" +
                "					(CASE WHEN old.refPaymentMode = \"CA\" OR old.refPaymentMode = \"WOFF\"  \n" +
                "						OR old.refPaymentMode = \"CR\" THEN \"Voided Status\"  \n" +
                "						ELSE \"Payment Status\" END), 			vOldval,  \n" +
                "					vNewval,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
                "  \n" +
                "  \n" +
                "		IF (IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") AND NEW.isPaymentVoided = TRUE) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "							(tableName,									refPaymentID,  \n" +
                "							Colname,									Oldval,  \n" +
                "							Newval,										createdAt,  \n" +
                "							createdBy,									createByRoleId,  \n" +
                "							updatedAt,									updatedBy,  \n" +
                "							updateByRoleId,								valueDataType)  \n" +
                "				  VALUES 	(vTableName,									NEW.id,  \n" +
                "							\"Voided Date\",									'',  \n" +
                "							NEW.UpdatedAt,  								OLD.updatedAt,  \n" +
                "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "							NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                            fun_getDataTypeBasedOnTableAndColumnName(vTableName,'UpdatedAt'));  \n" +
                "  \n" +
                "  \n" +
                "			  INSERT INTO supplier_invoice_payment_history  \n" +
                "							(tableName,									refPaymentID,  \n" +
                "							Colname,									Oldval,  \n" +
                "							Newval,										createdAt,  \n" +
                "							createdBy,									createByRoleId,  \n" +
                "							updatedAt,									updatedBy,  \n" +
                "							updateByRoleId,								valueDataType)  \n" +
                "				  VALUES 	(vTableName,									NEW.id,  \n" +
                "							\"Voided By\",									'',  \n" +
                "							fun_getUserNameByID(NEW.updatedBy),				OLD.updatedAt,  \n" +
                "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "							NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "		  END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.voidPaymentReason, \"\") != IFNULL(NEW.voidPaymentReason, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Void Reason\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Void Reason\"  \n" +
                "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Void Refund Reason\"  \n" +
                "						ELSE \"Void Payment Reason\" END),					OLD.voidPaymentReason,  \n" +
                "					NEW.voidPaymentReason,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'voidPaymentReason'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refVoidedPaymentNumber, \"\") != IFNULL(NEW.refVoidedPaymentNumber, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Ref Voided Payment# Or Check#\",						OLD.refVoidedPaymentNumber,  \n" +
                "					NEW.refVoidedPaymentNumber,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'refVoidedPaymentNumber'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockStatus, \"\") != IFNULL(NEW.lockStatus, \"\") THEN  \n" +
                "  \n" +
                "	IF (OLD.lockStatus = 'LC') THEN  \n" +
                "		SET vLockUnlockFieldPTText = \"Unlocked\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,									valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				 \"Lock Status\",									(CASE WHEN OLD.lockStatus = 'NA' THEN 'Not Applicable'   WHEN OLD.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "																WHEN OLD.lockStatus = 'LC' THEN 'Locked' ELSE '' END),  \n" +
                "				(CASE WHEN NEW.lockStatus = 'NA' THEN 'Not Applicable'  \n" +
                "						WHEN NEW.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "						WHEN NEW.lockStatus = 'LC' THEN 'Locked' ELSE '' END),			OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,						'varchar');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedAt, \"\") != IFNULL(NEW.lockedAt, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,									valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					CONCAT(vLockUnlockFieldPTText, \" Date\"),					'',  \n" +
                "					(CASE WHEN OLD.lockStatus = 'LC' THEN fun_DatetimetoUTCDateTime()  \n" +
                "						ELSE NEW.lockedAt END), 						OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'lockedAt'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedBy, \"\") != IFNULL(NEW.lockedBy, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,									valueDataType)  \n" +
                "		  VALUES 		(vTableName,									NEW.id,  \n" +
                "					CONCAT(vLockUnlockFieldPTText, \" By\"),					'',  \n" +
                "					(CASE WHEN OLD.lockStatus = 'LC' THEN fun_getUserNameByID(NEW.updatedBy)  \n" +
                "						ELSE fun_getUserNameByID(NEW.lockedBy) END),				OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,					'varchar');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "		IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
                "			IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vOldval  \n" +
                "				FROM mfgcodemst  \n" +
                "				WHERE id =OLD.mfgcodeID  \n" +
                "				ORDER BY id DESC LIMIT 1;  \n" +
                "			END IF;  \n" +
                "			IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vNewval  \n" +
                "				FROM mfgcodemst  \n" +
                "				WHERE id =NEW.mfgcodeID  \n" +
                "				ORDER BY id DESC LIMIT 1;  \n" +
                "			END IF;  \n" +
                "			  INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,								NEW.id,  \n" +
                "						\"Supplier\",									vOldval,  \n" +
                "						vNewval,									OLD.updatedAt,  \n" +
                "						OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToName, \"\") != IFNULL(NEW.payToName, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Pay To name\",									OLD.payToName,  \n" +
                "						NEW.payToName,									OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'payToName'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToAddress, \"\") != IFNULL(NEW.payToAddress, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Pay To Address\",									OLD.payToAddress,  \n" +
                "						NEW.payToAddress,								OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'payToAddress'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToContactPerson, \"\") != IFNULL(NEW.payToContactPerson, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,									valueDataType)  \n" +
                "			  VALUES 		(vTableName,									NEW.id,  \n" +
                "						\"Pay To Contact Person\",							OLD.payToContactPerson,  \n" +
                "						NEW.payToContactPerson,								OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'payToContactPerson'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToName, \"\") != IFNULL(NEW.billToName, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Bill To Name\",									OLD.billToName,  \n" +
                "						NEW.billToName,									OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'billToName'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToAddress, \"\") != IFNULL(NEW.billToAddress, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,									valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Bill To Address\",								OLD.billToAddress,  \n" +
                "						NEW.billToAddress,								OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'billToAddress'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToContactPerson, \"\") != IFNULL(NEW.billToContactPerson, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,									valueDataType)  \n" +
                "			  VALUES 		(vTableName,									NEW.id,  \n" +
                "						\"Bill To Contact Person\",							OLD.billToContactPerson,  \n" +
                "						NEW.billToContactPerson,							OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'billToContactPerson'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode IN ('R','RR') THEN  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.depositBatchNumber, \"\") != IFNULL(NEW.depositBatchNumber, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,						refPaymentID,  \n" +
                "						Colname,						Oldval,  \n" +
                "						Newval,							createdAt,  \n" +
                "						createdBy,						createByRoleId,  \n" +
                "						updatedAt,						updatedBy,  \n" +
                "						updateByRoleId,					valueDataType)  \n" +
                "			  VALUES 	(vTableName,							NEW.id,  \n" +
                "					\"Deposit Batch#\",						OLD.depositBatchNumber,  \n" +
                "					NEW.depositBatchNumber,						OLD.updatedAt,  \n" +
                "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'depositBatchNumber'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode IN ('RR','CR') THEN  \n" +
                "		IF IFNULL(OLD.offsetAmount,0) != IFNULL(NEW.offsetAmount,0) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "			VALUES 	(vTableName,										NEW.id,  \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'RR' THEN \"Offset Refund Amount ($)\"  \n" +
                "						WHEN NEW.refPaymentMode = 'CR' THEN \"Offset Amount ($)\"  \n" +
                "						ELSE '' END),								OLD.offsetAmount,  \n" +
                "					NEW.offsetAmount,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    'amount');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,								NEW.id,  \n" +
                "					\"COA\",  \n" +
                "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = OLD.acctId),  \n" +
                "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = NEW.acctId),  \n" +
                "					OLD.updatedAt,   							OLD.updatedBy,  \n" +
                "					OLD.updateByRoleId,							fun_DatetimetoUTCDateTime(), /*updatedAt*/  \n" +
                "					NEW.updatedBy, /*updatedBy*/				NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    'varchar');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode = 'CR' THEN  \n" +
                "		IF IFNULL(OLD.subStatus, \"\") != IFNULL(NEW.subStatus, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,							refPaymentID,  \n" +
                "					Colname,							Oldval,  \n" +
                "					Newval,								createdAt,  \n" +
                "					createdBy,							createByRoleId,  \n" +
                "					updatedAt,							updatedBy,  \n" +
                "					updateByRoleId,						valueDataType)  \n" +
                "			  VALUES 	(vTableName,							NEW.id,  \n" +
                "					\"Refund Status\",						fun_getCustRefundSubStatusNameByID(OLD.subStatus),  \n" +
                "					fun_getCustRefundSubStatusNameByID(NEW.subStatus),		OLD.updatedAt,  \n" +
                "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,	'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(OLD.isMarkAsPaid, \"\") != IFNULL(NEW.isMarkAsPaid, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,							refPaymentID,  \n" +
                "					Colname,							Oldval,  \n" +
                "					Newval,								createdAt,  \n" +
                "					createdBy,							createByRoleId,  \n" +
                "					updatedAt,							updatedBy,  \n" +
                "					updateByRoleId,						valueDataType)  \n" +
                "			  VALUES 	(vTableName,								NEW.id,  \n" +
                "					\"Mark As Paid\",									fun_getIntToText(OLD.isMarkAsPaid),  \n" +
                "					fun_getIntToText(NEW.isMarkAsPaid),				OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5853,'2.00','V1',' Trg_AU_Packingslip_Invoice_Payment_History - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5853:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-01-2022 *********************************** */
                "Drop procedure if exists `Sproc_checkDelete_contactperson`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_contactperson`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "drop temporary table if exists tempContactperson;  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempContactperson as  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"contactperson\" else \"\" end as msg FROM employee_contactperson WHERE contactPersonId IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust\" else \"\" end as msg FROM packingslip_invoice_payment  WHERE (billToContactPersonID IN (',IDs,') OR payToContactPersonID IN (',IDs,')) AND refPaymentMode = \"CR\" AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"P\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_invoice\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"I\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_creditmemo\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"C\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE  (supplierContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_line_release_det WHERE shippingContactPersonID IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0 AND (custBillingContactPersonID IN (',IDs,') OR custShippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0 AND shippingContactPersonID IN (',IDs,') LIMIT 1)  \n" +
                "		');  \n" +
                "/*	  (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive\" else \"\" end as msg FROM packing_slip_material_receive WHERE isDeleted = 0 AND (billToConactPerson IN (',IDs,')  \n" +
                "			OR shipToContactPersonID IN (',IDs,') OR rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted = 0 AND (payToContactPersonID IN (',IDs,') OR billToContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE isDeleted = 0 AND (custBillingConactPersonID IN (',IDs,') OR custShippingConactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "  */  \n" +
                "  \n" +
                "  	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "  \n" +
                "    IF(countList=FALSE) THEN  \n" +
                "		IF(SELECT SUM(t.cnt) FROM tempContactperson t)=0 THEN  \n" +
                "			CREATE TEMPORARY TABLE if not exists tempSetIsDefaultContactperson as  \n" +
                "				select cp.refTransID,cp.refTableName from contactperson cp  WHERE cp.personId IN (IDs) and cp.isDefault =1 AND cp.deletedAt IS NULL;  \n" +
                "			SET @SQl1 = CONCAT('update contactperson set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where personId in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "            # If Default Contact person is Deleted then Set new Default Contact Person.  \n" +
                "            IF(EXISTS (select 1 from tempSetIsDefaultContactperson)) THEN  \n" +
                "				CREATE TEMPORARY TABLE if not exists tempPersonId as (select min(cp.personId) personId from contactperson cp  \n" +
                "						where EXISTS (  \n" +
                "							select 1 from tempSetIsDefaultContactperson tcp where tcp.refTransID = cp.refTransID AND tcp.refTableName = cp.refTableName  \n" +
                "							) AND cp.isDeleted = 0 group by cp.refTransID,cp.refTableName);  \n" +
                "				update contactperson set isDefault =1 where personId IN  \n" +
                "					(select personId from tempPersonId);  \n" +
                "				Drop temporary table if exists tempPersonId;  \n" +
                "			END IF;  \n" +
                "			Drop temporary table if exists tempSetIsDefaultContactperson;  \n" +
                "  \n" +
                "			SELECT * FROM tempContactperson WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempContactperson t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "		FROM tempContactperson t1  \n" +
                "		INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "			WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "			ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE if exists tempContactperson;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5854,'2.00','V1',' User Story 40421: Contact Person Changes Suggested by Client - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5854:
            allDbChangesArray.push(
                /* **************************** New Script -> 20-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_contactperson` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_contactperson`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempContactperson;  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempContactperson as  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"contactperson\" else \"\" end as msg FROM employee_contactperson WHERE contactPersonId IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust_refund\" else \"\" end as msg FROM packingslip_invoice_payment  WHERE (billToContactPersonID IN (',IDs,') OR payToContactPersonID IN (',IDs,')) AND refPaymentMode = \"CR\" AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"P\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_invoice\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"I\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_creditmemo\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"C\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE  (supplierContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_line_release_det WHERE shippingContactPersonID IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0 AND (custBillingContactPersonID IN (',IDs,') OR custShippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0 AND shippingContactPersonID IN (',IDs,') LIMIT 1)  \n" +
                "		');  \n" +
                "/*	  (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive\" else \"\" end as msg FROM packing_slip_material_receive WHERE isDeleted = 0 AND (billToConactPerson IN (',IDs,')  \n" +
                "			OR shipToContactPersonID IN (',IDs,') OR rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted = 0 AND (payToContactPersonID IN (',IDs,') OR billToContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE isDeleted = 0 AND (custBillingConactPersonID IN (',IDs,') OR custShippingConactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "  */  \n" +
                "  \n" +
                "  	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "  \n" +
                "    IF(countList=FALSE) THEN  \n" +
                "		IF(SELECT SUM(t.cnt) FROM tempContactperson t)=0 THEN  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempSetIsDefaultContactperson AS  \n" +
                "				SELECT cp.refTransID,cp.refTableName FROM contactperson cp  WHERE cp.personId IN (IDs) AND cp.isDefault =1 AND cp.deletedAt IS NULL;  \n" +
                "			SET @SQl1 = CONCAT('update contactperson set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where personId in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "            # If Default Contact person is Deleted then Set new Default Contact Person.  \n" +
                "            IF(EXISTS (SELECT 1 FROM tempSetIsDefaultContactperson)) THEN  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempPersonId AS (SELECT MIN(cp.personId) personId FROM contactperson cp  \n" +
                "						WHERE EXISTS (  \n" +
                "							SELECT 1 FROM tempSetIsDefaultContactperson tcp WHERE tcp.refTransID = cp.refTransID AND tcp.refTableName = cp.refTableName  \n" +
                "							) AND cp.isDeleted = 0 GROUP BY cp.refTransID,cp.refTableName);  \n" +
                "				UPDATE contactperson SET isDefault =1 WHERE personId IN  \n" +
                "					(SELECT personId FROM tempPersonId);  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempPersonId;  \n" +
                "			END IF;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempSetIsDefaultContactperson;  \n" +
                "  \n" +
                "			SELECT * FROM tempContactperson WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempContactperson t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "		FROM tempContactperson t1  \n" +
                "		INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "			WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "			ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempContactperson;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 20-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5855,'2.00','V1',' Sproc_checkDelete_contactperson - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5855:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 21-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsSubAssembly TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE,  \n" +
                "    IN pSubAssemblyTab TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            (CASE WHEN kaad.bomAssyLevel = 0 THEN kaad.bomInternalVersionString ELSE 'N/A' END) AS kitAllocationInternalVersion,  \n" +
                "            kaad.bomAssyLevel  \n" +
                "		\");  \n" +
                "  \n" +
                "	SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND kaad.isDeleted = 0\") ;  \n" +
                "  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetKitList = CONCAT(\"  \n" +
                "		SELECT  t.*,  \n" +
                "				fun_getKitReleaseIndication(releaseDayDiffwithCurrentDate, shortagePer, isKitPlanningRequired) AS kitReleaseIndication,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT  a.*,  \n" +
                "					(CASE WHEN assyID = partID THEN 0 ELSE 1 END) AS isSubAssembly,  \n" +
                "					(  \n" +
                "					CASE  \n" +
                "						WHEN ((IFNULL(kitReleasePlanCount, 0) = 0) OR (IFNULL(kitReleasePlanCount, 0) > 0 AND (IFNULL(totalPOQty, 0) <> assyPOQty OR IFNULL(totalKitQty, 0) <> assyKitQty))) THEN  \n" +
                "							TRUE  \n" +
                "						ELSE  \n" +
                "							FALSE  \n" +
                "					END  \n" +
                "					) as isKitPlanningRequired,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN ifnull(kitReleasePlanCount, 0) = 0 THEN  \n" +
                "								'Unplanned'  \n" +
                "							WHEN ifnull(kitReleasePlanCount, 0) > 0  AND  (IFNULL(totalPOQty, 0) <> assyPOQty OR IFNULL(totalKitQty, 0) <> assyKitQty) THEN  \n" +
                "								'Partially Planned'  \n" +
                "							WHEN ifnull(kitReleasePlanCount, 0) > 0 AND  IFNULL(totalPOQty, 0) = assyPOQty AND IFNULL(totalKitQty, 0) = assyKitQty THEN  \n" +
                "								'Fully Planned'  \n" +
                "							ELSE  \n" +
                "								NULL  \n" +
                "						END  \n" +
                "					) as kitPlanStatus,  \n" +
                "					fun_getKitReleaseStatus(subKitStatusPercentage,totalKitQty,totalPOQty,assyKitQty,assyPOQty,releasedPlanCount,pendingCount) AS  kitReleaseStatus,  \n" +
                "					fun_getKitReturnStatus(pendingReleaseCount,releasedNotReturnedCount,returnedCount,readyToReturnCount,shortageReturnCount) AS kitReturnStatus  \n" +
                "			FROM  \n" +
                "				(SELECT  \n" +
                "					`vuss`.`Sales Order ID` AS id,  \n" +
                "					`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "					`vuss`.`PartID` AS assyID,  \n" +
                "					kaad.partId AS partID,  \n" +
                "					`vuss`.`Status` AS completedStatus,  \n" +
                "					(  \n" +
                "						CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "								'Draft'  \n" +
                "							WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "								'Published'  \n" +
                "							ELSE  \n" +
                "								''  \n" +
                "						END  \n" +
                "					) AS `statusConvertedValue`,  \n" +
                "					ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "					ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "					ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "					td.releasedPlanCount,  \n" +
                "					td.pendingCount,  \n" +
                "					vrr.pendingReleaseCount,  \n" +
                "					vrr.releasedNotReturnedCount,  \n" +
                "					vrr.returnedCount,  \n" +
                "					vrr.readyToReturnCount,  \n" +
                "					vrr.shortageReturnCount,  \n" +
                "					CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "					td.nextReleaseDate,  \n" +
                "					`vuss`.`So Date` AS soDate,  \n" +
                "					`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "					`vuss`.`Revision` AS revision,  \n" +
                "					`vuss`.`Po Number` AS poNumber,  \n" +
                "					`vuss`.`Po Date` AS poDate,  \n" +
                "					`vuss`.`Assy ID` AS PIDCode,  \n" +
                "					`vuss`.`Assy Name` AS mfgPN,  \n" +
                "					ro.rohsIcon,  \n" +
                "					ro.name AS `rohsComplientConvertedValue`,  \n" +
                "					`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "					`vuss`.`custAssyPN` AS custAssyPN,  \n" +
                "					`vuss`.`liveVersion` AS liveVersion,  \n" +
                "					`vuss`.`releasedWorkorder` AS releasedWorkorder,  \n" +
                "					`vuss`.`NickName` AS nickName,  \n" +
                "					`vuss`.`partDescription` AS partDescription,  \n" +
                "					`vuss`.`PO Qty` AS qty,  \n" +
                "					`vuss`.`mrpQty` AS mrpQty,  \n" +
                "					`vuss`.`kitQty` AS kitQty,  \n" +
                "					(CASE  WHEN (`vuss`.`isHotJob` = 0) THEN  'No'  \n" +
                "						   WHEN (`vuss`.`isHotJob` = 1) THEN  'Yes'  \n" +
                "						   ELSE  ''  END  \n" +
                "					) AS `isHotJobValue`,  \n" +
                "					`vuss`.`isHotJob`,  \n" +
                "					`vuss`.`price` AS price,`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "					`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "					`vuss`.`remark` AS remark,  \n" +
                "					`vuss`.`cancleReason` AS cancleReason,  \n" +
                "					`vuss`.`Customer ID` AS customerID,  \n" +
                "					fun_GetFormattedMfgCode(vuss.mfgCode, vuss.mfgName,\", vMfgCodeFormat ,\") AS companyName,  \n" +
                "					`vuss`.`Full Name` AS fullName,  \n" +
                "					`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "					`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "					`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "					`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "					`vuss`.`shippingQty` AS shippingQty,  \n" +
                "					ifnull(td.totalPlan, 0) kitReleasePlanCount,  \n" +
                "					`vuss`.`kitNumber` AS kitNumber,  \n" +
                "					 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "					 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "					`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "					`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "					`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "					`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "					case when vuss.refSODetID is not null then sa.salesAssy else '' end  AS salesAssy,  \n" +
                "					`vuss`.`Sales Order Status` AS `status`,  \n" +
                "					`vuss`.`Terms ID` AS termsID,  \n" +
                "					`vuss`.`mfgCode` AS mfgCode,  \n" +
                "					vuss.partType,  \n" +
                "					vuss.isCancle,  \n" +
                "					vuss.mfgcodeID,  \n" +
                "					vuss.manufacturerName,  \n" +
                "					`vuss`.`serialNumber` AS serialNumber,  \n" +
                "					`vuss`.partCategory,  \n" +
                "					vuss.lineID,  \n" +
                "					`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "					ifnull(td.ishotjob,0) AS isBuildWiseHotJob ,  \n" +
                "					td.nextShipDate AS nextShipDate,  \n" +
                "					wo.WONumber AS workorders,  \n" +
                "					wo.WOIds AS workorderIds,  \n" +
                "					`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "					hutkit.refType AS refTypeKA,  \n" +
                "					hutkit.status AS haltStatusKA,  \n" +
                "					(  \n" +
                "						CASE  \n" +
                "							WHEN 	hutkit.status = 'H' THEN  \n" +
                "									CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' ON ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutkit.startDate))  \n" +
                "							ELSE 	''  \n" +
                "						END  \n" +
                "					) AS reasonKA,  \n" +
                "					`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "					IFNULL(td.totalPOQty, 0) totalPOQty,  \n" +
                "					IFNULL(td.totalKitQty, 0) totalKitQty,  \n" +
                "					ka.shortagePer,  \n" +
                "					DATEDIFF(td.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "					kaad.perAssyBuildQty,  \n" +
                "					cassy.PIDCode AS assyPIDCode,  \n" +
                "					cassy.mfgPN AS assyMfgPN,  \n" +
                "					roassy.rohsIcon AS assyRohsIcon,  \n" +
                "					roassy.name assyRohsName,  \n" +
                "					cassy.isCustom AS assyIsCustomPart,  \n" +
                "					cassy.custAssyPN AS assyCustAssyPN,  \n" +
                "					cassy.nickName AS assyNickName,  \n" +
                "					cassy.mfgPNDescription AS assyPartDescription,  \n" +
                "					IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`PO Qty`,0) AS assyPOQty,  \n" +
                "					IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`mrpQty`,0) AS assyMRPQty,  \n" +
                "					IFNULL(kaad.perAssyBuildQty,0) * IFNULL(`vuss`.`kitQty`,0) AS assyKitQty,  \n" +
                "					(COUNT(1) OVER (PARTITION BY kaad.refSalesOrderDetID) - 1) AS havingSubAssyCount,  \n" +
                "					(CASE WHEN kaad.bomAssyLevel = 0 THEN COUNT(1) OVER (PARTITION BY kaad.refSalesOrderDetID) - 1 ELSE 0 END) AS subAssyCount\",v_DynamicColumns, \"  \n" +
                "			FROM   vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "				INNER JOIN  component cassy ON kaad.partId = cassy.id AND cassy.isDeleted = 0 AND cassy.parttype IN (3,2)  \n" +
                "				LEFT JOIN  rfq_rohsmst roassy ON cassy.RoHSStatusID = roassy.id AND roassy.isDeleted = 0  \n" +
                "				LEFT JOIN (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "						FROM  salesorderdet s INNER JOIN component c ON s.partID =c.id  \n" +
                "						WHERE  s.isdeleted=0 AND c.parttype IN (3,2)) AS sa ON sa.id = vuss.refSODetID  \n" +
                "				LEFT JOIN (SELECT shippingid,Sdetid, qty, CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),'%m/%d/%y')) salesRelease  \n" +
                "						FROM salesshippingmst  b WHERE isdeleted = 0 ) AS sr ON sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "				LEFT JOIN (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "						FROM salesorder_otherexpense_details WHERE isdeleted = 0  \n" +
                "						GROUP BY refSalesOrderDetID ) AS so ON so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "				LEFT JOIN (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds, GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "						FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "						ON wsd.woID=w.woID WHERE  wsd.isdeleted = 0  \n" +
                "						GROUP BY wsd.salesOrderDetailID  \n" +
                "					) AS wo ON wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "				LEFT JOIN (  \n" +
                "					SELECT	salesOrderDetID,   IFNULL(subAssyID, refAssyId) AS partID,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToReturnCount,  \n" +
                "							SUM(CASE WHEN kitReturnStatus ='RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "					FROM 	vu_release_plan_release_return_status_det  \n" +
                "					GROUP BY salesOrderDetID, partID  \n" +
                "			) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId AND vrr.partID = kaad.partId  \n" +
                "		LEFT JOIN (  \n" +
                "			SELECT 	t.salesOrderDetID,  \n" +
                "					IFNULL(t.subAssyID,t.refAssyId) As partID,  \n" +
                "                    SUM(kitReleaseQty) AS totalKitQty,  \n" +
                "                    SUM(poQty) AS totalPOQty,  \n" +
                "                    COUNT(1) totalPlan,  \n" +
                "                    MAX(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  AND  kitStatus!='R' then 1 else 0 end )  AS ishotjob,  \n" +
                "					MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "					MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "					SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "					SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "            FROM (  \n" +
                "				SELECT 	r.salesOrderDetID,  r.subAssyID, r.refAssyId, r.kitReleaseQty , r.poQty, r.kitStatus, r.kitReleaseDate  \n" +
                "				FROM 	vu_release_plan_detail r  \n" +
                "			) AS t  \n" +
                "			GROUP BY  t.salesOrderDetID, partID  \n" +
                "        ) AS td  ON td.salesOrderDetID = vuss.salesOrderDetailId AND td.partID = kaad.partId  \n" +
                "			LEFT JOIN 	(  \n" +
                "				SELECT 	refSalesOrderDetID, assyID, mainAssy,  \n" +
                "						(k.totalLine - k.totalNotRequireLine) AS totalLine,  \n" +
                "						k.shortageLine,  \n" +
                "						Round(k.allocPerComponent,2) allocPerComponent,  \n" +
                "						Round(k.allocPerWithSubAssy,2) allocPerWithSubAssy,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS shortagePer  \n" +
                "				FROM  \n" +
                "					(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
                "							COUNT(1) AS `totalLine`,  \n" +
                "							SUM( k.shortageline) shortageline,  \n" +
                "							SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "							(CASE WHEN assyID = mainAssy THEN  \n" +
                "								MIN(mainAssyPerForSubAssy)  /* Main Assembly Case */  \n" +
                "							ELSE /* Sub Assembly Case */  \n" +
                "								0 END) AS allocPerWithSubAssy,  \n" +
                "							(CASE WHEN assyID = mainAssy THEN  \n" +
                "								MIN(mainAssyPerForComponent)  /* Main Assembly Case */  \n" +
                "							ELSE /* Sub Assembly Case */  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) END) AS allocPerComponent  \n" +
                "					FROM  \n" +
                "						(SELECT refSalesOrderDetID, assyID, mainAssy,  \n" +
                "								k.qpaWithDnp, k.allocationPer, k.isNotRequiredKitAllocation,  k.allocatedPercePerLine, k.MainAssyLine, k.shortageline,  \n" +
                "								SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForSubAssy,  \n" +
                "								SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) over (partition by refSalesorderdetid) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN k.MainAssyLine ELSE 0 END) over (partition by refSalesorderdetid) AS mainAssyPerForComponent  \n" +
                "					 FROM  \n" +
                "							(SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "									vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "									IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "									(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "									(case when vk.assyid = sd.partid then vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "									(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "									vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "								FROM  	`vu_kit_allocation_detail` vk  \n" +
                "								INNER JOIN    salesorderdet sd ON vk.refSalesorderdetid  = sd.id  \n" +
                "								WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "							) AS k  \n" +
                "						) AS k GROUP bY assyID, refSalesorderdetid, mainAssy  \n" +
                "					) AS k  \n" +
                "				) AS ka ON ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` AND ka.mainAssy =  `vuss`.`PartID` AND ka.assyID = kaad.partId  \n" +
                "				LEFT JOIN  rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "				LEFT JOIN  holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId AND hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId AND htk.refType='KA' AND htk.isDeleted=0)  \n" +
                "				LEFT JOIN (SELECT ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) AS initialStockCount  \n" +
                "								FROM assemblystock ass WHERE ass.isDeleted =0 AND ass.type = 'OS'  \n" +
                "								GROUP BY ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID)  AS astk  \n" +
                "							ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` AND astk.refSalesOrderID = vuss.`Sales Order ID` AND astk.partID = kaad.partId  \n" +
                "				) AS a  \n" +
                "		) AS t  \n" +
                "    \");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY (nextReleaseDate IS NULL),  nextReleaseDate ASC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  #need to check once  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "       ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pIsSubAssembly = 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND isSubAssembly = 0 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSubAssemblyTab = 1) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND (CASE WHEN assyID = partID THEN subAssyCount > 0 ELSE 1= 1 END) \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetKitList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "   PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount FROM ( \",@temp_Sproc_GetKitList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5856,'2.00','V1','Bug 40508: Kit List is not showing result as per the Applied filters for Release Status - Tree View - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5856:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customer_addresses` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customer_addresses`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "	IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as  \n" +
                "  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0  \n" +
                "				AND (billingAddressID IN (',IDs,') OR shippingAddressID IN (',IDs,') OR intermediateShipmentId IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0  \n" +
                "				AND (shippingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0  \n" +
                "				AND (custShippingAddressID IN (',IDs,') OR custBillingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE refPaymentMode = \"P\"  \n" +
                "				AND (billToAddressID IN (',IDs,') OR  payToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust_refund\" else \"\" end as msg FROM packingslip_invoice_payment WHERE refPaymentMode = \"CR\"  \n" +
                "				AND (billToAddressID IN (',IDs,') OR  payToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_debit_memo\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"D\"  \n" +
                "				AND (billToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_supplier_rma\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"R\"  \n" +
                "				AND (rmaShippingAddressId IN (',IDs,') OR rmaMarkForAddressId IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_line_release_det WHERE isDeleted = 0  \n" +
                "				AND (shippingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted = 0  \n" +
                "				AND (supplierAddressID IN (',IDs,') OR shippingAddressID IN (',IDs,') OR intermediateShipmentID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0  \n" +
                "				AND (shippingAddressID IN (',IDs,') OR billingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "  \n" +
                "		    ');  \n" +
                "  \n" +
                "	/* (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			 (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND billingAddressID IN (',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingAddressID IN (',IDs,') LIMIT 1)  */  \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "	IF (countList=FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempcustomer_addresses t)=0 THEN  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "			SELECT * FROM tempcustomer_addresses WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomer_addresses t;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "                FROM tempcustomer_addresses t1  \n" +
                "                   INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "                WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "                ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE tempcustomer_addresses;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5857,'2.00','V1',' Sproc_checkDelete_customer_addresses - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5857:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 21-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetAssemblyTreeViewList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyTreeViewList`(  \n" +
                "	IN pSalesOrderDetID INT,  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pViewType VARCHAR(5),  \n" +
                "    IN pIsKitAllocation TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	IF(pIsKitAllocation = 1) THEN  \n" +
                "		IF (pViewType = 'MV' OR pViewType = 'SV') THEN  \n" +
                "			SELECT  \n" +
                "                    CONCAT('Component_' , IF(ISNULL(psar.lineItemID),   0,   psar.lineItemID), '_' , psar.level) AS id,  \n" +
                "                    (CASE  \n" +
                "						WHEN  psar.level = 0 THEN  \n" +
                "							'#'  \n" +
                "						ELSE CONCAT('Component_' , IF(ISNULL(psar.prPartLineItemID), 0, psar.prPartLineItemID), '_' , (psar.level-1))  \n" +
                "					END)AS parent,  \n" +
                "					'folder' AS type,  \n" +
                "                    TRUE AS isSelected,  \n" +
                "                    (CASE  \n" +
                "						WHEN  psar.level = 0 THEN  \n" +
                "							cp.PIDCode  \n" +
                "						ELSE  CONCAT(cp.PIDCode, ' [QPA: ',cast(kl.qpa as DECIMAL) ,']' )  \n" +
                "					END)AS text,  \n" +
                "					IF(ISNULL(psar.lineItemID), 0, psar.lineItemID) AS name,  \n" +
                "					psar.level,  \n" +
                "					IFNULL(kla.mfgPnID, pPartID) AS partID  \n" +
                "				FROM  part_sub_assy_relationship psar  \n" +
                "				LEFT JOIN kit_allocation_lineitems kl ON kl.refRfqLineitem = psar.lineItemID AND kl.refSalesOrderDetID = pSalesOrderDetID AND kl.isDeleted = 0  \n" +
                "				LEFT JOIN kit_allocation_lineitems_alternatepart kla ON kla.refKitAllocationLineItemId = kl.id AND kla.isDeleted = 0  \n" +
                "				LEFT JOIN component cp ON cp.id = IFNULL(kla.mfgPnID, pPartID)  \n" +
                "				WHERE psar.partId = pPartID AND psar.isDeleted = 0 AND (CASE WHEN pViewType = 'SV' THEN psar.level in (0,1) ELSE 1= 1 END);  \n" +
                "			ELSEIF(pViewType = 'FV') THEN  \n" +
                "				SELECT  \n" +
                "						'Component_0_ 0' AS id,  \n" +
                "						'#' AS parent,  \n" +
                "						'folder' AS type,  \n" +
                "						TRUE AS isSelected,  \n" +
                "						cp.PIDCode as text,  \n" +
                "						0 AS level,  \n" +
                "						0 AS name,  \n" +
                "						@pPartID AS partID  \n" +
                "					FROM salesorderdet sd JOIN component cp ON sd.partID = cp.id WHERE sd.id = pSalesOrderDetID  \n" +
                "				UNION ALL  \n" +
                "				SELECT  \n" +
                "						CONCAT('Component_' , kcl.rfqLineItemsId, '_1') AS id,  \n" +
                "						'Component_0_ 0' AS parent,  \n" +
                "						'folder' AS type,  \n" +
                "						TRUE AS isSelected,  \n" +
                "						CONCAT(cp.PIDCode, ' [QPA: ',cast(kcl.qpa as DECIMAL) ,']' ) as text,  \n" +
                "						1  AS level,  \n" +
                "						kcl.rfqLineItemsId AS name,  \n" +
                "						kcla.mfgPNID AS partID  \n" +
                "					FROM kit_allocation_consolidate_line_detail kcl  \n" +
                "					LEFT JOIN kit_allocation_consolidate_line_alternatepart kcla ON kcla.kitConsolidateID = kcl.id  AND kcla.isDeleted = 0  \n" +
                "					LEFT JOIN component cp ON kcla.mfgPnID = cp.id  \n" +
                "					WHERE kcl.refAssyId = pPartID AND kcl.refSalesOrderDetID = pSalesOrderDetID AND kcl.isDeleted = 0 AND cp.category = 3;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT  \n" +
                "			CONCAT('Component_' , IF(ISNULL(psar.lineItemID),   0,   psar.lineItemID), '_' , psar.level) AS id,  \n" +
                "			(CASE  \n" +
                "				WHEN  psar.level = 0 THEN  \n" +
                "					'#'  \n" +
                "				ELSE CONCAT('Component_' , IF(ISNULL(psar.prPartLineItemID), 0, psar.prPartLineItemID), '_' , (psar.level-1))  \n" +
                "			END)AS parent,  \n" +
                "			'folder' AS type,  \n" +
                "			TRUE AS isSelected,  \n" +
                "             (CASE WHEN  psar.level = 0 THEN  \n" +
                "					cp.PIDCode  \n" +
                "				ELSE  CONCAT(cp.PIDCode, ' [QPA: ',cast(rl.qpa as DECIMAL) ,']' )  \n" +
                "			END)AS text,  \n" +
                "			IF(ISNULL(psar.lineItemID), 0, psar.lineItemID) AS name,  \n" +
                "			psar.level,  \n" +
                "			IFNULL(rla.mfgPnID, pPartID) AS partID  \n" +
                "		FROM  part_sub_assy_relationship psar  \n" +
                "		LEFT JOIN rfq_lineitems rl ON rl.id = psar.lineItemID  \n" +
                "		LEFT JOIN rfq_lineitems_alternatepart rla ON rla.rfqLineItemsID = rl.id AND rla.isDeleted = 0  \n" +
                "		LEFT JOIN component cp ON cp.id = IFNULL(rla.mfgPnID, pPartID)  \n" +
                "		WHERE psar.partId = pPartID AND psar.isDeleted = 0 AND (CASE WHEN pViewType = 'SV' THEN psar.level in (0,1) ELSE 1= 1 END);  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetAssyBOMList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssyBOMList`(  \n" +
                "	IN prfqAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                " DECLARE pPartID INT;  \n" +
                " DECLARE pPIDCode VARCHAR(50);  \n" +
                "  \n" +
                "	 SELECT partId, c.PIDCode INTO pPartID, pPIDCode  \n" +
                "	 FROM rfq_assemblies ra  \n" +
                "	 JOIN component c ON ra.partId = c.Id  \n" +
                "	 WHERE ra.Id = prfqAssyID;  \n" +
                "  \n" +
                "	SELECT 	psar.id,  \n" +
                "			CONCAT('Component_' , IFNULL(psar.lineItemID,0) , '_' , psar.level) AS id,  \n" +
                "			(CASE  \n" +
                "				WHEN  psar.level = 0 THEN  \n" +
                "					'#'  \n" +
                "				ELSE CONCAT('Component_' , IFNULL(psar.prPartLineItemID, 0), '_' , (psar.level-1))  \n" +
                "			END)AS parent,  \n" +
                "			'folder' AS type,  \n" +
                "            'rfq' AS route,  \n" +
                "			IF(psar.level = 0, TRUE, FALSE) AS isSelected,  \n" +
                "			IFNULL(psar.lineItemID,0) AS name,  \n" +
                "            IF(ISNULL(psar.prPartLineItemID), IF(ISNULL(psar.lineitemID), -1, 0), psar.prPartLineItemID) AS prPartLineItemID,  \n" +
                "            psar.level,  \n" +
                "            IFNULL(rla.mfgPNID, pPartID) partID,  \n" +
                "            IFNULL(cp.PIDCode, pPIDCode) AS text  \n" +
                "	FROM part_sub_assy_relationship psar  \n" +
                "	LEFT JOIN rfq_lineitems rl ON rl.Id = psar.lineItemID  \n" +
                "	LEFT JOIN rfq_lineitems_alternatepart rla ON rl.id = rla.rfqLineItemsID  \n" +
                "	LEFT JOIN component cp ON rla.mfgPnID = cp.id  \n" +
                "	WHERE  psar.partId= pPartID;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 21-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5858,'2.00','V1','Task 40547 & 40556: Refactor Code for BOM Levels tree list - Sproc_GetAssyBOMList - Tree View - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5858:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customer_addresses` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customer_addresses`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "	IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as  \n" +
                "  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0  \n" +
                "				AND (billingAddressID IN (',IDs,') OR shippingAddressID IN (',IDs,') OR intermediateShipmentId IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0  \n" +
                "				AND (shippingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0  \n" +
                "				AND (custShippingAddressID IN (',IDs,') OR custBillingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE refPaymentMode = \"P\"  \n" +
                "				AND (billToAddressID IN (',IDs,') OR  payToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust_refund\" else \"\" end as msg FROM packingslip_invoice_payment WHERE refPaymentMode = \"CR\"  \n" +
                "				AND (billToAddressID IN (',IDs,') OR  payToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_debit_memo\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"D\"  \n" +
                "				AND (billToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_supplier_rma\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"R\"  \n" +
                "				AND (rmaShippingAddressId IN (',IDs,') OR rmaMarkForAddressId IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_line_release_det WHERE isDeleted = 0  \n" +
                "				AND (shippingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted = 0  \n" +
                "				AND (supplierAddressID IN (',IDs,') OR shippingAddressID IN (',IDs,') OR intermediateShipmentID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0  \n" +
                "				AND (shippingAddressID IN (',IDs,') OR billingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "  \n" +
                "		    ');  \n" +
                "  \n" +
                "	/* (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			 (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND billingAddressID IN (',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingAddressID IN (',IDs,') LIMIT 1)  */  \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "	IF (countList=FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempcustomer_addresses t)=0 THEN  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "			SELECT * FROM tempcustomer_addresses WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomer_addresses t;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT SUM(t1.cnt) AS cnt,t2.display_page_name AS msg  \n" +
                "                FROM tempcustomer_addresses t1  \n" +
                "                   INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "                WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "		GROUP BY t2.display_page_name  \n" +
                "                ORDER BY t2.display_page_name  \n" +
                "                 ;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE tempcustomer_addresses;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 21-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5859,'2.00','V1',' Sproc_checkDelete_customer_addresses with grouping page - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5859:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-01-2022*********************************** */
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`, `createdBy`)  \n" +
                "VALUES ('Allow to Update Address for Customer/Supplier/Manufacturer', '1', '0',current_timestamp() , '1');  \n" +
                /* **************************** Add Script Version -> 22-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5860,'2.00','V1','Add feature to update address-#40424: Duplicate Customer Address Popup- Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5860:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_checkDelete_genericcategory;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_genericcategory`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempGenericCategory as  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND standardTypeID IN(',IDs,') LIMIT 1)  \n" +
                "		 UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment_workstation_groups\" else \"\" end as msg FROM genericcategory WHERE deletedAt IS NULL AND parentGencCategoryID IN(',IDs,') LIMIT 1)  \n" +
                "		 UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employee_department WHERE deletedAt IS NULL AND titleID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND (eqpGroupID IN(',IDs,') OR eqpSubGroupID IN(',IDs,') OR eqpTypeID IN(',IDs,') OR eqpPossessionID IN(',IDs,') OR eqpOwnershipTypeID IN(',IDs,') OR locationTypeID IN(',IDs,'))   LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operations\" else \"\" end as msg FROM operations WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"standard_message\" else \"\" end as msg FROM standard_message WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation\" else \"\" end as msg FROM workorder_operation WHERE deletedAt IS NULL AND operationTypeID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND termsID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND `separator` IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND partStatus IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employees WHERE deletedAt IS NULL AND workAreaID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL AND paymentTermsID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"document\" else \"\" end as msg FROM genericfiles WHERE deletedAt IS NULL AND fileGroupBy IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND rmacarrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND rmacarrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND rmashippingMethodId IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND rmashippingMethodId IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"DIST\" AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemst\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL and mfgType=\"MFG\" AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"shipping_method\" else \"\" end as msg FROM genericcategory WHERE deletedAt IS NULL AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"mfgcodemstSupplier\" else \"\" end as msg FROM mfgcodemst WHERE deletedAt IS NULL AND paymentMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted=0 AND carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted=0 AND shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"payable_payment_methods\" else \"\" end as msg FROM genericcategory WHERE isDeleted=0 AND paymentTypeCategoryId IN(',IDs,') AND categoryType=\"Payable Payment Method\" LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"receivable_payment_methods\" else \"\" end as msg FROM genericcategory WHERE isDeleted=0 AND paymentTypeCategoryId IN(',IDs,') AND categoryType=\"Receivable Payment Method\" LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted=0 AND termsID IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"inspection_mst\" else \"\" end as msg FROM inspection_mst WHERE isDeleted=0 AND partRequirementCategoryID IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"supplier_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted=0 AND refPaymentMode = \"P\" AND paymentType IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"supplier_refund\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted=0 AND refPaymentMode = \"RR\" AND paymentType IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then  \"workorder_serialmst\" else \"\" end as msg FROM workorder_serialmst WHERE isDeleted=0 AND barcodeSeparatorID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(ca.id) cnt ,CASE WHEN COUNT(ca.id) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses ca JOIN mfgcodemst mfg ON mfg.id = ca.customerId and mfg.mfgType=\"MFG\" and mfg.isDeleted = 0 WHERE ca.deletedAt IS NULL AND ca.shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(ca.id) cnt ,CASE WHEN COUNT(ca.id) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses ca JOIN mfgcodemst mfg ON mfg.id = ca.customerId and mfg.mfgType=\"MFG\" and mfg.isDeleted = 0  WHERE ca.deletedAt IS NULL AND ca.carrierID IN(',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "		(SELECT COUNT(ca.id) cnt ,CASE WHEN COUNT(ca.id) > 0 then \"mfgcodemstSupplier\" else \"\" end as msg FROM customer_addresses ca JOIN mfgcodemst mfg ON mfg.id = ca.customerId and mfg.mfgType=\"DIST\" and mfg.isDeleted = 0 WHERE ca.deletedAt IS NULL AND ca.shippingMethodID IN(',IDs,') LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "		(SELECT COUNT(ca.id) cnt ,CASE WHEN COUNT(ca.id) > 0 then \"mfgcodemstSupplier\" else \"\" end as msg FROM customer_addresses ca JOIN mfgcodemst mfg ON mfg.id = ca.customerId and mfg.mfgType=\"DIST\" and mfg.isDeleted = 0  WHERE ca.deletedAt IS NULL AND ca.carrierID IN(',IDs,') LIMIT 1) ');  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "-- select * from   tempGenericCategory;  \n" +
                "	IF (countList=FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempGenericCategory t)=0 THEN  \n" +
                "			SET @SQl1 = CONCAT('update genericcategory set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where gencCategoryID in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			  SELECT * FROM tempGenericCategory WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempGenericCategory t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "							   FROM tempGenericCategory t1  \n" +
                "								INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "								WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "								ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "    DROP TEMPORARY TABLE tempGenericCategory;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5861,'2.00','V1','Sproc_checkDelete_genericcategory-#40424: Duplicate Customer Address Popup-Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5861:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 22-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetAssemblyTreeViewList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyTreeViewList`(  \n" +
                "	IN pSalesOrderDetID INT,  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pViewType VARCHAR(5),  \n" +
                "    IN pIsKitAllocation TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	IF(pIsKitAllocation = 1) THEN  \n" +
                "		IF (pViewType = 'MV' OR pViewType = 'SV') THEN  \n" +
                "			SELECT  \n" +
                "                    CONCAT('Component_' , IF(ISNULL(psar.lineItemID),   0,   psar.lineItemID), '_' , psar.level) AS id,  \n" +
                "                    (CASE  \n" +
                "						WHEN  psar.level = 0 THEN  \n" +
                "							'#'  \n" +
                "						ELSE CONCAT('Component_' , IF(ISNULL(psar.prPartLineItemID), 0, psar.prPartLineItemID), '_' , (psar.level-1))  \n" +
                "					END)AS parent,  \n" +
                "					'folder' AS type,  \n" +
                "                    TRUE AS isSelected,  \n" +
                "                    (CASE  \n" +
                "						WHEN  psar.level = 0 THEN  \n" +
                "							CONCAT('<b>', cp.PIDCode, '</b>' )  \n" +
                "						ELSE  CONCAT(cp.PIDCode, ' [QPA: ',cast(kl.qpa as DECIMAL) ,']' )  \n" +
                "					END)AS text,  \n" +
                "					IF(ISNULL(psar.lineItemID), 0, psar.lineItemID) AS name,  \n" +
                "					psar.level,  \n" +
                "					IFNULL(kla.mfgPnID, pPartID) AS partID  \n" +
                "				FROM  part_sub_assy_relationship psar  \n" +
                "				LEFT JOIN kit_allocation_lineitems kl ON kl.refRfqLineitem = psar.lineItemID AND kl.refSalesOrderDetID = pSalesOrderDetID AND kl.isDeleted = 0  \n" +
                "				LEFT JOIN kit_allocation_lineitems_alternatepart kla ON kla.refKitAllocationLineItemId = kl.id AND kla.isDeleted = 0  \n" +
                "				LEFT JOIN component cp ON cp.id = IFNULL(kla.mfgPnID, pPartID)  \n" +
                "				WHERE psar.partId = pPartID AND psar.isDeleted = 0 AND (CASE WHEN pViewType = 'SV' THEN psar.level in (0,1) ELSE 1= 1 END);  \n" +
                "			ELSEIF(pViewType = 'FV') THEN  \n" +
                "				SELECT  \n" +
                "						'Component_0_ 0' AS id,  \n" +
                "						'#' AS parent,  \n" +
                "						'folder' AS type,  \n" +
                "						TRUE AS isSelected,  \n" +
                "						CONCAT('<b>', cp.PIDCode, '</b>' )  as text,  \n" +
                "						0 AS level,  \n" +
                "						0 AS name,  \n" +
                "						@pPartID AS partID  \n" +
                "					FROM salesorderdet sd JOIN component cp ON sd.partID = cp.id WHERE sd.id = pSalesOrderDetID  \n" +
                "				UNION ALL  \n" +
                "				SELECT  \n" +
                "						CONCAT('Component_' , kcl.rfqLineItemsId, '_1') AS id,  \n" +
                "						'Component_0_ 0' AS parent,  \n" +
                "						'folder' AS type,  \n" +
                "						TRUE AS isSelected,  \n" +
                "						CONCAT(cp.PIDCode, ' [QPA: ',cast(kcl.qpa as DECIMAL) ,']' ) as text,  \n" +
                "						1  AS level,  \n" +
                "						kcl.rfqLineItemsId AS name,  \n" +
                "						kcla.mfgPNID AS partID  \n" +
                "					FROM kit_allocation_consolidate_line_detail kcl  \n" +
                "					LEFT JOIN kit_allocation_consolidate_line_alternatepart kcla ON kcla.kitConsolidateID = kcl.id  AND kcla.isDeleted = 0  \n" +
                "					LEFT JOIN component cp ON kcla.mfgPnID = cp.id  \n" +
                "					WHERE kcl.refAssyId = pPartID AND kcl.refSalesOrderDetID = pSalesOrderDetID AND kcl.isDeleted = 0 AND cp.category = 3;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT  \n" +
                "			CONCAT('Component_' , IF(ISNULL(psar.lineItemID),   0,   psar.lineItemID), '_' , psar.level) AS id,  \n" +
                "			(CASE  \n" +
                "				WHEN  psar.level = 0 THEN  \n" +
                "					'#'  \n" +
                "				ELSE CONCAT('Component_' , IF(ISNULL(psar.prPartLineItemID), 0, psar.prPartLineItemID), '_' , (psar.level-1))  \n" +
                "			END)AS parent,  \n" +
                "			'folder' AS type,  \n" +
                "			TRUE AS isSelected,  \n" +
                "             (CASE WHEN  psar.level = 0 THEN  \n" +
                "					CONCAT('<b>', cp.PIDCode, '</b>' )  \n" +
                "				ELSE  CONCAT(cp.PIDCode, ' [QPA: ',cast(rl.qpa as DECIMAL) ,']' )  \n" +
                "			END)AS text,  \n" +
                "			IF(ISNULL(psar.lineItemID), 0, psar.lineItemID) AS name,  \n" +
                "			psar.level,  \n" +
                "			IFNULL(rla.mfgPnID, pPartID) AS partID  \n" +
                "		FROM  part_sub_assy_relationship psar  \n" +
                "		LEFT JOIN rfq_lineitems rl ON rl.id = psar.lineItemID  \n" +
                "		LEFT JOIN rfq_lineitems_alternatepart rla ON rla.rfqLineItemsID = rl.id AND rla.isDeleted = 0  \n" +
                "		LEFT JOIN component cp ON cp.id = IFNULL(rla.mfgPnID, pPartID)  \n" +
                "		WHERE psar.partId = pPartID AND psar.isDeleted = 0 AND (CASE WHEN pViewType = 'SV' THEN psar.level in (0,1) ELSE 1= 1 END);  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5862,'2.00','V1','Task 40570: Apply Recalculation changes into Kit List - highlight main assy - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5862:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-01-2022 *********************************** */
                "ALTER TABLE `contactperson` ADD COLUMN `phoneNumber` TEXT;  \n" +
                /* **************************** Add Script Version -> 22-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5863,'2.00','V1',' User Story 40422: Duplicate Contact Person Popup && some points of US 40421. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5863:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-01-2022 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveContactPersonList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveContactPersonList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefEntityType VARCHAR(255),  \n" +
                "	IN pisPrimary tinyint,  \n" +
                "	IN pisDefault tinyint,  \n" +
                "	IN prefName VARCHAR(255),  \n" +
                "	IN padditionalComment VARCHAR(2000)  \n" +
                "   )  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "        DECLARE mfgcodemstCondition varchar(255) DEFAULT '';  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE vMfgCodeFormat INT;  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "  \n" +
                "  		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = ' 1=1 ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefEntityType = 'Manufacturer') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'MFG'\");  \n" +
                "		ELSEIF (prefEntityType = 'Supplier') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisPrimary) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isPrimary = '\",pisPrimary,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisDefault) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isDefault = '\",pisDefault,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefName IS NOT NULL AND prefName != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND refName LIKE '%\",prefName,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(padditionalComment IS NOT NULL AND padditionalComment != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND additionalComment LIKE '%\",padditionalComment,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # Common Details for Retrive Contact Person.  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_Common = CONCAT(\"  \n" +
                "			fun_GetFormattedContactPersonName(a.firstName, a.middleName, a.lastName) formattedName,  \n" +
                "			fun_getUserNameByID(a.updatedBy) updatedbyValue, fun_getUserNameByID(a.createdBy) createdbyValue,  \n" +
                "			fun_getRoleByID(a.createByRoleId) createdbyRoleValue, fun_getRoleByID(a.updateByRoleId) updatedbyRoleValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "			(CASE WHEN (a.systemGenerated = 0) THEN 'No' WHEN (a.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `syatemGeneratedValue`,  \n" +
                "			(CASE WHEN (a.isDefault = 0) THEN 'No' WHEN (a.isDefault = 1) THEN 'Yes' ELSE '' END) AS `isDefaultValue`,  \n" +
                "			(CASE WHEN (a.isPrimary = 0) THEN 'No' WHEN (a.isPrimary = 1) THEN 'Yes' ELSE '' END) AS `isPrimaryValue`  \n" +
                "		\");  \n" +
                "  \n" +
                "		# Filter: Personnel  \n" +
                "		SET @temp_Sproc_RetrieveMasterTemplate_employees = CONCAT(\"  \n" +
                "			select cp.personId, ecp.employeeId AS refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment, cp.phoneNumber,  \n" +
                "					cp.phone, cp.mobile, cp.division, cp.faxNumber, cp.phExtension, cp.isPrimary, cp.systemGenerated, '' As refName, 'Personnel' AS refEntityType,  \n" +
                "                    fun_convertJsonEmailToCommaSepList(cp.email) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive,  \n" +
                "                    fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName,\",vEmployeeNameFormat,\") personnel,  \n" +
                "                    (SELECT GROUP_CONCAT(jsonTblPhone.phone, ' Ext.' ,jsonTblPhone.phExtension ) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40)  PATH '$.phExtension')) jsonTblPhone ) phoneNumberList,  \n" +
                "					cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "				FROM contactperson cp  \n" +
                "                LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "				LEFT JOIN employees emp ON emp.id = ecp.employeeId and emp.isDeleted = 0  \n" +
                "					WHERE cp.refTableName = 'employees' AND cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # Filter: Manufacturer AND Supplier  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_mfgcodemst = CONCAT(\"  \n" +
                "			select cp.personId, cp.refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment, cp.phoneNumber,  \n" +
                "					cp.phone, cp.mobile, cp.division, cp.faxNumber, cp.phExtension, cp.isPrimary, cp.systemGenerated, fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName, \",vMfgCodeFormat,\") AS refName,  \n" +
                "					(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "					(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive, '' AS personnels,  \n" +
                "                    (SELECT GROUP_CONCAT(jsonTblPhone.phone, ' Ext.' ,jsonTblPhone.phExtension ) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40)  PATH '$.phExtension')) jsonTblPhone ) phoneNumberList,  \n" +
                "                    cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "                FROM contactperson cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID and mfg.isDeleted = 0 \",mfgcodemstCondition,\"  \n" +
                "						WHERE cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # UNION Records based of Filer : Create Final Query for Fetch Contact Person Records.  \n" +
                "        IF(prefEntityType = 'Supplier' OR prefEntityType = 'Manufacturer') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "		ELSEIF (prefEntityType = 'Personnel') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\") a \");  \n" +
                "        ELSE  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate= CONCAT(\"select *,\",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\" UNION ALL \",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY firstName ASC\" ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		 /* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveMasterTemplate,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveMasterTemplate,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 22-01-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetContactPersonForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetContactPersonForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE vEmployeeNameFormat INT;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1)  \n" +
                "		FROM `contactperson`  \n" +
                "		WHERE `isDeleted` = 0 AND `personId` = IFNULL(pId,`personId`);  \n" +
                "	ELSE  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.phone, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, cp.phExtension, ecp.employeeId AS refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName) fullName, 'Personnel' AS refEntityType,  \n" +
                "				null AS refName, fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName, vEmployeeNameFormat) personnels,  \n" +
                "                fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "                (SELECT GROUP_CONCAT(jsonTblPhone.phone, ' Ext.' ,jsonTblPhone.phExtension ) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) phoneNumberList,  \n" +
                "				null AS isDefault,  \n" +
                "				null AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) status,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "			LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "			LEFT JOIN employees emp ON emp.id = ecp.employeeId and emp.isDeleted = 0  \n" +
                "				WHERE `personId` = IFNULL(pId,`personId`) AND cp.refTableName ='employees'  \n" +
                "				AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END)  \n" +
                "		UNION ALL  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.phone, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, cp.phExtension, cp.refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName) fullName,  \n" +
                "				(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "                fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,vMfgCodeFormat) AS refName,  null As personnels,  \n" +
                "                fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "                (SELECT GROUP_CONCAT(jsonTblPhone.phone, ' Ext.' ,jsonTblPhone.phExtension ) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) phoneNumberList,  \n" +
                "				(CASE WHEN (cp.isDefault = 0) THEN 'No'  \n" +
                "					WHEN (cp.isDefault = 1) THEN 'Yes' ELSE '' END) AS isDefault,  \n" +
                "				(CASE WHEN (cp.isPrimary = 0) THEN 'No'  \n" +
                "					WHEN (cp.isPrimary = 1) THEN 'Yes' ELSE '' END) AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) status,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID and mfg.isDeleted = 0  \n" +
                "			WHERE `personId` = IFNULL(pId,`personId`)  \n" +
                "				AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-01-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_contactperson`;  \n" +
                "CREATE TRIGGER `Trg_AU_contactperson` AFTER UPDATE ON `contactperson` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_createdAt DATETIME DEFAULT fun_DatetimetoUTCDateTime();  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"contactperson\";  \n" +
                "  \n" +
                "	IF IFNULL(OLD.firstName,0) != IFNULL(NEW.firstName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'First Name',CAST(OLD.firstName AS CHAR), CAST(NEW.firstName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'firstName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.lastName,0) != IFNULL(NEW.lastName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Last Name',CAST(OLD.lastName AS CHAR), CAST(NEW.lastName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'lastName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Email',CAST((SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(OLD.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails) AS CHAR),  \n" +
                "			CAST(( SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(NEW.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails)AS CHAR), v_createdAt,NEW.createdBy,v_createdAt,  \n" +
                "            NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'email'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phone,0) != IFNULL(NEW.phone,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Phone',CAST(OLD.phone AS CHAR), CAST(NEW.phone AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phone'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mobile,0) != IFNULL(NEW.mobile,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Mobile',CAST(OLD.mobile AS CHAR), CAST(NEW.mobile AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'mobile'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.division,0) != IFNULL(NEW.division,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Department',CAST(OLD.division AS CHAR), CAST(NEW.division AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'division'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'faxNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phExtension,0) != IFNULL(NEW.phExtension,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Ext.',CAST(OLD.phExtension AS CHAR), CAST(NEW.phExtension AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phExtension'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.middleName,0) != IFNULL(NEW.middleName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Middle Name',CAST(OLD.middleName AS CHAR), CAST(NEW.middleName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'middleName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDefault,0) != IFNULL(NEW.isDefault,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Set as Default \"Attention to\"',CAST((CASE WHEN OLD.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isDefault'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.additionalComment,0) != IFNULL(NEW.additionalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Comment',CAST(OLD.additionalComment AS CHAR), CAST(NEW.additionalComment AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'longtext');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPrimary,0) != IFNULL(NEW.isPrimary,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Primary Person',CAST((CASE WHEN OLD.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isPrimary'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(OLD.refTableName,0) != IFNULL(NEW.refTableName,0) OR IFNULL(OLD.refTransID,0) != IFNULL(NEW.refTransID,0) ) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Contact Person Type',CAST((CASE WHEN (OLD.refTableName = 'employees') THEN 'Personnel' WHEN (OLD.refTableName = 'mfgcodemst') THEN (SELECT (CASE  \n" +
                "			WHEN a.mfgType = 'MFG' THEN 'Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = OLD.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "			CAST((CASE WHEN (NEW.refTableName = 'employees') THEN 'Personnel' WHEN (NEW.refTableName = 'mfgcodemst') THEN (SELECT (CASE WHEN a.mfgType = 'MFG' THEN 'Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = NEW.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "             v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'refTableName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.title,0) != IFNULL(NEW.title,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Title',CAST(OLD.title AS CHAR), CAST(NEW.title AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'title'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Status',CAST((CASE WHEN OLD.isActive = '1' THEN 'Active' ELSE 'Inactive' END) AS CHAR), CAST((CASE WHEN NEW.isActive = '1' THEN 'Active' ELSE 'Inactive' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phoneNumber,0) != IFNULL(NEW.phoneNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Phone Numbers',  \n" +
                "        CAST((SELECT GROUP_CONCAT(jsonTblPhone.phone, ' Ext.' ,jsonTblPhone.phExtension ) from JSON_TABLE(OLD.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) AS CHAR),  \n" +
                "		CAST((SELECT GROUP_CONCAT(jsonTblPhone.phone, ' Ext.' ,jsonTblPhone.phExtension ) from JSON_TABLE(NEW.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) AS CHAR),  \n" +
                "        v_createdAt,NEW.createdBy,v_createdAt, NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phoneNumber'));  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5864,'2.00','V1',' User Story 40422: Duplicate Contact Person Popup && some points of US 40421. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5864:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "INSERT INTO table_mapping_details(`tabel_name`,`display_page_name`,`createByRoleId`)  \n" +
                "VALUES ('salesshippingmst','Sales Order',1) ,  \n" +
                "	('purchase_order_line_release_det','Purchase Order',1) ;  \n" +
                /* **************************** Add Script Version -> 24-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5865,'2.00','V1',' table_mapping_details new entry - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5865:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customer_addresses` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customer_addresses`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "	IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as  \n" +
                "  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0  \n" +
                "				AND (billingAddressID IN (',IDs,') OR shippingAddressID IN (',IDs,') OR intermediateShipmentId IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesshippingmst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0  \n" +
                "				AND (shippingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0  \n" +
                "				AND (custShippingAddressID IN (',IDs,') OR custBillingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE refPaymentMode = \"P\"  \n" +
                "				AND (billToAddressID IN (',IDs,') OR  payToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust_refund\" else \"\" end as msg FROM packingslip_invoice_payment WHERE refPaymentMode = \"CR\"  \n" +
                "				AND (billToAddressID IN (',IDs,') OR  payToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_debit_memo\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"D\"  \n" +
                "				AND (billToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_supplier_rma\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"R\"  \n" +
                "				AND (rmaShippingAddressId IN (',IDs,') OR rmaMarkForAddressId IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_line_release_det\" else \"\" end as msg FROM purchase_order_line_release_det WHERE isDeleted = 0  \n" +
                "				AND (shippingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted = 0  \n" +
                "				AND (supplierAddressID IN (',IDs,') OR shippingAddressID IN (',IDs,') OR intermediateShipmentID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0  \n" +
                "				AND (shippingAddressID IN (',IDs,') OR billingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "  \n" +
                "		    ');  \n" +
                "  \n" +
                "	/* (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			 (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND billingAddressID IN (',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingAddressID IN (',IDs,') LIMIT 1)  */  \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "	IF (countList=FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempcustomer_addresses t)=0 THEN  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "			SELECT * FROM tempcustomer_addresses WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomer_addresses t;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT SUM(t1.cnt) AS cnt,t2.display_page_name AS msg  \n" +
                "                FROM tempcustomer_addresses t1  \n" +
                "                   INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "                WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "		GROUP BY t2.display_page_name  \n" +
                "                ORDER BY t2.display_page_name  \n" +
                "                 ;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE tempcustomer_addresses;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5866,'2.00','V1',' Sproc_checkDelete_customer_addresses - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5866:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "drop trigger if exists `Trg_AU_packingslip_invoice_payment`;  \n" +
                "CREATE TRIGGER `Trg_AU_packingslip_invoice_payment` AFTER UPDATE ON `packingslip_invoice_payment` FOR EACH ROW BEGIN  \n" +
                "	if NEW.refPaymentMode in ('P','RR') then  \n" +
                "		/*if OLD.isPaymentVoided = false and NEW.isPaymentVoided = true then  \n" +
                "			update packing_slip_material_receive m  \n" +
                "				set m.`status` = 'A',  \n" +
                "					m.updatedBy = NEW.updatedBy,  \n" +
                "					m.updatedAt = NEW.updatedAt,  \n" +
                "					m.updateByRoleId = NEW.updateByRoleId  \n" +
                "			 where exists (select 1  \n" +
                "							 from packingslip_invoice_payment_det a  \n" +
                "							where a.refPackingslipInvoiceID = m.id  \n" +
                "							  and a.refPayementid = NEW.id);  \n" +
                "		else*/if (OLD.isPaymentVoided = true and NEW.isPaymentVoided = false) then  \n" +
                "			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT= 'Wrong transaction, please contact Administrator.';  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "END;  \n" +
                "DROP procedure IF EXISTS `Sproc_UpdateSupplierPackingSlipStatusAfterVoidPayment`;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateSupplierPackingSlipStatusAfterVoidPayment`(  \n" +
                "	IN pVoidPaymentId int,  \n" +
                "	IN pRefPaymentModeOfInvPayment VARCHAR(10),  \n" +
                "	IN pUserID VARCHAR(50),  \n" +
                "	IN pUserRoleID VARCHAR(50)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	drop temporary table if exists temp_paymentIds;  \n" +
                "	create temporary table temp_paymentIds(  \n" +
                "    id int not null,  \n" +
                "    refPackingslipInvoiceID int not null,  \n" +
                "    paymentAmount decimal(18,8),  \n" +
                "    extendedPrice decimal(18,8)  \n" +
                "    );  \n" +
                "  \n" +
                "    /*getting invoice CM DM ids based on payment id*/  \n" +
                "    insert into temp_paymentIds(id, refPackingslipInvoiceID)  \n" +
                "	select a.id, a.refPackingslipInvoiceID  \n" +
                "	  from packingslip_invoice_payment_det a  \n" +
                "	 where refPayementid = pVoidPaymentId;  \n" +
                "  \n" +
                "     /*updating invoice extended and payment amount in temp table*/  \n" +
                "     update temp_paymentIds tp  \n" +
                "        set extendedPrice = (SELECT IFNULL(SUM(b.extendedPrice),0)  \n" +
                "							   FROM packing_slip_material_receive a  \n" +
                "							   JOIN packing_slip_material_receive_det b ON b.refPackingSlipMaterialRecID = a.id  \n" +
                "							  WHERE a.id = tp.refPackingslipInvoiceID  \n" +
                "								AND a.isDeleted = 0  \n" +
                "								AND b.isDeleted = 0),  \n" +
                "			paymentAmount = (SELECT ifnull(sum(b.paymentAmount),0)  \n" +
                "									/*below commented line: Void and Re-issue payment time creating issue for Invoice payment record. for CM and DM records works fine */  \n" +
                "									/*ifnull(sum(case when b.paymentAmount > 0 then (b.paymentAmount *-1) else b.paymentAmount end),0)*/  \n" +
                "							   FROM packingslip_invoice_payment_det b  \n" +
                "							  WHERE b.refPackingslipInvoiceID = tp.refPackingslipInvoiceID  \n" +
                "								AND exists (select 1 from packingslip_invoice_payment a where a.id = b.refPayementid and a.refPaymentMode in ('P','RR'))  \n" +
                "								AND b.isPaymentVoided = 0  \n" +
                "								AND b.isDeleted = 0  \n" +
                "								AND b.refCustPackingslipInvoiceID IS NULL);  \n" +
                "  \n" +
                "	/*update invoice CM DM status based on payment amount*/  \n" +
                "	update packing_slip_material_receive i  \n" +
                "      join temp_paymentIds tp ON tp.refPackingslipInvoiceID = i.id  \n" +
                "	   set i.status = (case when tp.paymentAmount <> 0 and ROUND((tp.extendedPrice - tp.paymentAmount),2) = 0 then 'P'  \n" +
                "							when tp.paymentAmount <> 0 and ROUND((tp.extendedPrice - tp.paymentAmount),2) <> 0 then 'PP'  \n" +
                "                            else 'A' end)  \n" +
                "     where i.isDeleted = 0;  \n" +
                "  \n" +
                "     /*update packing slip status based on invoice payment amount*/  \n" +
                "     update packing_slip_material_receive i  \n" +
                "      join temp_paymentIds tp ON tp.refPackingslipInvoiceID = i.refPackingSlipNumberForInvoice  \n" +
                "	   set i.status = (case when tp.paymentAmount <> 0 and ROUND((tp.extendedPrice - tp.paymentAmount),2) = 0 then 'P'  \n" +
                "							when tp.paymentAmount <> 0 and ROUND((tp.extendedPrice - tp.paymentAmount),2) <> 0 then 'PP'  \n" +
                "                            else 'A' end)  \n" +
                "     where i.isDeleted = 0;  \n" +
                "	drop temporary table if exists temp_paymentIds;  \n" +
                "    END;  \n" +
                "Drop procedure if exists `Sproc_InvoicePaymentVoidAndReIssue`;  \n" +
                "CREATE PROCEDURE `Sproc_InvoicePaymentVoidAndReIssue`(  \n" +
                "	IN pSystemId VARCHAR(20),  \n" +
                "	IN pRefVoidPaymentId INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pRemark VARCHAR(255),  \n" +
                "	IN pPayToName VARCHAR(255),  \n" +
                "	IN pPayToAddressID INT,  \n" +
                "	IN pPayToAddress VARCHAR(255),  \n" +
                "	IN pPayToContactPersonID INT,  \n" +
                "	IN pPayToContactPerson VARCHAR(255),  \n" +
                "	IN pBillToAddressID INT,  \n" +
                "	IN pBillToAddress VARCHAR(255),  \n" +
                "	IN pBillToContactPersonID INT,  \n" +
                "	IN pBillToContactPerson VARCHAR(255),  \n" +
                "	IN pVoidPaymentReason VARCHAR(255),  \n" +
                "	IN pRefPaymentModeOfInvPayment VARCHAR(2),  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pisConfmTakenForDuplicateCheckNo TINYINT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vCount INT;  \n" +
                "	DECLARE vCountExistsCheckNo INT;  \n" +
                "	DECLARE vNewPaymentID INT;  \n" +
                "	DECLARE vOldPaymentOrCheckNo VARCHAR(50);  \n" +
                "	DECLARE vPMTLockStatus VARCHAR(5) DEFAULT '';  \n" +
                "	DECLARE vPMTRefundStatus VARCHAR(5) DEFAULT '';  \n" +
                "  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "  \n" +
                "	/* pRefPaymentModeOfInvPayment >> P-Payable   R-Receivable */  \n" +
                "	SELECT 	COUNT(1)   INTO 	vCount  \n" +
                "	FROM 	packingslip_invoice_payment  \n" +
                "	WHERE 	id = pRefVoidPaymentId  \n" +
                "	AND isPaymentVoided = 0  \n" +
                "	AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "  \n" +
                "  \n" +
                "	SET vCountExistsCheckNo = 0;  \n" +
                "  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'P') THEN  \n" +
                "		/*check duplicate check number validation*/  \n" +
                "		SELECT 	COUNT(1)  INTO 	vCountExistsCheckNo  \n" +
                "		FROM 	packingslip_invoice_payment  \n" +
                "		WHERE 	isdeleted = 0  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND bankAccountMasID = pBankAccountMasID  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "	 ELSEIF (pRefPaymentModeOfInvPayment = 'R' AND pisConfmTakenForDuplicateCheckNo = 0) THEN  \n" +
                "		/* check duplicate check number if confirmation not taken */  \n" +
                "		SELECT COUNT(1) INTO vCountExistsCheckNo  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
                "		AND paymentNumber = pPaymentNumber  \n" +
                "		AND mfgcodeID = pMfgcodeID  \n" +
                "		AND isdeleted = 0    ;  \n" +
                "	 END IF;  \n" +
                "  \n" +
                "	IF (pRefPaymentModeOfInvPayment = 'R') THEN  \n" +
                "		/* if Receivable payment and already locked/refunded payment then not allowed to void and rereceive */  \n" +
                "		SELECT lockStatus, refundStatus INTO vPMTLockStatus, vPMTRefundStatus  \n" +
                "		FROM packingslip_invoice_payment  \n" +
                "		WHERE id = pRefVoidPaymentId  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
                "		AND isPaymentVoided = 0 AND isDeleted = 0;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (vCount = 1 AND vCountExistsCheckNo = 0 AND vPMTLockStatus != 'LC' AND vPMTRefundStatus != 'PR' AND vPMTRefundStatus != 'FR') THEN  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment transaction*/  \n" +
                "		INSERT INTO packingslip_invoice_payment  \n" +
                "				(systemId, mfgcodeID, paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID,  \n" +
                "				bankAccountNo, bankName, remark, createdBy, createByRoleId,  \n" +
                "				updatedBy, updateByRoleId, refVoidedPaymentNumber, refVoidedPaymentId, refPaymentMode,  \n" +
                "				isZeroPayment, depositBatchNumber,  \n" +
                "				lockStatus, refundStatus,  \n" +
                "                payToName, payToAddressID, payToAddress, payToContactPersonID, payToContactPerson,  \n" +
                "                billToName, billToAddressID, billToAddress, billToContactPersonID, billToContactPerson)  \n" +
                "		SELECT 	pSystemId, mfgcodeID, pPaymentNumber, pPaymentDate, paymentAmount, pPaymentType, pAccountReference, pBankAccountMasID,  \n" +
                "				pBankAccountNo, pBankName, pRemark, pUserID, pRoleID,  \n" +
                "				pUserID, pRoleID, paymentNumber, id, refPaymentMode,  \n" +
                "				isZeroPayment, pDepositBatchNumber,  \n" +
                "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN  (CASE WHEN lockStatus = 'LC' THEN 'RL' ELSE lockStatus END)  \n" +
                "					WHEN pRefPaymentModeOfInvPayment = 'P' THEN 'RL'  \n" +
                "					ELSE NULL END),  \n" +
                "				(CASE WHEN pRefPaymentModeOfInvPayment = 'R' THEN 'NA' ELSE NULL END),  \n" +
                "                pPayToName, pPayToAddressID, pPayToAddress, pPayToContactPersonID, pPayToContactPerson,  \n" +
                "                billToName, pBillToAddressID, pBillToAddress, pBillToContactPersonID, pBillToContactPerson  \n" +
                "		FROM 	packingslip_invoice_payment  \n" +
                "		WHERE 	id = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "  \n" +
                "		SET vNewPaymentID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		/*update payment void flag in detail table*/  \n" +
                "		UPDATE 	packingslip_invoice_payment_det  \n" +
                "		SET 	isPaymentVoided = 1,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pRoleID,  \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment detail transaction*/  \n" +
                "		INSERT INTO packingslip_invoice_payment_det  \n" +
                "				(refPayementid, refPackingslipInvoiceID, createdBy, createByRoleId, updatedBy, updateByRoleId, paymentAmount,  \n" +
                "				isPaymentVoided, refCustPackingslipInvoiceID)  \n" +
                "		SELECT 	vNewPaymentID, refPackingslipInvoiceID, pUserID, pRoleID,  \n" +
                "			pUserID, pRoleID, paymentAmount,  \n" +
                "			FALSE, refCustPackingslipInvoiceID  \n" +
                "		FROM 	packingslip_invoice_payment_det  \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		/*void payment*/  \n" +
                "		UPDATE 	packingslip_invoice_payment  \n" +
                "		SET 	voidPaymentReason = pVoidPaymentReason,  \n" +
                "			isPaymentVoided = 1,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pRoleID,  \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	id = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment ;  \n" +
                "  \n" +
                "  \n" +
                "		SELECT vNewPaymentID refPayementid;  \n" +
                "	ELSE  \n" +
                "		IF vCountExistsCheckNo != 0 THEN  \n" +
                "			SELECT 'DUPLICATE_CHECKNO' AS message;  \n" +
                "		ELSEIF vCount = 0 THEN  \n" +
                "			IF (pRefPaymentModeOfInvPayment = 'R' AND (SELECT COUNT(1) FROM packingslip_invoice_payment WHERE id = pRefVoidPaymentId  \n" +
                "									AND isPaymentVoided = 1  AND refPaymentMode = pRefPaymentModeOfInvPayment) > 0) THEN  \n" +
                "				SELECT 'ALREADY_VOIDED' AS message;  \n" +
                "			ELSE  \n" +
                "				SELECT 'NOT_FOUND' AS message;  \n" +
                "			END IF;  \n" +
                "		ELSEIF vPMTLockStatus = 'LC' THEN  \n" +
                "			SELECT 'ALREADY_LOCKED' AS message;  \n" +
                "		ELSEIF (pRefPaymentModeOfInvPayment = 'R' AND (vPMTRefundStatus = 'PR' OR vPMTRefundStatus = 'FR')) THEN  \n" +
                "			SELECT 'ALREADY_PMT_REFUNDED' AS message;  \n" +
                "		ELSE  \n" +
                "			SELECT 'NOT_FOUND' AS message;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                "drop procedure if exists `Sproc_RetrieveSupplierInvoicePayment`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pSupplierIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "    IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "    IN pRefPaymentMode VARCHAR(2),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pSelectedDateType VARCHAR(10),  \n" +
                "    IN pPaymentComments VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPaymentComments IS NOT NULL AND pPaymentComments != '')THEN  \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause,\" AND remark LIKE '%\",pPaymentComments,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause,\" AND lockStatus = '\", pLockStatusFilter ,\"'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "			EXISTS (select 1  \n" +
                "					   from packing_slip_material_receive psd  \n" +
                "					   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "					  where psd.isDeleted = 0  \n" +
                "						and pdet.refPayementid = inv.id  \n" +
                "						AND psd.invoiceNumber = \"',pInvoiceNumber,'\"  \n" +
                "				)'  \n" +
                "		);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pFromDate IS NOT NULL AND pToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.poDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.receiptDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.packingSlipDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		END IF;  \n" +
                "	ELSEIF pFromDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.poDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.receiptDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.packingSlipDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.invoiceDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate = '\",pFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"  \n" +
                "		SELECT		inv.id,  \n" +
                "				inv.systemId,  \n" +
                "				inv.mfgcodeID,  \n" +
                "				m.mfgCode supplier,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') supplierCodeName,  \n" +
                "				inv.isPaymentVoided,  \n" +
                "				case 	when inv.isPaymentVoided = 0 then  \n" +
                "						'Paid'  \n" +
                "					else  \n" +
                "						'Voided'  \n" +
                "				end isPaymentVoidedConvertedValue,  \n" +
                "				inv.voidPaymentReason,  \n" +
                "				inv.refVoidedPaymentNumber,  \n" +
                "                inv.refVoidedPaymentId,  \n" +
                "                (select c.lockStatus from packingslip_invoice_payment c  \n" +
                "					where c.id = inv.refVoidedPaymentId) refVoidedPaymentLockStatus,  \n" +
                "				inv.paymentNumber,  \n" +
                "				inv.bankName,  \n" +
                "				inv.bankAccountNo,  \n" +
                "				inv.paymentType,  \n" +
                "				inv.bankAccountMasID,  \n" +
                "				gc.gencCategoryName paymentMethod,  \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "				inv.paymentDate,  \n" +
                "				invdet.invoiceAmount,  \n" +
                "				inv.paymentAmount,  \n" +
                "				inv.payToName,  \n" +
                "                fun_getAddressbyIDForCheckPrint(inv.payToAddressID, inv.payToContactPersonID) payToAddress,  \n" +
                "                fun_getAddressbyIDForCheckPrint(inv.billToAddressID, inv.billToContactPersonID) billToAddress,  \n" +
                "                inv.refGencTransModeID,  \n" +
                "                gtm.modeName transactionModeName,  \n" +
                "                gtm.systemGenerated systemGeneratedTransactionMode,  \n" +
                "				inv.accountReference,  \n" +
                "				inv.remark,  \n" +
                "                inv.depositBatchNumber,  \n" +
                "                inv.offsetAmount,  \n" +
                "                inv.acctId,  \n" +
                "                fun_getChartOfAccountsCodeNameByID(inv.acctId) coaName,  \n" +
                "				fun_getUserNameByID(inv.createdBy) createdby,  \n" +
                "				fun_getUserNameByID(inv.updatedBy) updatedby,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,  \n" +
                "				fun_getRoleByID(inv.createByRoleId) createdbyRole,  \n" +
                "				inv.lockStatus,  \n" +
                "				(case when inv.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "					when inv.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "					when inv.lockStatus = 'LC' then 'Locked'  \n" +
                "					else null end  \n" +
                "				) lockStatusValue,  \n" +
                "				fun_getUserNameByID(inv.lockedBy) lockByName,  \n" +
                "				fun_getRoleByID(inv.lockedByRoleId) lockedByRoleName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM	packingslip_invoice_payment inv  \n" +
                "        join mfgcodemst m ON m.id = inv.mfgcodeID  \n" +
                "		INNER JOIN 	genericcategory gc ON inv.paymentType = gc.gencCategoryID  \n" +
                "        left join generic_transmode_mst gtm ON gtm.id = inv.refGencTransModeID  \n" +
                "		left JOIN (  \n" +
                "					SELECT 		pid.refPayementid,	SUM(psmd.extendedPrice) invoiceAmount  \n" +
                "					FROM 		packingslip_invoice_payment_det pid  \n" +
                "					LEFT JOIN 	packing_slip_material_receive_det psmd ON psmd.refPackingSlipMaterialRecID = pid.refPackingslipInvoiceID AND psmd.isDeleted = 0  \n" +
                "					WHERE 		pid.isDeleted = 0  \n" +
                "                       and		pid.isPaymentVoided = 0  \n" +
                "					GROUP BY 	pid.refPayementid  \n" +
                "				) invdet ON invdet.refPayementid = inv.id  \n" +
                "		WHERE 		inv.isDeleted = 0  \n" +
                "					AND inv.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "					AND gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5867,'2.00','V1','Bug 40514: Selected Address should get carry forward to New payment if user do Void & Reissue payment - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5867:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_packing_slip_material_receive_det`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_packing_slip_material_receive_det`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE v_StartIndex INT;  \n" +
                "		DECLARE v_EndIndex INT;  \n" +
                "		DECLARE v_Id VARCHAR(10);  \n" +
                "		DECLARE v_InvoiceId INT;  \n" +
                "		DECLARE v_InvoiceDetailId INT;  \n" +
                "		DECLARE v_MainInvoiceId INT;  \n" +
                "		DECLARE v_MemoIds VARCHAR(10000);  \n" +
                "		DECLARE v_UpdatedMemoIds VARCHAR(10000);  \n" +
                "		DECLARE v_InvoiceTotalDue DECIMAL(18,8);  \n" +
                "		DECLARE v_CurrentLineExtendedPrice DECIMAL(18,8);  \n" +
                "		DECLARE v_CountOfMemo INT;  \n" +
                "		DECLARE v_IsMemoForPrice TINYINT;  \n" +
                "		DECLARE v_IsMemoForQty TINYINT;  \n" +
                "		SET v_StartIndex = 0;  \n" +
                "		SET @SQl2 = CONCAT('UPDATE packing_slip_material_receive_part_inspection_det SET isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" WHERE lineId IN(', IDs, ') AND deletedAt IS NULL');  \n" +
                "		PREPARE stmt2 FROM @SQL2;  \n" +
                "        EXECUTE stmt2;  \n" +
                "		DEALLOCATE PREPARE stmt2;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Split_Ids_String_Into_Table;  \n" +
                "		CREATE TEMPORARY TABLE temp_Split_Ids_String_Into_Table (id VARCHAR(10));  \n" +
                "		SET @SQL3 = CONCAT(\"INSERT INTO temp_Split_Ids_String_Into_Table (id) values ('\", REPLACE((IDs),',', \"'),('\"),\"');\");  \n" +
                "        PREPARE stmt3 FROM @SQL3;  \n" +
                "		EXECUTE stmt3;  \n" +
                "        DEALLOCATE PREPARE stmt3;  \n" +
                "		SELECT COUNT(1) INTO v_EndIndex FROM temp_Split_Ids_String_Into_Table;  \n" +
                "		WHILE v_StartIndex < v_EndIndex DO  \n" +
                "			SELECT id INTO v_Id FROM temp_Split_Ids_String_Into_Table LIMIT 1 OFFSET v_StartIndex;  \n" +
                "			SELECT refPackingSlipMaterialRecID, refPackingSlipDetId, isMemoForPrice, isMemoForQty INTO v_InvoiceId, v_InvoiceDetailId, v_IsMemoForPrice, v_IsMemoForQty FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;  \n" +
                "            SELECT COUNT(1) INTO v_CountOfMemo FROM packing_slip_material_receive WHERE id = v_InvoiceId AND (receiptType = 'C' OR receiptType = 'D');  \n" +
                "			IF (v_CountOfMemo > 0) THEN  \n" +
                "				SELECT refPackingSlipMaterialRecID, refCreditDebitInvoiceNo INTO v_MainInvoiceId, v_MemoIds FROM packing_slip_material_receive_det WHERE id = v_InvoiceDetailId AND isDeleted = 0;  \n" +
                "				IF (v_MemoIds IS NOT NULL) THEN  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_Split_String_Into_Table;  \n" +
                "					CREATE TEMPORARY TABLE temp_Split_String_Into_Table (lineId VARCHAR(10));  \n" +
                "                    SET @SQL4 = CONCAT(\"INSERT INTO temp_Split_String_Into_Table (lineId) values ('\", REPLACE((v_MemoIds),',', \"'),('\"),\"');\");  \n" +
                "					PREPARE stmt4 FROM @SQL4;  \n" +
                "                    EXECUTE stmt4;  \n" +
                "                    DEALLOCATE PREPARE stmt4;  \n" +
                "					UPDATE 	packing_slip_material_receive SET 	`status` = 'I'  \n" +
                "					WHERE 	id = v_MainInvoiceId AND receiptType = 'I' AND isDeleted = 0;  \n" +
                "					SELECT IFNULL(invoiceTotalDue, 0) INTO v_InvoiceTotalDue FROM packing_slip_material_receive WHERE id = v_InvoiceId AND isDeleted = 0;  \n" +
                "					SELECT ABS(IFNULL(extendedPrice, 0)) INTO v_CurrentLineExtendedPrice FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;  \n" +
                "					UPDATE 	packing_slip_material_receive SET 	`status` = 'A', invoiceTotalDue = (v_InvoiceTotalDue - v_CurrentLineExtendedPrice)  \n" +
                "					WHERE 	id = v_InvoiceId AND isDeleted = 0;  \n" +
                "					UPDATE 	packing_slip_material_receive ps  \n" +
                "					SET 	ps.`status` = (CASE WHEN ps.packingSlipModeStatus = 'D' THEN 'I' ELSE 'IR' END)  \n" +
                "					WHERE 	ps.refPackingSlipNumberForInvoice = v_MainInvoiceId AND ps.receiptType = 'P' AND ps.isDeleted = 0;  \n" +
                "					UPDATE 	packing_slip_material_receive_det SET 	isDeleted = 1, deletedBy = deletedBy, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "                    WHERE 	id = v_Id AND isDeleted = 0;  \n" +
                "					IF ((SELECT COUNT(1) FROM packing_slip_material_receive_det WHERE refPackingSlipMaterialRecID = v_InvoiceId AND refPackingSlipDetId = v_InvoiceDetailId AND isDeleted = 0) = 0) THEN  \n" +
                "						DELETE FROM temp_Split_String_Into_Table WHERE lineId = v_InvoiceId;  \n" +
                "					END IF;  \n" +
                "					SELECT GROUP_CONCAT(lineId) INTO v_UpdatedMemoIds  FROM temp_Split_String_Into_Table;  \n" +
                "					UPDATE 	packing_slip_material_receive_det SET 	`status` = 'D', refCreditDebitInvoiceNo = v_UpdatedMemoIds, isMemoForPrice = (CASE WHEN v_IsMemoForPrice = 1 THEN 0 ELSE isMemoForPrice END),  \n" +
                "					isMemoForQty = (CASE WHEN v_IsMemoForQty = 1 THEN 0 ELSE isMemoForQty END), difference = (CASE WHEN v_IsMemoForPrice = 1 THEN NULL ELSE difference END), differenceQty = (CASE WHEN v_IsMemoForQty = 1 THEN NULL ELSE differenceQty END)  \n" +
                "					WHERE 	id = v_InvoiceDetailId AND isDeleted = 0;  \n" +
                "				ELSE  \n" +
                "					IF ((SELECT receiptType FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = v_InvoiceId AND isDeleted = 0) = 'R') THEN  \n" +
                "						UPDATE 	packing_slip_material_receive SET 	`status` = 'WC', packingSlipModeStatus = 'S'  \n" +
                "						WHERE  	refPackingSlipNumberForInvoice = v_InvoiceId AND isDeleted = 0;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive_det SET 	isDeleted = 1, deletedBy = deletedBy, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "					WHERE 	id = v_Id AND isDeleted = 0;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				UPDATE 	packing_slip_material_receive_det SET 	isDeleted = 1, deletedBy = deletedBy, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	id = v_Id AND isDeleted = 0;  \n" +
                "			END IF;  \n" +
                "			SET v_StartIndex = v_StartIndex + 1;  \n" +
                "		END WHILE;  \n" +
                "		/*SET @SQl1 = CONCAT('update packing_slip_material_receive_det set isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" where id IN(', IDs, ') and deletedAt is NULL');  \n" +
                "		PREPARE stmt1 FROM @SQL1;  \n" +
                "		EXECUTE stmt1;  \n" +
                "		DEALLOCATE PREPARE stmt1;   */  \n" +
                "		SELECT COUNT(1) TotalCount FROM packing_slip_material_receive_det WHERE id IN (IDs) AND isDeleted = 0 AND deletedAt IS NULL;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(  \n" +
                "	IN pGoodPart VARCHAR(100),  \n" +
                "	IN pSearch VARCHAR(500),  \n" +
                "	IN pId INT,  \n" +
                "	IN pMfgType VARCHAR(50),  \n" +
                "	IN pRoHSStatusID VARCHAR(100),  \n" +
                "	IN pMfgCodeId INT,  \n" +
                "	IN pMountingType VARCHAR(50),  \n" +
                "	IN pMountingTypeId INT,  \n" +
                "	IN pCategoryID INT,  \n" +
                "	IN pIsContainCPN TINYINT,  \n" +
                "	IN pRohsMainCategoryID INT,  \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
                "	IN prefSupplierMfgpnComponentID INT ,  \n" +
                "	IN ppackagingID INT,  \n" +
                "	IN pstrictCustomPart TINYINT,  \n" +
                "	IN psupplierID INT,  \n" +
                "    IN pPartType int,  \n" +
                "    IN pExcludeStatus INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vRohsMainCategoryID INT;  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "	 SET @SQLStatement1=CONCAT(\" SELECT *  \n" +
                "		FROM  \n" +
                "		(  \n" +
                "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,  \n" +
                "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,  \n" +
                "					c.mfgcodeID,          					c.rev,  \n" +
                "					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
                "                    fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') mfgCodeName,  \n" +
                "					c.category,								c.imageURL,						c.documentPath,  \n" +
                "					c.mfgPNDescription,				c.minOperatingTemp,				c.maxOperatingTemp,  \n" +
                "					c.value,								c.partPackage,					c.powerRating,  \n" +
                "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,  \n" +
                "					c.noOfPosition,							c.noOfRows,						c.pitch,  \n" +
                "					c.pitchMating,							c.length,						c.width,  \n" +
                "					c.height,								c.voltage,						c.weight,  \n" +
                "					c.feature,								c.color,						c.partStatus,  \n" +
                "					c.uom,									c.uomClassID,					c.unit,  \n" +
                "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,				u.unitName AS  unitName,  \n" +
                "					r.rohsIcon,								r.name AS rohsName,  \n" +
                "					c.partPackageID,						c.bomLock,						c.businessRisk,  \n" +
                "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,  \n" +
                "					c.eau,									c.epicorType,					c.functionalTestingRequired,  \n" +
                "					c.heightText,							c.isCPN,						c.isCustom,  \n" +
                "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,							c.minimum,						c.mult,  \n" +
                "					c.packageQty,							c.partType,						c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,  \n" +
                "					c.plannedValuePerBuild,					c.programingRequired,  \n" +
                "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,  \n" +
                "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,  \n" +
                "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,  \n" +
                "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,					c.isReceiveBulkItem,			c.packagingID  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \");  \n" +
                "  if  pId is not null then  \n" +
                "    		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND c.id = \" ,pId );  \n" +
                "    end if;  \n" +
                "  \n" +
                "    if  pMfgType is not null then  \n" +
                "    		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND m.mfgType = '\",pMfgType,\"' \");  \n" +
                "    end if;  \n" +
                "  \n" +
                "    if  pRoHSStatusID is not null then  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.RoHSStatusID = \", pRoHSStatusID );  \n" +
                "	 end if;  \n" +
                "	if  pMfgCodeId is not null then  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.mfgcodeID = \",pMfgCodeId );  \n" +
                "	 end if;  \n" +
                "	if  pMountingType is not null then  \n" +
                "    	SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND mt.name = '\",pMountingType,\"' \");  \n" +
                "	 end if;  \n" +
                "	if  pMountingTypeId is not null then  \n" +
                "				SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mountingTypeID = \",pMountingTypeId );  \n" +
                "	 end if;  \n" +
                "	if  pCategoryID is not null then  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.category = \", pCategoryID  );  \n" +
                "	 end if;  \n" +
                "	if  ifnull(pIsContainCPN,false) = false  then  \n" +
                "      #(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.isCPN = FALSE \");  \n" +
                "	 end if;  \n" +
                "	if  pRohsMainCategoryID is not null then  \n" +
                "		 SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
                "		/*===>this logic is added to compare invert rohs category*/  \n" +
                "		IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
                "			IF pRohsMainCategoryID = -1 THEN  \n" +
                "				SET vRohsMainCategoryID = -2;  \n" +
                "			ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
                "				SET vRohsMainCategoryID = -1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "        /*<===this logic is added to compare invert rohs category*/  \n" +
                "		#AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "   		if vRohsMainCategoryID is not null then  \n" +
                "        SET @SQLStatement1=CONCAT(@SQLStatement1,\" and  r.refMainCategoryID  = \",vRohsMainCategoryID );  \n" +
                "        end if;  \n" +
                "	 end if;  \n" +
                "	if  prefSupplierMfgpnComponentID is not null then  \n" +
                "    	#AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" c.refSupplierMfgpnComponentID <=> IFNULL(\",prefSupplierMfgpnComponentID,\", c.refSupplierMfgpnComponentID)  \");  \n" +
                "	 end if;  \n" +
                "	if  pPartType is not null then  \n" +
                "        #AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.partType = '\",pPartType,\"' \");  \n" +
                "	 end if;  \n" +
                "	if  ppackagingID is not null then  \n" +
                "    	#AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.packagingID <=> IFNULL(\",ppackagingID,\",c.packagingID) \");  \n" +
                "	 end if;  \n" +
                "	if  pstrictCustomPart is not null then  \n" +
                "			#AND c.category != 3  AND c.iscustom = 1  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.category != 3  AND c.iscustom = 1 \");  \n" +
                "	 end if;  \n" +
                "	if  psupplierID is not null and pstrictCustomPart  = 1 then  \n" +
                "		/* Old logic  \n" +
                "        (c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
                "									FROM supplier_mapping_mst smm  \n" +
                "									WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)  \n" +
                "			)  \n" +
                "        */  \n" +
                "        SET @SQLStatement1=CONCAT(@SQLStatement1,\"  AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
                "																			FROM supplier_mapping_mst smm  \n" +
                "																			WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(\",psupplierID,\",smm.supplierID)  \n" +
                "																		union all /*get mfg which set as company*/  \n" +
                "																		SELECT mc.id  \n" +
                "																				FROM mfgcodemst mc  \n" +
                "																				WHERE mc.iscompany = 1 AND mc.isdeleted = 0  \n" +
                "																		union all /* get All Customer code */  \n" +
                "																		SELECT mc.id  \n" +
                "																				FROM mfgcodemst mc  \n" +
                "																				WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0  \n" +
                "																		)  \");  \n" +
                "	 end if;  \n" +
                "	if  pExcludeStatus is not null then  \n" +
                "    #AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.partStatus != '\",pExcludeStatus,\"' \");  \n" +
                "	 end if;  \n" +
                "     /*Close Inner query section */  \n" +
                "     SET @SQLStatement1=CONCAT(@SQLStatement1,\" ) AS a  where 1= 1 \");  \n" +
                "  \n" +
                "     if  pSearch is not null then  \n" +
                "     /* old query(  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                "													WHERE opn.refcomponentid = a.id  \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)  \n" +
                "		)  \n" +
                "     */  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and  exists ( select 1 from ( select a.id, a.mfgpn name from dual  \n" +
                "																					union all  \n" +
                "																					select opn.refcomponentid ,opn.name from component_otherpn opn where opn.refcomponentid = a.id  \n" +
                "																				) x where x.id  = a.id and x.name  LIKE CONCAT('%\", pSearch , \"%')  ) \");  \n" +
                "	 end if;  \n" +
                "  \n" +
                "     	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ORDER BY mfgPN For update\");  \n" +
                "  -- select @SQLStatement1;  \n" +
                "     PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    /* this logic used in purchase order when supplier is strictly custom part */  \n" +
                "   /*  \n" +
                "	IF(pstrictCustomPart = 1)THEN  \n" +
                "		SELECT *  \n" +
                "		FROM  \n" +
                "		(  \n" +
                "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,  \n" +
                "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,  \n" +
                "					c.mfgcodeID,          					c.rev,  \n" +
                "					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
                "					c.category,								c.imageURL,						c.documentPath,  \n" +
                "					c.mfgPNDescription,						c.minOperatingTemp,				c.maxOperatingTemp,  \n" +
                "					c.value,								c.partPackage,					c.powerRating,  \n" +
                "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,  \n" +
                "					c.noOfPosition,							c.noOfRows,						c.pitch,  \n" +
                "					c.pitchMating,							c.length,						c.width,  \n" +
                "					c.height,								c.voltage,						c.weight,  \n" +
                "					c.feature,								c.color,						c.partStatus,  \n" +
                "					c.uom,									c.uomClassID,					c.unit,  \n" +
                "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,				u.unitName AS  unitName,  \n" +
                "					r.rohsIcon,								r.name AS rohsName,  \n" +
                "					c.partPackageID,						c.bomLock,						c.businessRisk,  \n" +
                "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,  \n" +
                "					c.eau,									c.epicorType,					c.functionalTestingRequired,  \n" +
                "					c.heightText,							c.isCPN,						c.isCustom,  \n" +
                "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,							c.minimum,						c.mult,  \n" +
                "					c.packageQty,							c.partType,						c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,  \n" +
                "					c.plannedValuePerBuild,					c.programingRequired,  \n" +
                "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,  \n" +
                "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,  \n" +
                "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,  \n" +
                "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "			AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
                "									FROM supplier_mapping_mst smm  \n" +
                "									WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)  \n" +
                "			)  \n" +
                "			AND c.category != 3  \n" +
                "			AND c.iscustom = 1  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                "													WHERE opn.refcomponentid = a.id  \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "  \n" +
                "	ELSEIF(pMountingType IS NOT NULL AND pstrictCustomPart = 0) THEN  */  \n" +
                "	/* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
                "    Reports, Price Break Update, Customer Part, Good-Bad Mapping Part, Supplier Quote, Supplier RMA */  \n" +
                "	/*	SELECT * FROM  \n" +
                "		(  \n" +
                "			 SELECT c.id,							CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN, 					c.packaginggroupID, 					c.PIDCode,  \n" +
                "					c.isGoodPart, 						c.RoHSStatusID, 						c.rohsgroupID,  \n" +
                "					c.mfgcodeID,					    c.rev,  \n" +
                "					m.mfgCode, 							m.mfgType,								m.mfgName,  \n" +
                "					c.category,							c.imageURL,								c.documentPath,  \n" +
                "					c.mfgPNDescription,					c.minOperatingTemp,        				c.maxOperatingTemp,  \n" +
                "					c.value,							c.partPackage,							c.powerRating,  \n" +
                "					c.functionalCategoryID,         	c.mountingTypeID,						c.connecterTypeID,  \n" +
                "					c.noOfPosition,        				c.noOfRows,								c.pitch,  \n" +
                "					c.pitchMating,        				c.length,								c.width,  \n" +
                "					c.height,        					c.voltage,								c.weight,  \n" +
                "					c.feature,        					c.color,								c.partStatus,  \n" +
                "					c.uom,					        	c.uomClassID,							c.unit,  \n" +
                "					c.restrictUsePermanently,			c.restrictUSEwithpermission,			c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,			u.unitName AS  unitName,  \n" +
                "					r.rohsIcon,							r.name AS rohsName,  \n" +
                "					c.partPackageID,        			c.bomLock,								c.businessRisk,  \n" +
                "					c.costCategoryID,					c.deviceMarking,						c.driverToolRequired,  \n" +
                "					c.eau,								c.epicorType,							c.functionalTestingRequired,  \n" +
                "					c.heightText,						c.isCPN,								c.isCustom,  \n" +
                "					c.leadTime,							c.matingPartRquired,					c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,						c.minimum,								c.mult,  \n" +
                "					c.packageQty,						c.partType,								c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,				c.plannedOverRunPercentagePerBuild, 	c.plannedValuePerBuild,  \n" +
                "					c.programingRequired,				c.rfqOnly,								c.saftyStock,  \n" +
                "					c.scrapRatePercentagePerBuild, 		c.scrapValuePerBuild,					c.selfLifeDays,  \n" +
                "					c.shelfListDaysThresholdPercentage, c.temperatureCoefficient,				c.temperatureCoefficientUnit,  \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,					c.refSupplierMfgpnComponentID,  \n" +
                "					c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName, 	vu.mfgPN supplierPartMfgPn, 			vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,        			c.isNoClean,        					c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 				c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND (m.isdeleted = 0 AND  m.mfgType = IFNULL(pMfgType, m.mfgType))  \n" +
                "			JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND mt.name = pMountingType  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND		c.id = IFNULL(pId, c.id) AND c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                "													WHERE opn.refcomponentid = a.id  \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "  \n" +
                "	ELSE  */  \n" +
                "	  /* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
                "	  Reports,  Price Break Update,  Customer Part,  Good-Bad Mapping Part,  Supplier Quote,  Supplier RMAb*/  \n" +
                "  /*  \n" +
                "		select *  \n" +
                "		from  \n" +
                "		(  \n" +
                "			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,			c.packaginggroupID,					c.PIDCode,  \n" +
                "					c.isGoodPart,				c.RoHSStatusID,						c.rohsgroupID,  \n" +
                "					c.mfgcodeID,          		c.rev,  \n" +
                "					m.mfgCode,					m.mfgName,							m.mfgType,  \n" +
                "					c.tolerance,				c.category,							c.imageURL,  \n" +
                "					c.documentPath,				c.mfgPNDescription,					c.minOperatingTemp,  \n" +
                "					c.maxOperatingTemp,			c.value,							c.partPackage,  \n" +
                "					c.powerRating,				c.functionalCategoryID,				c.mountingTypeID,  \n" +
                "					c.connecterTypeID,			c.noOfPosition,           	 		c.noOfRows,  \n" +
                "					c.pitch,            		c.pitchMating,            			c.length,  \n" +
                "					c.width,            		c.height,							c.voltage,  \n" +
                "					c.weight,            		c.feature,            				c.color,  \n" +
                "					c.partStatus,            	c.uom,            					c.uomClassID,  \n" +
                "					c.unit,            			c.restrictUsePermanently,			c.restrictUSEwithpermission,  \n" +
                "					c.restrictPackagingUsePermanently,								c.restrictPackagingUseWithpermission,  \n" +
                "					c.packagingID,				c.packaging,  \n" +
                "					u.abbreviation AS uomName,	u.unitName AS unitName,  \n" +
                "					r.rohsIcon,					r.name AS rohsName,  \n" +
                "					c.partPackageID,			c.bomLock,							c.businessRisk,  \n" +
                "					c.costCategoryID,			c.deviceMarking,					c.driverToolRequired,  \n" +
                "					c.eau,						c.epicorType,						c.functionalTestingRequired,  \n" +
                "					c.heightText,				c.isCPN,							c.isCustom,  \n" +
                "					c.leadTime,            		c.matingPartRquired,				c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,           	c.minimum,							c.mult,  \n" +
                "					c.packageQty,            	c.partType,							c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,		c.plannedOverRunPercentagePerBuild, c.plannedValuePerBuild,  \n" +
                "					c.programingRequired,		c.rfqOnly,							c.saftyStock,  \n" +
                "					c.scrapRatePercentagePerBuild,		c.scrapValuePerBuild,		c.selfLifeDays,  \n" +
                "					c.shelfListDaysThresholdPercentage,	c.temperatureCoefficient,	c.temperatureCoefficientUnit,  \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,		c.refSupplierMfgpnComponentID,  \n" +
                "					c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,  \n" +
                "					vu.mfgPN supplierPartMfgPn,  \n" +
                "					vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,			c.isNoClean,						c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,		c.isHazmatMaterial, 				c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,		c.isReceiveBulkItem  \n" +
                "			from component c  \n" +
                "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "			INNER JOIN uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID = IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID, c.packagingID)  \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN = c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "			AND 	(CASE WHEN pstrictCustomPart = 0 THEN c.iscustom = 0 ELSE 1 = 1 END)  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND  \n" +
                "					(  \n" +
                "						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
                "						EXISTS( SELECT  1  \n" +
                "								FROM 	component_otherpn opn  \n" +
                "								WHERE 	opn.refcomponentid = a.id  \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
                "					)  \n" +
                "				)  \n" +
                "			)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "	END IF;   */  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5868,'2.00','V1',' Bug 40507: Supplier Packing Slip issues for scanning part and validations - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5868:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderSummaryDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderSummaryDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "	IN ppostatus VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN pLockFilterStatus VARCHAR(50),  \n" +
                "    IN pPoPostingStatusFilter VARCHAR(20),  \n" +
                "    IN pPOComments VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(\"  \n" +
                "    SELECT (CASE WHEN(IFNULL((a.poCompletedLine * 100 / a.totalPOLines), 0)) > 100 THEN 100 ELSE IFNULL(round((a.poCompletedLine * 100 / a.totalPOLines), 2), 0) END) poCompletionPercentage, a.* FROM  \n" +
                "		( SELECT  pom.id,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.poDate,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				pom.termsID,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				CASE WHEN pom.status=0 THEN 'Draft' ELSE 'Published' END statusName,  \n" +
                "				pom.status,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pom.serialNumber,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.carrierID,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				CASE WHEN pom.shippingInsurance=0 THEN 'No' ELSE 'Yes' END shippingInsuranceName,  \n" +
                "                pom.shippingInsurance,  \n" +
                "                fun_getAddressbyIDAndContactPersonID(pom.supplierAddressID,pom.supplierContactPersonID) AS supplierAddress,  \n" +
                "				fun_getAddressbyIDAndContactPersonID(pom.shippingAddressID,pom.shippingContactPersonID) AS shippingAddress,  \n" +
                "				fun_getAddressbyIDAndContactPersonID(pom.intermediateShipmentID,pom.intermediateContactPersonID) AS intermediateAddress,  \n" +
                "				CASE WHEN pom.isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPO,  \n" +
                "				pom.isBlanketPO,  \n" +
                "				m.mfgcode,  \n" +
                "				pom.poCompleteReason,  \n" +
                "				pom.poCompleteType,  \n" +
                "				pom.cancleReason,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				pom.poWorkingStatus,  \n" +
                "                pom.CancellationConfirmed,  \n" +
                "                CASE WHEN pom.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END CancellationConfirmedStatus,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='C') poCompletedLine,  \n" +
                "				(select count(1) from vu_purchaseorder_shipping_release vusp where vusp.refPurchaseOrderID=pom.id and poLineWorkingStatus='P') poPendingLine,  \n" +
                "				case when pom.poWorkingStatus='P' then 'In Progress' when  pom.poWorkingStatus='C' then 'Completed' else 'Canceled' end workingStatusName,  \n" +
                "				IFNULL(vgf.cnt, 0) poDocumentCount,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType!=4 and pod.refPurchaseOrderID=pom.id) totalItems,  \n" +
                "				(SELECT COUNT(1) FROM purchase_order_det pod join component c on c.id=pod.mfgPartID WHERE pod.isdeleted=0 and c.partType=4 and pod.refPurchaseOrderID=pom.id) totalOtherItems,  \n" +
                "				fun_getFOBById(pom.freeOnBoardId) freeOnBoard,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "				fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "				(select sum((pod.qty * pod.price)+ifnull(fun_getOtherChargesByPurchaseOrderDetID(pod.id),0)) from purchase_order_det pod where pod.refPurchaseOrderID=pom.id and pod.isdeleted=0) totalAmount,  \n" +
                "				fun_getUserNameByID(pom.updatedBy)updatedby,  \n" +
                "				fun_getUserNameByID(pom.createdBy) createdby,  \n" +
                "				fun_getRoleByID(pom.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(pom.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "	            pom.isdeleted,  \n" +
                "                (SELECT COUNT(1) FROM purchase_order_det pod WHERE pod.isdeleted=0 and pod.refPurchaseOrderID=pom.id) totalPOLines,  \n" +
                "                (select id from packing_slip_material_receive where refPurchaseOrderID=pom.id and isdeleted=false order by receiptDate desc limit 1) packingSlipId,  \n" +
                "                ps.packingSlip,  \n" +
                "                ps.MaterialReceiptNumber,  \n" +
                "                pom.isCustConsigned,  \n" +
                "                CASE WHEN pom.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "                pom.customerID,  \n" +
                "                fun_GetFormattedMfgCode(pm.mfgcode, pm.mfgName, \",vMfgCodeFormat,\") customerName,  \n" +
                "                pom.isNonUMIDStock,  \n" +
                "                CASE WHEN pom.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                pom.lockStatus,  \n" +
                "				(case when pom.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "					when pom.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "					when pom.lockStatus = 'LC' then 'Locked'  \n" +
                "					else null end  \n" +
                "				) lockStatusValue,  \n" +
                "				fun_getUserNameByID(pom.lockedBy) lockByName,  \n" +
                "				fun_getRoleByID(pom.lockedByRoleId) lockedByRoleName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(pom.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM purchase_order_mst pom JOIN mfgcodemst m ON m.id=pom.supplierID  \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0  \n" +
                "        LEFT JOIN LATERAL (SELECT id, refPurchaseOrderID FROM packing_slip_material_receive WHERE refPurchaseOrderID=pom.id AND isDeleted=0 LIMIT 1) AS psmr ON psmr.refPurchaseOrderID=pom.id  \n" +
                "		LEFT JOIN vu_genericfilescount vgf ON vgf.entityID = -20 AND vgf.refTransID = pom.id  \n" +
                "        LEFT JOIN mfgcodemst pm ON pm.id=pom.customerID and pm.isdeleted = 0  \n" +
                "         LEFT JOIN (select group_concat(distinct psmr.id, '@@@', psmr.packingSlipNumber order by psmr.packingSlipDate desc separator '\",v_GroupConcatSeparator,\"') as packingSlip,  \n" +
                "						group_concat(distinct psmr.packingSlipNumber order by psmr.packingSlipDate desc separator ', ') MaterialReceiptNumber,  \n" +
                "						psmr.refPurchaseOrderID  \n" +
                "                        from packing_slip_material_receive psmr  \n" +
                "						where psmr.receiptType='P' and psmr.isDeleted=false group by psmr.refPurchaseOrderID  \n" +
                "					) ps on ps.refPurchaseOrderID = pom.id ) a  \n" +
                "		WHERE a.isdeleted=0  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and a.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and a.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "		IF(psearchposotype='C')THEN  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (a.soNumber  like ''%',psearchposotext,'%'' OR a.poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (a.soNumber  =''',psearchposotext,''' OR a.poNumber  =''',psearchposotext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pPOComments IS NOT NULL AND pPOComments != '')THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, \"  \n" +
                "				AND (a.shippingComment LIKE '%\",pPOComments,\"%'  \n" +
                "                OR a.poComment LIKE '%\",pPOComments,\"%')  \n" +
                "                \");  \n" +
                "    END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate  BETWEEN ''',pfromDate,''' AND ''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (a.poDate = ''',pfromDate,''')');  \n" +
                "	END IF;  \n" +
                "    IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and a.poWorkingStatus IN (\", ppostatus ,\")\");  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' AND exists (select 1 from purchase_order_det pod where pod.refPurchaseOrderID = a.id and pod.isDeleted = 0 and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,')))');  \n" +
                "	END IF;  \n" +
                "    IF(pLockFilterStatus IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and a.lockStatus IN (\", pLockFilterStatus ,\")\");  \n" +
                "	END IF;  \n" +
                "    IF(pPoPostingStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and a.status = '\", pPoPostingStatusFilter ,\"'\");  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "    SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5869,'2.00','V1',' Sproc_RetrievePurchaseOrderSummaryDeatils sp - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5869:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 24-01-2022 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_convertJsonPhoneToCommaSepList` ;  \n" +
                "CREATE FUNCTION `fun_convertJsonPhoneToCommaSepList`(  \n" +
                "	pJsonPhoneList TEXT  \n" +
                ") RETURNS TEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_Phones TEXT;  \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(jsonTblPhones.phone SEPARATOR ', ') INTO v_Phones  \n" +
                "		FROM JSON_TABLE(pJsonPhoneList, '$[*]' COLUMNS (phone VARCHAR(30)  PATH '$.phone')) jsonTblPhones  \n" +
                "		;  \n" +
                "  \n" +
                "  \n" +
                "	RETURN v_Phones;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-01-2022 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAddressbyIDAndContactPersonID` ;  \n" +
                "CREATE FUNCTION `fun_getAddressbyIDAndContactPersonID`(  \n" +
                "	pAddressID INT,  \n" +
                "	pcontactPersonID INT  \n" +
                ") RETURNS VARCHAR(2000) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pAddress VARCHAR(2000);  \n" +
                "  \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>','ATTN: ',fun_GetFormattedContactPersonName(cp.firstName,cp.middleName,cp.lastName),'<br/>', IFNULL(cp.division,''),(CASE WHEN cp.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),  \n" +
                "	 CASE WHEN cp.phone IS NOT NULL THEN '<br/>' ELSE '' END,  \n" +
                "	 CASE WHEN cp.phone IS NULL THEN '' ELSE CONCAT('Phone: ', CAST(cp.phone AS CHAR(100))) END,  \n" +
                "	CASE WHEN cp.phExtension IS NULL THEN '' ELSE CONCAT(' Ext. ',CAST(cp.phExtension AS CHAR(100))) END,  \n" +
                "	 (CASE WHEN cp.faxNumber IS NOT NULL THEN '<br/>' ELSE '' END), CASE WHEN cp.faxNumber IS NULL THEN '' ELSE  CONCAT('Fax: ',CAST(cp.faxNumber AS CHAR(100))) END,  \n" +
                "	(CASE WHEN cp.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',fun_getPrimaryEmailFromJsonList(cp.email)),'')) INTO  pAddress  \n" +
                "	FROM customer_addresses ca  \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "	LEFT JOIN contactperson cp ON ca.customerId=cp.refTransID AND cp.personId=pcontactPersonID  \n" +
                "	WHERE ca.id = pAddressID  AND ca.isDeleted = 0;  \n" +
                "  \n" +
                "	RETURN pAddress;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5870,'2.00','V1',' Function-fun_convertJsonPhoneToCommaSepList-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5870:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "drop procedure if exists `Sproc_InvoiceRefundVoidAndReIssue`;  \n" +
                "CREATE PROCEDURE `Sproc_InvoiceRefundVoidAndReIssue`(  \n" +
                "	IN pRefVoidPaymentId INT,  \n" +
                "	IN pAccountReference VARCHAR(50),  \n" +
                "	IN pPaymentType INT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "	IN pBankAccountMasID INT,  \n" +
                "	IN pBankAccountNo VARCHAR(50),  \n" +
                "	IN pBankName VARCHAR(255),  \n" +
                "	IN pPaymentDate DATE,  \n" +
                "	IN pRemark VARCHAR(255),  \n" +
                "	IN pVoidPaymentReason VARCHAR(255),  \n" +
                "	IN pRefPaymentModeOfInvPayment VARCHAR(2),  \n" +
                "	IN pMfgcodeID INT,  \n" +
                "	IN pDepositBatchNumber DECIMAL(6,2),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vCount INT;  \n" +
                "    DECLARE vValidationPassed tinyint;  \n" +
                "    DECLARE vMessage varchar(50);  \n" +
                "	DECLARE vNewPaymentID INT;  \n" +
                "    DECLARE vSerialNumber varchar(20);  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "	/* pRefPaymentModeOfInvPayment >> P-Payable R-Receivable, RR- refund*/  \n" +
                "	SELECT COUNT(1) INTO vCount  \n" +
                "	  FROM packingslip_invoice_payment  \n" +
                "	 WHERE id = pRefVoidPaymentId  \n" +
                "	   AND refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
                "       AND isPaymentVoided = 0  \n" +
                "       and isDeleted = 0;  \n" +
                "	 if vCount = 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'NOT_FOUND_OR_ALREADY_VOIDED' as message;  \n" +
                "     end if;  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO vCount  \n" +
                "	  FROM packingslip_invoice_payment  \n" +
                "	 WHERE refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
                "	   AND paymentNumber = pPaymentNumber  \n" +
                "	   AND mfgcodeID = pMfgcodeID  \n" +
                "	   AND isdeleted = 0;  \n" +
                "	 if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_CHECKNO' as message;  \n" +
                "     end if;  \n" +
                "	IF vValidationPassed = 1 THEN  \n" +
                "		call Sproc_GenerateIncrementalNumber('SupplierRefundSystemID', true);  \n" +
                "			  select systemID, message into vSerialNumber, vMessage  \n" +
                "			  from temp_serialNumber;  \n" +
                "			if vMessage is not null and vMessage != '' then  \n" +
                "				set vValidationPassed = 0;  \n" +
                "				select vMessage as message;  \n" +
                "			end if;  \n" +
                "	END IF;  \n" +
                "	IF vValidationPassed = 1 THEN  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment transaction*/  \n" +
                "		INSERT INTO packingslip_invoice_payment  \n" +
                "				(systemId, mfgcodeID, paymentNumber, paymentDate, paymentAmount, paymentType, accountReference, bankAccountMasID,  \n" +
                "                bankAccountNo, bankName, remark, createdBy, createByRoleId, updatedBy, updateByRoleId, refVoidedPaymentNumber,  \n" +
                "                refVoidedPaymentId, refPaymentMode, lockStatus, depositBatchNumber, offsetAmount, refGencTransModeID, acctId)  \n" +
                "		SELECT 	vSerialNumber, mfgcodeID, pPaymentNumber, pPaymentDate, paymentAmount, pPaymentType, pAccountReference, pBankAccountMasID,  \n" +
                "                pBankAccountNo, pBankName, pRemark, pUserID, pRoleID, pUserID, pRoleID, paymentNumber,  \n" +
                "                id, refPaymentMode, lockStatus, pDepositBatchNumber, offsetAmount, refGencTransModeID, acctId  \n" +
                "		FROM 	packingslip_invoice_payment  \n" +
                "		WHERE 	id = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0  \n" +
                "		AND refPaymentMode = pRefPaymentModeOfInvPayment;  \n" +
                "  \n" +
                "		SET vNewPaymentID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		/*update payment void flag in detail table*/  \n" +
                "		UPDATE 	packingslip_invoice_payment_det  \n" +
                "		SET 	isPaymentVoided = 1,  \n" +
                "			updatedBy = pUserID,  \n" +
                "			updateByRoleId = pRoleID,  \n" +
                "			updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		/*insert same records for new reissue payment detail transaction*/  \n" +
                "		INSERT INTO packingslip_invoice_payment_det  \n" +
                "				(refPayementid, refPackingslipInvoiceID, createdBy, createByRoleId, updatedBy, updateByRoleId, paymentAmount,  \n" +
                "				isPaymentVoided, refCustPackingslipInvoiceID)  \n" +
                "		SELECT 	vNewPaymentID, refPackingslipInvoiceID, pUserID, pRoleID,  \n" +
                "			pUserID, pRoleID, paymentAmount,  \n" +
                "			FALSE, refCustPackingslipInvoiceID  \n" +
                "		FROM 	packingslip_invoice_payment_det  \n" +
                "		WHERE 	refPayementid = pRefVoidPaymentId  \n" +
                "		AND isDeleted = 0;  \n" +
                "  \n" +
                "		UPDATE packingslip_invoice_payment  \n" +
                "		   SET voidPaymentReason = pVoidPaymentReason,  \n" +
                "			   isPaymentVoided = 1,  \n" +
                "			   updatedBy = pUserID,  \n" +
                "			   updateByRoleId = pRoleID,  \n" +
                "			   updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "		 WHERE id = pRefVoidPaymentId  \n" +
                "		   AND refPaymentMode = pRefPaymentModeOfInvPayment  \n" +
                "           AND isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT vNewPaymentID refPayementid;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5871,'2.00','V1','Bug 40514: Selected Address should get carry forward to New payment if user do Void & Reissue payment - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5871:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 24-01-2022 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAddressbyIDAndContactPersonID` ;  \n" +
                "CREATE FUNCTION `fun_getAddressbyIDAndContactPersonID`(  \n" +
                "	pAddressID INT,  \n" +
                "	pcontactPersonID INT  \n" +
                ") RETURNS VARCHAR(2000) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pAddress VARCHAR(2000);  \n" +
                "  \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>','ATTN: ',fun_GetFormattedContactPersonName(cp.firstName,cp.middleName,cp.lastName),'<br/>', IFNULL(cp.division,''),(CASE WHEN cp.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),  \n" +
                "	 CASE WHEN cp.phoneNumber IS NOT NULL THEN '<br/>' ELSE '' END,  \n" +
                "	 CASE WHEN cp.phoneNumber IS NULL THEN '' ELSE CONCAT('Phone: ', IFNULL(fun_getPrimaryPhoneFromJsonList(cp.phoneNumber),'')) END,  \n" +
                "	CASE WHEN cp.phoneNumber IS NULL THEN '' ELSE CONCAT(' Ext. ', IFNULL(fun_getPrimaryPhExtensionFromJsonList(cp.phoneNumber),'')) END,  \n" +
                "	 (CASE WHEN cp.faxNumber IS NOT NULL THEN '<br/>' ELSE '' END), CASE WHEN cp.faxNumber IS NULL THEN '' ELSE  CONCAT('Fax: ',CAST(cp.faxNumber AS CHAR(100))) END,  \n" +
                "	(CASE WHEN cp.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',fun_getPrimaryEmailFromJsonList(cp.email)),'')) INTO  pAddress  \n" +
                "	FROM customer_addresses ca  \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "	LEFT JOIN contactperson cp ON ca.customerId=cp.refTransID AND cp.personId=pcontactPersonID  \n" +
                "	WHERE ca.id = pAddressID  AND ca.isDeleted = 0;  \n" +
                "  \n" +
                "	RETURN pAddress;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-01-2022 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getPrimaryPhoneFromJsonList` ;  \n" +
                "CREATE FUNCTION `fun_getPrimaryPhoneFromJsonList`(  \n" +
                "	pJsonPhoneList TEXT  \n" +
                ") RETURNS TEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_Phone VARCHAR(100);  \n" +
                "  \n" +
                "  \n" +
                "		SELECT jsonTblPhones.phone INTO v_Phone  \n" +
                "		FROM JSON_TABLE(pJsonPhoneList, '$[*]' COLUMNS (phone VARCHAR(50)  PATH '$.phone', isprimary TINYINT  PATH '$.isPrimary')) jsonTblPhones  \n" +
                "		WHERE isPrimary = 1  \n" +
                "		;  \n" +
                "  \n" +
                "  \n" +
                "	RETURN v_Phone;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-01-2022 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getPrimaryPhExtensionFromJsonList` ;  \n" +
                "CREATE FUNCTION `fun_getPrimaryPhExtensionFromJsonList`(  \n" +
                "	pJsonPhextList TEXT  \n" +
                ") RETURNS TEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_Phext VARCHAR(100);  \n" +
                "  \n" +
                "  \n" +
                "		SELECT jsonTblPhExt.phExtension INTO v_Phext  \n" +
                "		FROM JSON_TABLE(pJsonPhextList, '$[*]' COLUMNS (phExtension VARCHAR(50)  PATH '$.phExtension', isprimary TINYINT  PATH '$.isPrimary')) jsonTblPhExt  \n" +
                "		WHERE isPrimary = 1;  \n" +
                "  \n" +
                "  \n" +
                "	RETURN v_Phext;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5872,'2.00','V1',' Alter function fun_getAddressbyIDAndContactPersonID-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5872:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "drop trigger if exists `Trg_AU_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF OLD.receiptType = \"P\" AND OLD.refPurchaseOrderID IS NULL AND NEW.isCustConsigned != OLD.isCustConsigned THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isLineCustConsigned=NEW.isCustConsigned, LineCustomerID=NEW.CustomerID WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		CASE  \n" +
                "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
                "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
                "			ELSE 'PO Date'  \n" +
                "		END ,  \n" +
                "		CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Date', CAST(OLD.packingSlipDate AS CHAR), CAST(new.packingSlipDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(new.invoiceDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(new.creditMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(new.debitMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(new.receiptDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
                "				ELSE 'Supplier Invoice Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
                "				ELSE 'Supplier Invoice Posting Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(new.applyDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
                "				ELSE 'Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
                "				ELSE 'PS Internal Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "	IF IFNULL(OLD.billToAddress,0) != IFNULL(NEW.billToAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To', CAST(OLD.billToAddress AS CHAR), CAST(new.billToAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.billToConactPerson,0) != IFNULL(NEW.billToConactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To Contact Person', CAST(OLD.billToConactPerson AS CHAR), CAST(new.billToConactPerson AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToConactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Ship To', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaShippingContactPerson,0) != IFNULL(NEW.rmaShippingContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Ship To Contact Person', OLD.rmaShippingContactPerson, new.rmaShippingContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaMarkForContactPerson,0) != IFNULL(NEW.rmaMarkForContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For Contact Person', OLD.rmaMarkForContactPerson, new.rmaMarkForContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			case when OLD.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "            case when new.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CustomerID, 0) != IFNULL(NEW.CustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.CustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.CustomerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 24-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5873,'2.00','V1','Maintained Address change history - Ashish'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5873:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getContPersonNameDisplayFormat` ;  \n" +
                "CREATE FUNCTION `fun_getContPersonNameDisplayFormat`() RETURNS INT  \n" +
                "BEGIN  \n" +
                "DECLARE vFormatValue INT;  \n" +
                "	SELECT `values` INTO vFormatValue  \n" +
                "	FROM systemconfigrations  \n" +
                "	WHERE `key` = 'ContactPersonDisplayNameFormat';  \n" +
                "RETURN vFormatValue;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_GetFormattedContactPersonName` ;  \n" +
                "CREATE FUNCTION `fun_GetFormattedContactPersonName`(  \n" +
                "    pCPFirstName VARCHAR(255),  \n" +
                "    pCPMiddleName VARCHAR(255),  \n" +
                "    pCPLastName VARCHAR(255) ,  \n" +
                "    pFormateType INT  \n" +
                ") RETURNS VARCHAR(550) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE vContPersonFormattedName VARCHAR(550) DEFAULT '';  \n" +
                "	/* { id: '1', value: 'Firstname Middlename Lastname' }, { id: '2', value: 'Firstname Lastname' },  \n" +
                "		{ id: '3', value: 'Firstname Mname Lastname' }, { id: '4', value: 'Firstname Mname. Lastname' },  \n" +
                "		{ id: '5', value: 'Lastname, Firstname Middlename' }, { id: '6', value: 'Lastname, Firstname' },  \n" +
                "		{ id: '7', value: 'Lastname, Firstname Mname' },	{ id: '8', value: 'Lastname, Firstname Mname.' } */  \n" +
                "  \n" +
                "	IF (pCPFirstName IS NOT NULL AND pCPFirstName != '' AND pCPLastName IS NOT NULL AND pCPLastName != '' AND pFormateType IS NOT NULL) THEN  \n" +
                "  \n" +
                "		SELECT (CASE WHEN pFormateType = 1 THEN CONCAT(pCPFirstName, ' ', IF(pCPMiddleName IS NOT NULL, CONCAT(pCPMiddleName, ' '),''), pCPLastName)  \n" +
                "				WHEN pFormateType = 2 THEN CONCAT(pCPFirstName, ' ', pCPLastName)  \n" +
                "				WHEN pFormateType = 3 THEN CONCAT(pCPFirstName, ' ', IF(pCPMiddleName IS NOT NULL, CONCAT(LEFT(pCPMiddleName,1), ' '),''), pCPLastName)  \n" +
                "				WHEN pFormateType = 4 THEN CONCAT(pCPFirstName, ' ', IF(pCPMiddleName IS NOT NULL, CONCAT(LEFT(pCPMiddleName,1), '. '),''), pCPLastName)  \n" +
                "				WHEN pFormateType = 5 THEN CONCAT(pCPLastName, ', ', pCPFirstName , IF(pCPMiddleName IS NOT NULL, CONCAT(' ', pCPMiddleName),''))  \n" +
                "				WHEN pFormateType = 6 THEN  CONCAT(pCPLastName, ', ', pCPFirstName)  \n" +
                "				WHEN pFormateType = 7 THEN CONCAT(pCPLastName, ', ', pCPFirstName , IF(pCPMiddleName IS NOT NULL, CONCAT(' ', LEFT(pCPMiddleName,1)),''))  \n" +
                "				WHEN pFormateType = 8 THEN CONCAT(pCPLastName, ', ', pCPFirstName , IF(pCPMiddleName IS NOT NULL, CONCAT(' ', LEFT(pCPMiddleName,1),'.'),''))  \n" +
                "				ELSE CONCAT(pCPFirstName, ' ', IF(pCPMiddleName IS NOT NULL, CONCAT(LEFT(pCPMiddleName,1), '. '),''), pCPLastName)  \n" +
                "			END) INTO vContPersonFormattedName;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	RETURN vContPersonFormattedName;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5874,'2.00','V1',' fun_getContPersonNameDisplayFormat function - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5874:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_contactPersonDetailByID` ;  \n" +
                "CREATE FUNCTION `fun_contactPersonDetailByID`(  \n" +
                "	pContactPersonID INT  \n" +
                ") RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pContactPerson VARCHAR(2000);  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "  \n" +
                "	  SELECT  CONCAT('ATTN: ',fun_GetFormattedContactPersonName(firstName,middleName,lastName,vContPersonNameFormat), CASE WHEN division IS NULL THEN '' ELSE CONCAT('  \n" +
                "',division) END,  \n" +
                "	                 CASE WHEN email IS NULL THEN '' ELSE CONCAT('  \n" +
                "Email: ',fun_convertJsonEmailToCommaSepList(email)) END,  \n" +
                "	                 CASE WHEN phone IS NULL THEN '' ELSE CONCAT('  \n" +
                "Phone: ',phone) END,  \n" +
                "	                 CASE WHEN phExtension IS NULL THEN '' ELSE CONCAT('Ext. ',phExtension) END,  \n" +
                "	                 CASE WHEN mobile IS NULL THEN '' ELSE CONCAT('  \n" +
                "Phone: ',mobile) END,  \n" +
                "	                 CASE WHEN faxNumber IS NULL THEN '' ELSE CONCAT('  \n" +
                "Fax: ',faxNumber) END) INTO  pContactPerson FROM contactperson  \n" +
                "	                 WHERE personID=pContactPersonID;  \n" +
                "  \n" +
                "	RETURN pContactPerson;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getAddressbyIDForCheckPrint` ;  \n" +
                "CREATE FUNCTION `fun_getAddressbyIDForCheckPrint`(  \n" +
                "	pAddressID INT  ,  \n" +
                "	pPersonMstID INT  \n" +
                ") RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pAddress VARCHAR(2000);  \n" +
                "	DECLARE vFirstName VARCHAR(100) DEFAULT NULL;  \n" +
                "	DECLARE vMiddleName VARCHAR(100) DEFAULT NULL;  \n" +
                "	DECLARE vLastName VARCHAR(100) DEFAULT NULL;  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "	IF (pPersonMstID IS NOT NULL) THEN  \n" +
                "		SELECT firstName, middleName, lastName INTO vFirstName, vMiddleName, vLastName  \n" +
                "		FROM contactperson  \n" +
                "		WHERE personId = pPersonMstID  \n" +
                "		AND isDeleted = 0 ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- ca.personName  \n" +
                "	SELECT CONCAT('ATTN: ', fun_GetFormattedContactPersonName(vFirstName, vMiddleName, vLastName, vContPersonNameFormat) ,fun_getNewLineCharacter(),ca.street1,fun_getNewLineCharacter(),ca.city,', ',ca.state,' ',ca.postcode,fun_getNewLineCharacter(),c.countryName) INTO pAddress  \n" +
                "	FROM customer_addresses ca  \n" +
                "		LEFT JOIN countrymst c ON c.countryID=ca.countryID  \n" +
                "	WHERE ca.id=pAddressID ;  \n" +
                "  \n" +
                "	RETURN pAddress;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_GetContactPersonNameForAutocomplete` ;  \n" +
                "CREATE FUNCTION `fun_GetContactPersonNameForAutocomplete`(  \n" +
                "    pCPFirstName VARCHAR(255),  \n" +
                "    pCPMiddleName VARCHAR(255),  \n" +
                "    pCPLastName VARCHAR(255),  \n" +
                "    ptitle VARCHAR(255),  \n" +
                "    pdepartment VARCHAR(255)  \n" +
                ") RETURNS VARCHAR(1380) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vContPersonName VARCHAR(1380) DEFAULT '';  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "		SELECT CONCAT(fun_GetFormattedContactPersonName(pCPFirstName,pCPMiddleName,pCPLastName,vContPersonNameFormat),  \n" +
                "			CASE WHEN ptitle IS NOT NULL AND ptitle != '' THEN CONCAT (' | ', ptitle) ELSE '' END,  \n" +
                "			CASE WHEN pdepartment IS NOT NULL AND pdepartment != ''THEN CONCAT (' | ', pdepartment) ELSE '' END) INTO vContPersonName;  \n" +
                "  \n" +
                "	RETURN vContPersonName;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getFormattedContactPerson` ;  \n" +
                "CREATE FUNCTION `fun_getFormattedContactPerson`(  \n" +
                "	pFirstName VARCHAR(255),  \n" +
                "     pMiddleName VARCHAR(255),  \n" +
                "     pLastName VARCHAR(255),  \n" +
                "     pDivision VARCHAR(100),  \n" +
                "     pEmail LONGTEXT,  \n" +
                "     pPhoneCountryCode VARCHAR(5),  \n" +
                "     pPhone VARCHAR(255),  \n" +
                "     pPhExtension VARCHAR(8)  ,  \n" +
                "     pMobile VARCHAR(255),  \n" +
                "     pFaxCountryCode VARCHAR(5),  \n" +
                "     pFaxNumber VARCHAR(255)  \n" +
                ") RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn LONGTEXT;  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "	SELECT  CONCAT(fun_GetFormattedContactPersonName(pFirstName, pMiddleName,pLastName,vContPersonNameFormat),  \n" +
                "		 CASE WHEN pDivision IS NULL THEN '' ELSE pDivision END,  \n" +
                "		 CASE WHEN pEmail IS NULL THEN '' ELSE fun_convertJsonEmailToCommaSepList(pEmail) END,  \n" +
                "         CASE WHEN pPhoneCountryCode IS NULL THEN '' ELSE CONCAT(pPhoneCountryCode,'-') END,  \n" +
                "		 CASE WHEN pPhone IS NULL THEN '' ELSE pPhone END,  \n" +
                "		 CASE WHEN pPhExtension IS NULL THEN '' ELSE CONCAT('Ext. ',pPhExtension) END,  \n" +
                "		 CASE WHEN pMobile IS NULL THEN '' ELSE pMobile END,  \n" +
                "         CASE WHEN pFaxCountryCode IS NULL THEN '' ELSE CONCAT(pFaxCountryCode,'-') END,  \n" +
                "		 CASE WHEN pFaxNumber IS NULL THEN '' ELSE pFaxNumber END) INTO  vReturn  ;  \n" +
                "	RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetContactPersonForElastic` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetContactPersonForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    IN pFromdate DATE,  \n" +
                "    IN pTodate DATE,  \n" +
                "    IN pRequiredCount TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE vEmployeeNameFormat INT;  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			COUNT(1)  \n" +
                "		FROM `contactperson`  \n" +
                "		WHERE `isDeleted` = 0 AND `personId` = IFNULL(pId,`personId`);  \n" +
                "	ELSE  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.phone, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, cp.phExtension, ecp.employeeId AS refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName,vContPersonNameFormat) fullName, 'Personnel' AS refEntityType,  \n" +
                "				NULL AS refName, fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName, vEmployeeNameFormat) personnels,  \n" +
                "				fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "				(SELECT GROUP_CONCAT(jsonTblPhone.phone, ' Ext.' ,jsonTblPhone.phExtension ) FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) phoneNumberList,  \n" +
                "				NULL AS isDefault,  \n" +
                "				NULL AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) STATUS,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "			LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId AND ecp.isDeleted = 0 AND ecp.releasedAt IS NULL  \n" +
                "			LEFT JOIN employees emp ON emp.id = ecp.employeeId AND emp.isDeleted = 0  \n" +
                "				WHERE `personId` = IFNULL(pId,`personId`) AND cp.refTableName ='employees'  \n" +
                "				AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "						OR (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "					ELSE 1 = 1 END)  \n" +
                "		UNION ALL  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.phone, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, cp.phExtension, cp.refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName,vContPersonNameFormat) fullName,  \n" +
                "				(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' AND mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "                fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,vMfgCodeFormat) AS refName,  NULL AS personnels,  \n" +
                "                fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "                (SELECT GROUP_CONCAT(jsonTblPhone.phone, ' Ext.' ,jsonTblPhone.phExtension ) FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) phoneNumberList,  \n" +
                "				(CASE WHEN (cp.isDefault = 0) THEN 'No'  \n" +
                "					WHEN (cp.isDefault = 1) THEN 'Yes' ELSE '' END) AS isDefault,  \n" +
                "				(CASE WHEN (cp.isPrimary = 0) THEN 'No'  \n" +
                "					WHEN (cp.isPrimary = 1) THEN 'Yes' ELSE '' END) AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) STATUS,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID AND mfg.isDeleted = 0  \n" +
                "			WHERE `personId` = IFNULL(pId,`personId`)  \n" +
                "				AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "						OR (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPersonalDetailForElastic` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPersonalDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    IN pFromdate DATE,  \n" +
                "    IN pTodate DATE,  \n" +
                "    IN pRequiredCount TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "     IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			COUNT(1) totalCount  \n" +
                "		 FROM employees AS e  \n" +
                "			 LEFT JOIN users u ON e.id = u.employeeID  \n" +
                "			WHERE IFNULL(e.isDeleted,0) = 0 AND  e.id = IFNULL(pId,e.id);  \n" +
                "	ELSE  \n" +
                "			SELECT  e.id,e.initialName, e.firstName, e.lastName, e.middleName, e.email, e.street1, e.contact, u.username, e.isDeleted,  \n" +
                "            fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName,vContPersonNameFormat) contactPerson  \n" +
                "			 FROM employees AS e  \n" +
                "			 LEFT JOIN users u ON e.id = u.employeeID  \n" +
                "			 LEFT JOIN employee_contactperson AS ecp ON  ecp.employeeId = e.id AND ecp.isDeleted = 0 AND ecp.releasedAt IS NULL  \n" +
                "			 LEFT JOIN contactperson cp ON cp.personId = ecp.contactPersonId AND cp.isDeleted = 0  \n" +
                "			WHERE e.id = IFNULL(pId,e.id) AND  \n" +
                "			(CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(e.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "							OR (DATE(fun_CovnertDateTimeByTimezoneValue(e.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveContactPersonList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveContactPersonList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefEntityType VARCHAR(255),  \n" +
                "	IN pisPrimary TINYINT,  \n" +
                "	IN pisDefault TINYINT,  \n" +
                "	IN prefName VARCHAR(255),  \n" +
                "	IN padditionalComment VARCHAR(2000)  \n" +
                "   )  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "        DECLARE mfgcodemstCondition VARCHAR(255) DEFAULT '';  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE vMfgCodeFormat INT;  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "		DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "		SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "  		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = ' 1=1 ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefEntityType = 'Manufacturer') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'MFG'\");  \n" +
                "		ELSEIF (prefEntityType = 'Supplier') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisPrimary) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isPrimary = '\",pisPrimary,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisDefault) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isDefault = '\",pisDefault,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefName IS NOT NULL AND prefName != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND refName LIKE '%\",prefName,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(padditionalComment IS NOT NULL AND padditionalComment != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND additionalComment LIKE '%\",padditionalComment,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # Common Details for Retrive Contact Person.  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_Common = CONCAT(\"  \n" +
                "			fun_GetFormattedContactPersonName(a.firstName, a.middleName, a.lastName, \",vContPersonNameFormat,\") formattedName,  \n" +
                "			fun_getUserNameByID(a.updatedBy) updatedbyValue, fun_getUserNameByID(a.createdBy) createdbyValue,  \n" +
                "			fun_getRoleByID(a.createByRoleId) createdbyRoleValue, fun_getRoleByID(a.updateByRoleId) updatedbyRoleValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "			(CASE WHEN (a.systemGenerated = 0) THEN 'No' WHEN (a.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `syatemGeneratedValue`,  \n" +
                "			(CASE WHEN (a.isDefault = 0) THEN 'No' WHEN (a.isDefault = 1) THEN 'Yes' ELSE '' END) AS `isDefaultValue`,  \n" +
                "			(CASE WHEN (a.isPrimary = 0) THEN 'No' WHEN (a.isPrimary = 1) THEN 'Yes' ELSE '' END) AS `isPrimaryValue`  \n" +
                "		\");  \n" +
                "  \n" +
                "		# Filter: Personnel  \n" +
                "		SET @temp_Sproc_RetrieveMasterTemplate_employees = CONCAT(\"  \n" +
                "			select cp.personId, ecp.employeeId AS refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment, cp.phoneNumber,  \n" +
                "					cp.phone, cp.mobile, cp.division, cp.faxNumber, cp.phExtension, cp.isPrimary, cp.systemGenerated, '' As refName, 'Personnel' AS refEntityType,  \n" +
                "                    fun_convertJsonEmailToCommaSepList(cp.email) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive,  \n" +
                "                    fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName,\",vEmployeeNameFormat,\") personnel,  \n" +
                "                    (SELECT GROUP_CONCAT(jsonTblPhone.phone, ' Ext.' ,jsonTblPhone.phExtension ) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40)  PATH '$.phExtension')) jsonTblPhone ) phoneNumberList,  \n" +
                "					cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "				FROM contactperson cp  \n" +
                "                LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "				LEFT JOIN employees emp ON emp.id = ecp.employeeId and emp.isDeleted = 0  \n" +
                "					WHERE cp.refTableName = 'employees' AND cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # Filter: Manufacturer AND Supplier  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_mfgcodemst = CONCAT(\"  \n" +
                "			select cp.personId, cp.refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment, cp.phoneNumber,  \n" +
                "					cp.phone, cp.mobile, cp.division, cp.faxNumber, cp.phExtension, cp.isPrimary, cp.systemGenerated, fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName, \",vMfgCodeFormat,\") AS refName,  \n" +
                "					(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "					(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive, '' AS personnels,  \n" +
                "                    (SELECT GROUP_CONCAT(jsonTblPhone.phone, ' Ext.' ,jsonTblPhone.phExtension ) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40)  PATH '$.phExtension')) jsonTblPhone ) phoneNumberList,  \n" +
                "                    cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "                FROM contactperson cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID and mfg.isDeleted = 0 \",mfgcodemstCondition,\"  \n" +
                "						WHERE cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # UNION Records based of Filer : Create Final Query for Fetch Contact Person Records.  \n" +
                "        IF(prefEntityType = 'Supplier' OR prefEntityType = 'Manufacturer') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "		ELSEIF (prefEntityType = 'Personnel') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\") a \");  \n" +
                "        ELSE  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate= CONCAT(\"select *,\",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\" UNION ALL \",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY firstName ASC\" ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		 /* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveMasterTemplate,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveMasterTemplate,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveEmployee` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveEmployee`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE vTimeZone VARCHAR(50);  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "		DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat ;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "		SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "  		SET @temp_Sproc_RetrieveEmployee = CONCAT(\"  \n" +
                "			SELECT  \n" +
                "				`Employee`.id,  \n" +
                "				`Employee`.firstName,  \n" +
                "				`Employee`.email,  \n" +
                "				`Employee`.contact,  \n" +
                "				`Employee`.burdenRate,  \n" +
                "				`Employee`.street1,  \n" +
                "				`Employee`.street2,  \n" +
                "				`Employee`.postcode,  \n" +
                "				`Employee`.city,  \n" +
                "				`Employee`.state,  \n" +
                "				`Employee`.countryID,  \n" +
                "				`Employee`.paymentMode,  \n" +
                "				`Employee`.isActive,  \n" +
                "				`Employee`.middleName,  \n" +
                "				`Employee`.lastName,  \n" +
                "				`Employee`.initialName,  \n" +
                "				`Employee`.visibleCode,  \n" +
                "				`Employee`.phExtension,  \n" +
                "				`Employee`.profileImg ,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName, \",vContPersonNameFormat,\") contactPerson,  \n" +
                "				fun_GetEmployeeFormattedName(Employee.firstName, Employee.middleName, Employee.lastName, Employee.initialName, \",vEmployeeNameFormat,\" ) fullName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(ecp.assignedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') assignedAt,  \n" +
                "				fun_getUserNameByID(`Employee`.updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(`Employee`.createdBy) createdby,  \n" +
                "				fun_getRoleByID(`Employee`.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(`Employee`.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(`Employee`.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(`Employee`.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				`user`.`id` AS `userID`,  \n" +
                "				fun_getEmployeeInitialNameByEmpID (`Employee`.`managerID`) AS `managerEmployeeName`,  \n" +
                "				fun_getStatusByValue(`Employee`.`isActive`) AS `isActiveConvertedValue`,  \n" +
                "				fun_getEmployeeCertificationByEmpID(`Employee`.`id`) AS `empCertificationList`,  \n" +
                "				fun_getEmployeeResponsibilitByEmpID (`Employee`.`id`) AS employeeResponsibility  \n" +
                "			FROM `employees` AS `Employee`  \n" +
                "				INNER JOIN `users` AS `user` ON `Employee`.`id` = `user`.`employeeID` AND `user`.`isDeleted`=0  \n" +
                "				LEFT JOIN employee_contactperson AS ecp ON  ecp.employeeId = Employee.id and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "				LEFT JOIN contactperson cp ON cp.personId = ecp.contactPersonId and cp.isDeleted = 0  \n" +
                "			WHERE `Employee`.`isDeleted` = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY firstName ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveEmployee,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveEmployee,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_RetrieveEmployeeContactpersonList` ;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveEmployeeContactpersonList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN ppersonId INT,  \n" +
                "    IN pempId INT  \n" +
                "   )  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255);  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "		DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "		SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "		IF ppersonId IS NOT NULL THEN  \n" +
                "			# Personnel  \n" +
                "			SET @temp_Sproc_RetrieveEmployeeContactpersonList = CONCAT(\"  \n" +
                "				select ecp.id, ecp.employeeId, ecp.contactPersonId,  \n" +
                "                    fun_ApplyCommonDateTimeFormatByParaValue(ecp.assignedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') assignedAtValue,  \n" +
                "				    fun_ApplyCommonDateTimeFormatByParaValue(ecp.releasedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') releasedAtValue,  \n" +
                "					fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName, \",vEmployeeNameFormat,\" ) formattedName,  \n" +
                "					fun_getUserNameByID(ecp.updatedBy) updatedbyValue, fun_getUserNameByID(ecp.createdBy) createdbyValue,  \n" +
                "					fun_getRoleByID(ecp.createByRoleId) createdbyRoleValue, fun_getRoleByID(ecp.updateByRoleId) updatedbyRoleValue,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(ecp.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(ecp.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtValue  \n" +
                "				FROM employee_contactperson ecp  \n" +
                "					INNER JOIN employees emp ON emp.id = ecp.employeeId and emp.isDeleted = 0  \n" +
                "				WHERE ecp.contactPersonId = \",ppersonId,\" AND ecp.isDeleted = 0  \n" +
                "			\");  \n" +
                "		ELSE  \n" +
                "			# Contact Person  \n" +
                "			SET @temp_Sproc_RetrieveEmployeeContactpersonList = CONCAT(\"  \n" +
                "				select ecp.id, ecp.employeeId, ecp.contactPersonId,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(ecp.assignedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') assignedAtValue,  \n" +
                "				    fun_ApplyCommonDateTimeFormatByParaValue(ecp.releasedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') releasedAtValue,  \n" +
                "					fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName, \",vContPersonNameFormat,\") formattedName,  \n" +
                "					fun_getUserNameByID(ecp.updatedBy) updatedbyValue, fun_getUserNameByID(ecp.createdBy) createdbyValue,  \n" +
                "					fun_getRoleByID(ecp.createByRoleId) createdbyRoleValue, fun_getRoleByID(ecp.updateByRoleId) updatedbyRoleValue,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(ecp.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(ecp.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtValue  \n" +
                "				FROM employee_contactperson ecp  \n" +
                "					INNER JOIN contactperson cp ON cp.personId = ecp.contactPersonId and cp.isDeleted = 0  \n" +
                "				WHERE ecp.employeeId = \",pempId,\" AND ecp.isDeleted = 0  \n" +
                "			\");  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = ' 1=1 ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \" ORDER BY assignedAtValue DESC \" ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\" ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		 /* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveEmployeeContactpersonList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveEmployeeContactpersonList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 24-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5875,'2.00','V1',' fun_getContPersonNameDisplayFormat related functions SPs - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5875:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-01-2022 *********************************** */
                "DROP function IF EXISTS `fun_getAddressbyIDAndContactPersonID`;  \n" +
                "CREATE FUNCTION `fun_getAddressbyIDAndContactPersonID`(  \n" +
                "	pAddressID INT,  \n" +
                "	pcontactPersonID INT  \n" +
                ") RETURNS varchar(2000) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pAddress VARCHAR(2000);  \n" +
                "    DECLARE vFormatValue INT;  \n" +
                "  \n" +
                "	SELECT `values` INTO vFormatValue FROM systemconfigrations WHERE `key`='ContactPersonDisplayNameFormat';  \n" +
                "  \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>','ATTN: ',fun_GetFormattedContactPersonName(cp.firstName,cp.middleName,cp.lastName,vFormatValue),'<br/>', IFNULL(cp.division,''),(CASE WHEN cp.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),  \n" +
                "	 CASE WHEN cp.phoneNumber IS NOT NULL THEN '<br/>' ELSE '' END,  \n" +
                "	 CASE WHEN cp.phoneNumber IS NULL THEN '' ELSE CONCAT('Phone: ', IFNULL(fun_getPrimaryPhoneFromJsonList(cp.phoneNumber),'')) END,  \n" +
                "	CASE WHEN cp.phoneNumber IS NULL THEN '' ELSE CONCAT(' Ext. ', IFNULL(fun_getPrimaryPhExtensionFromJsonList(cp.phoneNumber),'')) END,  \n" +
                "	 (CASE WHEN cp.faxNumber IS NOT NULL THEN '<br/>' ELSE '' END), CASE WHEN cp.faxNumber IS NULL THEN '' ELSE  CONCAT('Fax: ',CAST(cp.faxNumber AS CHAR(100))) END,  \n" +
                "	(CASE WHEN cp.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',fun_getPrimaryEmailFromJsonList(cp.email)),'')) INTO  pAddress  \n" +
                "	FROM customer_addresses ca  \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "	LEFT JOIN contactperson cp ON ca.customerId=cp.refTransID AND cp.personId=pcontactPersonID  \n" +
                "	WHERE ca.id = pAddressID  AND ca.isDeleted = 0;  \n" +
                "  \n" +
                "	RETURN pAddress;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 24-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5876,'2.00','V1',' fun_getAddressbyIDAndContactPersonID function - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5876:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pEmployeeID INT,  \n" +
                "	IN pCustomerIds VARCHAR(16383),  \n" +
                "	IN pAssyTypeIds VARCHAR(16383),  \n" +
                "	IN pRfqTypeIds VARCHAR(16383),  \n" +
                "	IN pJobTypeIds VARCHAR(16383),  \n" +
                "	IN pAssyIds VARCHAR(16383),  \n" +
                "	IN pAssyNicknameIds LONGTEXT,  \n" +
                "	IN pIsExportControlled TINYINT,  \n" +
                "	IN pIsQuoteOverdue TINYINT,  \n" +
                "	IN pIsSubAssemblyBOMs TINYINT,  \n" +
                "	IN pIsPriceGroupQuoteAssembly TINYINT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pOlderThenDays INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTextAngularKeyCode VARCHAR(500);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "        DECLARE vTimeZone VARCHAR(50);  \n" +
                "        DECLARE v_mfrFormatType INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormatType;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "        SELECT fun_DatetimetoUTCDateTime() INTO @utcDatetime;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pCustomerIds IS NOT NULL AND pCustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (', pCustomerIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAssyTypeIds IS NOT NULL AND pAssyTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assemblyTypeID in (', pAssyTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pRfqTypeIds IS NOT NULL AND pRfqTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND RFQTypeID in (', pRfqTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF(pJobTypeIds IS NOT NULL AND pJobTypeIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND jobTypeID in (', pJobTypeIds, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAssyIds IS NOT NULL AND pAssyIds != '' AND pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( partID in (', pAssyIds, ') or partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' )) )');  \n" +
                "	ELSEIF(pAssyIds IS NOT NULL AND pAssyIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND partID in (', pAssyIds, ') ');  \n" +
                "	ELSEIF(pAssyNicknameIds IS NOT NULL AND pAssyNicknameIds != '') THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause,' and partID in (select c.id from component c where c.nickname in (', pAssyNicknameIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND  \n" +
                "		   (CASE  \n" +
                "			WHEN rfq_statusID = 1 THEN  \n" +
                "				DATE(quoteDueDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN  \n" +
                "				DATE(quoteSubmitDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				DATE(quoteClosedDate) BETWEEN DATE(\"',pFromDate,'\") AND DATE(\"',pToDate,'\")  \n" +
                "		    END)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pOlderThenDays IS NOT NULL) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' AND  \n" +
                "		 (CASE  \n" +
                "			WHEN rfq_statusID = 1 THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteDueDate) > ',pOlderThenDays,'  \n" +
                "			 WHEN (rfq_statusID = 2 OR rfq_statusID = 3) THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteSubmitDate) > ',pOlderThenDays,'  \n" +
                "			WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				DATEDIFF(\"',@utcDatetime,'\", quoteClosedDate) > ',pOlderThenDays,'  \n" +
                "		    END)  \n" +
                "		');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsQuoteOverdue = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  \n" +
                "        (CASE  \n" +
                "        WHEN rfq_statusID = 1 THEN  \n" +
                "				quoteDueDate < \"',@utcDatetime,'\"  \n" +
                "         WHEN (rfq_statusID = 2 OR rfq_statusID = 3 ) THEN  \n" +
                "				quoteSubmitDate > quoteDueDate  \n" +
                "		WHEN (rfq_statusID = 5 OR rfq_statusID = 4) THEN  \n" +
                "				quoteClosedDate	> quoteDueDate  \n" +
                "            END)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsSubAssemblyBOMs = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND assyLevel > 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* IF pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "		SET pWhereClause = concat(pWhereClause, ' AND assyLevel > 1');  \n" +
                "	END IF; */  \n" +
                "  \n" +
                "  \n" +
                "	SET vTextAngularKeyCode = fun_getTextAngularKeyCode();  \n" +
                "	/* DECLARE SQLStatement varchar(255); */  \n" +
                "   #DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "    SET @temp_Sproc_GetRFQList = CONCAT(\"SELECT (select COUNT(1) from rfq_lineitems rl where rl.partID = ra.partID and rl.isDeleted = 0) AS lineItemCount, rf.id, ra.partID,  \n" +
                "			count(1) over (partition by rf.id) AS quoteGroupAssyCount,  \n" +
                "            fun_getUserNameByEmployeID(rf.salesCommissionTo) salesCommissionTo,  \n" +
                "            (select count(1) from rfq_price_group rpg where refRFQID = rf.id and rpg.isDeleted = 0) priceGroupCount,  \n" +
                "            fun_getExportControlDetailFromPartID(ra.partID) as isExportControl,  \n" +
                "			#(SELECT COUNT(1) FROM rfq_assemblies WHERE rfqrefID = rf.id AND isDeleted = 0) AS quoteGroupAssyCount,  \n" +
                "			(SELECT MAX(pr.`level`)+1 FROM part_sub_assy_relationship pr WHERE pr.partID = ra.partID AND isDeleted = 0) AS assyLevel,  \n" +
                "			(SELECT COUNT(1) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id AND quoteNumber IS NOT NULL) AS revisedQuoteCount,  \n" +
                "			(SELECT max(id) FROM rfq_assemblies_quotation_submitted WHERE rfqAssyID = ra.id) AS lastQuoteID, ra.isSummaryComplete,  \n" +
                "			part.PIDCode,part.isCustom,part.RoHSStatusID, part.mfgPN, fun_replaceSpecialCharacters(part.mfgPN) mfgPNwithoutSpecialChar,  \n" +
                "            part.custAssyPN, part.mfgPNDescription,part.rev,part.assyCode,part.nickName,ro.rohsIcon,  \n" +
                "			fun_getUserNameByEmployeID(rf.employeeID) AS rfqCreatedBy,  \n" +
                "			fun_getUserNameByID(ra.Updatedby) AS rfqModifiedBy,  \n" +
                "			part.liveVersion AS liveInternalVersion,  \n" +
                "			fun_getBomProgressBar(ra.partID) AS bomProgress,  \n" +
                "			fun_getMaterialProgress(ra.id) AS materialProgress,  \n" +
                "			fun_getCustomPartProgress(ra.id) AS customPartProgress,  \n" +
                "			(CASE WHEN ra.status = 1 THEN 'In Progress'  \n" +
                "				  WHEN ra.status = 2 THEN 'Follow up Submitted RFQ'  \n" +
                "				  WHEN ra.status = 3 THEN 'Won'  \n" +
                "				  WHEN ra.status = 4 THEN 'Lost'  \n" +
                "				  WHEN ra.status = 5 THEN 'Canceled' END) `status` ,  \n" +
                "			ra.status rfq_statusID,  \n" +
                "			(CASE WHEN ra.quoteFinalStatus = 1 THEN 'Pending'  \n" +
                "					WHEN ra.quoteFinalStatus = 2 THEN 'Re-Quote'  \n" +
                "					WHEN ra.quoteFinalStatus = 3 THEN 'Submitted'  \n" +
                "					WHEN ra.quoteFinalStatus = 4 THEN 'Completed' END) `quoteProgress` ,  \n" +
                "			ro.name AS `rohsComplientConvertedValue`,  \n" +
                "			(CASE WHEN (`ra`.`isRepeat` = 0) THEN 'One Time'  \n" +
                "				WHEN (`ra`.`isRepeat` = 1) THEN 'Repeat' ELSE '' END) AS `isRepeat`,  \n" +
                "			(CASE WHEN (`ra`.`timePeriod` = 0) THEN 'D'  \n" +
                "				WHEN (`ra`.`timePeriod` = 1) THEN 'W'  \n" +
                "				WHEN (`ra`.`timePeriod` = 2) THEN 'Y' ELSE '' END) AS `timeperiod`,ra.jobTypeID,ra.assemblyTypeID,ra.RFQTypeID,  \n" +
                "			fun_getAssyTypeByID(ra.assemblyTypeID) assyType,  \n" +
                "            fun_getjobTypeByID(ra.jobTypeID) AS JobType, fun_getrfqTypeByID(ra.RFQTypeID) AS OrderType,fun_GetFormattedMfgCode(cu.mfgCode,cu.mfgName,\",v_mfrFormatType,\") AS Customer, cu.id customerID,  \n" +
                "			fun_getUserNameByID(ra.quoteSubmittedBy) AS RFQ_SubmitedBy, ra.winPrice,ra.winQuantity,  \n" +
                "			ra.quoteInDate, cast(ra.quoteDueDate as DATE) as quoteDueDate, ra.quoteSubmitDate,ra.quoteNumber, ra.id rfqAssyID, ra.quotePriority,ra.isReadyForPricing,  \n" +
                "            ra.isCustomPartDetShowInReport,  \n" +
                "            ra.quoteValidTillDate,  \n" +
                "			part.isActivityStart, fun_getMfgCodeByPartID(ra.partID) customerCode,  \n" +
                "			(CASE WHEN part.isActivityStart THEN concat(assyusr.firstName, ' ', assyusr.lastName) ELSE '' END )AS username, part.activityStartBy,  \n" +
                "			(CASE WHEN part.isActivityStart THEN TIMESTAMPDIFF(SECOND, part.activityStartAt,'\",@utcDatetime,\"') ELSE 0 END ) activityStartAt,  \n" +
                "			part.activityStartAt activityStartAtDateTime,  \n" +
                "            ra.isActivityStart as isCostingActivityStart,  \n" +
                "            (CASE WHEN ra.isActivityStart THEN concat(rfqusr.firstName, ' ', rfqusr.lastName) ELSE '' END )AS costingUserName, ra.activityStartBy as costingActivityBy,  \n" +
                "			(CASE WHEN ra.isActivityStart THEN TIMESTAMPDIFF(SECOND, ra.activityStartAt,'\",@utcDatetime,\"') ELSE 0 END ) costingActivityStartAt,  \n" +
                "			ra.isBOMVerified,fun_getTextAngularData(ra.reason,'\",vTextAngularKeyCode,\"') reason, fun_getUserNameByID(ra.quoteClosedBy) AS RFQ_ClosedBy,ra.quoteClosedDate,  \n" +
                "            fun_getUserNameByID(ra.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(ra.createdBy) createdby,  \n" +
                "			fun_getRoleByID(ra.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(ra.updateByRoleId) updatedbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(ra.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			fun_getRfqLabourPercentage(ra.id) laborPercentage,  \n" +
                "            ra.partCostingBOMInternalVersion  \n" +
                "		FROM rfqforms rf  \n" +
                "		INNER JOIN rfq_assemblies ra ON ra.rfqrefID = rf.id AND ra.isdeleted = 0  \n" +
                "        JOIN mfgcodemst cu ON cu.id = rf.customerId AND cu.isdeleted = 0  \n" +
                "		JOIN component part ON part.id = ra.partID AND part.category = 3 AND part.isdeleted = 0  \n" +
                "		JOIN rfq_rohsmst ro ON part.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "        LEFT JOIN users rfqusr ON rfqusr.id = ra.activityStartBy  \n" +
                "        LEFT JOIN users assyusr ON assyusr.id = part.activityStartBy  \n" +
                "		WHERE rf.isdeleted = 0  \n" +
                "        and (case when (select count(1) from employee_mfg_mapping where employeeId = \",pEmployeeID,\" and isDeleted = 0) > 0 then  \n" +
                "		exists (select 1 from employee_mfg_mapping where mfgCodeId =  cu.id and employeeId = \",pEmployeeID,\" and isDeleted = 0)  \n" +
                "		else 1=1 end)  \n" +
                "        \");  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY quoteDueDate DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pIsExportControlled = 1  AND pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "		SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\" AND priceGroupCount > 1 ');  \n" +
                "	ELSEIF pIsExportControlled = 1 THEN  \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having fun_getExportControlDetailFromPartID(ra.partID) = \"yes\"');  \n" +
                "	ELSEIF pIsExportControlled = 0 AND pIsPriceGroupQuoteAssembly = 1 THEN  \n" +
                "    	SET @temp_Sproc_GetRFQList = CONCAT(@temp_Sproc_GetRFQList, 'Having priceGroupCount > 0 ');  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @RFQ_STATEMENT1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE RFQquery1 FROM @RFQ_STATEMENT1;  \n" +
                "	EXECUTE RFQquery1;  \n" +
                "	DEALLOCATE PREPARE RFQquery1;  \n" +
                "  \n" +
                "	SET @RFQ_STATEMENT2 = CONCAT(\"select * from ( \", @temp_Sproc_GetRFQList,\" ) c where 1=1 and \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE RFQquery2 FROM @RFQ_STATEMENT2;  \n" +
                "	EXECUTE RFQquery2;  \n" +
                "	DEALLOCATE PREPARE RFQquery2;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getMfgCodeAndNameByID` ;  \n" +
                "CREATE FUNCTION `fun_getMfgCodeAndNameByID`(  \n" +
                "	pMFGCodeID INT(11)  \n" +
                ") RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vMFGName VARCHAR(500);  \n" +
                "	DECLARE vFormatName VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vFormatName;  \n" +
                "  \n" +
                "	SELECT fun_GetFormattedMfgCode(mfgCode,mfgName,vFormatName)  INTO vMFGName FROM mfgcodemst WHERE id = pMFGCodeID;  \n" +
                "	RETURN vMFGName;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPIDList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPIDList`(  \n" +
                "	IN pCustomerID VARCHAR(500),  \n" +
                "	IN passyIds VARCHAR (16000),  \n" +
                "	IN pisFromSalesOrder TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE mfgCodeID INT;  \n" +
                "	DECLARE whereClause VARCHAR(500);  \n" +
                "	DECLARE partstatusID INT;  \n" +
                "	DECLARE v_mfrFormatType INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormatType;  \n" +
                "	SELECT cp.id INTO partstatusID FROM component_partstatusmst cp WHERE cp.name = 'Obsolete';  \n" +
                "	SET whereClause = \"WHERE c.category = 3 AND c.isDeleted = 0\";  \n" +
                "    IF(pisFromSalesOrder = 1)THEN  \n" +
                "		SET whereClause = \"WHERE (c.category = 3 or c.iscustom = 1) AND c.isDeleted = 0\";  \n" +
                "	END IF;  \n" +
                "	IF (SELECT COUNT(1) FROM mfgcodemst WHERE id = pCustomerID AND isCompany = 1)>0 THEN -- fca then default get all assy  \n" +
                "		SET pCustomerID = NULL;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN  \n" +
                "		SELECT fun_getAcquiredMFRList(pCustomerID);  \n" +
                "		SET whereClause = CONCAT(whereClause,\" AND (c.mfgcodeID in (  \n" +
                "														select buyTo from acquireCustomers  \n" +
                "                                                        union  \n" +
                "														select smm.refMfgCodeMstID from supplier_mapping_mst smm  \n" +
                "                                                        where smm.isDeleted = 0 and smm.isCustMapping=0 and smm.supplierID = \", pCustomerID, \")) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF passyIds IS NOT NULL THEN  \n" +
                "		SET whereClause = CONCAT(whereClause,\" or (c.id in (\",passyIds,\") AND c.isDeleted = 0) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(  \n" +
                "			\"SELECT c.id,			c.mfgPN, 		c.PIDCode, 		c.RoHSStatusID, 	c.rohsDeviation,  \n" +
                "					c.rev, 			c.nickName, 	c.assyCode, 	c.id AS partID, 	c.mfgPN,  \n" +
                "                    c.mfgPNDescription AS description,				ro.rohsIcon,        ro.name AS rohsName,  \n" +
                "                    c.mfgCodeID,	c.isCustom,		c.assemblyType, mfg.mfgCode,		c.parttype,  \n" +
                "                    c.category,		mfg.mfgName,	c.specialNote, 	c.liveVersion, 		c.isGoodPart,  \n" +
                "                    c.partStatus, 	c.businessRisk,	u.unitName,		u.id unitID, c.custAssyPN,  \n" +
                "                    fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,\",v_mfrFormatType,\") as mfgNameWithCode,  \n" +
                "					(SELECT COUNT(rl.id) FROM rfq_lineitems rl WHERE rl.partID = c.id AND rl.isDeleted = 0 ) AS lineItemCount,  \n" +
                "					(SELECT ra.id FROM rfq_assemblies ra WHERE ra.partID = c.id AND ra.isDeleted = 0 LIMIT 1) AS QuoteGroup,  \n" +
                "					CASE c.partStatus WHEN \", partstatusID, \" THEN FALSE ELSE TRUE END AS isActive  \n" +
                "			FROM component c  \n" +
                "			INNER JOIN uoms u ON c.uom = u.id AND u.isDeleted = 0  \n" +
                "			INNER JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id AND ro.isDeleted = 0  \n" +
                "			INNER JOIN mfgcodemst mfg ON c.mfgCodeID = mfg.id AND mfg.isDeleted = 0 \", whereClause,' order by c.PIDCode');  \n" +
                "	#select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "    EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5877,'2.00','V1','Alter procedure Sproc_GetRFQList-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5877:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_contactperson` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_contactperson`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempContactperson;  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempContactperson as  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"contactperson\" else \"\" end as msg FROM employee_contactperson WHERE contactPersonId IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust_refund\" else \"\" end as msg FROM packingslip_invoice_payment  WHERE (billToContactPersonID IN (',IDs,') OR payToContactPersonID IN (',IDs,')) AND refPaymentMode = \"CR\" AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"P\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_invoice\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"I\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_creditmemo\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"C\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE  (supplierContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_line_release_det WHERE shippingContactPersonID IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0 AND (custBillingContactPersonID IN (',IDs,') OR custShippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR contactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0 AND shippingContactPersonID IN (',IDs,') LIMIT 1)  \n" +
                "		');  \n" +
                "/*	  (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive\" else \"\" end as msg FROM packing_slip_material_receive WHERE isDeleted = 0 AND (billToConactPerson IN (',IDs,')  \n" +
                "			OR shipToContactPersonID IN (',IDs,') OR rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted = 0 AND (payToContactPersonID IN (',IDs,') OR billToContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE isDeleted = 0 AND (custBillingConactPersonID IN (',IDs,') OR custShippingConactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "  */  \n" +
                "  \n" +
                "  	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "  \n" +
                "    IF(countList=FALSE) THEN  \n" +
                "		IF(SELECT SUM(t.cnt) FROM tempContactperson t)=0 THEN  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempSetIsDefaultContactperson AS  \n" +
                "				SELECT cp.refTransID,cp.refTableName FROM contactperson cp  WHERE cp.personId IN (IDs) AND cp.isDefault =1 AND cp.deletedAt IS NULL;  \n" +
                "			SET @SQl1 = CONCAT('update contactperson set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where personId in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "            # If Default Contact person is Deleted then Set new Default Contact Person.  \n" +
                "            IF(EXISTS (SELECT 1 FROM tempSetIsDefaultContactperson)) THEN  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempPersonId AS (SELECT MIN(cp.personId) personId FROM contactperson cp  \n" +
                "						WHERE EXISTS (  \n" +
                "							SELECT 1 FROM tempSetIsDefaultContactperson tcp WHERE tcp.refTransID = cp.refTransID AND tcp.refTableName = cp.refTableName  \n" +
                "							) AND cp.isDeleted = 0 GROUP BY cp.refTransID,cp.refTableName);  \n" +
                "				UPDATE contactperson SET isDefault =1 WHERE personId IN  \n" +
                "					(SELECT personId FROM tempPersonId);  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempPersonId;  \n" +
                "			END IF;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempSetIsDefaultContactperson;  \n" +
                "  \n" +
                "			SELECT * FROM tempContactperson WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempContactperson t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "		FROM tempContactperson t1  \n" +
                "		INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "			WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "			ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempContactperson;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5878,'2.00','V1',' Alter procedure Sproc_checkDelete_contactperson-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5878:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-01-2022*********************************** */
                "INSERT INTO `feature_mst` (`featureName`, `isActive`, `isDeleted`, `createdAt`, `createdBy`)  \n" +
                "VALUES ('Allow to Delete Address for Customer/Supplier/Manufacturer', '1', '0',current_timestamp() , '1');  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5879,'2.00','V1','Add Delete Address Feature  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5879:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-01-2022*********************************** */
                "DROP FUNCTION IF EXISTS fun_getContactPersonNameById;  \n" +
                "CREATE FUNCTION `fun_getContactPersonNameById`(  \n" +
                "	pPersonId INT  \n" +
                ") RETURNS varchar(1000) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn VARCHAR(1000);  \n" +
                "  \n" +
                "    Select fun_GetFormattedContactPersonName(cp.firstName, cp.middleName,cp.lastName) into vReturn  \n" +
                "    From contactperson cp  \n" +
                "    Where cp.personId = pPersonId;  \n" +
                "  \n" +
                "    RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5880,'2.00','V1','fun_getContactPersonNameById--Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5880:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-01-2022*********************************** */
                "DROP FUNCTION IF EXISTS fun_getCountryNameById;  \n" +
                "CREATE FUNCTION `fun_getCountryNameById`(  \n" +
                "	pCountryID INT  \n" +
                ") RETURNS varchar(255) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn VARCHAR(255);  \n" +
                "  \n" +
                "    Select countryName into vReturn  \n" +
                "    From countrymst  \n" +
                "    Where countryID = pCountryID;  \n" +
                "  \n" +
                "    RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5881,'2.00','V1','fun_getCountryNameById  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5881:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-01-2022*********************************** */
                "DROP TRIGGER IF EXISTS Trg_BI_customer_addresses;  \n" +
                "CREATE TRIGGER `Trg_BI_customer_addresses` BEFORE INSERT ON `customer_addresses` FOR EACH ROW BEGIN  \n" +
                "	IF( (SELECT COUNT(1) FROM customer_addresses ca  \n" +
                "		WHERE  ca.isDeleted = 0 AND ca.customerId = NEW.customerId AND ca.addressType = NEW.AddressType  \n" +
                "        AND IFNULL(ca.companyName,'-') = IFNULL(NEW.companyName,'-')  \n" +
                "        AND IFNULL(ca.bankRemitToName,'-') = IFNULL(NEW.bankRemitToName,'-')  \n" +
                "	AND IFNULL(ca.street1,'-') = IFNULL(NEW.street1,'-') AND IFNULL(ca.street2,'-') = IFNULL(NEW.street2,'-')  \n" +
                "        AND IFNULL(ca.street3,'-') = IFNULL(NEW.street3,'-') AND IFNULL(ca.city,'-') = IFNULL(NEW.city,'-')  \n" +
                "        AND IFNULL(ca.state,'-') = IFNULL(NEW.state,'-') AND IFNULL(ca.countryID,0) = IFNULL(NEW.countryID,0)  \n" +
                "	AND IFNULL(ca.postcode,'-') = IFNULL(NEW.postcode,'-')  AND IFNULL(ca.additionalComment,'-') = IFNULL(NEW.additionalComment,'-')  \n" +
                "        AND IFNULL(ca.latitude,0) = IFNULL(NEW.latitude,0) AND IFNULL(ca.longitude,0) = IFNULL(NEW.longitude,0)  \n" +
                "	AND IFNULL(ca.defaultContactPersonID,0) = IFNULL(NEW.defaultContactPersonID,0) AND IFNULL(ca.shippingMethodID,0) = IFNULL(NEW.shippingMethodID,0)  \n" +
                "        AND IFNULL(ca.carrierID,0) = IFNULL(NEW.carrierID,0) AND IFNULL(ca.carrierAccount,'-') = IFNULL(NEW.carrierAccount,'-')) > 0) THEN  \n" +
                "       SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='Duplicate Address entry';  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5882,'2.00','V1','Trg_BI_customer_addresses  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5882:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-01-2022*********************************** */
                "DROP TRIGGER IF EXISTS Trg_BU_customer_addresses;  \n" +
                "CREATE TRIGGER `Trg_BU_customer_addresses` BEFORE UPDATE ON `customer_addresses` FOR EACH ROW BEGIN  \n" +
                "	IF( (SELECT COUNT(1) FROM customer_addresses ca  \n" +
                "		WHERE  ca.isDeleted = 0 AND NEW.isDeleted = 0 AND ca.customerId = NEW.customerId  \n" +
                "        AND ca.addressType = NEW.AddressType AND ca.isActive = NEW.isActive  \n" +
                "        AND IFNULL(ca.companyName,'-') = IFNULL(NEW.companyName,'-')  \n" +
                "        AND IFNULL(ca.bankRemitToName,'-') = IFNULL(NEW.bankRemitToName,'-')  \n" +
                "		AND IFNULL(ca.street1,'-') = IFNULL(NEW.street1,'-') AND IFNULL(ca.street2,'-') = IFNULL(NEW.street2,'-')  \n" +
                "        AND IFNULL(ca.street3,'-') = IFNULL(NEW.street3,'-') AND IFNULL(ca.city,'-') = IFNULL(NEW.city,'-')  \n" +
                "        AND IFNULL(ca.state,'-') = IFNULL(NEW.state,'-') AND IFNULL(ca.countryID,0) = IFNULL(NEW.countryID,0)  \n" +
                "		AND IFNULL(ca.postcode,'-') = IFNULL(NEW.postcode,'-')  AND IFNULL(ca.additionalComment,'-') = IFNULL(NEW.additionalComment,'-')  \n" +
                "        AND IFNULL(ca.latitude,0) = IFNULL(NEW.latitude,0) AND IFNULL(ca.longitude,0) = IFNULL(NEW.longitude,0)  \n" +
                "		AND IFNULL(ca.defaultContactPersonID,0) = IFNULL(NEW.defaultContactPersonID,0) AND IFNULL(ca.shippingMethodID,0) = IFNULL(NEW.shippingMethodID,0)  \n" +
                "        AND IFNULL(ca.carrierID,0) = IFNULL(NEW.carrierID,0) AND IFNULL(ca.carrierAccount,'-') = IFNULL(NEW.carrierAccount,'-')) > 0) THEN  \n" +
                "       SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='Duplicate Address entry';  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5883,'2.00','V1','Trg_BU_customer_addresses  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5883:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-01-2022*********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_customer_addresses;  \n" +
                "CREATE TRIGGER `Trg_AU_customer_addresses` AFTER UPDATE ON `customer_addresses` FOR EACH ROW BEGIN  \n" +
                "	IF IFNULL(OLD.street1,0) != IFNULL(NEW.street1,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_ADDRESES\",CAST(NEW.id AS CHAR),'Address Line 1',OLD.street1,  \n" +
                "      NEW.street1,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.street2,0) != IFNULL(NEW.street2,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_ADDRESES\",CAST(NEW.id AS CHAR),'Address Line 2',OLD.street2,  \n" +
                "      NEW.street2,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.street3,0) != IFNULL(NEW.street3,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_ADDRESES\",CAST(NEW.id AS CHAR),'Address Line 3',OLD.street3,  \n" +
                "      NEW.street3,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.city,0) != IFNULL(NEW.city,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_ADDRESES\",CAST(NEW.id AS CHAR),'City',OLD.city,  \n" +
                "      NEW.city,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.state,0) != IFNULL(NEW.state,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_ADDRESES\",CAST(NEW.id AS CHAR),'State',OLD.state,  \n" +
                "      NEW.state,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.countryID,0) != IFNULL(NEW.countryID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_ADDRESES\",CAST(NEW.id AS CHAR),'Country ',fun_getCountryNameById(OLD.countryID),  \n" +
                "     fun_getCountryNameById(NEW.countryID),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.postcode,0) != IFNULL(NEW.postcode,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_ADDRESES\",CAST(NEW.id AS CHAR),'Postal Code ',OLD.postcode,  \n" +
                "       NEW.postcode,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isDefault,0) != IFNULL(NEW.isDefault,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_ADDRESES\",CAST(NEW.id AS CHAR),'Default Address ',CASE WHEN OLD.isDefault = 1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN NEW.isDefault = 1 THEN 'Yes' ELSE 'No' END,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.companyName,0) != IFNULL(NEW.companyName,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_ADDRESES\",CAST(NEW.id AS CHAR),'Company Name',OLD.companyName,  \n" +
                "       NEW.companyName,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.bankRemitToName,0) != IFNULL(NEW.bankRemitToName,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_ADDRESES\",CAST(NEW.id AS CHAR),'Remit To Name',OLD.bankRemitToName,  \n" +
                "       NEW.bankRemitToName,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.additionalComment,0) != IFNULL(NEW.additionalComment,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_ADDRESES\",CAST(NEW.id AS CHAR),'Comment',OLD.additionalComment,  \n" +
                "       NEW.additionalComment,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_ADDRESES\",CAST(NEW.id AS CHAR),'Shipping Method',fun_getGenericCategoryCodeNameByID(OLD.shippingMethodID),  \n" +
                "       fun_getGenericCategoryCodeNameByID(NEW.shippingMethodID),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_ADDRESES\",CAST(NEW.id AS CHAR),'Carrier',fun_getGenericCategoryCodeNameByID(OLD.carrierID),  \n" +
                "       fun_getGenericCategoryCodeNameByID(NEW.carrierID),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.carrierAccount,0) != IFNULL(NEW.carrierAccount,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_ADDRESES\",CAST(NEW.id AS CHAR),'Carrier Account#',OLD.carrierAccount,  \n" +
                "       NEW.carrierAccount,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_ADDRESES\",CAST(NEW.id AS CHAR),'Active',CASE WHEN OLD.isActive = 1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN NEW.isActive = 1 THEN 'Yes' ELSE 'No' END,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.defaultContactPersonID,0) != IFNULL(NEW.defaultContactPersonID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_ADDRESES\",CAST(NEW.id AS CHAR),'Contact Person',fun_getContactPersonNameById(OLD.defaultContactPersonID),  \n" +
                "       fun_getContactPersonNameById(OLD.defaultContactPersonID),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5884,'2.00','V1',' Trg_AU_customer_addresses - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5884:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-01-2022*********************************** */
                "DROP FUNCTION IF EXISTS  fun_getContactPersonNameById;  \n" +
                "CREATE FUNCTION `fun_getContactPersonNameById`(  \n" +
                "	pPersonId INT  \n" +
                ") RETURNS varchar(1000) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn VARCHAR(1000);  \n" +
                "	DECLARE vContactPersonFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getContPersonNameDisplayFormat() INTO vContactPersonFormat;  \n" +
                "  \n" +
                "    Select fun_GetFormattedContactPersonName(cp.firstName, cp.middleName,cp.lastName,vContactPersonFormat) into vReturn  \n" +
                "    From contactperson cp  \n" +
                "    Where cp.personId = pPersonId;  \n" +
                "  \n" +
                "    RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5885,'2.00','V1',' fun_getContactPersonNameById - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5885:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerInvoiceDetails;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pFilterStatus LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pPoNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearchPO TINYINT,  \n" +
                "	IN pMfgCodeIds LONGTEXT ,  \n" +
                "	IN pPaymentTermsIds LONGTEXT ,  \n" +
                "	IN pPartId VARCHAR(5000) ,  \n" +
                "	IN pTransType VARCHAR(5) ,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
                "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
                "	IN pZeroAmountFilter TINYINT,  \n" +
                "	IN pCreditMemoRefundStatusFilter VARCHAR(100)      ,  \n" +
                "	IN pMarkedForRefund TINYINT  \n" +
                "	-- IN pChequeNumber  VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_empFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET v_appliedCMPDJoin = '';  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN  \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
                "	ELSE  \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount ,  \n" +
                "						NULL as totRefundIssuedAgainstCreditMemo , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"  \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,  \n" +
                "        cp.invoiceNumber,cp.invoiceDate, cp.revision,  \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
                "        cp.soNumber,cp.soDate,  \n" +
                "		cp.sorevision,  \n" +
                "        cp.refSalesOrderID,  \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,  \n" +
                "        cp.refCustInvoiceID,  \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "		 cp.status,  \n" +
                "         cp.subStatus,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
                "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
                "			ELSE '' END) AS creditAppliedStatus ,  \n" +
                "		  cp.paymentStatus,  \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
                "		  ifnull(cp.totalAmount,0) totalAmount,  \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,  \n" +
                "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,  \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,  \n" +
                "		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\", vMfgCodeFormat,\") as customerName,  \n" +
                "		 m.mfgcode as customerCode,  \n" +
                "         cp.customerID,  \n" +
                "         cp.createdBy as createdById,  \n" +
                "		\",v_receivedAmtSF,\"  \n" +
                "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,  \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,  \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,  \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,  \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,  \n" +
                "         cp.salesCommissionTo,  \n" +
                "         fun_GetEmployeeFormattedName(salecomm.firstName,salecomm.middleName,salecomm.lastName,salecomm.initialName,\",v_empFormat,\") salesCommissionToName,  \n" +
                "         cp.termsDays termDays,  \n" +
                "         cp.freeOnBoardId,  \n" +
                "         cp.freeOnBoardName,  \n" +
                "         cp.isLocked,  \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "         cp.shippingMethodId, fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
                "         packingSlip.id packingSlipId,  \n" +
                "         (select group_concat(paymentNumber)  \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,  \n" +
                "		 (select COUNT(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) cpTrackNumberCount,  \n" +
                "         cp.rmaNumber , cp.systemId,  \n" +
                "        fun_getAddressbyID(cp.intermediateShipmentId) intermediateAddress,  \n" +
                "		fun_getAddressbyID(cp.shipToId) shippingAddress,  \n" +
                "		fun_getAddressbyID(cp.billToId) billingAddress,  \n" +
                "        fun_getFormattedContactPerson(billCP.firstName,billCP.middleName,billCP.lastName,billCP.division,billCP.email,billCP.phoneCountryCode, fun_getPrimaryPhoneFromJsonList(billCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(billCP.phoneNumber), billCP.mobile, billCP.faxCountryCode, billCP.faxNumber) billToContactPerson,  \n" +
                "		fun_getFormattedContactPerson(shipCP.firstName,shipCP.middleName,shipCP.lastName,shipCP.division,shipCP.email,shipCP.phoneCountryCode,fun_getPrimaryPhoneFromJsonList(shipCP.phoneNumber) , fun_getPrimaryPhExtensionFromJsonList(shipCP.phoneNumber), shipCP.mobile, shipCP.faxCountryCode, shipCP.faxNumber) shipToToContactPerson,  \n" +
                "		fun_getFormattedContactPerson(interCP.firstName,interCP.middleName,interCP.lastName,interCP.division,interCP.email,interCP.phoneCountryCode, fun_getPrimaryPhoneFromJsonList(interCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(interCP.phoneNumber), interCP.mobile, interCP.faxCountryCode, interCP.faxNumber) markToToContactPerson,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
                "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,  \n" +
                "         (SELECT `paymentDate` FROM packingslip_invoice_payment_det pipd  \n" +
                "					JOIN packingslip_invoice_payment pip ON pipd.`refPayementid` = pip.id  \n" +
                "		WHERE pipd.`refCustPackingslipInvoiceID` = cp.id AND pip.refPaymentMode = 'R' AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "		AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0 ORDER BY pipd.id DESC LIMIT 1) AS lastRcvdPaymentDate ,  \n" +
                "		fun_getGenericCategoryCodeNameByID(cp.carrierID) carrierName,  \n" +
                "        cp.carrierID , cp.carrierAccountNumber  \n" +
                "	 FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID  \n" +
                "        LEFT JOIN contactperson billCP ON billCP.personId = cp.billingContactPersonID and billCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson shipCP ON shipCP.personId = cp.shippingContactPersonID and shipCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson interCP ON interCP.personId = cp.intermediateContactPersonID and interCP.isDeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
                "        LEFT JOIN employees salecomm ON salecomm.id = cp.salesCommissionTo and salecomm.isDeleted = 0  \n" +
                "		\" , v_appliedCMPDJoin ,\"  \n" +
                "	WHERE  cp.isDeleted=0  \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.termsId in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPartId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN  \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');  \n" +
                "	# END IF;  \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) END) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) END) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
                "		IF pIsExactSearchPO = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
                "                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
                "                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
                "	IF pFromDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pToDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- filter zero amount invoice  \n" +
                "	IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefund = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "		 round((c.totalAmount),2) totalAmount,  \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,  \n" +
                "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0) + IFNULL(c.totRefundIssuedAgainstCreditMemo,0) ),2)  \n" +
                "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,  \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
                "						else '' end) materialStatus from ( \",  \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	--  select @SQLStatement2	;  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5886,'2.00','V1','Sproc_RetrieveCustomerInvoiceDetails  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5886:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDeatils;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE v_empFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname,\", vMfgCodeFormat,\") customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "			mfgmst.mfgCode custCode,  \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "            case when sm.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
                "            sm.isBlanketPO,  \n" +
                "cd.id AS customerslipId,  \n" +
                "case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "  fun_getAddressbyID(cd.intermediateShipmentId) markFor,  \n" +
                "  fun_getAddressbyID(cd.shipToId) shipTo,  \n" +
                "  fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "  fun_getFormattedContactPerson(billCP.firstName,billCP.middleName,billCP.lastName,billCP.division,billCP.email,billCP.phoneCountryCode, fun_getPrimaryPhoneFromJsonList(billCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(billCP.phoneNumber), billCP.mobile, billCP.faxCountryCode, billCP.faxNumber) billToContactPerson,  \n" +
                "  fun_getFormattedContactPerson(shipCP.firstName,shipCP.middleName,shipCP.lastName,shipCP.division,shipCP.email,shipCP.phoneCountryCode, fun_getPrimaryPhoneFromJsonList(shipCP.phoneNumber),fun_getPrimaryPhExtensionFromJsonList(shipCP.phoneNumber), shipCP.mobile, shipCP.faxCountryCode, shipCP.faxNumber) shipToToContactPerson,  \n" +
                "  fun_getFormattedContactPerson(interCP.firstName,interCP.middleName,interCP.lastName,interCP.division,interCP.email,interCP.phoneCountryCode, fun_getPrimaryPhoneFromJsonList(interCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(interCP.phoneNumber), interCP.mobile, interCP.faxCountryCode, interCP.faxNumber) markToToContactPerson,  \n" +
                "   fun_GetEmployeeFormattedName(emp.firstName,emp.middleName,emp.lastName,emp.initialName,\",v_empFormat,\") salesCommissionToName,  \n" +
                "   cd.salesCommissionTo,  \n" +
                "     (CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         fun_getUserNameByID(cd.updatedBy) updatedby,  \n" +
                "         fun_getUserNameByID(cd.createdBy) createdby,  \n" +
                "         fun_getRoleByID(cd.createByRoleId) createdbyRole,  \n" +
                "         fun_getRoleByID(cd.updateByRoleId) updatedbyRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdAt,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS lockedAt,  \n" +
                "         cpTrack.cpTrackNumber,  \n" +
                "         ifnull(cpTrack.cpTrackNumberCount,0) cpTrackNumberCount,  \n" +
                "         (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "                        cd.revision ,  \n" +
                "           ifnull(packingdtl.packingSlipCnt,0)  packingSlipCnt,  \n" +
                "           sm.rmaNumber,sm.isRmaPO,  \n" +
                "           (CASE when sm.isRmaPO = 1 then 'YES' when sm.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "           (CASE when sm.isRmaPO = 1 then 'Yes' when sm.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp,  \n" +
                "           fun_getGenericCategoryCodeNameByID(cd.carrierID)  carrierName,  \n" +
                "           cd.carrierID , cd.carrierAccountNumber  \n" +
                "		FROM customer_packingslip cd  \n" +
                "        LEFT JOIN mfgcodemst mfgmst ON mfgmst.id = cd.customerId and mfgmst.isDeleted = 0  \n" +
                "		LEFT JOIN salesordermst sm on sm.id=cd.refSalesOrderID and sm.isdeleted=0  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0  \n" +
                "		LEFT JOIN (  \n" +
                "		SELECT COUNT(cpTrack.trackNumber) cpTrackNumberCount,GROUP_CONCAT(cpTrack.trackNumber SEPARATOR ', ') cpTrackNumber,cpTrack.refCustPackingSlipID FROM customer_packing_slip_track_number cpTrack WHERE  cpTrack.isDeleted = 0 GROUP BY cpTrack.refCustPackingSlipID  \n" +
                "		) cpTrack on cpTrack.refCustPackingSlipID=cd.id  \n" +
                "		left join ( select count(1) packingSlipCnt,packingdtl.refCustPackingSlipID from customer_packingslip_det packingdtl where packingdtl.isDeleted = 0 GRoup by packingdtl.refCustPackingSlipID  \n" +
                "		) packingdtl on packingdtl.refCustPackingSlipID=cd.id  \n" +
                "        LEFT JOIN contactperson billCP ON billCP.personId = cd.billingContactPersonID and billCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson shipCP ON shipCP.personId = cd.shippingContactPersonID and shipCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson interCP ON interCP.personId = cd.intermediateContactPersonID and interCP.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "	 IF (pfilterStatus = 0) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    ELSE  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  \n" +
                "   IF pmfgPartID IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails= CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' AND cd.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pmfgPartID , ')) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "		padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,'''  or cd.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "        SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "		padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%''  or cd.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "  SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5887,'2.00','V1','Sproc_RetrieveCustomerPackingSlipDeatils  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5887:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-01-2022*********************************** */
                "DROP TRIGGER IF EXISTS Trg_BU_customer_addresses;  \n" +
                "CREATE TRIGGER `Trg_BU_customer_addresses` BEFORE UPDATE ON `customer_addresses` FOR EACH ROW BEGIN  \n" +
                "	IF( (SELECT COUNT(1) FROM customer_addresses ca  \n" +
                "		WHERE  ca.isDeleted = 0 AND NEW.isDeleted = 0 AND ca.customerId = NEW.customerId  \n" +
                "        AND ca.addressType = NEW.AddressType AND ca.isActive = NEW.isActive  \n" +
                "        AND ca.isDefault = NEW.isDefault  \n" +
                "        AND IFNULL(ca.companyName,'-') = IFNULL(NEW.companyName,'-')  \n" +
                "        AND IFNULL(ca.bankRemitToName,'-') = IFNULL(NEW.bankRemitToName,'-')  \n" +
                "		AND IFNULL(ca.street1,'-') = IFNULL(NEW.street1,'-') AND IFNULL(ca.street2,'-') = IFNULL(NEW.street2,'-')  \n" +
                "        AND IFNULL(ca.street3,'-') = IFNULL(NEW.street3,'-') AND IFNULL(ca.city,'-') = IFNULL(NEW.city,'-')  \n" +
                "        AND IFNULL(ca.state,'-') = IFNULL(NEW.state,'-') AND IFNULL(ca.countryID,0) = IFNULL(NEW.countryID,0)  \n" +
                "		AND IFNULL(ca.postcode,'-') = IFNULL(NEW.postcode,'-')  AND IFNULL(ca.additionalComment,'-') = IFNULL(NEW.additionalComment,'-')  \n" +
                "        AND IFNULL(ca.latitude,0) = IFNULL(NEW.latitude,0) AND IFNULL(ca.longitude,0) = IFNULL(NEW.longitude,0)  \n" +
                "		AND IFNULL(ca.defaultContactPersonID,0) = IFNULL(NEW.defaultContactPersonID,0) AND IFNULL(ca.shippingMethodID,0) = IFNULL(NEW.shippingMethodID,0)  \n" +
                "        AND IFNULL(ca.carrierID,0) = IFNULL(NEW.carrierID,0) AND IFNULL(ca.carrierAccount,'-') = IFNULL(NEW.carrierAccount,'-')) > 0) THEN  \n" +
                "       SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='Duplicate Address entry';  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5888,'2.00','V1','Trg_BU_customer_addresses  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5888:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesordermst` ;  \n" +
                "CREATE TRIGGER `Trg_AU_salesordermst` AFTER UPDATE ON `salesordermst`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "    IF ( IFNULL(OLD.blanketPOOption,0)=3 AND IFNULL(NEW.blanketPOOption,0)!=3) OR (IFNULL(OLD.blanketPOOption,0)!=3 AND IFNULL(NEW.blanketPOOption,0)=3) THEN  \n" +
                "    CREATE TEMPORARY TABLE IF NOT EXISTS tempsalesDet  \n" +
                "       SELECT sd.id FROM salesorderdet sd WHERE sd.refSalesOrderID=NEW.id AND NEW.isDeleted=0;  \n" +
                "       IF(IFNULL(OLD.blanketPOOption,0)=3 AND IFNULL(NEW.blanketPOOption,0)!=3)THEN  \n" +
                "		UPDATE salesshippingmst ss SET ss.poReleaseNumber=NULL WHERE ss.sDetID IN (SELECT sd.id FROM tempsalesDet sd) AND ss.isdeleted=0;  \n" +
                "		UPDATE salesorderdet sd SET sd.requestedBPOStartDate=NULL,sd.blanketPOEndDate=NULL WHERE sd.refSalesOrderID=NEW.id AND NEW.isDeleted=0;  \n" +
                "       END IF;  \n" +
                "       IF(IFNULL(OLD.blanketPOOption,0)!=3 AND IFNULL(NEW.blanketPOOption,0)=3)THEN  \n" +
                "		UPDATE salesshippingmst ss SET ss.poReleaseNumber=CONCAT(new.poNumber,'-',ss.customerReleaseLine) WHERE ss.sDetID IN (SELECT sd.id FROM tempsalesDet sd) AND ss.isdeleted=0;  \n" +
                "       END IF;  \n" +
                "      DROP TEMPORARY TABLE IF EXISTS tempsalesDet;  \n" +
                "    END IF;  \n" +
                "     IF(IFNULL(OLD.blanketPOOption,0)=2 AND IFNULL(NEW.blanketPOOption,0)!=2)THEN  \n" +
                "		UPDATE salesorderdet sd SET sd.requestedBPOStartDate=NULL,sd.blanketPOEndDate=NULL WHERE sd.refSalesOrderID=NEW.id AND NEW.isDeleted=0;  \n" +
                "      END IF;  \n" +
                "    IF IFNULL(OLD.salesOrderNumber,0) != IFNULL(NEW.salesOrderNumber,0) THEN  \n" +
                "       UPDATE customer_packingslip SET soNumber=NEW.salesOrderNumber,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SALESORDERNUMBER',CAST(OLD.salesOrderNumber AS CHAR),  \n" +
                "       CAST(new.salesOrderNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "    UPDATE customer_packingslip SET poNumber=NEW.poNumber,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'PONUMBER',CAST(OLD.poNumber AS CHAR),  \n" +
                "       CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "    UPDATE customer_packingslip SET poDate=NEW.poDate,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'PODATE',CAST(OLD.poDate AS CHAR),  \n" +
                "       CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.customerID,0) != IFNULL(NEW.customerID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'CUSTOMERID', CAST(OLD.customerID AS CHAR),  \n" +
                "       CAST(new.customerID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'CONTACTPERSONID', CAST(OLD.contactPersonID AS CHAR),  \n" +
                "       CAST(new.contactPersonID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.billingAddressID,0) != IFNULL(NEW.billingAddressID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'BILLINGADDRESSID', CAST(OLD.billingAddressID AS CHAR),  \n" +
                "       CAST(new.billingAddressID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingAddressID ,0) != IFNULL(NEW.shippingAddressID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGADDRESSID', CAST(OLD.shippingAddressID AS CHAR),  \n" +
                "       CAST(new.shippingAddressID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingMethodID ,0) != IFNULL(NEW.shippingMethodID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGMETHODID', CAST(OLD.shippingMethodID AS CHAR),  \n" +
                "       CAST(new.shippingMethodID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REVISION', CAST(OLD.revision AS CHAR),  \n" +
                "       CAST(new.revision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGCOMMENT', CAST(OLD.shippingComment AS CHAR),  \n" +
                "       CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "     IF IFNULL(OLD.internalComment ,0) != IFNULL(NEW.internalComment ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'INTERNALCOMMENT', CAST(OLD.internalComment AS CHAR),  \n" +
                "       CAST(new.internalComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.termsID ,0) != IFNULL(NEW.termsID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'TERMSID', CAST(OLD.termsID AS CHAR),  \n" +
                "       CAST(new.termsID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'STATUS', CAST(OLD.status AS CHAR),  \n" +
                "       CAST(new.status AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.soDate ,0) != IFNULL(NEW.soDate ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SODATE', CAST(OLD.soDate AS CHAR),  \n" +
                "       CAST(new.soDate AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.revisionChangeNote ,0) != IFNULL(NEW.revisionChangeNote ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REVISIONCHANGENOTE', CAST(OLD.revisionChangeNote AS CHAR),  \n" +
                "       CAST(new.revisionChangeNote AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'BLANKETPO', CASE WHEN old.isBlanketPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "      CASE WHEN new.isBlanketPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'POREVISION', CAST(OLD.poRevision AS CHAR),  \n" +
                "      CAST(NEW.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'', CAST(OLD.isDeleted AS CHAR),  \n" +
                "       CAST(new.isDeleted AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isRmaPO ,0) != IFNULL(NEW.isRmaPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'RMAPO', CASE WHEN old.isRmaPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.isRmaPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isLegacyPO ,0) != IFNULL(NEW.isLegacyPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'LEGACYPO', CASE WHEN old.isLegacyPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.isLegacyPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.originalPODate ,0) != IFNULL(NEW.originalPODate ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'ORGPODATE', CAST(DATE_FORMAT(OLD.originalPODate, \"%m/%d/%Y\") AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(new.originalPODate, \"%m/%d/%Y\") AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.rmaNumber ,0) != IFNULL(NEW.rmaNumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'RMANUMBER', CAST(OLD.rmaNumber AS CHAR),  \n" +
                "       CAST(new.rmaNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isDebitedByCustomer ,0) != IFNULL(NEW.isDebitedByCustomer ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'DEBITBYCUST', CASE WHEN OLD.isDebitedByCustomer=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "        CASE WHEN new.isDebitedByCustomer=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.orgPONumber ,0) != IFNULL(NEW.orgPONumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'ORGPONUMBER', CAST(OLD.orgPONumber AS CHAR),  \n" +
                "       CAST(new.orgPONumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isReworkRequired ,0) != IFNULL(NEW.isReworkRequired ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REWORKREQ', CASE WHEN OLD.isReworkRequired=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "        CASE WHEN new.isReworkRequired=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.reworkPONumber ,0) != IFNULL(NEW.reworkPONumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REWORKPONUMBER', CAST(OLD.reworkPONumber AS CHAR),  \n" +
                "       CAST(new.reworkPONumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.blanketPOOption ,0) != IFNULL(NEW.blanketPOOption ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'BLANKETPOOPTION', CASE WHEN OLD.blanketPOOption=1 THEN 'Use This Blanket PO# for All Releases' WHEN OLD.blanketPOOption=2 THEN 'Link Future PO(s) to This Blanket PO' WHEN OLD.blanketPOOption=3 THEN 'Use Blanket PO# and Release#' ELSE '' END,  \n" +
                "       CASE WHEN NEW.blanketPOOption=1 THEN 'Use This Blanket PO# for All Releases' WHEN NEW.blanketPOOption=2 THEN 'Link Future PO(s) to This Blanket PO' WHEN NEW.blanketPOOption=3 THEN 'Use Blanket PO# and Release#' ELSE '' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.linkToBlanketPO ,0) != IFNULL(NEW.linkToBlanketPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'LINKTOBLANKETPO', CASE WHEN old.linkToBlanketPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.linkToBlanketPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5889,'2.00','V1',' Alter trigger Trg_AU_salesordermst-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5889:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-01-2022 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveContactPersonList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveContactPersonList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefEntityType VARCHAR(255),  \n" +
                "	IN pisPrimary TINYINT,  \n" +
                "	IN pisDefault TINYINT,  \n" +
                "	IN prefName VARCHAR(255),  \n" +
                "	IN padditionalComment VARCHAR(2000)  \n" +
                "   )  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "        DECLARE mfgcodemstCondition VARCHAR(255) DEFAULT '';  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE vMfgCodeFormat INT;  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "		DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "		SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "  		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = ' 1=1 ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefEntityType = 'Manufacturer') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'MFG'\");  \n" +
                "		ELSEIF (prefEntityType = 'Supplier') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisPrimary) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isPrimary = '\",pisPrimary,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisDefault) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isDefault = '\",pisDefault,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefName IS NOT NULL AND prefName != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND refName LIKE '%\",prefName,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(padditionalComment IS NOT NULL AND padditionalComment != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND additionalComment LIKE '%\",padditionalComment,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # Common Details for Retrive Contact Person.  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_Common = CONCAT(\"  \n" +
                "			fun_GetFormattedContactPersonName(a.firstName, a.middleName, a.lastName, \",vContPersonNameFormat,\") formattedName,  \n" +
                "			fun_getUserNameByID(a.updatedBy) updatedbyValue, fun_getUserNameByID(a.createdBy) createdbyValue,  \n" +
                "			fun_getRoleByID(a.createByRoleId) createdbyRoleValue, fun_getRoleByID(a.updateByRoleId) updatedbyRoleValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "			(CASE WHEN (a.systemGenerated = 0) THEN 'No' WHEN (a.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `syatemGeneratedValue`,  \n" +
                "			(CASE WHEN (a.isDefault = 0) THEN 'No' WHEN (a.isDefault = 1) THEN 'Yes' ELSE '' END) AS `isDefaultValue`,  \n" +
                "			(CASE WHEN (a.isPrimary = 0) THEN 'No' WHEN (a.isPrimary = 1) THEN 'Yes' ELSE '' END) AS `isPrimaryValue`  \n" +
                "		\");  \n" +
                "  \n" +
                "		# Filter: Personnel  \n" +
                "		SET @temp_Sproc_RetrieveMasterTemplate_employees = CONCAT(\"  \n" +
                "			select cp.personId, ecp.employeeId AS refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment, cp.phoneNumber,  \n" +
                "					cp.phone, cp.mobile, cp.division, cp.faxNumber, cp.phExtension, cp.isPrimary, cp.systemGenerated, '' As refName, 'Personnel' AS refEntityType,  \n" +
                "                    fun_convertJsonEmailToCommaSepList(cp.email) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive,  \n" +
                "                    fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName,\",vEmployeeNameFormat,\") personnel,  \n" +
                "                    (SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40)  PATH '$.phExtension')) jsonTblPhone ) phoneNumberList,  \n" +
                "					cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "				FROM contactperson cp  \n" +
                "                LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "				LEFT JOIN employees emp ON emp.id = ecp.employeeId and emp.isDeleted = 0  \n" +
                "					WHERE cp.refTableName = 'employees' AND cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # Filter: Manufacturer AND Supplier  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_mfgcodemst = CONCAT(\"  \n" +
                "			select cp.personId, cp.refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment, cp.phoneNumber,  \n" +
                "					cp.phone, cp.mobile, cp.division, cp.faxNumber, cp.phExtension, cp.isPrimary, cp.systemGenerated, fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName, \",vMfgCodeFormat,\") AS refName,  \n" +
                "					(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "					(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive, '' AS personnels,  \n" +
                "                    (SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40)  PATH '$.phExtension')) jsonTblPhone ) phoneNumberList,  \n" +
                "                    cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "                FROM contactperson cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID and mfg.isDeleted = 0 \",mfgcodemstCondition,\"  \n" +
                "						WHERE cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # UNION Records based of Filer : Create Final Query for Fetch Contact Person Records.  \n" +
                "        IF(prefEntityType = 'Supplier' OR prefEntityType = 'Manufacturer') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "		ELSEIF (prefEntityType = 'Personnel') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\") a \");  \n" +
                "        ELSE  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate= CONCAT(\"select *,\",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\" UNION ALL \",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY firstName ASC\" ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		 /* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveMasterTemplate,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveMasterTemplate,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 25-01-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetContactPersonForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetContactPersonForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    IN pFromdate DATE,  \n" +
                "    IN pTodate DATE,  \n" +
                "    IN pRequiredCount TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE vEmployeeNameFormat INT;  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			COUNT(1)  \n" +
                "		FROM `contactperson`  \n" +
                "		WHERE `isDeleted` = 0 AND `personId` = IFNULL(pId,`personId`);  \n" +
                "	ELSE  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.phone, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, cp.phExtension, ecp.employeeId AS refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName,vContPersonNameFormat) fullName, 'Personnel' AS refEntityType,  \n" +
                "				NULL AS refName, fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName, vEmployeeNameFormat) personnels,  \n" +
                "				fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "				(SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) phoneNumberList,  \n" +
                "				NULL AS isDefault,  \n" +
                "				NULL AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) STATUS,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "			LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId AND ecp.isDeleted = 0 AND ecp.releasedAt IS NULL  \n" +
                "			LEFT JOIN employees emp ON emp.id = ecp.employeeId AND emp.isDeleted = 0  \n" +
                "				WHERE `personId` = IFNULL(pId,`personId`) AND cp.refTableName ='employees'  \n" +
                "				AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "						OR (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "					ELSE 1 = 1 END)  \n" +
                "		UNION ALL  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.phone, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, cp.phExtension, cp.refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName,vContPersonNameFormat) fullName,  \n" +
                "				(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' AND mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "                fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,vMfgCodeFormat) AS refName,  NULL AS personnels,  \n" +
                "                fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "                (SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) phoneNumberList,  \n" +
                "				(CASE WHEN (cp.isDefault = 0) THEN 'No'  \n" +
                "					WHEN (cp.isDefault = 1) THEN 'Yes' ELSE '' END) AS isDefault,  \n" +
                "				(CASE WHEN (cp.isPrimary = 0) THEN 'No'  \n" +
                "					WHEN (cp.isPrimary = 1) THEN 'Yes' ELSE '' END) AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) STATUS,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID AND mfg.isDeleted = 0  \n" +
                "			WHERE `personId` = IFNULL(pId,`personId`)  \n" +
                "				AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "						OR (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-01-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_contactperson`;  \n" +
                "CREATE TRIGGER `Trg_AU_contactperson` AFTER UPDATE ON `contactperson` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_createdAt DATETIME DEFAULT fun_DatetimetoUTCDateTime();  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"contactperson\";  \n" +
                "  \n" +
                "	IF IFNULL(OLD.firstName,0) != IFNULL(NEW.firstName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'First Name',CAST(OLD.firstName AS CHAR), CAST(NEW.firstName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'firstName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.lastName,0) != IFNULL(NEW.lastName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Last Name',CAST(OLD.lastName AS CHAR), CAST(NEW.lastName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'lastName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Email',CAST((SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(OLD.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails) AS CHAR),  \n" +
                "			CAST(( SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(NEW.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails)AS CHAR), v_createdAt,NEW.createdBy,v_createdAt,  \n" +
                "            NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'email'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phone,0) != IFNULL(NEW.phone,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Phone',CAST(OLD.phone AS CHAR), CAST(NEW.phone AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phone'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mobile,0) != IFNULL(NEW.mobile,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Mobile',CAST(OLD.mobile AS CHAR), CAST(NEW.mobile AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'mobile'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.division,0) != IFNULL(NEW.division,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Department',CAST(OLD.division AS CHAR), CAST(NEW.division AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'division'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'faxNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phExtension,0) != IFNULL(NEW.phExtension,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Ext.',CAST(OLD.phExtension AS CHAR), CAST(NEW.phExtension AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phExtension'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.middleName,0) != IFNULL(NEW.middleName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Middle Name',CAST(OLD.middleName AS CHAR), CAST(NEW.middleName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'middleName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDefault,0) != IFNULL(NEW.isDefault,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Set as Default \"Attention to\"',CAST((CASE WHEN OLD.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isDefault'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.additionalComment,0) != IFNULL(NEW.additionalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Comment',CAST(OLD.additionalComment AS CHAR), CAST(NEW.additionalComment AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'longtext');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPrimary,0) != IFNULL(NEW.isPrimary,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Primary Person',CAST((CASE WHEN OLD.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isPrimary'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(OLD.refTableName,0) != IFNULL(NEW.refTableName,0) OR IFNULL(OLD.refTransID,0) != IFNULL(NEW.refTransID,0) ) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Contact Person Type',CAST((CASE WHEN (OLD.refTableName = 'employees') THEN 'Personnel' WHEN (OLD.refTableName = 'mfgcodemst') THEN (SELECT (CASE  \n" +
                "			WHEN a.mfgType = 'MFG' THEN 'Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = OLD.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "			CAST((CASE WHEN (NEW.refTableName = 'employees') THEN 'Personnel' WHEN (NEW.refTableName = 'mfgcodemst') THEN (SELECT (CASE WHEN a.mfgType = 'MFG' THEN 'Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = NEW.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "             v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'refTableName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.title,0) != IFNULL(NEW.title,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Title',CAST(OLD.title AS CHAR), CAST(NEW.title AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'title'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Status',CAST((CASE WHEN OLD.isActive = '1' THEN 'Active' ELSE 'Inactive' END) AS CHAR), CAST((CASE WHEN NEW.isActive = '1' THEN 'Active' ELSE 'Inactive' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phoneNumber,0) != IFNULL(NEW.phoneNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Phone Numbers',  \n" +
                "        CAST((SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) from JSON_TABLE(OLD.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) AS CHAR),  \n" +
                "		CAST((SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) from JSON_TABLE(NEW.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) AS CHAR),  \n" +
                "        v_createdAt,NEW.createdBy,v_createdAt, NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phoneNumber'));  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5890,'2.00','V1',' Completed points of BUG: 40548, 40609 & 40615 - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5890:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customer_addresses` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customer_addresses`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "	IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as  \n" +
                "  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0  \n" +
                "				AND (billingAddressID IN (',IDs,') OR shippingAddressID IN (',IDs,') OR intermediateShipmentId IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesshippingmst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0  \n" +
                "				AND (shippingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0  \n" +
                "				AND (custShippingAddressID IN (',IDs,') OR custBillingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE refPaymentMode = \"P\"  \n" +
                "				AND (billToAddressID IN (',IDs,') OR  payToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust_refund\" else \"\" end as msg FROM packingslip_invoice_payment WHERE refPaymentMode = \"CR\"  \n" +
                "				AND (billToAddressID IN (',IDs,') OR  payToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_debit_memo\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"D\"  \n" +
                "				AND (billToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_supplier_rma\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"R\"  \n" +
                "				AND (rmaShippingAddressId IN (',IDs,') OR rmaMarkForAddressId IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_line_release_det\" else \"\" end as msg FROM purchase_order_line_release_det WHERE isDeleted = 0  \n" +
                "				AND (shippingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted = 0  \n" +
                "				AND (supplierAddressID IN (',IDs,') OR shippingAddressID IN (',IDs,') OR intermediateShipmentID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0  \n" +
                "				AND (shippingAddressID IN (',IDs,') OR billingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "  \n" +
                "		    ');  \n" +
                "  \n" +
                "	/* (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			 (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND billingAddressID IN (',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingAddressID IN (',IDs,') LIMIT 1)  */  \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "	IF (countList=FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempcustomer_addresses t)=0 THEN  \n" +
                "			/* check any record is - isDefault from delete list */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_SetIsDefaultAddrList ;  \n" +
                "			CREATE TEMPORARY TABLE temp_SetIsDefaultAddrList AS  \n" +
                "				SELECT customerId, addressType  \n" +
                "				FROM customer_addresses  \n" +
                "				WHERE FIND_IN_SET(id, IDs)  \n" +
                "				AND isDefault = 1 AND isDeleted = 0 ;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "			/* if any record is - isDefault from delete list then apply new isDefault */  \n" +
                "			 IF (EXISTS (SELECT 1 FROM temp_SetIsDefaultAddrList)) THEN  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_NewDefaultAddrIdList;  \n" +
                "				CREATE TEMPORARY TABLE temp_NewDefaultAddrIdList AS  \n" +
                "					(SELECT MIN(ca.id) addrMstId  \n" +
                "					  FROM customer_addresses ca  \n" +
                "					WHERE EXISTS (  \n" +
                "							SELECT 1 FROM temp_SetIsDefaultAddrList tmca  \n" +
                "							WHERE tmca.customerId = ca.customerId  \n" +
                "							AND tmca.addressType = ca.addressType  \n" +
                "							)  \n" +
                "					AND ca.isDeleted = 0  \n" +
                "					GROUP BY ca.customerId  \n" +
                "					);  \n" +
                "  \n" +
                "				UPDATE customer_addresses  \n" +
                "				SET isDefault = 1 , updatedBy = deletedBy,  updateByRoleId = pRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id IN (SELECT addrMstId FROM temp_NewDefaultAddrIdList);  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_NewDefaultAddrIdList;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SELECT * FROM tempcustomer_addresses WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomer_addresses t;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT SUM(t1.cnt) AS cnt,t2.display_page_name AS msg  \n" +
                "                FROM tempcustomer_addresses t1  \n" +
                "                   INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "                WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "		GROUP BY t2.display_page_name  \n" +
                "                ORDER BY t2.display_page_name  \n" +
                "                 ;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE tempcustomer_addresses;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5891,'2.00','V1',' Sproc_checkDelete_customer_addresses - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5891:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveNonUMIDStockList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveNonUMIDStockList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "   IN pMfgCodeIds LONGTEXT,  \n" +
                "   IN pReceivedStatus VARCHAR(255),  \n" +
                "   IN pIsMPNExactSearch TINYINT,  \n" +
                "   IN pIsBinExactSearch TINYINT,  \n" +
                "   IN pIsPackingSlipExactSearch TINYINT,  \n" +
                "   IN pScanMPNPID LONGTEXT,  \n" +
                "   IN pScanBinWareHouse LONGTEXT,  \n" +
                "   IN pPackingSlip LONGTEXT,  \n" +
                "   IN pPackingSlipFromDate DATE,  \n" +
                "   IN pPackingSlipToDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE advanceFilterWhere VARCHAR(16383);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	SET advanceFilterWhere = ' AND 1 = 1 ';  \n" +
                "	IF(pWHId IS NOT NULL) THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And W.ID = ', pWHId ,' ');  \n" +
                "	END IF;  \n" +
                "	IF(pBinId IS NOT NULL ) THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And b.id = ', pBinId ,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY packingSlipDate DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1 = 1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pReceivedStatus IS NOT NULL) THEN  \n" +
                "       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pReceivedStatus IS NOT NULL) THEN  \n" +
                "       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND packingSlipDate BETWEEN'\", pPackingSlipFromDate ,\"' AND '\", pPackingSlipToDate ,\"'\");  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND packingSlipDate = '\", pPackingSlipFromDate ,\"' \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' AND (supplierCodeID in (',pMfgCodeIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   IF(pScanMPNPID IS NOT NULL) THEN  \n" +
                "		IF (pIsMPNExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,\" AND ( mfgPN LIKE '%\", pScanMPNPID ,\"%' OR pidCode LIKE '%\", pScanMPNPID ,\"%' ) \");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,\" AND ( mfgPN = '\", pScanMPNPID ,\"' OR pidCode = '\", pScanMPNPID ,\"' ) \");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pScanBinWareHouse IS NOT NULL)THEN  \n" +
                "		IF (pIsBinExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( binName LIKE \"%', pScanBinWareHouse ,'%\" OR warehouseName LIKE \"%', pScanBinWareHouse ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( warehouseName = \"', pScanBinWareHouse ,'\" OR binName = \"', pScanBinWareHouse ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPackingSlip IS NOT NULL)THEN  \n" +
                "		IF (pIsPackingSlipExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber LIKE \"%', pPackingSlip ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber = \"', pPackingSlip ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveNonUMIDStockList = CONCAT(\"  \n" +
                "		SELECT 	BinID,      	binName,      		WarehouseID,      		warehouseName,      	departmentId,      	departmentName,  \n" +
                "				PartId,  		packingSlipID, 		packingSlipName,  		poNumber,				poID,				mfgCodeID,  \n" +
                "                packagingType,  packingSlipDate,   	packingSlipNumber,  	supplierCodeID,  \n" +
                "				mfgName,		mfgPN,      		pidCode,     			RoHSStatusID,      		rohsIcon,      		rohsName,  \n" +
                "                nickname,		InQty,  			UMIDCreatedQty,			returnQty,				BalanceQty,    		isCustom,  \n" +
                "                receivedStatus,     				receivedStatusValue,   	packingSlipModeStatus,     					packingSlipModeStatusValue,  \n" +
                "                IF(sourceName = 'Tape & Reel', BalanceQty/umidSPQ, 0) AS noOfPackage, 				supplierCodeName, 	mfgCodeName  \n" +
                "		FROM 	(  \n" +
                "				SELECT	vucp.BinID,      		vucp.warehouseID WarehouseID,      		vucp.parentWarehouseID departmentId,  \n" +
                "						b.Name binName,  		IFNULL(c.umidSPQ, 0) umidSPQ,  \n" +
                "						vucp.packingSlipID,  \n" +
                "                        w.Name warehouseName,  \n" +
                "                        fun_getWarehouseNameByID(vucp.parentWarehouseID) departmentName,  \n" +
                "						vucp.PartId,      		c.mfgPN As mfgPN,      		c.PIDCode As pidCode,  \n" +
                "                        c.RoHSStatusID,  \n" +
                "						fun_getCOFCByPackingSlipID(vucp.packingSlipID) packingSlipName,  \n" +
                "						p.name packagingType,  \n" +
                "                        p.sourceName,  \n" +
                "						ps.packingSlipDate packingSlipDate,  \n" +
                "                        ps.packingSlipNumber,  \n" +
                "                        ps.poNumber,  \n" +
                "                        ps.refPurchaseOrderID as poID,  \n" +
                "						c.mfgCodeID,  \n" +
                "                        mp.mfgName,  \n" +
                "                        mp.mfgCode,  \n" +
                "                        ps.mfgCodeID supplierCodeID,  \n" +
                "                        ms.mfgName AS supplierName,  \n" +
                "                        ms.mfgCode AS supplierCode,  \n" +
                "						fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "						vucp.nickname,  \n" +
                "						vucp.InQty,				vucp.UMIDCreatedQty,      		vucp.returnQty,  \n" +
                "						vucp.BalanceQty,		c.isCustom,						c.partType,  \n" +
                "						vucp.receivedStatus,  \n" +
                "                        fun_getPackingSlipDetailStatusByKey(vucp.receivedStatus) receivedStatusValue,  \n" +
                "                        ps.packingSlipModeStatus,  \n" +
                "                        IF(ps.packingSlipModeStatus = 'D','Draft','Published') AS packingSlipModeStatusValue,  \n" +
                "						fun_GetFormattedMfgCode(ms.mfgCode, ms.mfgName,\", vMfgCodeFormat ,\") AS supplierCodeName,  \n" +
                "						fun_GetFormattedMfgCode(mp.mfgCode, mp.mfgName,\", vMfgCodeFormat ,\") AS mfgCodeName  \n" +
                "				FROM 		vu_umid_creation_pending vucp  \n" +
                "				INNER JOIN 	component c on vucp.PartId = c.id AND c.partType != 4 AND c.isdeleted = 0  \n" +
                "                INNER JOIN  mfgcodemst mp ON c.mfgCodeID = mp.id AND mp.isdeleted = 0  \n" +
                "				INNER JOIN 	binmst b on b.id = vucp.BinID AND b.isdeleted = 0  \n" +
                "                INNER JOIN 	component_packagingmst p on p.id = vucp.packagingID AND p.isdeleted = 0  \n" +
                "				INNER JOIN 	warehousemst w on w.ID = vucp.warehouseID AND w.isdeleted = 0  \n" +
                "				INNER JOIN	packing_slip_material_receive ps on ps.id = vucp.packingSlipID AND ps.isdeleted = 0  \n" +
                "                INNER JOIN  mfgcodemst ms ON ps.mfgCodeID = ms.id AND ms.isdeleted = 0  \n" +
                "				WHERE 		vucp.BalanceQty > 0 \" ,	advanceFilterWhere , \"  \n" +
                "			) As tempNonUMID  \n" +
                "		WHERE \", pWhereClause  \n" +
                "  \n" +
                "	);  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveNonUMIDStockList,\" ) c\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveNonUMIDStockList,\" ) c \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5892,'2.00','V1','Task 40570: Apply Recalculation changes into Kit List - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5892:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-01-2022 **************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SOChangeHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_SOChangeHistory`(  \n" +
                "	IN psoID INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pTableName VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_SOChangeHistory = CONCAT(\"  \n" +
                "  \n" +
                "		SELECT dca.ID,  \n" +
                "		 CASE  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Oldval) > 0  AND dca.Colname ='SHIPPINGMETHODID') THEN  \n" +
                "		  (SELECT CONCAT('(', gencCategoryCode , ')',' ',gencCategoryName) AS OldValue FROM genericcategory WHERE gencCategoryID =dca.Oldval)  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Oldval) > 0  AND dca.Colname ='TERMSID') THEN  \n" +
                "		  (SELECT gencCategoryName AS OldValue FROM genericcategory WHERE gencCategoryID =dca.Oldval)  \n" +
                "		WHEN dca.Colname = 'PARTID' THEN  \n" +
                "		  (SELECT CONCAT(nickName,' ',rev) AS OldValue FROM component WHERE id =dca.Oldval)  \n" +
                "		 WHEN  dca.Colname = 'SODATE' OR dca.Colname='PODATE' OR dca.Colname='MATERIALTENTITVEDOCDATE' OR dca.Colname='MATERIALDUEDATE'  THEN  \n" +
                "		       DATE_FORMAT(dca.Oldval,'%m/%d/%Y %H:%i %p')  \n" +
                "		WHEN dca.Colname = 'CONTACTPERSONID' THEN  \n" +
                "		 (SELECT CONCAT(firstName , ' ' ,IFNULL(middleName,''),' ' , lastName) AS OldValue FROM contactperson WHERE personId =dca.Oldval)  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Oldval=0 THEN  \n" +
                "			 'Draft'  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Oldval=1 THEN  \n" +
                "			 'Published'  \n" +
                "		-- Get shipping address details  \n" +
                "		WHEN dca.Colname='SHIPPINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Oldval AND ca.isDeleted = 0 AND ca.addressType = 'S'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='BILLINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Oldval AND ca.isDeleted = 0 AND ca.addressType = 'B'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='CUSTOMERID' THEN  \n" +
                "		(SELECT CONCAT('(',mfgCode,') ',mfgName) AS customer FROM mfgcodemst WHERE id=dca.Oldval)  \n" +
                "		ELSE  \n" +
                "		dca.Oldval  \n" +
                "		END AS Oldval,  \n" +
                "		CASE  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Newval) > 0 AND dca.Colname ='SHIPPINGMETHODID') THEN  \n" +
                "		  (SELECT CONCAT('(', gencCategoryCode , ')',' ',gencCategoryName) AS Newval FROM genericcategory WHERE gencCategoryID =dca.Newval)  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Newval) > 0 AND dca.Colname ='TERMSID') THEN  \n" +
                "		  (SELECT gencCategoryName AS Newval FROM genericcategory WHERE gencCategoryID =dca.Newval)  \n" +
                "		WHEN dca.Colname = 'PARTID' THEN  \n" +
                "		  (SELECT CONCAT(nickName,' ',rev) AS Newval FROM component WHERE id =dca.Newval)  \n" +
                "		 WHEN  dca.Colname = 'SODATE' OR dca.Colname='PODATE' OR dca.Colname='MATERIALTENTITVEDOCDATE' OR dca.Colname='MATERIALDUEDATE'  THEN  \n" +
                "		       DATE_FORMAT(dca.Newval,'%m/%d/%Y %H:%i %p')  \n" +
                "		  WHEN dca.Colname = 'CONTACTPERSONID' THEN  \n" +
                "		 (SELECT CONCAT(firstName , ' ' ,IFNULL(middleName,''),' ' , lastName) AS Newval FROM contactperson WHERE personId =dca.Newval)  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Newval=0 THEN  \n" +
                "			 'Draft'  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Newval=1 THEN  \n" +
                "		       'Published'  \n" +
                "		 WHEN dca.Colname='ISDELETED' AND dca.Newval=0 THEN  \n" +
                "			 'No'  \n" +
                "		WHEN dca.Colname='ISDELETED' AND dca.Newval=1 THEN  \n" +
                "		       'Yes'  \n" +
                "		-- Get shipping address details  \n" +
                "		WHEN dca.Colname='SHIPPINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Newval AND ca.isDeleted = 0 AND ca.addressType = 'S'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='BILLINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Newval AND ca.isDeleted = 0 AND ca.addressType = 'B'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='CUSTOMERID' THEN  \n" +
                "		(SELECT CONCAT('(',mfgCode,') ',mfgName) AS customer FROM mfgcodemst WHERE id=dca.Newval)  \n" +
                "		ELSE  \n" +
                "			dca.Newval  \n" +
                "		END AS Newval,  \n" +
                "			dca.Colname,dca.RefTransID,  \n" +
                "			-- (SELECT username FROM users WHERE id = dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,  \n" +
                "  \n" +
                "		fun_getUserNameByID(dca.updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(dca.createdBy) createdby,  \n" +
                "		fun_getRoleByID(dca.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(dca.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(dca.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "		FROM `dataentrychange_auditlog`  AS dca  \n" +
                "		WHERE `Tablename`='\",pTableName,\"'  AND `RefTransID`=\",psoID,\"  \n" +
                "  \n" +
                "		    UNION ALL  \n" +
                "  \n" +
                "		SELECT dca.ID,  \n" +
                "		 CASE  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Oldval) > 0 AND dca.Colname ='SHIPPINGMETHODID') THEN  \n" +
                "		  (SELECT CONCAT('(', gencCategoryCode , ')',' ',gencCategoryName) AS OldValue FROM genericcategory WHERE gencCategoryID =dca.Oldval)  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Oldval) > 0 AND dca.Colname ='TERMSID') THEN  \n" +
                "		  (SELECT gencCategoryName AS OldValue FROM genericcategory WHERE gencCategoryID =dca.Oldval)  \n" +
                "		 WHEN dca.Colname = 'PARTID' THEN  \n" +
                "		  (SELECT CONCAT(nickName,' ',rev) AS OldValue FROM component WHERE id =dca.Oldval)  \n" +
                "		 WHEN  dca.Colname = 'SODATE' OR dca.Colname='PODATE' OR dca.Colname='MATERIALTENTITVEDOCDATE' OR dca.Colname='MATERIALDUEDATE'  THEN  \n" +
                "		       DATE_FORMAT(dca.Oldval,'%m/%d/%Y %H:%i %p')  \n" +
                "		 WHEN dca.Colname = 'CONTACTPERSONID' THEN  \n" +
                "		(SELECT CONCAT(firstName , ' ' ,IFNULL(middleName,''),' ' , lastName) AS OldValue FROM contactperson WHERE personId =dca.Oldval)  \n" +
                "	       WHEN dca.Colname='STATUS' AND dca.Oldval=0 THEN  \n" +
                "			 'Draft'  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Oldval=1 THEN  \n" +
                "			 'Published'  \n" +
                "		WHEN dca.Colname='ISDELETED' AND dca.Oldval=0 THEN  \n" +
                "			 'No'  \n" +
                "		WHEN dca.Colname='ISDELETED' AND dca.Oldval=1 THEN  \n" +
                "		       'Yes'  \n" +
                "		-- Get shipping address details  \n" +
                "		WHEN dca.Colname='SHIPPINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Oldval  AND ca.addressType = 'S'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='BILLINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Oldval  AND ca.addressType = 'B'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='CUSTOMERID' THEN  \n" +
                "		(SELECT CONCAT('(',mfgCode,') ',mfgName) AS customer FROM mfgcodemst WHERE id=dca.Oldval)  \n" +
                "		ELSE  \n" +
                "			dca.Oldval  \n" +
                "		END AS Oldval,  \n" +
                "		CASE  \n" +
                "		WHEN (SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Newval) > 0 AND dca.Colname ='SHIPPINGMETHODID' THEN  \n" +
                "		  (SELECT CONCAT('(', gencCategoryCode , ')',' ',gencCategoryName) AS Newval FROM genericcategory WHERE gencCategoryID =dca.Newval)  \n" +
                "		WHEN (SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Newval) > 0 AND dca.Colname ='TERMSID' THEN  \n" +
                "		  (SELECT gencCategoryName AS Newval FROM genericcategory WHERE gencCategoryID =dca.Newval)  \n" +
                "		WHEN dca.Colname = 'PARTID' THEN  \n" +
                "		  (SELECT CONCAT(nickName,' ',rev) AS Newval FROM component WHERE id =dca.Newval)  \n" +
                "		WHEN  dca.Colname = 'SODATE' OR dca.Colname='PODATE' OR dca.Colname='MATERIALTENTITVEDOCDATE' OR dca.Colname='MATERIALDUEDATE'  THEN  \n" +
                "		       DATE_FORMAT(dca.Newval,'%m/%d/%Y %H:%i %p')  \n" +
                "		WHEN dca.Colname = 'CONTACTPERSONID' THEN  \n" +
                "		(SELECT CONCAT(firstName , ' ' ,IFNULL(middleName,''),' ' , lastName) AS Newval FROM contactperson WHERE personId =dca.Newval)  \n" +
                "		 WHEN dca.Colname='STATUS' AND dca.Newval=0 THEN  \n" +
                "			 'Draft'  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Newval=1 THEN  \n" +
                "			 'Published'  \n" +
                "		WHEN dca.Colname='ISDELETED' AND dca.Newval=0 THEN  \n" +
                "			 'No'  \n" +
                "		WHEN dca.Colname='ISDELETED' AND dca.Newval=1 THEN  \n" +
                "		       'Yes'  \n" +
                "		-- Get shipping address details  \n" +
                "		WHEN dca.Colname='SHIPPINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Newval AND  ca.isDeleted = 0 AND ca.addressType = 'S'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='BILLINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Newval AND  ca.isDeleted = 0 AND ca.addressType = 'B'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='CUSTOMERID' THEN  \n" +
                "		(SELECT CONCAT('(',mfgCode,') ',mfgName) AS customer FROM mfgcodemst WHERE id=dca.Newval)  \n" +
                "		ELSE  \n" +
                "			dca.Newval  \n" +
                "		END AS Newval,  \n" +
                "			dca.Colname,dca.RefTransID,  \n" +
                "			-- (SELECT username FROM users WHERE id = dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,  \n" +
                "  \n" +
                "		fun_getUserNameByID(dca.updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(dca.createdBy) createdby,  \n" +
                "		fun_getRoleByID(dca.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(dca.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(dca.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "	        FROM dataentrychange_auditlog dca  \n" +
                "		WHERE tablename ='salesorderdet'  \n" +
                "	        AND RefTransID IN (SELECT id FROM salesorderdet t WHERE refSalesOrderID = \",psoID,\"  AND t.id = dca.RefTransID)  \n" +
                "         \");  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_SOChangeHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_SOChangeHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5893,'2.00','V1',' Alter procedure Sproc_SOChangeHistory-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5893:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 25-01-2022 **************************** */
                "DROP FUNCTION IF EXISTS `fun_contactPersonDetailByID` ;  \n" +
                "CREATE FUNCTION `fun_contactPersonDetailByID`(  \n" +
                "	pContactPersonID INT  \n" +
                ") RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pContactPerson VARCHAR(2000);  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "  \n" +
                "	  SELECT  CONCAT('ATTN: ',fun_GetFormattedContactPersonName(firstName,middleName,lastName,vContPersonNameFormat), CASE WHEN division IS NULL THEN '' ELSE CONCAT('  \n" +
                "',division) END,  \n" +
                "	                 CASE WHEN email IS NULL THEN '' ELSE CONCAT('  \n" +
                "Email: ',fun_convertJsonEmailToCommaSepList(email)) END,  \n" +
                "	                 CASE WHEN phoneNumber IS NULL THEN '' ELSE CONCAT('  \n" +
                "Phone: ',fun_convertJsonPhoneToCommaSepList(phoneNumber)) END,  \n" +
                "	                 CASE WHEN mobile IS NULL THEN '' ELSE CONCAT('  \n" +
                "Phone: ',mobile) END,  \n" +
                "	                 CASE WHEN faxNumber IS NULL THEN '' ELSE CONCAT('  \n" +
                "Fax: ',faxNumber) END) INTO  pContactPerson FROM contactperson  \n" +
                "	                 WHERE personID=pContactPersonID;  \n" +
                "  \n" +
                "	RETURN pContactPerson;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 **************************** */
                "DROP FUNCTION IF EXISTS `fun_convertJsonPhoneToCommaSepList` ;  \n" +
                "CREATE FUNCTION `fun_convertJsonPhoneToCommaSepList`(  \n" +
                "	pJsonPhoneList TEXT  \n" +
                ") RETURNS TEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_Phones TEXT;  \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(CONCAT(jsonTblPhones.phone, ' Ext. ',jsonTblPhones.phExtension) SEPARATOR ', ') INTO v_Phones  \n" +
                "		FROM JSON_TABLE(pJsonPhoneList, '$[*]' COLUMNS (phone VARCHAR(30)  PATH '$.phone', phExtension VARCHAR(30)  PATH '$.phExtension')) jsonTblPhones;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	RETURN v_Phones;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5894,'2.00','V1',' Alter function fun_contactPersonDetailByID - CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5894:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 26-01-2022 **************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF OLD.receiptType = \"P\" AND OLD.refPurchaseOrderID IS NULL AND NEW.isCustConsigned != OLD.isCustConsigned THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isLineCustConsigned=NEW.isCustConsigned, LineCustomerID=NEW.CustomerID WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		CASE  \n" +
                "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
                "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
                "			ELSE 'PO Date'  \n" +
                "		END ,  \n" +
                "		CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Date', CAST(OLD.packingSlipDate AS CHAR), CAST(new.packingSlipDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(new.invoiceDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(new.creditMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(new.debitMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(new.receiptDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
                "				ELSE 'Supplier Invoice Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
                "				ELSE 'Supplier Invoice Posting Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(new.applyDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
                "				ELSE 'Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
                "				ELSE 'PS Internal Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "	IF IFNULL(OLD.billToAddress,0) != IFNULL(NEW.billToAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To', CAST(OLD.billToAddress AS CHAR), CAST(new.billToAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.billToConactPerson,0) != IFNULL(NEW.billToConactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To Contact Person', CAST(OLD.billToConactPerson AS CHAR), CAST(new.billToConactPerson AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToConactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaShippingContactPerson,0) != IFNULL(NEW.rmaShippingContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To Contact Person', OLD.rmaShippingContactPerson, new.rmaShippingContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaMarkForContactPerson,0) != IFNULL(NEW.rmaMarkForContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For Contact Person', OLD.rmaMarkForContactPerson, new.rmaMarkForContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			case when OLD.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "            case when new.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CustomerID, 0) != IFNULL(NEW.CustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.CustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.CustomerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-01-2022 **************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_contactperson`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_contactperson`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempContactperson;  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempContactperson as  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"contactperson\" else \"\" end as msg FROM employee_contactperson WHERE contactPersonId IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_supplier_rma\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"R\" AND (rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_debit_memo\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"D\" AND billToContactPersonID IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust_refund\" else \"\" end as msg FROM packingslip_invoice_payment  WHERE (billToContactPersonID IN (',IDs,') OR payToContactPersonID IN (',IDs,')) AND refPaymentMode = \"CR\" AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"P\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_invoice\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"I\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_creditmemo\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"C\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE  (supplierContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_line_release_det WHERE shippingContactPersonID IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0 AND (custBillingContactPersonID IN (',IDs,') OR custShippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR contactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0 AND shippingContactPersonID IN (',IDs,') LIMIT 1)  \n" +
                "		');  \n" +
                "/*	  (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive\" else \"\" end as msg FROM packing_slip_material_receive WHERE isDeleted = 0 AND (billToConactPerson IN (',IDs,')  \n" +
                "			OR shipToContactPersonID IN (',IDs,') OR rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted = 0 AND (payToContactPersonID IN (',IDs,') OR billToContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE isDeleted = 0 AND (custBillingConactPersonID IN (',IDs,') OR custShippingConactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "  */  \n" +
                "  \n" +
                "  	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "  \n" +
                "    IF(countList=FALSE) THEN  \n" +
                "		IF(SELECT SUM(t.cnt) FROM tempContactperson t)=0 THEN  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempSetIsDefaultContactperson AS  \n" +
                "				SELECT cp.refTransID,cp.refTableName FROM contactperson cp  WHERE cp.personId IN (IDs) AND cp.isDefault =1 AND cp.deletedAt IS NULL;  \n" +
                "			SET @SQl1 = CONCAT('update contactperson set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where personId in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "            # If Default Contact person is Deleted then Set new Default Contact Person.  \n" +
                "            IF(EXISTS (SELECT 1 FROM tempSetIsDefaultContactperson)) THEN  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempPersonId AS (SELECT MIN(cp.personId) personId FROM contactperson cp  \n" +
                "						WHERE EXISTS (  \n" +
                "							SELECT 1 FROM tempSetIsDefaultContactperson tcp WHERE tcp.refTransID = cp.refTransID AND tcp.refTableName = cp.refTableName  \n" +
                "							) AND cp.isDeleted = 0 GROUP BY cp.refTransID,cp.refTableName);  \n" +
                "				UPDATE contactperson SET isDefault =1 WHERE personId IN  \n" +
                "					(SELECT personId FROM tempPersonId);  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempPersonId;  \n" +
                "			END IF;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempSetIsDefaultContactperson;  \n" +
                "  \n" +
                "			SELECT * FROM tempContactperson WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempContactperson t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "		FROM tempContactperson t1  \n" +
                "		INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "			WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "			ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempContactperson;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-01-2022 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5895,'2.00','V1','Task 40570: Apply Recalculation changes into Kit List - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5895:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-01-2022 *********************************** */
                "Drop procedure if exists `Sproc_checkDelete_contactperson`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_contactperson`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempContactperson;  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempContactperson as  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"contactperson\" else \"\" end as msg FROM employee_contactperson WHERE contactPersonId IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_supplier_rma\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"R\" AND (rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_debit_memo\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"D\" AND billToContactPersonID IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust_refund\" else \"\" end as msg FROM packingslip_invoice_payment  WHERE (billToContactPersonID IN (',IDs,') OR payToContactPersonID IN (',IDs,')) AND refPaymentMode = \"CR\" AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"P\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_invoice\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"I\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_creditmemo\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"C\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE  (supplierContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_line_release_det WHERE shippingContactPersonID IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0 AND (custBillingContactPersonID IN (',IDs,') OR custShippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR contactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0 AND shippingContactPersonID IN (',IDs,') LIMIT 1)  \n" +
                "		');  \n" +
                "/*	  (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive\" else \"\" end as msg FROM packing_slip_material_receive WHERE isDeleted = 0 AND (billToConactPerson IN (',IDs,')  \n" +
                "			OR shipToContactPersonID IN (',IDs,') OR rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted = 0 AND (payToContactPersonID IN (',IDs,') OR billToContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE isDeleted = 0 AND (custBillingConactPersonID IN (',IDs,') OR custShippingConactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "  */  \n" +
                "  \n" +
                "  	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "  \n" +
                "    IF(countList=FALSE) THEN  \n" +
                "		IF(SELECT SUM(t.cnt) FROM tempContactperson t)=0 THEN  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempSetIsDefaultContactperson AS  \n" +
                "				SELECT cp.refTransID,cp.refTableName FROM contactperson cp  WHERE FIND_IN_SET(cp.personId,IDs) AND cp.isDefault =1 AND cp.deletedAt IS NULL;  \n" +
                "			SET @SQl1 = CONCAT('update contactperson set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where personId in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "            # If Default Contact person is Deleted then Set new Default Contact Person.  \n" +
                "            IF(EXISTS (SELECT 1 FROM tempSetIsDefaultContactperson)) THEN  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempPersonId AS (SELECT MIN(cp.personId) personId FROM contactperson cp  \n" +
                "						WHERE EXISTS (  \n" +
                "							SELECT 1 FROM tempSetIsDefaultContactperson tcp WHERE tcp.refTransID = cp.refTransID AND tcp.refTableName = cp.refTableName  \n" +
                "							) AND cp.isDeleted = 0 AND cp.isActive = 1 GROUP BY cp.refTransID,cp.refTableName);  \n" +
                "				UPDATE contactperson SET isDefault =1 WHERE personId IN  \n" +
                "					(SELECT personId FROM tempPersonId);  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempPersonId;  \n" +
                "			END IF;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempSetIsDefaultContactperson;  \n" +
                "  \n" +
                "			SELECT * FROM tempContactperson WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempContactperson t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "		FROM tempContactperson t1  \n" +
                "		INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "			WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "			ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempContactperson;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5896,'2.00','V1',' Disable Inactive When Add contact person popup Open From Transaction - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5896:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customer_addresses` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_customer_addresses`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "	IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as  \n" +
                "  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0  \n" +
                "				AND (billingAddressID IN (',IDs,') OR shippingAddressID IN (',IDs,') OR intermediateShipmentId IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesshippingmst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0  \n" +
                "				AND (shippingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0  \n" +
                "				AND (custShippingAddressID IN (',IDs,') OR custBillingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE refPaymentMode = \"P\"  \n" +
                "				AND (billToAddressID IN (',IDs,') OR  payToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust_refund\" else \"\" end as msg FROM packingslip_invoice_payment WHERE refPaymentMode = \"CR\"  \n" +
                "				AND (billToAddressID IN (',IDs,') OR  payToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_debit_memo\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"D\"  \n" +
                "				AND (billToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_supplier_rma\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"R\"  \n" +
                "				AND (rmaShippingAddressId IN (',IDs,') OR rmaMarkForAddressId IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_line_release_det\" else \"\" end as msg FROM purchase_order_line_release_det WHERE isDeleted = 0  \n" +
                "				AND (shippingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted = 0  \n" +
                "				AND (supplierAddressID IN (',IDs,') OR shippingAddressID IN (',IDs,') OR intermediateShipmentID IN (',IDs,')) LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0  \n" +
                "				AND (shippingAddressID IN (',IDs,') OR billingAddressID IN (',IDs,')) LIMIT 1)  \n" +
                "  \n" +
                "		    ');  \n" +
                "  \n" +
                "	/* (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			 (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND billingAddressID IN (',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingAddressID IN (',IDs,') LIMIT 1)  */  \n" +
                "  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "	IF (countList=FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempcustomer_addresses t)=0 THEN  \n" +
                "			/* check any record is - isDefault from delete list */  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS temp_SetIsDefaultAddrList ;  \n" +
                "			CREATE TEMPORARY TABLE temp_SetIsDefaultAddrList AS  \n" +
                "				SELECT customerId, addressType  \n" +
                "				FROM customer_addresses  \n" +
                "				WHERE FIND_IN_SET(id, IDs)  \n" +
                "				AND isDefault = 1 AND isDeleted = 0 ;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "			/* if any record is - isDefault from delete list then apply new isDefault */  \n" +
                "			 IF (EXISTS (SELECT 1 FROM temp_SetIsDefaultAddrList)) THEN  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_NewDefaultAddrIdList;  \n" +
                "				CREATE TEMPORARY TABLE temp_NewDefaultAddrIdList AS  \n" +
                "					(SELECT MIN(ca.id) addrMstId  \n" +
                "					  FROM customer_addresses ca  \n" +
                "					WHERE EXISTS (  \n" +
                "							SELECT 1 FROM temp_SetIsDefaultAddrList tmca  \n" +
                "							WHERE tmca.customerId = ca.customerId  \n" +
                "							AND tmca.addressType = ca.addressType  \n" +
                "							)  \n" +
                "					AND ca.isActive = 1  \n" +
                "					AND ca.isDeleted = 0  \n" +
                "					GROUP BY ca.customerId  \n" +
                "					);  \n" +
                "  \n" +
                "				UPDATE customer_addresses  \n" +
                "				SET isDefault = 1 , updatedBy = deletedBy,  updateByRoleId = pRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id IN (SELECT addrMstId FROM temp_NewDefaultAddrIdList);  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_NewDefaultAddrIdList;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SELECT * FROM tempcustomer_addresses WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomer_addresses t;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT SUM(t1.cnt) AS cnt,t2.display_page_name AS msg  \n" +
                "                FROM tempcustomer_addresses t1  \n" +
                "                   INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "                WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "		GROUP BY t2.display_page_name  \n" +
                "                ORDER BY t2.display_page_name  \n" +
                "                 ;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE tempcustomer_addresses;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5897,'2.00','V1',' Sproc_checkDelete_customer_addresses - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5897:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-01-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BI_contactperson` ;  \n" +
                "CREATE TRIGGER `Trg_BI_contactperson` BEFORE INSERT ON `contactperson`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	IF( (SELECT COUNT(1) FROM contactperson  \n" +
                "		WHERE refTableName = NEW.refTableName AND refTransID = NEW.refTransID AND isDeleted = 0  \n" +
                "        AND firstName = NEW.firstName  \n" +
                "        AND IFNULL(middleName,'') = IFNULL(NEW.middleName,'')  \n" +
                "	AND lastName = NEW.lastName ) > 0) THEN  \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='Duplicate Address entry';  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-01-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BU_contactperson` ;  \n" +
                "CREATE TRIGGER `Trg_BU_contactperson` BEFORE UPDATE ON `contactperson`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	IF((NEW.isDeleted = 0) AND (SELECT COUNT(1) FROM contactperson  \n" +
                "		WHERE refTableName = NEW.refTableName AND refTransID = NEW.refTransID AND isDeleted = 0  \n" +
                "		AND personId != NEW.personId  \n" +
                "		AND firstName = NEW.firstName  \n" +
                "		AND IFNULL(middleName,'') = IFNULL(NEW.middleName,'')  \n" +
                "		AND lastName = NEW.lastName ) > 0) THEN  \n" +
                "			SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='Duplicate Address entry';  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5898,'2.00','V1',' Task 40683: Transaction wise Do not Allow To Add Duplicate Contact person - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5898:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 26-01-2022 *********************************** */
                "DROP FUNCTION IF EXISTS `fun_convertJsonPhoneToCommaSepList` ;  \n" +
                "CREATE FUNCTION `fun_convertJsonPhoneToCommaSepList`(  \n" +
                "	pJsonPhoneList TEXT  \n" +
                ") RETURNS TEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_Phones TEXT;  \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(CONCAT(jsonTblPhones.phone, ' Ext. ', IFNULL(jsonTblPhones.phExtension,'')) SEPARATOR ', ') INTO v_Phones  \n" +
                "		FROM JSON_TABLE(pJsonPhoneList, '$[*]' COLUMNS (phone VARCHAR(30)  PATH '$.phone', phExtension VARCHAR(30)  PATH '$.phExtension')) jsonTblPhones;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	RETURN v_Phones;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5899,'2.00','V1',' Alter table fun_convertJsonPhoneToCommaSepList-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5899:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerInvoiceDetailForElastic;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    IN pTransType VARCHAR(1),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM customer_packingslip cp  \n" +
                "			JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID = cp.id AND cpd.isDeleted = 0  \n" +
                "			LEFT JOIN component co  ON co.id = cpd.partId AND co.isDeleted = 0  \n" +
                "			LEFT JOIN employees emp ON emp.id=cp.salesCommissionTo AND emp.isdeleted=0  \n" +
                "		WHERE cp.isDeleted = 0 AND cp.transType = IFNULL(pTransType, cp.transType);  \n" +
                "	ELSE  \n" +
                "		SELECT  cp.id AS custInvMstID,  \n" +
                "			cpd.id AS customerInvDetID,  \n" +
                "			cp.invoiceNumber,  \n" +
                "			cp.invoiceDate,  \n" +
                "			cp.poNumber,  \n" +
                "			cp.poDate,  \n" +
                "			cp.poRevision,  \n" +
                "			cp.soNumber,  \n" +
                "			cp.soDate,  \n" +
                "			cp.packingSlipNumber,  \n" +
                "			cp.packingSlipDate,  \n" +
                "			(SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = cp.id AND packing.isDeleted = 0) packingSlipID,  \n" +
                "			fun_getFOBById(cp.freeOnBoardId) FOBName,  \n" +
                "			fun_getIntToText(cp.isLocked) `Locked`,  \n" +
                "			fun_getGenericCategoryNameByID(cp.termsId) terms,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethod,  \n" +
                "			cpd.reflineID,  \n" +
                "			cpd.partId ,  \n" +
                "			co.mfgPn mfgPn,  \n" +
                "			fun_getAssyPIDCodeByID(cpd.partId) AS assyID,  \n" +
                "			fun_getMFGTypeByID(co.mfgcodeID) mfgType,  \n" +
                "			fun_getAssyNickNameByID(cpd.partId) nickName,  \n" +
                "			cpd.shippedQty , cpd.shipQty, cp.systemID,  \n" +
                "			cp.termsID,  \n" +
                "			(CASE WHEN cp.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cp.termsID) END) AS termsDisplayText ,  \n" +
                "			cp.shippingMethodId ,  \n" +
                "			cp.salesCommissionTo ,  \n" +
                "			CONCAT('(',emp.initialName,')',' ',IFNULL(emp.firstName,''),' ',IFNULL(emp.lastName,'')) salesCommissionToDisplayText,  \n" +
                "			cp.headerComment, cp.packingSlipComment,  \n" +
                "			cpd.internalComment, shippingNotes ,  \n" +
                "			IFNULL(cp.refSalesOrderID,0) refSalesOrderID ,  \n" +
                "			cpd.assyDescription , cpd.custPOLineID,  \n" +
                "			cp.creditMemoNumber, cp.creditMemoDate, cp.refDebitMemoNumber,  \n" +
                "			cp.refDebitMemoDate, cp.rmaNumber, cp.transType  ,  \n" +
                "			cp.customerID,  \n" +
                "			fun_getMfgNameByID(cp.customerID) customerName,  \n" +
                "			fun_getMfgCodeByID(cp.customerID) customerCode ,  \n" +
                "			(select GROUP_CONCAT(cpstn.trackNumber SEPARATOR ', ') from customer_packing_slip_track_number cpstn where cpstn.refCustPackingSlipID = cp.id AND cpstn.isDeleted=0) AS trackingNumberList ,  \n" +
                "			(CASE WHEN cp.packingSlipType = 1 OR cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "					WHEN  cp.packingSlipType = 3 THEN 'MISC Invoice' END)invoiceType ,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "            cp.isDeleted  ,  \n" +
                "            cp.carrierId ,fun_getGenericCategoryCodeNameByID(cp.carrierId) AS carrierDisplayText,  \n" +
                "            cp.carrierAccountNumber  \n" +
                "		FROM customer_packingslip cp  \n" +
                "			JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID = cp.id AND cpd.isDeleted = 0  \n" +
                "			LEFT JOIN component co  ON co.id = cpd.partId AND co.isDeleted = 0  \n" +
                "			LEFT JOIN employees emp ON emp.id=cp.salesCommissionTo AND emp.isdeleted=0  \n" +
                "		WHERE cp.id= IFNULL(pId,cp.id) AND cp.transType = IFNULL(pTransType, cp.transType)  \n" +
                "			AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							OR ((DATE(fun_CovnertDateTimeByTimezoneValue(cpd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cpd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5900,'2.00','V1','Sproc_GetCustomerInvoiceDetailForElastic - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5900:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 26-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SOChangeHistory` ;  \n" +
                "CREATE PROCEDURE `Sproc_SOChangeHistory`(  \n" +
                "	IN psoID INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pTableName VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_SOChangeHistory = CONCAT(\"  \n" +
                "  \n" +
                "		SELECT dca.ID,  \n" +
                "		 CASE  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Oldval) > 0  AND dca.Colname ='SHIPPINGMETHODID') THEN  \n" +
                "		  (SELECT CONCAT('(', gencCategoryCode , ')',' ',gencCategoryName) AS OldValue FROM genericcategory WHERE gencCategoryID =dca.Oldval)  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Oldval) > 0  AND dca.Colname ='TERMSID') THEN  \n" +
                "		  (SELECT gencCategoryName AS OldValue FROM genericcategory WHERE gencCategoryID =dca.Oldval)  \n" +
                "		WHEN dca.Colname = 'PARTID' THEN  \n" +
                "		  (SELECT CONCAT(nickName,' ',rev) AS OldValue FROM component WHERE id =dca.Oldval)  \n" +
                "		 WHEN  dca.Colname = 'SODATE' OR dca.Colname='PODATE' OR dca.Colname='MATERIALTENTITVEDOCDATE' OR dca.Colname='MATERIALDUEDATE'  THEN  \n" +
                "		       DATE_FORMAT(dca.Oldval,'%m/%d/%Y %H:%i %p')  \n" +
                "		WHEN dca.Colname = 'CONTACTPERSONID' THEN  \n" +
                "		 (SELECT CONCAT(firstName , ' ' ,IFNULL(middleName,''),' ' , lastName) AS OldValue FROM contactperson WHERE personId =dca.Oldval)  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Oldval=0 THEN  \n" +
                "			 'Draft'  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Oldval=1 THEN  \n" +
                "			 'Published'  \n" +
                "		-- Get shipping address details  \n" +
                "		WHEN dca.Colname='SHIPPINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Oldval AND ca.addressType = 'S'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='BILLINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Oldval AND ca.addressType = 'B'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='CUSTOMERID' THEN  \n" +
                "		(SELECT CONCAT('(',mfgCode,') ',mfgName) AS customer FROM mfgcodemst WHERE id=dca.Oldval)  \n" +
                "		ELSE  \n" +
                "		dca.Oldval  \n" +
                "		END AS Oldval,  \n" +
                "		CASE  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Newval) > 0 AND dca.Colname ='SHIPPINGMETHODID') THEN  \n" +
                "		  (SELECT CONCAT('(', gencCategoryCode , ')',' ',gencCategoryName) AS Newval FROM genericcategory WHERE gencCategoryID =dca.Newval)  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Newval) > 0 AND dca.Colname ='TERMSID') THEN  \n" +
                "		  (SELECT gencCategoryName AS Newval FROM genericcategory WHERE gencCategoryID =dca.Newval)  \n" +
                "		WHEN dca.Colname = 'PARTID' THEN  \n" +
                "		  (SELECT CONCAT(nickName,' ',rev) AS Newval FROM component WHERE id =dca.Newval)  \n" +
                "		 WHEN  dca.Colname = 'SODATE' OR dca.Colname='PODATE' OR dca.Colname='MATERIALTENTITVEDOCDATE' OR dca.Colname='MATERIALDUEDATE'  THEN  \n" +
                "		       DATE_FORMAT(dca.Newval,'%m/%d/%Y %H:%i %p')  \n" +
                "		  WHEN dca.Colname = 'CONTACTPERSONID' THEN  \n" +
                "		 (SELECT CONCAT(firstName , ' ' ,IFNULL(middleName,''),' ' , lastName) AS Newval FROM contactperson WHERE personId =dca.Newval)  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Newval=0 THEN  \n" +
                "			 'Draft'  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Newval=1 THEN  \n" +
                "		       'Published'  \n" +
                "		 WHEN dca.Colname='ISDELETED' AND dca.Newval=0 THEN  \n" +
                "			 'No'  \n" +
                "		WHEN dca.Colname='ISDELETED' AND dca.Newval=1 THEN  \n" +
                "		       'Yes'  \n" +
                "		-- Get shipping address details  \n" +
                "		WHEN dca.Colname='SHIPPINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Newval AND ca.isDeleted = 0 AND ca.addressType = 'S'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='BILLINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Newval AND ca.isDeleted = 0 AND ca.addressType = 'B'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='CUSTOMERID' THEN  \n" +
                "		(SELECT CONCAT('(',mfgCode,') ',mfgName) AS customer FROM mfgcodemst WHERE id=dca.Newval)  \n" +
                "		ELSE  \n" +
                "			dca.Newval  \n" +
                "		END AS Newval,  \n" +
                "			dca.Colname,dca.RefTransID,  \n" +
                "			-- (SELECT username FROM users WHERE id = dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,  \n" +
                "  \n" +
                "		fun_getUserNameByID(dca.updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(dca.createdBy) createdby,  \n" +
                "		fun_getRoleByID(dca.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(dca.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(dca.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "		FROM `dataentrychange_auditlog`  AS dca  \n" +
                "		WHERE `Tablename`='\",pTableName,\"'  AND `RefTransID`=\",psoID,\"  \n" +
                "  \n" +
                "		    UNION ALL  \n" +
                "  \n" +
                "		SELECT dca.ID,  \n" +
                "		 CASE  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Oldval) > 0 AND dca.Colname ='SHIPPINGMETHODID') THEN  \n" +
                "		  (SELECT CONCAT('(', gencCategoryCode , ')',' ',gencCategoryName) AS OldValue FROM genericcategory WHERE gencCategoryID =dca.Oldval)  \n" +
                "		WHEN ((SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Oldval) > 0 AND dca.Colname ='TERMSID') THEN  \n" +
                "		  (SELECT gencCategoryName AS OldValue FROM genericcategory WHERE gencCategoryID =dca.Oldval)  \n" +
                "		 WHEN dca.Colname = 'PARTID' THEN  \n" +
                "		  (SELECT CONCAT(nickName,' ',rev) AS OldValue FROM component WHERE id =dca.Oldval)  \n" +
                "		 WHEN  dca.Colname = 'SODATE' OR dca.Colname='PODATE' OR dca.Colname='MATERIALTENTITVEDOCDATE' OR dca.Colname='MATERIALDUEDATE'  THEN  \n" +
                "		       DATE_FORMAT(dca.Oldval,'%m/%d/%Y %H:%i %p')  \n" +
                "		 WHEN dca.Colname = 'CONTACTPERSONID' THEN  \n" +
                "		(SELECT CONCAT(firstName , ' ' ,IFNULL(middleName,''),' ' , lastName) AS OldValue FROM contactperson WHERE personId =dca.Oldval)  \n" +
                "	       WHEN dca.Colname='STATUS' AND dca.Oldval=0 THEN  \n" +
                "			 'Draft'  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Oldval=1 THEN  \n" +
                "			 'Published'  \n" +
                "		WHEN dca.Colname='ISDELETED' AND dca.Oldval=0 THEN  \n" +
                "			 'No'  \n" +
                "		WHEN dca.Colname='ISDELETED' AND dca.Oldval=1 THEN  \n" +
                "		       'Yes'  \n" +
                "		-- Get shipping address details  \n" +
                "		WHEN dca.Colname='SHIPPINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Oldval  AND ca.addressType = 'S'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='BILLINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Oldval  AND ca.addressType = 'B'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='CUSTOMERID' THEN  \n" +
                "		(SELECT CONCAT('(',mfgCode,') ',mfgName) AS customer FROM mfgcodemst WHERE id=dca.Oldval)  \n" +
                "		ELSE  \n" +
                "			dca.Oldval  \n" +
                "		END AS Oldval,  \n" +
                "		CASE  \n" +
                "		WHEN (SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Newval) > 0 AND dca.Colname ='SHIPPINGMETHODID' THEN  \n" +
                "		  (SELECT CONCAT('(', gencCategoryCode , ')',' ',gencCategoryName) AS Newval FROM genericcategory WHERE gencCategoryID =dca.Newval)  \n" +
                "		WHEN (SELECT COUNT(1) FROM genericcategory WHERE gencCategoryID = dca.Newval) > 0 AND dca.Colname ='TERMSID' THEN  \n" +
                "		  (SELECT gencCategoryName AS Newval FROM genericcategory WHERE gencCategoryID =dca.Newval)  \n" +
                "		WHEN dca.Colname = 'PARTID' THEN  \n" +
                "		  (SELECT CONCAT(nickName,' ',rev) AS Newval FROM component WHERE id =dca.Newval)  \n" +
                "		WHEN  dca.Colname = 'SODATE' OR dca.Colname='PODATE' OR dca.Colname='MATERIALTENTITVEDOCDATE' OR dca.Colname='MATERIALDUEDATE'  THEN  \n" +
                "		       DATE_FORMAT(dca.Newval,'%m/%d/%Y %H:%i %p')  \n" +
                "		WHEN dca.Colname = 'CONTACTPERSONID' THEN  \n" +
                "		(SELECT CONCAT(firstName , ' ' ,IFNULL(middleName,''),' ' , lastName) AS Newval FROM contactperson WHERE personId =dca.Newval)  \n" +
                "		 WHEN dca.Colname='STATUS' AND dca.Newval=0 THEN  \n" +
                "			 'Draft'  \n" +
                "		WHEN dca.Colname='STATUS' AND dca.Newval=1 THEN  \n" +
                "			 'Published'  \n" +
                "		WHEN dca.Colname='ISDELETED' AND dca.Newval=0 THEN  \n" +
                "			 'No'  \n" +
                "		WHEN dca.Colname='ISDELETED' AND dca.Newval=1 THEN  \n" +
                "		       'Yes'  \n" +
                "		-- Get shipping address details  \n" +
                "		WHEN dca.Colname='SHIPPINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Newval  AND ca.addressType = 'S'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='BILLINGADDRESSID' THEN  \n" +
                "		(  \n" +
                "		SELECT CONCAT(IFNULL(ca.companyName,''), IFNULL(ca.personName,''), IFNULL(ca.division,''),  \n" +
                "		(CASE WHEN ca.division IS NOT NULL THEN'' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),  \n" +
                "		IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-', IFNULL(ca.postcode,''))  \n" +
                "		FROM customer_addresses ca  \n" +
                "		JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "		WHERE ca.id = dca.Newval  AND ca.addressType = 'B'  \n" +
                "		)  \n" +
                "		WHEN dca.Colname='CUSTOMERID' THEN  \n" +
                "		(SELECT CONCAT('(',mfgCode,') ',mfgName) AS customer FROM mfgcodemst WHERE id=dca.Newval)  \n" +
                "		ELSE  \n" +
                "			dca.Newval  \n" +
                "		END AS Newval,  \n" +
                "			dca.Colname,dca.RefTransID,  \n" +
                "			-- (SELECT username FROM users WHERE id = dca.Updatedby AND deletedAt IS NULL LIMIT 1) UpdatedByUser,  \n" +
                "  \n" +
                "		fun_getUserNameByID(dca.updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(dca.createdBy) createdby,  \n" +
                "		fun_getRoleByID(dca.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(dca.updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(dca.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(dca.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "	        FROM dataentrychange_auditlog dca  \n" +
                "		WHERE tablename ='salesorderdet'  \n" +
                "	        AND RefTransID IN (SELECT id FROM salesorderdet t WHERE refSalesOrderID = \",psoID,\"  AND t.id = dca.RefTransID)  \n" +
                "         \");  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_SOChangeHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_SOChangeHistory,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 26-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5901,'2.00','V1',' Alter procedure Sproc_SOChangeHistory-CC'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5901:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-01-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BI_contactperson` ;  \n" +
                "CREATE TRIGGER `Trg_BI_contactperson` BEFORE INSERT ON `contactperson`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	IF( (SELECT COUNT(1) FROM contactperson  \n" +
                "		WHERE refTableName = NEW.refTableName AND refTransID = NEW.refTransID AND isDeleted = 0  \n" +
                "        AND firstName = NEW.firstName  \n" +
                "        AND IFNULL(middleName,'') = IFNULL(NEW.middleName,'')  \n" +
                "	AND lastName = NEW.lastName ) > 0) THEN  \n" +
                "		SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='Duplicate entry';  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 27-01-2022 *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_BU_contactperson` ;  \n" +
                "CREATE TRIGGER `Trg_BU_contactperson` BEFORE UPDATE ON `contactperson`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	IF((NEW.isDeleted = 0) AND (SELECT COUNT(1) FROM contactperson  \n" +
                "		WHERE refTableName = NEW.refTableName AND refTransID = NEW.refTransID AND isDeleted = 0  \n" +
                "		AND personId != NEW.personId  \n" +
                "		AND firstName = NEW.firstName  \n" +
                "		AND IFNULL(middleName,'') = IFNULL(NEW.middleName,'')  \n" +
                "		AND lastName = NEW.lastName ) > 0) THEN  \n" +
                "			SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='Duplicate entry';  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5902,'2.00','V1',' contact person unique trigger - KETAN '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5902:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierQuote`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuote`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pIsSummary TINYINT,  \n" +
                "	IN pSupplierIds VARCHAR(16000),  \n" +
                "	IN pQuoteStatus VARCHAR(1000),  \n" +
                "	IN pSearchType VARCHAR(5),  \n" +
                "	IN pAdvanceSearchSQ VARCHAR(100),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN pPartIds VARCHAR(16000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_MfgNameFormat VARCHAR(100);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO v_MfgNameFormat;  \n" +
                "  \n" +
                "	IF (pIsSummary = FALSE) THEN  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "				SELECT  \n" +
                "					s.id,  \n" +
                "					spd.id AS supplierQuotePartDetID,  \n" +
                "					fun_GetFormattedMfgCode(cm.mfgCode, cm.mfgName, \",v_MfgNameFormat,\") mfgName,  \n" +
                "					cm.mfgCode,  \n" +
                "					s.supplierID,  \n" +
                "					spd.partID,  \n" +
                "                    c.custAssyPN,  \n" +
                "					c.mfgPN AS mfgPN,  \n" +
                "                    c.mfgPNDescription,  \n" +
                "					c.mfgcodeID,  \n" +
                "					sc.mfgPN AS supplierPN,  \n" +
                "					spd.supplierPartID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "					IF(spd.isActive = 0, 'Inactive', 'Active') AS isActiveConvertedValueDetail,  \n" +
                "					spd.isActive,  \n" +
                "					spd.scanLabel,  \n" +
                "                    IF(s.quoteStatus = 'P',true, false) AS isDisabledDelete,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricing,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledCopySupplierQuote,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricingHistory,  \n" +
                "                    IF(spd.id IS NULL, false, true) AS isRequirementReference,  \n" +
                "					c.isCustom,  \n" +
                "					sc.isCustom AS isCustomSupplier,  \n" +
                "					rhc.rohsIcon,  \n" +
                "					rhc.name rohsName,  \n" +
                "					rhsc.rohsIcon supplierRohsIcon,  \n" +
                "					rhsc.name supplierRohsName,  \n" +
                "					fun_getPartAttibutesBySupplierQuoteDetailID(spd.id) AS attributesList,  \n" +
                "					fun_getPartPricingCountBySupplierQuoteDetailID(spd.id) AS pricingCount,  \n" +
                "					fun_getUserNameByID(spd.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(spd.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(spd.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(spd.createByRoleId) createdByRole  \n" +
                "				FROM  supplier_quote_parts_det spd  \n" +
                "				LEFT JOIN supplier_quote_mst s ON spd.supplierQuoteMstID = s.id AND s.isDeleted = 0  \n" +
                "				LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN rfq_rohsmst rhc ON c.RoHSStatusID = rhc.id AND rhc.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "				LEFT JOIN rfq_rohsmst rhsc ON sc.RoHSStatusID = rhsc.id AND rhsc.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst cm ON cm.id = c.mfgcodeID  AND cm.isDeleted = 0  \n" +
                "				WHERE spd.isDeleted = 0 \");  \n" +
                "	 ELSE  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "			SELECT 	s.id,  \n" +
                "					s.supplierID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "                    IF(s.quoteStatus = 'P', true, false) AS isDisabledDelete,  \n" +
                "                    fun_getAddressbyID(s.billingAddressID) billTo,  \n" +
                "                    fun_getAddressbyID(s.shippingAddressID) shipTo,  \n" +
                "                    fun_GetFormattedContactPerson(cntb.firstName, cntb.middleName, cntb.lastName, cntb.division, cntb.email, cntb.phoneCountryCode, cntb.phone, cntb.phExtension, cntb.mobile, cntb.faxCountryCode, cntb.faxNumber ) billToContactName,  \n" +
                "					fun_GetFormattedContactPerson(cnts.firstName, cnts.middleName, cnts.lastName, cnts.division, cnts.email, cnts.phoneCountryCode, cnts.phone, cnts.phExtension, cnts.mobile, cnts.faxCountryCode, cnts.faxNumber ) shipToContactName,  \n" +
                "                    (SELECT COUNT(0) FROM supplier_quote_parts_det WHERE isDeleted = 0 AND supplierQuoteMstID = s.id) AS noOfSupplierPartLine,  \n" +
                "					fun_getUserNameByID(s.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(s.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(s.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(s.createByRoleId) createdByRole  \n" +
                "			FROM   supplier_quote_mst s  \n" +
                "			LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "			LEFT JOIN contactperson cntb ON s.billingContactPersonID = cntb.personId AND cntb.isDeleted = 0  \n" +
                "			LEFT JOIN contactperson cnts ON s.shippingContactPersonID = cnts.personId AND cnts.isDeleted = 0  \n" +
                "			WHERE  s.isDeleted = 0  AND  \n" +
                "            (CASE WHEN ('\",pPartIds,\"' != '') THEN  \n" +
                "				s.id IN  (SELECT spd.supplierQuoteMstID FROM  \n" +
                "				supplier_quote_parts_det spd  \n" +
                "                LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "                WHERE spd.isDeleted = 0 AND (FIND_IN_SET(spd.supplierPartID, ('\",pPartIds,\"')) OR FIND_IN_SET(spd.partID, ('\",pPartIds,\"'))))  \n" +
                "				ELSE 1 = 1 END)  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSupplierIds IS NOT NULL OR pSupplierIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND supplierID in (\"',pSupplierIds,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pQuoteStatus IS NOT NULL OR pQuoteStatus != '') THEn  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND quoteStatus in (\"',pQuoteStatus,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pAdvanceSearchSQ IS NOT NULL OR pAdvanceSearchSQ != '') THEN  \n" +
                "		IF(pSearchType = 'E') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber = \"', pAdvanceSearchSQ , '\" ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber LIKE \"%', pAdvanceSearchSQ ,'%\" ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''' and quoteDate <= ''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate <= ''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPartIds != '' AND (pIsSummary = FALSE)) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( supplierPartID in (\"',pPartIds,'\") OR partID in (\"',pPartIds,'\") )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuote,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuote,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "   PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5903,'2.00','V1','Bug 40721: SPLR QTE: While clicking on Save button - Supplier Quotes is created but showing Bill To Ship To Address blank - it should show default address [Hotfix] '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5903:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-01-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(10),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchPoSoPsInv VARCHAR(50),  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pReceiveStatus VARCHAR(255),  \n" +
                "    IN pPackingSlipFromDate DATE,  \n" +
                "    IN pPackingSlipToDate DATE,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pPostingStatusFilter VARCHAR(10),  \n" +
                "    IN pPSComments VARCHAR(1000),  \n" +
                "    IN pSelectedDateType VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"  \n" +
                "									  \" )  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "	IF (pReceiveStatus IS NOT NULL AND pReceiveStatus != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (\",pReceiveStatus,\")\");  \n" +
                "    END IF;  \n" +
                "    IF pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (receiptDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (poDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "        END IF;  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "    	IF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (receiptDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (poDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "    IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" and lockStatus IN (\", pLockStatusFilter ,\")\");  \n" +
                "	END IF;  \n" +
                "    IF(pPostingStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" and packingSlipModeStatus = '\", pPostingStatusFilter,\"'\");  \n" +
                "	END IF;  \n" +
                "    IF (pPSComments IS NOT NULL AND pPSComments != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \"  \n" +
                "				AND (internalRemark LIKE '%\",pPSComments,\"%'  \n" +
                "                OR poComment LIKE '%\",pPSComments,\"%'  \n" +
                "                OR shippingComment LIKE '%\",pPSComments,\"%')  \n" +
                "                \");  \n" +
                "    END IF;  \n" +
                "	IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = refPackingSlipNumberForInvoice  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" like '%\", pPaymentNumber, \"%' \") ELSE CONCAT(\" = '\", pPaymentNumber ,\"' \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"  \n" +
                "			SELECT  *  \n" +
                "			FROM	(  \n" +
                "					SELECT 		p.id,  \n" +
                "							p.systemId,  \n" +
                "							p.poNumber,  \n" +
                "                            p.poDate,  \n" +
                "							p.refPurchaseOrderID poId,  \n" +
                "							p.mfgCodeID,  \n" +
                "							p.supplierSONumber,  \n" +
                "                            p.soDate,  \n" +
                "							p.packingSlipNumber,  \n" +
                "							p.packingSlipDate,  \n" +
                "							p.invoiceNumber,  \n" +
                "							p.invoiceDate,  \n" +
                "							p.creditMemoNumber,  \n" +
                "							p.creditMemoDate,  \n" +
                "							p.debitMemoNumber,  \n" +
                "							p.debitMemoDate,  \n" +
                "							p.receiptDate,  \n" +
                "							p.description,  \n" +
                "							p.billToAddress,  \n" +
                "							p.shipToAddress,  \n" +
                "							p.poVersion,  \n" +
                "							p.isDeleted,  \n" +
                "							p.receiptType,  \n" +
                "							p.`status`,  \n" +
                "							p.packingSlipModeStatus,  \n" +
                "							p.chequeNumber,  \n" +
                "							p.chequeDate,  \n" +
                "							p.chequeAmount,  \n" +
                "							p.applyDate,  \n" +
                "							p.refParentCreditDebitInvoiceno,  \n" +
                "							p.refPackingSlipNumberForInvoice,  \n" +
                "							p.invoiceTotalDue,  \n" +
                "							p.isTariffInvoice,  \n" +
                "							p.bankName,  \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "							fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "							m.mfgCode supplierCode,  \n" +
                "							fun_GetFormattedMfgCode(m.mfgCode , m.mfgName,\",v_mfgNameFormat,\") supplierCodeName,  \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "									WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) packingSlipModeStatusValue,  \n" +
                "							ps.id invoiceId,  \n" +
                "							ps.invoiceNumber refInvoiceNumber,  \n" +
                "                            ps.lockStatus refInvoiceLockStatus,  \n" +
                "							ps.invoiceDate refInvoiceDate,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.status = 'I' THEN 'Investigate'  \n" +
                "									WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
                "									WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
                "									WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "									WHEN p.status = 'P' THEN 'Fully Paid'  \n" +
                "                                    WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) statusValue,  \n" +
                "							IFNULL(g.cnt,0) packingSlipDocCount,  \n" +
                "							psm.TotalLines,  \n" +
                "							psm.PendingLines,  \n" +
                "                            psm.AcceptedWithDeviationLines,  \n" +
                "                            psm.RejectedLines,  \n" +
                "                            psm.AcceptedLines,  \n" +
                "                            p.lockStatus,  \n" +
                "                            (case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "								when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "                                when p.lockStatus = 'LC' then 'Locked'  \n" +
                "                                else null end  \n" +
                "                            ) lockStatusValue,  \n" +
                "                            fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                            p.isCustConsigned,  \n" +
                "                            CASE WHEN p.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "                            p.CustomerID,  \n" +
                "                            fun_GetFormattedMfgCode(mc.mfgcode, mc.mfgName, \",v_mfgNameFormat,\") customerName,  \n" +
                "                            p.isNonUMIDStock,  \n" +
                "                            CASE WHEN p.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                            p.internalRemark,  \n" +
                "                            pom.poComment,  \n" +
                "                            pom.shippingComment  \n" +
                "					FROM		packing_slip_material_receive p  \n" +
                "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	refPackingSlipMaterialRecID,  \n" +
                "										sum(totalLines) as TotalLines,  \n" +
                "                                        sum(pendingLines) as PendingLines,  \n" +
                "                                        sum(acceptedWithDeviationLines) as AcceptedWithDeviationLines,  \n" +
                "                                        sum(rejectedLines) as RejectedLines,  \n" +
                "                                        sum(acceptedLines) as AcceptedLines  \n" +
                "								FROM 		packing_slip_material_receive_det psm  \n" +
                "								WHERE 		isDeleted = 0  \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id  \n" +
                "                    join mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "                    LEFT JOIN mfgcodemst mc ON mc.id = p.CustomerID  \n" +
                "					LEFT JOIN purchase_order_mst pom ON pom.id = p.refPurchaseOrderID AND pom.isDeleted = 0  \n" +
                "					WHERE p.receiptType = 'P' and p.isDeleted = false ) a  \n" +
                "			WHERE \", v_advanceFilterWhereClause  \n" +
                "		);  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "    /* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " END;  \n" +
                /* **************************** New Script -> 31-01-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(30),  \n" +
                "	IN pMfgCodeIds LONGTEXT,  \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearch TINYINT,  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pInvoiceIds LONGTEXT,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvoiceFromDate DATE,  \n" +
                "    IN pInvoiceToDate DATE,  \n" +
                "    IN pMarkedForRefundStatus LONGTEXT,  \n" +
                "    IN pInvoiceComments VARCHAR(1000),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pSelectedDateType VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentDate DATE;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
                "			SELECT 		p.id,  \n" +
                "					p.systemId,  \n" +
                "					p.poNumber,  \n" +
                "                    p.poDate,  \n" +
                "                    p.refPurchaseOrderID poId,  \n" +
                "					p.mfgCodeID,  \n" +
                "					p.supplierSONumber,  \n" +
                "                    p.soDate,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
                "					p.packingSlipDate,  \n" +
                "					p.invoiceNumber,  \n" +
                "                    p.lockStatus invoiceLockStatus,  \n" +
                "					p.invoiceDate,  \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
                "					p.creditMemoNumber,  \n" +
                "                    p.lockStatus creditMemoLockStatus,  \n" +
                "					p.creditMemoDate,  \n" +
                "					p.debitMemoNumber,  \n" +
                "                    p.refSupplierCreditMemoNumber,  \n" +
                "                    p.lockStatus debitMemoLockStatus,  \n" +
                "					p.debitMemoDate,  \n" +
                "					p.receiptDate,  \n" +
                "					p.description,  \n" +
                "					p.billToAddress,  \n" +
                "					p.shipToAddress,  \n" +
                "					p.poVersion,  \n" +
                "					p.isDeleted,  \n" +
                "					p.receiptType,  \n" +
                "					p.`status`,  \n" +
                "					p.applyDate,  \n" +
                "					p.refParentCreditDebitInvoiceno,  \n" +
                "					p.refPackingSlipNumberForInvoice,  \n" +
                "					p.invoiceTotalDue,  \n" +
                "					p.isTariffInvoice,  \n" +
                "					p.creditMemoType,  \n" +
                "                    (  \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
                "								'Invoice Credit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MC' THEN  \n" +
                "								'MISC Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'RC' THEN  \n" +
                "								'RMA Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'ID' THEN  \n" +
                "								'Invoice Debit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MD' THEN  \n" +
                "								'MISC Debit Memo'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
                "								'Invoice'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
                "								'MISC Invoice'  \n" +
                "						END  \n" +
                "					) subTypeValue,  \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                    m.mfgName supplierName,  \n" +
                "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
                "					m.mfgCode supplierCodeName,  \n" +
                "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
                "					pg.packingSlipDocCount,  \n" +
                "					pd.itemReceived,  \n" +
                "					pd.otherChargesItemReceived,  \n" +
                "					pd.itemDisapproved,  \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
                "					ps.status parentInvoiceStatus,  \n" +
                "					ps.invoiceNumber refInvoiceNumber,  \n" +
                "                    ps.lockStatus refInvoiceLockStatus,  \n" +
                "					ps.creditMemoType parentCreditMemoType,  \n" +
                "					pd.totalExtendedAmount,  \n" +
                "                    pd.totalDiscount,  \n" +
                "					pe.totalCreditAmount,  \n" +
                "					pe.totalDebitAmount,  \n" +
                "					(  \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
                "					) amountToPay,  \n" +
                "                    pd.totalExtendedReceivedPrice,  \n" +
                "					pd.packingDetailNote,  \n" +
                "					pd.approveLineCount,  \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
                "											p.debitMemoDate  \n" +
                "										WHEN p.receiptType = 'C' THEN  \n" +
                "											p.creditMemoDate  \n" +
                "										ELSE p.invoiceDate  \n" +
                "									end), payTerm.termsDays, p.paymentTermsID) paymentDueDate,  \n" +
                "					g.gencCategoryName paymentTermName,  \n" +
                " 					m.paymentTermsID paymentTermsID,  \n" +
                "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
                "                    p.paymentTermsID invPaymentTermsID,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
                "					psm.packingSlipModeStatus,  \n" +
                "                    psPay.paymentDate,  \n" +
                "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
                "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
                "					p.invoiceRequireManagementApproval,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
                "								'Yes'  \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
                "								'No'  \n" +
                "						END  \n" +
                "					) invoiceRequireManagementApprovalValue,  \n" +
                "					p.invoiceApprovalStatus,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
                "								'Approved'  \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
                "								'Pending'  \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
                "								'N/A'  \n" +
                "						END  \n" +
                "					) invoiceApprovalStatusValue,  \n" +
                "					p.invoiceApprovedBy,  \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.invoiceApprovalDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') invoiceApprovalDate,  \n" +
                "					p.invoiceApprovalComment,  \n" +
                "					p.internalRemark,  \n" +
                "                    p.remark,  \n" +
                "					p.lockStatus,  \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "						when p.lockStatus = 'LC' then 'Locked'  \n" +
                "						else null end  \n" +
                "					) lockStatusValue,  \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                    case when p.receiptType = 'I' then  \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
                "					h1.refType as haltRefType,  \n" +
                "                    h1.status as haltStatus,  \n" +
                "                    (CASE WHEN h1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltStatusText,  \n" +
                "                    (CASE  \n" +
                "							WHEN h1.status = 'H' THEN  \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReason,  \n" +
                "                    psh1.refType as haltRefTypeRefInv,  \n" +
                "                    psh1.status as haltStatusRefInv,  \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInvText,  \n" +
                "                    (CASE  \n" +
                "							WHEN psh1.status = 'H' THEN  \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInv,  \n" +
                "                    p.markedForRefund,  \n" +
                "                    (case when p.markedForRefund = 0 then 'N/A'  \n" +
                "						else case when ifnull(psPay.refundAmount,0) = 0 then  \n" +
                "										'Waiting for Refund'  \n" +
                "								when ifnull(psPay.refundAmount,0) <> 0 and ifnull(psPay.refundAmount,0) <> ifnull(p.markedForRefundAmt,0)  then  \n" +
                "										'Partially Refunded'  \n" +
                "								when ifnull(psPay.refundAmount,0) = ifnull(p.markedForRefundAmt,0) then  \n" +
                "										'Fully Refunded'  \n" +
                "								else '' end  \n" +
                "						end  \n" +
                "					) markedForRefundValue,  \n" +
                "                    p.markedForRefundAmt  \n" +
                "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
                "							gFiles.gencFileOwnerType,  \n" +
                "							gFiles.refTransID,  \n" +
                "							gFiles.entityID  \n" +
                "						FROM genericfiles gFiles  \n" +
                "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
                "						and gFiles.entityID in (-13,-15,-16)  \n" +
                "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
                "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
                "																		WHEN p.receiptType = 'D' THEN -16  \n" +
                "																		ELSE -13  \n" +
                "																	END)  \n" +
                "				and psDoc.refTransID = p.id  \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
                "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where h2.refTransId = h1.refTransId  \n" +
                " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
                "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
                "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where psh1.refTransId = h2.refTransId  \n" +
                " 											  and h2.refType = 'SINV'  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
                "            left join (  \n" +
                "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
                "				FROM 	vu_genericfilescount g  \n" +
                "				WHERE 	g.entityID = -14  \n" +
                "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
                "            ) pg on pg.refTransID = psm.id  \n" +
                "			left join (  \n" +
                "							select 	a.refPackingSlipMaterialRecID,  \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
                "								sum(a.itemReceived) itemReceived,  \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
                "								sum(a.itemDisapproved) itemDisapproved,  \n" +
                "								sum(a.approveLineCount) approveLineCount,  \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
                "                                sum(discount) totalDiscount,  \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
                "							from 	(  \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
                "										psm.packingSlipSerialNumber,  \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
                "										extendedPrice,  \n" +
                "                                        discount,  \n" +
                "										extendedReceivedPrice  \n" +
                "									FROM 	packing_slip_material_receive_det psm  \n" +
                "									WHERE 	psm.isDeleted = 0  \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
                "								) a  \n" +
                "							group by a.refPackingSlipMaterialRecID  \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
                "				left join (select b.refPackingslipInvoiceID,  \n" +
                "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount,  \n" +
                "                                    max(case when a.refPaymentMode = 'P' then a.paymentDate else null end) paymentDate  \n" +
                "							  from packingslip_invoice_payment a  \n" +
                "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "							 where a.refPaymentMode IN ('P','RR')  \n" +
                "							   and a.isPaymentVoided = 0  \n" +
                "							   and b.isDeleted = 0  \n" +
                "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
                "				left join (  \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
                "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
                "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
                "							from 		packing_slip_material_receive ps  \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
                "                            left join (select b.refPackingslipInvoiceID,  \n" +
                "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "										 where a.refPaymentMode IN ('P','RR')  \n" +
                "										   and b.isPaymentVoided = 0  \n" +
                "										   and b.isDeleted = 0  \n" +
                "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
                "								  where ps.receiptType in ('C','D')  \n" +
                "									and ps.isDeleted = 0  \n" +
                "									and pd.isDeleted = 0  \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
                "				WHERE p.`status` in ('PE','I','A','P','PP') and p.isDeleted = 0 \",  \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pInvPaymentTermsIds IS NOT NULL AND pInvPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pInvPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and p.lockStatus IN (\", pLockStatusFilter ,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "      IF(pInvoiceComments IS NOT NULL AND pInvoiceComments != '')THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and (p.internalRemark LIKE '%\",pInvoiceComments,\"%' OR p.remark LIKE '%\",pInvoiceComments,\"%')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = p.id  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefundStatus IS NOT NULL and pMarkedForRefundStatus != '' THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.markedForRefundValue in (\",pMarkedForRefundStatus,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
                "													or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		END IF;  \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
                "													   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
                "		IF pIsExactSearch = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
                "				SELECT 1  \n" +
                "				  FROM packing_slip_material_receive_det x  \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "    EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*,  \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "				round(c.paidAmount,2) totalPaidAmount,  \n" +
                "                round(c.refundAmount,2) totalRefundAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 31-01-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_mfgcodemst`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_mfgcodemst`(  \n" +
                "  IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempMFGCodeMst;  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as  \n" +
                "			        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mfgcodeID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND mfgcodeid IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employees WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND certificateSupplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyTo IN(',IDs,') OR buyBy IN(',IDs,')) LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_attribute_template_mst\" else \"\" end as msg FROM supplier_attribute_template_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_mst\" else \"\" end as msg FROM component_approved_supplier_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_mapping_mst\" else \"\" end as msg FROM supplier_mapping_mst WHERE deletedAt IS NULL AND refMfgCodeMstID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_priority_detail\" else \"\" end as msg FROM component_approved_supplier_priority_detail WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"invalid_mfgmappingmst\" else \"\" end as msg FROM invalid_mfgmappingmst WHERE isdeleted = 0 AND refmfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "                (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE deletedAt IS NULL AND CustomerID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_det WHERE deletedAt IS NULL AND lineCustomerID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "                (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_material_receipt\" else \"\" end as msg FROM packing_slip_material_receive WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_material_receipt\" else \"\" end as msg FROM packing_slip_material_receive WHERE deletedAt IS NULL AND CustomerID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_material_receipt\" else \"\" end as msg FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND LineCustomerID IN(',IDs,') LIMIT 1)  \n" +
                "		 ');  \n" +
                "                   -- (SELECT COUNT(1) cnt , CASE WHEN COUNT(1) > 0 THEN \"rfq_consolidated_mfgpn_lineitem_alternate\" ELSE \"\" END AS msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE mfgCodeID IN(',IDs,')  LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"billing_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') AND addressType=\"B\"  LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') AND addressType=\"S\" LIMIT 1)  \n" +
                "	           -- UNION ALL  \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"contactperson\" else \"\" end as msg FROM contactperson WHERE deletedAt IS NULL AND refTransID IN(',IDs,') AND refTableName = \"mfgcodemst\" LIMIT 1)  \n" +
                "	           -- UNION ALL  \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyBy IN(',IDs,') OR buyTo IN(',IDs,')) LIMIT 1)  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempMFGCodeMst t)=0 THEN  \n" +
                "				START TRANSACTION;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "  \n" +
                "				SET @SQl2 = CONCAT('update mfgcodealias set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE mfgcodeId IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt2 FROM @SQL2;  \n" +
                "						EXECUTE stmt2;  \n" +
                "				SELECT * FROM tempMFGCodeMst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "				COMMIT;  \n" +
                "			ELSE  \n" +
                "				SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempMFGCodeMst t;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "			   FROM tempMFGCodeMst t1  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "				ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "  \n" +
                " DROP TEMPORARY TABLE IF EXISTS tempMFGCodeMst;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5904,'2.00','V1',' Bug 40722: Supplier Invoice Issues reported by Charmy on Regression testing - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5904:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-02-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_BU_purchase_order_line_release_det`;  \n" +
                "CREATE TRIGGER `TRG_BU_purchase_order_line_release_det` BEFORE UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN  \n" +
                "	IF(NEW.isdeleted = 0) THEN  \n" +
                "		IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = NEW.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "		END IF;  \n" +
                "		IF (NEW.qty = NEW.receivedQty AND NEW.poLineWorkingStatus='P') THEN  \n" +
                "			SET NEW.poLineWorkingStatus='C';  \n" +
                "			SET NEW.poLineCompleteType='Auto';  \n" +
                "		ELSEIF ((NEW.qty > NEW.receivedQty AND NEW.poLineCompleteType != 'Manual') OR (NEW.qty != OLD.qty AND New.poLineCompleteType = 'Manual' AND NEW.poLineWorkingStatus='C')) THEN  \n" +
                "			SET NEW.poLineWorkingStatus='P';  \n" +
                "			SET NEW.poLineCompleteType=null;  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5905,'2.00','V1',' Bug 40825: PO: if update PO Qty = Received Qty from purchase order means fully material is received from packing slip then PO Should be auto completed - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5905:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_ValiationAndSaveStockAllocation`;  \n" +
                "CREATE PROCEDURE `Sproc_ValiationAndSaveStockAllocation`(  \n" +
                "		IN pStockDetail JSON,  \n" +
                "		IN pRefSalesOrderDetID INT,  \n" +
                "		IN pAssyID INT,  \n" +
                "		IN pPartIds LONGTEXT,  \n" +
                "		IN pUMIDs LONGTEXT,  \n" +
                "		IN pUserId VARCHAR(50),  \n" +
                "		IN pCheckForSameUmid BOOLEAN,  \n" +
                "		IN pToUOM INT,  \n" +
                "		IN pSubAssyID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountSameUMIDFind INT;  \n" +
                "	DECLARE v_ConcateUMID LONGTEXT;  \n" +
                "	DECLARE v_KitName LONGTEXT;  \n" +
                "	DECLARE v_UMIDForKitName LONGTEXT;  \n" +
                "	DECLARE v_KitIds LONGTEXT;  \n" +
                "	DECLARE v_CountError INT;  \n" +
                "    DECLARE v_CurrentUMIDUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_CurrentAllocatedUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_SameAllocated TINYINT DEFAULT FALSE;  \n" +
                "    DECLARE v_KitReturnStatus VARCHAR(100);  \n" +
                "	SET v_ConcateUMID = NULL;  \n" +
                "	/* create temp table for response */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_Validation_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		UMID LONGTEXT,  \n" +
                "		TransName LONGTEXT,  \n" +
                "		ErrorCode VARCHAR(150),  \n" +
                "		KitIds LONGTEXT,  \n" +
                "        Reason LONGTEXT,  \n" +
                "        StartDate VARCHAR(150)  \n" +
                "	);  \n" +
                "	# Error/Confirmation Codes:  \n" +
                "	# 1. MOUNTING_TYPE_MISMATCHED  \n" +
                "	# 2. FUNCTIONAL_TYPE_MISMATCHED  \n" +
                "	# 3. PO_HALT_ERROR  \n" +
                "	# 4. KIT_ALLOCATION_HALT_ERROR  \n" +
                "	# 5. SAME_UMID_ALLOCATED - Continue confimration in case of same umid is already allocated?  \n" +
                "	# 6. STOCK_NOT_ALLOCATED - UMID(s) could not be allocated, because other UMID(s) is already allocated in this kit and shared with other kit(s).  \n" +
                "	# 7. SOME_UMID_ALLOCATED - Already same UMID allocation is done by other user or by another transaction on same time.  \n" +
                "	# 8. FULLY_KIT_RETUNRED - Kit is Fully Returned then not allow to Allocate UMID(s).  \n" +
                "    # 9. RESERVED_RESTRICTED_UMID - UMID is restricted/reserved then not allow to Allocate UMID(s).  \n" +
                "	SELECT FUN_GETKITRETURNSTATUS(a.pendingReleaseCount, a.releasedNotReturnedCount, a.returnedCount, a.readyToreturnCount, a.shortageReturnCount) AS kitReturnStatus INTO v_KitReturnStatus  \n" +
                "	FROM (  \n" +
                "			SELECT  SUM(CASE WHEN kitReturnStatus = 'NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'RR' THEN 1 ELSE 0 END) readyToreturnCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "			FROM 	vu_release_plan_release_return_status_det  \n" +
                "			WHERE  salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pAssyID  \n" +
                "			AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END)  \n" +
                "		) AS a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Hold;  \n" +
                "	CREATE TEMPORARY TABLE temp_Validation_Hold  \n" +
                "	SELECT  hut.id,  \n" +
                "		hut.refTransId,  \n" +
                "        hut.refType,  \n" +
                "        hut.reason,  \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate) startDate,  \n" +
                "		fun_getEmployeeInitialNameByEmpID(hut.holdEmployeeId) empInitialName  \n" +
                "		FROM holdunholdtrans hut  \n" +
                "		WHERE hut.isDeleted = 0  \n" +
                "		AND hut.id IN (SELECT max(id) from holdunholdtrans ht where ht.isDeleted = 0 AND ht.refType in ('PO','KA') AND ht.refTransId = pRefSalesOrderDetID AND hut.status='H' GROUP BY ht.refType,ht.refTransId);  \n" +
                "	IF(v_KitReturnStatus = 'Fully Returned') THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'FULLY_KIT_RETUNRED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component c WHERE c.isDeleted = 0 AND FIND_IN_SET(id, pPartIds) AND c.mountingTypeID = -1) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'MOUNTING_TYPE_MISMATCHED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component c WHERE c.isDeleted = 0 AND FIND_IN_SET(id, pPartIds) AND c.partType = -1) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'FUNCTIONAL_TYPE_MISMATCHED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM temp_Validation_Hold) > 0) THEN  \n" +
                "		IF((SELECT COUNT(1) FROM temp_Validation_Hold) > 1) THEN  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				SELECT 0, NULL, th.empInitialName,'PO_HALT_ERROR', NULL, th.reason, th.startDate FROM temp_Validation_Hold th WHERE th.refType = 'PO';  \n" +
                "		ELSE  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				SELECT 0, NULL, th.empInitialName, IF(th.refType = 'PO','PO_HALT_ERROR','KIT_ALLOCATION_HALT_ERROR'), NULL, th.reason, th.startDate FROM temp_Validation_Hold th;  \n" +
                "        END IF;  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component_sid_stock cst WHERE FIND_IN_SET(cst.id, pUMIDs) AND (cst.isUMIDRestrict = TRUE OR cst.isReservedStock = TRUE)) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'RESERVED_RESTRICTED_UMID', NULL, NULL, NULL);  \n" +
                "	END IF;  \n" +
                "	IF((SELECT COUNT(1) FROM temp_Validation_Error tmp WHERE tmp.IsSuccess = 0) = 0) THEN  \n" +
                "		/* create temp table for kit allocation details */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempKitAllocationDetail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempKitAllocationDetail AS  \n" +
                "		SELECT 	*  FROM  JSON_TABLE(  \n" +
                "			pStockDetail,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				refSalesOrderDetID INT PATH \"$.refSalesOrderDetID\",  \n" +
                "				assyID INT PATH \"$.assyID\",  \n" +
                "				uid VARCHAR(50) PATH \"$.uid\",  \n" +
                "				refBOMLineID INT PATH \"$.refBOMLineID\",  \n" +
                "				STATUS VARCHAR(50) PATH \"$.status\",  \n" +
                "				refUIDId INT PATH \"$.refUIDId\",  \n" +
                "				partId INT PATH \"$.partId\",  \n" +
                "				allocatedQty DECIMAL(18,8) PATH \"$.allocatedQty\",  \n" +
                "				allocatedUnit DECIMAL(18,8) PATH \"$.allocatedUnit\",  \n" +
                "				allocatedUOM INT PATH \"$.allocatedUOM\",  \n" +
                "				umidUnits INT PATH \"$.umidUnits\",  \n" +
                "				kitAllocationId INT PATH \"$.kitAllocationId\",  \n" +
                "				PIDCode VARCHAR(100) PATH \"$.PIDCode\",  \n" +
                "				restricType VARCHAR(500) PATH \"$.restricType\",  \n" +
                "				transactionType VARCHAR(1000) PATH \"$.transactionType\",  \n" +
                "				refTableName VARCHAR(255) PATH \"$.refTableName\",  \n" +
                "				approveFromPage VARCHAR(255) PATH \"$.approveFromPage\",  \n" +
                "				approvedBy VARCHAR(255) PATH \"$.approvedBy\",  \n" +
                "				approvalReason TEXT PATH \"$.approvalReason\",  \n" +
                "				confirmationType INT PATH \"$.confirmationType\",  \n" +
                "				roHSApprovalReason VARCHAR(1000) PATH \"$.roHSApprovalReason\",  \n" +
                "				allocationRemark VARCHAR(1000) PATH \"$.allocationRemark\"  \n" +
                "				)  \n" +
                "			) AS jt;  \n" +
                "		IF (pCheckForSameUmid = TRUE) THEN  \n" +
                "			SELECT 	COUNT(1), GROUP_CONCAT(uid) INTO v_CountSameUMIDFind, v_ConcateUMID  \n" +
                "			FROM 	kit_allocation  \n" +
                "			WHERE 	refSalesOrderDetID = pRefSalesOrderDetID AND STATUS = 'A' AND assyID = IFNULL(pSubAssyID, pAssyID)  AND partId IN (pPartIds) AND refUIDId IN (pUMIDs);  \n" +
                "		ELSE  \n" +
                "			SET v_CountSameUMIDFind = 0;  \n" +
                "		END IF;  \n" +
                "		IF (v_CountSameUMIDFind = 0) THEN  \n" +
                "			block1: BEGIN  \n" +
                "				DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "				DECLARE v_RefSalesOrderDetID INT;  \n" +
                "				DECLARE v_AssyID INT;  \n" +
                "				DECLARE v_Umid VARCHAR(50);  \n" +
                "				DECLARE v_RefBOMLineID INT;  \n" +
                "				DECLARE v_Status VARCHAR(50);  \n" +
                "				DECLARE v_RefUIDId INT;  \n" +
                "				DECLARE v_PartId INT;  \n" +
                "				DECLARE v_AllocatedQty DECIMAL(18,8);  \n" +
                "				DECLARE v_AllocatedUnit DECIMAL(18,8);  \n" +
                "				DECLARE v_AllocatedUOM INT;  \n" +
                "				DECLARE v_UMIDUnits DECIMAL(18,8);  \n" +
                "				DECLARE v_countKitExist INT;  \n" +
                "				DECLARE v_CountSameUMID INT;  \n" +
                "				DECLARE	v_SameUMID VARCHAR(50);  \n" +
                "				DECLARE v_oldUMIDAllocatedUnit DECIMAL(18,8);  \n" +
                "				DECLARE v_oldUMID VARCHAR(50);  \n" +
                "				DECLARE v_CountSameAllocatedUnit INT;  \n" +
                "				DECLARE v_KitAllocationId INT;  \n" +
                "				DECLARE v_StringSameUMID VARCHAR(10000);  \n" +
                "				DECLARE v_CountUMIDForSame INT;  \n" +
                "				DECLARE v_StringUMIDForKit VARCHAR(10000);  \n" +
                "				DECLARE v_CountSameSalesOrder INT;  \n" +
                "				DECLARE v_PIDCode VARCHAR(100);  \n" +
                "				DECLARE v_RestricType VARCHAR(500);  \n" +
                "				DECLARE v_TransactionType VARCHAR(1000);  \n" +
                "				DECLARE v_RefTableName VARCHAR(255);  \n" +
                "				DECLARE v_ApproveFromPage VARCHAR(255);  \n" +
                "				DECLARE v_ApprovedBy VARCHAR(255);  \n" +
                "				DECLARE v_ConfirmationType INT;  \n" +
                "				DECLARE v_ApprovalReason TEXT;  \n" +
                "				DECLARE v_RefID INT;  \n" +
                "				DECLARE v_RoHSApprovalReason VARCHAR(1000);  \n" +
                "				DECLARE v_AllocationRemark VARCHAR(1000);  \n" +
                "				DECLARE KitAllocationDetail_Cursor CURSOR FOR  \n" +
                "				SELECT 	refSalesOrderDetID, assyID, uid, refBOMLineID, STATUS, refUIDId, partId, allocatedQty, allocatedUnit, allocatedUOM, umidUnits, kitAllocationId,  \n" +
                "						PIDCode, restricType, transactionType, refTableName, approveFromPage, approvedBy, approvalReason, confirmationType, roHSApprovalReason, allocationRemark  \n" +
                "				FROM 	tempKitAllocationDetail;  \n" +
                "				DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "				OPEN KitAllocationDetail_Cursor;  \n" +
                "				KitAllocationDetail_Loop:LOOP  \n" +
                "					FETCH 	KitAllocationDetail_Cursor INTO v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_Status, v_RefUIDId, v_PartId, v_AllocatedQty, v_AllocatedUnit, v_AllocatedUOM, v_UMIDUnits, v_KitAllocationId,  \n" +
                "										v_PIDCode, v_RestricType, v_TransactionType, v_RefTableName, v_ApproveFromPage, v_ApprovedBy, v_ApprovalReason, v_ConfirmationType, v_RoHSApprovalReason, v_AllocationRemark;  \n" +
                "				IF exit_loop THEN  \n" +
                "					LEAVE KitAllocationDetail_Loop;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET v_SameAllocated = FALSE;  \n" +
                "                SELECT round(fun_convertUOM(cst.uom, 19, cst.pkgUnit),5) INTO v_CurrentUMIDUnit FROM component_sid_stock cst WHERE cst.id = v_RefUIDId;  \n" +
                "                SELECT 	SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) INTO v_CurrentAllocatedUnit FROM kit_allocation ka WHERE ka.status = 'A' AND ka.refUIDId = v_RefUIDId;  \n" +
                "                SET v_CurrentAllocatedUnit = IFNULL(v_CurrentAllocatedUnit,0) + IFNULL(v_AllocatedUnit,0);  \n" +
                "			  IF(IFNULL(v_CurrentUMIDUnit,0) >= IFNULL(v_CurrentAllocatedUnit,0)) THEN  \n" +
                "					IF (CAST(IFNULL(v_KitAllocationId, '0') AS SIGNED) != 0) THEN  \n" +
                "						UPDATE 	kit_allocation  \n" +
                "								SET 	allocatedQty = IFNULL(allocatedQty,0) + IFNULL(v_AllocatedQty,0),  \n" +
                "									allocatedUnit = IFNULL(allocatedUnit,0) + IFNULL(v_AllocatedUnit,0)  \n" +
                "								WHERE	id = v_KitAllocationId;  \n" +
                "					ELSE  \n" +
                "						INSERT INTO kit_allocation (refSalesOrderDetID, assyID, uid, refBOMLineID, allocatedQty, transactionDate, STATUS, createdBy, refUIDId, partId, allocatedUnit, allocatedUOM, roHSApprovalReason, roHSApprovedBy, roHSApprovedOn, allocationRemark)  \n" +
                "								VALUES(v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_AllocatedQty, fun_DatetimetoUTCDateTime(),v_Status, pUserId, v_RefUIDId, v_PartId, v_AllocatedUnit, v_AllocatedUOM,  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE v_RoHSApprovalReason END),  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE pUserId END),  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE fun_DatetimetoUTCDateTime() END),  \n" +
                "								(CASE WHEN (v_AllocationRemark IS NULL OR v_AllocationRemark = '') THEN NULL ELSE v_AllocationRemark END));  \n" +
                "								SET v_RefID = LAST_INSERT_ID();  \n" +
                "						IF(IFNULL(v_RefID, \"\") != \"\") THEN  \n" +
                "							SET v_KitIds = (  \n" +
                "									SELECT 	CASE  \n" +
                "											WHEN ((SELECT IFNULL(v_KitIds, \"\")) = \"\") THEN  \n" +
                "												v_RefID  \n" +
                "											ELSE  \n" +
                "												(SELECT CONCAT(v_KitIds, \",\", v_RefID))  \n" +
                "										END  \n" +
                "									);  \n" +
                "						END IF;  \n" +
                "						IF (v_RestricType IS NOT NULL) THEN  \n" +
                "							INSERT INTO generic_authenticationmst (transactionType, approveFromPage, refID, approvedBy, approvalReason,confirmationType, refTableName, createdBy, updatedBy)  \n" +
                "							VALUES(v_TransactionType, v_ApproveFromPage, v_RefID, v_ApprovedBy, v_ApprovalReason,v_ConfirmationType,v_RefTableName, pUserId, pUserId);  \n" +
                "						END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				SET v_SameAllocated = TRUE;  \n" +
                "				LEAVE KitAllocationDetail_Loop;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			END LOOP KitAllocationDetail_Loop;  \n" +
                "			CLOSE KitAllocationDetail_Cursor;  \n" +
                "			END block1;  \n" +
                "  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				VALUES(IF(v_SameAllocated, 0, 1), NULL, NULL, IF(v_SameAllocated, 'SOME_UMID_ALLOCATED', 'SUCCESS'), NULL, NULL, NULL);  \n" +
                "		ELSE  \n" +
                "			SELECT 	GROUP_CONCAT('(', `Po Number`, ', ', `Sales Order`, ', ', `Assy ID`, ', ', `PO Qty`, ')') INTO v_KitName  \n" +
                "			FROM 	vu_salesorder_shipped_report  \n" +
                "			WHERE 	SalesOrderDetailId IN (  \n" +
                "					SELECT 	refSalesOrderDetID  \n" +
                "					FROM 	kit_allocation  \n" +
                "					WHERE 	FIND_IN_SET(uid, v_UMIDForKitName)  \n" +
                "				);  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				VALUES(0, v_ConcateUMID, v_KitName, 'SAME_UMID_ALLOCATED', v_KitIds, NULL, NULL);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	SELECT IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate FROM temp_Validation_Error;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5906,'2.00','V1','Bug 40866: [Main Branch] Shows Error and restrict user to Allocate new stock to Kit if UOM of Line Item is different from part details'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5906:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-02-2022 *********************************** */
                "DROP FUNCTION IF EXISTS fun_getPrimaryPhCountryCodeFromJsonList;  \n" +
                "CREATE FUNCTION `fun_getPrimaryPhCountryCodeFromJsonList`(  \n" +
                "	pJsonPhoneList TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_PhCountry VARCHAR(100);  \n" +
                "  \n" +
                "		SELECT jsonTblPhCountry.phoneCountryCode INTO v_PhCountry  \n" +
                "		FROM JSON_TABLE(pJsonPhextList, '$[*]' COLUMNS (phoneCountryCode VARCHAR(50)  PATH '$.phoneCountryCode', isprimary TINYINT  PATH '$.isPrimary')) jsonTblPhCountry  \n" +
                "		WHERE isPrimary = 1;  \n" +
                "  \n" +
                "  \n" +
                "	RETURN v_PhCountry;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-02-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5907,'2.00','V1','fun_getPrimaryPhCountryCodeFromJsonList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5907:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-02-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingSalesorderDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesorderDetails`(  \n" +
                "	IN psoposearch LONGTEXT,  \n" +
                "	IN salesorderID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "	-- Blanket Po option blanketPOOption 2 for Link BPO to Future PO(s)  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS   tempsalesorder AS  \n" +
                "		   SELECT som.id FROM salesordermst som  \n" +
                "		 WHERE som.id IN  \n" +
                "			  (SELECT sd.refSalesOrderID FROM salesorderdet sd JOIN COMPONENT c ON c.id=sd.partID AND c.isdeleted=0 WHERE  \n" +
                "			   EXISTS (SELECT 1 FROM salesordermst sm WHERE  sm.id=sd.refSalesOrderID AND (sm.isBlanketPO=0 OR (sm.isBlanketPO=1 AND sm.blanketPOOption!=2)) AND sm.isdeleted=0 )  \n" +
                "						AND sd.isdeleted=0  \n" +
                "						AND NOT EXISTS (SELECT 1 FROM customer_packingslip_det cpd  \n" +
                "								JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType='P'  \n" +
                "								WHERE cpd.refsalesorderDetid=sd.id AND cpd.remainingQty=0 AND cpd.isdeleted=0  \n" +
                "						   )) OR som.id=salesorderID;  \n" +
                "  \n" +
                " SET @pWhereClause=\"1=1\";  \n" +
                "  \n" +
                " SET @temp_Sproc_GetPendingSOPO=CONCAT(\"  \n" +
                "	select so.ID,  \n" +
                "		fun_GetFormattedMfgCode(m.mfgcode,m.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
                "		so.salesOrderNumber as `SO#`,so.poNumber as `PO#` , so.poRevision, so.customerID,so.billingAddressID,  \n" +
                "		so.termsID , so.shippingAddressID,  \n" +
                "		so.shippingMethodID,so.revision,so.shippingcomment,so.soDate, so.internalComment,  \n" +
                "		so.poDate,  \n" +
                "		(CASE WHEN so.freeOnBoardId IS NULL THEN m.freeOnBoardId ELSE so.freeOnBoardId END) freeOnBoardId ,  \n" +
                "		so.intermediateShipmentId,m.mfgcode,so.contactPersonID,  \n" +
                "		(CASE WHEN so.salesCommissionTo IS NULL THEN m.salesCommissionTo ELSE so.salesCommissionTo END) salesCommissionTo ,  \n" +
                "		concat(fun_GetFormattedMfgCode(m.mfgcode,m.mfgName,\",vMfgCodeFormat,\"), ' | ',so.salesOrderNumber,' | ',so.poNumber) pendingSOPO,  \n" +
                "		m.mfgName,  \n" +
                "		so.status,so.isLegacyPO,so.isRmaPO,so.isBlanketPO,so.blanketPOOption,  \n" +
                "        so.carrierID,so.carrierAccountNumber,  \n" +
                "        so.billingContactPersonID , so.shippingContactPersonID  ,so.intermediateContactPersonID  \n" +
                "	from salesordermst so  \n" +
                "		join mfgcodemst m on m.id=so.customerID  \n" +
                "	where so.id in (select id from tempsalesorder) and so.isDeleted=0\");  \n" +
                "  \n" +
                "IF(salesorderID IS NOT NULL)THEN  \n" +
                "	SET @temp_Sproc_GetPendingSOPO=CONCAT(@temp_Sproc_GetPendingSOPO,' and so.id=',salesorderID);  \n" +
                "END IF;  \n" +
                "IF(psoposearch IS NOT NULL)THEN  \n" +
                "	SET @pWhereClause=CONCAT(\"pendingSOPO like '%\",psoposearch,\"%'\");  \n" +
                "END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"select * from ( \", @temp_Sproc_GetPendingSOPO,\" ) c  where \", @pWhereClause);  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-02-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5908,'2.00','V1','Sproc_GetPendingSalesorderDetails-Bug 40843: [Main Branch] [Issue#:2]- Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5908:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_ValiationAndSaveStockAllocation`;  \n" +
                "CREATE PROCEDURE `Sproc_ValiationAndSaveStockAllocation`(  \n" +
                "		IN pStockDetail JSON,  \n" +
                "		IN pRefSalesOrderDetID INT,  \n" +
                "		IN pAssyID INT,  \n" +
                "		IN pPartIds LONGTEXT,  \n" +
                "		IN pUMIDs LONGTEXT,  \n" +
                "		IN pUserId VARCHAR(50),  \n" +
                "		IN pCheckForSameUmid BOOLEAN,  \n" +
                "		IN pToUOM INT,  \n" +
                "		IN pSubAssyID INT,  \n" +
                "       IN pUnitFilterDecimal INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountSameUMIDFind INT;  \n" +
                "	DECLARE v_ConcateUMID LONGTEXT;  \n" +
                "	DECLARE v_KitName LONGTEXT;  \n" +
                "	DECLARE v_UMIDForKitName LONGTEXT;  \n" +
                "	DECLARE v_KitIds LONGTEXT;  \n" +
                "	DECLARE v_CountError INT;  \n" +
                "    DECLARE v_CurrentUMIDUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_CurrentAllocatedUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_SameAllocated TINYINT DEFAULT FALSE;  \n" +
                "    DECLARE v_KitReturnStatus VARCHAR(100);  \n" +
                "	SET v_ConcateUMID = NULL;  \n" +
                "	/* create temp table for response */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_Validation_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		UMID LONGTEXT,  \n" +
                "		TransName LONGTEXT,  \n" +
                "		ErrorCode VARCHAR(150),  \n" +
                "		KitIds LONGTEXT,  \n" +
                "        Reason LONGTEXT,  \n" +
                "        StartDate VARCHAR(150)  \n" +
                "	);  \n" +
                "	# Error/Confirmation Codes:  \n" +
                "	# 1. MOUNTING_TYPE_MISMATCHED  \n" +
                "	# 2. FUNCTIONAL_TYPE_MISMATCHED  \n" +
                "	# 3. PO_HALT_ERROR  \n" +
                "	# 4. KIT_ALLOCATION_HALT_ERROR  \n" +
                "	# 5. SAME_UMID_ALLOCATED - Continue confimration in case of same umid is already allocated?  \n" +
                "	# 6. STOCK_NOT_ALLOCATED - UMID(s) could not be allocated, because other UMID(s) is already allocated in this kit and shared with other kit(s).  \n" +
                "	# 7. SOME_UMID_ALLOCATED - Already same UMID allocation is done by other user or by another transaction on same time.  \n" +
                "	# 8. FULLY_KIT_RETUNRED - Kit is Fully Returned then not allow to Allocate UMID(s).  \n" +
                "    # 9. RESERVED_RESTRICTED_UMID - UMID is restricted/reserved then not allow to Allocate UMID(s).  \n" +
                "	SELECT FUN_GETKITRETURNSTATUS(a.pendingReleaseCount, a.releasedNotReturnedCount, a.returnedCount, a.readyToreturnCount, a.shortageReturnCount) AS kitReturnStatus INTO v_KitReturnStatus  \n" +
                "	FROM (  \n" +
                "			SELECT  SUM(CASE WHEN kitReturnStatus = 'NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'RR' THEN 1 ELSE 0 END) readyToreturnCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "			FROM 	vu_release_plan_release_return_status_det  \n" +
                "			WHERE  salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pAssyID  \n" +
                "			AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END)  \n" +
                "		) AS a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Hold;  \n" +
                "	CREATE TEMPORARY TABLE temp_Validation_Hold  \n" +
                "	SELECT  hut.id,  \n" +
                "		hut.refTransId,  \n" +
                "        hut.refType,  \n" +
                "        hut.reason,  \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate) startDate,  \n" +
                "		fun_getEmployeeInitialNameByEmpID(hut.holdEmployeeId) empInitialName  \n" +
                "		FROM holdunholdtrans hut  \n" +
                "		WHERE hut.isDeleted = 0  \n" +
                "		AND hut.id IN (SELECT max(id) from holdunholdtrans ht where ht.isDeleted = 0 AND ht.refType in ('PO','KA') AND ht.refTransId = pRefSalesOrderDetID AND hut.status='H' GROUP BY ht.refType,ht.refTransId);  \n" +
                "	IF(v_KitReturnStatus = 'Fully Returned') THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'FULLY_KIT_RETUNRED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component c WHERE c.isDeleted = 0 AND FIND_IN_SET(id, pPartIds) AND c.mountingTypeID = -1) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'MOUNTING_TYPE_MISMATCHED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component c WHERE c.isDeleted = 0 AND FIND_IN_SET(id, pPartIds) AND c.partType = -1) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'FUNCTIONAL_TYPE_MISMATCHED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM temp_Validation_Hold) > 0) THEN  \n" +
                "		IF((SELECT COUNT(1) FROM temp_Validation_Hold) > 1) THEN  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				SELECT 0, NULL, th.empInitialName,'PO_HALT_ERROR', NULL, th.reason, th.startDate FROM temp_Validation_Hold th WHERE th.refType = 'PO';  \n" +
                "		ELSE  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				SELECT 0, NULL, th.empInitialName, IF(th.refType = 'PO','PO_HALT_ERROR','KIT_ALLOCATION_HALT_ERROR'), NULL, th.reason, th.startDate FROM temp_Validation_Hold th;  \n" +
                "        END IF;  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component_sid_stock cst WHERE FIND_IN_SET(cst.id, pUMIDs) AND (cst.isUMIDRestrict = TRUE OR cst.isReservedStock = TRUE)) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'RESERVED_RESTRICTED_UMID', NULL, NULL, NULL);  \n" +
                "	END IF;  \n" +
                "	IF((SELECT COUNT(1) FROM temp_Validation_Error tmp WHERE tmp.IsSuccess = 0) = 0) THEN  \n" +
                "		/* create temp table for kit allocation details */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempKitAllocationDetail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempKitAllocationDetail AS  \n" +
                "		SELECT 	*  FROM  JSON_TABLE(  \n" +
                "			pStockDetail,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				refSalesOrderDetID INT PATH \"$.refSalesOrderDetID\",  \n" +
                "				assyID INT PATH \"$.assyID\",  \n" +
                "				uid VARCHAR(50) PATH \"$.uid\",  \n" +
                "				refBOMLineID INT PATH \"$.refBOMLineID\",  \n" +
                "				STATUS VARCHAR(50) PATH \"$.status\",  \n" +
                "				refUIDId INT PATH \"$.refUIDId\",  \n" +
                "				partId INT PATH \"$.partId\",  \n" +
                "				allocatedQty DECIMAL(18,8) PATH \"$.allocatedQty\",  \n" +
                "				allocatedUnit DECIMAL(18,8) PATH \"$.allocatedUnit\",  \n" +
                "				allocatedUOM INT PATH \"$.allocatedUOM\",  \n" +
                "				umidUnits INT PATH \"$.umidUnits\",  \n" +
                "				kitAllocationId INT PATH \"$.kitAllocationId\",  \n" +
                "				PIDCode VARCHAR(100) PATH \"$.PIDCode\",  \n" +
                "				restricType VARCHAR(500) PATH \"$.restricType\",  \n" +
                "				transactionType VARCHAR(1000) PATH \"$.transactionType\",  \n" +
                "				refTableName VARCHAR(255) PATH \"$.refTableName\",  \n" +
                "				approveFromPage VARCHAR(255) PATH \"$.approveFromPage\",  \n" +
                "				approvedBy VARCHAR(255) PATH \"$.approvedBy\",  \n" +
                "				approvalReason TEXT PATH \"$.approvalReason\",  \n" +
                "				confirmationType INT PATH \"$.confirmationType\",  \n" +
                "				roHSApprovalReason VARCHAR(1000) PATH \"$.roHSApprovalReason\",  \n" +
                "				allocationRemark VARCHAR(1000) PATH \"$.allocationRemark\"  \n" +
                "				)  \n" +
                "			) AS jt;  \n" +
                "		IF (pCheckForSameUmid = TRUE) THEN  \n" +
                "			SELECT 	COUNT(1), GROUP_CONCAT(uid) INTO v_CountSameUMIDFind, v_ConcateUMID  \n" +
                "			FROM 	kit_allocation  \n" +
                "			WHERE 	refSalesOrderDetID = pRefSalesOrderDetID AND STATUS = 'A' AND assyID = IFNULL(pSubAssyID, pAssyID)  AND partId IN (pPartIds) AND refUIDId IN (pUMIDs);  \n" +
                "		ELSE  \n" +
                "			SET v_CountSameUMIDFind = 0;  \n" +
                "		END IF;  \n" +
                "		IF (v_CountSameUMIDFind = 0) THEN  \n" +
                "			block1: BEGIN  \n" +
                "				DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "				DECLARE v_RefSalesOrderDetID INT;  \n" +
                "				DECLARE v_AssyID INT;  \n" +
                "				DECLARE v_Umid VARCHAR(50);  \n" +
                "				DECLARE v_RefBOMLineID INT;  \n" +
                "				DECLARE v_Status VARCHAR(50);  \n" +
                "				DECLARE v_RefUIDId INT;  \n" +
                "				DECLARE v_PartId INT;  \n" +
                "				DECLARE v_AllocatedQty DECIMAL(18,8);  \n" +
                "				DECLARE v_AllocatedUnit DECIMAL(18,8);  \n" +
                "				DECLARE v_AllocatedUOM INT;  \n" +
                "				DECLARE v_UMIDUnits DECIMAL(18,8);  \n" +
                "				DECLARE v_countKitExist INT;  \n" +
                "				DECLARE v_CountSameUMID INT;  \n" +
                "				DECLARE	v_SameUMID VARCHAR(50);  \n" +
                "				DECLARE v_oldUMIDAllocatedUnit DECIMAL(18,8);  \n" +
                "				DECLARE v_oldUMID VARCHAR(50);  \n" +
                "				DECLARE v_CountSameAllocatedUnit INT;  \n" +
                "				DECLARE v_KitAllocationId INT;  \n" +
                "				DECLARE v_StringSameUMID VARCHAR(10000);  \n" +
                "				DECLARE v_CountUMIDForSame INT;  \n" +
                "				DECLARE v_StringUMIDForKit VARCHAR(10000);  \n" +
                "				DECLARE v_CountSameSalesOrder INT;  \n" +
                "				DECLARE v_PIDCode VARCHAR(100);  \n" +
                "				DECLARE v_RestricType VARCHAR(500);  \n" +
                "				DECLARE v_TransactionType VARCHAR(1000);  \n" +
                "				DECLARE v_RefTableName VARCHAR(255);  \n" +
                "				DECLARE v_ApproveFromPage VARCHAR(255);  \n" +
                "				DECLARE v_ApprovedBy VARCHAR(255);  \n" +
                "				DECLARE v_ConfirmationType INT;  \n" +
                "				DECLARE v_ApprovalReason TEXT;  \n" +
                "				DECLARE v_RefID INT;  \n" +
                "				DECLARE v_RoHSApprovalReason VARCHAR(1000);  \n" +
                "				DECLARE v_AllocationRemark VARCHAR(1000);  \n" +
                "				DECLARE KitAllocationDetail_Cursor CURSOR FOR  \n" +
                "				SELECT 	refSalesOrderDetID, assyID, uid, refBOMLineID, STATUS, refUIDId, partId, allocatedQty, allocatedUnit, allocatedUOM, umidUnits, kitAllocationId,  \n" +
                "						PIDCode, restricType, transactionType, refTableName, approveFromPage, approvedBy, approvalReason, confirmationType, roHSApprovalReason, allocationRemark  \n" +
                "				FROM 	tempKitAllocationDetail;  \n" +
                "				DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "				OPEN KitAllocationDetail_Cursor;  \n" +
                "				KitAllocationDetail_Loop:LOOP  \n" +
                "					FETCH 	KitAllocationDetail_Cursor INTO v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_Status, v_RefUIDId, v_PartId, v_AllocatedQty, v_AllocatedUnit, v_AllocatedUOM, v_UMIDUnits, v_KitAllocationId,  \n" +
                "										v_PIDCode, v_RestricType, v_TransactionType, v_RefTableName, v_ApproveFromPage, v_ApprovedBy, v_ApprovalReason, v_ConfirmationType, v_RoHSApprovalReason, v_AllocationRemark;  \n" +
                "				IF exit_loop THEN  \n" +
                "					LEAVE KitAllocationDetail_Loop;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET v_SameAllocated = FALSE;  \n" +
                "                SELECT round(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit),pUnitFilterDecimal) INTO v_CurrentUMIDUnit FROM component_sid_stock cst WHERE cst.id = v_RefUIDId;  \n" +
                "                SELECT round(SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))),pUnitFilterDecimal) INTO v_CurrentAllocatedUnit FROM kit_allocation ka WHERE ka.status = 'A' AND ka.refUIDId = v_RefUIDId;  \n" +
                "                SET v_CurrentAllocatedUnit = IFNULL(v_CurrentAllocatedUnit,0) + IFNULL(v_AllocatedUnit,0);  \n" +
                "			  IF(IFNULL(v_CurrentUMIDUnit,0) >= IFNULL(v_CurrentAllocatedUnit,0)) THEN  \n" +
                "					IF (CAST(IFNULL(v_KitAllocationId, '0') AS SIGNED) != 0) THEN  \n" +
                "						UPDATE 	kit_allocation  \n" +
                "								SET 	allocatedQty = IFNULL(allocatedQty,0) + IFNULL(v_AllocatedQty,0),  \n" +
                "									allocatedUnit = IFNULL(allocatedUnit,0) + IFNULL(v_AllocatedUnit,0)  \n" +
                "								WHERE	id = v_KitAllocationId;  \n" +
                "					ELSE  \n" +
                "						INSERT INTO kit_allocation (refSalesOrderDetID, assyID, uid, refBOMLineID, allocatedQty, transactionDate, STATUS, createdBy, refUIDId, partId, allocatedUnit, allocatedUOM, roHSApprovalReason, roHSApprovedBy, roHSApprovedOn, allocationRemark)  \n" +
                "								VALUES(v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_AllocatedQty, fun_DatetimetoUTCDateTime(),v_Status, pUserId, v_RefUIDId, v_PartId, v_AllocatedUnit, v_AllocatedUOM,  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE v_RoHSApprovalReason END),  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE pUserId END),  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE fun_DatetimetoUTCDateTime() END),  \n" +
                "								(CASE WHEN (v_AllocationRemark IS NULL OR v_AllocationRemark = '') THEN NULL ELSE v_AllocationRemark END));  \n" +
                "								SET v_RefID = LAST_INSERT_ID();  \n" +
                "						IF(IFNULL(v_RefID, \"\") != \"\") THEN  \n" +
                "							SET v_KitIds = (  \n" +
                "									SELECT 	CASE  \n" +
                "											WHEN ((SELECT IFNULL(v_KitIds, \"\")) = \"\") THEN  \n" +
                "												v_RefID  \n" +
                "											ELSE  \n" +
                "												(SELECT CONCAT(v_KitIds, \",\", v_RefID))  \n" +
                "										END  \n" +
                "									);  \n" +
                "						END IF;  \n" +
                "						IF (v_RestricType IS NOT NULL) THEN  \n" +
                "							INSERT INTO generic_authenticationmst (transactionType, approveFromPage, refID, approvedBy, approvalReason,confirmationType, refTableName, createdBy, updatedBy)  \n" +
                "							VALUES(v_TransactionType, v_ApproveFromPage, v_RefID, v_ApprovedBy, v_ApprovalReason,v_ConfirmationType,v_RefTableName, pUserId, pUserId);  \n" +
                "						END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				SET v_SameAllocated = TRUE;  \n" +
                "				LEAVE KitAllocationDetail_Loop;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			END LOOP KitAllocationDetail_Loop;  \n" +
                "			CLOSE KitAllocationDetail_Cursor;  \n" +
                "			END block1;  \n" +
                "  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				VALUES(IF(v_SameAllocated, 0, 1), NULL, NULL, IF(v_SameAllocated, 'SOME_UMID_ALLOCATED', 'SUCCESS'), NULL, NULL, NULL);  \n" +
                "		ELSE  \n" +
                "			SELECT 	GROUP_CONCAT('(', `Po Number`, ', ', `Sales Order`, ', ', `Assy ID`, ', ', `PO Qty`, ')') INTO v_KitName  \n" +
                "			FROM 	vu_salesorder_shipped_report  \n" +
                "			WHERE 	SalesOrderDetailId IN (  \n" +
                "					SELECT 	refSalesOrderDetID  \n" +
                "					FROM 	kit_allocation  \n" +
                "					WHERE 	FIND_IN_SET(uid, v_UMIDForKitName)  \n" +
                "				);  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				VALUES(0, v_ConcateUMID, v_KitName, 'SAME_UMID_ALLOCATED', v_KitIds, NULL, NULL);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	SELECT IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate FROM temp_Validation_Error;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5909,'2.00','V1','Bug 40866: [Main Branch] Shows Error and restrict user to Allocate new stock to Kit if UOM of Line Item is different from part details'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5909:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitAllocationForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitAllocationForElastic`(  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE pWhereClause VARCHAR(1000);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    SET pWhereClause = '1 = 1';  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount\");  \n" +
                "		SET pWhereClause = CONCAT('sd.isDeleted = 0');  \n" +
                "	ELSE  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			  k.id  \n" +
                "				,k.refSalesOrderDetID  \n" +
                "                ,sd.refSalesOrderID  \n" +
                "				,s.poNumber  \n" +
                "				,s.salesOrderNumber  \n" +
                "				,k.assyId  \n" +
                "                ,assy.mfgcodeID  \n" +
                "                ,assy_mcm.mfgType assyMfgType  \n" +
                "				,assy.PIDCode AssyPIdCode  \n" +
                "				,assy.mfgPN assyMfgPN  \n" +
                "				,k.partId  \n" +
                "                ,c_mcm.mfgType partMfgType  \n" +
                "				,c.PIDCode partCode  \n" +
                "				,assy.mfgPN partMfgPn  \n" +
                "				,c.assyCode part  \n" +
                "				,k.UID  \n" +
                "				,k.refUIDId  \n" +
                "                ,k.allocatedQty  \n" +
                "                ,k.consumeQty  \n" +
                "                ,k.scrapExpiredQty  \n" +
                "                ,CASE WHEN k.STATUS = 'A' THEN 'Allocated'  \n" +
                "					WHEN k.STATUS = 'R' THEN 'Return'  \n" +
                "					WHEN k.STATUS = 'D' THEN 'Deallocated'  \n" +
                "					ELSE 'Consumed' END KitStatus  \n" +
                "                ,k.returnQty  \n" +
                "                ,sd.isDeleted,  \n" +
                "                sd.kitNumber\");  \n" +
                "			IF((SELECT COUNT(1) from tempKitAllocation) > 0) THEN  \n" +
                "				SET pWhereClause = CONCAT(\"k.id IN (select pId from tempKitAllocation)\");  \n" +
                "			END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(@temp_Sproc_GetKitAllocationForElastic, \"  \n" +
                "			from kit_allocation k  \n" +
                "			inner join salesorderdet sd on k.refSalesOrderDetID = sd.id and sd.partCategory=3  \n" +
                "			left JOIN salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "			left join component assy on k.assyId = assy.Id  \n" +
                "			left join component c on k.partId = c.Id  \n" +
                "            left join mfgcodemst assy_mcm on assy.mfgcodeId = assy_mcm.id  \n" +
                "            left join mfgcodemst c_mcm on c.mfgcodeId = c_mcm.id  \n" +
                "            where  \n" +
                "	\");  \n" +
                "  \n" +
                "    IF (pFromdate IS NOT NULL OR pTodate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause,\"  AND (((DATE(fun_CovnertDateTimeByTimezoneValue(k.createdAt,'\",v_TimeZone,\"'))  \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(k.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"'))  \n" +
                "        OR ((DATE(fun_CovnertDateTimeByTimezoneValue(sd.createdAt,'\",v_TimeZone,\"'))  \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(sd.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"')));\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@temp_Sproc_GetKitAllocationForElastic, pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempKitAllocation;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5910,'2.00','V1','Bug 39950: [Main Branch] Gives Error log while Allocating too many UMIDs together from Elastic Search for Kit allocation - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5910:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveReleaseLineFromPO`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveReleaseLineFromPO`(  \n" +
                "	IN pRefPOId INT,  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pMFGPN VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vMfgCodeFormat INT;  \n" +
                "SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "SELECT 	polrd.id,						polrd.qty poReleaseLineQty,			polrd.releaseNumber,  \n" +
                "		polrd.shippingDate,				polrd.promisedShipDate,  \n" +
                "		polrd.poLineWorkingStatus,		pod.id refPurchaseOrderDetID,		pod.lineID,  \n" +
                "		pod.qty poLineQty,  \n" +
                "        (case when polrd.id is null then c.packagingID else pod.packagingID end) packagingID,  \n" +
                "        pod.internalRef,                cpm.name packagingName,  \n" +
                "        mfgcod.mfgCode mfgCode,         c.mfgcodeID,                        c.mfgPN,    c.PIDCode,  \n" +
                "        c.RoHSStatusID,                 fun_GetFormattedMfgCode(mfgcod.mfgCode, mfgcod.mfgName, vMfgCodeFormat) mfgName,  \n" +
                "        fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,      					fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "		c.id partId,				polrd.receivedQty,    					pod.partDescription,  \n" +
                "         pod.lineComment,               pod.internalLineComment,            cs.mfgcodeID supplierId,  \n" +
                "        supCode.mfgCode supplierCode,   fun_GetFormattedMfgCode(supCode.mfgCode, supCode.mfgName, vMfgCodeFormat) supplierName,  \n" +
                "        cs.mfgpn supplierPN,            cs.id supplierPNId,                 c.packageQty spq,  \n" +
                "        c.unit,							c.uom,								c.uomText,  \n" +
                "		c.partType,  \n" +
                "        (case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSID,  \n" +
                "        fun_getRoHSNameByID(case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSName,  \n" +
                "        c.isCustom,		 c.custAssyPN,				cs.isCustom AS isCustomSupplier,	c.umidSPQ, pom.poWorkingStatus,  \n" +
                "        SUM(polrd.receivedQty) OVER(PARTITION BY pod.lineID) totalReceivedQty, pod.isLineCustConsigned, pod.lineCustomerID,  \n" +
                "        pod.isNonUMIDStock,  \n" +
                "        CASE WHEN pod.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "        CASE WHEN pod.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "        fun_GetFormattedMfgCode(pm.mfgCode, pm.mfgName, vMfgCodeFormat) customerName, fun_getRoHSIconByID(cs.RoHSStatusID) supplierRohsIcon,  \n" +
                "							fun_getRoHSNameByID(cs.RoHSStatusID) supplierRohsName  \n" +
                "    FROM purchase_order_det AS pod  \n" +
                "    INNER JOIN purchase_order_mst AS pom ON pod.refPurchaseOrderID = pom.id AND pom.isDeleted=0  \n" +
                "	INNER JOIN component AS c ON  c.id = pod.mfgPartID AND c.id = IFNULL(pPartID, c.id) AND c.mfgpn = IFNULL(pMFGPN, c.mfgPN) AND c.isDeleted = 0  \n" +
                "	INNER JOIN mfgcodemst mfgcod ON mfgcod.id = c.mfgcodeID AND mfgcod.isDeleted = 0  \n" +
                "	LEFT JOIN purchase_order_line_release_det AS polrd ON  pod.id = polrd.refPurchaseOrderDetID AND polrd.isDeleted = 0  \n" +
                "	LEFT JOIN component_packagingmst AS cpm ON pod.packagingID = cpm.id AND cpm.isDeleted = 0  \n" +
                "	LEFT JOIN component cs ON cs.id = pod.supplierPartID AND cs.isDeleted = 0  \n" +
                "    LEFT JOIN mfgcodemst supCode ON supCode.id = cs.mfgcodeID OR supCode.id = cs.mfgcodeID AND supCode.isDeleted = 0  \n" +
                "    LEFT JOIN mfgcodemst pm ON pm.id=pod.lineCustomerID  \n" +
                "	WHERE pod.refPurchaseOrderID = pRefPOid  \n" +
                "    AND pod.isDeleted = 0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearchPurchaseOrder`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearchPurchaseOrder`(  \n" +
                "	IN pGoodPart VARCHAR(100),  \n" +
                "	IN pSearch VARCHAR(500),  \n" +
                "	IN pId INT,  \n" +
                "	IN pMfgType VARCHAR(50),  \n" +
                "	IN pRoHSStatusID VARCHAR(100),  \n" +
                "	IN pMfgCodeId INT,  \n" +
                "	IN pMountingType VARCHAR(50),  \n" +
                "	IN pMountingTypeId INT,  \n" +
                "	IN pCategoryID INT,  \n" +
                "	IN pIsContainCPN TINYINT,  \n" +
                "	IN pRohsMainCategoryID INT,  \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
                "	IN prefSupplierMfgpnComponentID INT ,  \n" +
                "	IN ppackagingID INT,  \n" +
                "	IN pstrictCustomPart TINYINT,  \n" +
                "	IN psupplierID INT,  \n" +
                "    IN pPartType int,  \n" +
                "    IN pExcludeStatus INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vRohsMainCategoryID INT;  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "    DECLARE v_supplierMFRMappingType varchar(10);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	SET @SQLStatement1=CONCAT(\" SELECT *  \n" +
                "		FROM  \n" +
                "		(  \n" +
                "			SELECT 	c.id,                                   CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,      c.mfgPN orgMfgPN,  \n" +
                "					c.PIDCode,                              c.RoHSStatusID,                                 c.mfgcodeID,  \n" +
                "					m.mfgCode,                              m.mfgName,                                      fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') mfgCodeName,  \n" +
                "					c.imageURL,                             c.documentPath,                                 c.mfgPNDescription,  \n" +
                "					c.functionalCategoryID,                 c.uom,                                          c.unit,  \n" +
                "					c.restrictUsePermanently,               c.restrictUSEwithpermission,                    c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,   u.unitName AS  unitName,                        r.rohsIcon,  \n" +
                "					r.name AS rohsName,                     c.isCPN,                                        c.isCustom,  \n" +
                "					c.minimum,                              c.mult,                                         c.packageQty,  \n" +
                "					c.partType,                             c.pcbPerArray,                                  c.refSupplierMfgpnComponentID,  \n" +
                "					c.packagingID,                          c.internalReference  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
                "			WHERE 	c.isdeleted = 0  \");  \n" +
                "	IF  pId IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND c.id = \" ,pId );  \n" +
                "    END IF;  \n" +
                "	IF  pMfgType IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND m.mfgType = '\",pMfgType,\"' \");  \n" +
                "    END IF;  \n" +
                "    IF  pRoHSStatusID IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.RoHSStatusID = \", pRoHSStatusID );  \n" +
                "	END IF;  \n" +
                "	IF  pMfgCodeId IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mfgcodeID = \",pMfgCodeId );  \n" +
                "	END IF;  \n" +
                "	IF  pMountingType IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND mt.name = '\",pMountingType,\"' \");  \n" +
                "	END IF;  \n" +
                "	IF  pMountingTypeId IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mountingTypeID = \",pMountingTypeId );  \n" +
                "	END IF;  \n" +
                "	IF  pCategoryID IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.category = \", pCategoryID  );  \n" +
                "	END IF;  \n" +
                "	IF  IFNULL(pIsContainCPN,FALSE) = FALSE  THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.isCPN = FALSE \");  \n" +
                "	END IF;  \n" +
                "	IF  pRohsMainCategoryID IS NOT NULL THEN  \n" +
                "		SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
                "		/*===>this logic is added to compare invert rohs category*/  \n" +
                "		IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
                "			IF pRohsMainCategoryID = -1 THEN  \n" +
                "				SET vRohsMainCategoryID = -2;  \n" +
                "			ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
                "				SET vRohsMainCategoryID = -1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "        /*<===this logic is added to compare invert rohs category*/  \n" +
                "   		IF vRohsMainCategoryID IS NOT NULL THEN  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND  r.refMainCategoryID  = \",vRohsMainCategoryID );  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "	IF  prefSupplierMfgpnComponentID IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.refSupplierMfgpnComponentID <=> IFNULL(\",prefSupplierMfgpnComponentID,\", c.refSupplierMfgpnComponentID)  \");  \n" +
                "	END IF;  \n" +
                "	IF  pPartType IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.partType = '\",pPartType,\"' \");  \n" +
                "	END IF;  \n" +
                "	IF  ppackagingID IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.packagingID <=> IFNULL(\",ppackagingID,\",c.packagingID) \");  \n" +
                "	END IF;  \n" +
                "	IF  pstrictCustomPart IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.category != 3  AND c.iscustom = 1 \");  \n" +
                "	END IF;  \n" +
                "	IF  psupplierID IS NOT NULL AND pstrictCustomPart  = 1 THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\"  AND 	( EXISTS (SELECT 1 FROM (/*get mfg which set as company*/  \n" +
                "																		SELECT mc.id  \n" +
                "																				FROM mfgcodemst mc  \n" +
                "																				WHERE mc.iscompany = 1 AND mc.isdeleted = 0  \n" +
                "																		UNION ALL /* get All Customer code */  \n" +
                "																		SELECT '\",psupplierID,\"' AS id FROM DUAL \");  \n" +
                "		IF(SELECT COUNT(1) FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.isCustMapping=0 AND smm.supplierID=psupplierID)>0 THEN  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\"  UNION ALL  SELECT smm.refMfgCodeMstID  AS id  \n" +
                "				FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.isCustMapping=0 AND smm.supplierID='\",psupplierID,\"' )a   WHERE a.id  = c.mfgcodeid))  \");  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\"  UNION ALL  SELECT mc.id FROM mfgcodemst mc WHERE mc.mfgType='MFG' AND mc.isCustOrDisty=1 AND mc.isdeleted=0  \n" +
                "			UNION ALL  \n" +
                "			SELECT c.mfgcodeid AS id FROM component c WHERE (c.parttype=4 OR c.iscpn=1) AND c.isdeleted=0 ) a   WHERE a.id  = c.mfgcodeid))   \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF psupplierID IS NOT NULL AND pstrictCustomPart  IS NULL THEN  \n" +
                "		SELECT supplierMFRMappingType INTO v_supplierMFRMappingType FROM mfgcodemst WHERE id=psupplierID AND mfgType='dist' AND isDeleted=0;  \n" +
                "        IF(v_supplierMFRMappingType = 'B') THEN  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1, \" AND c.isCPN=0 AND c.iscustom = 0 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF  pExcludeStatus IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.partStatus != '\",pExcludeStatus,\"' \");  \n" +
                "	END IF;  \n" +
                "    IF pGoodPart IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.isGoodPart = '\",pGoodPart,\"' \");  \n" +
                "    END IF;  \n" +
                "	/*Close Inner query section */  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ) AS a  WHERE 1= 1 \");  \n" +
                "	IF  pSearch IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND  EXISTS ( SELECT 1 FROM ( SELECT a.id, a.mfgpn name, a.pidcode FROM DUAL  \n" +
                "																					UNION ALL  \n" +
                "																					SELECT opn.refcomponentid ,opn.name, null pidcode FROM component_otherpn opn WHERE opn.refcomponentid = a.id  \n" +
                "														 						) x WHERE x.id  = a.id AND ( x.name  LIKE CONCAT('%\", pSearch , \"%') OR x.pidcode  LIKE CONCAT('%\", pSearch , \"%')) ) \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ORDER BY mfgPN For update\");  \n" +
                "	-- select @SQLStatement1;  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5911,'2.00','V1',' User Story 41038: Improve performance for part search drop down on Purchase order - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5911:
                allDbChangesArray.push(
                /* **************************** New Script -> 25-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetContactPersonForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetContactPersonForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    IN pFromdate DATE,  \n" +
                "    IN pTodate DATE,  \n" +
                "    IN pRequiredCount TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE vEmployeeNameFormat INT;  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			COUNT(1)  \n" +
                "		FROM `contactperson`  \n" +
                "		WHERE `isDeleted` = 0 AND `personId` = IFNULL(pId,`personId`);  \n" +
                "	ELSE  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, ecp.employeeId AS refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName,vContPersonNameFormat) fullName, 'Personnel' AS refEntityType,  \n" +
                "				NULL AS refName, fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName, vEmployeeNameFormat) personnels,  \n" +
                "				fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "				(SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) phoneNumberList,  \n" +
                "				NULL AS isDefault,  \n" +
                "				NULL AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) STATUS,  \n" +
                "				cp.isDeleted,  \n" +
                "				cp.createdAt,  \n" +
                "				cp.updatedAt  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "			LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId AND ecp.isDeleted = 0 AND ecp.releasedAt IS NULL  \n" +
                "			LEFT JOIN employees emp ON emp.id = ecp.employeeId AND emp.isDeleted = 0  \n" +
                "				WHERE `personId` = IFNULL(pId,`personId`) AND cp.refTableName ='employees'  \n" +
                "				AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "						OR (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "					ELSE 1 = 1 END)  \n" +
                "		UNION ALL  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, cp.refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName,vContPersonNameFormat) fullName,  \n" +
                "				(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' AND mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "                fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,vMfgCodeFormat) AS refName,  NULL AS personnels,  \n" +
                "                fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "                (SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) phoneNumberList,  \n" +
                "				(CASE WHEN (cp.isDefault = 0) THEN 'No'  \n" +
                "					WHEN (cp.isDefault = 1) THEN 'Yes' ELSE '' END) AS isDefault,  \n" +
                "				(CASE WHEN (cp.isPrimary = 0) THEN 'No'  \n" +
                "					WHEN (cp.isPrimary = 1) THEN 'Yes' ELSE '' END) AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) STATUS,  \n" +
                "				cp.isDeleted,  \n" +
                "				cp.createdAt,  \n" +
                "				cp.updatedAt  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID AND mfg.isDeleted = 0  \n" +
                "			WHERE `personId` = IFNULL(pId,`personId`)  \n" +
                "				AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "						OR (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetMfgCodeDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetMfgCodeDetailForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    IN pIsCustOrDisty BIT,  \n" +
                "    IN pmfgType NVARCHAR(10),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "     IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE IFNULL(isDeleted,0) = 0 AND  \n" +
                "			isCustOrDisty = IFNULL(pIsCustOrDisty,isCustOrDisty)  \n" +
                "			AND mfgType = IFNULL(pmfgType, mfgType);  \n" +
                "	ELSE  \n" +
                "		SELECT  id,mfgCode,mfgName,legalName,primaryContactName,contact,faxNumber,isActive,mfgType,isCustOrDisty  ,  \n" +
                "            fun_getUserNameByEmployeID(salesCommissionTo) salesCommissionTo,  \n" +
                "            fun_getFOBById(freeOnBoardId) freeOnBoardMst ,  \n" +
                "			(SELECT gencCategoryName FROM genericcategory WHERE gencCategoryID = paymentTermsID) Terms,  \n" +
                "			isDeleted,  \n" +
                "            createdAt,  \n" +
                "            updatedAt  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE  id = IFNULL(pId,id) AND  \n" +
                "			isCustOrDisty = IFNULL(pIsCustOrDisty,isCustOrDisty)  \n" +
                "			AND mfgType = IFNULL(pmfgType, mfgType) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "    END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetEquipmentWorkStationDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetEquipmentWorkStationDetailForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		select  \n" +
                "			count(1) totalCount  \n" +
                "		from equipment eqp  \n" +
                "		LEFT JOIN department dept ON dept.deptID = eqp.departmentID  \n" +
                "			where IFNULL(eqp.isDeleted,0) = 0;  \n" +
                "    ELSE  \n" +
                "		select eqp.eqpID  \n" +
                "			,eqp.equipmentAs as Category  \n" +
                "			,eqp.assetName as Name  \n" +
                "			,eqp.eqpMake as Make  \n" +
                "			,eqp.eqpModel as Model  \n" +
                "			,eqp.eqpYear as Year  \n" +
                "			,eqp.assetNumber as WorkStationAsset  \n" +
                "			,eqp.departmentID  \n" +
                "			,dept.deptName as DepartmentName  \n" +
                "			,(SELECT gencCategoryName FROM genericcategory  \n" +
                "				WHERE deletedAt IS NULL AND gencCategoryID = eqp.locationTypeID) AS locationName  \n" +
                "			,locationTypeID  \n" +
                "			,(SELECT gencCategoryName FROM genericcategory  \n" +
                "				WHERE deletedAt IS NULL AND gencCategoryID = eqp.eqpTypeID) AS TypeName  \n" +
                "			,eqpTypeID  \n" +
                "			,eqp.eqpDescription  \n" +
                "            ,eqp.isDeleted  \n" +
                "            ,eqp.createdAt  \n" +
                "            ,eqp.updatedAt  \n" +
                "		from equipment eqp  \n" +
                "		LEFT JOIN department dept ON dept.deptID = eqp.departmentID  \n" +
                "		where eqp.eqpID = IFNULL(pId,eqp.eqpID) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(eqp.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(eqp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetStandardsForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStandardsForElastic`(  \n" +
                "	IN pId INT(11)  ,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount  \n" +
                "		FROM certificate_standards AS cs  \n" +
                "        LEFT JOIN genericcategory AS gcst ON cs.standardTypeID = gcst.gencCategoryID AND gcst.deletedAt IS NULL  \n" +
                "        WHERE IFNULL(cs.isDeleted , 0) = 0;  \n" +
                "	ELSE  \n" +
                "	  SELECT cs.certificateStandardID  \n" +
                "        ,cs.fullName  \n" +
                "                ,cs.shortName  \n" +
                "        ,gcst.gencCategoryID AS standardTypeId  \n" +
                "                ,gcst.gencCategoryName AS standardType  \n" +
                "                ,cs.priority  \n" +
                "        ,cs.description  \n" +
                "        ,cs.standardInfo  \n" +
                "        ,cs.displayOrder  \n" +
                "		,(CASE WHEN (cs.isCertified = 0) THEN 'Compliant'  \n" +
                "				WHEN (cs.isCertified = 1) THEN 'Certified' ELSE '' END) AS Certificate  \n" +
                "		,cs.cerificateIssueDate  \n" +
                "		,cs.certificateDate  \n" +
                "		,(CASE WHEN (cs.isActive = 0) THEN 'Disable'  \n" +
                "				WHEN (cs.isActive = 1) THEN 'Enable' ELSE '' END) AS Status  \n" +
                "		,(CASE WHEN (cs.isExportControlled = 0) THEN 'No'  \n" +
                "				WHEN (cs.isExportControlled = 1) THEN 'Yes' ELSE '' END) AS ExportControlled  \n" +
                "		,(CASE WHEN (cs.isRestrictDataAccess = 0) THEN 'No'  \n" +
                "				WHEN (cs.isRestrictDataAccess = 1) THEN 'Yes' ELSE '' END) AS RestrictedDataAccess  \n" +
                "		,cs.isDeleted  \n" +
                "		,cs.createdAt  \n" +
                "        ,cs.updatedAt  \n" +
                "          FROM certificate_standards AS cs  \n" +
                "        LEFT JOIN genericcategory AS gcst ON cs.standardTypeID = gcst.gencCategoryID AND gcst.deletedAt IS NULL  \n" +
                "        WHERE  cs.certificateStandardID = IFNULL(pId, cs.certificateStandardID )  AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "			((DATE(fun_CovnertDateTimeByTimezoneValue(cs.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(cs.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "                ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetPersonalDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPersonalDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    IN pFromdate DATE,  \n" +
                "    IN pTodate DATE,  \n" +
                "    IN pRequiredCount TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "     IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			COUNT(1) totalCount  \n" +
                "		 FROM employees AS e  \n" +
                "			 LEFT JOIN users u ON e.id = u.employeeID  \n" +
                "			WHERE IFNULL(e.isDeleted,0) = 0 AND  e.id = IFNULL(pId,e.id);  \n" +
                "	ELSE  \n" +
                "			SELECT  e.id,e.initialName, e.firstName, e.lastName, e.middleName, e.email, e.street1, e.contact, u.username, e.isDeleted, e.createdAt, e.updatedAt,  \n" +
                "            fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName,vContPersonNameFormat) contactPerson  \n" +
                "			 FROM employees AS e  \n" +
                "			 LEFT JOIN users u ON e.id = u.employeeID  \n" +
                "			 LEFT JOIN employee_contactperson AS ecp ON  ecp.employeeId = e.id AND ecp.isDeleted = 0 AND ecp.releasedAt IS NULL  \n" +
                "			 LEFT JOIN contactperson cp ON cp.personId = ecp.contactPersonId AND cp.isDeleted = 0  \n" +
                "			WHERE e.id = IFNULL(pId,e.id) AND  \n" +
                "			(CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(e.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "							OR (DATE(fun_CovnertDateTimeByTimezoneValue(e.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetDepartmentForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetDepartmentForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM department as d  \n" +
                "		JOIN employees as e ON e.Id = d.deptMngrId and e.isDeleted = 0  \n" +
                "		LEFT JOIN department as pd ON pd.deptID = d.parentDeptID and pd.isDeleted = 0  \n" +
                "		where d.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		select  d.deptId,  \n" +
                "				d.deptName,  \n" +
                "				e.initialName deptMngrName,  \n" +
                "				pd.deptName deptParentName ,  \n" +
                "				d.deptMngrID,  \n" +
                "                d.isDeleted,  \n" +
                "                d.createdAt,  \n" +
                "                d.updatedAt  \n" +
                "		FROM department as d  \n" +
                "		JOIN employees as e ON e.Id = d.deptMngrId and e.isDeleted = 0  \n" +
                "		LEFT JOIN department as pd ON pd.deptID = d.parentDeptID and pd.isDeleted = 0  \n" +
                "		where d.deptID = IFNULL(pId,d.deptID)  \n" +
                "			AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(d.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(d.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetWorkOrderDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkOrderDetailForElastic`(  \n" +
                "	IN pwoID INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM workorder as wo  \n" +
                "			left join mfgcodemst mfg on wo.customerID = mfg.id  \n" +
                "			left join component com on wo.partID = com.id  \n" +
                "			LEFT OUTER JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "		where IFNULL(wo.isDeleted , 0) = 0;  \n" +
                "	ELSE  \n" +
                "		select wo.woID  \n" +
                "			,woNumber  \n" +
                "			,wo.woVersion  \n" +
                "			,wo.woSubStatus  \n" +
                "			,wo.partID  \n" +
                "			,com.PIDCode  \n" +
                "			,com.mfgPN  \n" +
                "			,com.nickName  \n" +
                "			,wo.buildQty  \n" +
                "			,mfg.mfgCode  \n" +
                "			,mfg.mfgName  \n" +
                "			,mfg.isCustOrDisty  \n" +
                "			,mfg.mfgType  \n" +
                "			,wo.customerID  \n" +
                "			,vusalesorderdet.salesOrderNumber  \n" +
                "			,vusalesorderdet.poNumber  \n" +
                "            ,vusalesorderdet.salesOrderMstIDs  \n" +
                "            ,salesOrderMstIDs  \n" +
                "			,wo.isHotJob as RushJob  \n" +
                "			,wo.isStopWorkorder as HoldStatus  \n" +
                "			,CASE WHEN wo.isStopWorkorder = 1 THEN  \n" +
                "				(select reason from workorder_trans_hold_unhold where woID = wo.woID and endDate is null)  \n" +
                "			ELSE \"\"  \n" +
                "			END as HoldReason  \n" +
                "            ,wo.isDeleted  \n" +
                "            ,wo.createdAt  \n" +
                "			,wo.updatedAt  \n" +
                "		from workorder as wo  \n" +
                "			left join mfgcodemst mfg on wo.customerID = mfg.id  \n" +
                "			left join component com on wo.partID = com.id  \n" +
                "			LEFT OUTER JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "		where wo.woID = IFNULL(pwoID, wo.woID) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(wo.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(wo.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetPartsDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPartsDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	if(pRequiredCount)  \n" +
                "    THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM  \n" +
                "		   component AS co  \n" +
                "		WHERE  (co.isDeleted = FALSE);  \n" +
                "    ELSE  \n" +
                "		SELECT  \n" +
                "			co.id,    co.custAssyPN,    co.mfgPN,	co.productionPN,	co.nickname,	co.PIDCode,	co.mfgPNDescription,	co.specialNote,	co.ltbDate,  \n" +
                "			co.eolDate,	co.deviceMarking,	co.partPackage,	co.powerRating,	co.feature,	co.color,	co.tolerance,	co.voltage,	co.value,	co.noOfPosition,	co.noOfRows,  \n" +
                "			co.mfgcodeID,	mfg.mfgCode AS mfgCode,	mfg.mfgType AS mfgType,	mfg.isCustOrDisty AS isCustOrDisty,  \n" +
                "			co.RoHSStatusID,	rohs.name AS rohsName,  \n" +
                "			co.partStatus,	cps.name AS partStatusName,  \n" +
                "			co.functionalCategoryID,	rpt.partTypeName AS rptName,  \n" +
                "			co.mountingTypeID,	rmt.name AS mountingTypeName,  \n" +
                "			co.connecterTypeID,	rct.name AS rfqConnecterTypeName,  \n" +
                "			co.packagingID,	cpm.name AS packagingName,  \n" +
                "			co.refSupplierMfgpnComponentID,  \n" +
                "			refSuppCom.mfgPN AS refSuppComMgPN,  \n" +
                "			refSuppCom.mfgcodeID AS refSuppComMfgcodeID,  \n" +
                "			refSuppComMfg.mfgCode AS refSuppComMfgCode,  \n" +
                "			refSuppComMfg.mfgType AS refSuppComMfgType,  \n" +
                "			refSuppComMfg.isCustOrDisty AS refSuppComIsCustOrDisty,  \n" +
                "            co.createdAt, co.updatedAt,  \n" +
                "            co.isDeleted  \n" +
                "		FROM  \n" +
                "		   component AS co  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			mfgCodemst AS mfg ON co.mfgcodeID = mfg.id  \n" +
                "				AND (mfg.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			rfq_rohsmst AS rohs ON co.RoHSStatusID = rohs.id  \n" +
                "				AND (rohs.isDeleted  = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			component_partstatusmst AS cps ON co.partStatus = cps.id  \n" +
                "				AND (cps.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			rfq_parttypemst AS rpt ON co.functionalCategoryID = rpt.id  \n" +
                "				AND (rpt.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			rfq_mountingtypemst AS rmt ON co.mountingTypeID = rmt.id  \n" +
                "				AND (rmt.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			rfq_connectertypemst AS rct ON co.connecterTypeID = rct.id  \n" +
                "				AND (rct.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			component_packagingmst AS cpm ON co.packagingID = cpm.id  \n" +
                "				AND ( cpm.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "		   component AS refSuppCom ON co.refSupplierMfgpnComponentID = refSuppCom.id  \n" +
                "				AND (refSuppCom.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			mfgCodemst AS refSuppComMfg ON refSuppCom.mfgcodeID = refSuppComMfg.id  \n" +
                "				AND (refSuppComMfg.isDeleted = FALSE)  \n" +
                "		WHERE  (CASE WHEN pId is not null THEN (co.id = IFNULL(pId,co.id)  \n" +
                "        OR IFNULL(co.refSupplierMfgpnComponentID,0) = IFNULL(pId,IFNULL(co.refSupplierMfgpnComponentID,0))) ELSE 1 = 1 END) AND  \n" +
                "					(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(co.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "                    or (DATE(fun_CovnertDateTimeByTimezoneValue(co.updatedAt,v_TimeZone)) between pFromdate and pTodate)) ELSE 1 = 1 END);  \n" +
                "		END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetSalesOrderForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderForElastic`(  \n" +
                "    IN pId INT,  \n" +
                "    IN pFromdate DATE,  \n" +
                "    IN pTodate DATE,  \n" +
                "    IN pRequiredCount TINYINT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			COUNT(1) totalCount  \n" +
                "		FROM  \n" +
                "			salesordermst AS som  \n" +
                "				INNER JOIN  \n" +
                "			mfgCodemst AS cust ON som.customerID = cust.id  \n" +
                "				AND (cust.deletedAt IS NULL)  \n" +
                "				LEFT JOIN  \n" +
                "			freeonboardmst AS fob ON som.freeOnBoardId = fob.id  \n" +
                "				AND (fob.isDeleted = FALSE)  \n" +
                "			       LEFT JOIN  \n" +
                "			genericcategory cm ON cm.gencCategoryID=som.carrierID AND cm.isdeleted=0  \n" +
                "			LEFT JOIN  \n" +
                "			genericcategory tm ON tm.gencCategoryID=som.termsID AND tm.isdeleted=0  \n" +
                "			LEFT JOIN  \n" +
                "			genericcategory sm ON tm.gencCategoryID=som.shippingMethodID AND tm.isdeleted=0  \n" +
                "		WHERE som.isDeleted = FALSE;  \n" +
                "    ELSE  \n" +
                "		SELECT  \n" +
                "			som.id,  \n" +
                "			som.salesOrderNumber,  \n" +
                "			som.poNumber,  \n" +
                "			som.poDate,  \n" +
                "			som.soDate,  \n" +
                "			som.customerID,  \n" +
                "			som.freeOnBoardId,  \n" +
                "			cust.mfgCode,  \n" +
                "			cust.isCustOrDisty,  \n" +
                "			cust.mfgType,  \n" +
                "			cust.mfgName,  \n" +
                "			fob.name AS fobName,  \n" +
                "			som.shippingMethodID,  \n" +
                "			som.revision,  \n" +
                "			som.termsID,  \n" +
                "			CASE WHEN som.status=1 THEN 'Published' ELSE 'Draft' END statusText,  \n" +
                "			som.revisionChangeNote,  \n" +
                "			som.salesCommissionTo,  \n" +
                "			som.serialNumber,  \n" +
                "			som.carrierID,  \n" +
                "			som.carrierAccountNumber,  \n" +
                "			som.poRevision,  \n" +
                "			CASE WHEN som.isBlanketPO=1 THEN 'Yes' ELSE 'No' END blanketPO,  \n" +
                "			CASE WHEN som.isLegacyPO=1 THEN 'Yes' ELSE 'No' END legacyPO,  \n" +
                "			CASE WHEN som.isRmaPO=1 THEN 'Yes' ELSE 'No' END rmaPO,  \n" +
                "			cm.gencCategoryName AS carrierName,  \n" +
                "			cm.genccategoryCode AS carrierCode,  \n" +
                "			tm.gencCategoryName AS termsCode,  \n" +
                "			tm.genccategoryCode AS termsName,  \n" +
                "			sm.gencCategoryName AS shippingMethodName,  \n" +
                "			som.isdeleted,  \n" +
                "			som.rmaNumber AS rmaNumber,  \n" +
                "			CASE WHEN som.isDebitedByCustomer =1 THEN 'Yes' ELSE 'No' END AS isDebitedByCustomer,  \n" +
                "			som.orgPONumber AS orgPONumber,  \n" +
                "			CASE WHEN som.isReworkRequired =1 THEN 'Yes' ELSE 'No' END isReworkRequired,  \n" +
                "			som.reworkPONumber,  \n" +
                "            som.createdAt,  \n" +
                "            som.updatedAt  \n" +
                "		FROM  \n" +
                "			salesordermst AS som  \n" +
                "				INNER JOIN  \n" +
                "			mfgCodemst AS cust ON som.customerID = cust.id  \n" +
                "				AND (cust.deletedAt IS NULL)  \n" +
                "				LEFT JOIN  \n" +
                "			freeonboardmst AS fob ON som.freeOnBoardId = fob.id  \n" +
                "				AND (fob.isDeleted = FALSE)  \n" +
                "			       LEFT JOIN  \n" +
                "			genericcategory cm ON cm.gencCategoryID=som.carrierID AND cm.isdeleted=0  \n" +
                "			LEFT JOIN  \n" +
                "			genericcategory tm ON tm.gencCategoryID=som.termsID AND tm.isdeleted=0  \n" +
                "			LEFT JOIN  \n" +
                "			genericcategory sm ON sm.gencCategoryID=som.shippingMethodID AND sm.isdeleted=0  \n" +
                "		WHERE  \n" +
                "			som.id = IFNULL(pId,som.id)  AND  \n" +
                "			(CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(som.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "							OR (DATE(fun_CovnertDateTimeByTimezoneValue(som.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetUMIDDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUMIDDetailForElastic`(  \n" +
                "	IN pumID INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "     IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM component_sid_stock css  \n" +
                "			/*INNER JOIN 	component c ON css.refcompid = c.id  \n" +
                "			LEFT JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
                "			WHERE (css.isdeleted IS NULL OR css.isdeleted = 0) AND css.id = IFNULL(pumID, css.id);  */  \n" +
                "			WHERE css.isdeleted = 0 AND css.id = IFNULL(pumID, css.id);  \n" +
                "	ELSE  \n" +
                "		SELECT css.id,  \n" +
                "				css.uid,  \n" +
                "                parentUIDId,  \n" +
                "                parentUID,  \n" +
                "                fromUIDId,  \n" +
                "                fromUID,  \n" +
                "				css.receiveMaterialType,  \n" +
                "				css.refcompid AS partID,  \n" +
                "				CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfgCode,  \n" +
                "				m.mfgType mfgType,  \n" +
                "				c.mfgPN,  \n" +
                "				c.PIDCode,  \n" +
                "				css.pkgQty,  \n" +
                "				css.pkgUnit,  \n" +
                "                css.orgQty,  \n" +
                "                css.orgPkgUnit,  \n" +
                "				fun_getUnitNameByID(css.uom) uomName,  \n" +
                "				css.dateCode,  \n" +
                "				css.lotCode,  \n" +
                "				fun_getCostCategoryNameByIDForElasticSearch(css.costCategoryID, TRUE) costCategory,  \n" +
                "				fun_getMSLLevelByID(c.mslID, FALSE) mslLevel,  \n" +
                "				fun_getFileCountByTransIDAndType('component_sid_stock', css.id) pictureCount,  \n" +
                "				c.mfgPNDescription,  \n" +
                "				IF(css.customerConsign = 0 , 'No', 'Yes') AS customerConsign,  \n" +
                "                IF(css.isReservedStock = 0 , 'No', 'Yes') AS reservedStock,  \n" +
                "				fun_getPackagingNameByID(css.packaging) packagingName,  \n" +
                "                pd.refPackingSlipMaterialRecID AS packingSlipID,  \n" +
                "				FUN_GETPACKINGSLIPNUMBERBYID(pd.refPackingSlipMaterialRecID) AS packingSlipNumber,  \n" +
                "				css.binID,  \n" +
                "				fun_getBinNameByID(css.binID) location,  \n" +
                "				fun_getWarehouseNameByBinID(css.binID) warehouse,  \n" +
                "				fun_getDepartmentNameByBinID(css.binID) department,  \n" +
                "				css.expiryDate,  \n" +
                "				(CASE WHEN (css.expiryDate < CURRENT_TIMESTAMP ) THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "				css.isDeleted,  \n" +
                "				css.createdAt,  \n" +
                "				css.updatedAt  \n" +
                "		FROM component_sid_stock css  \n" +
                "		INNER JOIN component c ON css.refcompid = c.id  \n" +
                "		LEFT JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
                "        LEFT JOIN component_sid_stock_packing_detail cp ON cp.refComponentSidStockID = css.id AND cp.isDeleted = 0  \n" +
                "		LEFT JOIN packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetailID AND pd.isDeleted = 0  \n" +
                "		WHERE css.id = IFNULL(pumID, css.id) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(css.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(css.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetPackingSlipDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "	IN pReceiptType VARCHAR(1),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		WHERE      	(psmr.deletedAt IS NULL AND psmr.isDeleted = FALSE)  \n" +
                "					AND psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType);  \n" +
                "    ELSE  \n" +
                "    SELECT 		psmr.id  \n" +
                "				,psmrd.createdAt  \n" +
                "				,psmrd.updatedAt  \n" +
                "				, psmr.systemId  \n" +
                "				, psmr.receiptType AS receiptType  \n" +
                "				, psmr.mfgCodeID  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.poNumber END) poNumber  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.poNumber ELSE NULL END) rmaNumber  \n" +
                "				, psmr.poDate  \n" +
                "				, psmr.supplierSONumber  \n" +
                "				, psmr.packingSlipNumber  \n" +
                "				, psmr.packingSlipDate  \n" +
                "				, psmr.invoiceNumber  \n" +
                "				, psmr.invoiceDate  \n" +
                "				, psmr.creditMemoNumber  \n" +
                "				, psmr.creditMemoDate  \n" +
                "				, psmr.debitMemoNumber  \n" +
                "				, psmr.debitMemoDate  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN NULL ELSE psmr.receiptDate END) receiptDate  \n" +
                "				, (CASE WHEN psmr.creditMemoType = 'RC' THEN psmr.receiptDate ELSE NULL END) shippedToDate  \n" +
                "				, psmr.chequeNumber  \n" +
                "				, psmr.chequeAmount  \n" +
                "				, psmr.chequeDate  \n" +
                "				, psmr.creditMemoType  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN 	psmr.creditMemoType = 'IC' THEN 'Invoice Credit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'RC' THEN 'RMA Credit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'MC' THEN 'MISC Credit Memo'  \n" +
                "						ELSE 	NULL  \n" +
                "					END  \n" +
                "				) creditMemoTypeValue  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN 	psmr.creditMemoType = 'ID' THEN 'Invoice Debit Memo'  \n" +
                "						WHEN  	psmr.creditMemoType = 'MD' THEN 'MISC Debit Memo'  \n" +
                "						ELSE 	NULL  \n" +
                "					END  \n" +
                "				) debitMemoTypeValue  \n" +
                "				, psmrd.id AS receivingDetId  \n" +
                "				, (CASE WHEN psmr.receiptType = 'P' THEN psmrd.packingSlipSerialNumber ELSE NULL END) packingSlipSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'I' THEN psmrd.packingSlipSerialNumber ELSE NULL END) invoiceSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'C' THEN psmrd.packingSlipSerialNumber ELSE NULL END) creditMemoSerialNumber  \n" +
                "				, (CASE WHEN psmr.receiptType = 'D' THEN psmrd.packingSlipSerialNumber ELSE NULL END) debitMemoSerialNumber  \n" +
                "				, psmrd.orderedQty  \n" +
                "				, psmrd.packingSlipQty  \n" +
                "				, psmrd.invoicePrice  \n" +
                "				, psmrd.receivedQty  \n" +
                "				, psmrd.purchasePrice  \n" +
                "				, psmrd.extendedPrice  \n" +
                "				, psmrd.extendedReceivedPrice  \n" +
                "				, psmrd.nickname  \n" +
                "				, comp.id AS compId  \n" +
                "				, comp.mfgPN AS mfgPN  \n" +
                "				, mfgMstdetail.id AS mfrPnMfrId  \n" +
                "				, mfgMstdetail.mfgName AS mfrPnMfrName  \n" +
                "				, mfgMstdetail.mfgCode AS mfrPnMfrCode  \n" +
                "				, mfgMst.id AS mfgMstId  \n" +
                "				, fun_GetFormattedMfgCode(mfgMst.mfgCode, mfgMst.mfgName, vMfgCodeFormat) AS mfgName  \n" +
                "				, mfgMst.mfgType AS mfgType  \n" +
                "				, mfgMst.isCustOrDisty AS isCustOrDisty  \n" +
                "				, (SELECT id FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipId  \n" +
                "				, (SELECT packingSlipNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id) AS refPackingSlipNumber  \n" +
                "				, (SELECT poNumber FROM packing_slip_material_receive WHERE refPackingslipNumberForInvoice = psmr.id AND receiptType = 'R') AS refRMANumber  \n" +
                "				, (SELECT invoiceNumber FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno) AS refInvoiceNumber  \n" +
                "				, psmr.refParentCreditDebitInvoiceno AS parentInvoiceId  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN (psmr.refParentCreditDebitInvoiceno IS NOT NULL) THEN  \n" +
                "							(SELECT id FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = (SELECT id FROM packing_slip_material_receive WHERE id = psmr.refParentCreditDebitInvoiceno LIMIT 1))  \n" +
                "						ELSE NULL  \n" +
                "					END  \n" +
                "				) refPackingSlipIdForMemo  \n" +
                "				, psmrd.packagingID  \n" +
                "				, fun_getPackagingNameByID(psmrd.packagingID) AS packagingName  \n" +
                "				, psmrd.receivedStatus  \n" +
                "				, (  \n" +
                "					CASE  \n" +
                "						WHEN psmrd.receivedStatus = 'P' THEN 'Pending'  \n" +
                "						WHEN psmrd.receivedStatus = 'A' THEN 'Accept'  \n" +
                "						WHEN psmrd.receivedStatus = 'R' THEN 'Reject'  \n" +
                "                        WHEN psmrd.receivedStatus = 'AD' THEN 'Accept With Deviation'  \n" +
                "						ELSE NULL  \n" +
                "					END  \n" +
                "				) AS receivedStatusValue  \n" +
                "				, psmr.remark,  \n" +
                "				(case when psmr.lockStatus = 'LC' then  \n" +
                "							'Locked'  \n" +
                "						when psmr.lockStatus = 'RL' then  \n" +
                "							'Ready To Lock'  \n" +
                "						when psmr.lockStatus = 'NA' then  \n" +
                "							'Not Applicable'  \n" +
                "						else '' end  \n" +
                "				) lockStatus,  \n" +
                "				(case when h.status ='H' then  \n" +
                "						'Halted'  \n" +
                "					else '' end) haltStatus,  \n" +
                "				h.reason haltReason,  \n" +
                "                psmrd.isDeleted,  \n" +
                "                psmr.refPurchaseOrderID ,  \n" +
                "                (case when psmrd.isReceivedWrongPart = 0 then 'No' else 'Yes' end) receivedWrongPart,  \n" +
                "                SUM(psmrd.ReceivedQty) over(partition by psmr.poNumber, psmrd.partID, psmrd.refPOLineID) AS TotalReceivedAgainstPO,  \n" +
                "                psmrd.disputeQty,  \n" +
                "                (IFNULL(SUM(psmrd.orderedQty) over(partition by psmr.poNumber, psmrd.partID, psmrd.refPOLineID) , 0) - IFNULL(SUM(psmrd.packingSlipQty) over(partition by psmr.poNumber, psmrd.partID, psmrd.refPOLineID) , 0)) AS backorderQty,  \n" +
                "                fun_getUserNameByID(psmr.lockedBy) AS lockedBy,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(psmr.lockedAt,v_TimeZone, v_DateTimeDisplayFormat) lockedAt,  \n" +
                "                fun_getUOMByID(comp.uom) AS uom,  \n" +
                "                fun_getRoHSNameByID(psmrd.rohsstatus) AS rohsStatus,  \n" +
                "				fun_getUserNameByID(psmr.invoiceApprovedBy) invoiceApprovedBy,  \n" +
                "                fun_ApplyCommonDateTimeFormatByParaValue(psmr.invoiceApprovalDate,v_TimeZone, v_DateTimeDisplayFormat) approvedAt,  \n" +
                "				psmr.invoiceApprovalComment,  \n" +
                "                psmr.refSupplierCreditMemoNumber AS refCreditMemo,  \n" +
                "                (IFNULL(psmrd.packingSlipQty, 0) - IFNULL(psmrd.receivedQty, 0)) lineQtyVariance,  \n" +
                "                CASE WHEN psmr.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "				CASE WHEN psmrd.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "                CASE WHEN psmrd.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                psmr.CustomerID,  \n" +
                "				fun_GetFormattedMfgCode(psmrmc.mfgCode, psmrmc.mfgName, vMfgCodeFormat) customerName,  \n" +
                "				psmrd.LineCustomerID as lineCustomerID,  \n" +
                "				fun_GetFormattedMfgCode(psmrdmc.mfgCode, psmrdmc.mfgName, vMfgCodeFormat) lineCustomerName,  \n" +
                "                CASE WHEN psmr.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END lineNonUMIDStockValue  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		LEFT OUTER JOIN component AS comp ON psmrd.partID = comp.id  \n" +
                "					AND comp.deletedAt IS NULL  \n" +
                "		LEFT OUTER JOIN mfgCodemst AS mfgMst ON psmr.mfgCodeID = mfgMst.id  \n" +
                "					AND (mfgMst.deletedAt IS NULL  \n" +
                "					AND mfgMst.isDeleted = FALSE)  \n" +
                "		LEFT OUTER JOIN mfgCodemst AS mfgMstdetail ON comp.mfgcodeID = mfgMstdetail.id  \n" +
                "					AND (mfgMstdetail.deletedAt IS NULL  \n" +
                "					AND mfgMstdetail.isDeleted = FALSE)  \n" +
                "		LEFT JOIN mfgcodemst psmrmc ON psmrmc.id=psmr.CustomerID  \n" +
                "        LEFT JOIN mfgcodemst psmrdmc ON psmrdmc.id=psmrd.LineCustomerID  \n" +
                "		LEFT OUTER JOIN holdunholdtrans h ON h.refTransId = psmr.id and h.refType in ('SINV','SCM','SDM') and h.status = 'H'  \n" +
                "        WHERE      	psmr.receiptType = IFNULL(pReceiptType,psmr.receiptType) AND  \n" +
                "					(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.updatedAt,v_TimeZone)) between pFromdate and pTodate)) ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetCustomerPackingSlipDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingSlipDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "	IN pdetID INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM customer_packingslip_det cpd  \n" +
                "			JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID and cp.isDeleted = 0  \n" +
                "			LEFT JOIN mfgcodemst mfg ON mfg.id=cp.customerID AND mfg.isdeleted=0  \n" +
                "			LEFT JOIN employees emp ON emp.id=cp.salesCommissionTo AND emp.isdeleted=0  \n" +
                "		WHERE cpd.isdeleted=0 AND transType ='P';  \n" +
                "	ELSE  \n" +
                "		SELECT cpd.custPOLineID,  \n" +
                "			cpd.id AS customerPackingSlipDetID,  \n" +
                "			cpd.poQty,  \n" +
                "			cpd.shipQty,  \n" +
                "			cpd.remainingQty,  \n" +
                "			cpd.partId,  \n" +
                "			fun_getAssyPIDCodeByID(cpd.partId) assyID,  \n" +
                "			fun_getAssyNameByID(cpd.partId) assyName,  \n" +
                "			fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "			fun_getAssyNickNameByID(cpd.partId) nickName,  \n" +
                "			assyDescription,  \n" +
                "			cp.poNumber,  \n" +
                "			cp.poDate,  \n" +
                "			cp.poRevision,  \n" +
                "			cp.soNumber,  \n" +
                "			cp.soDate,  \n" +
                "			cp.packingSlipNumber,  \n" +
                "			cp.packingSlipDate,  \n" +
                "			IFNULL(cp.refSalesOrderID,0) refSalesOrderID,  \n" +
                "			cp.customerID,  \n" +
                "			fun_getMfgNameByID(cp.customerID) customerName,  \n" +
                "			fun_getMfgCodeByID(cp.customerID) customerCode,  \n" +
                "			cp.id customerPackingSlipID,  \n" +
                "			mfg.mfgType,  \n" +
                "			cp.headerComment,  \n" +
                "			cp.packingSlipComment,  \n" +
                "			cpd.internalComment,  \n" +
                "			cpd.standrads,  \n" +
                "			cpd.shippingNotes,  \n" +
                "			CASE WHEN cp.subStatus=1 THEN 'Draft' WHEN cp.subStatus=2 THEN 'Ready to Ship' WHEN cp.subStatus=3 THEN 'Waiting For Shipping Label' WHEN cp.subStatus=4 THEN 'Waiting For Pickup' ELSE 'Shipped' END AS `status`,  \n" +
                "			CASE WHEN cp.packingSlipType=1 THEN 'MISC' ELSE 'PO/SO' END packingslipType,  \n" +
                "			cp.sorevision, cp.systemID ,  \n" +
                "			cp.termsID,  \n" +
                "			(CASE WHEN cp.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cp.termsID) END) AS termsDisplayText ,  \n" +
                "			cp.shippingMethodId, fun_getGenericCategoryCodeNameByID(cp.shippingmethodid) AS shippingMethodDisplayText ,  \n" +
                "			cp.salesCommissionTo ,  \n" +
                "			CONCAT('(',emp.initialName,')',' ',IFNULL(emp.firstName,''),' ',IFNULL(emp.lastName,'')) salesCommissionToDisplayText,  \n" +
                "			fun_getFOBById(cp.freeOnBoardId) freeOnBoardDisplayText ,  \n" +
                "			(select GROUP_CONCAT(cpstn.trackNumber SEPARATOR ', ') from customer_packing_slip_track_number cpstn where cpstn.refCustPackingSlipID = cp.id AND cpstn.isDeleted=0 ) AS trackingNumberList,  \n" +
                "            cpd.isDeleted,  \n" +
                "            cp.carrierId ,fun_getGenericCategoryCodeNameByID(cp.carrierId) AS carrierDisplayText,  \n" +
                "            cp.carrierAccountNumber,  \n" +
                "            cpd.updatedAt,cpd.createdAt  \n" +
                "		FROM customer_packingslip_det cpd  \n" +
                "			JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID and cp.isDeleted = 0  \n" +
                "			LEFT JOIN mfgcodemst mfg ON mfg.id=cp.customerID AND mfg.isdeleted=0  \n" +
                "			LEFT JOIN employees emp ON emp.id=cp.salesCommissionTo AND emp.isdeleted=0  \n" +
                "		WHERE cpd.refCustPackingSlipID=ifnull(pId,cpd.refCustPackingSlipID)  \n" +
                "			AND cpd.id=IFNULL(pdetID,cpd.id) AND transType ='P'  \n" +
                "            AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(cpd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cpd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							OR ((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetSupplierRMADetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierRMADetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.deletedAt IS NULL AND IFNULL(psmr.isDeleted,0) = 0  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		WHERE      	psmr.receiptType = 'R' AND (psmrd.isDeleted = 0 AND psmr.isDeleted = 0);  \n" +
                "	ELSE  \n" +
                "		SELECT 		psmr.id  \n" +
                "				, psmr.systemId  \n" +
                "				, psmrd.createdAt  \n" +
                "				, psmrd.updatedAt  \n" +
                "				, psmr.mfgCodeID  \n" +
                "				, psmr.poNumber  \n" +
                "				, psmr.poDate  \n" +
                "				, psmr.packingSlipNumber  \n" +
                "				, psmr.packingSlipDate  \n" +
                "				, psmr.receiptDate  \n" +
                "				, psmr.refPackingSlipNumberForInvoice  \n" +
                "				, psmr.shippingMethodId  \n" +
                "				, fun_getGenericCategoryCodeNameByID(psmr.shippingMethodId) shippingMethod  \n" +
                "				, psmr.carrierId  \n" +
                "				, fun_getGenericCategoryCodeNameByID(psmr.carrierId) carrier  \n" +
                "				, psmrd.id AS receivingDetId  \n" +
                "				, psmrd.packingSlipSerialNumber  \n" +
                "				, psmrd.receivedQty  \n" +
                "				, (CASE WHEN psmrd.refPackingSlipIdForRma IS NULL THEN psmrd.refPackingSlipForRma ELSE fun_getPackingSlipNumberById(psmrd.refPackingSlipIdForRma) END) refPackingSlipNumber  \n" +
                "				, (CASE WHEN psmrd.refInvoiceIdForRma IS NULL THEN psmrd.refInvoiceForRma ELSE fun_getSupplierInvoiceNumberByID(psmrd.refInvoiceIdForRma) END) refInvoiceNumber  \n" +
                "				, comp.id AS compId  \n" +
                "				, comp.mfgPN AS mfgPN  \n" +
                "				, mfgMstdetail.id AS mfrPnMfrId  \n" +
                "				, mfgMstdetail.mfgName AS mfrPnMfrName  \n" +
                "				, mfgMstdetail.mfgCode AS mfrPnMfrCode  \n" +
                "                , mfgMstdetail.mfgType AS mfrPnMfgType  \n" +
                "				, mfgMst.id AS mfgMstId  \n" +
                "				, fun_GetFormattedMfgCode(mfgMst.mfgcode, mfgMst.mfgName, vMfgCodeFormat) AS mfgName  \n" +
                "				, mfgMst.mfgType AS mfgType  \n" +
                "				, psmrd.packagingID  \n" +
                "				, fun_getPackagingNameByID(psmrd.packagingID) AS packagingName  \n" +
                "                , psmrd.isDeleted  \n" +
                "                , psmr.remark AS rmaComment  \n" +
                "                , sc.mfgPN AS spn  \n" +
                "				, sc.id AS spnId  \n" +
                "                , fun_GetFormattedMfgCode(mfgMstdetail.mfgcode, mfgMstdetail.mfgName, vMfgCodeFormat) AS supplierCode  \n" +
                "                , fun_getUOMByID(comp.uom) AS uom  \n" +
                "                , psmrd.packingSlipQty AS rmaQty  \n" +
                "                , psmrd.remark AS rmaLineComment  \n" +
                "                , fun_getUserNameByID(psmr.lockedBy) AS lockedBy  \n" +
                "                , fun_ApplyCommonDateTimeFormatByParaValue(psmr.lockedAt,v_TimeZone, fun_getDateTimeFormat()) lockedAt  \n" +
                "                , (case when psmr.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "							when psmr.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "							when psmr.lockStatus = 'LC' then 'Locked'  \n" +
                "							else null end  \n" +
                "						) lockStatus  \n" +
                "		FROM 		packing_slip_material_receive AS psmr  \n" +
                "		INNER JOIN 	packing_slip_material_receive_det AS psmrd ON psmr.id = psmrd.refPackingSlipMaterialRecID  \n" +
                "					AND psmrd.isDeleted = false AND psmr.isDeleted = false  \n" +
                "					AND psmr.Id = IFNULL(pId,psmr.Id)  \n" +
                "		LEFT JOIN 	component AS comp ON psmrd.partID = comp.id  \n" +
                "					AND comp.isDeleted = false  \n" +
                "        LEFT JOIN	component sc ON sc.id = psmrd.refSupplierPartId AND sc.isDeleted = false AND sc.mfgType = 'DIST'  \n" +
                "		LEFT JOIN 	mfgCodemst AS mfgMst ON psmr.mfgCodeID = mfgMst.id  \n" +
                "					AND mfgMst.isDeleted = FALSE  \n" +
                "		LEFT JOIN 	mfgCodemst AS mfgMstdetail ON comp.mfgcodeID = mfgMstdetail.id  \n" +
                "					AND mfgMstdetail.isDeleted = FALSE  \n" +
                "		WHERE      	psmr.receiptType = 'R'  \n" +
                "			AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(psmr.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(psmr.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							Or ((DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(psmrd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "    END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_PurchaseOrderElasticSearchDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_PurchaseOrderElasticSearchDetail`(  \n" +
                "	IN poID INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    IF(pRequiredCount) THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM purchase_order_det pod JOIN purchase_order_mst pom ON pom.id=pod.refPurchaseOrderID  \n" +
                "		JOIN mfgcodemst mg ON mg.id=pom.supplierID AND pom.isDeleted=0  \n" +
                "		JOIN component c ON c.id=pod.mfgPartID AND c.isDeleted=0  \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0  \n" +
                "		WHERE pom.isdeleted=0 AND pod.isDeleted = 0 AND pom.id=IFNULL(poID ,pom.id);  \n" +
                "	ELSE  \n" +
                "		SELECT  \n" +
                "			pod.id,  \n" +
                "			pom.id AS purchaseID,  \n" +
                "            pod.createdAt,  \n" +
                "			pod.updatedAt,  \n" +
                "			DATE_FORMAT(pom.poDate , \"%m/%d/%y\") poDate,  \n" +
                "			pom.poNumber,  \n" +
                "			pom.poRevision,  \n" +
                "			DATE_FORMAT(pom.soDate , \"%m/%d/%y\") soDate,  \n" +
                "			pom.soNumber,  \n" +
                "			fun_GetFormattedMfgCode(mg.mfgCode, mg.mfgName, vMfgCodeFormat) supplierName,  \n" +
                "			pom.supplierID,  \n" +
                "			pod.supplierQuoteNumber,  \n" +
                "			fun_getGenericCategoryCodeNameByID(pom.termsID) termsName,  \n" +
                "			pom.termsID,  \n" +
                "			pom.shippingMethodID,  \n" +
                "			fun_getGenericCategoryCodeNameByID(pom.shippingMethodID) shippingMethod,  \n" +
                "			pom.carrierID,  \n" +
                "			fun_getGenericCategoryCodeNameByID(pom.carrierID) carrierName,  \n" +
                "			pom.carrierAccountNumber,  \n" +
                "			pom.poComment,  \n" +
                "			pod.internalRef,  \n" +
                "			pom.serialNumber,  \n" +
                "			c.PIDCode,  \n" +
                "			c.mfgPN,  \n" +
                "			pod.mfgPartID,  \n" +
                "			CONCAT(emp.firstName,' ',emp.lastName) contactPerson,  \n" +
                "			pom.contactPersonEmpID,  \n" +
                "			fun_GetFormattedMfgCode(cm.mfgCode, cm.mfgName, vMfgCodeFormat) mfgName,  \n" +
                "			c.mfgcodeID,  \n" +
                "			pod.partDescription,  \n" +
                "			pod.qty,  \n" +
                "			fun_getUnitNameByID(c.uom) unitName,  \n" +
                "			pod.packagingID,  \n" +
                "			fun_getPackagingNameByID(pod.packagingID) packagingName,  \n" +
                "			pom.serialNumber,  \n" +
                "			case when pom.poWorkingStatus='C' then 'Completed' when pom.poWorkingStatus='CA' then 'Canceled' else 'In Progress' end poWorkingStatus        ,  \n" +
                "			pom.cancleReason,  \n" +
                "			case when pom.CancellationConfirmed=1 then 'Yes' else 'No' end CancellationConfirmed,  \n" +
                "			pod.isDeleted,  \n" +
                "			CASE WHEN pom.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "			CASE WHEN pod.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "			pom.customerID,  \n" +
                "			fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, vMfgCodeFormat) customerName,  \n" +
                "			pod.lineCustomerID,  \n" +
                "			fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, vMfgCodeFormat) lineCustomerName,  \n" +
                "            CASE WHEN pom.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "			CASE WHEN pod.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isLineNonUMIDStockValue  \n" +
                "		FROM purchase_order_det pod JOIN purchase_order_mst pom ON pom.id=pod.refPurchaseOrderID  \n" +
                "		JOIN mfgcodemst mg ON mg.id=pom.supplierID AND pom.isDeleted=0  \n" +
                "		JOIN component c ON c.id=pod.mfgPartID AND c.isDeleted=0  \n" +
                "        LEFT JOIN mfgcodemst cm ON cm.id=c.mfgcodeID  \n" +
                "		LEFT JOIN employees emp ON emp.id=pom.contactPersonEmpID AND emp.isdeleted=0  \n" +
                "        LEFT JOIN mfgcodemst m ON m.id=pom.customerID  \n" +
                "        LEFT JOIN mfgcodemst mc ON mc.id=pod.lineCustomerID  \n" +
                "		WHERE pom.id=IFNULL(poID ,pom.id)  \n" +
                "			AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(pod.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(pod.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							Or ((DATE(fun_CovnertDateTimeByTimezoneValue(pom.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(pom.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetWarehouseDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWarehouseDetailForElastic`(  \n" +
                "	IN pId LONGTEXT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM warehousemst  \n" +
                "		WHERE IFNULL(isDeleted,0) = 0;  \n" +
                "    ELSE  \n" +
                "		SELECT  ID,  \n" +
                "			 fun_getWarehouseTypeByKey(warehouseType) warehouseType  \n" +
                "			,Name  \n" +
                "			,nickname  \n" +
                "			,parentWHID  \n" +
                "			,fun_getWarehouseNameByID(parentWHID) ParentWarehouse  \n" +
                "			,(CASE  \n" +
                "						WHEN (isActive = 0) THEN 'Inactive'  \n" +
                "						WHEN (isActive = 1) THEN 'Active'  \n" +
                "						ELSE ''  \n" +
                "					END) AS STATUS,  \n" +
                "					(CASE  \n" +
                "						WHEN (isPermanentWH = 0) THEN 'No'  \n" +
                "						WHEN (isPermanentWH = 1) THEN 'Yes'  \n" +
                "						ELSE ''  \n" +
                "					END) AS IsPermanentWH,  \n" +
                "					(CASE  \n" +
                "						WHEN (allMovableBin = 0) THEN 'No'  \n" +
                "						WHEN (allMovableBin = 1) THEN 'Yes'  \n" +
                "						ELSE ''  \n" +
                "					END) AS allMovableBin,  \n" +
                "					(CASE  \n" +
                "						WHEN (userAccessMode = 'S') THEN 'Single'  \n" +
                "						WHEN (userAccessMode = 'M') THEN 'Multiple'  \n" +
                "						WHEN (userAccessMode = 'N/A') THEN 'N/A (Not Applicable)'  \n" +
                "						ELSE ''  \n" +
                "					END) AS userAccessMode,  \n" +
                "                    isDeleted,  \n" +
                "                    createdAt,  \n" +
                "					updatedAt  \n" +
                "				FROM warehousemst  \n" +
                "				WHERE FIND_IN_SET(ID,IFNULL(pId, ID)) AND  \n" +
                "				(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetTravelerDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetTravelerDetailForElastic`(  \n" +
                "	IN pWOTransinoutID INT(11),  \n" +
                "    IN pWOTransID int (11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM workorder_trans_empinout AS wte  \n" +
                "		WHERE  \n" +
                "			(wte.isDeleted = 0 AND (wte.checkoutTime IS NOT NULL))  \n" +
                "		ORDER BY wte.checkinTime DESC;  \n" +
                "    ELSE  \n" +
                "		SELECT  \n" +
                "			wte.woTransinoutID  \n" +
                "            ,wte.createdAt  \n" +
                "			,wte.updatedAt  \n" +
                "			,wte.woTransID  \n" +
                "			,wte.checkinTime AS startTime  \n" +
                "			,wte.checkoutTime AS endTime  \n" +
                "			,e.initialName AS userId  \n" +
                "			,wte.employeeID  \n" +
                "			,wte.woID  \n" +
                "			,wte.woOPID  \n" +
                "			,w.woNumber  \n" +
                "			,wo.opName  \n" +
                "			,wo.opNumber  \n" +
                "			,wo.isTeamOperation  \n" +
                "		FROM workorder_trans_empinout AS wte  \n" +
                "		LEFT OUTER JOIN workorder AS w ON wte.woID = w.woID AND w.deletedAt IS NULL  \n" +
                "		LEFT OUTER JOIN employees AS e ON wte.employeeID = e.id AND e.deletedAt IS NULL  \n" +
                "		LEFT OUTER JOIN workorder_operation AS wo ON wte.woOPId = wo.woOPID AND wo.deletedAt IS NULL  \n" +
                "		WHERE  \n" +
                "			((wte.checkoutTime IS NOT NULL)) and wte.woTransinoutID = IFNULL(pWOTransinoutID,wte.woTransinoutID)  \n" +
                "				and wte.woTransID = IFNULL(pWOTransID, wte.woTransID) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(wte.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(wte.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END)  \n" +
                "		ORDER BY wte.checkinTime DESC;  \n" +
                "    END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetUOMDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUOMDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    IN pMeasurementTypeID INT,  \n" +
                "    IN pFromdate DATE,  \n" +
                "    IN pTodate DATE,  \n" +
                "    IN pRequiredCount TINYINT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			COUNT(1) totalCount  \n" +
                "		FROM uoms um  \n" +
                "		WHERE  um.isdeleted = 0;  \n" +
                "    ELSE  \n" +
                "		SELECT um.id,  \n" +
                "			mt.name measurementtype,  \n" +
                "			um.abbreviation,  \n" +
                "			um.unitName,  \n" +
                "			CONCAT('1 ', um.abbreviation) AS 1UOM,  \n" +
                "            um.operator,  \n" +
                "			FUN_CONVERTUOMFORUOMLIST(um.id,  \n" +
                "					CAST(FUN_GETBASEUNIT(um.measurementTypeID, FALSE)  \n" +
                "						AS SIGNED),  \n" +
                "					1) AS unitConvertValue,  \n" +
                "			(CASE WHEN (`um`.`isFormula` = 0)  \n" +
                "				THEN FUN_CONVERTUOMFORUOMLIST(um.id, CAST(FUN_GETBASEUNIT(um.measurementTypeID, FALSE) AS SIGNED), 1)  \n" +
                "				ELSE NULL  \n" +
                "			END) AS baseEquivalent,  \n" +
                "			(SELECT GROUP_CONCAT(alias) AS aliaslist  \n" +
                "				FROM component_fields_genericalias_mst  \n" +
                "				WHERE isdeleted = 0  \n" +
                "					AND refTableName = 'Uoms'  \n" +
                "					AND refId = um.id  \n" +
                "				GROUP BY refId) AS aliaslist,  \n" +
                "			(CASE WHEN (um.defaultUOM = 1) THEN 'Yes'  \n" +
                "				ELSE 'No'  \n" +
                "			END) AS defaultUOMConvertedValue,  \n" +
                "			(CASE  \n" +
                "				WHEN (um.isFormula = 0) THEN 'No'  \n" +
                "				WHEN (um.isFormula = 1) THEN 'Yes'  \n" +
                "				ELSE ''  \n" +
                "			END) AS `isFormulaConvertedValue`,  \n" +
                "			um.description,  \n" +
                "			(CASE  \n" +
                "				WHEN (um.isSystemDefault = 0) THEN 'No'  \n" +
                "				WHEN (um.isSystemDefault = 1) THEN 'Yes'  \n" +
                "				ELSE ''  \n" +
                "			END) AS `isSystemDefaultConvertedValue`,  \n" +
                "			um.measurementTypeID,  \n" +
                "			um.ord AS displayOrder,  \n" +
                "			mt.displayOrder AS measurementTypeOrder,  \n" +
                "			FUN_GETBASEUNIT(um.measurementTypeID, TRUE) AS baseUnitValue  \n" +
                "            ,um.isDeleted  \n" +
                "            ,um.createdAt  \n" +
                "			,um.updatedAt  \n" +
                "		FROM uoms um  \n" +
                "		LEFT JOIN measurement_types mt ON mt.id = um.measurementTypeID AND mt.isdeleted = 0  \n" +
                "		WHERE um.id = IFNULL(pId, um.id)  AND  um.measurementTypeID = IFNULL(pMeasurementTypeID, um.measurementTypeID) AND  \n" +
                "		(CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "			((DATE(fun_CovnertDateTimeByTimezoneValue(um.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "				OR (DATE(fun_CovnertDateTimeByTimezoneValue(um.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)) OR  \n" +
                "			((DATE(fun_CovnertDateTimeByTimezoneValue(mt.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "				OR (DATE(fun_CovnertDateTimeByTimezoneValue(mt.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "                ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetWhoBoughtWhoDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWhoBoughtWhoDetailForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM `who_bought_who` wbw  \n" +
                "			JOIN users us ON wbw.createdBy = us.id AND us.deletedAt IS NULL  \n" +
                "			LEFT JOIN mfgcodemst mfgBymst on wbw.buyBy = mfgBymst.id AND mfgBymst.deletedAt IS NULL  \n" +
                "			LEFT JOIN mfgcodemst mfgTomst on wbw.buyTo = mfgTomst.id AND mfgTomst.deletedAt IS NULL  \n" +
                "			JOIN employees emp ON us.employeeID = emp.id AND emp.deletedAt IS NULL  \n" +
                "		WHERE  \n" +
                "		IFNULL(wbw.isdeleted,0) = 0;  \n" +
                "    ELSE  \n" +
                "		SELECT  \n" +
                "			wbw.id,  \n" +
                "			wbw.buyBy,  \n" +
                "			mfgBymst.mfgCode AS mfgBy,  \n" +
                "			mfgBymst.isCustOrDisty mfgByIsCust,  \n" +
                "			mfgBymst.mfgType mfgByMfgType,  \n" +
                "			wbw.buyDate,  \n" +
                "			wbw.description,  \n" +
                "			wbw.createdAt,  \n" +
                "			wbw.buyTo,  \n" +
                "			mfgTomst.isCustOrDisty mfgToIsCust,  \n" +
                "			mfgTomst.mfgType mfgToMfgType,  \n" +
                "						mfgTomst.mfgCode AS mfgTo,  \n" +
                "			CONCAT(emp.firstName, ' ', emp.lastName) AS createdByEmp  \n" +
                "            ,wbw.isDeleted  \n" +
                "			,wbw.updatedAt  \n" +
                "		FROM `who_bought_who` wbw  \n" +
                "			JOIN users us ON wbw.createdBy = us.id AND us.deletedAt IS NULL  \n" +
                "			LEFT JOIN mfgcodemst mfgBymst on wbw.buyBy = mfgBymst.id AND mfgBymst.deletedAt IS NULL  \n" +
                "			LEFT JOIN mfgcodemst mfgTomst on wbw.buyTo = mfgTomst.id AND mfgTomst.deletedAt IS NULL  \n" +
                "			JOIN employees emp ON us.employeeID = emp.id AND emp.deletedAt IS NULL  \n" +
                "		WHERE  \n" +
                "		wbw.id = IFNULL(pId, wbw.id) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "			((DATE(fun_CovnertDateTimeByTimezoneValue(wbw.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(wbw.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "				ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetConnectorTypesForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetConnectorTypesForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount  \n" +
                "		FROM rfq_connectertypemst  AS rfqCtm  \n" +
                "		WHERE rfqCtm.isDeleted = 0;  \n" +
                "    ELSE  \n" +
                "		SELECT  \n" +
                "			rfqCtm.id  \n" +
                "			,rfqCtm.isDeleted  \n" +
                "            ,rfqCtm.createdAt  \n" +
                "			,rfqCtm.updatedAt  \n" +
                "			,NAME  \n" +
                "			,description  \n" +
                "			,(CASE WHEN (isActive = 0) THEN 'Disable'  \n" +
                "					WHEN (isActive = 1) THEN 'Enable' ELSE '' END) AS STATUS  \n" +
                "			,(SELECT GROUP_CONCAT(alias SEPARATOR ', ') AS aliaslist  \n" +
                "				FROM component_fields_genericalias_mst  \n" +
                "				WHERE isdeleted = 0 AND  refTableName ='rfq_connectertypemst'  \n" +
                "			  AND refId = rfqCtm.id) AS aliaslist  \n" +
                "		FROM rfq_connectertypemst  AS rfqCtm  \n" +
                "		WHERE rfqCtm.id = IFNULL(pId, rfqCtm.id) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(rfqCtm.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "                or (DATE(fun_CovnertDateTimeByTimezoneValue(rfqCtm.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetPartStatusForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPartStatusForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM component_partstatusmst cps  \n" +
                "		WHERE cps.isDeleted = 0;  \n" +
                "    ELSE  \n" +
                "		SELECT id  \n" +
                "			,NAME  \n" +
                "			,(SELECT GROUP_CONCAT(alias SEPARATOR ', ') AS aliaslist FROM component_fields_genericalias_mst WHERE isdeleted = 0 AND  \n" +
                "				refTableName ='component_partstatusmst' AND refId=cps.id) AS aliaslist  \n" +
                "			,cps.isDeleted  \n" +
                "            ,cps.createdAt  \n" +
                "			,cps.updatedAt  \n" +
                "		FROM component_partstatusmst cps  \n" +
                "		WHERE cps.id = IFNULL(pId, cps.id) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(cps.createdAt) between pFromdate and pTodate)  or (DATE(cps.updatedAt) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetMountionTypesForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetMountionTypesForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount  \n" +
                "		FROM rfq_mountingtypemst AS rmt  \n" +
                "			WHERE rmt.isDeleted= 0;  \n" +
                "	ELSE  \n" +
                "		SELECT 	id  \n" +
                "			,NAME  \n" +
                "			,description  \n" +
                "			,colorCode  \n" +
                "			,CASE WHEN isCountTypeEach=1 THEN 'Yes' ELSE 'No' END CountTypeEach  \n" +
                "			,(CASE WHEN (`isActive` = 0) THEN 'Disable'  \n" +
                "								WHEN (`isActive` = 1) THEN 'Enable' ELSE '' END) AS STATUS  \n" +
                "			,(SELECT GROUP_CONCAT(alias SEPARATOR ', ') AS aliaslist  \n" +
                "				FROM component_fields_genericalias_mst  \n" +
                "				WHERE isdeleted = 0 AND  refTableName ='rfq_mountingtypemst'  \n" +
                "					AND refId=rmt.id ) AS aliaslist  \n" +
                "			,rmt.isDeleted  \n" +
                "            ,rmt.createdAt  \n" +
                "			,rmt.updatedAt  \n" +
                "		FROM rfq_mountingtypemst AS rmt  \n" +
                "			WHERE rmt.id = IFNULL(pId, rmt.id) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(rmt.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "                or (DATE(fun_CovnertDateTimeByTimezoneValue(rmt.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetFunctionalTypeForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetFunctionalTypeForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount  \n" +
                "		FROM rfq_parttypemst pt  \n" +
                "		WHERE pt.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT 	pt.id  \n" +
                "				,pt.partTypeName  \n" +
                "				,pt.displayOrder  \n" +
                "				,(CASE WHEN (pt.isActive = 0) THEN 'Disable'  \n" +
                "						WHEN (pt.isActive = 1) THEN 'Enable' ELSE '' END) AS STATUS  \n" +
                "				,(CASE WHEN (pt.isTemperatureSensitive = 1) THEN 'Yes' ELSE 'No' END) AS temperatureSensitiveValue  \n" +
                "				,(SELECT  GROUP_CONCAT(alias SEPARATOR ', ' ) AS aliaslist  \n" +
                "					FROM component_fields_genericalias_mst  \n" +
                "					WHERE isdeleted = 0 AND  refTableName ='rfq_parttypemst' AND refId = pt.id) AS aliaslist  \n" +
                "				,pt.isDeleted  \n" +
                "				,pt.createdAt  \n" +
                "				,pt.updatedAt  \n" +
                "		FROM rfq_parttypemst pt  \n" +
                "			WHERE pt.id = IFNULL(pId, pt.id) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(pt.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "                or (DATE(fun_CovnertDateTimeByTimezoneValue(pt.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetMountingGroupForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetMountingGroupForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount  \n" +
                "		FROM component_logicalgroup AS clg  \n" +
                "		WHERE clg.isDeleted = 0;  \n" +
                "    ELSE  \n" +
                "		SELECT clg.id, clg.name,  \n" +
                "			(CASE  \n" +
                "				WHEN (clg.isActive = 0) THEN 'Inactive'  \n" +
                "				WHEN (clg.isActive = 1) THEN 'Active'  \n" +
                "				ELSE ''  \n" +
                "			END) AS Status,  \n" +
                "			(SELECT GROUP_CONCAT(m.name) AS aliaslist  \n" +
                "				FROM component_logicalgroup_detail l  \n" +
                "				JOIN rfq_mountingtypemst m ON m.id = l.rfqMountingTypeID  \n" +
                "				WHERE l.logicalgroupID = clg.id  \n" +
                "				  AND l.isDeleted = 0) AS aliaslist,  \n" +
                "			clg.isDeleted,  \n" +
                "            clg.createdAt  \n" +
                "			,clg.updatedAt  \n" +
                "		FROM component_logicalgroup AS clg  \n" +
                "		WHERE clg.id = IFNULL(pId, clg.id) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(clg.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "                or (DATE(fun_CovnertDateTimeByTimezoneValue(clg.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetCostCategoryForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCostCategoryForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount  \n" +
                "		FROM cost_category AS cc  \n" +
                "		where IFNULL(cc.isDeleted , 0) = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT 	cc.id  \n" +
                "				,cc.categoryName  \n" +
                "				,cc.from  \n" +
                "				,cc.to  \n" +
                "                ,cc.isDeleted  \n" +
                "                ,cc.createdAt  \n" +
                "				,cc.updatedAt  \n" +
                "					FROM cost_category AS cc  \n" +
                "			where cc.id = IFNULL(pId, cc.id) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(cc.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "				or (DATE(fun_CovnertDateTimeByTimezoneValue(cc.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetPackagningTypesForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackagningTypesForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount  \n" +
                "		FROM component_packagingmst pt  \n" +
                "			WHERE pt.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT 	pt.id  \n" +
                "			,pt.name  \n" +
                "            ,pt.createdAt  \n" +
                "			,pt.updatedAt  \n" +
                "			,(CASE WHEN (pt.isActive = 0) THEN 'Disable'  \n" +
                "				WHEN (pt.isActive = 1) THEN 'Enable' ELSE '' END) AS STATUS  \n" +
                "			,(SELECT  GROUP_CONCAT(alias SEPARATOR ', ' ) AS aliaslist FROM component_fields_genericalias_mst  \n" +
                "				WHERE isdeleted = 0 AND  refTableName ='component_packagingmst' AND refId = pt.id ) AS aliaslist  \n" +
                "			,pt.isDeleted  \n" +
                "		FROM component_packagingmst pt  \n" +
                "			WHERE pt.id = IFNULL(pId, pt.id)  AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(pt.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "				or (DATE(fun_CovnertDateTimeByTimezoneValue(pt.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetStandardsCategoriesForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetStandardsCategoriesForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM standard_class AS sc  \n" +
                "        LEFT OUTER JOIN certificate_standards AS csc ON sc.certificateStandardID = csc.certificateStandardID  \n" +
                "        WHERE sc.isDeleted  = 0;  \n" +
                "    ELSE  \n" +
                "	  SELECT sc.classID  \n" +
                "		,sc.className  \n" +
                "		,csc.certificateStandardID AS standardId  \n" +
                "        ,csc.fullName AS Standard  \n" +
                "        ,csc.displayOrder AS displayOrder  \n" +
                "        ,sc.colorCode  \n" +
                "        ,(CASE WHEN (sc.isActive = 0) THEN 'Disable'  \n" +
                "			WHEN (sc.isActive = 1) THEN 'Enable' ELSE '' END) AS Status  \n" +
                "		,sc.isDeleted  \n" +
                "		,sc.createdAt  \n" +
                "		,sc.updatedAt  \n" +
                "		FROM standard_class AS sc  \n" +
                "        LEFT OUTER JOIN certificate_standards AS csc ON sc.certificateStandardID = csc.certificateStandardID AND csc.deletedAt IS NULL  \n" +
                "        WHERE sc.classID = IFNULL(pId, sc.classID )  \n" +
                "				AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(sc.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "						or (DATE(fun_CovnertDateTimeByTimezoneValue(sc.updatedAt,v_TimeZone)) between pFromdate and pTodate)) ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetKitAllocationForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitAllocationForElastic`(  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE pWhereClause VARCHAR(1000);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    SET pWhereClause = '1 = 1';  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount\");  \n" +
                "		SET pWhereClause = CONCAT('sd.isDeleted = 0');  \n" +
                "	ELSE  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			  k.id  \n" +
                "				,k.refSalesOrderDetID  \n" +
                "                ,sd.refSalesOrderID  \n" +
                "				,s.poNumber  \n" +
                "				,s.salesOrderNumber  \n" +
                "				,k.assyId  \n" +
                "                ,assy.mfgcodeID  \n" +
                "                ,assy_mcm.mfgType assyMfgType  \n" +
                "				,assy.PIDCode AssyPIdCode  \n" +
                "				,assy.mfgPN assyMfgPN  \n" +
                "				,k.partId  \n" +
                "                ,c_mcm.mfgType partMfgType  \n" +
                "				,c.PIDCode partCode  \n" +
                "				,assy.mfgPN partMfgPn  \n" +
                "				,c.assyCode part  \n" +
                "				,k.UID  \n" +
                "				,k.refUIDId  \n" +
                "                ,k.allocatedQty  \n" +
                "                ,k.consumeQty  \n" +
                "                ,k.scrapExpiredQty  \n" +
                "                ,CASE WHEN k.STATUS = 'A' THEN 'Allocated'  \n" +
                "					WHEN k.STATUS = 'R' THEN 'Return'  \n" +
                "					WHEN k.STATUS = 'D' THEN 'Deallocated'  \n" +
                "					ELSE 'Consumed' END KitStatus  \n" +
                "                ,k.returnQty  \n" +
                "                ,sd.isDeleted,  \n" +
                "				,k.createdAt  \n" +
                "				,k.updatedAt  \n" +
                "                ,sd.kitNumber\");  \n" +
                "			IF((SELECT COUNT(1) from tempKitAllocation) > 0) THEN  \n" +
                "				SET pWhereClause = CONCAT(\"k.id IN (select pId from tempKitAllocation)\");  \n" +
                "			END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(@temp_Sproc_GetKitAllocationForElastic, \"  \n" +
                "			from kit_allocation k  \n" +
                "			inner join salesorderdet sd on k.refSalesOrderDetID = sd.id and sd.partCategory=3  \n" +
                "			left JOIN salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "			left join component assy on k.assyId = assy.Id  \n" +
                "			left join component c on k.partId = c.Id  \n" +
                "            left join mfgcodemst assy_mcm on assy.mfgcodeId = assy_mcm.id  \n" +
                "            left join mfgcodemst c_mcm on c.mfgcodeId = c_mcm.id  \n" +
                "            where  \n" +
                "	\");  \n" +
                "  \n" +
                "    IF (pFromdate IS NOT NULL OR pTodate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause,\"  AND (((DATE(fun_CovnertDateTimeByTimezoneValue(k.createdAt,'\",v_TimeZone,\"'))  \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(k.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"'))  \n" +
                "        OR ((DATE(fun_CovnertDateTimeByTimezoneValue(sd.createdAt,'\",v_TimeZone,\"'))  \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(sd.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"')));\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@temp_Sproc_GetKitAllocationForElastic, pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempKitAllocation;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetWorkorderEquipmentDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkorderEquipmentDetailForElastic`(  \n" +
                "	IN pId varchar(1000),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "    declare pWhereClause varchar(1000);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SET @temp_Sproc_GetWorkorderEquipmentDetailForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount \");  \n" +
                "		SET pWhereClause = ' woe.isDeleted = 0 ' ;  \n" +
                "	ELSE  \n" +
                "		SET @temp_Sproc_GetWorkorderEquipmentDetailForElastic = CONCAT(\"  \n" +
                "				select  \n" +
                "					woe.woOpEqpId  \n" +
                "                    ,woe.createdAt  \n" +
                "					,woe.updatedAt  \n" +
                "					,wo.woID  \n" +
                "					,woNumber  \n" +
                "					,wo.woVersion  \n" +
                "					,woo.opNumber woOpNumber  \n" +
                "					,woo.opName woOpName  \n" +
                "					,woe.woOPID  \n" +
                "					,vusalesorderdet.salesOrderNumber  \n" +
                "					,vusalesorderdet.poNumber  \n" +
                "					,woe.eqpID  \n" +
                "					,e.assetName  \n" +
                "					,e.eqpMake  \n" +
                "					,e.eqpModel  \n" +
                "					,e.eqpYear  \n" +
                "					,woe.isDeleted  \n" +
                "		\");  \n" +
                "  \n" +
                "        IF(pId IS NULL OR pId = '') THEN  \n" +
                "			SET pWhereClause = ' 1=1 ' ;  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(\" woe.woOpEqpId IN (\", pId , \")\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF (pFromdate IS NOT NULL OR pTodate IS NOT NULL) THEN  \n" +
                "			SET pWhereClause =CONCAT(pWhereClause,\"  AND (((DATE(fun_CovnertDateTimeByTimezoneValue(woe.createdAt,'\",v_TimeZone,\"'))  \n" +
                "			between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "				or (DATE(fun_CovnertDateTimeByTimezoneValue(woe.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"')));\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    SET @temp_Sproc_GetWorkorderEquipmentDetailForElastic = CONCAT(@temp_Sproc_GetWorkorderEquipmentDetailForElastic,\"  \n" +
                "			from workorder_operation_equipment as woe  \n" +
                "					left join workorder wo on wo.woID = woe.woID  \n" +
                "					left join workorder_operation woo on woo.woOPID = woe.woOPID  \n" +
                "					left join equipment e on e.eqpID = woe.eqpID  \n" +
                "					LEFT OUTER JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = woe.woID  \n" +
                "					where  \n" +
                "    \");  \n" +
                "	SET @SQLStatement1 = CONCAT(@temp_Sproc_GetWorkorderEquipmentDetailForElastic,pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetWOOperationEmployeeDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOOperationEmployeeDetailForElastic`(  \n" +
                "	IN pId varchar(1000),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "    declare pWhereClause varchar(1000);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SET @temp_Sproc_GetWorkorEmployeeDetailForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount\");  \n" +
                "		SET pWhereClause = ' woe.isDeleted = 0 ' ;  \n" +
                "	ELSE  \n" +
                "		SET @temp_Sproc_GetWorkorEmployeeDetailForElastic = CONCAT(\"  \n" +
                "			select 	woe.woOpEmployeeID  \n" +
                "					,woe.createdAt  \n" +
                "					,woe.updatedAt  \n" +
                "					,woe.employeeID  \n" +
                "					,woNumber  \n" +
                "					,wo.woVersion  \n" +
                "					,woe.woID  \n" +
                "					,vusalesorderdet.poNumber  \n" +
                "					,woo.opNumber woOpNumber  \n" +
                "					,woo.opName woOpName  \n" +
                "					,woe.woOPID  \n" +
                "					,wo.woID  \n" +
                "					,vusalesorderdet.salesOrderNumber  \n" +
                "					,e.firstName  \n" +
                "					,e.lastName  \n" +
                "					,e.initialName  \n" +
                "					,fun_getEmpCertificationByEmpID(woe.employeeID)  empCertifications  \n" +
                "                    ,woe.isDeleted  \n" +
                "		\");  \n" +
                "		IF(pId IS NULL OR pId = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(\" woe.woOpEmployeeID IN (\", pId , \")\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF (pFromdate IS NOT NULL OR pTodate IS NOT NULL) THEN  \n" +
                "			SET pWhereClause =CONCAT(pWhereClause,\"  AND (((DATE(fun_CovnertDateTimeByTimezoneValue(woe.createdAt,'\",v_TimeZone,\"'))  \n" +
                "			between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "				or (DATE(fun_CovnertDateTimeByTimezoneValue(woe.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"')));\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetWorkorEmployeeDetailForElastic = CONCAT(@temp_Sproc_GetWorkorEmployeeDetailForElastic,\"  \n" +
                "		from workorder_operation_employee as woe  \n" +
                "        left join workorder wo on wo.woID = woe.woID  \n" +
                "		left join workorder_operation woo on woo.woOPID = woe.woOPID  \n" +
                "        LEFT OUTER JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "        left join employees e on woe.employeeID = e.id  \n" +
                "				where  \n" +
                "	\");  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@temp_Sproc_GetWorkorEmployeeDetailForElastic,pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetWOOperationPartDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOOperationPartDetailForElastic`(  \n" +
                "	IN pId varchar(1000),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "    declare pWhereClause varchar(1000);  \n" +
                "    DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SET @temp_Sproc_GetWorkorEmployeeDetailForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount\");  \n" +
                "		SET pWhereClause = ' wop.isDeleted = 0 ' ;  \n" +
                "	ELSE  \n" +
                "		SET @temp_Sproc_GetWorkorEmployeeDetailForElastic = CONCAT(\"  \n" +
                "			select  \n" +
                "				wop.woOPPartID  \n" +
                "				,wop.createdAt  \n" +
                "				,wop.updatedAt  \n" +
                "				,woNumber  \n" +
                "				,wo.woVersion  \n" +
                "				,wop.woID  \n" +
                "				,vusalesorderdet.poNumber  \n" +
                "				,woo.opNumber woOpNumber  \n" +
                "				,woo.opName woOpName  \n" +
                "				,wop.woOPID  \n" +
                "				,wo.woID  \n" +
                "				,vusalesorderdet.salesOrderNumber  \n" +
                "				,wop.partId  \n" +
                "				,co.PIDCode  \n" +
                "				,co.mfgPNDescription  \n" +
                "				,co.mfgPN  \n" +
                "				,mfg.mfgType  \n" +
                "				,pt.partTypeName  \n" +
                "				,rr.name rohsName  \n" +
                "				,mt.name mountingType  \n" +
                "				,CASE WHEN (wop.qpa is null or wop.qpa <= 0)  \n" +
                "					THEN 'N/A'  \n" +
                "					ELSE  \n" +
                "					wop.qpa  \n" +
                "					END qpa  \n" +
                "				,CASE WHEN ((wop.qpa is null or wop.qpa <= 0) or wo.buildQty <= 0)  \n" +
                "					THEN 'N/A'  \n" +
                "					ELSE  \n" +
                "					fun_convertUOM(wop.uomID,(SELECT id FROM uoms  \n" +
                "						WHERE measurementTypeID = (SELECT measurementTypeID FROM uoms WHERE id = wop.uomID AND deletedAt IS NULL)  \n" +
                "						AND defaultUOM = 1 AND deletedAt IS NULL LIMIT 1),qpa) * wo.buildQty  \n" +
                "					END  \n" +
                "				totalQPA  \n" +
                "                ,wop.isDeleted  \n" +
                "		\");  \n" +
                "  \n" +
                "		IF(pId IS NULL OR pId = '') THEN  \n" +
                "			SET pWhereClause = ' 1=1' ;  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(\" wop.woOPPartID IN (\", pId , \")\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF (pFromdate IS NOT NULL OR pTodate IS NOT NULL) THEN  \n" +
                "			SET pWhereClause =CONCAT(pWhereClause,\"  AND (((DATE(fun_CovnertDateTimeByTimezoneValue(wop.createdAt,'\",v_TimeZone,\"'))  \n" +
                "			between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "				or (DATE(fun_CovnertDateTimeByTimezoneValue(wop.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"')));\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetWOOperationPartDetailForElastic = CONCAT(@temp_Sproc_GetWorkorEmployeeDetailForElastic,\"  \n" +
                "			from workorder_operation_part wop  \n" +
                "				join workorder wo on wo.woID = wop.woID  \n" +
                "				join workorder_operation woo on woo.woOPID = wop.woOPID  \n" +
                "				LEFT JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "				join component co on wop.partId = co.id  \n" +
                "				join mfgcodemst mfg on co.mfgcodeID = mfg.id  \n" +
                "				JOIN rfq_rohsmst rr ON rr.id = co.roHSStatusID AND co.deletedAt IS NULL AND IFNULL(rr.isDeleted,0) =0  \n" +
                "				JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID  \n" +
                "				JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID  \n" +
                "				LEFT JOIN rfq_connectertypemst rct ON co.connecterTypeID = rct.id  \n" +
                "		where  \n" +
                "	\");  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@temp_Sproc_GetWOOperationPartDetailForElastic,pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetWOOPChangeRequestDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOOPChangeRequestDetailForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    IN pRequestType varchar(1),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM  workorder_reqrevcomments wrc  \n" +
                "		left join employees  appRejEmp on appRejEmp.id = wrc.accRejBy  \n" +
                "		join employees commentEmp on commentEmp.id = wrc.commentemployeeID  \n" +
                "		join workorder_reqforreview wr on wrc.woRevReqId = wr.woRevReqId  \n" +
                "		join workorder wo on wo.woID = wr.woID  \n" +
                "		left join workorder_operation woo on woo.woOPID = wr.woOPID  \n" +
                "		LEFT JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "		where wrc.isDeleted = 0 AND wr.requestType = IFNULL(pRequestType,wr.requestType);  \n" +
                "	ELSE  \n" +
                "		select  \n" +
                "				wrc.woRevReqcommID  \n" +
                "				,wrc.createdAt  \n" +
                "				,wrc.updatedAt  \n" +
                "				,woNumber  \n" +
                "				,wo.woVersion  \n" +
                "				,wr.woID  \n" +
                "				,vusalesorderdet.poNumber  \n" +
                "				,woo.opNumber woOpNumber  \n" +
                "				,woo.opName woOpName  \n" +
                "				,wr.woOPID  \n" +
                "				,wo.woID  \n" +
                "				,vusalesorderdet.salesOrderNumber  \n" +
                "				,wrc.accRejBy  \n" +
                "				,wrc.accRejDate  \n" +
                "				, wrc.commentemployeeID  \n" +
                "				,wrc.commentDate  \n" +
                "				,wrc.description  \n" +
                "				,wr.requestType  \n" +
                "				,wr.threadTitle  \n" +
                "				,wr.changeType  \n" +
                "				,concat(appRejEmp.firstName, \" \", appRejEmp.lastName) AppRejBy  \n" +
                "				,concat(commentEmp.firstName, \" \", commentEmp.lastName) CommentBy  \n" +
                "				,CASE WHEN (wrc.accRejStatus = \"A\") THEN \"Approved\" ELSE \"Rejected\" END accRejStatus  \n" +
                "				,wr.woRevnumber  \n" +
                "				,wr.woOpRevNumber  \n" +
                "                ,wrc.isDeleted  \n" +
                "		from workorder_reqrevcomments wrc  \n" +
                "			left join employees  appRejEmp on appRejEmp.id = wrc.accRejBy  \n" +
                "			join employees commentEmp on commentEmp.id = wrc.commentemployeeID  \n" +
                "			join workorder_reqforreview wr on wrc.woRevReqId = wr.woRevReqId  \n" +
                "			join workorder wo on wo.woID = wr.woID  \n" +
                "			left join workorder_operation woo on woo.woOPID = wr.woOPID  \n" +
                "			LEFT JOIN vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wo.woID  \n" +
                "		where wrc.woRevReqcommID = IFNULL(pId,wrc.woRevReqcommID) and wr.requestType = IFNULL(pRequestType,wr.requestType) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(wrc.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(wrc.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetEquipmentWorkstationTypesForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetEquipmentWorkstationTypesForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM genericcategory a WHERE  \n" +
                "		a.categoryType = 'Equipment, Workstation & Sample Types' AND a.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT a.gencCategoryID  \n" +
                "			,a.createdAt  \n" +
                "			,a.updatedAt  \n" +
                "			,a.gencCategoryName  \n" +
                "			,a.gencCategoryCode  \n" +
                "			,a.displayOrder  \n" +
                "			,CASE WHEN (a.isActive = 1) THEN 'Active' ELSE 'Inactive' END STATUS  \n" +
                "            ,a.isDeleted  \n" +
                "		FROM genericcategory a WHERE  \n" +
                "		a.categoryType = 'Equipment, Workstation & Sample Types'  \n" +
                "		AND a.gencCategoryID = IFNULL(pId,a.gencCategoryID) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(a.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(a.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetEquipmentWorkstationGroupsForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetEquipmentWorkstationGroupsForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM genericcategory gc WHERE  \n" +
                "		gc.categoryType = 'Equipment, Workstation & Sample Groups' AND gc.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT gc.gencCategoryID  \n" +
                "			,gc.createdAt  \n" +
                "			,gc.updatedAt  \n" +
                "			,gc.gencCategoryName  \n" +
                "			,gc.gencCategoryCode  \n" +
                "			,gc.displayOrder  \n" +
                "			,CASE WHEN (gc.isActive = 1) THEN 'Active' ELSE 'Inactive' END STATUS  \n" +
                "			,gc.parentGencCategoryID  \n" +
                "			,pgc.gencCategoryID AS parentGenCatID,  \n" +
                "			pgc.gencCategoryName AS parentName  \n" +
                "            ,gc.isDeleted  \n" +
                "		FROM genericcategory gc  \n" +
                "					LEFT OUTER JOIN genericcategory AS pgc  \n" +
                "					ON gc.parentGencCategoryID = pgc.gencCategoryID  \n" +
                "					AND IFNULL(pgc.deletedAt,0) = 0  \n" +
                "		where  \n" +
                "				gc.categoryType = 'Equipment, Workstation & Sample Groups'  \n" +
                "		AND gc.gencCategoryID = IFNULL(pId,gc.gencCategoryID)  \n" +
                "        AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(gc.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(gc.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetEquipmentWorkstationOwnershipsForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetEquipmentWorkstationOwnershipsForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM genericcategory gc WHERE  \n" +
                "		gc.categoryType = 'Equipment, Workstation & Sample Ownerships' AND gc.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT gc.gencCategoryID  \n" +
                "			,gc.createdAt  \n" +
                "			,gc.updatedAt  \n" +
                "			,gc.gencCategoryName  \n" +
                "			,gc.gencCategoryCode  \n" +
                "			,gc.displayOrder  \n" +
                "			,CASE WHEN (gc.isActive = 1) THEN 'Active' ELSE 'Inactive' END STATUS  \n" +
                "            ,gc.isDeleted  \n" +
                "		FROM genericcategory gc  \n" +
                "			WHERE  \n" +
                "            gc.categoryType = 'Equipment, Workstation & Sample Ownerships'  \n" +
                "			AND gc.gencCategoryID = IFNULL(pId,gc.gencCategoryID)  \n" +
                "			AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(gc.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(gc.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetLocationsForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetLocationsForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM genericcategory gc WHERE  \n" +
                "		gc.categoryType = 'Geolocations' AND gc.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "	  SELECT gc.gencCategoryID  \n" +
                "			,gc.createdAt  \n" +
                "			,gc.updatedAt  \n" +
                "			,gc.gencCategoryName  \n" +
                "			,gc.gencCategoryCode  \n" +
                "			,gc.displayOrder  \n" +
                "			,CASE WHEN (gc.isActive = 1) THEN 'Active' ELSE 'Inactive' END STATUS  \n" +
                "			,gc.isDeleted  \n" +
                "		FROM genericcategory gc  \n" +
                "		WHERE  gc.categoryType = 'Geolocations'  \n" +
                "			AND gc.gencCategoryID = IFNULL(pId,gc.gencCategoryID)  \n" +
                "			AND  \n" +
                "				(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(gc.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(gc.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetECOCategoryForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetECOCategoryForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		from eco_type_category e  \n" +
                "			WHERE e.category = 1 and e.isDeleted = 0 ;  \n" +
                "	ELSE  \n" +
                "	  select  \n" +
                "		e.ecoTypeCatID  \n" +
                "		,e.createdAt  \n" +
                "		,e.updatedAt  \n" +
                "		,e.name  \n" +
                "        ,e.displayOrder  \n" +
                "        ,e.isDeleted  \n" +
                "		from eco_type_category e  \n" +
                "			WHERE e.category = 1  \n" +
                "		and e.ecoTypeCatID = IFNULL(pId,e.ecoTypeCatID)  \n" +
                "        AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(e.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(e.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetECOCategoryAttributeForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetECOCategoryAttributeForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		from ECO_Type_Values e  \n" +
                "		LEFT OUTER JOIN eco_type_category AS etc ON e.ecoTypeCatID = etc.ecoTypeCatID  \n" +
                "		WHERE etc.category = 1 and e.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "	  select  \n" +
                "		e.ecoTypeValID  \n" +
                "        ,e.createdAt  \n" +
                "		,e.updatedAt  \n" +
                "		,e.ecoTypeCatID  \n" +
                "		,e.name  \n" +
                "		,e.displayOrder  \n" +
                "		,etc.name  AS ecoTypeCatName  \n" +
                "		,etc.category  \n" +
                "		,(CASE WHEN (e.noteRequired = 0) THEN 'NO'  \n" +
                "					WHEN (e.noteRequired = 1) THEN 'Yes' ELSE '' END) AS NoteRequired  \n" +
                "		,e.isDeleted  \n" +
                "		from ECO_Type_Values e  \n" +
                "		LEFT OUTER JOIN eco_type_category AS etc ON e.ecoTypeCatID = etc.ecoTypeCatID AND etc.isDeleted = 0  \n" +
                "		WHERE etc.category = 1  \n" +
                "		and e.ecoTypeValID = IFNULL(pId,e.ecoTypeValID)  \n" +
                "        AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(e.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(e.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetECODFMTypeForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetECODFMTypeForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM genericcategory gc  \n" +
                "		LEFT OUTER JOIN genericcategory AS pgc ON gc.parentGencCategoryID = pgc.gencCategoryID AND  pgc.isDeleted  = 0  \n" +
                "		WHERE  gc.categoryType = 'ECO/DFM Type' AND gc.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT gc.gencCategoryID  \n" +
                "			,gc.createdAt  \n" +
                "			,gc.updatedAt  \n" +
                "			,gc.gencCategoryName  \n" +
                "			,gc.gencCategoryCode  \n" +
                "			,gc.displayOrder  \n" +
                "			,CASE WHEN (gc.isActive = 1) THEN 'Active' ELSE 'Inactive' END STATUS  \n" +
                "            ,gc.isDeleted  \n" +
                "		FROM genericcategory gc  \n" +
                "		LEFT OUTER JOIN genericcategory AS pgc ON gc.parentGencCategoryID = pgc.gencCategoryID AND pgc.isDeleted = 0  \n" +
                "		WHERE  gc.categoryType = 'ECO/DFM Type' AND gc.gencCategoryID = IFNULL(pId,gc.gencCategoryID)  \n" +
                "				AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(gc.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(gc.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_RetrieveReserveStockRequestForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveReserveStockRequestForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM reserve_stock_request r  \n" +
                "			left outer join component ca on r.assyID = ca.id  \n" +
                "			left outer join component c on r.partID = c.id  \n" +
                "			left outer join mfgcodemst m on r.customerID = m.id  \n" +
                "			left outer join mfgcodemst mc on c.mfgcodeID = mc.id  \n" +
                "		WHERE r.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT r.id, 	r.createdAt,	r.updatedAt,  \n" +
                "			r.partID,  fun_getMFGTypeByID(c.mfgcodeID) mfgType, ca.PIDCode PIDCode,c.mfgPN,CONCAT('(', mc.mfgCode, ')', ' ',  mc.mfgName) mfg,  \n" +
                "			r.customerID, Concat('(', m.mfgCode, ') ', m.mfgName) customerName, m.isCustOrDisty,m.mfgType cusMfgType, r.nickName,  \n" +
                "			r.assyID, ca.mfgcodeID assyMFGcodeID, fun_getMFGTypeByID(ca.mfgcodeID) assyMFGType, ca.PIDCode assyPIDCode,  \n" +
                "			r.transactionDate,r.count,r.unit,r.uom,r.description,r.isDeleted  \n" +
                "			FROM reserve_stock_request r  \n" +
                "			left outer join component ca on r.assyID = ca.id  \n" +
                "			left outer join component c on r.partID = c.id  \n" +
                "			left outer join mfgcodemst m on r.customerID = m.id  \n" +
                "			left outer join mfgcodemst mc on c.mfgcodeID = mc.id  \n" +
                "			WHERE r.id = IFNULL(pId,r.id)  \n" +
                "				AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(r.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(r.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetRequestShipmentForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetRequestShipmentForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM shipping_request sr  \n" +
                "		JOIN shipping_requestdet srd on sr.id = srd.shippingRequestID and srd.isDeleted = 0  \n" +
                "		JOIN employees emp ON sr.requestedBy = emp.id AND emp.isDeleted = 0  \n" +
                "		JOIN workorder wo ON srd.woID = wo.woID AND wo.isDeleted = 0  \n" +
                "		JOIN component co ON wo.partID = co.id AND co.isDeleted = 0  AND IFNULL(co.category, 0) = 3  \n" +
                "		JOIN mfgcodemst mfg ON mfg.id = wo.customerID AND co.isDeleted = 0  \n" +
                "		LEFT JOIN mfgcodemst c_mcm on c_mcm.id = co.mfgcodeId  \n" +
                "		WHERE sr.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT 	srd.id,  \n" +
                "				srd.createdAt,  \n" +
                "                srd.updatedAt,  \n" +
                "				sr.id req_id,  \n" +
                "				sr.requestDate,  \n" +
                "				sr.requestedBy,  \n" +
                "				sr.note,  \n" +
                "				CONCAT( '(', emp.initialName,')', emp.firstName , ' ' , emp.lastName) requestedByName,  \n" +
                "				CASE WHEN sr.status = '1' THEN 'Published' ELSE 'Draft' END `status`,  \n" +
                "				CASE WHEN EXISTS(SELECT 1 FROM shipping_request_empdet sred WHERE sred.shippingRequestID = sr.id AND IFNULL(sred.isDeleted, 0) = 0  \n" +
                "					AND IFNULL(sred.isAck, 0) = 1) THEN 'Verified' ELSE 'Pending' END 'verificationStatus'  ,  \n" +
                "				co.id AS `partMasterID`,  \n" +
                "				srd.woID,  \n" +
                "				wo.woNumber,  \n" +
                "				wo.customerID,  \n" +
                "				co.PIDcode AS `PIDCode`,  \n" +
                "				co.mfgPN AS mfgPN,  \n" +
                "				c_mcm.mfgType AS mfgType,  \n" +
                "				mfg.mfgName mfgName,  \n" +
                "                srd.isDeleted  \n" +
                "		FROM shipping_request sr  \n" +
                "		JOIN shipping_requestdet srd on sr.id = srd.shippingRequestID and srd.isDeleted = 0  \n" +
                "		JOIN employees emp ON sr.requestedBy = emp.id AND emp.isDeleted = 0  \n" +
                "		JOIN workorder wo ON srd.woID = wo.woID AND wo.isDeleted = 0  \n" +
                "		JOIN component co ON wo.partID = co.id AND co.isDeleted = 0  AND IFNULL(co.category, 0) = 3  \n" +
                "		JOIN mfgcodemst mfg ON mfg.id = wo.customerID AND co.isDeleted = 0  \n" +
                "		LEFT JOIN mfgcodemst c_mcm on c_mcm.id = co.mfgcodeId  \n" +
                "		WHERE  sr.id = IFNULL(pId,sr.id)  \n" +
                "        AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(sr.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(sr.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							OR ((DATE(fun_CovnertDateTimeByTimezoneValue(srd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(srd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetWorkOrderOperationDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetWorkOrderOperationDetailForElastic`(  \n" +
                "	IN pWOOPID INT(11),  \n" +
                "    IN pWOID INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		from workorder_operation as wo  \n" +
                "		where IFNULL(wo.isDeleted,0) = 0;  \n" +
                "    ELSE  \n" +
                "		select  \n" +
                "			wo.woOPID  \n" +
                "			, wo.woID  \n" +
                "            , wo.createdAt  \n" +
                "			, wo.updatedAt  \n" +
                "			, w.woNumber  \n" +
                "			, wo.opNumber woOpNumber  \n" +
                "			, wo.opName woOpName  \n" +
                "			, wo.opID  \n" +
                "			, o.opNumber opNumber  \n" +
                "			, o.opName opName  \n" +
                "			, wo.opVersion  \n" +
                "			, gc.gencCategoryName as OperationType  \n" +
                "			, wo.operationTypeID  \n" +
                "			, po.opName as parentOperation  \n" +
                "			, wo.parentOPID  \n" +
                "			, wo.tabLimitAtTraveler  \n" +
                "			, wo.processTime  \n" +
                "			, wo.setupTime  \n" +
                "			, wo.perPieceTime  \n" +
                "			, wo.qtyControl  \n" +
                "			, wo.isPreProgrammingComponent  \n" +
                "			, wo.isRework  \n" +
                "			, wo.isTeamOperation  \n" +
                "			, wo.isIssueQty  \n" +
                "			, wo.cleaningType  \n" +
                "			, wo.opDescription  \n" +
                "			, wo.opWorkingCondition  \n" +
                "			, wo.opManagementInstruction  \n" +
                "			, wo.opDeferredInstruction  \n" +
                "			, wo.opDoes  \n" +
                "			, wo.opDonts  \n" +
                "            , wo.isDeleted  \n" +
                "            , wo.shortDescription  \n" +
                "            , (select group_concat(refDesig) from workorder_operation_refdesig wor where wor.woID = wo.woID and wor.woOpID = wo.woOPID and wor.isDeleted = 0) refDesigList  \n" +
                "		from workorder_operation as wo  \n" +
                "		left join workorder w on wo.woID = w.woID and IFNULL(w.isDeleted,0) = 0  \n" +
                "		left join genericcategory gc on wo.operationTypeID = gc.gencCategoryId and IFNULL(gc.isDeleted,0) = 0  \n" +
                "		left join operations o on o.opID = wo.opID and IFNULL(o.isDeleted,0) = 0  \n" +
                "		left join operations po on po.opID = wo.parentOPID and IFNULL(po.isDeleted,0) = 0  \n" +
                "		where  wo.woOPID  = IFNULL(pWOOPID,wo.woOPID) and wo.woID  = IFNULL(pWOID,wo.woID) AND  \n" +
                "		(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(wo.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(wo.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetDefectCategoryForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetDefectCategoryForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		from defectcategory as dc  \n" +
                "			where dc.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		select  dc.defectCatId,  \n" +
                "				dc.createdAt,  \n" +
                "				dc.updatedAt ,  \n" +
                "				dc.defectCatName,  \n" +
                "				dc.description defectDescription,  \n" +
                "                dc.isDeleted  \n" +
                "		from defectcategory as dc  \n" +
                "		where dc.defectCatId = IFNULL(pId,dc.defectCatId)  \n" +
                "        AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(dc.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(dc.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetDefectCategoryForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetDefectCategoryForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		from defectcategory as dc  \n" +
                "			where dc.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		select  dc.defectCatId,  \n" +
                "				dc.createdAt,  \n" +
                "				dc.updatedAt ,  \n" +
                "				dc.defectCatName,  \n" +
                "				dc.description defectDescription,  \n" +
                "                dc.isDeleted  \n" +
                "		from defectcategory as dc  \n" +
                "		where dc.defectCatId = IFNULL(pId,dc.defectCatId)  \n" +
                "        AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(dc.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(dc.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetEntityForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetEntityForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		from entity as e  \n" +
                "		where e.isDeleted = 0  \n" +
                "		AND e.systemGenerated = 0;  \n" +
                "	ELSE  \n" +
                "		select  e.entityID,  \n" +
                "				e.createdAt,  \n" +
                "				e.updatedAt,  \n" +
                "				e.entityName,  \n" +
                "				e.remark,  \n" +
                "                e.isDeleted  \n" +
                "		from entity as e  \n" +
                "		where e.systemGenerated = 0  \n" +
                "		AND  e.entityID = IFNULL(pId,e.entityID)  \n" +
                "        AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(e.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(e.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetSupplierQuoteDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierQuoteDetailForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM  \n" +
                "			supplier_quote_parts_det sqpd  \n" +
                "		LEFT JOIN supplier_quote_mst s ON sqpd.supplierQuoteMstID=s.id AND s.isDeleted = 0  \n" +
                "		LEFT JOIN 	component c ON sqpd.partID = c.id AND c.isDeleted = 0  \n" +
                "		LEFT JOIN	component sc ON sqpd.supplierPartID = sc.id AND c.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "		LEFT JOIN mfgcodemst mfc ON c.mfgcodeID = mfc.id AND mfc.isDeleted = 0  \n" +
                "		LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "		WHERE sqpd.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT  \n" +
                "			s.id AS supplierQuoteMstID,  \n" +
                "			sqpd.id AS supplierQuotePartDetID,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "			fun_getMfgCodeAndNameByID(m.id) supplier,  \n" +
                "			s.supplierID,  \n" +
                "			sqpd.partID,  \n" +
                "			sqpd.createdAt,  \n" +
                "			sqpd.updatedAt,  \n" +
                "			c.mfgPN AS mfgPN,  \n" +
                "			c.mfgcodeID,  \n" +
                "			sc.mfgcodeID AS supplierMfgcodeID,  \n" +
                "			sc.mfgPN AS supplierPN,  \n" +
                "			sqpd.supplierPartID,  \n" +
                "			s.quoteNumber,  \n" +
                "			s.quoteDate,  \n" +
                "			s.reference,  \n" +
                "			(  \n" +
                "			 CASE  WHEN (s.quoteStatus = 'D') THEN  \n" +
                "			   'Draft'  \n" +
                "			  WHEN (s.quoteStatus = 'P') THEN  \n" +
                "			   'Published'  \n" +
                "			  ELSE  \n" +
                "			   ''  \n" +
                "			 END  \n" +
                "			) AS `quoteStatus`,  \n" +
                "			(  \n" +
                "			CASE  \n" +
                "				WHEN (`sqpd`.`isActive` = 0) THEN 'Inactive'  \n" +
                "				WHEN (`sqpd`.`isActive` = 1) THEN 'Active'  \n" +
                "				ELSE ''  \n" +
                "				END  \n" +
                "			) AS `isActive`,  \n" +
                "			c.isCustom,  \n" +
                "			mfc.isCustOrDisty,  \n" +
                "			sc.isCustom AS isCustomSupplier,  \n" +
                "            sqpd.isDeleted  \n" +
                "		FROM  \n" +
                "			supplier_quote_parts_det sqpd  \n" +
                "		LEFT JOIN supplier_quote_mst s ON sqpd.supplierQuoteMstID=s.id AND s.deletedAt IS NULL  \n" +
                "		LEFT JOIN 	component c ON sqpd.partID = c.id AND c.deletedAt IS NULL  \n" +
                "		LEFT JOIN	component sc ON sqpd.supplierPartID = sc.id AND c.deletedAt IS NULL AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "		LEFT JOIN mfgcodemst mfc ON c.mfgcodeID = mfc.id AND mfc.deletedAt IS NULL  \n" +
                "		LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.deletedAt IS NULL  \n" +
                "		WHERE sqpd.id = IFNULL(pId,sqpd.Id)  \n" +
                "        AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(sqpd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(sqpd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetCalibrationDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCalibrationDetailForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		from calibration_details cd  \n" +
                "		join equipment e ON e.eqpID = cd.refEqpID  \n" +
                "		where cd.isDeleted = 0  ;  \n" +
                "	ELSE  \n" +
                "		select cd.id,  \n" +
                "				cd.refEqpID,  \n" +
                "				cd.createdAt,  \n" +
                "				cd.updatedAt,  \n" +
                "				e.assetName,  \n" +
                "				e.eqpMake,  \n" +
                "				e.eqpModel,  \n" +
                "				e.eqpYear,  \n" +
                "				case when cd.calibrationType = 1 then  \n" +
                "						'Calibration'  \n" +
                "					when  cd.calibrationType = 2 then  \n" +
                "						'Repair'  \n" +
                "				end calibrationType,  \n" +
                "				cd.calibrationDate,  \n" +
                "				cd.calibrationExpirationDate,  \n" +
                "				cd.calibrationComments,  \n" +
                "                cd.isDeleted  \n" +
                "		  from calibration_details cd  \n" +
                "		  join equipment e ON e.eqpID = cd.refEqpID  \n" +
                "		 where cd.id = IFNULL(pId,cd.id)  \n" +
                "			AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(cd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetChartOfAccountsForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetChartOfAccountsForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM `acct_acctmst` AS am  \n" +
                "		   JOIN `acct_classmst` AS acm  \n" +
                "				ON am.`sub_class_id` = acm.`class_id`  \n" +
                "				AND acm.`isDeleted`=0  \n" +
                "			where am.`isDeleted` = 0 ;  \n" +
                "	ELSE  \n" +
                "		SELECT am.`acct_id`, am.`acct_name`, am.`acct_code`, acm.`class_name` AS account_type,  \n" +
                "			(CASE WHEN (am.`isSubAccount` = 0) THEN 'No'  \n" +
                "						WHEN (am.`isSubAccount` = 1) THEN 'Yes' ELSE '' END) AS isSubAccount,  \n" +
                "			aam.`acct_name` AS parent_account_name, am.`description`, am.`systemid`,  \n" +
                "            am.`isDeleted`  \n" +
                "			,am.createdAt  \n" +
                "			,am.updatedAt  \n" +
                "		  FROM `acct_acctmst` AS am  \n" +
                "		   JOIN `acct_classmst` AS acm  \n" +
                "				ON am.`sub_class_id` = acm.`class_id`  \n" +
                "				AND acm.`isDeleted`=0  \n" +
                "			LEFT JOIN `acct_acctmst` AS aam  \n" +
                "				ON am.`parent_acct_id` = aam.`acct_id`  \n" +
                "			where am.`acct_id` = IFNULL(pId,am.`acct_id`)  \n" +
                "            AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(am.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(am.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetAccountTypeForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAccountTypeForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM `acct_classmst` AS cm  \n" +
                "			WHERE cm.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT cm.`class_id`, cm.`class_name`, cm.`class_code`,  \n" +
                "			(CASE WHEN (cm.`isSubType` = 0) THEN 'No'  \n" +
                "				WHEN (cm.`isSubType` = 1) THEN 'Yes' ELSE '' END) AS isSubType,  \n" +
                "			acm.`class_name` AS parent_class_name, cm.`systemid`, cm.`description`,  \n" +
                "			(CASE WHEN (cm.`system_defined` = 0) THEN 'No'  \n" +
                "				WHEN (cm.`system_defined` = 1) THEN 'Yes' ELSE '' END) AS system_defined,  \n" +
                "			cm.isDeleted  \n" +
                "			,cm.createdAt  \n" +
                "			,cm.updatedAt  \n" +
                "		FROM `acct_classmst` AS cm  \n" +
                "		LEFT JOIN `acct_classmst` AS acm  \n" +
                "				ON cm.`parent_class_id` = acm.`class_id`  \n" +
                "				AND acm.`isDeleted`=0  \n" +
                "		WHERE cm.`class_id` = IFNULL(pId,cm.`class_id`)  \n" +
                "            AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(cm.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cm.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetPaymentTypeCategoryForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPaymentTypeCategoryForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM `genericcategory`  \n" +
                "		WHERE  `categoryType`='Payment Type Category' AND `isDeleted` = 0 AND `gencCategoryID` = IFNULL(pId,`gencCategoryID`);  \n" +
                "	ELSE  \n" +
                "		SELECT `gencCategoryID`, `gencCategoryName`, `gencCategoryCode`,  \n" +
                "			(CASE WHEN (`isActive` = 0) THEN 'Inactive'  \n" +
                "				WHEN (`isActive` = 1) THEN 'Active' ELSE '' END) AS isActive,  \n" +
                "			(CASE WHEN (`systemGenerated` = 0) THEN 'No'  \n" +
                "				WHEN (`systemGenerated` = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "			isDeleted  \n" +
                "			,createdAt  \n" +
                "			,updatedAt  \n" +
                "		FROM `genericcategory`  \n" +
                "		WHERE  `categoryType`='Payment Type Category' AND `gencCategoryID` = IFNULL(pId,`gencCategoryID`)  \n" +
                "            AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetCustomerInvoiceDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    IN pTransType VARCHAR(1),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM customer_packingslip cp  \n" +
                "			JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID = cp.id AND cpd.isDeleted = 0  \n" +
                "			LEFT JOIN component co  ON co.id = cpd.partId AND co.isDeleted = 0  \n" +
                "			LEFT JOIN employees emp ON emp.id=cp.salesCommissionTo AND emp.isdeleted=0  \n" +
                "		WHERE cp.isDeleted = 0 AND cp.transType = IFNULL(pTransType, cp.transType);  \n" +
                "	ELSE  \n" +
                "		SELECT  cp.id AS custInvMstID,  \n" +
                "			cpd.id AS customerInvDetID,  \n" +
                "            cpd.createdAt,  \n" +
                "			cpd.updatedAt,  \n" +
                "			cp.invoiceNumber,  \n" +
                "			cp.invoiceDate,  \n" +
                "			cp.poNumber,  \n" +
                "			cp.poDate,  \n" +
                "			cp.poRevision,  \n" +
                "			cp.soNumber,  \n" +
                "			cp.soDate,  \n" +
                "			cp.packingSlipNumber,  \n" +
                "			cp.packingSlipDate,  \n" +
                "			(SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = cp.id AND packing.isDeleted = 0) packingSlipID,  \n" +
                "			fun_getFOBById(cp.freeOnBoardId) FOBName,  \n" +
                "			fun_getIntToText(cp.isLocked) `Locked`,  \n" +
                "			fun_getGenericCategoryNameByID(cp.termsId) terms,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethod,  \n" +
                "			cpd.reflineID,  \n" +
                "			cpd.partId ,  \n" +
                "			co.mfgPn mfgPn,  \n" +
                "			fun_getAssyPIDCodeByID(cpd.partId) AS assyID,  \n" +
                "			fun_getMFGTypeByID(co.mfgcodeID) mfgType,  \n" +
                "			fun_getAssyNickNameByID(cpd.partId) nickName,  \n" +
                "			cpd.shippedQty , cpd.shipQty, cp.systemID,  \n" +
                "			cp.termsID,  \n" +
                "			(CASE WHEN cp.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cp.termsID) END) AS termsDisplayText ,  \n" +
                "			cp.shippingMethodId ,  \n" +
                "			cp.salesCommissionTo ,  \n" +
                "			CONCAT('(',emp.initialName,')',' ',IFNULL(emp.firstName,''),' ',IFNULL(emp.lastName,'')) salesCommissionToDisplayText,  \n" +
                "			cp.headerComment, cp.packingSlipComment,  \n" +
                "			cpd.internalComment, shippingNotes ,  \n" +
                "			IFNULL(cp.refSalesOrderID,0) refSalesOrderID ,  \n" +
                "			cpd.assyDescription , cpd.custPOLineID,  \n" +
                "			cp.creditMemoNumber, cp.creditMemoDate, cp.refDebitMemoNumber,  \n" +
                "			cp.refDebitMemoDate, cp.rmaNumber, cp.transType  ,  \n" +
                "			cp.customerID,  \n" +
                "			fun_getMfgNameByID(cp.customerID) customerName,  \n" +
                "			fun_getMfgCodeByID(cp.customerID) customerCode ,  \n" +
                "			(select GROUP_CONCAT(cpstn.trackNumber SEPARATOR ', ') from customer_packing_slip_track_number cpstn where cpstn.refCustPackingSlipID = cp.id AND cpstn.isDeleted=0) AS trackingNumberList ,  \n" +
                "			(CASE WHEN cp.packingSlipType = 1 OR cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "					WHEN  cp.packingSlipType = 3 THEN 'MISC Invoice' END)invoiceType ,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "            cp.isDeleted  ,  \n" +
                "            cp.carrierId ,fun_getGenericCategoryCodeNameByID(cp.carrierId) AS carrierDisplayText,  \n" +
                "            cp.carrierAccountNumber  \n" +
                "		FROM customer_packingslip cp  \n" +
                "			JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID = cp.id AND cpd.isDeleted = 0  \n" +
                "			LEFT JOIN component co  ON co.id = cpd.partId AND co.isDeleted = 0  \n" +
                "			LEFT JOIN employees emp ON emp.id=cp.salesCommissionTo AND emp.isdeleted=0  \n" +
                "		WHERE cp.id= IFNULL(pId,cp.id) AND cp.transType = IFNULL(pTransType, cp.transType)  \n" +
                "			AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							OR ((DATE(fun_CovnertDateTimeByTimezoneValue(cpd.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(cpd.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetCustomerPaymentDetForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentDetForElastic`(  \n" +
                "	IN pPaymentMstID INT,  \n" +
                "	IN pRefPaymentMode VARCHAR(5),  \n" +
                "	IN pFromdate DATE,  \n" +
                "	IN pTodate DATE,  \n" +
                "	IN pRequiredCount TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	IF (pRequiredCount) THEN  \n" +
                "		SELECT COUNT(1) totalCount  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		WHERE psip.refPaymentMode = IFNULL(pRefPaymentMode,psip.refPaymentMode)  \n" +
                "		AND psip.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT  \n" +
                "			psip.id,  \n" +
                "			psip.mfgcodeID, cps1.id AS custCreditMemoID , cps1.creditMemoNumber ,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cps1.creditMemoDate, v_TimeZone, v_DateTimeDisplayFormat) AS creditMemoDate ,  \n" +
                "			fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, v_mfgNameFormat) customerCodeName,  \n" +
                "			psip.isPaymentVoided, psip.refPaymentMode ,  \n" +
                "			fun_getIntToText(psip.isPaymentVoided) AS isPaymentVoidedConvertedValue,  \n" +
                "			psip.voidPaymentReason,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy ,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_getRoleByID(psip.updateByRoleId) ELSE NULL END) AS voidedByRole,  \n" +
                "			(CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone, v_DateTimeDisplayFormat)  \n" +
                "									ELSE NULL END) AS voidedAt,  \n" +
                "			psip.refVoidedPaymentNumber,  \n" +
                "			psip.refVoidedPaymentId,  \n" +
                "			psip.paymentNumber,  \n" +
                "			psip.bankName,  \n" +
                "			psip.bankAccountNo,  \n" +
                "			psip.paymentType,  \n" +
                "			psip.bankAccountMasID,  \n" +
                "			psip.systemId ,  \n" +
                "			gc.gencCategoryName paymentMethod,  \n" +
                "			gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "			psip.paymentDate,  \n" +
                "			psip.accountReference,  \n" +
                "			(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "			WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "			fun_getUserNameByID(psip.lockedBy) lockedBy , fun_getRoleByID(psip.lockedByRoleId) lockedByRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) lockedAt,  \n" +
                "			invPayDetTemp.invoiceNumberList,  \n" +
                "			psip.remark  , psip.depositBatchNumber,  \n" +
                "			psip.isDeleted,  \n" +
                "			(CASE WHEN psip.refPaymentMode IN ('WOFF','CR') THEN (SELECT modeName FROM `generic_transmode_mst` WHERE id = psip.refGencTransModeID)  \n" +
                "				ELSE NULL END) transactionModeName,  \n" +
                "			payRefundDetTemp.paymentNumListAgainstRefund,  \n" +
                "			cmRefundDetTemp.CMNumListAgainstRefund,  \n" +
                "			psip.createdAt,  \n" +
                "			psip.updatedAt  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN mfgcodemst mcm ON mcm.id = psip.mfgcodeID AND mcm.isDeleted = 0  \n" +
                "			LEFT JOIN customer_packingslip cps1 ON cps1.id = refCustCreditMemoID AND cps1.transType = 'C' AND cps1.isDeleted = 0  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "			LEFT JOIN generic_transmode_mst tm ON psip.refGencTransModeID = tm.id  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(cps.invoiceNumber SEPARATOR ', ') AS invoiceNumberList  \n" +
                "				    FROM packingslip_invoice_payment_det psipd  \n" +
                "					JOIN customer_packingslip cps ON psipd.refCustPackingslipInvoiceID = cps.id AND cps.isDeleted = 0  \n" +
                "				     WHERE psipd.refCustPackingslipInvoiceID IS NOT NULL  \n" +
                "				     AND psipd.isDeleted = 0  \n" +
                "				      GROUP BY psipd.refPayementid) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid, GROUP_CONCAT(psipt.paymentNumber SEPARATOR ', ') AS paymentNumListAgainstRefund  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "			LEFT JOIN (SELECT psipd.refPayementid,  GROUP_CONCAT(cps.creditMemoNumber SEPARATOR ', ') AS CMNumListAgainstRefund  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  \n" +
                "					GROUP BY psipd.refPayementid) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "            WHERE psip.id = IFNULL(pPaymentMstID,psip.id)  \n" +
                "            AND psip.refPaymentMode = IFNULL(pRefPaymentMode,psip.refPaymentMode)  \n" +
                "            AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(psip.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "					OR (DATE(fun_CovnertDateTimeByTimezoneValue(psip.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "				ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetSupplierPaymentDetailsForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSupplierPaymentDetailsForElastic`(  \n" +
                "	IN pPaymentMstID INT,  \n" +
                "    IN pRefPaymentMode VARCHAR(5),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    IF (pRequiredCount) THEN  \n" +
                "		SELECT count(1) totalCount  \n" +
                "		  FROM packingslip_invoice_payment psip  \n" +
                "		 WHERE psip.refPaymentMode in ('P','RR') /*added to restrict customer payment and refund entry when pRefPaymentMode is null or wrong*/  \n" +
                "           and psip.refPaymentMode = pRefPaymentMode  \n" +
                "           AND psip.isDeleted = 0;  \n" +
                "	ELSE  \n" +
                "		SELECT psip.id,  \n" +
                "				psip.refPaymentMode,  \n" +
                "				psip.systemId,  \n" +
                "                psip.accountReference,  \n" +
                "                psip.mfgcodeID,  \n" +
                "                fun_getMfgCodeAndNameByID(psip.mfgcodeID) supplierCodeName,  \n" +
                "                psip.paymentNumber,  \n" +
                "				psip.paymentType,  \n" +
                "				gc.gencCategoryName paymentMethod,  \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "				psip.bankName,  \n" +
                "				psip.bankAccountNo,  \n" +
                "				psip.bankAccountMasID,  \n" +
                "				psip.paymentDate,  \n" +
                "                psip.depositBatchNumber,  \n" +
                "                psip.offsetAmount,  \n" +
                "				psip.remark,  \n" +
                "                psip.isPaymentVoided,  \n" +
                "                CASE WHEN psip.isPaymentVoided = 1 THEN 'Voided'  \n" +
                "					when psip.isPaymentVoided = 0 THEN 'Paid' END isPaymentVoidedConvertedValue,  \n" +
                "				psip.voidPaymentReason,  \n" +
                "				(CASE WHEN psip.isPaymentVoided THEN fun_getUserNameByID(psip.updatedBy) ELSE NULL END) AS voidedBy,  \n" +
                "                (CASE WHEN psip.isPaymentVoided THEN fun_ApplyCommonDateTimeFormatByParaValue(psip.UpdatedAt, v_TimeZone, v_DateTimeDisplayFormat)  \n" +
                "									ELSE NULL END) AS voidedAt,  \n" +
                "                psip.refVoidedPaymentNumber,  \n" +
                "				psip.refVoidedPaymentId,  \n" +
                "				(CASE WHEN psip.lockStatus = 'NA' THEN 'Not Applicable' WHEN psip.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "					WHEN psip.lockStatus = 'LC' THEN 'Locked' END) AS lockStatusConvertedValue ,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(psip.lockedAt, v_TimeZone, v_DateTimeDisplayFormat) lockedAt,  \n" +
                "				fun_getUserNameByID(psip.lockedBy) lockedBy,  \n" +
                "                invPayDetTemp.invoiceNumberList,  \n" +
                "                invPayDetTemp.creditMemoNumberList,  \n" +
                "				invPayDetTemp.debitMemoNumberList,  \n" +
                "                tm.modeName as transactionModeName,  \n" +
                "				psip.createdAt,  \n" +
                "				psip.updatedAt  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "			LEFT JOIN genericcategory gc ON psip.paymentType = gc.gencCategoryID AND gc.isDeleted = 0  \n" +
                "            LEFT JOIN generic_transmode_mst tm ON psip.refGencTransModeID = tm.id  \n" +
                "			LEFT JOIN (select psipd.refPayementid,  \n" +
                "								GROUP_CONCAT(ps.invoiceNumber SEPARATOR ', ') invoiceNumberList,  \n" +
                "								GROUP_CONCAT(ps.creditMemoNumber SEPARATOR ', ') creditMemoNumberList,  \n" +
                "								GROUP_CONCAT(ps.debitMemoNumber SEPARATOR ', ') debitMemoNumberList  \n" +
                "						  from packingslip_invoice_payment_det psipd  \n" +
                "						  join packing_slip_material_receive ps ON ps.id = psipd.refPackingslipInvoiceID  \n" +
                "						  group by psipd.refPayementid) invPayDetTemp  \n" +
                "				ON psip.id = invPayDetTemp.refPayementid  \n" +
                "            WHERE psip.id = IFNULL(pPaymentMstID,psip.id)  \n" +
                "            AND psip.refPaymentMode in ('P','RR') /*added to restrict customer payment and refund entry when pRefPaymentMode is null or wrong*/  \n" +
                "            and psip.refPaymentMode = IFNULL(pRefPaymentMode, psip.refPaymentMode)  \n" +
                "            AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "							((DATE(fun_CovnertDateTimeByTimezoneValue(psip.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "								or (DATE(fun_CovnertDateTimeByTimezoneValue(psip.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "							ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetTransactionModesForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetTransactionModesForElastic`(  \n" +
                "	IN pId INT(11),  \n" +
                "	IN pmodeType varchar(2),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1)  \n" +
                "		FROM `generic_transmode_mst`  \n" +
                "		WHERE `isDeleted` = 0 AND `id` = IFNULL(pId,`id`) AND `modeType` = IFNULL(pmodeType,`modeType`) ;  \n" +
                "	ELSE  \n" +
                "		SELECT tm.id, tm.modeType, tm.modeName, tm.modeCode, tm.description, am.acct_name,  \n" +
                "			(CASE WHEN (tm.isActive = 0) THEN 'Inactive'  \n" +
                "				WHEN (tm.isActive = 1) THEN 'Active' ELSE '' END) AS isActive,  \n" +
                "			(CASE WHEN (tm.systemGenerated = 0) THEN 'No'  \n" +
                "				WHEN (tm.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "			tm.isDeleted  \n" +
                "			,tm.createdAt  \n" +
                "			,tm.updatedAt  \n" +
                "		FROM `generic_transmode_mst` AS tm  \n" +
                "			LEFT OUTER JOIN acct_acctmst AS am ON tm.ref_acctid = am.acct_id  \n" +
                "				AND am.deletedAt IS NULL  \n" +
                "		WHERE `id` = IFNULL(pId,`id`) AND `modeType` = IFNULL(pmodeType,`modeType`)  \n" +
                "            AND (CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(tm.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "					or (DATE(fun_CovnertDateTimeByTimezoneValue(tm.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "				ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetSalesOrderDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    IN psoDetId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM  \n" +
                "			salesordermst AS som  \n" +
                "				INNER JOIN  \n" +
                "			salesorderdet AS sod ON som.id = sod.refSalesOrderID  \n" +
                "				AND (sod.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			component AS assyDet ON sod.partID = assyDet.id  \n" +
                "				AND (assyDet.deletedAt IS NULL)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			mfgCodemst AS cust ON som.customerID = cust.id  \n" +
                "				AND (cust.deletedAt IS NULL)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			freeonboardmst AS fob ON som.freeOnBoardId = fob.id  \n" +
                "				AND (fob.isDeleted = false)  \n" +
                "		WHERE som.isDeleted = FALSE;  \n" +
                "    ELSE  \n" +
                "		SELECT  \n" +
                "			som.id,  \n" +
                "			som.salesOrderNumber,  \n" +
                "			som.poNumber,  \n" +
                "			som.poDate,  \n" +
                "			som.soDate,  \n" +
                "			som.customerID,  \n" +
                "			som.freeOnBoardId,  \n" +
                "			sod.id sodId,  \n" +
                "			sod.partID,  \n" +
                "			sod.materialDueDate,  \n" +
                "			sod.materialTentitiveDocDate,  \n" +
                "			sod.qty,  \n" +
                "			sod.isHotJob,  \n" +
                "			assyDet.PIDCode,  \n" +
                "			sod.partID,  \n" +
                "			assyDet.mfgPN,  \n" +
                "			assyDet.mfgPNDescription,  \n" +
                "			assyDet.nickname,  \n" +
                "			cust.mfgCode,  \n" +
                "			cust.isCustOrDisty,  \n" +
                "			cust.mfgType,  \n" +
                "			cust.mfgName,  \n" +
                "			fob.name AS fobName,  \n" +
                "            sod.isDeleted,  \n" +
                "			sod.createdAt,  \n" +
                "			sod.updatedAt  \n" +
                "		FROM  \n" +
                "			salesordermst AS som  \n" +
                "				INNER JOIN  \n" +
                "			salesorderdet AS sod ON som.id = sod.refSalesOrderID  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			component AS assyDet ON sod.partID = assyDet.id  \n" +
                "				AND (assyDet.deletedAt IS NULL)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			mfgCodemst AS cust ON som.customerID = cust.id  \n" +
                "				AND (cust.deletedAt IS NULL)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			freeonboardmst AS fob ON som.freeOnBoardId = fob.id  \n" +
                "				AND (fob.isDeleted = false)  \n" +
                "		WHERE  \n" +
                "			som.id = IFNULL(pId,som.id) AND sod.id = IFNULL(psoDetId,sod.id) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(som.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(som.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						OR ((DATE(fun_CovnertDateTimeByTimezoneValue(sod.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(sod.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	end if;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetContactPersonForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetContactPersonForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    IN pFromdate DATE,  \n" +
                "    IN pTodate DATE,  \n" +
                "    IN pRequiredCount TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE vEmployeeNameFormat INT;  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			COUNT(1)  \n" +
                "		FROM `contactperson`  \n" +
                "		WHERE `isDeleted` = 0 AND `personId` = IFNULL(pId,`personId`);  \n" +
                "	ELSE  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, ecp.employeeId AS refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName,vContPersonNameFormat) fullName, 'Personnel' AS refEntityType,  \n" +
                "				NULL AS refName, fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName, vEmployeeNameFormat) personnels,  \n" +
                "				fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "				(SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) phoneNumberList,  \n" +
                "				NULL AS isDefault,  \n" +
                "				NULL AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) STATUS,  \n" +
                "				cp.isDeleted,  \n" +
                "				cp.createdAt,  \n" +
                "				cp.updatedAt  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "			LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId AND ecp.isDeleted = 0 AND ecp.releasedAt IS NULL  \n" +
                "			LEFT JOIN employees emp ON emp.id = ecp.employeeId AND emp.isDeleted = 0  \n" +
                "				WHERE `personId` = IFNULL(pId,`personId`) AND cp.refTableName ='employees'  \n" +
                "				AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "						OR (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "					ELSE 1 = 1 END)  \n" +
                "		UNION ALL  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, cp.refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName,vContPersonNameFormat) fullName,  \n" +
                "				(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' AND mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "                fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,vMfgCodeFormat) AS refName,  NULL AS personnels,  \n" +
                "                fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "                (SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) phoneNumberList,  \n" +
                "				(CASE WHEN (cp.isDefault = 0) THEN 'No'  \n" +
                "					WHEN (cp.isDefault = 1) THEN 'Yes' ELSE '' END) AS isDefault,  \n" +
                "				(CASE WHEN (cp.isPrimary = 0) THEN 'No'  \n" +
                "					WHEN (cp.isPrimary = 1) THEN 'Yes' ELSE '' END) AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) STATUS,  \n" +
                "				cp.isDeleted,  \n" +
                "				cp.createdAt,  \n" +
                "				cp.updatedAt  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID AND mfg.isDeleted = 0  \n" +
                "			WHERE `personId` = IFNULL(pId,`personId`)  \n" +
                "				AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "						OR (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5912,'2.00','V1',' User Story 40378: Enterprise search change for Order By (created At/Updated At) & Full storage Case - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break;
        case 5912:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_packing_slip_material_receive_det`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_packing_slip_material_receive_det`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE v_StartIndex INT;  \n" +
                "		DECLARE v_EndIndex INT;  \n" +
                "		DECLARE v_Id VARCHAR(10);  \n" +
                "		DECLARE v_InvoiceId INT;  \n" +
                "		DECLARE v_InvoiceDetailId INT;  \n" +
                "		DECLARE v_MainInvoiceId INT;  \n" +
                "		DECLARE v_MemoIds VARCHAR(10000);  \n" +
                "		DECLARE v_UpdatedMemoIds VARCHAR(10000);  \n" +
                "		DECLARE v_InvoiceTotalDue DECIMAL(18,8);  \n" +
                "		DECLARE v_CurrentLineExtendedPrice DECIMAL(18,8);  \n" +
                "		DECLARE v_CountOfMemo INT;  \n" +
                "		DECLARE v_IsMemoForPrice TINYINT;  \n" +
                "		DECLARE v_IsMemoForQty TINYINT;  \n" +
                "		SET v_StartIndex = 0;  \n" +
                "		SET @SQl2 = CONCAT('UPDATE packing_slip_material_receive_part_inspection_det SET isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" WHERE lineId IN(', IDs, ') AND deletedAt IS NULL');  \n" +
                "		PREPARE stmt2 FROM @SQL2;  \n" +
                "        EXECUTE stmt2;  \n" +
                "		DEALLOCATE PREPARE stmt2;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Split_Ids_String_Into_Table;  \n" +
                "		CREATE TEMPORARY TABLE temp_Split_Ids_String_Into_Table (id VARCHAR(10));  \n" +
                "		SET @SQL3 = CONCAT(\"INSERT INTO temp_Split_Ids_String_Into_Table (id) values ('\", REPLACE((IDs),',', \"'),('\"),\"');\");  \n" +
                "        PREPARE stmt3 FROM @SQL3;  \n" +
                "		EXECUTE stmt3;  \n" +
                "        DEALLOCATE PREPARE stmt3;  \n" +
                "		SELECT COUNT(1) INTO v_EndIndex FROM temp_Split_Ids_String_Into_Table;  \n" +
                "		WHILE v_StartIndex < v_EndIndex DO  \n" +
                "			SELECT id INTO v_Id FROM temp_Split_Ids_String_Into_Table LIMIT 1 OFFSET v_StartIndex;  \n" +
                "			SELECT refPackingSlipMaterialRecID, refPackingSlipDetId, isMemoForPrice, isMemoForQty INTO v_InvoiceId, v_InvoiceDetailId, v_IsMemoForPrice, v_IsMemoForQty FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;  \n" +
                "            SELECT COUNT(1) INTO v_CountOfMemo FROM packing_slip_material_receive WHERE id = v_InvoiceId AND (receiptType = 'C' OR receiptType = 'D');  \n" +
                "			IF (v_CountOfMemo > 0) THEN  \n" +
                "				SELECT refPackingSlipMaterialRecID, refCreditDebitInvoiceNo INTO v_MainInvoiceId, v_MemoIds FROM packing_slip_material_receive_det WHERE id = v_InvoiceDetailId AND isDeleted = 0;  \n" +
                "				IF (v_MemoIds IS NOT NULL) THEN  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_Split_String_Into_Table;  \n" +
                "					CREATE TEMPORARY TABLE temp_Split_String_Into_Table (lineId VARCHAR(10));  \n" +
                "                    SET @SQL4 = CONCAT(\"INSERT INTO temp_Split_String_Into_Table (lineId) values ('\", REPLACE((v_MemoIds),',', \"'),('\"),\"');\");  \n" +
                "					PREPARE stmt4 FROM @SQL4;  \n" +
                "                    EXECUTE stmt4;  \n" +
                "                    DEALLOCATE PREPARE stmt4;  \n" +
                "					UPDATE 	packing_slip_material_receive SET 	`status` = 'I', invoiceApprovalStatus = (case when (invoiceApprovalStatus = 1 or invoiceRequireManagementApproval = 1) then 2 else invoiceApprovalStatus end)  \n" +
                "					WHERE 	id = v_MainInvoiceId AND receiptType = 'I' AND isDeleted = 0;  \n" +
                "					SELECT IFNULL(invoiceTotalDue, 0) INTO v_InvoiceTotalDue FROM packing_slip_material_receive WHERE id = v_InvoiceId AND isDeleted = 0;  \n" +
                "					SELECT ABS(IFNULL(extendedPrice, 0)) INTO v_CurrentLineExtendedPrice FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;  \n" +
                "					UPDATE 	packing_slip_material_receive SET 	`status` = 'A', invoiceTotalDue = (v_InvoiceTotalDue - v_CurrentLineExtendedPrice)  \n" +
                "					WHERE 	id = v_InvoiceId AND isDeleted = 0;  \n" +
                "					UPDATE 	packing_slip_material_receive ps  \n" +
                "					SET 	ps.`status` = (CASE WHEN ps.packingSlipModeStatus = 'D' THEN 'I' ELSE 'IR' END)  \n" +
                "					WHERE 	ps.refPackingSlipNumberForInvoice = v_MainInvoiceId AND ps.receiptType = 'P' AND ps.isDeleted = 0;  \n" +
                "					UPDATE 	packing_slip_material_receive_det SET 	isDeleted = 1, deletedBy = deletedBy, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "                    WHERE 	id = v_Id AND isDeleted = 0;  \n" +
                "					IF ((SELECT COUNT(1) FROM packing_slip_material_receive_det WHERE refPackingSlipMaterialRecID = v_InvoiceId AND refPackingSlipDetId = v_InvoiceDetailId AND isDeleted = 0) = 0) THEN  \n" +
                "						DELETE FROM temp_Split_String_Into_Table WHERE lineId = v_InvoiceId;  \n" +
                "					END IF;  \n" +
                "					SELECT GROUP_CONCAT(lineId) INTO v_UpdatedMemoIds  FROM temp_Split_String_Into_Table;  \n" +
                "					UPDATE 	packing_slip_material_receive_det SET 	`status` = 'D', refCreditDebitInvoiceNo = v_UpdatedMemoIds, isMemoForPrice = (CASE WHEN v_IsMemoForPrice = 1 THEN 0 ELSE isMemoForPrice END),  \n" +
                "					isMemoForQty = (CASE WHEN v_IsMemoForQty = 1 THEN 0 ELSE isMemoForQty END), difference = (CASE WHEN v_IsMemoForPrice = 1 THEN NULL ELSE difference END), differenceQty = (CASE WHEN v_IsMemoForQty = 1 THEN NULL ELSE differenceQty END)  \n" +
                "					WHERE 	id = v_InvoiceDetailId AND isDeleted = 0;  \n" +
                "				ELSE  \n" +
                "					IF ((SELECT receiptType FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = v_InvoiceId AND isDeleted = 0) = 'R') THEN  \n" +
                "						UPDATE 	packing_slip_material_receive SET 	`status` = 'WC', packingSlipModeStatus = 'S'  \n" +
                "						WHERE  	refPackingSlipNumberForInvoice = v_InvoiceId AND isDeleted = 0;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive_det SET 	isDeleted = 1, deletedBy = deletedBy, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "					WHERE 	id = v_Id AND isDeleted = 0;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				UPDATE 	packing_slip_material_receive_det SET 	isDeleted = 1, deletedBy = deletedBy, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	id = v_Id AND isDeleted = 0;  \n" +
                "			END IF;  \n" +
                "			SET v_StartIndex = v_StartIndex + 1;  \n" +
                "		END WHILE;  \n" +
                "		/*SET @SQl1 = CONCAT('update packing_slip_material_receive_det set isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" where id IN(', IDs, ') and deletedAt is NULL');  \n" +
                "		PREPARE stmt1 FROM @SQL1;  \n" +
                "		EXECUTE stmt1;  \n" +
                "		DEALLOCATE PREPARE stmt1;   */  \n" +
                "		SELECT COUNT(1) TotalCount FROM packing_slip_material_receive_det WHERE id IN (IDs) AND isDeleted = 0 AND deletedAt IS NULL;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 07-02-2022  *********************************** */
                "DROP function IF EXISTS `fun_getInvoiceStatusName`;  \n" +
                "CREATE FUNCTION `fun_getInvoiceStatusName`(pStatus varchar(2)) RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vName varchar(50);  \n" +
                "		if pStatus = 'PE' THEN  \n" +
                "			set vName = 'Pending';  \n" +
                "		elseif pStatus = 'I' THEN  \n" +
                "			set vName = 'Investigate';  \n" +
                "		elseif pStatus = 'A' THEN  \n" +
                "			set vName = 'Approved to Pay';  \n" +
                "		elseif pStatus = 'PP' THEN  \n" +
                "			set vName = 'Partially Paid';  \n" +
                "		elseif pStatus = 'PM' THEN  \n" +
                "			set vName = 'Pending Management Approval';  \n" +
                "		ELSE  \n" +
                "			set vName = 'Fully Paid';  \n" +
                "		END IF;  \n" +
                "    return vName;  \n" +
                "end;  \n" +
                /* **************************** New Script -> 07-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(30),  \n" +
                "	IN pMfgCodeIds LONGTEXT,  \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearch TINYINT,  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pInvoiceIds LONGTEXT,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvoiceFromDate DATE,  \n" +
                "    IN pInvoiceToDate DATE,  \n" +
                "    IN pMarkedForRefundStatus LONGTEXT,  \n" +
                "    IN pInvoiceComments VARCHAR(1000),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pSelectedDateType VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentDate DATE;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
                "			SELECT 		p.id,  \n" +
                "					p.systemId,  \n" +
                "					p.poNumber,  \n" +
                "                    p.poDate,  \n" +
                "                    p.refPurchaseOrderID poId,  \n" +
                "					p.mfgCodeID,  \n" +
                "					p.supplierSONumber,  \n" +
                "                    p.soDate,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
                "					p.packingSlipDate,  \n" +
                "					p.invoiceNumber,  \n" +
                "                    p.lockStatus invoiceLockStatus,  \n" +
                "					p.invoiceDate,  \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
                "					p.creditMemoNumber,  \n" +
                "                    p.lockStatus creditMemoLockStatus,  \n" +
                "					p.creditMemoDate,  \n" +
                "					p.debitMemoNumber,  \n" +
                "                    p.refSupplierCreditMemoNumber,  \n" +
                "                    p.lockStatus debitMemoLockStatus,  \n" +
                "					p.debitMemoDate,  \n" +
                "					p.receiptDate,  \n" +
                "					p.description,  \n" +
                "					p.billToAddress,  \n" +
                "					p.shipToAddress,  \n" +
                "					p.poVersion,  \n" +
                "					p.isDeleted,  \n" +
                "					p.receiptType,  \n" +
                "					p.`status`,  \n" +
                "					p.applyDate,  \n" +
                "					p.refParentCreditDebitInvoiceno,  \n" +
                "					p.refPackingSlipNumberForInvoice,  \n" +
                "					p.invoiceTotalDue,  \n" +
                "					p.isTariffInvoice,  \n" +
                "					p.creditMemoType,  \n" +
                "                    (  \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
                "								'Invoice Credit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MC' THEN  \n" +
                "								'MISC Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'RC' THEN  \n" +
                "								'RMA Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'ID' THEN  \n" +
                "								'Invoice Debit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MD' THEN  \n" +
                "								'MISC Debit Memo'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
                "								'Invoice'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
                "								'MISC Invoice'  \n" +
                "						END  \n" +
                "					) subTypeValue,  \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                    m.mfgName supplierName,  \n" +
                "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
                "					m.mfgCode supplierCodeName,  \n" +
                "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
                "					pg.packingSlipDocCount,  \n" +
                "					pd.itemReceived,  \n" +
                "					pd.otherChargesItemReceived,  \n" +
                "					pd.itemDisapproved,  \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
                "					ps.status parentInvoiceStatus,  \n" +
                "					ps.invoiceNumber refInvoiceNumber,  \n" +
                "                    ps.lockStatus refInvoiceLockStatus,  \n" +
                "					ps.creditMemoType parentCreditMemoType,  \n" +
                "					pd.totalExtendedAmount,  \n" +
                "                    pd.totalDiscount,  \n" +
                "					pe.totalCreditAmount,  \n" +
                "					pe.totalDebitAmount,  \n" +
                "					(  \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
                "					) amountToPay,  \n" +
                "                    pd.totalExtendedReceivedPrice,  \n" +
                "					pd.packingDetailNote,  \n" +
                "					pd.approveLineCount,  \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
                "											p.debitMemoDate  \n" +
                "										WHEN p.receiptType = 'C' THEN  \n" +
                "											p.creditMemoDate  \n" +
                "										ELSE p.invoiceDate  \n" +
                "									end), payTerm.termsDays, p.paymentTermsID) paymentDueDate,  \n" +
                "					g.gencCategoryName paymentTermName,  \n" +
                " 					m.paymentTermsID paymentTermsID,  \n" +
                "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
                "                    p.paymentTermsID invPaymentTermsID,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
                "					psm.packingSlipModeStatus,  \n" +
                "                    psPay.paymentDate,  \n" +
                "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
                "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
                "					p.invoiceRequireManagementApproval,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
                "								'Yes'  \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
                "								'No'  \n" +
                "						END  \n" +
                "					) invoiceRequireManagementApprovalValue,  \n" +
                "					p.invoiceApprovalStatus,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
                "								'Approved'  \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
                "								'Pending'  \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
                "								'N/A'  \n" +
                "						END  \n" +
                "					) invoiceApprovalStatusValue,  \n" +
                "					p.invoiceApprovedBy,  \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.invoiceApprovalDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') invoiceApprovalDate,  \n" +
                "					p.invoiceApprovalComment,  \n" +
                "					p.internalRemark,  \n" +
                "                    p.remark,  \n" +
                "					p.lockStatus,  \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "						when p.lockStatus = 'LC' then 'Locked'  \n" +
                "						else null end  \n" +
                "					) lockStatusValue,  \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                    case when p.receiptType = 'I' then  \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
                "					h1.refType as haltRefType,  \n" +
                "                    h1.status as haltStatus,  \n" +
                "                    (CASE WHEN h1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltStatusText,  \n" +
                "                    (CASE  \n" +
                "							WHEN h1.status = 'H' THEN  \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReason,  \n" +
                "                    psh1.refType as haltRefTypeRefInv,  \n" +
                "                    psh1.status as haltStatusRefInv,  \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInvText,  \n" +
                "                    (CASE  \n" +
                "							WHEN psh1.status = 'H' THEN  \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInv,  \n" +
                "                    p.markedForRefund,  \n" +
                "                    (case when p.markedForRefund = 0 then 'N/A'  \n" +
                "						else case when ifnull(psPay.refundAmount,0) = 0 then  \n" +
                "										'Waiting for Refund'  \n" +
                "								when ifnull(psPay.refundAmount,0) <> 0 and ifnull(psPay.refundAmount,0) <> ifnull(p.markedForRefundAmt,0)  then  \n" +
                "										'Partially Refunded'  \n" +
                "								when ifnull(psPay.refundAmount,0) = ifnull(p.markedForRefundAmt,0) then  \n" +
                "										'Fully Refunded'  \n" +
                "								else '' end  \n" +
                "						end  \n" +
                "					) markedForRefundValue,  \n" +
                "                    p.markedForRefundAmt  \n" +
                "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
                "							gFiles.gencFileOwnerType,  \n" +
                "							gFiles.refTransID,  \n" +
                "							gFiles.entityID  \n" +
                "						FROM genericfiles gFiles  \n" +
                "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
                "						and gFiles.entityID in (-13,-15,-16)  \n" +
                "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
                "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
                "																		WHEN p.receiptType = 'D' THEN -16  \n" +
                "																		ELSE -13  \n" +
                "																	END)  \n" +
                "				and psDoc.refTransID = p.id  \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
                "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where h2.refTransId = h1.refTransId  \n" +
                " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
                "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
                "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where psh1.refTransId = h2.refTransId  \n" +
                " 											  and h2.refType = 'SINV'  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
                "            left join (  \n" +
                "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
                "				FROM 	vu_genericfilescount g  \n" +
                "				WHERE 	g.entityID = -14  \n" +
                "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
                "            ) pg on pg.refTransID = psm.id  \n" +
                "			left join (  \n" +
                "							select 	a.refPackingSlipMaterialRecID,  \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
                "								sum(a.itemReceived) itemReceived,  \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
                "								sum(a.itemDisapproved) itemDisapproved,  \n" +
                "								sum(a.approveLineCount) approveLineCount,  \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
                "                                sum(discount) totalDiscount,  \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
                "							from 	(  \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
                "										psm.packingSlipSerialNumber,  \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
                "										extendedPrice,  \n" +
                "                                        discount,  \n" +
                "										extendedReceivedPrice  \n" +
                "									FROM 	packing_slip_material_receive_det psm  \n" +
                "									WHERE 	psm.isDeleted = 0  \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
                "								) a  \n" +
                "							group by a.refPackingSlipMaterialRecID  \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
                "				left join (select b.refPackingslipInvoiceID,  \n" +
                "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount,  \n" +
                "                                    max(case when a.refPaymentMode = 'P' then a.paymentDate else null end) paymentDate  \n" +
                "							  from packingslip_invoice_payment a  \n" +
                "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "							 where a.refPaymentMode IN ('P','RR')  \n" +
                "							   and a.isPaymentVoided = 0  \n" +
                "							   and b.isDeleted = 0  \n" +
                "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
                "				left join (  \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
                "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
                "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
                "							from 		packing_slip_material_receive ps  \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
                "                            left join (select b.refPackingslipInvoiceID,  \n" +
                "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "										 where a.refPaymentMode IN ('P','RR')  \n" +
                "										   and b.isPaymentVoided = 0  \n" +
                "										   and b.isDeleted = 0  \n" +
                "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
                "								  where ps.receiptType in ('C','D')  \n" +
                "									and ps.isDeleted = 0  \n" +
                "									and pd.isDeleted = 0  \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
                "				WHERE p.`status` in ('PE','I','A','P','PP', 'PM') and p.isDeleted = 0 \",  \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pInvPaymentTermsIds IS NOT NULL AND pInvPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pInvPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and p.lockStatus IN (\", pLockStatusFilter ,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "      IF(pInvoiceComments IS NOT NULL AND pInvoiceComments != '')THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and (p.internalRemark LIKE '%\",pInvoiceComments,\"%' OR p.remark LIKE '%\",pInvoiceComments,\"%')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = p.id  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefundStatus IS NOT NULL and pMarkedForRefundStatus != '' THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.markedForRefundValue in (\",pMarkedForRefundStatus,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
                "													or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		END IF;  \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
                "													   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
                "		IF pIsExactSearch = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
                "				SELECT 1  \n" +
                "				  FROM packing_slip_material_receive_det x  \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "    EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*,  \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "				round(c.paidAmount,2) totalPaidAmount,  \n" +
                "                round(c.refundAmount,2) totalRefundAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5913,'2.00','V1',' User Story 40715: [Main Branch] Supplier Invoice Management Approval status related changes - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5913:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-02-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF OLD.receiptType = \"P\" AND OLD.refPurchaseOrderID IS NULL AND NEW.isCustConsigned != OLD.isCustConsigned THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isLineCustConsigned=NEW.isCustConsigned, LineCustomerID=NEW.CustomerID WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		CASE  \n" +
                "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
                "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
                "			ELSE 'PO Date'  \n" +
                "		END ,  \n" +
                "		CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Date', CAST(OLD.packingSlipDate AS CHAR), CAST(new.packingSlipDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(new.invoiceDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(new.creditMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(new.debitMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(new.receiptDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
                "				ELSE 'Supplier Invoice Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN OLD.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN NEW.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
                "				ELSE 'Supplier Invoice Posting Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(new.applyDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
                "				ELSE 'Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
                "				ELSE 'PS Internal Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "	IF IFNULL(OLD.billToAddress,0) != IFNULL(NEW.billToAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To', CAST(OLD.billToAddress AS CHAR), CAST(new.billToAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.billToConactPerson,0) != IFNULL(NEW.billToConactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To Contact Person', CAST(OLD.billToConactPerson AS CHAR), CAST(new.billToConactPerson AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToConactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaShippingContactPerson,0) != IFNULL(NEW.rmaShippingContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To Contact Person', OLD.rmaShippingContactPerson, new.rmaShippingContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaMarkForContactPerson,0) != IFNULL(NEW.rmaMarkForContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For Contact Person', OLD.rmaMarkForContactPerson, new.rmaMarkForContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			case when OLD.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "            case when new.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CustomerID, 0) != IFNULL(NEW.CustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.CustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.CustomerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5914,'2.00','V1',' User Story 40715: [Main Branch] Supplier Invoice Management Approval status related changes - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5914:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierInvoicePayment`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pSupplierIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "    IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "    IN pRefPaymentMode VARCHAR(2),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pSelectedDateType VARCHAR(10),  \n" +
                "    IN pPaymentComments VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPaymentComments IS NOT NULL AND pPaymentComments != '')THEN  \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause,\" AND remark LIKE '%\",pPaymentComments,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause,\" AND lockStatus = '\", pLockStatusFilter ,\"'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "			EXISTS (select 1  \n" +
                "					   from packing_slip_material_receive psd  \n" +
                "					   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "					  where psd.isDeleted = 0  \n" +
                "						and pdet.refPayementid = inv.id  \n" +
                "						AND (', CASE WHEN pRefPaymentMode = 'P' THEN  CONCAT(\"psd.invoiceNumber = '\",pInvoiceNumber,\"'\") ELSE  CONCAT(\"psd.creditMemoNumber = '\",pInvoiceNumber,\"' or psd.debitMemoNumber= '\",pInvoiceNumber,\"'\") END, ')  \n" +
                "				)'  \n" +
                "		);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pFromDate IS NOT NULL AND pToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.poDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.receiptDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.packingSlipDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		END IF;  \n" +
                "	ELSEIF pFromDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.poDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.receiptDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.packingSlipDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.invoiceDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate = '\",pFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"  \n" +
                "		SELECT		inv.id,  \n" +
                "				inv.systemId,  \n" +
                "				inv.mfgcodeID,  \n" +
                "				m.mfgCode supplier,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') supplierCodeName,  \n" +
                "				inv.isPaymentVoided,  \n" +
                "				case 	when inv.isPaymentVoided = 0 then  \n" +
                "						'Paid'  \n" +
                "					else  \n" +
                "						'Voided'  \n" +
                "				end isPaymentVoidedConvertedValue,  \n" +
                "				inv.voidPaymentReason,  \n" +
                "				inv.refVoidedPaymentNumber,  \n" +
                "                inv.refVoidedPaymentId,  \n" +
                "                (select c.lockStatus from packingslip_invoice_payment c  \n" +
                "					where c.id = inv.refVoidedPaymentId) refVoidedPaymentLockStatus,  \n" +
                "				inv.paymentNumber,  \n" +
                "				inv.bankName,  \n" +
                "				inv.bankAccountNo,  \n" +
                "				inv.paymentType,  \n" +
                "				inv.bankAccountMasID,  \n" +
                "				gc.gencCategoryName paymentMethod,  \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "				inv.paymentDate,  \n" +
                "				invdet.invoiceAmount,  \n" +
                "				inv.paymentAmount,  \n" +
                "				inv.payToName,  \n" +
                "                fun_getAddressbyIDForCheckPrint(inv.payToAddressID, inv.payToContactPersonID) payToAddress,  \n" +
                "                fun_getAddressbyIDForCheckPrint(inv.billToAddressID, inv.billToContactPersonID) billToAddress,  \n" +
                "                inv.refGencTransModeID,  \n" +
                "                gtm.modeName transactionModeName,  \n" +
                "                gtm.systemGenerated systemGeneratedTransactionMode,  \n" +
                "				inv.accountReference,  \n" +
                "				inv.remark,  \n" +
                "                inv.depositBatchNumber,  \n" +
                "                inv.offsetAmount,  \n" +
                "                inv.acctId,  \n" +
                "                fun_getChartOfAccountsCodeNameByID(inv.acctId) coaName,  \n" +
                "				fun_getUserNameByID(inv.createdBy) createdby,  \n" +
                "				fun_getUserNameByID(inv.updatedBy) updatedby,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,  \n" +
                "				fun_getRoleByID(inv.createByRoleId) createdbyRole,  \n" +
                "				inv.lockStatus,  \n" +
                "				(case when inv.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "					when inv.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "					when inv.lockStatus = 'LC' then 'Locked'  \n" +
                "					else null end  \n" +
                "				) lockStatusValue,  \n" +
                "				fun_getUserNameByID(inv.lockedBy) lockByName,  \n" +
                "				fun_getRoleByID(inv.lockedByRoleId) lockedByRoleName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM	packingslip_invoice_payment inv  \n" +
                "        join mfgcodemst m ON m.id = inv.mfgcodeID  \n" +
                "		INNER JOIN 	genericcategory gc ON inv.paymentType = gc.gencCategoryID  \n" +
                "        left join generic_transmode_mst gtm ON gtm.id = inv.refGencTransModeID  \n" +
                "		left JOIN (  \n" +
                "					SELECT 		pid.refPayementid,	SUM(psmd.extendedPrice) invoiceAmount  \n" +
                "					FROM 		packingslip_invoice_payment_det pid  \n" +
                "					LEFT JOIN 	packing_slip_material_receive_det psmd ON psmd.refPackingSlipMaterialRecID = pid.refPackingslipInvoiceID AND psmd.isDeleted = 0  \n" +
                "					WHERE 		pid.isDeleted = 0  \n" +
                "                       and		pid.isPaymentVoided = 0  \n" +
                "					GROUP BY 	pid.refPayementid  \n" +
                "				) invdet ON invdet.refPayementid = inv.id  \n" +
                "		WHERE 		inv.isDeleted = 0  \n" +
                "					AND inv.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "					AND gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5915,'2.00','V1',' Bug 41135: [Main Branch] On Supplier Refund need to remove Search Invoice# filter and Add CM/DM search filter - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5915:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearchPurchaseOrder`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearchPurchaseOrder`(  \n" +
                "	IN pGoodPart VARCHAR(100),  \n" +
                "	IN pSearch VARCHAR(500),  \n" +
                "	IN pId INT,  \n" +
                "	IN pMfgType VARCHAR(50),  \n" +
                "	IN pRoHSStatusID VARCHAR(100),  \n" +
                "	IN pMfgCodeId INT,  \n" +
                "	IN pMountingType VARCHAR(50),  \n" +
                "	IN pMountingTypeId INT,  \n" +
                "	IN pCategoryID INT,  \n" +
                "	IN pIsContainCPN TINYINT,  \n" +
                "	IN pRohsMainCategoryID INT,  \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
                "	IN prefSupplierMfgpnComponentID INT ,  \n" +
                "	IN ppackagingID INT,  \n" +
                "	IN pstrictCustomPart TINYINT,  \n" +
                "	IN psupplierID INT,  \n" +
                "    IN pPartType int,  \n" +
                "    IN pExcludeStatus INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vRohsMainCategoryID INT;  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "    DECLARE v_supplierMFRMappingType varchar(10);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	SET @SQLStatement1=CONCAT(\" SELECT *  \n" +
                "		FROM  \n" +
                "		(  \n" +
                "			SELECT 	c.id,                                   CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,      c.mfgPN orgMfgPN,  \n" +
                "					c.PIDCode,                              c.RoHSStatusID,                                 c.mfgcodeID,  \n" +
                "					m.mfgCode,                              m.mfgName,                                      fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') mfgCodeName,  \n" +
                "					c.imageURL,                             c.documentPath,                                 c.mfgPNDescription,  \n" +
                "					c.functionalCategoryID,                 c.uom,                                          c.unit,  \n" +
                "					c.restrictUsePermanently,               c.restrictUSEwithpermission,                    c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,   u.unitName AS  unitName,                        r.rohsIcon,  \n" +
                "					r.name AS rohsName,                     c.isCPN,                                        c.isCustom,  \n" +
                "					c.minimum,                              c.mult,                                         c.packageQty,  \n" +
                "					c.partType,                             c.pcbPerArray,                                  c.refSupplierMfgpnComponentID,  \n" +
                "					c.packagingID,                          c.internalReference,  							c.category  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
                "			WHERE 	c.isdeleted = 0  \");  \n" +
                "	IF  pId IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND c.id = \" ,pId );  \n" +
                "    END IF;  \n" +
                "	IF  pMfgType IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND m.mfgType = '\",pMfgType,\"' \");  \n" +
                "    END IF;  \n" +
                "    IF  pRoHSStatusID IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.RoHSStatusID = \", pRoHSStatusID );  \n" +
                "	END IF;  \n" +
                "	IF  pMfgCodeId IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mfgcodeID = \",pMfgCodeId );  \n" +
                "	END IF;  \n" +
                "	IF  pMountingType IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND mt.name = '\",pMountingType,\"' \");  \n" +
                "	END IF;  \n" +
                "	IF  pMountingTypeId IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mountingTypeID = \",pMountingTypeId );  \n" +
                "	END IF;  \n" +
                "	IF  pCategoryID IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.category = \", pCategoryID  );  \n" +
                "	END IF;  \n" +
                "	IF  IFNULL(pIsContainCPN,FALSE) = FALSE  THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.isCPN = FALSE \");  \n" +
                "	END IF;  \n" +
                "	IF  pRohsMainCategoryID IS NOT NULL THEN  \n" +
                "		SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
                "		/*===>this logic is added to compare invert rohs category*/  \n" +
                "		IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
                "			IF pRohsMainCategoryID = -1 THEN  \n" +
                "				SET vRohsMainCategoryID = -2;  \n" +
                "			ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
                "				SET vRohsMainCategoryID = -1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "        /*<===this logic is added to compare invert rohs category*/  \n" +
                "   		IF vRohsMainCategoryID IS NOT NULL THEN  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND  r.refMainCategoryID  = \",vRohsMainCategoryID );  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "	IF  prefSupplierMfgpnComponentID IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.refSupplierMfgpnComponentID <=> IFNULL(\",prefSupplierMfgpnComponentID,\", c.refSupplierMfgpnComponentID)  \");  \n" +
                "	END IF;  \n" +
                "	IF  pPartType IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.partType = '\",pPartType,\"' \");  \n" +
                "	END IF;  \n" +
                "	IF  ppackagingID IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.packagingID <=> IFNULL(\",ppackagingID,\",c.packagingID) \");  \n" +
                "	END IF;  \n" +
                "	IF  pstrictCustomPart IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.category != 3  AND c.iscustom = 1 \");  \n" +
                "	END IF;  \n" +
                "	IF  psupplierID IS NOT NULL AND pstrictCustomPart  = 1 THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\"  AND 	( EXISTS (SELECT 1 FROM (/*get mfg which set as company*/  \n" +
                "																		SELECT mc.id  \n" +
                "																				FROM mfgcodemst mc  \n" +
                "																				WHERE mc.iscompany = 1 AND mc.isdeleted = 0  \n" +
                "																		UNION ALL /* get All Customer code */  \n" +
                "																		SELECT '\",psupplierID,\"' AS id FROM DUAL \");  \n" +
                "		IF(SELECT COUNT(1) FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.isCustMapping=0 AND smm.supplierID=psupplierID)>0 THEN  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\"  UNION ALL  SELECT smm.refMfgCodeMstID  AS id  \n" +
                "				FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.isCustMapping=0 AND smm.supplierID='\",psupplierID,\"' )a   WHERE a.id  = c.mfgcodeid))  \");  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\"  UNION ALL  SELECT mc.id FROM mfgcodemst mc WHERE mc.mfgType='MFG' AND mc.isCustOrDisty=1 AND mc.isdeleted=0  \n" +
                "			UNION ALL  \n" +
                "			SELECT c.mfgcodeid AS id FROM component c WHERE (c.parttype=4 OR c.iscpn=1) AND c.isdeleted=0 ) a   WHERE a.id  = c.mfgcodeid))   \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF psupplierID IS NOT NULL AND pstrictCustomPart  IS NULL THEN  \n" +
                "		SELECT supplierMFRMappingType INTO v_supplierMFRMappingType FROM mfgcodemst WHERE id=psupplierID AND mfgType='dist' AND isDeleted=0;  \n" +
                "        IF(v_supplierMFRMappingType = 'B') THEN  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1, \" AND c.isCPN=0 AND c.iscustom = 0 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF  pExcludeStatus IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.partStatus != '\",pExcludeStatus,\"' \");  \n" +
                "	END IF;  \n" +
                "    IF pGoodPart IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.isGoodPart = '\",pGoodPart,\"' \");  \n" +
                "    END IF;  \n" +
                "	/*Close Inner query section */  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ) AS a  WHERE 1= 1 \");  \n" +
                "	IF  pSearch IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND  EXISTS ( SELECT 1 FROM ( SELECT a.id, a.mfgpn name, a.pidcode FROM DUAL  \n" +
                "																					UNION ALL  \n" +
                "																					SELECT opn.refcomponentid ,opn.name, null pidcode FROM component_otherpn opn WHERE opn.refcomponentid = a.id  \n" +
                "														 						) x WHERE x.id  = a.id AND ( x.name  LIKE CONCAT('%\", pSearch , \"%') OR x.pidcode  LIKE CONCAT('%\", pSearch , \"%')) ) \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ORDER BY mfgPN For update\");  \n" +
                "	-- select @SQLStatement1;  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5916,'2.00','V1',' Sproc_GetComponentMFGAliasSearchPurchaseOrder SP - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;


        case 5916:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-02-2022 *********************************** */
                "INSERT INTO systemconfigrations (`key`, `values`,`isActive`, `createdBy`, `createdAt` , `updatedBy` , `updatedAt`, `displayName`,  \n" +
                "`isEditable`,`description`,`createByRoleId`,`updateByRoleId`)  \n" +
                "VALUES ('MaxUMID', 50 ,1, 1, fun_DatetimetoUTCDateTime(), 1 , fun_DatetimetoUTCDateTime(), 'Maximum UMID To be Created with Identical Details',1,  \n" +
                "                'Number of count for create UMID.',1,1) ;  \n" +
                /* **************************** Add Script Version -> 08-02-2022 *************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5917,'2.00','V1','User Story 40724: Create Utility to Generate multiple UMID of custom part - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5917:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetUMIDDetailsByID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUMIDDetailsByID`(  \n" +
                "	IN pUIDId INT,  \n" +
                "	IN pUID VARCHAR(15)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE vMfgCodeFormat INT;  \n" +
                "        SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "		IF(pUIDId IS NULL) THEN  \n" +
                "			SET pUIDId = (SELECT cs.id FROM component_sid_stock cs WHERE cs.uid = pUID AND cs.isDeleted = 0);  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		SELECT 	css.id AS uidId, 		css.uid, 		css.orgqty,			css.pkgQty, 		css.orgPkgUnit,			css.pkgUnit,  \n" +
                "				css.prefix,		css.uidPrefix,	css.sealDate,		css.cpn,			css.RefCPNMFGPNID,		css.mfgAvailabel,  \n" +
                "                css.assyID AS uidAssyID,		css.receiveMaterialType,				css.refSupplierPartId,	css.customerConsign,  \n" +
                "				css.spq, 		css.uom,		css.dateCode, 		css.packaging,		css.stockInventoryType, css.specialNote,  \n" +
                "                css.mfrDateCodeFormatID,		css.mfrDateCode,	css.woID,			u.unitName,				u.measurementTypeID AS uomClassID,  \n" +
                "                css.woNumber, 	css.fromUIDId, 	css.fromUID, 		css.parentUIDId,		css.parentUID,		css.pcbPerArray,  \n" +
                "                (CASE WHEN css.fromUIDId IS NOT NULL AND css.parentUIDId IS NOT NULL THEN TRUE ELSE FALSE END) AS isSplitUID,	css.isReservedStock,  \n" +
                "                css.customerID,	css.scanlabel,	css.costCategoryID,  \n" +
                "                CONCAT(coc.categoryName, ' (', coc.`from`, ' - ', coc.`to`, ' )') costCategoryName,  \n" +
                "                css.lotCode,			css.dateCode,  \n" +
                "                css.nickName,	c.isCustom,    /*css.selfLifeDays,			css.shelfLifeAcceptanceDays,	css.maxShelfLifeAcceptanceDays,*/  \n" +
                "                c.selfLifeDays, 				c.maxShelfLifeAcceptanceDays, 			c.shelfLifeAcceptanceDays,  \n" +
                "				css.binID,				b.name AS currentBinName, 	css.orgRecBin, 		from_bin.Name AS fromBinName,  \n" +
                "                #org_bin.Name AS orgBinName,  \n" +
                "                w.Name AS currentWHName,							pw.Name AS currentParentWHName,  \n" +
                "                css.orgRecWarehouse,	css.orgRecDepartment,		css.fromBin,		css.fromWarehouse,		css.fromDepartment,  \n" +
                "				w.warehouseType,  		css.refcompid, 		c.mfgcodeID, 			c.mfgPN,					c.unit AS componentUnit,  \n" +
                "                c.PIDCode, 				c.mfgPNDescription,			c.imageURL, 		m.mfgName,				c.mfgType,  \n" +
                " 				m.mfgCode, 				c.mountingTypeID,			cp.sourceName, 		cp.name packagingName,  \n" +
                "                c.partPackage, 			pc.Name AS externalPartPackage,  \n" +
                "                css.rohsStatusID AS uidRohsStatusID, 				umid_rohs.Name umidRohsName,				umid_rohs.rohsIcon umidRohsIcon,  \n" +
                "                c.rohsStatusID,			rohs.Name rohsName, 		rohs.rohsIcon, 								mt.hasLimitedShelfLife,  \n" +
                "				vu.packingSlipID,		vu.packingSlipSerialNumber, vu.packingSlipNumber,   					vu.packingSlipDetID,  \n" +
                "                vu.UMIDCreatedQty, 		vu.returnQty,  				vu.InQty, 			vu.BalanceQty,			vu.receivedStatus,  \n" +
                "                vu.packingSlipModeStatus,							fun_GetFormattedMfgCode(m.mfgCode,  m.mfgName, vMfgCodeFormat) as mfgCodeName,  \n" +
                "                (CASE WHEN (css.stockInventoryType = 'NI') THEN  \n" +
                "					CONCAT(mcm.mfgCode, vu.packingSlipNumber)  \n" +
                "				ELSE NULL END) As cofcCode,  \n" +
                "               CONCAT(cmsl.levelRating, '-', cmsl.`code`) AS mslLevel,  \n" +
                "               vusr.availableQty  \n" +
                "		FROM component_sid_stock css  \n" +
                "			JOIN component c ON css.refcompid = c.id AND c.isDeleted = 0  \n" +
                "			JOIN mfgcodemst m on c.mfgcodeID = m.id  AND m.isDeleted = 0  \n" +
                "			JOIN rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  AND c.isDeleted = 0  \n" +
                "			JOIN rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  AND umid_rohs.isDeleted = 0  \n" +
                "            LEFT JOIN component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "			JOIN component_packagingmst cp on css.packaging = cp.id  AND cp.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_packagecasetypemst pc ON c.partPackageID = pc.id AND pc.isDeleted = 0  \n" +
                "            JOIN cost_category coc ON css.costCategoryID = coc.id AND coc.isDeleted = 0  \n" +
                "            JOIN uoms u ON css.uom = u.id AND u.isDeleted = 0  \n" +
                "            JOIN rfq_mountingtypemst mt ON c.mountingTypeID = mt.id AND mt.isDeleted = 0  \n" +
                "			JOIN binmst b on css.binID = b.id AND b.isDeleted = 0  \n" +
                "            JOIN binmst from_bin on css.fromBin = from_bin.id AND from_bin.isdeleted = 0  \n" +
                "			JOIN warehousemst w ON b.WarehouseID = w.id AND w.isDeleted = 0  \n" +
                "			JOIN warehousemst pw ON w.parentWHID = pw.id AND pw.isDeleted = 0  \n" +
                "            LEFT JOIN component_sid_stock_packing_detail csp ON css.id = csp.refComponentSidStockID AND csp.isDeleted = 0  \n" +
                "            LEFT JOIN vu_umid_creation_pending vu ON csp.refPackingSlipDetailID = vu.packingSlipDetID  \n" +
                "            LEFT JOIN mfgcodemst mcm ON mcm.id = vu.mfgCodeID AND mcm.isDeleted = 0  \n" +
                "		WHERE css.id =  (CASE WHEN pUIDId IS NOT NULL THEN pUIDId  \n" +
                "				ELSE (SELECT cs.id FROM component_sid_stock cs WHERE cs.uid = pUID AND cs.isDeleted = 0) END);  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-02-2022 *************************** */
                "DROP VIEW IF EXISTS `vu_umid_creation_pending`;  \n" +
                "CREATE VIEW `vu_umid_creation_pending` AS  \n" +
                "    SELECT  \n" +
                "        `p`.`id` AS `packingSlipID`,  \n" +
                "        `p`.`packingSlipNumber` AS `packingSlipNumber`,  \n" +
                "        `p`.`packingSlipDate` AS `packingSlipDate`,  \n" +
                "        `p`.`poNumber` AS `poNumber`,  \n" +
                "        `p`.`refPurchaseOrderID` AS `refPurchaseOrderID`,  \n" +
                "        `p`.`mfgCodeID` AS `mfgCodeID`,  \n" +
                "        `p`.`packingSlipModeStatus` AS `packingSlipModeStatus`,  \n" +
                "        `p`.`isNonUMIDStock` AS `isPackingSlipNonUMIDStock`,  \n" +
                "        `psd`.`umidCreated` AS `umidCreated`,  \n" +
                "        `psd`.`id` AS `packingSlipDetID`,  \n" +
                "        `psd`.`packingSlipSerialNumber` AS `packingSlipSerialNumber`,  \n" +
                "        `psd`.`packagingID` AS `packagingID`,  \n" +
                "        `psd`.`binID` AS `BinID`,  \n" +
                "        `psd`.`warehouseID` AS `warehouseID`,  \n" +
                "        `psd`.`parentWarehouseID` AS `parentWarehouseID`,  \n" +
                "        `psd`.`partID` AS `PartId`,  \n" +
                "        `psd`.`nickname` AS `nickname`,  \n" +
                "        `psd`.`receivedQty` AS `InQty`,  \n" +
                "        `psd`.`umidCreatedQty` AS `UMIDCreatedQty`,  \n" +
                "        `psd`.`rmaCreatedQty` AS `returnQty`,  \n" +
                "        ((IFNULL(`psd`.`receivedQty`, 0) - IFNULL(`psd`.`umidCreatedQty`, 0)) - IFNULL(`psd`.`rmaCreatedQty`, 0)) AS `BalanceQty`,  \n" +
                "        `psd`.`receivedStatus` AS `receivedStatus`,  \n" +
                "        `psd`.`isNonUMIDStock` AS `isNonUMIDStock`  \n" +
                "    FROM  \n" +
                "        (`packing_slip_material_receive` `p`  \n" +
                "        JOIN `packing_slip_material_receive_det` `psd` ON ((`p`.`id` = `psd`.`refPackingSlipMaterialRecID`)))  \n" +
                "    WHERE  \n" +
                "        ((`p`.`receiptType` = 'P')  \n" +
                "            AND (`p`.`isDeleted` = 0)  \n" +
                "            AND (`psd`.`binID` IS NOT NULL)  \n" +
                "            AND (`psd`.`isDeleted` = 0)  \n" +
                "            AND (`psd`.`isNonUMIDStock` = 0));  \n" +
                /* **************************** Add Script Version -> 08-02-2022 *************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveNonUMIDStockList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveNonUMIDStockList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "   IN pMfgCodeIds LONGTEXT,  \n" +
                "   IN pReceivedStatus VARCHAR(255),  \n" +
                "   IN pIsMPNExactSearch TINYINT,  \n" +
                "   IN pIsBinExactSearch TINYINT,  \n" +
                "   IN pIsPackingSlipExactSearch TINYINT,  \n" +
                "   IN pScanMPNPID LONGTEXT,  \n" +
                "   IN pScanBinWareHouse LONGTEXT,  \n" +
                "   IN pPackingSlip LONGTEXT,  \n" +
                "   IN pPackingSlipFromDate DATE,  \n" +
                "   IN pPackingSlipToDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE advanceFilterWhere VARCHAR(16383);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	SET advanceFilterWhere = ' AND 1 = 1 ';  \n" +
                "	IF(pWHId IS NOT NULL) THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And W.ID = ', pWHId ,' ');  \n" +
                "	END IF;  \n" +
                "	IF(pBinId IS NOT NULL ) THEN  \n" +
                "		SET advanceFilterWhere = CONCAT(advanceFilterWhere,' And b.id = ', pBinId ,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY packingSlipDate DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = ' 1 = 1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pReceivedStatus IS NOT NULL) THEN  \n" +
                "       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pReceivedStatus IS NOT NULL) THEN  \n" +
                "       SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(receivedStatus,''', pReceivedStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND packingSlipDate BETWEEN'\", pPackingSlipFromDate ,\"' AND '\", pPackingSlipToDate ,\"'\");  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND packingSlipDate = '\", pPackingSlipFromDate ,\"' \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' AND (supplierCodeID in (',pMfgCodeIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   IF(pScanMPNPID IS NOT NULL) THEN  \n" +
                "		IF (pIsMPNExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,\" AND ( mfgPN LIKE '%\", pScanMPNPID ,\"%' OR pidCode LIKE '%\", pScanMPNPID ,\"%' ) \");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,\" AND ( mfgPN = '\", pScanMPNPID ,\"' OR pidCode = '\", pScanMPNPID ,\"' ) \");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pScanBinWareHouse IS NOT NULL)THEN  \n" +
                "		IF (pIsBinExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( binName LIKE \"%', pScanBinWareHouse ,'%\" OR warehouseName LIKE \"%', pScanBinWareHouse ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( warehouseName = \"', pScanBinWareHouse ,'\" OR binName = \"', pScanBinWareHouse ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPackingSlip IS NOT NULL)THEN  \n" +
                "		IF (pIsPackingSlipExactSearch = 0) THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber LIKE \"%', pPackingSlip ,'%\" ) ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' AND ( packingSlipNumber = \"', pPackingSlip ,'\" ) ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveNonUMIDStockList = CONCAT(\"  \n" +
                "		SELECT 	BinID,      	binName,      		WarehouseID,      		warehouseName,      	departmentId,      	departmentName,  \n" +
                "				PartId,  		packingSlipID, 		packingSlipName,  		poNumber,				poID,				mfgCodeID,  \n" +
                "                packagingType,  packingSlipDate,   	packingSlipNumber,  	supplierCodeID,  \n" +
                "				mfgName,		mfgPN,      		pidCode,     			RoHSStatusID,      		rohsIcon,      		rohsName,  \n" +
                "                nickname,		InQty,  			UMIDCreatedQty,			returnQty,				BalanceQty,    		isCustom,  \n" +
                "                receivedStatus,     				receivedStatusValue,   	packingSlipModeStatus,     					packingSlipModeStatusValue,  \n" +
                "                IF(sourceName = 'Tape & Reel', BalanceQty/umidSPQ, 0) AS noOfPackage, 				supplierCodeName, 	mfgCodeName  \n" +
                "		FROM 	(  \n" +
                "				SELECT	vucp.BinID,      		vucp.warehouseID WarehouseID,      		vucp.parentWarehouseID departmentId,  \n" +
                "						b.Name binName,  		IFNULL(c.umidSPQ, 0) umidSPQ,  \n" +
                "						vucp.packingSlipID,  \n" +
                "                        w.Name warehouseName,  \n" +
                "                        fun_getWarehouseNameByID(vucp.parentWarehouseID) departmentName,  \n" +
                "						vucp.PartId,      		c.mfgPN As mfgPN,      		c.PIDCode As pidCode,  \n" +
                "                        c.RoHSStatusID,  \n" +
                "						fun_getCOFCByPackingSlipID(vucp.packingSlipID) packingSlipName,  \n" +
                "						p.name packagingType,  \n" +
                "                        p.sourceName,  \n" +
                "						vucp.packingSlipDate packingSlipDate,  \n" +
                "                        vucp.packingSlipNumber,  \n" +
                "                        vucp.poNumber,  \n" +
                "                        vucp.refPurchaseOrderID as poID,  \n" +
                "						c.mfgCodeID,  \n" +
                "                        mp.mfgName,  \n" +
                "                        mp.mfgCode,  \n" +
                "                        vucp.mfgCodeID supplierCodeID,  \n" +
                "                        ms.mfgName AS supplierName,  \n" +
                "                        ms.mfgCode AS supplierCode,  \n" +
                "						fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "						vucp.nickname,  \n" +
                "						vucp.InQty,				vucp.UMIDCreatedQty,      		vucp.returnQty,  \n" +
                "						vucp.BalanceQty,		c.isCustom,						c.partType,  \n" +
                "						vucp.receivedStatus,  \n" +
                "                        fun_getPackingSlipDetailStatusByKey(vucp.receivedStatus) receivedStatusValue,  \n" +
                "                        vucp.packingSlipModeStatus,  \n" +
                "                        IF(vucp.packingSlipModeStatus = 'D','Draft','Published') AS packingSlipModeStatusValue,  \n" +
                "						fun_GetFormattedMfgCode(ms.mfgCode, ms.mfgName,\", vMfgCodeFormat ,\") AS supplierCodeName,  \n" +
                "						fun_GetFormattedMfgCode(mp.mfgCode, mp.mfgName,\", vMfgCodeFormat ,\") AS mfgCodeName  \n" +
                "				FROM 		vu_umid_creation_pending vucp  \n" +
                "				INNER JOIN 	component c on vucp.PartId = c.id AND c.partType != 4 AND c.isdeleted = 0  \n" +
                "                INNER JOIN  mfgcodemst mp ON c.mfgCodeID = mp.id AND mp.isdeleted = 0  \n" +
                "				INNER JOIN 	binmst b on b.id = vucp.BinID AND b.isdeleted = 0  \n" +
                "                INNER JOIN 	component_packagingmst p on p.id = vucp.packagingID AND p.isdeleted = 0  \n" +
                "				INNER JOIN 	warehousemst w on w.ID = vucp.warehouseID AND w.isdeleted = 0  \n" +
                "                INNER JOIN  mfgcodemst ms ON vucp.mfgCodeID = ms.id AND ms.isdeleted = 0  \n" +
                "				WHERE 		vucp.BalanceQty > 0 \" ,	advanceFilterWhere , \"  \n" +
                "			) As tempNonUMID  \n" +
                "		WHERE \", pWhereClause  \n" +
                "  \n" +
                "	);  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveNonUMIDStockList,\" ) c\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveNonUMIDStockList,\" ) c \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-02-2022 *************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5918,'2.00','V1','User Story 40724: Create Utility to Generate multiple UMID of custom part - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5918:
                allDbChangesArray.push(
                /* **************************** New Script -> 08-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetOperationDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetOperationDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM  \n" +
                "			operations  \n" +
                "		WHERE (isDeleted = FALSE);  \n" +
                "    ELSE  \n" +
                "		SELECT  \n" +
                "			opID,  \n" +
                "			opName,  \n" +
                "			opNumber,  \n" +
                "			opStatus,  \n" +
                "            shortDescription,  \n" +
                "			opDescription,  \n" +
                "			opWorkingCondition,  \n" +
                "			opManagementInstruction,  \n" +
                "			opDeferredInstruction,  \n" +
                "            isDeleted ,  \n" +
                "            updatedAt,  \n" +
                "            createdAt  \n" +
                "		FROM  \n" +
                "			operations  \n" +
                "		WHERE  \n" +
                "			opID = IFNULL(pId,opID) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "				((DATE(fun_CovnertDateTimeByTimezoneValue(createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "					or (DATE(fun_CovnertDateTimeByTimezoneValue(updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5919,'2.00','V1',' Sproc_GetOperationDetailForElastic - SHUBHAM '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
            break;
        case 5919:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetUMIDDetailsByID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUMIDDetailsByID`(  \n" +
                "	IN pUIDId INT,  \n" +
                "	IN pUID VARCHAR(15)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE vMfgCodeFormat INT;  \n" +
                "        SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "		IF(pUIDId IS NULL) THEN  \n" +
                "			SET pUIDId = (SELECT cs.id FROM component_sid_stock cs WHERE cs.uid = pUID AND cs.isDeleted = 0);  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		SELECT 	css.id AS uidId, 		css.uid, 		css.orgqty,			css.pkgQty, 		css.orgPkgUnit,			css.pkgUnit,  \n" +
                "				css.prefix,		css.uidPrefix,	css.sealDate,		css.cpn,			css.RefCPNMFGPNID,		css.mfgAvailabel,  \n" +
                "                css.assyID AS uidAssyID,		css.receiveMaterialType,				css.refSupplierPartId,	css.customerConsign,  \n" +
                "				css.spq, 		css.uom,		css.dateCode, 		css.packaging,		css.stockInventoryType, css.specialNote,  \n" +
                "                css.mfrDateCodeFormatID,		css.mfrDateCode,	css.woID,			u.unitName,				u.measurementTypeID AS uomClassID,  \n" +
                "                css.woNumber, 	css.fromUIDId, 	css.fromUID, 		css.parentUIDId,		css.parentUID,		css.pcbPerArray,  \n" +
                "                (CASE WHEN css.fromUIDId IS NOT NULL AND css.parentUIDId IS NOT NULL THEN TRUE ELSE FALSE END) AS isSplitUID,	css.isReservedStock,  \n" +
                "                css.customerID,	css.scanlabel,	css.costCategoryID,  \n" +
                "                CONCAT(coc.categoryName, ' (', coc.`from`, ' - ', coc.`to`, ' )') costCategoryName,  \n" +
                "                css.lotCode,			css.dateCode,  \n" +
                "                css.nickName,	c.isCustom,    /*css.selfLifeDays,			css.shelfLifeAcceptanceDays,	css.maxShelfLifeAcceptanceDays,*/  \n" +
                "                c.selfLifeDays, 				c.maxShelfLifeAcceptanceDays, 			c.shelfLifeAcceptanceDays,  \n" +
                "				css.binID,				b.name AS currentBinName, 	css.orgRecBin, 		from_bin.Name AS fromBinName,  \n" +
                "                #org_bin.Name AS orgBinName,  \n" +
                "                w.Name AS currentWHName,							pw.Name AS currentParentWHName,  \n" +
                "                css.orgRecWarehouse,	css.orgRecDepartment,		css.fromBin,		css.fromWarehouse,		css.fromDepartment,  \n" +
                "				w.warehouseType,  		css.refcompid, 		c.mfgcodeID, 			c.mfgPN,					c.unit AS componentUnit,  \n" +
                "                c.PIDCode, 				c.mfgPNDescription,			c.imageURL, 		m.mfgName,				c.mfgType,  \n" +
                " 				m.mfgCode, 				c.mountingTypeID,			cp.sourceName, 		cp.name packagingName,  \n" +
                "                c.partPackage, 			pc.Name AS externalPartPackage,  \n" +
                "                css.rohsStatusID AS uidRohsStatusID, 				umid_rohs.Name umidRohsName,				umid_rohs.rohsIcon umidRohsIcon,  \n" +
                "                c.rohsStatusID,			rohs.Name rohsName, 		rohs.rohsIcon, 								mt.hasLimitedShelfLife,  \n" +
                "				vu.packingSlipID,		vu.packingSlipSerialNumber, vu.packingSlipNumber,   					vu.packingSlipDetID,  \n" +
                "                vu.UMIDCreatedQty, 		vu.returnQty,  				vu.InQty, 			vu.BalanceQty,			vu.receivedStatus,  \n" +
                "                vu.packingSlipModeStatus,							fun_GetFormattedMfgCode(m.mfgCode,  m.mfgName, vMfgCodeFormat) as mfgCodeName,  \n" +
                "                (CASE WHEN (css.stockInventoryType = 'NI') THEN  \n" +
                "					CONCAT(mcm.mfgCode, vu.packingSlipNumber)  \n" +
                "				ELSE NULL END) As cofcCode,  \n" +
                "               CONCAT(cmsl.levelRating, '-', cmsl.`code`) AS mslLevel  \n" +
                "		FROM component_sid_stock css  \n" +
                "			JOIN component c ON css.refcompid = c.id AND c.isDeleted = 0  \n" +
                "			JOIN mfgcodemst m on c.mfgcodeID = m.id  AND m.isDeleted = 0  \n" +
                "			JOIN rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  AND c.isDeleted = 0  \n" +
                "			JOIN rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  AND umid_rohs.isDeleted = 0  \n" +
                "            LEFT JOIN component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "			JOIN component_packagingmst cp on css.packaging = cp.id  AND cp.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_packagecasetypemst pc ON c.partPackageID = pc.id AND pc.isDeleted = 0  \n" +
                "            JOIN cost_category coc ON css.costCategoryID = coc.id AND coc.isDeleted = 0  \n" +
                "            JOIN uoms u ON css.uom = u.id AND u.isDeleted = 0  \n" +
                "            JOIN rfq_mountingtypemst mt ON c.mountingTypeID = mt.id AND mt.isDeleted = 0  \n" +
                "			JOIN binmst b on css.binID = b.id AND b.isDeleted = 0  \n" +
                "            JOIN binmst from_bin on css.fromBin = from_bin.id AND from_bin.isdeleted = 0  \n" +
                "			JOIN warehousemst w ON b.WarehouseID = w.id AND w.isDeleted = 0  \n" +
                "			JOIN warehousemst pw ON w.parentWHID = pw.id AND pw.isDeleted = 0  \n" +
                "            LEFT JOIN component_sid_stock_packing_detail csp ON css.id = csp.refComponentSidStockID AND csp.isDeleted = 0  \n" +
                "            LEFT JOIN vu_umid_creation_pending vu ON csp.refPackingSlipDetailID = vu.packingSlipDetID  \n" +
                "            LEFT JOIN mfgcodemst mcm ON mcm.id = vu.mfgCodeID AND mcm.isDeleted = 0  \n" +
                "		WHERE css.id =  (CASE WHEN pUIDId IS NOT NULL THEN pUIDId  \n" +
                "				ELSE (SELECT cs.id FROM component_sid_stock cs WHERE cs.uid = pUID AND cs.isDeleted = 0) END);  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-02-2022 *************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5920,'2.00','V1','User Story 40724: Create Utility to Generate multiple UMID of custom part - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5920:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_packing_slip_material_receive_det`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_packing_slip_material_receive_det`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE v_StartIndex INT;  \n" +
                "		DECLARE v_EndIndex INT;  \n" +
                "		DECLARE v_Id VARCHAR(10);  \n" +
                "		DECLARE v_InvoiceId INT;  \n" +
                "		DECLARE v_InvoiceDetailId INT;  \n" +
                "		DECLARE v_MainInvoiceId INT;  \n" +
                "		DECLARE v_MemoIds VARCHAR(10000);  \n" +
                "		DECLARE v_UpdatedMemoIds VARCHAR(10000);  \n" +
                "		DECLARE v_InvoiceTotalDue DECIMAL(18,8);  \n" +
                "		DECLARE v_CurrentLineExtendedPrice DECIMAL(18,8);  \n" +
                "		DECLARE v_CountOfMemo INT;  \n" +
                "		DECLARE v_IsMemoForPrice TINYINT;  \n" +
                "		DECLARE v_IsMemoForQty TINYINT;  \n" +
                "		SET v_StartIndex = 0;  \n" +
                "		SET @SQl2 = CONCAT('UPDATE packing_slip_material_receive_part_inspection_det SET isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" WHERE lineId IN(', IDs, ') AND deletedAt IS NULL');  \n" +
                "		PREPARE stmt2 FROM @SQL2;  \n" +
                "        EXECUTE stmt2;  \n" +
                "		DEALLOCATE PREPARE stmt2;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Split_Ids_String_Into_Table;  \n" +
                "		CREATE TEMPORARY TABLE temp_Split_Ids_String_Into_Table (id VARCHAR(10));  \n" +
                "		SET @SQL3 = CONCAT(\"INSERT INTO temp_Split_Ids_String_Into_Table (id) values ('\", REPLACE((IDs),',', \"'),('\"),\"');\");  \n" +
                "        PREPARE stmt3 FROM @SQL3;  \n" +
                "		EXECUTE stmt3;  \n" +
                "        DEALLOCATE PREPARE stmt3;  \n" +
                "		SELECT COUNT(1) INTO v_EndIndex FROM temp_Split_Ids_String_Into_Table;  \n" +
                "		WHILE v_StartIndex < v_EndIndex DO  \n" +
                "			SELECT id INTO v_Id FROM temp_Split_Ids_String_Into_Table LIMIT 1 OFFSET v_StartIndex;  \n" +
                "			SELECT refPackingSlipMaterialRecID, refPackingSlipDetId, isMemoForPrice, isMemoForQty INTO v_InvoiceId, v_InvoiceDetailId, v_IsMemoForPrice, v_IsMemoForQty FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;  \n" +
                "            SELECT COUNT(1) INTO v_CountOfMemo FROM packing_slip_material_receive WHERE id = v_InvoiceId AND (receiptType = 'C' OR receiptType = 'D');  \n" +
                "			IF (v_CountOfMemo > 0) THEN  \n" +
                "				SELECT refPackingSlipMaterialRecID, refCreditDebitInvoiceNo INTO v_MainInvoiceId, v_MemoIds FROM packing_slip_material_receive_det WHERE id = v_InvoiceDetailId AND isDeleted = 0;  \n" +
                "				IF (v_MemoIds IS NOT NULL) THEN  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_Split_String_Into_Table;  \n" +
                "					CREATE TEMPORARY TABLE temp_Split_String_Into_Table (lineId VARCHAR(10));  \n" +
                "                    SET @SQL4 = CONCAT(\"INSERT INTO temp_Split_String_Into_Table (lineId) values ('\", REPLACE((v_MemoIds),',', \"'),('\"),\"');\");  \n" +
                "					PREPARE stmt4 FROM @SQL4;  \n" +
                "                    EXECUTE stmt4;  \n" +
                "                    DEALLOCATE PREPARE stmt4;  \n" +
                "					UPDATE 	packing_slip_material_receive SET 	`status` = 'I', invoiceApprovalStatus = (case when (invoiceApprovalStatus = 1 or invoiceRequireManagementApproval = 1) then 2 else invoiceApprovalStatus end),  \n" +
                "                    invoiceApprovalComment = (case when (invoiceApprovalStatus = 1 or invoiceRequireManagementApproval = 1) then null else invoiceApprovalComment end),  \n" +
                "                    invoiceApprovalDate = (case when (invoiceApprovalStatus = 1 or invoiceRequireManagementApproval = 1) then null else invoiceApprovalDate end),  \n" +
                "                    invoiceApprovedBy = (case when (invoiceApprovalStatus = 1 or invoiceRequireManagementApproval = 1) then null else invoiceApprovedBy end)  \n" +
                "					WHERE 	id = v_MainInvoiceId AND receiptType = 'I' AND isDeleted = 0;  \n" +
                "					SELECT IFNULL(invoiceTotalDue, 0) INTO v_InvoiceTotalDue FROM packing_slip_material_receive WHERE id = v_InvoiceId AND isDeleted = 0;  \n" +
                "					SELECT ABS(IFNULL(extendedPrice, 0)) INTO v_CurrentLineExtendedPrice FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;  \n" +
                "					UPDATE 	packing_slip_material_receive SET 	`status` = 'A', invoiceTotalDue = (v_InvoiceTotalDue - v_CurrentLineExtendedPrice)  \n" +
                "					WHERE 	id = v_InvoiceId AND isDeleted = 0;  \n" +
                "					UPDATE 	packing_slip_material_receive ps  \n" +
                "					SET 	ps.`status` = (CASE WHEN ps.packingSlipModeStatus = 'D' THEN 'I' ELSE 'IR' END)  \n" +
                "					WHERE 	ps.refPackingSlipNumberForInvoice = v_MainInvoiceId AND ps.receiptType = 'P' AND ps.isDeleted = 0;  \n" +
                "					UPDATE 	packing_slip_material_receive_det SET 	isDeleted = 1, deletedBy = deletedBy, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "                    WHERE 	id = v_Id AND isDeleted = 0;  \n" +
                "					IF ((SELECT COUNT(1) FROM packing_slip_material_receive_det WHERE refPackingSlipMaterialRecID = v_InvoiceId AND refPackingSlipDetId = v_InvoiceDetailId AND isDeleted = 0) = 0) THEN  \n" +
                "						DELETE FROM temp_Split_String_Into_Table WHERE lineId = v_InvoiceId;  \n" +
                "					END IF;  \n" +
                "					SELECT GROUP_CONCAT(lineId) INTO v_UpdatedMemoIds  FROM temp_Split_String_Into_Table;  \n" +
                "					UPDATE 	packing_slip_material_receive_det SET 	`status` = 'D', refCreditDebitInvoiceNo = v_UpdatedMemoIds, isMemoForPrice = (CASE WHEN v_IsMemoForPrice = 1 THEN 0 ELSE isMemoForPrice END),  \n" +
                "					isMemoForQty = (CASE WHEN v_IsMemoForQty = 1 THEN 0 ELSE isMemoForQty END), difference = (CASE WHEN v_IsMemoForPrice = 1 THEN NULL ELSE difference END), differenceQty = (CASE WHEN v_IsMemoForQty = 1 THEN NULL ELSE differenceQty END)  \n" +
                "					WHERE 	id = v_InvoiceDetailId AND isDeleted = 0;  \n" +
                "				ELSE  \n" +
                "					IF ((SELECT receiptType FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = v_InvoiceId AND isDeleted = 0) = 'R') THEN  \n" +
                "						UPDATE 	packing_slip_material_receive SET 	`status` = 'WC', packingSlipModeStatus = 'S'  \n" +
                "						WHERE  	refPackingSlipNumberForInvoice = v_InvoiceId AND isDeleted = 0;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive_det SET 	isDeleted = 1, deletedBy = deletedBy, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "					WHERE 	id = v_Id AND isDeleted = 0;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				UPDATE 	packing_slip_material_receive_det SET 	isDeleted = 1, deletedBy = deletedBy, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	id = v_Id AND isDeleted = 0;  \n" +
                "			END IF;  \n" +
                "			SET v_StartIndex = v_StartIndex + 1;  \n" +
                "		END WHILE;  \n" +
                "		/*SET @SQl1 = CONCAT('update packing_slip_material_receive_det set isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" where id IN(', IDs, ') and deletedAt is NULL');  \n" +
                "		PREPARE stmt1 FROM @SQL1;  \n" +
                "		EXECUTE stmt1;  \n" +
                "		DEALLOCATE PREPARE stmt1;   */  \n" +
                "		SELECT COUNT(1) TotalCount FROM packing_slip_material_receive_det WHERE id IN (IDs) AND isDeleted = 0 AND deletedAt IS NULL;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF OLD.receiptType = \"P\" AND OLD.refPurchaseOrderID IS NULL AND NEW.isCustConsigned != OLD.isCustConsigned THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isLineCustConsigned=NEW.isCustConsigned, LineCustomerID=NEW.CustomerID WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		CASE  \n" +
                "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
                "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
                "			ELSE 'PO Date'  \n" +
                "		END ,  \n" +
                "		CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Date', CAST(OLD.packingSlipDate AS CHAR), CAST(new.packingSlipDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(new.invoiceDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(new.creditMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(new.debitMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(new.receiptDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
                "				ELSE 'Supplier Invoice Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN OLD.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN NEW.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
                "				ELSE 'Supplier Invoice Posting Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(new.applyDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
                "				ELSE 'Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
                "				ELSE 'PS Internal Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "	IF IFNULL(OLD.billToAddress,0) != IFNULL(NEW.billToAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To', CAST(OLD.billToAddress AS CHAR), CAST(new.billToAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.billToConactPerson,0) != IFNULL(NEW.billToConactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To Contact Person', CAST(OLD.billToConactPerson AS CHAR), CAST(new.billToConactPerson AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToConactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaShippingContactPerson,0) != IFNULL(NEW.rmaShippingContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To Contact Person', OLD.rmaShippingContactPerson, new.rmaShippingContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaMarkForContactPerson,0) != IFNULL(NEW.rmaMarkForContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For Contact Person', OLD.rmaMarkForContactPerson, new.rmaMarkForContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			case when OLD.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "            case when new.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CustomerID, 0) != IFNULL(NEW.CustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.CustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.CustomerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovalComment, 0) != IFNULL(NEW.invoiceApprovalComment, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approval Comment',  CAST(OLD.invoiceApprovalComment AS CHAR), CAST(NEW.invoiceApprovalComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovalDate, 0) != IFNULL(NEW.invoiceApprovalDate, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approved On',  CAST(fun_ApplyCommonDateTimeFormatByParaValue(OLD.invoiceApprovalDate,FUN_GETTIMEZONE(), FUN_GETDATETIMEFORMAT()) AS CHAR), CAST(fun_ApplyCommonDateTimeFormatByParaValue(NEW.invoiceApprovalDate,FUN_GETTIMEZONE(), FUN_GETDATETIMEFORMAT()) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovedBy, 0) != IFNULL(NEW.invoiceApprovedBy, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approved By',  CAST(fun_getUserNameByID(OLD.invoiceApprovedBy) AS CHAR), CAST(fun_getUserNameByID(NEW.invoiceApprovedBy) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 10-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5921,'2.00','V1',' Bug 41236: [Main Branch] SINV status changes from Partially paid to Approved to paid if made any changes in SINV - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5921:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-02-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	IF OLD.receiptType = \"P\" AND OLD.refPurchaseOrderID IS NULL AND NEW.isCustConsigned != OLD.isCustConsigned THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isLineCustConsigned=NEW.isCustConsigned, LineCustomerID=NEW.CustomerID,updatedBy=NEW.updatedBy, updateByRoleId=NEW.updateByRoleId ,updatedAt=fun_DatetimetoUTCDateTime()  WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		CASE  \n" +
                "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
                "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
                "			ELSE 'PO Date'  \n" +
                "		END ,  \n" +
                "		CAST(OLD.poDate AS CHAR), CAST(NEW.poDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(NEW.soDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip Date', CAST(OLD.packingSlipDate AS CHAR), CAST(NEW.packingSlipDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(NEW.invoiceDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(NEW.creditMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(NEW.debitMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(NEW.receiptDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
                "				ELSE 'Supplier Invoice Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN OLD.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN NEW.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
                "				ELSE 'Supplier Invoice Posting Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(NEW.applyDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
                "				ELSE 'Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
                "				ELSE 'PS Internal Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "	IF IFNULL(OLD.billToAddress,0) != IFNULL(NEW.billToAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To', CAST(OLD.billToAddress AS CHAR), CAST(new.billToAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.billToConactPerson,0) != IFNULL(NEW.billToConactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To Contact Person', CAST(OLD.billToConactPerson AS CHAR), CAST(new.billToConactPerson AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToConactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaShippingContactPerson,0) != IFNULL(NEW.rmaShippingContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To Contact Person', OLD.rmaShippingContactPerson, new.rmaShippingContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaMarkForContactPerson,0) != IFNULL(NEW.rmaMarkForContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For Contact Person', OLD.rmaMarkForContactPerson, new.rmaMarkForContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			case when OLD.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "            case when new.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CustomerID, 0) != IFNULL(NEW.CustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.CustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.CustomerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovalComment, 0) != IFNULL(NEW.invoiceApprovalComment, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approval Comment',  CAST(OLD.invoiceApprovalComment AS CHAR), CAST(NEW.invoiceApprovalComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovalDate, 0) != IFNULL(NEW.invoiceApprovalDate, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approved On',  CAST(fun_ApplyCommonDateTimeFormatByParaValue(OLD.invoiceApprovalDate,FUN_GETTIMEZONE(), FUN_GETDATETIMEFORMAT()) AS CHAR), CAST(fun_ApplyCommonDateTimeFormatByParaValue(NEW.invoiceApprovalDate,FUN_GETTIMEZONE(), FUN_GETDATETIMEFORMAT()) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovedBy, 0) != IFNULL(NEW.invoiceApprovedBy, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approved By',  CAST(fun_getUserNameByID(OLD.invoiceApprovedBy) AS CHAR), CAST(fun_getUserNameByID(NEW.invoiceApprovedBy) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "      IF IFNULL(OLD.invoiceRequireManagementApproval, 0) != IFNULL(NEW.invoiceRequireManagementApproval, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Invoice Require Management Approval',  CAST(CASE WHEN OLD.invoiceRequireManagementApproval=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.invoiceRequireManagementApproval=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  END;  \n" +
                /* **************************** New Script -> 11-02-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_PackingSlipReceiptType VARCHAR(5);  \n" +
                "	DECLARE v_CreditMemoType VARCHAR(5);  \n" +
                "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE PORLINE_OTY INT;  \n" +
                "	DECLARE vTotalQty INT;  \n" +
                "    DECLARE vPOID INT;  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
                "    select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
                "  \n" +
                "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vPOID IS NOT NULL) THEN  \n" +
                "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
                "        /* (-20) is Purchase Order Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-20,concat('{\"id\":', vPOID , '}'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','packingSlipSerialNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poReleaseNumber,0) != IFNULL(NEW.poReleaseNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Release#', CAST(OLD.poReleaseNumber AS CHAR), CAST(new.poReleaseNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','poReleaseNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRef'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','nickname'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rohsstatus,0) != IFNULL(NEW.rohsstatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'RoHS Requirement', CAST(fun_getRoHSNameByID(OLD.rohsstatus) AS CHAR), CAST(fun_getRoHSNameByID(new.rohsstatus) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MPN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'SPN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),  \n" +
                "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'qty');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),  \n" +
                "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN  \n" +
                "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(OLD.invoicePrice AS CHAR), CAST(new.invoicePrice AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'unitprice');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(OLD.purchasePrice AS CHAR), CAST(new.purchasePrice AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'unitprice');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','approveNote'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN old.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN old.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN new.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN new.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),  \n" +
                "			OLD.extendedPrice, new.extendedPrice, fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',  \n" +
                "		OLD.extendedReceivedPrice, new.extendedReceivedPrice,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(OLD.difference AS CHAR), CAST(new.difference AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'unitprice');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(OLD.differenceQty AS CHAR), CAST(new.differenceQty AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN old.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN old.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN new.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN new.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','comment'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF v_PackingSlipReceiptType = 'R' THEN  \n" +
                "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,  \n" +
                "		CONCAT(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '  \n" +
                "					ELSE 'Line# '  \n" +
                "				END  \n" +
                "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isLineCustConsigned,0) != IFNULL(NEW.isLineCustConsigned,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer Consigned (No Charge)',CAST(CASE WHEN OLD.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.LineCustomerID,0) != IFNULL(NEW.LineCustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.LineCustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.LineCustomerID;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer',CAST(vOldCustomer AS CHAR),  \n" +
                "		CAST(vNewCustomer AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock,0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Do Not Create UMID',CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 11-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5922,'2.00','V1',' Bug 41299: [Main Branch] Showing incorrect user name in Modified By for Packing Slip History - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5922:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-02-2022 *********************************** */
                "UPDATE systemconfigrations  \n" +
                "	SET `description` = 'Number of UMID(s) which can allowed to create from \"CREATE UMID WITH IDENTICAL DETAILS\"' ,  \n" +
                "		updatedBy = 1,  updateByRoleId = 1, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "	WHERE `key` = 'MaxUMID';  \n" +
                /* **************************** Add Script Version -> 14-02-2022 *************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5923,'2.00','V1','Bug 41284: Qa testing issues for #40724: Create Utility to generate multiple UMID of custom part - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5923:
	allDbChangesArray.push(
	/* **************************** New Script -> 14-02-2022 *********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_GetAssemblyWOStockDetails;  \n" +
	"CREATE PROCEDURE `Sproc_GetAssemblyWOStockDetails`(  \n" +
	"	IN ppageIndex INT,  \n" +
	"	IN pRecordPerPage INT,  \n" +
	"	IN pOrderBy VARCHAR(255),  \n" +
	"	IN pWhereClause VARCHAR(16383),  \n" +
	"	IN pPartID INT,  \n" +
	"	IN pWoID INT ,  \n" +
	"    IN pPONumber VARCHAR(255),  \n" +
	"    IN pIsShowAllWO TINYINT,  \n" +
	"    IN pSONumber VARCHAR(255))  \n" +
	"BEGIN  \n" +
	"	DECLARE pOffset INT;  \n" +
	"	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
	"	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
	"	DECLARE v_TimeZone VARCHAR(50);  \n" +
	"	DECLARE whereClause1 VARCHAR(500);  \n" +
	"	SET whereClause1 = \"where 1=1\";  \n" +
	"  \n" +
	"    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
	"		SET pWhereClause = '1=1' ;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
	"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
	"  \n" +
	"    IF pPartID IS NOT NULL THEN  \n" +
	"		SET whereClause1 = CONCAT(whereClause1,\" AND PartID = \", pPartID);  \n" +
	"	END IF;  \n" +
	"  \n" +
	"    IF pWoID IS NOT NULL THEN  \n" +
	"		SET whereClause1 = CONCAT(whereClause1,\" AND vu_wss.woID = \", pWoID);  \n" +
	"	END IF;  \n" +
	"  \n" +
	"    IF (pPONumber IS NOT NULL) THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND c.poNumber like \"%' ,pPONumber,'%\" and c.soNumbers like \"%' ,pSONumber,'%\" ' );  \n" +
	"	END IF;  \n" +
	"  \n" +
	"     IF (pIsShowAllWO IS NOT NULL)  THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND remaningtotalQty > 0 ');  \n" +
	"    END IF;  \n" +
	"  \n" +
	"	SET @Sproc_GetAssemblyWOStockDetails = CONCAT(\"SELECT vu_wss.* ,  \n" +
	"						(vu_wss.readytoShipQty + vu_wss.shippedQty) AS movedToStockQty ,  \n" +
	"						vu_wosod.totalPOQty, vu_wosod.POQtyValues soPOQty,  \n" +
	"						 vu_wosod.totalMRPQty, vu_wosod.MRPQtyValues soMRPQty,  \n" +
	"                         (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.initialStockPoQty ELSE vu_wss.poQty END) AS initialWOStockPOQty ,  \n" +
	"						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
	"							(select group_concat(poNumberList SEPARATOR ',') FROM (  \n" +
	"								SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT poNumber SEPARATOR ', ')  \n" +
	"								else GROUP_CONCAT(DISTINCT poNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end	) poNumberList  \n" +
	"								 FROM `assemblystock`  \n" +
	"								 WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS' and partID = vu_wss.partID  \n" +
	"								 GROUP BY refSalesOrderID, poNumber) a)  \n" +
	"							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.poNumber ELSE parentSaleDtl.poNumber END)  \n" +
	"						   END) poNumber,  \n" +
	"						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
	"							(select group_concat(if(soNumberList='',null,soNumberList) SEPARATOR ',') FROM (  \n" +
	"								SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT soNumber SEPARATOR ', ')  \n" +
	"									 else GROUP_CONCAT(DISTINCT soNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end)  soNumberList  \n" +
	"									FROM `assemblystock`  \n" +
	"									WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS' and partID = vu_wss.partID  \n" +
	"								 GROUP BY refSalesOrderID, soNumber) a)  \n" +
	"							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END)  \n" +
	"                            END) soNumbers,  \n" +
	"						vu_wosod.lineID, vu_wosod.salesOrderMstIDs, vu_wosod.SOPOQtyValues ,  \n" +
	"						(CASE WHEN vu_wss.woid IS NULL THEN 'Initial Stock' ELSE 'Work Order Stock' END) AS stockTypeName ,  \n" +
	"                        (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.stockAdjustmentQty ELSE ((vu_wss.buildQty - vu_wss.scrapQty - vu_wss.poQty) + vu_wss.stockAdjustmentQty) END) AS excessFreetoUseQty,  \n" +
	"                        (CASE WHEN vu_wss.woid IS NULL THEN ((vu_wss.readytoShipQty + vu_wss.shippedQty + vu_wss.stockAdjustmentQty) - (vu_wss.shippedQty)) ELSE ((vu_wss.buildQty) - (vu_wss.scrapQty + vu_wss.shippedQty + vu_wss.readytoShipQty)) END) AS remaningtotalQty  \n" +
	"					FROM vu_workorder_summary_stk vu_wss  \n" +
	"						LEFT JOIN (SELECT woID AS woMstID, terminateWOID, isRevisedWO FROM workorder WHERE deletedAt IS NULL) AS wo  \n" +
	"								ON vu_wss.woid = wo.woMstID  \n" +
	"						LEFT JOIN vu_workorder_salesorder_details vu_wosod ON vu_wss.woid =  vu_wosod.woID  \n" +
	"						LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON wo.terminateWOID = parentSaleDtl.woID  \n" +
	"					\", whereClause1);  \n" +
	"  \n" +
	"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
	"		SET pOrderBy = CONCAT(\"ORDER BY woid ASC\");  \n" +
	"	ELSE  \n" +
	"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
	"		SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
	"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
	"	ELSE  \n" +
	"		SET rowNumWhere = '';  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyWOStockDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
	"	PREPARE query1 FROM @SQLStatement1;  \n" +
	"	EXECUTE query1;  \n" +
	"	DEALLOCATE PREPARE query1;  \n" +
	"  \n" +
	"	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyWOStockDetails,\" ) c where \" , pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
	"-- select @SQLStatement2;  \n" +
	"    PREPARE query2 FROM @SQLStatement2;  \n" +
	"	EXECUTE query2;  \n" +
	"	DEALLOCATE PREPARE query2;  \n" +
	"END;  \n" +
	/* **************************** Add Script Version -> 14-02-2022  *********************************** */
		"INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
		"VALUES (5924,'2.00','V1','Bug 41337: [Main Branch] - While adding duplicate WO in initial stock and refresh View Assembly Stock List popup that time error should not be displayed on screen. - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
	);
break;
case 5924:
	allDbChangesArray.push(
	/* **************************** New Script -> 14-02-2022 *********************************** */
	"DROP TRIGGER IF EXISTS Trg_AU_customer_packingslip;  \n" +
	"CREATE TRIGGER `Trg_AU_customer_packingslip` AFTER UPDATE ON `customer_packingslip` FOR EACH ROW BEGIN  \n" +
	"	DECLARE vTransTypeText VARCHAR(20);  \n" +
	"	SET vTransTypeText= IF(NEW.transType='I','Invoice','Credit Memo');  \n" +
	"  \n" +
	"    IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
	"       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO#',CAST(OLD.soNumber AS CHAR),  \n" +
	"       CAST(NEW.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"	END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
	"     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO#',CAST(OLD.poNumber AS CHAR),  \n" +
	"       CAST(NEW.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
	"     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO Date',CAST(DATE_FORMAT(OLD.poDate, '%m/%d/%y') AS CHAR),  \n" +
	"       CAST(DATE_FORMAT(NEW.poDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
	"     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Date', CAST(DATE_FORMAT(OLD.soDate, '%m/%d/%y') AS CHAR),  \n" +
	"       CAST(DATE_FORMAT(NEW.soDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) THEN  \n" +
	"     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Contact Person',(SELECT CONCAT(firstName,' ',lastName) FROM contactperson WHERE personId=OLD.contactPersonId),  \n" +
	"      (SELECT CONCAT(firstName,' ',lastName) FROM contactperson WHERE personId=NEW.contactPersonId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.packingSlipComment,0) != IFNULL(NEW.packingSlipComment,0) THEN  \n" +
	"     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Shipping Comments', OLD.packingSlipComment,  \n" +
	"       NEW.packingSlipComment, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.substatus ,0) != IFNULL(NEW.substatus ,0) THEN  \n" +
	"	IF(NEW.transType='P')THEN  \n" +
	"		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft'WHEN OLD.substatus=2 THEN 'Ready To Ship'WHEN OLD.substatus=3 THEN 'Waiting For Shipping Label'WHEN OLD.substatus=4 THEN 'Waiting For Pickup' WHEN OLD.substatus= 6 THEN 'Published' WHEN OLD.substatus= 5 THEN 'Shipped'  ELSE '' END),  \n" +
	"		(CASE WHEN NEW.substatus=1 THEN 'Draft'WHEN NEW.substatus=2 THEN 'Ready To Ship'WHEN NEW.substatus=3 THEN 'Waiting For Shipping Label'WHEN NEW.substatus=4 THEN 'Waiting For Pickup' WHEN NEW.substatus=6 THEN 'Published'  ELSE 'Shipped' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"	ELSEIF (NEW.transType='I')THEN  \n" +
	"		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Shipped - Not Invoiced' WHEN OLD.substatus=2 THEN 'Invoiced' WHEN Old.subStatus=3 THEN 'Corrected and Invoiced'  WHEN Old.subStatus=4 THEN 'Draft' WHEN Old.subStatus=5 THEN 'Published' END),  \n" +
	"		(CASE WHEN NEW.substatus=1 THEN 'Shipped - Not Invoiced' WHEN NEW.substatus=2 THEN 'Invoiced' WHEN NEW.subStatus=3 THEN 'Corrected and Invoiced'  WHEN NEW.subStatus=4 THEN 'Draft' WHEN NEW.subStatus=5 THEN 'Published' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"	ELSEIF (NEW.transType='C')THEN  \n" +
	"		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft' WHEN OLD.substatus=2 THEN 'Published' ELSE '' END),  \n" +
	"		(CASE WHEN NEW.substatus=1 THEN 'Draft' WHEN NEW.substatus=2 THEN 'Published' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"	END IF;  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.shippingMethodId ,0) != IFNULL(NEW.shippingMethodId ,0) THEN  \n" +
	"     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Shipping Method', fun_getGenericCategoryNameByID(OLD.shippingMethodId),  \n" +
	"       fun_getGenericCategoryNameByID(NEW.shippingMethodId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.sorevision ,0) != IFNULL(NEW.sorevision ,0) THEN  \n" +
	"     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Version', CAST(OLD.sorevision AS CHAR),  \n" +
	"       CAST(NEW.sorevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.freeOnBoardId ,0) != IFNULL(NEW.freeOnBoardId ,0) THEN  \n" +
	"     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'FOB',(SELECT `name` FROM freeonboardmst WHERE id=OLD.freeOnBoardId) ,  \n" +
	"     (SELECT `name` FROM freeonboardmst WHERE id=NEW.freeOnBoardId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.invoiceNumber ,0) != IFNULL(NEW.invoiceNumber ,0) THEN  \n" +
	"     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice#',CAST(OLD.invoiceNumber AS CHAR) ,  \n" +
	"     CAST(NEW.invoiceNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.invoiceDate ,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
	"     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice Date',CAST(DATE_FORMAT(OLD.invoiceDate, '%m/%d/%y') AS CHAR) ,  \n" +
	"     CAST(DATE_FORMAT(NEW.invoiceDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.headerComment ,0) != IFNULL(NEW.headerComment,0) THEN  \n" +
	"     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Internal Notes',CAST(OLD.headerComment AS CHAR),  \n" +
	"     CAST(NEW.headerComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
	"	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip Date',CAST(DATE_FORMAT(OLD.packingSlipDate, '%m/%d/%y') AS CHAR),  \n" +
	"		CAST(DATE_FORMAT(NEW.packingSlipDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
	"       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip#',CAST(OLD.packingSlipNumber AS CHAR),  \n" +
	"		CAST(NEW.packingSlipNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
	"	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Terms',  \n" +
	"		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
	"			FROM genericcategory  WHERE gencCategoryID = OLD.termsID) ,  \n" +
	"		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
	"			FROM genericcategory  WHERE gencCategoryID = NEW.termsID) ,  \n" +
	"	fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN  \n" +
	"	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Sales Commission To',  \n" +
	"		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = OLD.salesCommissionTo),  \n" +
	"		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = NEW.salesCommissionTo),  \n" +
	"		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.totalAmount ,0) != IFNULL(NEW.totalAmount ,0) THEN  \n" +
	"	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Total Amount ($)',  \n" +
	"		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(OLD.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(OLD.totalAmount,2) AS CHAR) END,  \n" +
	"		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(NEW.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(NEW.totalAmount,2) AS CHAR) END,  \n" +
	"		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.isLocked,0) != IFNULL(NEW.isLocked,0) THEN  \n" +
	"     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Locked',(CASE WHEN OLD.isLocked=0 THEN 'No' WHEN OLD.isLocked=1 THEN 'Yes' ELSE '' END),  \n" +
	"      (CASE WHEN NEW.isLocked=0 THEN 'No' WHEN NEW.isLocked=1 THEN 'Yes' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.lockedAt ,0) != IFNULL(NEW.lockedAt ,0) THEN  \n" +
	"	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
	"	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked Date' ELSE 'Locked Date' END),'',  \n" +
	"		(CASE WHEN OLD.isLocked = 1 THEN fun_DatetimetoUTCDateTime() ELSE NEW.lockedAt END),  \n" +
	"		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
	"		fun_getDataTypeBasedOnTableAndColumnName(\"CUSTOMER_PACKINGSLIP\",'lockedAt'));  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.lockedBy ,0) != IFNULL(NEW.lockedBy ,0) THEN  \n" +
	"	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked By' ELSE 'Locked By' END),'',  \n" +
	"		(CASE WHEN OLD.isLocked = 1 THEN fun_getUserNameByID(NEW.updatedBy) ELSE fun_getUserNameByID(NEW.lockedBy) END) ,  \n" +
	"		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"   IF IFNULL(OLD.billingAddress ,0) != IFNULL(NEW.billingAddress ,0) THEN  \n" +
	"	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Bill To',CAST(OLD.billingAddress AS CHAR),  \n" +
	"		CAST(NEW.billingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.shippingAddress ,0) != IFNULL(NEW.shippingAddress ,0) THEN  \n" +
	"	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ship To',CAST(OLD.shippingAddress AS CHAR),  \n" +
	"		CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.intermediateAddress ,0) != IFNULL(NEW.intermediateAddress ,0) THEN  \n" +
	"	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Mark For',CAST(OLD.intermediateAddress AS CHAR) ,  \n" +
	"		CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.creditMemoNumber ,0) != IFNULL(NEW.creditMemoNumber ,0) THEN  \n" +
	"	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Number',CAST(OLD.creditMemoNumber AS CHAR),  \n" +
	"		CAST(NEW.creditMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
	"     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Date',CAST(DATE_FORMAT(OLD.creditMemoDate, '%m/%d/%y') AS CHAR),  \n" +
	"       CAST(DATE_FORMAT(NEW.creditMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.refDebitMemoNumber ,0) != IFNULL(NEW.refDebitMemoNumber ,0) THEN  \n" +
	"	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo#',CAST(OLD.refDebitMemoNumber AS CHAR) ,  \n" +
	"		CAST(NEW.refDebitMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.refDebitMemoDate,0) != IFNULL(NEW.refDebitMemoDate,0) THEN  \n" +
	"     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo Date',CAST(DATE_FORMAT(OLD.refDebitMemoDate, '%m/%d/%y') AS CHAR),  \n" +
	"       CAST(DATE_FORMAT(NEW.refDebitMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"  \n" +
	"    IF IFNULL(OLD.rmaNumber ,0) != IFNULL(NEW.rmaNumber ,0) THEN  \n" +
	"	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'RMA#',CAST(OLD.rmaNumber AS CHAR) ,  \n" +
	"		CAST(NEW.rmaNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"   IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision,0) THEN  \n" +
	"	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Revision',OLD.revision  ,  \n" +
	"		NEW.revision , fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"     IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
	"		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),CONCAT('Confirming Zero Value',vTransTypeText),(CASE WHEN OLD.isZeroValue =0 THEN 'False' ELSE 'True' END),  \n" +
	"	   (CASE WHEN NEW.isZeroValue =0 THEN 'False' ELSE 'True' END),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"	END IF;  \n" +
	"  \n" +
	"     IF IFNULL(OLD.poRevision,0) != IFNULL(NEW.poRevision,0) THEN  \n" +
	"		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'PO Revision',OLD.poRevision,NEW.poRevision,  \n" +
	"       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"	END IF;  \n" +
	"  \n" +
	"     IF IFNULL(OLD.isMarkForRefund,0) != IFNULL(NEW.isMarkForRefund,0) THEN  \n" +
	"		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Mark For Refund',OLD.isMarkForRefund,NEW.isMarkForRefund,  \n" +
	"       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"	END IF;  \n" +
	"  \n" +
	"    IF IFNULL(OLD.agreedRefundAmt,0) != IFNULL(NEW.agreedRefundAmt,0) THEN  \n" +
	"		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Agreed Refund Amt',OLD.agreedRefundAmt,NEW.agreedRefundAmt,  \n" +
	"       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"	END IF;  \n" +
	"      IF IFNULL(OLD.carrierID ,0) != IFNULL(NEW.carrierID ,0) THEN  \n" +
	"     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Carrier', fun_getGenericCategoryNameByID(OLD.carrierID),  \n" +
	"       fun_getGenericCategoryNameByID(NEW.carrierID), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"    IF IFNULL(OLD.carrierAccountNumber ,0) != IFNULL(NEW.carrierAccountNumber ,0) THEN  \n" +
	"		 INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Carrier Account# ', CAST(OLD.carrierAccountNumber AS CHAR),  \n" +
	"		   CAST(NEW.carrierAccountNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"    END IF;  \n" +
	"    IF IFNULL(OLD.billingContactPersonID,0) != IFNULL(NEW.billingContactPersonID,0) THEN  \n" +
	"		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'BillTo Contact Person',  \n" +
	"        fun_contactPersonDetailByID(OLD.billingContactPersonID),fun_contactPersonDetailByID(NEW.billingContactPersonID),  \n" +
	"		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"	END IF;  \n" +
	"	IF IFNULL(OLD.shippingContactPersonID,0) != IFNULL(NEW.shippingContactPersonID,0) THEN  \n" +
	"		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'ShipTo Contact Person',  \n" +
	"        fun_contactPersonDetailByID(OLD.shippingContactPersonID),fun_contactPersonDetailByID(NEW.shippingContactPersonID),  \n" +
	"		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"	END IF;  \n" +
	"    IF IFNULL(OLD.intermediateContactPersonID,0) != IFNULL(NEW.intermediateContactPersonID,0) THEN  \n" +
	"		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
	"		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Mark For Contact Person',  \n" +
	"        fun_contactPersonDetailByID(OLD.intermediateContactPersonID),fun_contactPersonDetailByID(NEW.intermediateContactPersonID),  \n" +
	"		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
	"	END IF;  \n" +
	"   END;  \n" +
	/* **************************** Add Script Version -> 14-02-2022  *********************************** */
		"INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
		"VALUES (5925,'2.00','V1','Bug 41300: [Main Branch]: CPS/CIN history should not mismatch. - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
	);
break;
case 5925:
	allDbChangesArray.push(
	/* **************************** New Script -> 14-02-2022 *********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_AddCustomerPackingSlip;  \n" +
	"CREATE PROCEDURE `Sproc_AddCustomerPackingSlip`(  \n" +
	"	IN pCPSData JSON,  \n" +
	"    IN puserID INT,  \n" +
	"	IN puserRoleID INT ,  \n" +
	"	IN pSystemId VARCHAR(20),  \n" +
	"	IN pPackingSlipId INT  \n" +
	")  \n" +
	"BEGIN  \n" +
	"	DECLARE vTermsDays INT ;  \n" +
	"	DECLARE v_incrementI INT;  \n" +
	"  \n" +
	"	DROP TEMPORARY TABLE IF EXISTS temp_customer_packingslip;  \n" +
	"	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customer_packingslip AS  \n" +
	"	SELECT 	*  \n" +
	"	FROM 	JSON_TABLE(  \n" +
	"			pCPSData,  \n" +
	"			\"$[*]\" COLUMNS(  \n" +
	"				`transType` VARCHAR(5) PATH \"$.transType\",  \n" +
	"				`packingSlipType` INT PATH \"$.packingSlipType\",  \n" +
	"				`customerID` INT PATH \"$.customerID\" ,  \n" +
	"				`status` INT PATH \"$.status\",  \n" +
	"				`subStatus` INT PATH \"$.subStatus\",  \n" +
	"				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",  \n" +
	"				`poNumber` VARCHAR(50) PATH \"$.poNumber\",  \n" +
	"				`poDate` DATE PATH \"$.poDate\",  \n" +
	"				`soNumber` VARCHAR(50) PATH \"$.soNumber\",  \n" +
	"				`soDate` DATE PATH \"$.soDate\",  \n" +
	"				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,  \n" +
	"				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,  \n" +
	"				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,  \n" +
	"				`shippingMethodID` INT PATH \"$.shippingMethodID\",  \n" +
	"				`headerComment` TEXT PATH \"$.headerComment\" ,  \n" +
	"				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,  \n" +
	"				`billingAddress` TEXT PATH \"$.billingAddress\" ,  \n" +
	"				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,  \n" +
	"				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,  \n" +
	"				`billToId` INT PATH \"$.billToId\" ,  \n" +
	"				`shipToId` INT PATH \"$.shipToId\" ,  \n" +
	"				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,  \n" +
	"				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,  \n" +
	"				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,  \n" +
	"				`termsId` INT PATH \"$.termsId\" ,  \n" +
	"				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,  \n" +
	"				`contactPersonId` INT PATH \"$.contactPersonId\",  \n" +
	"				`revision` TEXT PATH \"$.revision\",  \n" +
	"				`isZeroValue` TINYINT PATH \"$.isZeroValue\",  \n" +
	"				`isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\",  \n" +
	"				`poRevision` VARCHAR(50) PATH \"$.poRevision\" ,  \n" +
	"				`isAskForVersionConfirmation` TINYINT PATH \"$.isAskForVersionConfirmation\" ,  \n" +
	"                `carrierID` INT PATH \"$.carrierID\",  \n" +
	"                `carrierAccountNumber` VARCHAR(50) PATH \"$.carrierAccountNumber\",  \n" +
	"                `billingContactPersonID` INT PATH \"$.billingContactPersonID\",  \n" +
	"                `shippingContactPersonID` INT PATH \"$.shippingContactPersonID\",  \n" +
	"                `intermediateContactPersonID` INT PATH \"$.intermediateContactPersonID\",  \n" +
	"                `billingContactPerson` INT PATH \"$.billingContactPerson\",  \n" +
	"                `shippingContactPerson` INT PATH \"$.shippingContactPerson\",  \n" +
	"                `intermediateContactPerson` INT PATH \"$.intermediateContactPerson\"  \n" +
	"			)  \n" +
	"		) AS CustPS_JT;  \n" +
	"  \n" +
	"		INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
	"				poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
	"				packingSlipDate,shippingMethodID,  \n" +
	"				packingSlipComment,headerComment,sorevision,  \n" +
	"				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,  \n" +
	"				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,  \n" +
	"				billingAddress,shippingAddress,intermediateAddress ,subStatus,  \n" +
	"				totalAmount, billToId,shipToId ,intermediateShipmentId,  \n" +
	"				contactPersonId, revision, isZeroValue ,isAlreadyPublished, poRevision,  \n" +
	"                isAskForVersionConfirmation, carrierID, carrierAccountNumber,  \n" +
	"                billingContactPersonID,shippingContactPersonID,intermediateContactPersonID)  \n" +
	"		SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
	"					poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
	"					packingSlipDate,shippingMethodID,  \n" +
	"					packingSlipComment,headerComment,sorevision,freeOnBoardId,  \n" +
	"					puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,  \n" +
	"					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,  \n" +
	"					billingAddress, shippingAddress, intermediateAddress,subStatus ,  \n" +
	"					totalAmount, billToId,shipToId ,intermediateShipmentId ,  \n" +
	"					contactPersonId,  revision, isZeroValue, isAlreadyPublished, poRevision ,  \n" +
	"                    0, carrierID, carrierAccountNumber ,  \n" +
	"                    billingContactPersonID,shippingContactPersonID,intermediateContactPersonID  \n" +
	"		FROM temp_customer_packingslip ;  \n" +
	"  \n" +
	"		SET pPackingSlipId=LAST_INSERT_ID();  \n" +
	"		--  Response 0  \n" +
	"        SELECT pPackingSlipId packingSlipId;  \n" +
	"  \n" +
	"		DROP TEMPORARY TABLE IF EXISTS temp_customer_packingslip;  \n" +
	"END;  \n" +
	/* **************************** Add Script Version -> 14-02-2022  *********************************** */
		"INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
		"VALUES (5926,'2.00','V1','User Story 40771: Shipment Summary Improvement Points Suggested By Client[Main Branch] - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
	);
break;
case 5926:
	allDbChangesArray.push(
	/* **************************** New Script -> 14-02-2022 *********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_GetPendingSalesShippingDetails;  \n" +
	"CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(  \n" +
	"	IN psalesorderDetID INT ,  \n" +
	"	IN packingSlipID INT,  \n" +
	"	IN ppackingslipDetID INT  ,  \n" +
	"    IN pSoReleaseID INT  \n" +
	"    )  \n" +
	"BEGIN  \n" +
	"	DECLARE vMfgCodeFormat INT;  \n" +
	"    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
	"  \n" +
	"      SELECT ss.shippingID,  \n" +
	"        ss.sDetId,  \n" +
	"		IFNULL(sd.custPOLineNumber ,1)  custPOLineNumber,  \n" +
	"        IFNULL(ss.releaseNumber,1) releaseNumber,  \n" +
	"        ss.qty,  \n" +
	"        ss.shippingDate,  \n" +
	"        sd.tentativeBuild,  \n" +
	"        sd.qty AS poQty,  \n" +
	"        sd.partID,  \n" +
	"        sd.price,  \n" +
	"        sd.lineID,  \n" +
	"        sd.internalComment,  \n" +
	"        sd.partDescription,  \n" +
	"        sd.remark,  \n" +
	"        c.iscustom,  \n" +
	"        smp.poNumber,  \n" +
	"        ss.poReleaseNumber,  \n" +
	"		c.mfgpn,  \n" +
	"		c.mfgpndescription,  \n" +
	"		c.pidcode,  \n" +
	"		fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
	"		c.nickName,  \n" +
	"		c.mfgcodeID,  \n" +
	"        c.custAssyPN,  \n" +
	"        c.isCPN,  \n" +
	"		sd.originalPOQty,  \n" +
	"		fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname, vMfgCodeFormat)  mfgName,  \n" +
	"		(CASE WHEN ss.shippingMethodID IS NULL THEN som.shippingMethodID  \n" +
	"			ELSE ss.shippingMethodID END) shippingMethodID ,  \n" +
	"		(CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddressID  \n" +
	"			ELSE ss.shippingAddressID END) shippingAddressID ,  \n" +
	"		-- (CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddress END) shippingAddress ,  \n" +
	"		fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
	"		fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
	"		fun_getCertificationByPartID(sd.partID)standards,  \n" +
	"		CONCAT(IFNULL(ss.releaseNumber,1),' | ',ss.qty,' | ',DATE_FORMAT((CASE WHEN ss.isAgreeToShip=1 THEN IFNULL(ss.revisedRequestedShipDate,ss.revisedRequestedDockDate) ELSE IFNULL(ss.shippingDate,ss.requestedDockDate) END), '%m-%d-%y')) shipping,  \n" +
	"        cpsDet.shippedQty,  \n" +
	"		-- sum(cpsDet.shippedQty) over(partition by ss.sDetId) shippedQty ,  \n" +
	"		(SELECT SUM(IFNULL(cpdet.shipQty,0))  \n" +
	"			FROM customer_packingslip_det cpdet  \n" +
	"            JOIN customer_packingslip cpsdet ON cpsdet.id = cpdet.refCustPackingSlipID  and cpsdet.isDeleted = 0  \n" +
	"            WHERE cpdet.refsalesorderdetid=ss.sDetId  \n" +
	"			AND cpdet.isdeleted=0 AND cpsdet.transType ='P') lineTotShippedQty ,  \n" +
	"		(CASE WHEN ss.shippingMethodID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.shippingMethodID))  \n" +
	"				ELSE (fun_getGenericCategoryCodeNameByID(ss.shippingMethodID)) END) shippingMethodText,  \n" +
	"		c.partType,  \n" +
	"		(SELECT mfg.mfgType FROM mfgcodemst mfg WHERE mfg.id = c.mfgcodeid AND mfg.isDeleted = 0 ) mfgType,  \n" +
	"		sd.quoteNumber,sd.quoteFrom, sd.refAssyQtyTurnTimeID,  \n" +
	"        sd.refRFQGroupID,  \n" +
	"        sd.refRFQQtyTurnTimeID  ,  \n" +
	"		IFNULL(sd.assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ',  \n" +
	"											CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
	"												WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
	"												WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
	"										FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
	"										JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
	"										WHERE rfqAssyTurn.id = sd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
	"		c.category partCategory,  \n" +
	"        ss.releaseNotes,  \n" +
	"        ss.description additionalNotes,  \n" +
	"        ss.customerReleaseLine,  \n" +
	"        sd.salesOrderDetStatus,  \n" +
	"        sd.qty custPOQty,  \n" +
	"        sd.materialTentitiveDocDate  ,  \n" +
	"		(case when ss.carrierID is null then  som.carrierID else ss.carrierID end) carrierID,  \n" +
	"		(CASE WHEN ss.carrierID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.carrierID))  \n" +
	"			ELSE (fun_getGenericCategoryCodeNameByID(ss.carrierID)) END) carrierText,  \n" +
	"		(CASE WHEN ss.carrierID IS NULL THEN som.carrierAccountNumber ELSE ss.carrierAccountNumber END) carrierAccountNumber ,  \n" +
	"        (CASE WHEN ss.shippingContactPersonID IS NULL THEN som.shippingContactPersonID  \n" +
	"			ELSE ss.shippingContactPersonID END) shippingContactPersonID  \n" +
	"	FROM salesshippingmst ss  \n" +
	"	JOIN salesorderdet sd ON ss.sDetID=sd.id  \n" +
	"	JOIN salesordermst som ON som.id = sd.refSalesOrderID  \n" +
	"	JOIN COMPONENT c ON c.id=sd.partid  \n" +
	"    LEFT JOIN mfgcodemst mfgmst ON mfgmst.id = c.mfgcodeId  and mfgmst.isDeleted = 0  \n" +
	"	LEFT JOIN salesorderdet sdp ON sd.refBlanketPOID=sdp.id AND sdp.isdeleted=0  \n" +
	"	LEFT JOIN salesordermst smp ON smp.id=sdp.refSalesOrderID AND smp.isdeleted=0  \n" +
	"	LEFT JOIN (select cpd.refsalesorderdetid,cpd.shippingId, sum(shipQty) shippedQty from customer_packingslip_det cpd  \n" +
	"				JOIN customer_packingslip  cps ON cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0 and cps.transType= 'P'  \n" +
	"				where cpd.isDeleted = 0 Group by cpd.refsalesorderdetid, cpd.shippingId ) cpsDet  \n" +
	"		ON ss.sDetId = cpsDet.refsalesorderdetid  \n" +
	"          and ss.shippingID = cpsDet.shippingId  \n" +
	"	WHERE sd.id=psalesorderDetID  \n" +
	"	AND  sd.isDeleted = 0  \n" +
	"	AND (CASE WHEN ppackingslipDetID IS NULL THEN  ss.qty > ifnull(cpsDet.shippedQty,0)  \n" +
	"		ELSE  ss.qty=ss.qty  END)  \n" +
	"	AND (CASE WHEN pSoReleaseID IS NOT NULL THEN ss.shippingID=pSoReleaseID ELSE 1 = 1 END)  \n" +
	"	AND ss.isdeleted=0  \n" +
	"	ORDER BY ss.releaseNumber,ss.shippingDate;  \n" +
	"  \n" +
	"	SELECT NULL AS shippingID,  \n" +
	"			sDetId,  \n" +
	"			custPOLineNumber,  \n" +
	"			NULL releaseNumber,  \n" +
	"			qty,  \n" +
	"			NULL shippingDate,  \n" +
	"			releaseNotes,  \n" +
	"			tentativeBuild,  \n" +
	"			poQty,  \n" +
	"			partID,  \n" +
	"			price,  \n" +
	"			lineID,  \n" +
	"			partDescription,  \n" +
	"			mfgPN,  \n" +
	"			mfgPNDescription,  \n" +
	"			unitMeaser,  \n" +
	"			nickName,  \n" +
	"			pidcode,  \n" +
	"			NULL shippingMethodID,  \n" +
	"			NULL shippingAddressID,  \n" +
	"			mfgcodeID,  \n" +
	"			mfgName,  \n" +
	"			rohsIcon,  \n" +
	"			rohsName,  \n" +
	"			rohsStatusID,  \n" +
	"			standards,  \n" +
	"			shippedQty   ,  \n" +
	"			remark,  \n" +
	"			internalcomment,  \n" +
	"			mfgPnwihLineId,  \n" +
	"			refSODetID,  \n" +
	"			refSOReleaseLineID,  \n" +
	"			frequency,  \n" +
	"			originalPOQty,  \n" +
	"			frequencyType,  \n" +
	"			poNumber  \n" +
	"    FROM (SELECT  \n" +
	"			NULL AS shippingID,  \n" +
	"			sd.id AS sDetId,  \n" +
	"			sd.custPOLineNumber custPOLineNumber,  \n" +
	"			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
	"			NULL releaseNumber,  \n" +
	"			sd.qty,  \n" +
	"			NULL shippingDate,  \n" +
	"			sd.remark releaseNotes,  \n" +
	"			sd.tentativeBuild,  \n" +
	"			sd.qty AS poQty,  \n" +
	"			sd.partID,  \n" +
	"			sd.price,  \n" +
	"			sd.lineID,  \n" +
	"			sd.partDescription,  \n" +
	"			c.mfgPN,  \n" +
	"			c.mfgPNDescription,  \n" +
	"			fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
	"			c.nickName,  \n" +
	"			c.pidcode,  \n" +
	"			sd.refSODetID,  \n" +
	"			sd.refSOReleaseLineID,  \n" +
	"			sd.frequency,  \n" +
	"			CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
	"			NULL shippingMethodID,  \n" +
	"			NULL shippingAddressID,  \n" +
	"			c.mfgcodeID,  \n" +
	"			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
	"			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
	"			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
	"			c.rohsStatusID,  \n" +
	"			sd.originalPOQty,  \n" +
	"			smp.poNumber,  \n" +
	"			fun_getCertificationByPartID(c.id)standards,  \n" +
	"			sd.frequencyType,  \n" +
	"			 (SELECT SUM(IFNULL(cpd.shipQty,0)) FROM customer_packingslip_det cpd  \n" +
	"				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
	"				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0 ) shippedQty   ,  \n" +
	"			sd.remark,  \n" +
	"			sd.internalcomment  \n" +
	"		FROM salesorderdet sd  \n" +
	"		LEFT JOIN component c ON c.id=sd.partid  \n" +
	"		LEFT JOIN salesorderdet sdp ON sd.refBlanketPOID=sdp.id AND sdp.isdeleted=0  \n" +
	"	        LEFT JOIN salesordermst smp ON smp.id=sdp.refSalesOrderID AND smp.isdeleted=0  \n" +
	"		WHERE sd.refSODetID=psalesorderDetID  \n" +
	"		AND sd.isdeleted=0  \n" +
	"    ) a;  \n" +
	"  \n" +
	"END;  \n" +
	/* **************************** Add Script Version -> 14-02-2022  *********************************** */
		"INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
		"VALUES (5927,'2.00','V1','User Story 40771: Shipment Summary Improvement Points Suggested By Client[Main Branch] - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
	);
break;
case 5927:
	allDbChangesArray.push(
	/* **************************** New Script -> 14-02-2022 *********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_getSalesOrderListAgainstShipment;  \n" +
	"CREATE PROCEDURE `Sproc_getSalesOrderListAgainstShipment`(  \n" +
	"	IN ppageIndex INT,  \n" +
	"	IN precordPerPage INT,  \n" +
	"	IN pCustomerID INT,  \n" +
	"    IN pSearchText VARCHAR(1000) ,  \n" +
	"    IN pSoWorkingStatus TINYINT,  \n" +
	"    IN pAllowToUpdateComment TINYINT ,  \n" +
	"    IN pSortByColumn TINYINT  ,  \n" +
	"    IN pSoStatus TINYINT,  \n" +
	"    IN pSortingOrder TINYINT  \n" +
	")  \n" +
	"BEGIN  \n" +
	"	DECLARE vMfgCodeFormat INT;  \n" +
	"    DECLARE headerWhereClause VARCHAR(3000);  \n" +
	"   -- DECLARE detailWhereClause VARCHAR(1000);  \n" +
	"	DECLARE vOrderBy VARCHAR(200);  \n" +
	"   	DECLARE pOffset INT;  \n" +
	"	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
	"	DECLARE vContactPersonFormat INT;  \n" +
	"  \n" +
	"    SELECT fun_getContPersonNameDisplayFormat() INTO vContactPersonFormat;  \n" +
	"	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
	"  \n" +
	"    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
	"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
	"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
	"	ELSE  \n" +
	"		SET rowNumWhere = '';  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF pSortByColumn = 1 THEN  \n" +
	"		SET vOrderBy =' order by customerName' ;  \n" +
	"    ELSEIF pSortByColumn = 2 THEN  \n" +
	"		SET vOrderBy =' order by poNumber ' ;  \n" +
	"    ELSEIF pSortByColumn = 3 THEN  \n" +
	"		SET vOrderBy =' order by poDate ' ;  \n" +
	"    ELSEIF pSortByColumn = 4 THEN  \n" +
	"		SET vOrderBy =' order by soDate ' ;  \n" +
	"    ELSE  \n" +
	"		SET vOrderBy =' order by soId Desc ' ;  \n" +
	"    END IF;  \n" +
	"    IF pSortingOrder = 2 THEN  \n" +
	"		SET vOrderBy = concat(vOrderBY , ' Desc');  \n" +
	"    ELSE  \n" +
	"		SET vOrderBy = concat(vOrderBY , ' Asc');  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF pCustomerID IS NOT NULL THEN  \n" +
	"		SET headerWhereClause = concat(\" (salesOrder.customerID=\",pCustomerID,\") \");  \n" +
	"	ELSE  \n" +
	"		SET headerWhereClause = ' 1=1 ';  \n" +
	"    END IF;  \n" +
	"    IF pSoWorkingStatus IS  NULL OR pSoWorkingStatus = 0 THEN  \n" +
	"		SET headerWhereClause = concat(headerWhereClause, ' AND 1=1 ');  \n" +
	"	ELSE  \n" +
	"		SET headerWhereClause = concat(headerWhereClause, ' and salesOrder.workingStatus = ' , pSoWorkingStatus)  ;  \n" +
	"    END IF;  \n" +
	"    IF pSoStatus IS NULL OR pSoStatus <> -1 THEN  \n" +
	"		SET headerWhereClause = concat(headerWhereClause, ' and salesOrder.`status` = ' , pSoStatus)  ;  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF pSearchText IS NOT NULL  THEN  \n" +
	"		SET headerWhereClause = CONCAT(headerWhereClause ,\" AND  (salesOrder.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
	"									or salesOrder.poNumber like '%\",pSearchText,\"%'  \n" +
	"									or salesOrder.customerName like '%\",pSearchText,\"%'  \n" +
	"                                    or salesOrder.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
	"                                    or salesOrder.shippingComment like '%\",pSearchText,\"%' \",  \n" +
	"                                    CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR salesOrder.internalComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
	"                                    \" or salesOrder.soId in (select refSalesOrderID from salesorderdet  sodet  \n" +
	"														 join component comp on comp.id = sodet.partID and sodet.isDeleted = 0  \n" +
	"                                                         left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
	"																	from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sodet.id  and workOrderDet.partID = sodet.partId  \n" +
	"														 where sodet.isDeleted = 0	and (comp.PIDCode like '%\",pSearchText,\"%' OR comp.mfgPN like '%\",pSearchText,\"%'  \n" +
	"																OR comp.nickName like '%\",pSearchText,\"%' OR sodet.woComment like '%\",pSearchText,\"%'  \n" +
	"                                                                OR sodet.internalComment like '%\",pSearchText,\"%'\",  \n" +
	"                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.remark like '%\",pSearchText,\"%'\") else '' END,  \n" +
	"                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.releaseLevelComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
	"                                                                \" OR workOrderDet.woList like '\",pSearchText,\"%'  )	))\");  \n" +
	"  \n" +
	"    END IF;  \n" +
	"    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
	"	SET @SQLStatement1 = concat(\"CREATE TEMPORARY TABLE temp_so_mst AS  select soId, salesOrderNumber,  \n" +
	"						soDate, poNumber, poDate, poRevision, poRevisionDate,  \n" +
	"						sorevision, ifnull(shippingComment,'-') shippingComment, internalComment, isBlanketPO, isLegacyPO, isRmaPO,  \n" +
	"                        soStatus, soStatusText,  shippingMethodID,termsID,freeOnBoardId, salesCommissionTo,contactPersonId,  \n" +
	"						customerID, mfgCode, mfgName, customerName,  \n" +
	"                        lastCPSId,lastCPSNumber,lastCPSDate,ifnull(lastCPSComment,'-') lastCPSComment,CPSCount,  CPSDraftCnt,  \n" +
	"                        billingAddressID, intermediateShipmentId,  \n" +
	"                        shippingAddressID,defaultAddress,  \n" +
	"                        companyName,street1,street2, street3,city, state,  \n" +
	"						postcode,countryName, isAddrDefault, isAddrActive,  \n" +
	"						firstName,lastName,middleName,personName,  \n" +
	"						mobile,mobileCountryCode,faxNumber,faxCountryCode,title,isContactDefault, isContactActive,  \n" +
	"						phoneNumber,email,division,emailList,phoneList,  \n" +
	"                        workingStatus, isLegacyPOText,isBlanketPOText,isRmaPOText,blanketPOOption, isAlreadyPublished  ,  \n" +
	"                        carrierID,carrierAccountNumber ,  \n" +
	"                        billingContactPersonID, intermediateContactPersonID, shippingContactPersonID,  \n" +
	"                        linkToBlanketPOText,shippingMethodText,carrierText  \n" +
	"    from (select som.id as soId, som.salesOrderNumber,  \n" +
	"            som.soDate, som.poNumber, som.poDate, som.poRevision, som.poRevisionDate,  \n" +
	"            som.revision as sorevision , som.shippingComment, som.internalComment,  \n" +
	"            som.isBlanketPO, som.isLegacyPO, som.isRmaPO, som.customerID,  \n" +
	"            som.status as soStatus ,(case when som.`status` = 1 then 'Published' else 'Draft' end) soStatusText,  \n" +
	"            som.shippingMethodID,som.termsID,som.freeOnBoardId, som.salesCommissionTo,som.contactPersonId,  \n" +
	"            som.billingAddressID, som.intermediateShipmentId,  \n" +
	"            cust.mfgCode, cust.mfgName, fun_GetFormattedMfgCode(cust.mfgCode,cust.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
	"            cpsDetails.lastCPSId,  \n" +
	"            cpsDetails.lastCPSNumber,  \n" +
	"            cpsDetails.lastCPSDate,  \n" +
	"			cpsDetails.lastCPSComment,  \n" +
	"            cpsDetails.CPSCount,  \n" +
	"            ifnull(cpsDetails.CPSDraftCnt,0) CPSDraftCnt,  \n" +
	"            som.shippingAddressID,  \n" +
	"            custAddr.isDefault as defaultAddress,  \n" +
	"            custAddr.companyName,custAddr.street1,custAddr.street2, custAddr.street3,custAddr.city, custAddr.state,  \n" +
	"            custAddr.postcode,country.countryName, custAddr.isDefault isAddrDefault, custAddr.isActive isAddrActive,  \n" +
	"            fun_GetFormattedContactPersonName(contactP.firstName, contactP.middleName,contactP.lastName,\",vContactPersonFormat,\") personName,  \n" +
	"            contactP.firstName,contactP.lastName,contactP.middleName,  \n" +
	"            contactP.mobile,contactP.mobileCountryCode,contactP.faxNumber,contactP.faxCountryCode,  \n" +
	"            contactP.title,contactP.isDefault isContactDefault, contactP.isActive isContactActive,  \n" +
	"            contactP.phoneNumber,contactP.email,contactP.division,  \n" +
	"            fun_convertJsonEmailToCommaSepList(contactP.email) emailList,  \n" +
	"            fun_convertJsonPhoneToCommaSepList(contactP.phoneNumber) phoneList,  \n" +
	"             (case when sodCnt.totalLineCount = sodCnt.completedLineCount  then 2  \n" +
	"				  when sodCnt.totalLineCount = sodCnt.canceledLineCount then -1  \n" +
	"                  else 1 end) workingStatus,  \n" +
	"            (case when som.isLegacyPO = 1 then 'Legacy PO' else '' end) isLegacyPOText,  \n" +
	"            (case when som.isRmaPO = 1 then 'RMA PO' else '' end) isRmaPOText,  \n" +
	"            (case when som.isBlanketPO = 1 then 'Blanket PO' else '' end) isBlanketPOText,  \n" +
	"            som.blanketPOOption,som.`status`,som.isAlreadyPublished ,  \n" +
	"            som.carrierID, som.carrierAccountNumber  ,  \n" +
	"            som.billingContactPersonID, som.intermediateContactPersonID, som.shippingContactPersonID,  \n" +
	"            (case when som.linkToBlanketPO = 1 then 'Linked to Blanket PO' else '' end) linkToBlanketPOText,  \n" +
	"             shippingMethod.gencCategoryName shippingMethodText, carrier.gencCategoryName carrierText  \n" +
	"	from salesordermst som  \n" +
	"    join mfgcodemst cust on cust.id = som.customerID and cust.isDeleted = 0  \n" +
	"	left join customer_addresses custAddr on  custAddr.customerId = som.customerID and custAddr.id = som.shippingAddressID and custAddr.isDeleted = 0  \n" +
	"	left join countrymst country on country.countryID = custAddr.countryID and country.isDeleted = 0  \n" +
	"    left join contactperson contactP on contactP.personId = som.shippingContactPersonID and contactP.isDeleted = 0  \n" +
	"    left join genericcategory  shippingMethod on shippingMethod.gencCategoryID = som.shippingMethodID and shippingMethod.categoryType ='Shipping Methods' and shippingMethod.isDeleted = 0  \n" +
	"	left join genericcategory  carrier on carrier.gencCategoryID = som.termsID and carrier.categoryType ='Carrier' and shippingMethod.isDeleted = 0  \n" +
	"    left join ( select  a.refSalesOrderID, max(lastCPSId) lastCPSId, max(lastCPSNumber) lastCPSNumber,  \n" +
	"				max(lastCPSDate) lastCPSDate, max(lastCPSComment) lastCPSComment, max(CPSCount) CPSCount, max(CPSDraftCnt) CPSDraftCnt  \n" +
	"				from (select cps.refSalesOrderID, cps.id,cps.packingSlipNumber,cps.packingSlipDate,cps.packingSlipComment ,  \n" +
	"						LAST_VALUE(cps.id) over (partition by cps.refSalesOrderID) lastCPSId ,  \n" +
	"						LAST_VALUE(cps.packingSlipNumber) over (partition by cps.refSalesOrderID) lastCPSNumber,  \n" +
	"						LAST_VALUE(cps.packingSlipDate) over (partition by cps.refSalesOrderID) lastCPSDate,  \n" +
	"						LAST_VALUE(cps.packingSlipComment) over (partition by cps.refSalesOrderID) lastCPSComment,  \n" +
	"						count(1) over (partition by cps.refSalesOrderID) CPSCount,  \n" +
	"						cpd.draftCnt AS CPSDraftCnt  \n" +
	"				from customer_packingslip cps  \n" +
	"                left join (select custp.refSalesOrderID draftRefSoId, count(1) draftCnt from customer_packingslip custp  \n" +
	"						where custp.isDeleted = 0  and custp.substatus = 1 and transType ='P'  \n" +
	"						group by custp.refSalesOrderID) cpd on cpd.draftRefSoId = cps.refSalesOrderID  \n" +
	"                where cps.isDeleted = 0  and cps.transType = 'P' and cps.refsalesorderid is not null) a  \n" +
	"				group by a.refSalesOrderID) cpsDetails on cpsDetails.refSalesOrderID = som.id  \n" +
	"	left join (select sod.refSalesOrderID as soId ,  \n" +
	"				sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
	"				count(1) totalLineCount,  \n" +
	"				sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
	"				From salesorderdet sod where sod.isDeleted = 0  \n" +
	"				Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = som.id  \n" +
	"    where som.isDeleted = 0  \n" +
	"    ) salesOrder  \n" +
	"    where 1=1 and \", headerWhereClause,    vOrderBy , rowNumWhere) ;  \n" +
	"  \n" +
	"	PREPARE query1 FROM @SQLStatement1;  \n" +
	"	EXECUTE query1;  \n" +
	"	DEALLOCATE PREPARE query1;  \n" +
	"  \n" +
	"    DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
	"    CREATE TEMPORARY TABLE temp_so_detail AS  \n" +
	"    select soDetId,  \n" +
	"				refSalesOrderID, partID, lineID, custPOQty, tbdComment, internalComment,  \n" +
	"				shippingComment, isCancle,partDescription,salesOrderDetStatus,custPOLineNumber,  \n" +
	"				PIDCode, mfgPN,mfgcodeID,mfrName, rohsName, rohsIcon,  nickName,  partType,  isCustom,custAssyPN,partSpecialNote,  \n" +
	"                po_TBDQty,shippedQty AS shippedQty , woComment  ,  \n" +
	"                cancelStatus, isHotJob,isDetHalt,  \n" +
	"                soWorkingStatus, materialTentitiveDocDate  ,refSODetID,blanketSOId,  \n" +
	"                blanketPONumber  ,parentReleaseNumber,linkdPOCnt  \n" +
	"	from (select  sod.id as soDetId,  \n" +
	"				sod.refSalesOrderID,  \n" +
	"				sod.partID,  \n" +
	"				sod.lineID,  \n" +
	"				sod.qty as custPOQty,  \n" +
	"				sod.releaseLevelComment as tbdComment, -- TBD comments  \n" +
	"				sod.internalComment,  \n" +
	"				sod.remark as shippingComment,  \n" +
	"				sod.isCancle,  \n" +
	"                ifnull(sod.partDescription,'-') partDescription,  \n" +
	"                sod.salesOrderDetStatus,  \n" +
	"                sod.custPOLineNumber,  \n" +
	"				co.PIDCode,  \n" +
	"				co.mfgPN,  \n" +
	"                co.mfgcodeID,  \n" +
	"                fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName,  \n" +
	"				rohs.name AS rohsName,  \n" +
	"				rohs.rohsIcon,  \n" +
	"                co.nickName,  \n" +
	"                co.partType,  \n" +
	"                co.isCustom,  \n" +
	"                co.custAssyPN ,  \n" +
	"                co.specialNote partSpecialNote,  \n" +
	"				(sod.qty - ifnull(soDetQty.relQty,0)) po_TBDQty,  \n" +
	"                cpd.shippedQty,  \n" +
	"                ifnull(sod.woComment, workOrderDet.woList) woComment  ,  \n" +
	"                sod.isCancle cancelStatus,  \n" +
	"                sod.isHotJob,  \n" +
	"                (case when holdTrans.holdCnt > 0 then 1 else 0 end ) isDetHalt,  \n" +
	"                (CASE 	WHEN (sod.isCancle = 1) THEN 'Canceled'  \n" +
	"						WHEN (sod.`salesOrderDetStatus` = 1)   THEN 'In Progress'  \n" +
	"						ELSE 'Completed'  END) soWorkingStatus,  \n" +
	"                materialTentitiveDocDate ,  \n" +
	"                sod.refSODetID,  \n" +
	"                blanketPO.blanketSOId,  \n" +
	"                blanketPO.poNumber AS blanketPONumber  ,  \n" +
	"                soDetQty.parentReleaseNumber,  \n" +
	"                linkedPO.linkdPOCnt  \n" +
	"		from salesorderdet sod  \n" +
	"        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
	"		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
	"        left join (select shipChild.sDetID, sum(shipChild.qty) relQty, GROUP_CONCAT(shipParent.releaseNumber) parentReleaseNumber from salesshippingmst shipChild  \n" +
	"					LEFT JOIN salesshippingmst shipParent ON shipParent.refShippingLineID = shipChild.shippingID   AND shipParent.isDeleted = 0  \n" +
	"					where shipChild.isDeleted = 0  group by shipChild.sDetID) as soDetQty on  soDetQty.sDetID = sod.id  \n" +
	"        left join (select refSalesorderDetid , sum(cpd.shipQty) shippedQty  \n" +
	"					from customer_packingslip_det  cpd  \n" +
	"					join customer_packingslip cps on cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0  \n" +
	"                    where cpd.isDeleted = 0 and cps.transType='P' group by refSalesorderDetid) cpd on cpd.refSalesorderDetid = sod.id  \n" +
	"		left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
	"					from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sod.id  and workOrderDet.partID = sod.partId  \n" +
	"		left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
	"        left join mfgcodemst partMfg on partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
	"        left join (select refTransid ,count(1) holdCnt from holdunholdtrans where refType='PO' and isDeleted = 0 and endDate is NUll and `status` = 'H' group by refTransid) holdTrans  \n" +
	"			on holdTrans.refTransid = sod.id  \n" +
	"        left join (select blanketDet.id blanketDetId, blanketSO.id blanketSOId , blanketSO.poNumber from salesorderdet blanketDet  \n" +
	"				join salesordermst blanketSO on blanketSO.id = blanketDet.refSalesOrderID and blanketSO.isDeleted = 0  \n" +
	"                where blanketSO.isDeleted = 0) blanketPO on blanketPO.blanketDetId = sod.refBlanketPOID  \n" +
	"        left join (select childPO.refBlanketPOID , count(1) linkdPOCnt from salesorderdet childPO where childPO.isDeleted = 0 group by childPO.refBlanketPOID) linkedPO on linkedPO.refBlanketPOID = sod.id  \n" +
	"		where sod.isDeleted = 0  \n" +
	"	) a;  \n" +
	"  \n" +
	"    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
	"    CREATE TEMPORARY TABLE temp_so_rel_detail AS  \n" +
	"    select soDetId,  \n" +
	"				packingSlipDate,  \n" +
	"				promisedShipDate,  \n" +
	"                refCustPackingSlipID, packingSlipDetId,  \n" +
	"                  row_number() over (partition by releaseId,soDetId order by packingSlipDate desc) cpsIndex,  \n" +
	"				refSalesOrderID,releaseId, partID, lineID, custPOQty,  internalComment,  releaseLineComment,  \n" +
	"				shippingComment, isCancle, releaseNumber, soReleaseQty,  \n" +
	"                shippedQty AS shippedQty,  \n" +
	"                 cpsDetailCnt,  \n" +
	"                 isReadyToShip  ,cpsDetailShippedQty  ,  \n" +
	"                (case when  (soReleaseQty - cpsDetailShippedQty) <= 0 then 1 else 0 end) relCompletedStatus,  \n" +
	"                cpsSubStatus  ,poReleaseNumber,salesOrderDetStatus,'completed ' as firstInsert  \n" +
	"	from (select  sod.id as soDetId,  \n" +
	"				sod.refSalesOrderID,  \n" +
	"				sod.partID,  \n" +
	"				sod.lineID,  \n" +
	"				sod.qty as custPOQty,  \n" +
	"				sod.internalComment,  \n" +
	"				sod.remark as shippingComment,  \n" +
	"                soship.releaseNotes releaseLineComment,  \n" +
	"				sod.isCancle,  \n" +
	"                soship.shippingID releaseId,  \n" +
	"				soship.releaseNumber,  \n" +
	"				soship.promisedShipDate,  \n" +
	"				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
	"				cpd.refCustPackingSlipID,  \n" +
	"                cpd.id packingSlipDetId,  \n" +
	"				cpd.shipQty AS shippedQty,  \n" +
	"                cp.packingSlipDate ,  \n" +
	"                SUM(cpd.shipQty) over (partition by soship.shippingID,sod.id ) cpsDetailShippedQty,  \n" +
	"                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
	"--                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex,  \n" +
	"                soship.isReadyToShip,  \n" +
	"                cp.subStatus AS cpsSubStatus,  \n" +
	"                soship.poReleaseNumber,  \n" +
	"                sod.salesOrderDetStatus  \n" +
	"		from salesorderdet sod  \n" +
	"        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
	"		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
	"		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
	"		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
	"        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
	"		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
	"		where sod.isDeleted = 0  \n" +
	"	) a;  \n" +
	"    -- order by a.refSalesOrderID,a.packingSlipDate desc;  \n" +
	"  \n" +
	"    /*  \n" +
	"    /*and ifnull((case when co.partType = 4 then sod.qty else  soship.qty end ),0) <=  \n" +
	"						(select ifnull(sum(cpdTot.shipQty),0) from customer_packingslip_det cpdTot  \n" +
	"						where cpdTot.isDeleted = 0 and cpdTot.refSalesorderDetid =  sod.id )  \n" +
	"    INSERT INTO temp_so_rel_detail  \n" +
	"    select soDetId,  \n" +
	"    packingSlipDate,  \n" +
	"			promisedShipDate,  \n" +
	"            refCustPackingSlipID, packingSlipDetId,  \n" +
	"				row_number() over (partition by releaseId,soDetId order by promisedShipDate desc) cpsIndex,  \n" +
	"				refSalesOrderID,releaseId, partID, lineID, custPOQty,  internalComment,  releaseLineComment,  \n" +
	"				shippingComment, isCancle, releaseNumber, soReleaseQty,  \n" +
	"                shippedQty AS shippedQty,  \n" +
	"                cpsDetailCnt,  \n" +
	"                isReadyToShip  ,cpsDetailShippedQty  ,  \n" +
	"                (case when  (soReleaseQty - cpsDetailShippedQty) <= 0 then 1 else 0 end) relCompletedStatus,  \n" +
	"                cpsSubStatus  ,poReleaseNumber,salesOrderDetStatus,'pending ' as firstInsert  \n" +
	"	from (select  sod.id as soDetId,  \n" +
	"				sod.refSalesOrderID,  \n" +
	"				sod.partID,  \n" +
	"				sod.lineID,  \n" +
	"				sod.qty as custPOQty,  \n" +
	"				sod.internalComment,  \n" +
	"				sod.remark as shippingComment,  \n" +
	"                soship.releaseNotes releaseLineComment,  \n" +
	"				sod.isCancle,  \n" +
	"                soship.shippingID releaseId,  \n" +
	"				soship.releaseNumber,  \n" +
	"				soship.promisedShipDate,  \n" +
	"				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
	"				cpd.refCustPackingSlipID,  \n" +
	"                cpd.id packingSlipDetId,  \n" +
	"				cpd.shipQty AS shippedQty,  \n" +
	"                cp.packingSlipDate ,  \n" +
	"                SUM(cpd.shipQty) over (partition by soship.shippingID,sod.id ) cpsDetailShippedQty,  \n" +
	"                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
	"--                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex,  \n" +
	"                soship.isReadyToShip,  \n" +
	"                cp.subStatus AS cpsSubStatus,  \n" +
	"                soship.poReleaseNumber,  \n" +
	"                sod.salesOrderDetStatus  \n" +
	"		from salesorderdet sod  \n" +
	"        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
	"		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
	"		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
	"		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
	"        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
	"		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
	"		where sod.isDeleted = 0  \n" +
	"        and ifnull((case when co.partType = 4 then sod.qty else soship.qty end),0) >  \n" +
	"						(select ifnull(sum(cpdTot.shipQty),0) from customer_packingslip_det cpdTot  \n" +
	"						where cpdTot.isDeleted = 0 and cpdTot.refSalesorderDetid =  sod.id )  \n" +
	"	) a  \n" +
	"    order by a.refSalesOrderID,a.soDetId,a.promisedShipDate;  \n" +
	"    */  \n" +
	"  \n" +
	"	/*SET @SQLStatement1 = CONCAT (\"SELECT mst.* from temp_so_mst mst  \n" +
	"    LEFT JOIN temp_so_detail det  on det.refSalesOrderID = mst.soId  \n" +
	"    where det.woComment like '%\",pSearchText,\"%'\");  \n" +
	"    PREPARE query1 FROM @SQLStatement1;  \n" +
	"	EXECUTE query1;  \n" +
	"	DEALLOCATE PREPARE query1;  */  \n" +
	"	SELECT * from temp_so_mst;  \n" +
	"  \n" +
	"    SET @SQLStatement2 = CONCAT(\"SELECT soDetail.* from temp_so_detail AS soDetail  \n" +
	"								left join temp_so_mst mst on mst.soId = soDetail.refSalesOrderID  \n" +
	"                                order by soDetail.salesOrderDetStatus, soDetail.soDetId\");  \n" +
	"	PREPARE query2 FROM @SQLStatement2;  \n" +
	"	EXECUTE query2;  \n" +
	"	DEALLOCATE PREPARE query2;  \n" +
	"  \n" +
	" 	SELECT * from temp_so_rel_detail order by relCompletedStatus;  \n" +
	"		-- order by soDetId,relCompletedStatus,promisedShipDate;  \n" +
	"  \n" +
	"	DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
	"	DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
	"    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
	"END;  \n" +
	/* **************************** Add Script Version -> 14-02-2022  *********************************** */
		"INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
		"VALUES (5928,'2.00','V1','User Story 40771: Shipment Summary Improvement Points Suggested By Client[Main Branch] - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
	);
break;
case 5928:
	allDbChangesArray.push(
	/* **************************** New Script -> 14-02-2022 *********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingShippingDetail;  \n" +
	"CREATE PROCEDURE `Sproc_RetrieveCustomerPackingShippingDetail`(  \n" +
	"	IN ppageIndex INT,  \n" +
	"	IN precordPerPage INT,  \n" +
	"	IN pOrderBy VARCHAR(255),  \n" +
	"	IN pWhereClause VARCHAR(16383),  \n" +
	"	IN prefCustPackingSlipID INT  \n" +
	"	)  \n" +
	"BEGIN  \n" +
	"  \n" +
	"	DECLARE pOffset INT;  \n" +
	"	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
	"    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
	"	DECLARE v_TimeZone VARCHAR(50);  \n" +
	"  	DECLARE vMfgCodeFormat INT;  \n" +
	"  \n" +
	"	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
	"	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
	"	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
	"  \n" +
	"  SET @tempQuerypackingSlip = CONCAT(\"SELECT cpd.id, cpd.refCustPackingSlipID,cpd.refSalesorderDetid,  \n" +
	"			cpd.partId , cpd.custPOLineID, cpd.assyDescription,  \n" +
	"			cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,cpd.shippingNotes,cpd.shippingId,  \n" +
	"			cpd.internalComment,  \n" +
	"			cpd.binID, cpd.whID,  \n" +
	"			ss.qty as releaseLineQty,  \n" +
	"			cpd.standrads,  \n" +
	"			ss.releaseNumber,  \n" +
	"			cpd.poReleaseNumber,  \n" +
	"			cpd.refBlanketPONumber,  \n" +
	"			fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
	"			fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
	"			fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
	"			fun_getRoleByID(cpd.updateByRoleId) updatedbyRole,  \n" +
	"			fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
	"			fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
	"			c.mfgpn,c.pidcode PIDCode,c.nickName,c.mfgpndescription,rr.name as rohsName,rr.rohsIcon, c.partType ,  \n" +
	"			fun_getUnitNameByID(c.uom) unitMeaser ,  c.custAssyPN,  \n" +
	"			cpd.reflineID as lineID ,  \n" +
	"			fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname,\", vMfgCodeFormat,\") mfgName,  \n" +
	"			c.mfgcodeid ,  \n" +
	"			cpd.lineID AS lineIDSequenceNum   ,  \n" +
	"			(SELECT GROUP_CONCAT(DISTINCT woNumber SEPARATOR ', ') FROM shippedassembly  \n" +
	"			   WHERE refCustPackingSlipDetID = cpd.id AND isDeleted = 0 AND shippedqty > 0) shippedFromWONumbers ,  \n" +
	"			(SELECT GROUP_CONCAT(DISTINCT css.uid) FROM shippedassembly sa  \n" +
	"					JOIN component_sid_stock css ON sa.refsidid = css.id AND  css.isDeleted = 0  \n" +
	"			  WHERE sa.refCustPackingSlipDetID = cpd.id AND sa.isDeleted = 0 AND sa.shippedqty > 0) shippedFromUMIDs ,  \n" +
	"             cpd.refLineId soLineId ,  \n" +
	"             cpd.refCustPackingSlipDetID,  \n" +
	"             CASE WHEN c.partType = 4 THEN FALSE ELSE TRUE END materialType,  \n" +
	"             (select mfg.mfgType from mfgcodemst mfg where mfg.id = c.mfgcodeID and mfg.isDeleted = 0) mfgType,  \n" +
	"             cpd.componentStockType,  \n" +
	"             if(cp.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
	"             if(cp.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
	"             if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
	"             if(cp.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
	"             c.iscustom,c.isCPN,  \n" +
	"             if(cp.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
	"             (select group_concat(cert.fullName)from  certificate_standards cert  \n" +
	"						where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
	"							from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
	"            if(cp.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
	"            if(cp.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
	"            if(cp.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
	"			(case when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText  ,  \n" +
	"            cpd.releaseNotes  \n" +
	"		FROM `customer_packingslip_det` AS cpd  \n" +
	"			left join component c on c.id=cpd.partid  \n" +
	"			left join mfgcodemst mfgmst on mfgmst.id = c.mfgCodeId and mfgmst.isDeleted = 0  \n" +
	"			left join rfq_rohsmst rr on rr.id=c.rohsStatusID  \n" +
	"			left join salesshippingmst ss on ss.shippingID=cpd.shippingID and ss.isdeleted=0  \n" +
	"            left join salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
	"            left join customer_packingslip cp on cp.id  = cpd.refCustPackingSlipID and cp.isDeleted = 0  \n" +
	"		WHERE cpd.isDeleted=0 and cpd.refCustPackingSlipID=\",IFNULL(prefCustPackingSlipID,0));  \n" +
	"  \n" +
	"		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
	"			SET pOrderBy = CONCAT(\"ORDER BY lineIDSequenceNum ASC\") ;  \n" +
	"		ELSE  \n" +
	"			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
	"		END IF;  \n" +
	"  \n" +
	"  \n" +
	"		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
	"			SET pWhereClause = '1=1' ;  \n" +
	"		END IF;  \n" +
	"  \n" +
	"  \n" +
	"		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
	"			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
	"			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
	"		ELSE  \n" +
	"			SET rowNumWhere = '';  \n" +
	"		END IF;  \n" +
	"        /* to get total count of rows */  \n" +
	"			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempQuerypackingSlip,\" ) c where 1=1 and \", pWhereClause);  \n" +
	"  \n" +
	"			PREPARE query2 FROM @SQLStatement2;  \n" +
	"			EXECUTE query2;  \n" +
	"			DEALLOCATE PREPARE query2;  \n" +
	"  \n" +
	"			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempQuerypackingSlip,\" ) c  \n" +
	"				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
	"			PREPARE query1 FROM @SQLStatement2;  \n" +
	"			EXECUTE query1;  \n" +
	"			DEALLOCATE PREPARE query1;  \n" +
	"  \n" +
	"    END;  \n" +
	/* **************************** Add Script Version -> 14-02-2022  *********************************** */
		"INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
		"VALUES (5929,'2.00','V1','User Story 40771: Shipment Summary Improvement Points Suggested By Client[Main Branch] - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
	);
break;
        case 5929:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierInvoicePaymentLines`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePaymentLines`(  \n" +
                "	IN pPaymentID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT a.*,  \n" +
                "			(IFNULL(totalExtendedAmount,0) - IFNULL(totalPaidAmount,0) + markedForRefundAmt) balanceToPayAmount  \n" +
                "	FROM ( SELECT ps.id,  \n" +
                "						ps.systemId,  \n" +
                "						psd.totalExtendedAmount,  \n" +
                "                        psd.totalDiscount,  \n" +
                "						ps.receiptType,  \n" +
                "						ps.invoiceNumber,  \n" +
                "						ps.invoiceDate,  \n" +
                "						ps.creditMemoNumber,  \n" +
                "						ps.creditMemoDate,  \n" +
                "						ps.debitMemoNumber,  \n" +
                "						ps.debitMemoDate,  \n" +
                "						psr.invoiceNumber refInvoiceNumber,  \n" +
                "						ps.refParentCreditDebitInvoiceno,  \n" +
                "						get_totalSupplierInvoicePaidAmountById(ps.id) totalPaidAmount,  \n" +
                "						IFNULL(pid.paymentAmount,0) paymentAmount,  \n" +
                "                        ifnull(ps.markedForRefundAmt, 0) markedForRefundAmt,  \n" +
                "						ps.isDeleted  \n" +
                "				FROM 		packing_slip_material_receive ps  \n" +
                "				LEFT JOIN 	packing_slip_material_receive psr ON psr.id = ps.refParentCreditDebitInvoiceno /*AND psr.isDeleted = 0*/  \n" +
                "				JOIN 		packingslip_invoice_payment_det pid ON pid.refPackingslipInvoiceID = ps.id  \n" +
                "                LEFT JOIN (SELECT 	psd.refPackingSlipMaterialRecID, psd.isDeleted,  \n" +
                "								SUM(psd.extendedPrice) totalExtendedAmount,  \n" +
                "								sum(psd.discount) totalDiscount  \n" +
                "							FROM 	packing_slip_material_receive_det psd  \n" +
                "						 GROUP BY psd.refPackingSlipMaterialRecID, psd.isDeleted) psd ON psd.refPackingSlipMaterialRecID = ps.id AND psd.isDeleted = CASE WHEN ps.isDeleted = 0 THEN 0 ELSE psd.isDeleted END  \n" +
                "				WHERE 		pid.refPayementid = pPaymentID AND  \n" +
                "							(SELECT 1 FROM packingslip_invoice_payment X WHERE x.id = pid.refPayementid AND x.refPaymentMode = 'P')  \n" +
                "			) a;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5930,'2.00','V1',' Bug 41266: [Main Branch] Price Issue check-box must get unchecked if Price corrected on Line Variance Approvals pop-up - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5930:
                allDbChangesArray.push(
                /* **************************** New Script -> 09-09-2021  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_Component_Standard_Details_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_Standard_Details_History` AFTER UPDATE ON `component_standard_details` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		IF OLD.ClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`className`, '') INTO `pOldValue`  \n" +
                "			FROM standard_class  \n" +
                "			WHERE classID =OLD.ClassID  \n" +
                "			ORDER BY classID DESC LIMIT 1;  \n" +
                "		ELSEIF OLD.certificateStandardID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`fullName`, '') INTO `pOldValue`  \n" +
                "			FROM certificate_standards  \n" +
                "			WHERE certificateStandardID =OLD.certificateStandardID  \n" +
                "			ORDER BY certificateStandardID DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.componentID,			'component_standard_details',	'Parts > Standards > Deleted',  \n" +
                "			pOldValue,			 NULL,				OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.certificateStandardID,0) != IFNULL(NEW.certificateStandardID,0) THEN  \n" +
                "		IF OLD.certificateStandardID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`fullName`, '') INTO `pOldValue`  \n" +
                "			FROM certificate_standards  \n" +
                "			WHERE certificateStandardID =OLD.certificateStandardID  \n" +
                "			ORDER BY certificateStandardID DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.certificateStandardID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`fullName`, '') INTO `pNewValue`  \n" +
                "			FROM certificate_standards  \n" +
                "			WHERE certificateStandardID =NEW.certificateStandardID  \n" +
                "			ORDER BY certificateStandardID DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.componentID,			'component_standard_details',	'Parts > Standards > Certificate Standard',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ClassID,0) != IFNULL(NEW.ClassID,0) THEN  \n" +
                "		IF OLD.ClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`className`, '') INTO `pOldValue`  \n" +
                "			FROM standard_class  \n" +
                "			WHERE classID =OLD.ClassID  \n" +
                "			ORDER BY classID DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.ClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`className`, '') INTO `pNewValue`  \n" +
                "			FROM standard_class  \n" +
                "			WHERE classID =NEW.ClassID  \n" +
                "			ORDER BY classID DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.componentID,			'component_standard_details',	'Parts > Standards > Class',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_Operational_Attribute_Details_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_Operational_Attribute_Details_History` AFTER UPDATE ON `component_dynamic_attribute_mapping_part` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pAttributeName TEXT;  \n" +
                "    DECLARE pAttributefieldType TEXT;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "        select IFNULL(`attributeName`, '') as Attname , IFNULL(`fieldType`, '') fieldType  INTO pAttributeName, pAttributefieldType from component_dynamic_attribute as cda where cda.id = NEW.attributeID;  \n" +
                "  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,		valueDataType)  \n" +
                "	       VALUES(NEW.mfgPNID,			'component_dynamic_attribute_mapping_part',	CONCAT('Parts > Operational Attributes > ', pAttributeName ,' > Deleted'),  \n" +
                "			NEW.attributeValue, 				NULL,	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			 NEW.deletedBy, 		pAttributefieldType);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.attributeValue,0) != IFNULL(NEW.attributeValue,0) THEN  \n" +
                "		select IFNULL(`attributeName`, '') as Attname , IFNULL(`fieldType`, '') fieldType  INTO pAttributeName, pAttributefieldType from component_dynamic_attribute as cda where cda.id = NEW.attributeID;  \n" +
                "  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,		valueDataType)  \n" +
                "	       VALUES(NEW.mfgPNID,			'component_dynamic_attribute_mapping_part',	CONCAT('Parts > Operational Attributes > ', pAttributeName),  \n" +
                "			OLD.attributeValue, 			NEW.attributeValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,		pAttributefieldType);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_Shipping_Country_Details_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_Shipping_Country_Details_History` AFTER UPDATE ON `component_acceptable_shipping_countries` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pCountryName TEXT;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "       select IFNULL(`countryName`, '') INTO `pCountryName` from countrymst as c where c.countryID = NEW.countryID;  \n" +
                "  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,		valueDataType)  \n" +
                "	       VALUES(NEW.refComponentID,			'component_acceptable_shipping_countries',	'Parts > Acceptable Shipping Countries >Deleted',  \n" +
                "			pCountryName, 				NULL,	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.Updatedby, 		'varchar');  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_Datasheet_Details_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_Datasheet_Details_History` AFTER UPDATE ON `component_datasheets` FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,		valueDataType)  \n" +
                "	       VALUES(NEW.refComponentID,			'component_datasheets',	'Parts > Data Sheet Link > Deleted',  \n" +
                "			NEW.datasheetName, 				NULL,	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.Updatedby, 		'varchar');  \n" +
                "	END IF;  \n" +
                "END;  \n" +


                "DROP TRIGGER IF EXISTS `Trg_AU_Component_PackagingAlias_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_PackagingAlias_History` AFTER UPDATE ON `component_packagingalias` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "	IF IFNULL(OLD.aliasgroupID,0) != IFNULL(NEW.aliasgroupID,0) THEN  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.componentID,				'component_packagingalias',	'Part > Packaging Alias > Alias Group Id',  \n" +
                "			CAST(OLD.aliasgroupID AS CHAR), 	CAST(NEW.aliasgroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.componentID,0) != IFNULL(NEW.componentID,0) THEN  \n" +
                "		IF OLD.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =NEW.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.componentID,			'component_packagingalias',	'Part > Packaging Alias > MFG PN',  \n" +
                "			pOldValue, 			pNewValue,			OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		IF OLD.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,		createByRoleId)  \n" +
                "	       VALUES(NEW.componentID,			'component_packagingalias',	'Part > Packaging Alias > Deleted',  \n" +
                "			pOldValue,			NULL, 					OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy, 	NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_Alternatepn_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_Alternatepn_History` AFTER UPDATE ON `component_alternatepn` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "	DECLARE pTableDisplayName TEXT;  \n" +
                "	IF old.type=1 THEN  \n" +
                "		SET pTableDisplayName = 'Alternate Parts';  \n" +
                "	ELSEIF old.type=2 THEN  \n" +
                "		SET pTableDisplayName = 'Pickup Pad';  \n" +
                "	ELSEIF old.type=3 THEN  \n" +
                "		SET pTableDisplayName = 'Program';  \n" +
                "	ELSEIF old.type=4 THEN  \n" +
                "		SET pTableDisplayName = 'Functional Testing Tools';  \n" +
                "	ELSEIF old.type=5 THEN  \n" +
                "		SET pTableDisplayName = 'Require Mating Parts';  \n" +
                "    ELSEIF old.type=6 THEN  \n" +
                "		SET pTableDisplayName = 'RoHS Replacement Part';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF OLD.componentID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "		FROM component  \n" +
                "		WHERE id =OLD.componentID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "	IF NEW.componentID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "		FROM component  \n" +
                "		WHERE id =NEW.componentID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.componentID,0) != IFNULL(NEW.componentID,0) THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_alternatepn',	CONCAT(pTableDisplayName,' > MFG PN'),  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,	createByRoleId)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_alternatepn',	CONCAT('Part > ',pTableDisplayName,' > Deleted'),  \n" +
                "			pOldValue,			NULL, 					 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy,	NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +


                "DROP TRIGGER IF EXISTS `Trg_AU_Component_Drivetools_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_Drivetools_History` AFTER UPDATE ON `component_drivetools` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		IF OLD.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,			createByRoleId)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_drivetools',		'Part > Drive Tools > Deleted',  \n" +
                "			pOldValue, 			NULL, 				OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy, 	NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.componentID,0) != IFNULL(NEW.componentID,0) THEN  \n" +
                "		IF OLD.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =NEW.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "		VALUES(NEW.refComponentID,		'component_drivetools',		'Part > Drive Tools',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_ProcessMaterial_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_ProcessMaterial_History` AFTER UPDATE ON `component_processmaterial` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		IF OLD.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,			createByRoleId)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_processmaterial',	'Part > Process Material > Deleted',  \n" +
                "			pOldValue, 			NULL, 					OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy, 	NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.componentID,0) != IFNULL(NEW.componentID,0) THEN  \n" +
                "		IF OLD.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =NEW.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_processmaterial',	'Part > Process Material',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_FunctionalTestingEquipment_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_FunctionalTestingEquipment_History` AFTER UPDATE ON `component_functionaltestingequipment` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "	IF IFNULL(OLD.eqpID,0) != IFNULL(NEW.eqpID,0) THEN  \n" +
                "		IF OLD.eqpID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`assetName`, '') INTO `pOldValue`  \n" +
                "			FROM equipment  \n" +
                "			WHERE eqpID =OLD.eqpID  \n" +
                "			ORDER BY eqpID DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.eqpID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`assetName`, '') INTO `pNewValue`  \n" +
                "			FROM equipment  \n" +
                "			WHERE eqpID =NEW.eqpID  \n" +
                "			ORDER BY eqpID DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_functionaltestingequipment',		'Part > Equipment',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		IF OLD.eqpID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`assetName`, '') INTO `pOldValue`  \n" +
                "			FROM equipment  \n" +
                "			WHERE eqpID =OLD.eqpID  \n" +
                "			ORDER BY eqpID DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,	createByRoleId)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_functionaltestingequipment',		'Part > Functional Testing Equipments > Deleted',  \n" +
                "			pOldValue,	 		NULL, 				 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy,	NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_History` AFTER UPDATE ON `component` FOR EACH ROW FOLLOWS `Trg_AU_component`  \n" +
                "BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "    DECLARE pLabelValue TEXT;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgPN,\"\") != IFNULL(NEW.mfgPN,\"\") THEN  \n" +
                "		SELECT IFNULL(`mfgType`, '') INTO `pLabelValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =NEW.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "        set pLabelValue = (select CASE WHEN pLabelValue = 'DIST' then 'Supplier PN' ELSE 'MFR PN' END);  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	VALUES(NEW.id,				'component',			pLabelValue,  \n" +
                "		CAST(OLD.mfgPN AS CHAR),	CAST(NEW.mfgPN AS CHAR),	 OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPN'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.productionPN,\"\") != IFNULL(NEW.productionPN,\"\") THEN  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	VALUES(NEW.id,				'component',			'Production PN',  \n" +
                "		CAST(OLD.productionPN AS CHAR),	CAST(NEW.productionPN AS CHAR),	 OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','productionPN'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
                "	IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =OLD.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =NEW.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'MFR Code',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfgPNDescription,\"\") != IFNULL(NEW.mfgPNDescription,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Description',  \n" +
                "			CAST(OLD.mfgPNDescription AS CHAR),	CAST(NEW.mfgPNDescription AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPNDescription'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packageQty,\"\") != IFNULL(NEW.packageQty,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR SPQ',  \n" +
                "			CAST(OLD.packageQty AS CHAR),	CAST(NEW.packageQty AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'sixdigitunitprice');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.umidSPQ,\"\") != IFNULL(NEW.umidSPQ,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UMID SPQ',  \n" +
                "			CAST(OLD.umidSPQ AS CHAR),	CAST(NEW.umidSPQ AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'sixdigitunitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ltbDate,\"\") != IFNULL(NEW.ltbDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'LTB Date',  \n" +
                "			CAST(DATE(OLD.ltbDate) AS CHAR),	CAST(DATE(NEW.ltbDate) AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','ltbDate'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.RoHSStatusID,\"\") != IFNULL(NEW.RoHSStatusID,\"\") THEN  \n" +
                "		IF OLD.RoHSStatusID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_rohsmst  \n" +
                "			WHERE id =OLD.RoHSStatusID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.RoHSStatusID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_rohsmst  \n" +
                "			WHERE id =NEW.RoHSStatusID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS Status',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packaginggroupID,\"\") != IFNULL(NEW.packaginggroupID,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging Group',  \n" +
                "			CAST(OLD.packaginggroupID AS CHAR),	CAST(NEW.packaginggroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','packaginggroupID'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDeleted,\"\") != IFNULL(NEW.isDeleted,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Deleted',  \n" +
                "			NULL,				OLD.mfgPN,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPN'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.PIDCode,\"\") != IFNULL(NEW.PIDCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'PID Code',  \n" +
                "			CAST(OLD.PIDCode AS CHAR),	CAST(NEW.PIDCode AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','PIDCode'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isGoodPart,\"\") != IFNULL(NEW.isGoodPart,\"\") THEN  \n" +
                "		IF OLD.isGoodPart IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isGoodPart = 1 THEN  \n" +
                "										'Correct Part'  \n" +
                "								WHEN OLD.isGoodPart = 2 THEN  \n" +
                "										'Incorrect Part'  \n" +
                "								WHEN OLD.isGoodPart = 3 THEN  \n" +
                "										'TBD Part'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isGoodPart IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isGoodPart = 1 THEN  \n" +
                "										'Correct Part'  \n" +
                "								WHEN NEW.isGoodPart = 2 THEN  \n" +
                "										'Incorrect Part'  \n" +
                "								WHEN NEW.isGoodPart = 3 THEN  \n" +
                "										'TBD Part'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Correct Part',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsgroupID,\"\") != IFNULL(NEW.rohsgroupID,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS Group',  \n" +
                "			CAST(OLD.rohsgroupID AS CHAR),	CAST(NEW.rohsgroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rohsgroupID'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.leadTime,\"\") != IFNULL(NEW.leadTime,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Standard Lead Time',  \n" +
                "			CAST(OLD.leadTime AS CHAR),	CAST(NEW.leadTime AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','leadTime'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*IF IFNULL(OLD.packaging,\"\") != IFNULL(NEW.packaging,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                "			CAST(OLD.packaging AS CHAR),	CAST(NEW.packaging AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;*/  \n" +
                "	IF IFNULL(OLD.noOfPosition,\"\") != IFNULL(NEW.noOfPosition,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pin Count',  \n" +
                "			CAST(OLD.noOfPosition AS CHAR),	CAST(NEW.noOfPosition AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfPosition'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.countryOfOrigin,\"\") != IFNULL(NEW.countryOfOrigin,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Country Of Origin',  \n" +
                "			CAST(OLD.countryOfOrigin AS CHAR),	CAST(NEW.countryOfOrigin AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','countryOfOrigin'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.uom,\"\") != IFNULL(NEW.uom,\"\") THEN  \n" +
                "		IF OLD.uom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.uom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.uom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.uom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypeID,\"\") != IFNULL(NEW.mountingTypeID,\"\") THEN  \n" +
                "		IF OLD.mountingTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_mountingtypemst  \n" +
                "			WHERE id =OLD.mountingTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.mountingTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "  \n" +
                "			FROM rfq_mountingtypemst  \n" +
                "			WHERE id =NEW.mountingTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mounting Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partPackage,\"\") != IFNULL(NEW.partPackage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Package/ Case (Shape) (External)',  \n" +
                "			CAST(OLD.partPackage AS CHAR),	CAST(NEW.partPackage AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','partPackage'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.partPackageID,\"\") != IFNULL(NEW.partPackageID,\"\") THEN  \n" +
                "		IF OLD.partPackageID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_packagecasetypemst  \n" +
                "			WHERE id =OLD.partPackageID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partPackageID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_packagecasetypemst  \n" +
                "			WHERE id =NEW.partPackageID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Package/Case (Shape)',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.deviceMarking,\"\") != IFNULL(NEW.deviceMarking,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Device Marking',  \n" +
                "			CAST(OLD.deviceMarking AS CHAR),	CAST(NEW.deviceMarking AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','deviceMarking'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.minimum,\"\") != IFNULL(NEW.minimum,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min',  \n" +
                "			CAST(OLD.minimum AS CHAR),	CAST(NEW.minimum AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','minimum'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mult,\"\") != IFNULL(NEW.mult,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mult',  \n" +
                "			CAST(OLD.mult AS CHAR),		CAST(NEW.mult AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mult'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.uomText,\"\") != IFNULL(NEW.uomText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM (External)',  \n" +
                "			CAST(OLD.uomText AS CHAR),	CAST(NEW.uomText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','uomText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.htsCode,\"\") != IFNULL(NEW.htsCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'HTS Code',  \n" +
                "			CAST(OLD.htsCode AS CHAR),	CAST(NEW.htsCode AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','htsCode'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.category,\"\") != IFNULL(NEW.category,\"\") THEN  \n" +
                "		IF OLD.category IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =OLD.category  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.category IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =NEW.category  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Category',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsText,\"\") != IFNULL(NEW.rohsText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS (External)',  \n" +
                "			CAST(OLD.rohsText AS CHAR),	CAST(NEW.rohsText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rohsText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.dataSheetLink,\"\") != IFNULL(NEW.dataSheetLink,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Data Sheet Link (Set Default)',  \n" +
                "			CAST(OLD.dataSheetLink AS CHAR),	CAST(NEW.dataSheetLink AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','dataSheetLink'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.replacementPartID,\"\") != IFNULL(NEW.replacementPartID,\"\") THEN  \n" +
                "		IF OLD.replacementPartID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.replacementPartID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.replacementPartID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =NEW.replacementPartID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Corrected Part',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.eolDate,\"\") != IFNULL(NEW.eolDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'EOL Date',  \n" +
                "			CAST(DATE(OLD.eolDate) AS CHAR),	CAST(DATE(NEW.eolDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','eolDate'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.reversalDate,\"\") != IFNULL(NEW.reversalDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Reversal Date',  \n" +
                "			CAST(DATE(OLD.reversalDate) AS CHAR),	CAST(DATE(NEW.reversalDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','reversalDate'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.value,\"\") != IFNULL(NEW.value,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Value',  \n" +
                "			CAST(OLD.value AS CHAR),	CAST(NEW.value AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','value'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.tolerance,\"\") != IFNULL(NEW.tolerance,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Tolerance',  \n" +
                "			CAST(OLD.tolerance AS CHAR),	CAST(NEW.tolerance AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','tolerance'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.minOperatingTemp,\"\") != IFNULL(NEW.minOperatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min Operating Temperature',  \n" +
                "			CAST(OLD.minOperatingTemp AS CHAR),	CAST(NEW.minOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','minOperatingTemp'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxOperatingTemp,\"\") != IFNULL(NEW.maxOperatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max Operating Temperature',  \n" +
                "			CAST(OLD.maxOperatingTemp AS CHAR),	CAST(NEW.maxOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','maxOperatingTemp'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalCategoryID,\"\") != IFNULL(NEW.functionalCategoryID,\"\") THEN  \n" +
                "		IF OLD.functionalCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`partTypeName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_parttypemst  \n" +
                "			WHERE id =OLD.functionalCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`partTypeName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_parttypemst  \n" +
                "			WHERE id =NEW.functionalCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.weight,\"\") != IFNULL(NEW.weight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Weight',  \n" +
                "			CAST(OLD.weight AS CHAR),	CAST(NEW.weight AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','weight'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.length,\"\") != IFNULL(NEW.length,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Length',  \n" +
                "			CAST(OLD.length AS CHAR),	CAST(NEW.length AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.width,\"\") != IFNULL(NEW.width,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Width',  \n" +
                "			CAST(OLD.width AS CHAR),	CAST(NEW.width AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.height,\"\") != IFNULL(NEW.height,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Height',  \n" +
                "			CAST(OLD.height AS CHAR),	CAST(NEW.height AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.saftyStock,\"\") != IFNULL(NEW.saftyStock,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min. Count(Qty) (Safety Stock)',  \n" +
                "			CAST(OLD.saftyStock AS CHAR),	CAST(NEW.saftyStock AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','saftyStock'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.specialNote,\"\") != IFNULL(NEW.specialNote,\"\") THEN  \n" +
                "		INSERT INTO common_longtext_history  \n" +
                "			(refTransId,				Colname,				Oldval,  \n" +
                "			 Newval,					valueDataType,				Tablename,  \n" +
                "			 createdBy,  				createdAt,  			updatedAt, 			Updatedby,  \n" +
                "			createByRoleId,		updateByRoleId )  \n" +
                "		 VALUES(NEW.id,					'Special Note',			CAST(OLD.specialNote AS CHAR),  \n" +
                "				 CAST(NEW.specialNote AS CHAR),	 	fun_getDataTypeBasedOnTableAndColumnName('component', 'specialNote'), 'component',  \n" +
                "				 OLD.createdBy,  			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "				OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.heightText,\"\") != IFNULL(NEW.heightText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Height - Seated (Max)',  \n" +
                "			CAST(OLD.heightText AS CHAR),	CAST(NEW.heightText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','heightText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partStatus,\"\") != IFNULL(NEW.partStatus,\"\") THEN  \n" +
                "		IF OLD.partStatus IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM component_partstatusmst  \n" +
                "			WHERE id = OLD.partStatus  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partStatus IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM component_partstatusmst  \n" +
                "			WHERE id = NEW.partStatus  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Status',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partStatusText,\"\") != IFNULL(NEW.partStatusText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Status (External)',  \n" +
                "			CAST(OLD.partStatusText AS CHAR),	CAST(NEW.partStatusText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','partStatusText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isPIDManual,\"\") != IFNULL(NEW.isPIDManual,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'PID Manual',  \n" +
                "			CAST(OLD.isPIDManual AS CHAR),	CAST(NEW.isPIDManual AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','isPIDManual'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.feature,\"\") != IFNULL(NEW.feature,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Feature',  \n" +
                "			CAST(OLD.feature AS CHAR),	CAST(NEW.feature AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','feature'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalCategoryText,\"\") != IFNULL(NEW.functionalCategoryText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Type (External)',  \n" +
                "			CAST(OLD.functionalCategoryText AS CHAR),	CAST(NEW.functionalCategoryText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','functionalCategoryText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.updatedAtApi,\"\") != IFNULL(NEW.updatedAtApi,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Updated At Api',  \n" +
                "			OLD.updatedAtApi,	NEW.updatedAtApi,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','updatedAtApi'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.supplier,\"\") != IFNULL(NEW.supplier,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Supplier',  \n" +
                "			CAST(OLD.supplier AS CHAR),	CAST(NEW.supplier AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','supplier'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypeText,\"\") != IFNULL(NEW.mountingTypeText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mounting Type (External)',  \n" +
                "			CAST(OLD.mountingTypeText AS CHAR),	CAST(NEW.mountingTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mountingTypeText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxPriceLimit,\"\") != IFNULL(NEW.maxPriceLimit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max. Price Limit',  \n" +
                "			CAST(OLD.maxPriceLimit AS CHAR),	CAST(NEW.maxPriceLimit AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'amount');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.selfLifeDays,\"\") != IFNULL(NEW.selfLifeDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Self Life Days',  \n" +
                "			CAST(OLD.selfLifeDays AS CHAR),	CAST(NEW.selfLifeDays AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','selfLifeDays'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCustom,\"\") != IFNULL(NEW.isCustom,\"\") THEN  \n" +
                "		IF OLD.isCustom IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCustom = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCustom = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCustom IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCustom = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCustom = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Custom MFG Part',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rev,\"\") != IFNULL(NEW.rev,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Rev',  \n" +
                "			CAST(OLD.rev AS CHAR),		CAST(NEW.rev AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rev'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mslID,\"\") != IFNULL(NEW.mslID,\"\") THEN  \n" +
                "		IF OLD.mslID IS NOT NULL THEN  \n" +
                "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pOldValue`  \n" +
                "			FROM component_mslmst  \n" +
                "			WHERE id =OLD.mslID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.mslID IS NOT NULL THEN  \n" +
                "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pNewValue`  \n" +
                "			FROM component_mslmst  \n" +
                "			WHERE id =NEW.mslID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MSL',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.connecterTypeID,\"\") != IFNULL(NEW.connecterTypeID,\"\") THEN  \n" +
                "		IF OLD.connecterTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_connectertypemst  \n" +
                "			WHERE id =OLD.connecterTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.connecterTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_connectertypemst  \n" +
                "			WHERE id =NEW.connecterTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Connector Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.connectorTypeText,\"\") != IFNULL(NEW.connectorTypeText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Connector Type (External)',  \n" +
                "			CAST(OLD.connectorTypeText AS CHAR),		CAST(NEW.connectorTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','connectorTypeText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.costCategoryID,\"\") != IFNULL(NEW.costCategoryID,\"\") THEN  \n" +
                "		IF OLD.costCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM cost_category  \n" +
                "			WHERE id =OLD.costCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.costCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM cost_category  \n" +
                "			WHERE id =NEW.costCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Cost Category',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxQtyonHand,\"\") != IFNULL(NEW.maxQtyonHand,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max. Qty on Hand',  \n" +
                "			CAST(OLD.maxQtyonHand AS CHAR),		CAST(NEW.maxQtyonHand AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'sixdigitunitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.noOfRows,\"\") != IFNULL(NEW.noOfRows,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'No Of Rows',  \n" +
                "			CAST(OLD.noOfRows AS CHAR),		CAST(NEW.noOfRows AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfRows'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.bookValue,\"\") != IFNULL(NEW.bookValue,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Book Value',  \n" +
                "			CAST(OLD.bookValue AS CHAR),		CAST(NEW.bookValue AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','bookValue'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.voltage,\"\") != IFNULL(NEW.voltage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Voltage',  \n" +
                "			CAST(OLD.voltage AS CHAR),		CAST(NEW.voltage AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','voltage'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.operatingTemp,\"\") != IFNULL(NEW.operatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Operating Temperature',  \n" +
                "			CAST(OLD.operatingTemp AS CHAR), CAST(NEW.operatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','operatingTemp'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.powerRating,\"\") != IFNULL(NEW.powerRating,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Power (Watts)',  \n" +
                "			CAST(OLD.powerRating AS CHAR), CAST(NEW.powerRating AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','powerRating'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pitch,\"\") != IFNULL(NEW.pitch,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pitch (Unit in mm)',  \n" +
                "			CAST(OLD.pitch AS CHAR), 	CAST(NEW.pitch AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pitch'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pitchMating,\"\") != IFNULL(NEW.pitchMating,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pitch Mating(Unit in mm)',  \n" +
                "			CAST(OLD.pitchMating AS CHAR), 	CAST(NEW.pitchMating AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pitchMating'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.plannedOverRunPercentagePerBuild,\"\") != IFNULL(NEW.plannedOverRunPercentagePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build) (%)',  \n" +
                "			CAST(OLD.plannedOverRunPercentagePerBuild AS CHAR), 	CAST(NEW.plannedOverRunPercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.nickName,\"\") != IFNULL(NEW.nickName,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Nickname',  \n" +
                "			CAST(OLD.nickName AS CHAR), 	CAST(NEW.nickName AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','nickName'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.bomLock,\"\") != IFNULL(NEW.bomLock,\"\") THEN  \n" +
                "		IF OLD.bomLock IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.bomLock = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.bomLock = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.bomLock IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.bomLock = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.bomLock = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Lock BOM',  \n" +
                "			pOldValue, 				pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.restrictUSEwithpermission,\"\") != IFNULL(NEW.restrictUSEwithpermission,\"\") THEN  \n" +
                "		IF OLD.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictUSEwithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictUSEwithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictUSEwithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictUSEwithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Restrict Use Including Packaging Alias (With Permission)',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.sizeDimension,\"\") != IFNULL(NEW.sizeDimension,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Size/Dimension',  \n" +
                "			CAST(OLD.sizeDimension AS CHAR), 	CAST(NEW.sizeDimension AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','sizeDimension'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.plannedValuePerBuild,\"\") != IFNULL(NEW.plannedValuePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build)',  \n" +
                "			CAST(OLD.plannedValuePerBuild AS CHAR), 	CAST(NEW.plannedValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','plannedValuePerBuild'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.scrapValuePerBuild,\"\") != IFNULL(NEW.scrapValuePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build)',  \n" +
                "			CAST(OLD.scrapValuePerBuild AS CHAR), 	CAST(NEW.scrapValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','scrapValuePerBuild'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.scrapRatePercentagePerBuild,\"\") != IFNULL(NEW.scrapRatePercentagePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build) (%)',  \n" +
                "			CAST(OLD.scrapRatePercentagePerBuild AS CHAR), 	CAST(NEW.scrapRatePercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.restrictUsePermanently,\"\") != IFNULL(NEW.restrictUsePermanently,\"\") THEN  \n" +
                "		IF OLD.restrictUsePermanently IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUsePermanently IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',			'Restrict Use Including Packaging Alias (Permanently)',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.customerID,\"\") != IFNULL(NEW.customerID,\"\") THEN  \n" +
                "		IF OLD.customerID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                "			FROM mfgcodemst  \n" +
                "			WHERE id =OLD.customerID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.customerID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                "			FROM mfgcodemst  \n" +
                "			WHERE id =NEW.customerID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Customer',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.eau,\"\") != IFNULL(NEW.eau,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'EAU',  \n" +
                "			CAST(OLD.eau AS CHAR), 	CAST(NEW.eau AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','eau'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.assyCode,\"\") != IFNULL(NEW.assyCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Assy Code',  \n" +
                "			CAST(OLD.assyCode AS CHAR), 	CAST(NEW.assyCode AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','assyCode'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pcbPerArray,\"\") != IFNULL(NEW.pcbPerArray,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'PCB Per Array',  \n" +
                "			CAST(OLD.pcbPerArray AS CHAR), 	CAST(NEW.pcbPerArray AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pcbPerArray'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficient,\"\") != IFNULL(NEW.temperatureCoefficient,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient',  \n" +
                "			CAST(OLD.temperatureCoefficient AS CHAR), 	CAST(NEW.temperatureCoefficient AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficient'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficientValue,\"\") != IFNULL(NEW.temperatureCoefficientValue,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Value',  \n" +
                "			CAST(OLD.temperatureCoefficientValue AS CHAR), 	CAST(NEW.temperatureCoefficientValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficientValue'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficientUnit,\"\") != IFNULL(NEW.temperatureCoefficientUnit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Unit',  \n" +
                "			CAST(OLD.temperatureCoefficientUnit AS CHAR), 	CAST(NEW.temperatureCoefficientUnit AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficientUnit'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCPN,\"\") != IFNULL(NEW.isCPN,\"\") THEN  \n" +
                "		IF OLD.isCPN IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCPN = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCPN = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCPN IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCPN = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCPN = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'CPN',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.matingPartRquired,\"\") != IFNULL(NEW.matingPartRquired,\"\") THEN  \n" +
                "		IF OLD.matingPartRquired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.matingPartRquired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.matingPartRquired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.matingPartRquired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.matingPartRquired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.matingPartRquired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Mating Part',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.driverToolRequired,\"\") != IFNULL(NEW.driverToolRequired,\"\") THEN  \n" +
                "		IF OLD.driverToolRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.driverToolRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.driverToolRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.driverToolRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.driverToolRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.driverToolRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Driver Tool',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pickupPadRequired,\"\") != IFNULL(NEW.pickupPadRequired,\"\") THEN  \n" +
                "		IF OLD.pickupPadRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.pickupPadRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.pickupPadRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.pickupPadRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.pickupPadRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.pickupPadRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Pick up Pad',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.programingRequired,\"\") != IFNULL(NEW.programingRequired,\"\") THEN  \n" +
                "		IF OLD.programingRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.programingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.programingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.programingRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.programingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.programingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Programming',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalTestingRequired,\"\") != IFNULL(NEW.functionalTestingRequired,\"\") THEN  \n" +
                "		IF OLD.functionalTestingRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.functionalTestingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.functionalTestingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalTestingRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.functionalTestingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.functionalTestingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Functional Testing',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.liveInternalVersion,\"\") != IFNULL(NEW.liveInternalVersion,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Live Internal Version',  \n" +
                "			CAST(OLD.liveInternalVersion AS CHAR), 	CAST(NEW.liveInternalVersion AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','liveInternalVersion'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.custAssyPN,\"\") != IFNULL(NEW.custAssyPN,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part#',  \n" +
                "			CAST(OLD.custAssyPN AS CHAR), 	CAST(NEW.custAssyPN AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','custAssyPN'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partType,\"\") != IFNULL(NEW.partType,\"\") THEN  \n" +
                "		IF OLD.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =OLD.partType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =NEW.partType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Type',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                      'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalTypePartRequired,\"\") != IFNULL(NEW.functionalTypePartRequired,\"\") THEN  \n" +
                "		IF OLD.functionalTypePartRequired IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.functionalTypePartRequired = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.functionalTypePartRequired = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.functionalTypePartRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.functionalTypePartRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.functionalTypePartRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Functional Type Parts',  \n" +
                "			pOldValue, pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypePartRequired,\"\") != IFNULL(NEW.mountingTypePartRequired,\"\") THEN  \n" +
                "		IF OLD.mountingTypePartRequired IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.mountingTypePartRequired = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.mountingTypePartRequired = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.mountingTypePartRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.mountingTypePartRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.mountingTypePartRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Mounting Type Parts',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shelfLifeAcceptanceDays,\"\") != IFNULL(NEW.shelfLifeAcceptanceDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Days)',  \n" +
                "			CAST(OLD.shelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.shelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','shelfLifeAcceptanceDays'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.shelfListDaysThresholdPercentage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Threshold(%))',  \n" +
                "			CAST(OLD.shelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.shelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.maxShelfLifeAcceptanceDays,\"\") != IFNULL(NEW.maxShelfLifeAcceptanceDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Days)',  \n" +
                "			CAST(OLD.maxShelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.maxShelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','maxShelfLifeAcceptanceDays'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.maxShelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.maxShelfListDaysThresholdPercentage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Threshold(%))',  \n" +
                "			CAST(OLD.maxShelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.maxShelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shelfLifeDateType,\"\") != IFNULL(NEW.shelfLifeDateType,\"\") THEN  \n" +
                "		SELECT (CASE WHEN (OLD.shelfLifeDateType = 'N') THEN 'None'  \n" +
                "					WHEN (OLD.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
                "                    WHEN (OLD.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
                "                    ELSE '' END) INTO `pOldValue`   ;  \n" +
                "		SELECT (CASE WHEN (NEW.shelfLifeDateType = 'N') THEN 'None'  \n" +
                "					WHEN (NEW.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
                "                    WHEN (NEW.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
                "                    ELSE '' END) INTO `pNewValue`   ;  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Shelf Life Date Typ',  \n" +
                "			pOldValue, 	pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.color,\"\") != IFNULL(NEW.color,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Color',  \n" +
                "			CAST(OLD.color AS CHAR), 	CAST(NEW.color AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','color'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.refSupplierMfgpnComponentID,\"\") != IFNULL(NEW.refSupplierMfgpnComponentID,\"\") THEN  \n" +
                "		IF OLD.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "				FROM component  \n" +
                "			WHERE id =OLD.refSupplierMfgpnComponentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "				FROM component  \n" +
                "			WHERE id = NEW.refSupplierMfgpnComponentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR PN',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.imageURL,\"\") != IFNULL(NEW.imageURL,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Image URL',  \n" +
                "			CAST(OLD.imageURL AS CHAR), 	CAST(NEW.imageURL AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','imageURL'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.businessRisk,\"\") != IFNULL(NEW.businessRisk,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Business Risk',  \n" +
                "			CAST(OLD.businessRisk AS CHAR), 	CAST(NEW.businessRisk AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','businessRisk'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.exteranalAPICallStatus,\"\") != IFNULL(NEW.exteranalAPICallStatus,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Exteranal API Call Status',  \n" +
                "			CAST(OLD.exteranalAPICallStatus AS CHAR), 	CAST(NEW.exteranalAPICallStatus AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','exteranalAPICallStatus'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isBOMVerified,\"\") != IFNULL(NEW.isBOMVerified,\"\") THEN  \n" +
                "		IF OLD.isBOMVerified IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.isBOMVerified = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.isBOMVerified = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.isBOMVerified IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isBOMVerified = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isBOMVerified = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'BOM Verified',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.liveVersion,\"\") != IFNULL(NEW.liveVersion,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Live Version',  \n" +
                "			CAST(OLD.liveVersion AS CHAR), 	CAST(NEW.liveVersion AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','liveVersion'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingID,\"\") != IFNULL(NEW.packagingID,\"\") THEN  \n" +
                "		IF OLD.packagingID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM component_packagingmst  \n" +
                "			WHERE id =OLD.packagingID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.packagingID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM component_packagingmst  \n" +
                "			WHERE id =NEW.packagingID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isTemperatureSensitive,\"\") != IFNULL(NEW.isTemperatureSensitive,\"\") THEN  \n" +
                "		IF OLD.isTemperatureSensitive IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isTemperatureSensitive = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isTemperatureSensitive = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isTemperatureSensitive IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isTemperatureSensitive = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isTemperatureSensitive = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Sensitive Data',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.unit,\"\") != IFNULL(NEW.unit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit',  \n" +
                "			CAST(OLD.unit AS CHAR), 	CAST(NEW.unit AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.grossWeight,\"\") != IFNULL(NEW.grossWeight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Gross Weight',  \n" +
                "			CAST(OLD.grossWeight AS CHAR), 	CAST(NEW.grossWeight AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingWeight,\"\") != IFNULL(NEW.packagingWeight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Net Weight',  \n" +
                "			CAST(OLD.packagingWeight AS CHAR), 	CAST(NEW.packagingWeight AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.epicorType,\"\") != IFNULL(NEW.epicorType,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Purchase Type',  \n" +
                "			CAST(OLD.epicorType AS CHAR), 	CAST(NEW.epicorType AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','epicorType'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.grossWeightUom,\"\") != IFNULL(NEW.grossWeightUom,\"\") THEN  \n" +
                "		IF OLD.grossWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.grossWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.grossWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.grossWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Gross Weight (UOM)',  \n" +
                "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.packagingWeightUom,\"\") != IFNULL(NEW.packagingWeightUom,\"\") THEN  \n" +
                "		IF OLD.packagingWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.packagingWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.packagingWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.packagingWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Net Weight (UOM)',  \n" +
                "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.price,\"\") != IFNULL(NEW.price,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Tentative Price Ea($)',  \n" +
                "			CAST(OLD.price AS CHAR),	CAST(NEW.price AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'amout');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.noOfPositionText,\"\") != IFNULL(NEW.noOfPositionText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pin Count (External)',  \n" +
                "			OLD.noOfPositionText,	NEW.noOfPositionText,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfPositionText'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.uomClassID,\"\") != IFNULL(NEW.uomClassID,\"\") THEN  \n" +
                "		IF OLD.uomClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM measurement_types  \n" +
                "			WHERE id =OLD.uomClassID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM measurement_types  \n" +
                "			WHERE id =NEW.uomClassID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM Class',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.noOfRowsText,\"\") != IFNULL(NEW.noOfRowsText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,        tableName,          Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'No. of Rows (External)',  \n" +
                "			OLD.noOfRowsText,		NEW.noOfRowsText,	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfRowsText'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rohsDeviation,\"\") != IFNULL(NEW.rohsDeviation,\"\") THEN  \n" +
                "		IF OLD.rohsDeviation IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.rohsDeviation = -1 THEN  \n" +
                "										'No'  \n" +
                "								WHEN OLD.rohsDeviation = -2 THEN  \n" +
                "										'With Approval'  \n" +
                "								WHEN OLD.rohsDeviation = -3 THEN  \n" +
                "										'Yes'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.rohsDeviation IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.rohsDeviation = -1 THEN  \n" +
                "										'No'  \n" +
                "								WHEN NEW.rohsDeviation = -2 THEN  \n" +
                "										'With Approval'  \n" +
                "								WHEN NEW.rohsDeviation = -3 THEN  \n" +
                "										'Yes'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,        tableName,          Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'RoHS Deviation',  \n" +
                "			pOldValue,				pNewValue,			OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.alertExpiryDays,\"\") != IFNULL(NEW.alertExpiryDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Alert Days before Expiry Date',  \n" +
                "			CAST(OLD.alertExpiryDays AS CHAR),	CAST(NEW.alertExpiryDays AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','alertExpiryDays'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.umidVerificationRequire,\"\") != IFNULL(NEW.umidVerificationRequire,\"\") THEN  \n" +
                "		IF OLD.umidVerificationRequire IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.umidVerificationRequire = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.umidVerificationRequire = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.umidVerificationRequire IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.umidVerificationRequire = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.umidVerificationRequire = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Require Supervisor Approval (Before Use)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.totalSolderPoints,\"\") != IFNULL(NEW.totalSolderPoints,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Total Solder Points',  \n" +
                "			CAST(OLD.totalSolderPoints AS CHAR),	CAST(NEW.totalSolderPoints AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','totalSolderPoints'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.trackSerialNumber,\"\") != IFNULL(NEW.trackSerialNumber,\"\") THEN  \n" +
                "		IF OLD.trackSerialNumber IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.trackSerialNumber = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.trackSerialNumber = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.trackSerialNumber IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.trackSerialNumber = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.trackSerialNumber = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Track Serial Numbers',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.restrictPackagingUsePermanently,\"\") != IFNULL(NEW.restrictPackagingUsePermanently,\"\") THEN  \n" +
                "		IF OLD.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictPackagingUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictPackagingUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictPackagingUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictPackagingUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (Permanently)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.restrictPackagingUseWithpermission,\"\") != IFNULL(NEW.restrictPackagingUseWithpermission,\"\") THEN  \n" +
                "		IF OLD.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictPackagingUseWithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictPackagingUseWithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictPackagingUseWithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictPackagingUseWithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (With Permission)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rfqOnly,\"\") != IFNULL(NEW.rfqOnly,\"\") THEN  \n" +
                "		IF OLD.rfqOnly IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.rfqOnly = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.rfqOnly = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.rfqOnly IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.rfqOnly = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.rfqOnly = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'RFQ Only',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCloudApiUpdateAttribute,\"\") != IFNULL(NEW.isCloudApiUpdateAttribute,\"\") THEN  \n" +
                "		IF OLD.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCloudApiUpdateAttribute = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCloudApiUpdateAttribute = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCloudApiUpdateAttribute = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCloudApiUpdateAttribute = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Cloud API update',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isAutoVerificationOfAllAssemblyParts,\"\") != IFNULL(NEW.isAutoVerificationOfAllAssemblyParts,\"\") THEN  \n" +
                "		IF OLD.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Bypass Machine Setup Verification (Only for Assembly)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.purchasingComment,\"\") != IFNULL(NEW.purchasingComment,\"\") THEN  \n" +
                "		INSERT INTO common_longtext_history  \n" +
                "			(refTransId,				Colname,				Oldval,  \n" +
                "			 Newval,					valueDataType,				Tablename,  \n" +
                "			 createdBy,  				createdAt,  			updatedAt, 			Updatedby,  \n" +
                "			createByRoleId,		updateByRoleId )  \n" +
                "		 VALUES(NEW.id,					'MISC Comment',			CAST(OLD.purchasingComment AS CHAR),  \n" +
                "				 CAST(NEW.purchasingComment AS CHAR),	 	fun_getDataTypeBasedOnTableAndColumnName('component', 'purchasingComment'), 'component',  \n" +
                "				 OLD.createdBy,  			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "				OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.predictedObsolescenceYear,\"\") != IFNULL(NEW.predictedObsolescenceYear,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Predicted Obsolescence Year',  \n" +
                "			CAST(OLD.predictedObsolescenceYear AS CHAR),	CAST(NEW.predictedObsolescenceYear AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','predictedObsolescenceYear'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.requiredTestTime,\"\") != IFNULL(NEW.requiredTestTime,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Testing Time',  \n" +
                "			CAST(OLD.requiredTestTime AS CHAR),	CAST(NEW.requiredTestTime AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','requiredTestTime'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.detailDescription,\"\") != IFNULL(NEW.detailDescription,\"\") THEN  \n" +
                "     INSERT INTO common_longtext_history  \n" +
                "		(refTransId,				Colname,				Oldval,  \n" +
                "		 Newval,					valueDataType,				Tablename,  \n" +
                "         createdBy,  				createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId )  \n" +
                "	 VALUES(NEW.id,					'Detailed Description',			CAST(OLD.detailDescription AS CHAR),  \n" +
                "			 CAST(NEW.detailDescription AS CHAR),	 	fun_getDataTypeBasedOnTableAndColumnName('component', 'detailDescription'), 'component',  \n" +
                "			 OLD.createdBy,  			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "			OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.obsoleteDate,\"\") != IFNULL(NEW.obsoleteDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Obsolete Date',  \n" +
                "			CAST(DATE(OLD.obsoleteDate) AS CHAR),	CAST(DATE(NEW.obsoleteDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','obsoleteDate'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfrNameText,\"\") != IFNULL(NEW.mfrNameText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR (External)',  \n" +
                "			CAST(OLD.mfrNameText AS CHAR),	CAST(NEW.mfrNameText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfrNameText'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.assemblyType,0) != IFNULL(NEW.assemblyType,0) THEN  \n" +
                "		IF OLD.assemblyType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_assy_typemst  \n" +
                "			WHERE id =OLD.assemblyType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.assemblyType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_assy_typemst  \n" +
                "			WHERE id =NEW.assemblyType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Assy Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF ((OLD.isWaterSoluble != NEW.isWaterSoluble)  \n" +
                "			or (OLD.isNoClean != NEW.isNoClean)  \n" +
                "            or (OLD.isFluxNotApplicable != NEW.isFluxNotApplicable))  \n" +
                "    THEN  \n" +
                "		-- Create string for Old configure value for Flux Type  \n" +
                "		set pOldValue = '';  \n" +
                "        IF(OLD.isFluxNotApplicable = 1) THEN  \n" +
                "			set pOldValue = 'Not Applicable';  \n" +
                "		END IF;  \n" +
                "        IF(OLD.isNoClean = 1) THEN  \n" +
                "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                "		END IF;  \n" +
                "        IF(OLD.isWaterSoluble = 1) THEN  \n" +
                "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        -- Create string for New configure value for Flux Type  \n" +
                "        set pNewValue = '';  \n" +
                "        IF(NEW.isFluxNotApplicable = 1) THEN  \n" +
                "			set pNewValue = 'Not Applicable';  \n" +
                "		END IF;  \n" +
                "        IF(NEW.isNoClean = 1) THEN  \n" +
                "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                "		END IF;  \n" +
                "        IF(NEW.isWaterSoluble = 1) THEN  \n" +
                "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Flux Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isHazmatMaterial,\"\") != IFNULL(NEW.isHazmatMaterial,\"\") THEN  \n" +
                "		IF OLD.isHazmatMaterial IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isHazmatMaterial = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isHazmatMaterial = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isHazmatMaterial IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isHazmatMaterial = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isHazmatMaterial = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Hazmat Material',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isReceiveBulkItem,\"\") != IFNULL(NEW.isReceiveBulkItem,\"\") THEN  \n" +
                "		IF OLD.isReceiveBulkItem IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isReceiveBulkItem = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isReceiveBulkItem = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isReceiveBulkItem IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isReceiveBulkItem = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isReceiveBulkItem = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Receive as a Bulk item',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.internalReference,\"\") != IFNULL(NEW.internalReference,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Internal Ref#',  \n" +
                "			CAST(OLD.internalReference AS CHAR),	CAST(NEW.internalReference AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','internalReference'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.purchaseacctId,\"\") != IFNULL(NEW.purchaseacctId,\"\") THEN  \n" +
                "		IF OLD.purchaseacctId IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`acct_name`, '') INTO `pOldValue`  \n" +
                "			FROM acct_acctmst  \n" +
                "			WHERE acct_id =OLD.purchaseacctId  \n" +
                "			ORDER BY acct_id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.purchaseacctId IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`acct_name`, '') INTO `pNewValue`  \n" +
                "			FROM acct_acctmst  \n" +
                "			WHERE acct_id =NEW.purchaseacctId  \n" +
                "			ORDER BY acct_id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Purchase COA',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.salesacctId,\"\") != IFNULL(NEW.salesacctId,\"\") THEN  \n" +
                "		IF OLD.salesacctId IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`acct_name`, '') INTO `pOldValue`  \n" +
                "			FROM acct_acctmst  \n" +
                "			WHERE acct_id =OLD.salesacctId  \n" +
                "			ORDER BY acct_id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.salesacctId IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`acct_name`, '') INTO `pNewValue`  \n" +
                "			FROM acct_acctmst  \n" +
                "			WHERE acct_id =NEW.salesacctId  \n" +
                "			ORDER BY acct_id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Sales COA',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.frequency,\"\") != IFNULL(NEW.frequency,\"\") THEN  \n" +
                "		set pOldValue = (CASE WHEN OLD.frequency = 1 THEN \"Every\"  \n" +
                "							  WHEN OLD.frequency = 1 THEN \"First\"  \n" +
                "                              WHEN OLD.frequency = 1 THEN \"Last\"  \n" +
                "                              ELSE '' END);  \n" +
                "  \n" +
                "        set pNewValue = (CASE WHEN NEW.frequency = 1 THEN \"Every\"  \n" +
                "							  WHEN NEW.frequency = 1 THEN \"First\"  \n" +
                "                              WHEN NEW.frequency = 1 THEN \"Last\"  \n" +
                "                              ELSE '' END);  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Charge Frequency',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.frequencyType,\"\") != IFNULL(NEW.frequencyType,\"\") THEN  \n" +
                "		set pOldValue = (CASE WHEN OLD.frequencyType = 1 THEN \"Release\"  \n" +
                "							  WHEN OLD.frequencyType = 1 THEN \"Shipment\"  \n" +
                "                              ELSE '' END);  \n" +
                "  \n" +
                "        set pNewValue = (CASE WHEN NEW.frequencyType = 1 THEN \"Release\"  \n" +
                "							  WHEN NEW.frequencyType = 1 THEN \"Shipment\"  \n" +
                "                              ELSE '' END);  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Charge Frequency Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5931,'2.00','V1','Bug 41298: [Main Branch] Part History showing incorrect Modified By name - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
                );
            break;
        case 5931:
              allDbChangesArray.push(
              /* **************************** New Script -> 14-02-2022 *********************************** */
                  "ALTER VIEW `vu_customer_packing_slip_qty` AS  \n" +
                  "SELECT  \n" +
                  "  `a`.`soNumbers`                  AS `soNumbers`,  \n" +
                  "  `a`.`poQty`                      AS `poQty`,  \n" +
                  "  `a`.`partID`                     AS `partID`,  \n" +
                  "  `a`.`assyID`                     AS `assyID`,  \n" +
                  "  `a`.`mfgPN`                      AS `mfgPN`,  \n" +
                  "  `a`.`rohsIcon`                   AS `rohsIcon`,  \n" +
                  "  `a`.`rohsName`                   AS `rohsName`,  \n" +
                  "  `a`.`woID`                       AS `woID`,  \n" +
                  "  `a`.`woNumber`                   AS `woNumber`,  \n" +
                  "  `a`.`opStock`                    AS `opStock`,  \n" +
                  "  `FUN_GETLASTWOOPIDBYWONUMBER`(  \n" +
                  "`a`.`woNumber`)  AS `lastWOOPID`,  \n" +
                  "  `a`.`availableQty`               AS `availableQty`,  \n" +
                  "  `a`.`availableQtyWithUMIDStock`  AS `availableQtyWithUMIDStock`,  \n" +
                  "  `a`.`availableQty`               AS `actualAvalilableQty`,  \n" +
                  "  NULL                             AS `selectedQty`,  \n" +
                  "  `a`.`totalUMIDCount`             AS `totalUMIDCount`,  \n" +
                  "  `a`.`totalUMIDCountAfterShipped` AS `totalUMIDCountAfterShipped`,  \n" +
                  "  `a`.`departmentName`             AS `departmentName`,  \n" +
                  "  `a`.`stockType`                  AS `stockType`,  \n" +
                  "  `a`.`stockTypeName`              AS `stockTypeName`,  \n" +
                  "  `a`.`poNumbers`                  AS `poNumbers`,  \n" +
                  "  `a`.`warehouseName`              AS `warehouseName`,  \n" +
                  "  `a`.`binName`                    AS `binName`,  \n" +
                  "  `a`.`binID`                      AS `binID`  \n" +
                  "FROM (SELECT  \n" +
                  "        (SUM(`atk`.`openingStock`) - (IFNULL(`css`.`pkgQty`,0) + (SELECT IFNULL(SUM(`ss`.`shippedqty`),0) FROM `shippedassembly` `ss` WHERE ((`ss`.`isDeleted` = 0) AND (`ss`.`woNumber` = `atk`.`woNumber`) AND (`ss`.`partID` = `atk`.`partID`) AND (`ss`.`stockType` = 'US'))))) AS `opStock`,  \n" +
                  "        `atk`.`partID`                    AS `partID`,  \n" +
                  "        `atk`.`woID`                      AS `woID`,  \n" +
                  "        `atk`.`woNumber`                  AS `woNumber`,  \n" +
                  "        MAX((CASE WHEN (`atk`.`type` = 'AS') THEN 'Adjustment Stock' WHEN (`atk`.`type` = 'WS') THEN 'Work Order Stock' WHEN (`atk`.`type` = 'OS') THEN 'Initial Stock' ELSE '' END)) AS `stockTypeName`,  \n" +
                  "        MAX(`atk`.`type`)                 AS `stockType`,  \n" +
                  "        `FUN_GETASSYPIDCODEBYID`(  \n" +
                  "`atk`.`partID`)  AS `assyID`,  \n" +
                  "        `FUN_GETROHSICONBYPARTID`(  \n" +
                  "`atk`.`partID`)  AS `rohsIcon`,  \n" +
                  "        `FUN_GETROHSNAMEBYPARTID`(  \n" +
                  "`atk`.`partID`)  AS `rohsName`,  \n" +
                  "        `FUN_GETCOMPONENTNAMEBYID`(  \n" +
                  "`atk`.`partID`)  AS `mfgPN`,  \n" +
                  "        `FUN_GETWAREHOUSENAMEBYID`(  \n" +
                  "`atk`.`whID`)  AS `warehouseName`,  \n" +
                  "        `FUN_GETBINNAMEBYID`(  \n" +
                  "`atk`.`binID`)  AS `binName`,  \n" +
                  "        `atk`.`binID`                     AS `binID`,  \n" +
                  "        IFNULL(`css`.`pkgQty`,0)          AS `totalUMIDCount`,  \n" +
                  "        `FUN_GETDEPARTMENTNAMEBYBINID`(  \n" +
                  "`atk`.`binID`)  AS `departmentName`,  \n" +
                  "        IFNULL(`css`.`pkgQty`,0)          AS `totalUMIDCountAfterShipped`,  \n" +
                  "        (SUM(`atk`.`openingStock`) - (SELECT IFNULL(SUM(`ss`.`shippedqty`),0) FROM `shippedassembly` `ss` WHERE ((`ss`.`isDeleted` = 0) AND (`ss`.`woNumber` = `atk`.`woNumber`) AND (`ss`.`partID` = `atk`.`partID`)))) AS `availableQtyWithUMIDStock`,  \n" +
                  "        ((SUM(`atk`.`openingStock`) - (SELECT IFNULL(SUM(`ss`.`shippedqty`),0) FROM `shippedassembly` `ss` WHERE ((`ss`.`isDeleted` = 0) AND (`ss`.`woNumber` = `atk`.`woNumber`) AND (`ss`.`partID` = `atk`.`partID`)))) - IFNULL(`css`.`pkgQty`,0)) AS `availableQty`,  \n" +
                  "        GROUP_CONCAT(DISTINCT `atk`.`poNumber` SEPARATOR ', ') AS `poNumbers`,  \n" +
                  "        GROUP_CONCAT(DISTINCT `atk`.`soNumber` SEPARATOR ', ') AS `soNumbers`,  \n" +
                  "        SUM(`atk`.`poQty`) AS `poQty`  \n" +
                  "      FROM (`assemblystock` `atk`  \n" +
                  "         LEFT JOIN (SELECT  \n" +
                  "                      `css`.`woID`                       AS `woId`,  \n" +
                  "                      `css`.`woNumber`                   AS `woNumber`,  \n" +
                  "                      SUM(`css`.`pkgQty`)                AS `pkgQty`  \n" +
                  "                    FROM `component_sid_stock` `css`  \n" +
                  "                    WHERE ((`css`.`isDeleted` = 0)  \n" +
                  "                           AND (`css`.`woNumber` IS NOT NULL))  \n" +
                  "                    GROUP BY `css`.`woID`,`css`.`woNumber`) `css`  \n" +
                  "           ON ((`css`.`woNumber` = `atk`.`woNumber`)))  \n" +
                  "      WHERE (`atk`.`isDeleted` = 0)  \n" +
                  "      GROUP BY `atk`.`woNumber`,`atk`.`partID`,`atk`.`woID`,`atk`.`whID`,`atk`.`binID`,`css`.`pkgQty`) `a`  \n" +
                  "WHERE (`a`.`availableQty` > 0);  \n" +  
              /* **************************** Add Script Version -> 14-02-2022 *********************************** */
              "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
              "VALUES (5932,'2.00','V1','Resolved Packing slip qty issue and merge changes  - VS '," + userid + " , '" + requiredDet.ipAddress + "');"
              );
            break;
        case 5932:
                allDbChangesArray.push(
                /* **************************** New Script -> 15-02-2022*********************************** */
                    "DROP TRIGGER IF EXISTS TRG_BI_salesorderdet;  \n" +
                    "CREATE TRIGGER `TRG_BI_salesorderdet` BEFORE INSERT ON `salesorderdet` FOR EACH ROW BEGIN  \n" +
                    "  \n" +
                    "              IF(SELECT COUNT(1) FROM salesorderdet WHERE custPOLineNumber=NEW.custPOLineNumber AND isdeleted=0 AND refSalesOrderID=NEW.refSalesOrderID)THEN  \n" +
                    "              SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='Duplicate entry';  \n" +
                    "  \n" +
                    "              END IF;  \n" +
                    "              IF(SELECT COUNT(1) FROM salesorderdet WHERE lineID=NEW.lineID AND isdeleted=0 AND refSalesOrderID=NEW.refSalesOrderID)THEN  \n" +
                    "              SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='Duplicate entry';  \n" +
                    "  \n" +
                    "              END IF;  \n" +
                    "  \n" +
                    "		IF( (SELECT COUNT(1)  FROM salesordermst sm WHERE sm.isDeleted = 0  \n" +
                    "		AND sm.id = NEW.refSalesOrderID) = 0 )   THEN  \n" +
                    "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF( (SELECT COUNT(1)  FROM COMPONENT c WHERE c.isDeleted = 0  \n" +
                    "		AND c.id = NEW.partID) = 0 )   THEN  \n" +
                    "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF(NEW.quoteFrom <> 3 and (SELECT COUNT(1)  FROM COMPONENT c WHERE c.isDeleted = 0  \n" +
                    "				AND c.id = NEW.partID AND c.partType=4) > 0)   THEN  \n" +
                    "			SIGNAL  SQLSTATE '45002' SET MESSAGE_TEXT='Wrong \"Quote From\" selected for  Other Part.';  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "END;  \n" +
                /* **************************** Add Script Version -> 15-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5933,'2.00','V1',' TRG_BI_salesorderdet - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
            case 5933:
                allDbChangesArray.push(
                /* **************************** New Script -> 15-02-2022*********************************** */
                    "DROP TRIGGER IF EXISTS TRG_BU_salesorderdet;  \n" +
                    "CREATE TRIGGER `TRG_BU_salesorderdet` BEFORE UPDATE ON `salesorderdet` FOR EACH ROW BEGIN  \n" +
                    "  \n" +
                    "	IF NEW.isDeleted=0 THEN  \n" +
                    "  \n" +
                    "		IF( (SELECT COUNT(1)  FROM salesordermst sm WHERE sm.isDeleted = 0  \n" +
                    "		AND sm.id = NEW.refSalesOrderID) = 0 )   THEN  \n" +
                    "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "		IF( (SELECT COUNT(1)  FROM component c WHERE c.isDeleted = 0  \n" +
                    "		AND c.id = NEW.partID) = 0 )   THEN  \n" +
                    "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "  		IF(NEW.quoteFrom <> 3 and (SELECT COUNT(1)  FROM COMPONENT c WHERE c.isDeleted = 0  \n" +
                    "				AND c.id = NEW.partID AND c.partType=4) > 0)   THEN  \n" +
                    "			SIGNAL  SQLSTATE '45002' SET MESSAGE_TEXT='Wrong \"Quote From\" selected for  Other Part.';  \n" +
                    "		END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "	END IF;  \n" +
                    "  \n" +
                    "  \n" +
                    "END;  \n" +
                /* **************************** Add Script Version -> 15-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5934,'2.00','V1',' TRG_BU_salesorderdet - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
                );
                break;
                case 5934:
  allDbChangesArray.push(
  /* **************************** Add Script Version -> 17-02-2022 *********************************** */
      
      "CREATE TABLE `component_last_external_apicall` (  \n" +
      "  `id` int NOT NULL AUTO_INCREMENT,  \n" +
      "  `refComponentID` int NOT NULL,  \n" +
      "  `supplierID` int DEFAULT NULL,  \n" +
      "  `updatedAtApi` datetime DEFAULT CURRENT_TIMESTAMP,  \n" +
      "  `isDeleted` tinyint DEFAULT '0',  \n" +
      "  `deletedAt` datetime DEFAULT NULL,  \n" +
      "  PRIMARY KEY (`id`),  \n" +
      "  KEY `FK_component_apicall_refComponentID` (`refComponentID`),  \n" +
      "  KEY `FK_component_apicall_supplierID` (`supplierID`),  \n" +
      "  CONSTRAINT `FK_component_apicall_refComponentID` FOREIGN KEY (`refComponentID`) REFERENCES `component` (`id`),  \n" +
      "  CONSTRAINT `FK_component_apicall_supplierID` FOREIGN KEY (`supplierID`) REFERENCES `mfgcodemst` (`id`)  \n" +
      ");  \n" +
  /* **************************** Add Script Version -> 17-02-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5935,'2.00','V1',' New table component_last_external_apicall - CC '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
case 5935:
  allDbChangesArray.push(
  /* **************************** Add Script Version -> 17-02-2022 *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_manageComponentLastExternalAPICall` ;  \n" +
      "CREATE PROCEDURE `Sproc_manageComponentLastExternalAPICall`(  \n" +
      "	IN pcomponentID INT,  \n" +
      "	IN psupplierID INT  \n" +
      ")  \n" +
      "BEGIN  \n" +
      "  \n" +
      "		IF(SELECT COUNT(1) FROM  component_last_external_apicall WHERE refComponentID=pcomponentID AND supplierID=psupplierID AND isdeleted=0)>0 THEN  \n" +
      "		  UPDATE component_last_external_apicall SET updatedAtApi=CURRENT_TIMESTAMP WHERE refComponentID=pcomponentID AND supplierID=psupplierID AND isdeleted=0;  \n" +
      "		ELSE  \n" +
      "		  INSERT INTO component_last_external_apicall(refComponentID,updatedAtApi,supplierID,isDeleted) VALUES(pcomponentID,CURRENT_TIMESTAMP,psupplierID,0);  \n" +
      "		END IF;  \n" +
      "END;  \n" +
  /* **************************** Add Script Version -> 17-02-2022 *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_GetComponentList` ;  \n" +
      "CREATE PROCEDURE `Sproc_GetComponentList`(  \n" +
      "	IN ppageIndex INT,  \n" +
      "	IN precordPerPage INT,  \n" +
      "	IN pOrderBy VARCHAR(255),  \n" +
      "	IN pWhereClause VARCHAR(16383),  \n" +
      "	IN pIsMFG TINYINT,  \n" +
      "    IN pMfgCodeIDs LONGTEXT,  \n" +
      "    IN pMfgCodeIdsForSupplierParts LONGTEXT,  \n" +
      "    IN pPackagingIDs LONGTEXT,  \n" +
      "    IN pPackageIDs LONGTEXT,  \n" +
      "    IN pPartStatusIDs LONGTEXT,  \n" +
      "    IN pMountingTypeIDs LONGTEXT,  \n" +
      "    IN pExternalMountingTypeValues LONGTEXT,  \n" +
      "    IN pFunctionalTypeIDs LONGTEXT,  \n" +
      "    IN pExternalFunctionalTypeValues LONGTEXT,  \n" +
      "    IN pAttributesSearchHeader LONGTEXT,  \n" +
      "    IN pAttributesSearch LONGTEXT,  \n" +
      "    IN pPackagingAlias TEXT,  \n" +
      "    IN pAlternatePart TEXT,  \n" +
      "    IN pRoHSAlternatePart TEXT,  \n" +
      "    IN pPartUsedInAssembly TEXT,  \n" +
      "    IN pMultiplePartNumbers LONGTEXT,  \n" +
      "    IN pStockQuantity TEXT,  \n" +
      "    IN pPartTypeIDs LONGTEXT,  \n" +
      "    IN pCertificateStandardsIds LONGTEXT,  \n" +
      "    IN pStandardsClassIds LONGTEXT,  \n" +
      "    IN pAssemblyIds LONGTEXT,  \n" +
      "    IN pAssemblyTypeIds LONGTEXT,  \n" +
      "    IN pRohsIds LONGTEXT,  \n" +
      "    IN pExternalRoHSStatusListValues LONGTEXT,  \n" +
      "    IN pOperationalAttributeIds LONGTEXT,  \n" +
      "    IN pAcceptableShippingCountryIds LONGTEXT,  \n" +
      "    IN pComponentOrdering TEXT,  \n" +
      "    IN pComponentUsageCriteria TEXT,  \n" +
      "    IN pIsRefreshMasterFilters TINYINT,  \n" +
      "    IN pFromDate DATE,  \n" +
      "    IN pToDate DATE,  \n" +
      "    IN pIsReversal TINYINT,  \n" +
      "    IN pIsCPN TINYINT,  \n" +
      "    IN pIsCustom TINYINT,  \n" +
      "    IN pIsBOMActivityStarted TINYINT,  \n" +
      "    IN pIsEcoDfmColumnVisible TINYINT,  \n" +
      "    IN pIsSearchFromHeader TINYINT,  \n" +
      "    IN pIsExportControl TINYINT,  \n" +
      "    IN pObsoleteDate DATE,  \n" +
      "    IN pIsOperatingTemperatureBlank TINYINT,  \n" +
      "    IN pFromCreatedOnDate DATE,  \n" +
      "    IN pToCreatedOnDate DATE,  \n" +
      "    IN pIsIdenticalMfrPN TINYINT,  \n" +
      "    IN pIsProductionPNEmpty TINYINT,  \n" +
      "    IN pDisapprovedSupplierIds LONGTEXT,  \n" +
      "	IN pIsExcludeIncorrectPart TINYINT,  \n" +
      "    IN pMultiplePartFilterFieldName VARCHAR(50),  \n" +
      "    IN pMultiplePartByUploadFileDetail LONGTEXT,  \n" +
      "    IN pIsRestrictUSEwithpermission TINYINT,  \n" +
      "    IN pIsRestrictPackagingUseWithpermission TINYINT,  \n" +
      "    IN pIsRestrictUsePermanently TINYINT,  \n" +
      "    IN pIsRestrictPackagingUsePermanently TINYINT  \n" +
      "    )  \n" +
      "BEGIN  \n" +
      "	DECLARE pOffset INT;  \n" +
      "	DECLARE rowNumWhere VARCHAR(255);  \n" +
      "    DECLARE attributeSearchString LONGTEXT;  \n" +
      "    DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
      "    DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;  \n" +
      "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
      "    DECLARE vPartUsedInAssemblyExists VARCHAR(20);  \n" +
      "    DECLARE vPartUsedInAssemblyAndOR VARCHAR(20);  \n" +
      "  \n" +
      "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
      "    DECLARE vTimeZone VARCHAR(50);  \n" +
      "    DECLARE vCurrentSession DATETIME;  \n" +
      "    DECLARE vMfgCodeFormat INT;  \n" +
      "  \n" +
      "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
      "    SELECT fun_DatetimetoUTCDateTime() INTO vCurrentSession;  \n" +
      "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
      "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
      "  SET @SQLStatement1=CONCAT(\"  \n" +
      "	SELECT co.id,co.imageURL,co.mfgPN,co.mfgcodeID,co.mfgPNDescription,co.packageQty,co.ltbDate,co.RoHSStatusID,co.PIDCode,co.custAssyPN, co.rev, co.liveVersion  \n" +
      ",co.leadTime,co.noOfPosition,co.mountingTypeID,co.partPackage,co.deviceMarking,co.minimum,co.mult,co.uomText,co.rohsText,co.dataSheetLink  \n" +
      ",co.eolDate,co.value,co.tolerance,co.minOperatingTemp,co.maxOperatingTemp,co.weight,co.length,co.width,co.height,co.saftyStock  \n" +
      ",co.specialNote,co.heightText,co.partStatusText,co.feature,co.functionalCategoryText,su.mfgcode as supplier,co.mountingTypeText,co.maxPriceLimit  \n" +
      ",co.selfLifeDays,co.isCustom,co.connecterTypeID,co.connectorTypeText,co.maxQtyonHand,co.noOfRows,co.powerRating,co.pitch,co.pitchMating  \n" +
      ",co.scrapRatePercentagePerBuild,co.plannedOverRunPercentagePerBuild,co.nickName,co.restrictUSEwithpermission,co.operatingTemp  \n" +
      ",co.sizeDimension,co.plannedValuePerBuild,co.scrapValuePerBuild,co.restrictUsePermanently,co.eau,co.pcbPerArray,co.isCPN,co.partType,co.category  \n" +
      ",co.shelfListDaysThresholdPercentage,co.color,co.businessRisk,co.grossWeight,co.packagingWeight,co.restrictPackagingUsePermanently  \n" +
      ",co.restrictPackagingUseWithpermission,co.reversalDate,co.serialNumber,co.isActivityStart,co.activityStartBy,co.activityStartAt  \n" +
      ",co.systemGenerated,co.purchasingComment,co.detailDescription,co.documentPath,co.obsoleteDate,co.epicorType,co.partStatus,co.packagingID,co.functionalCategoryID,co.partPackageID,co.isWaterSoluble,co.isNoClean  \n" +
      ",co.mfrNameText,co.isHazmatMaterial,co.rfqNumber,co.salesacctId,co.purchaseacctId,co.umidSPQ,co.internalReference,  fun_GetFormattedMfgCode(mf.mfgCode, mf.mfgName, \", vMfgCodeFormat ,\") as mfgCode,  \n" +
      " mf.isCustOrDisty, mf.mfgName as manufacturerName, mf.displayOrder mfgDisplayOrder,  \n" +
      "		(case when co.isGoodPart!=2 and mf.mfgType = 'MFG' then 1 else 0 end) as isCopyPart,  \n" +
      "		gc.name AS partStatusValue,  \n" +
      "        gc.displayOrder parStatusDisplayOrder,  \n" +
      "		mf.mfgType, co.isReceiveBulkItem \");  \n" +
      "	IF pIsMFG = TRUE THEN  \n" +
      "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
      "			null AliasMFGPN,  \n" +
      "			null AliasMFGCode,  \n" +
      "			null AliasMFGCodeID,  \n" +
      "			null AliascompID,  \n" +
      "			null AliasMFGName,  \n" +
      "            null AliasMFGDisplayOrder\");  \n" +
      "    ELSE  \n" +
      "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
      "		/*(case when (mf.mfgType = 'DIST' and co.refSupplierMfgpnComponentID is not null) then (select MFGPN from component vu_co where vu_co.id = co.refSupplierMfgpnComponentID limit 1) else null end) AliasMFGPN,*/  \n" +
      "         vu_co.MFGPN AliasMFGPN,  \n" +
      "          fun_GetFormattedMfgCode(mfc.mfgCode, mfc.mfgName,\", vMfgCodeFormat ,\") as AliasMFGCode,  \n" +
      "        mfc.id AliasMFGCodeID,  \n" +
      "	    co.refSupplierMfgpnComponentID AliascompID,  \n" +
      "        mfc.mfgName as AliasMFGName,  \n" +
      "        mfc.displayOrder AliasMFGDisplayOrder \");  \n" +
      "	END IF;  \n" +
      "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
      "		ro.name AS `rohsComplientConvertedValue`,  \n" +
      "        ro.displayOrder rohsDisplayOrder,  \n" +
      "		ro.rohsIcon AS `rohsIcon`,  \n" +
      "        `co`.`isGoodPart`,  \n" +
      "		(CASE WHEN (`co`.`isGoodPart` = 1) THEN 'Correct Part'  \n" +
      "					WHEN (`co`.`isGoodPart` = 2) THEN 'Incorrect Part'  \n" +
      "					WHEN (`co`.`isGoodPart` = 3) THEN 'TBD Part'  \n" +
      "					ELSE '' END) AS `isGoodPartValue`,  \n" +
      "		case when co.isCustom = 1 then  \n" +
      "				'Yes'  \n" +
      "			else 'No' end as isCustomValue,  \n" +
      "		case when co.isCPN = 1 then  \n" +
      "				'Yes'  \n" +
      "			else 'No' end as isCPNValue,  \n" +
      "		pt.partTypeName functionalCategoryName,  \n" +
      "        pt.displayOrder functionalCategoryDisplayOrder,  \n" +
      "		mt.name mountingTypeName,  \n" +
      "        mt.displayOrder mountingTypeDisplayOrder,  \n" +
      "		pc.categoryName,  \n" +
      "		rct.name connecterTypeName,  \n" +
      "		u.unitName,  \n" +
      "		CONCAT(cmsl.levelRating,' (', cmsl.time,')') mslName,  \n" +
      "		pck.name packagingName,  \n" +
      "        pck.displayOrder packagingDisplayOrder,  \n" +
      "			(CASE WHEN (`co`.`isReversal` = 1) THEN 'Yes'  \n" +
      "					ELSE 'No' END) AS `reversalPart`,  \n" +
      "			(CASE WHEN (`co`.`isEpoxyMount` = 1) THEN 'Yes'  \n" +
      "					ELSE 'No' END) AS `isEpoxyMount`,  \n" +
      "		ifnull(vucomstd.isExportControl, 'No') as isExportControl,  \n" +
      "        IFNULL(vuempcre.initialName,co.createdBy) as createdbyValue,  \n" +
      "		IFNULL(vuempupd.initialName ,co.updatedBy)as updatedbyValue,  \n" +
      "		rc.name as createdbyRoleValue,  \n" +
      "		ru.name as updatedbyRoleValue,  \n" +
      "        co.createdAt,  \n" +
      " 		co.updatedAt,  \n" +
      "        clea.updatedAtApi,  \n" +
      "		(CASE WHEN (co.systemGenerated = 0) THEN 'No'  \n" +
      "		WHEN (co.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,  \n" +
      "        pct.name packageCaseTypeValue,  \n" +
      "        concat(pt.partTypeName,' - ',mt.name) groupName,  \n" +
      "		case when co.category = 3 then  \n" +
      "			fun_getSamplePicturesUploadCount(co.id)  \n" +
      "		end uploadedSamplePicturesCount,  \n" +
      "		case when co.category = 3 then  \n" +
      "			vurfass.count  \n" +
      "		end assemblyCount,  \n" +
      "		case when co.category = 3 then  \n" +
      "			 vurline.lineCount  \n" +
      "		end bomLineCount,  \n" +
      "		case when co.category = 3 then  \n" +
      "			vurfass.quoteProgress  \n" +
      "		end quoteProgress,  \n" +
      "		CASE when co.category = 3 then  \n" +
      "		 	vurfass.id  \n" +
      "		END rfqAssyID,  \n" +
      "		concat(usr.firstName, ' ', usr.lastName) activityStartedByUserName,  \n" +
      "		case when co.isActivityStart=true then  \n" +
      "				TIMESTAMPDIFF(SECOND, co.activityStartAt,'\",vCurrentSession,\"')  \n" +
      "			else null end activityStartTime,  \n" +
      "		rat.name assemblyTypeName,  \n" +
      "		CASE when co.frequency = 1 then  \n" +
      "		 	'Every' when    co.frequency = 2 then  \n" +
      "		 	'First' when  co.frequency = 3 then  \n" +
      "		 	'Last' else ''  \n" +
      "		END frequencyName,  \n" +
      "        CASE WHEN co.isWaterSoluble = 0 THEN 'NO' ELSE 'YES' END isWaterSolubleConvertedValue ,  \n" +
      "        CASE WHEN co.isNoClean = 0 THEN 'NO' ELSE 'YES' END isNoCleanConvertedValue,  \n" +
      "        fun_getHazmateValue(co.isHazmatMaterial) as isHazmatMaterialValue,  \n" +
      "        CASE WHEN co.isReceiveBulkItem = 0 THEN 'NO' ELSE 'YES' END isReceiveBulkConvertedValue,  \n" +
      "        CONCAT('(',am.`acct_code`,') ',am.`acct_name`) AS SalesCOA,  \n" +
      "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS PurchaseCOA,  \n" +
      "        vucomstd.certificatelist,  \n" +
      "        vusac.subAssemblyCount\");  \n" +
      "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') OR pComponentOrdering = 'STOCK' THEN  \n" +
      "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentStock(co.id) partStock \");  \n" +
      "	ELSE  \n" +
      "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partStock \");  \n" +
      "	END IF;  \n" +
      "    IF pComponentOrdering = 'USAGE' THEN  \n" +
      "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentUsage(co.id,'\",pFromDate,\"','\",pToDate,\"','\",pComponentUsageCriteria,\"') partUsage \");  \n" +
      "	ELSE  \n" +
      "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partUsage \");  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF pIsEcoDfmColumnVisible = TRUE THEN  \n" +
      "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , (select count(1)  \n" +
      "													  from eco_request ec  \n" +
      "													 where ec.isdeleted = 0  \n" +
      "													   and ec.finalstatus = 'P'  \n" +
      "													   and ec.fromPartID = co.id) activeEcoDfmCount \");  \n" +
      "	ELSE  \n" +
      "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null activeEcoDfmCount \");  \n" +
      "	END IF;  \n" +
      "	IF (pFromCreatedOnDate IS NOT NULL OR pToCreatedOnDate IS NOT NULL) THEN  \n" +
      "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , CAST(fun_CovnertDateTimeByTimezoneValue(co.createdAt,'\",vTimeZone,\"') AS DATE) createdAtFilter \");  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
      "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , count(1) over(partition by co.mfgPN,mf.mfgType) identicalPNCount \");  \n" +
      "	END IF;  \n" +
      "  \n" +
      "SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
      "	FROM component co  \n" +
      "		JOIN rfq_partcategory pc ON pc.id = co.partType  \n" +
      " 		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id  \n" +
      " 		JOIN component_partstatusmst gc ON gc.id = co.partStatus  \n" +
      " 		JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id  \n" +
      " 		JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID  \n" +
      " 		JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID  \n" +
      " 		LEFT JOIN rfq_connectertypemst rct ON rct.id = co.connecterTypeID  \n" +
      " 		LEFT JOIN component_last_external_apicall clea ON clea.refComponentID = co.id  \n" +
      " 		LEFT JOIN mfgcodeMst su ON su.id = clea.supplierId  \n" +
      " 		JOIN uoms u ON u.id = co.uom  \n" +
      " 		LEFT JOIN component_mslmst cmsl ON cmsl.id = co.mslID  \n" +
      "		left join rfq_packagecasetypemst pct ON pct.id = co.partPackageID  \n" +
      "        LEFT JOIN users usr ON usr.id = co.activityStartBy  \n" +
      "        left join rfq_assy_typemst rat ON rat.id = co.assemblyType  \n" +
      " 		LEFT JOIN component_packagingmst pck ON pck.id = co.packagingID  \n" +
      "        LEFT JOIN acct_acctmst am ON am.acct_id = co.salesacctId  \n" +
      "        LEFT JOIN acct_acctmst aam ON aam.acct_id = co.purchaseacctId  \n" +
      "		left JOIN vu_component_standard vucomstd ON vucomstd.componentID = co.id  \n" +
      "        left JOIN vu_emp_detail vuempcre ON vuempcre.id = co.createdBy  \n" +
      "        left JOIN vu_emp_detail vuempupd ON vuempupd.id = co.updatedBy  \n" +
      "        left JOIN roles rc ON rc.id = co.createByRoleId  \n" +
      "        left JOIN roles ru ON ru.id = co.updateByRoleId  \n" +
      "        left join vu_rfq_assembly_detail vurfass on vurfass.partId = co.id  \n" +
      "        left join vu_rfq_lineitem_count vurline on vurline.partId = co.id  \n" +
      "        left join vu_sub_assembly_count vusac on vusac.partId = co.id\");  \n" +
      "    IF pIsMFG = FALSE THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
      "			JOIN mfgcodemst mfc ON mfc.id = co.refMfgPNMfgCodeId  \n" +
      "            JOIN COMPONENT vu_co on vu_co.id = co.refSupplierMfgpnComponentID \");  \n" +
      "	END IF;  \n" +
      "	SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
      "    WHERE co.isdeleted = 0 \");  \n" +
      "  \n" +
      "	IF pIsMFG = TRUE THEN  \n" +
      "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''MFG'' ');  \n" +
      "    ELSE  \n" +
      "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''DIST'' ');  \n" +
      "    END IF;  \n" +
      "  \n" +
      "	IF (pMultiplePartFilterFieldName IS NOT NULL AND pMultiplePartByUploadFileDetail IS NOT NULL AND pMultiplePartByUploadFileDetail != '')  \n" +
      "    THEN  \n" +
      "		IF(pMultiplePartFilterFieldName = 'SystemID')  \n" +
      "        THEN  \n" +
      "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.serialNumber IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
      "		ELSEIF(pMultiplePartFilterFieldName = 'PID Code')  \n" +
      "        THEN  \n" +
      "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.PIDCode IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
      "		ELSE  \n" +
      "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgPN IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
      "        END IF;  \n" +
      "    END IF;  \n" +
      "	IF (pOrderBy IS NOT NULL) THEN  \n" +
      "		IF pComponentOrdering = 'MFG' THEN  \n" +
      "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
      "				SET pOrderBy = CONCAT(\"MFGCode asc, \" , pOrderBy);  \n" +
      "            END IF;  \n" +
      "		ELSEIF pComponentOrdering = 'MFGPN' THEN  \n" +
      "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
      "				SET pOrderBy = CONCAT(\"mfgPN asc, \" , pOrderBy);  \n" +
      "			END IF;  \n" +
      "		ELSEIF pComponentOrdering = 'USAGE' THEN  \n" +
      "			SET pOrderBy = CONCAT(\"partUsage desc, \" , pOrderBy);  \n" +
      "		ELSEIF pComponentOrdering = 'STOCK' THEN  \n" +
      "			SET pOrderBy = CONCAT(\"partStock desc, \" , pOrderBy);  \n" +
      "		END IF;  \n" +
      "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
      "	ELSE  \n" +
      "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
      "		SET pWhereClause = '1=1' ;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
      "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
      "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
      "	ELSE  \n" +
      "		SET rowNumWhere = '';  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN  \n" +
      "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgcodeID in (', pMfgCodeIDs, ' )');  \n" +
      "    END IF;  \n" +
      "    IF (pMfgCodeIdsForSupplierParts IS NOT NULL AND pMfgCodeIdsForSupplierParts != '') THEN  \n" +
      "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.refMfgPNMfgCodeId in (', pMfgCodeIdsForSupplierParts, ' )');  \n" +
      "    END IF;  \n" +
      "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packagingID in (', pPackagingIDs, ' )');  \n" +
      "    END IF;  \n" +
      "    IF (pPackageIDs IS NOT NULL AND pPackageIDs != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partPackageID in (', pPackageIDs, ' )');  \n" +
      "    END IF;  \n" +
      "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partStatus in (', pPartStatusIDs, ' )');  \n" +
      "    END IF;  \n" +
      "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeID in (', pMountingTypeIDs, ' )');  \n" +
      "    END IF;  \n" +
      "    IF (pExternalMountingTypeValues IS NOT NULL AND pExternalMountingTypeValues != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeText in (', pExternalMountingTypeValues, ' )');  \n" +
      "    END IF;  \n" +
      "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryID in (', pFunctionalTypeIDs, ' )');  \n" +
      "    END IF;  \n" +
      "    IF (pExternalFunctionalTypeValues IS NOT NULL AND pExternalFunctionalTypeValues != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryText in (', pExternalFunctionalTypeValues, ' )');  \n" +
      "    END IF;  \n" +
      "    IF (pMultiplePartNumbers IS NOT NULL AND pMultiplePartNumbers != '') THEN  \n" +
      "		IF pIsMFG = TRUE THEN  \n" +
      "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
      "																OR exists (select 1 from component_otherpn cp  \n" +
      "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
      "																)');  \n" +
      "		ELSE  \n" +
      "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
      "																OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID  \n" +
      "																and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
      "                                                                and cc.mfgpn in (', pMultiplePartNumbers, '))  \n" +
      "                                                                OR exists (select 1 from component_otherpn cp  \n" +
      "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
      "                                                                )');  \n" +
      "        END IF;  \n" +
      "    END IF;  \n" +
      "    IF (pPartTypeIDs IS NOT NULL AND pPartTypeIDs != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partType in (', pPartTypeIDs, ' )');  \n" +
      "    END IF;  \n" +
      "    IF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '' AND  \n" +
      "		pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' ) and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
      "	ELSEIF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' )) ');  \n" +
      "	ELSEIF (pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
      "    END IF;  \n" +
      "  \n" +
      "    IF (pAssemblyIds IS NOT NULL AND pAssemblyIds != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
      "															or exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
      "															or exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and rl.partID in (', pAssemblyIds, '))) ');  \n" +
      "    END IF;  \n" +
      "  \n" +
      "    IF (pAssemblyTypeIds IS NOT NULL AND pAssemblyTypeIds != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.assemblyType in (', pAssemblyTypeIds, ' )');  \n" +
      "    END IF;  \n" +
      "  \n" +
      "    IF (pRohsIds IS NOT NULL AND pRohsIds != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.RoHSStatusID in (', pRohsIds, ' )');  \n" +
      "    END IF;  \n" +
      "  \n" +
      "    IF (pExternalRoHSStatusListValues IS NOT NULL AND pExternalRoHSStatusListValues != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsText in (', pExternalRoHSStatusListValues, ' )');  \n" +
      "    END IF;  \n" +
      "  \n" +
      "    IF pIsReversal = TRUE THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isReversal = true');  \n" +
      "    END IF;  \n" +
      "    IF pIsCPN = TRUE THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isCPN = true');  \n" +
      "    END IF;  \n" +
      "    IF pIsCustom = TRUE THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isCustom = true');  \n" +
      "    END IF;  \n" +
      "    IF pIsBOMActivityStarted = TRUE THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isActivityStart = true');  \n" +
      "    END IF;  \n" +
      "    IF pIsOperatingTemperatureBlank = TRUE THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.operatingTemp is not null and co.operatingTemp != \"\" and (co.minOperatingTemp is null or co.maxOperatingTemp is null) ');  \n" +
      "    END IF;  \n" +
      "  \n" +
      "    IF pObsoleteDate IS NOT NULL THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, \" AND co.obsoleteDate >= '\",pObsoleteDate,\"'\");  \n" +
      "    END IF;  \n" +
      "  \n" +
      "    IF pIsProductionPNEmpty = TRUE THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.productionPN is null ');  \n" +
      "    END IF;  \n" +
      "  \n" +
      "    IF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NOT NULL) THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
      "    ELSEIF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NULL) THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" ');  \n" +
      "    ELSEIF(pToCreatedOnDate IS NOT NULL AND pFromCreatedOnDate IS NULL) THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
      "    END IF;  \n" +
      "  \n" +
      "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause, ' AND identicalPNCount > 1 ');  \n" +
      "    END IF;  \n" +
      "  \n" +
      "    IF (pOperationalAttributeIds IS NOT NULL AND pOperationalAttributeIds != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_dynamic_attribute_mapping_part cd  \n" +
      "													   where cd.mfgPNID=co.id and cd.isdeleted=false  \n" +
      "														 and cd.deletedat is null  \n" +
      "                                                         and cd.attributeID in (',pOperationalAttributeIds,'))');  \n" +
      "    END IF;  \n" +
      "  \n" +
      "    IF (pDisapprovedSupplierIds IS NOT NULL AND pDisapprovedSupplierIds != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_approved_supplier_mst cd  \n" +
      "													   where cd.partID = co.id and cd.isdeleted=false  \n" +
      "														 and cd.deletedat is null  \n" +
      "                                                         and cd.supplierID in (',pDisapprovedSupplierIds,'))');  \n" +
      "    END IF;  \n" +
      "  \n" +
      "    IF (pAcceptableShippingCountryIds IS NOT NULL AND pAcceptableShippingCountryIds != '') THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_acceptable_shipping_countries ca  \n" +
      "														  where ca.isdeleted = false  \n" +
      "															and ca.deletedat is null  \n" +
      "															and ca.refComponentID = co.id  \n" +
      "															and ca.countryID in (',pAcceptableShippingCountryIds,'))');  \n" +
      "    END IF;  \n" +
      "  \n" +
      "    IF (pIsRestrictUSEwithpermission = TRUE OR pIsRestrictPackagingUseWithpermission = TRUE OR pIsRestrictUsePermanently = TRUE OR pIsRestrictPackagingUsePermanently = TRUE)  \n" +
      "    THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (');  \n" +
      "        SET @restricStatement = '';  \n" +
      "		IF pIsRestrictUSEwithpermission = TRUE THEN  \n" +
      "			SET @restricStatement =  ' co.restrictUSEwithpermission = true ';  \n" +
      "		END IF;  \n" +
      "  \n" +
      "		IF pIsRestrictPackagingUseWithpermission = TRUE THEN  \n" +
      "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUseWithpermission = true ');  \n" +
      "		END IF;  \n" +
      "		IF pIsRestrictUsePermanently = TRUE THEN  \n" +
      "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END),  ' co.restrictUsePermanently = true ');  \n" +
      "		END IF;  \n" +
      "		IF pIsRestrictPackagingUsePermanently = TRUE THEN  \n" +
      "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUsePermanently = true ');  \n" +
      "		END IF;  \n" +
      "        SET @SQLStatement1 = CONCAT(@SQLStatement1, @restricStatement, ')');  \n" +
      "    END IF;  \n" +
      "	IF (pAttributesSearchHeader IS NOT NULL AND pAttributesSearchHeader != '') THEN  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
      "																		AND isdeleted = 0  \n" +
      "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
      "																		AND isdeleted = 0  \n" +
      "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.minOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.maxOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientValue like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfPosition like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfRows like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.length like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.width like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.height like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
      "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', pAttributesSearchHeader, '%'' )) ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN like ''%', pAttributesSearchHeader, '%'' ');  \n" +
      "          IF pIsMFG = FALSE THEN  \n" +
      "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc  \n" +
      "																			where cc.id = co.refSupplierMfgpnComponentID  \n" +
      "                                                                            and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
      "                                                                            and cc.mfgPN like ''%', pAttributesSearchHeader, '%'' )  \n" +
      "														      OR exists (select 1 from component_otherpn cp where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.refSupplierMfgpnComponentID and cp.name like (''%', pAttributesSearchHeader, '%'' ))  \n" +
      "																		');  \n" +
      "          END IF;  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' )');  \n" +
      "    END IF;  \n" +
      "  \n" +
      "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN  \n" +
      "		SET attributeSearchString = pAttributesSearch;  \n" +
      "       do_this:  \n" +
      "	  LOOP  \n" +
      "		SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
      "		SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, ',', 1);  \n" +
      "		SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
      "		SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+2), attributeSearchLength);  \n" +
      "  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
      "																		AND isdeleted = 0  \n" +
      "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
      "  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
      "																		AND  isdeleted = 0  \n" +
      "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.minOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.maxOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.temperatureCoefficientValue)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfPosition)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfRows)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.length)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.width)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.height)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
      "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
      "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ) ');  \n" +
      "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' )');  \n" +
      "          /*IF pIsMFG = FALSE THEN  \n" +
      "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID and cc.mfgPN like ''%', attributeSearchChip, '%'' )');  \n" +
      "          END IF;  */  \n" +
      "		IF attributeSearchString = NULL OR attributeSearchString = \"\" THEN  \n" +
      "		  LEAVE do_this;  \n" +
      "		END IF;  \n" +
      "	  END LOOP do_this;  \n" +
      "    END IF;  \n" +
      "  \n" +
      "    IF (pPackagingAlias IS NOT NULL AND pPackagingAlias != '') THEN  \n" +
      "		IF (pPackagingAlias = '1') THEN  \n" +
      "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is not null ');  \n" +
      "		ELSE  \n" +
      "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is null ');  \n" +
      "		END IF;  \n" +
      "	END IF;  \n" +
      "		IF (pAlternatePart IS NOT NULL AND pAlternatePart != '') THEN  \n" +
      "			IF (pAlternatePart = '1') THEN  \n" +
      "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
      "			ELSE  \n" +
      "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
      "			END IF;  \n" +
      "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 1 and ca.isDeleted = 0) ');  \n" +
      "		END IF;  \n" +
      "		IF (pRoHSAlternatePart IS NOT NULL AND pRoHSAlternatePart != '') THEN  \n" +
      "			IF (pRoHSAlternatePart = '1') THEN  \n" +
      "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
      "			ELSE  \n" +
      "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
      "			END IF;  \n" +
      "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 6 and ca.isDeleted = 0) ');  \n" +
      "		END IF;  \n" +
      "  \n" +
      "        IF (pPartUsedInAssembly IS NOT NULL AND pPartUsedInAssembly != '') THEN  \n" +
      "			SET vPartUsedInAssemblyExists = \" \";  \n" +
      "            SET vPartUsedInAssemblyAndOR = \" \";  \n" +
      "			IF (pPartUsedInAssembly = '1') THEN  \n" +
      "				SET vPartUsedInAssemblyExists = \" \";  \n" +
      "				SET vPartUsedInAssemblyAndOR = \" OR \";  \n" +
      "			ELSEIF (pPartUsedInAssembly = '2') THEN  \n" +
      "				SET vPartUsedInAssemblyExists = \" NOT \";  \n" +
      "				SET vPartUsedInAssemblyAndOR = \" AND \";  \n" +
      "            END IF;  \n" +
      "				SET @SQLStatement1 = CONCAT(@SQLStatement1, 'AND co.category = 2  \n" +
      "															AND ( ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
      "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
      "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and exists (select 1 from component c where c.id = rl.partid and c.partStatus = 1))) ');  \n" +
      "  \n" +
      "		END IF;  \n" +
      "  \n" +
      "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause,\" and c.partStock >= \", pStockQuantity);  \n" +
      "	END IF;  \n" +
      "   IF pIsExportControl = 1 THEN  \n" +
      "		SET pWhereClause = CONCAT(pWhereClause,' ',' and c.isExportControl = \"Yes\" ');  \n" +
      "   END IF;  \n" +
      "	IF pIsExcludeIncorrectPart = TRUE THEN  \n" +
      "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isGoodPart in (1,3) ');  \n" +
      "	END IF;  \n" +
      "    DROP TEMPORARY TABLE IF EXISTS tempComponentListData;  \n" +
      "  \n" +
      "    SET @SQLStatement2 = CONCAT(\"create temporary table tempComponentListData  \n" +
      "    select count(1) over(partition by c.mfgType) as totalCount,c.*,  \n" +
      "        fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,  \n" +
      " 		fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue,  \n" +
      "        fun_ApplyCommonDateTimeFormatByParaValue(c.updatedAtApi,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtApiValue  \n" +
      "									from ( \", @SQLStatement1,\" ) c  \n" +
      "		where \", pWhereClause , \" \", pOrderBy , rowNumWhere);  \n" +
      "    /*main query create temp table*/  \n" +
      "	PREPARE query1 FROM @SQLStatement2;  \n" +
      "	EXECUTE query1;  \n" +
      "	DEALLOCATE PREPARE query1;  \n" +
      "  /* to get total count of rows */  \n" +
      "	-- SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where \", pWhereClause);  \n" +
      "    SET @SQLStatement2 = CONCAT(\" SELECT totalCount from tempComponentListData limit 1\");  \n" +
      "	PREPARE query1 FROM @SQLStatement2;  \n" +
      "	EXECUTE query1;  \n" +
      "	DEALLOCATE PREPARE query1;  \n" +
      "  \n" +
      "	/*PREPARE query2 FROM @SQLStatement2;  \n" +
      "	EXECUTE query2;  \n" +
      "	DEALLOCATE PREPARE query2;  */  \n" +
      "	SET @SQLStatement2 = CONCAT(\" select * from tempComponentListData\");  \n" +
      "    /*main query create temp table*/  \n" +
      "	PREPARE query1 FROM @SQLStatement2;  \n" +
      "	EXECUTE query1;  \n" +
      "	DEALLOCATE PREPARE query1;  \n" +
      "  \n" +
      "  \n" +
      "	IF pIsRefreshMasterFilters = TRUE THEN  \n" +
      "		SET @SQLStatement2 = CONCAT(\" SELECT mfgCodeID as mfgcodeID, mfgCode, manufacturerName as mfgName, mfgDisplayOrder,  \n" +
      "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
      "											packagingID,packagingName, packagingDisplayOrder,  \n" +
      "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
      "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
      "											partType,categoryName,  \n" +
      "											functionalCategoryText,  \n" +
      "											mountingTypeText,  \n" +
      "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
      "											  rohsText,  \n" +
      "                                            AliasMFGCodeID,  \n" +
      "                                            AliasMFGCode,  \n" +
      "                                            AliasMFGName,  \n" +
      "                                            AliasMFGDisplayOrder,  \n" +
      "                                            packageCaseTypeValue,  \n" +
      "                                            partPackageID  \n" +
      "										from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\"  \n" +
      "                                        group by mfgCodeID, mfgCode, manufacturerName , mfgDisplayOrder,  \n" +
      "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
      "											packagingID,packagingName, packagingDisplayOrder,  \n" +
      "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
      "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
      "											partType,categoryName,  \n" +
      "											functionalCategoryText,  \n" +
      "											mountingTypeText,  \n" +
      "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
      "											  rohsText,  \n" +
      "                                            AliasMFGCodeID,  \n" +
      "                                            AliasMFGCode,  \n" +
      "                                            AliasMFGName,  \n" +
      "                                            AliasMFGDisplayOrder,  \n" +
      "                                            packageCaseTypeValue,  \n" +
      "                                            partPackageID\");  \n" +
      "		 PREPARE query3 FROM @SQLStatement2;  \n" +
      "		EXECUTE query3;  \n" +
      "		DEALLOCATE PREPARE query3;  \n" +
      "  \n" +
      "        /*SET @SQLStatement2 = CONCAT(\" with cte as ( SELECT id from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\" )  \n" +
      "									select * from  \n" +
      "										(select case when stdc.classID is not null then  \n" +
      "													concat(cs.certificateStandardID,':',stdc.classID)  \n" +
      "													else cs.certificateStandardID end certificateStandardID,  \n" +
      "												case when stdc.classID is not null then  \n" +
      "													concat(cs.fullName,' ',stdc.classname)  \n" +
      "													else cs.fullName end fullName,  \n" +
      "												cs.displayOrder  \n" +
      "										  from certificate_standards cs  \n" +
      "										  join component_standard_details csd on csd.certificateStandardID = cs.certificateStandardID  \n" +
      "										  left join standard_class stdc on csd.ClassID = stdc.classID  \n" +
      "										where csd.isDeleted = 0 and csd.deletedAt is null and csd.componentID in (select id from cte)  \n" +
      "										) a group by certificateStandardID, fullName, displayOrder  \n" +
      "										order by displayOrder,fullName\");  \n" +
      "		PREPARE query3 FROM @SQLStatement2;  \n" +
      "		EXECUTE query3;  \n" +
      "		DEALLOCATE PREPARE query3;  */  \n" +
      "  \n" +
      "        /*SET @SQLStatement2 = CONCAT(\" select distinct cm.countryID, cm.countryName  \n" +
      "					  from component_acceptable_shipping_countries casc  \n" +
      "					  join countrymst cm ON cm.countryid = casc.countryid  \n" +
      "					 where casc.isdeleted = false  \n" +
      "					   and casc.deletedat is null  \n" +
      "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
      "									where c.id = casc.refComponentID and \", pWhereClause,\" )  \n" +
      "                                    order by cm.countryName\");  \n" +
      "		PREPARE query3 FROM @SQLStatement2;  \n" +
      "		EXECUTE query3;  \n" +
      "		DEALLOCATE PREPARE query3;  */  \n" +
      "  \n" +
      "         /*SET @SQLStatement2 = CONCAT(\" select distinct cda.id, cda.attributeName  \n" +
      "					  from component_dynamic_attribute_mapping_part cdam  \n" +
      "					  join component_dynamic_attribute cda ON cda.id = cdam.attributeID  \n" +
      "					 where cdam.isdeleted = false  \n" +
      "					   and cdam.deletedat is null  \n" +
      "					   and cda.isdeleted = false  \n" +
      "					   and cda.deletedat is null  \n" +
      "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
      "                                     where c.id = cdam.mfgPNID and \", pWhereClause,\" )  \n" +
      "                                     order by cda.attributeName\");  \n" +
      "		PREPARE query3 FROM @SQLStatement2;  \n" +
      "		EXECUTE query3;  \n" +
      "		DEALLOCATE PREPARE query3;  */  \n" +
      "    END IF;  \n" +
      "  \n" +
      "		IF (pIsSearchFromHeader = TRUE) THEN  \n" +
      "			/*Fetch Functional Type and Mounting Type wise grouping*/  \n" +
      "			SET @SQLStatement2 = CONCAT(\" select concat(functionalCategoryName,' - ',mountingTypeName) groupName,  \n" +
      "											null groupNameText,  \n" +
      "											functionalCategoryID, mountingTypeID,  \n" +
      "											count(1) recCount  \n" +
      "											from ( \",@SQLStatement1,\" ) c where \", pWhereClause,  \n" +
      "										' group by functionalCategoryName,mountingTypeName,  \n" +
      "													functionalCategoryID, mountingTypeID  \n" +
      "											order by groupName, groupNameText, recCount desc');  \n" +
      "  \n" +
      "            PREPARE query3 FROM @SQLStatement2;  \n" +
      "			EXECUTE query3;  \n" +
      "			DEALLOCATE PREPARE query3;  \n" +
      "        END IF;  \n" +
      "END;  \n" +
  /* **************************** Add Script Version -> 17-02-2022 *********************************** */
      "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Component_History` ;  \n" +
      "CREATE TRIGGER `Trg_AU_Component_History` AFTER UPDATE ON `component`  \n" +
      "    FOR EACH ROW BEGIN  \n" +
      "	DECLARE pOldValue TEXT;  \n" +
      "	DECLARE pNewValue TEXT;  \n" +
      "    DECLARE pLabelValue TEXT;  \n" +
      "  \n" +
      "	IF IFNULL(OLD.mfgPN,\"\") != IFNULL(NEW.mfgPN,\"\") THEN  \n" +
      "		SELECT IFNULL(`mfgType`, '') INTO `pLabelValue`  \n" +
      "		FROM mfgcodemst  \n" +
      "		WHERE id =NEW.mfgcodeID  \n" +
      "		ORDER BY id DESC LIMIT 1;  \n" +
      "        SET pLabelValue = (SELECT CASE WHEN pLabelValue = 'DIST' THEN 'Supplier PN' ELSE 'MFR PN' END);  \n" +
      "  \n" +
      "       INSERT INTO Component_History  \n" +
      "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
      "		Oldval, 			Newval, 			createdBy,  \n" +
      "		createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	VALUES(NEW.id,				'component',			pLabelValue,  \n" +
      "		CAST(OLD.mfgPN AS CHAR),	CAST(NEW.mfgPN AS CHAR),	 OLD.createdBy,  \n" +
      "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPN'));  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.productionPN,\"\") != IFNULL(NEW.productionPN,\"\") THEN  \n" +
      "       INSERT INTO Component_History  \n" +
      "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
      "		Oldval, 			Newval, 			createdBy,  \n" +
      "		createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	VALUES(NEW.id,				'component',			'Production PN',  \n" +
      "		CAST(OLD.productionPN AS CHAR),	CAST(NEW.productionPN AS CHAR),	 OLD.createdBy,  \n" +
      "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','productionPN'));  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
      "	IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
      "		SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
      "		FROM mfgcodemst  \n" +
      "		WHERE id =OLD.mfgcodeID  \n" +
      "		ORDER BY id DESC LIMIT 1;  \n" +
      "	END IF;  \n" +
      "	IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
      "		SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
      "		FROM mfgcodemst  \n" +
      "		WHERE id =NEW.mfgcodeID  \n" +
      "		ORDER BY id DESC LIMIT 1;  \n" +
      "	END IF;  \n" +
      "       INSERT INTO Component_History  \n" +
      "		(refComponentID,                tableName,                 	Colname,  \n" +
      "		Oldval, 			Newval, 			createdBy,  \n" +
      "		createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "       VALUES(NEW.id,				'component',			'MFR Code',  \n" +
      "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.mfgPNDescription,\"\") != IFNULL(NEW.mfgPNDescription,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Description',  \n" +
      "			CAST(OLD.mfgPNDescription AS CHAR),	CAST(NEW.mfgPNDescription AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPNDescription'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.packageQty,\"\") != IFNULL(NEW.packageQty,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'MFR SPQ',  \n" +
      "			CAST(OLD.packageQty AS CHAR),	CAST(NEW.packageQty AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'sixdigitunitprice');  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.umidSPQ,\"\") != IFNULL(NEW.umidSPQ,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'UMID SPQ',  \n" +
      "			CAST(OLD.umidSPQ AS CHAR),	CAST(NEW.umidSPQ AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'sixdigitunitprice');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.ltbDate,\"\") != IFNULL(NEW.ltbDate,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'LTB Date',  \n" +
      "			CAST(DATE(OLD.ltbDate) AS CHAR),	CAST(DATE(NEW.ltbDate) AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','ltbDate'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.RoHSStatusID,\"\") != IFNULL(NEW.RoHSStatusID,\"\") THEN  \n" +
      "		IF OLD.RoHSStatusID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
      "			FROM rfq_rohsmst  \n" +
      "			WHERE id =OLD.RoHSStatusID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.RoHSStatusID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
      "			FROM rfq_rohsmst  \n" +
      "			WHERE id =NEW.RoHSStatusID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'RoHS Status',  \n" +
      "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.packaginggroupID,\"\") != IFNULL(NEW.packaginggroupID,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Packaging Group',  \n" +
      "			CAST(OLD.packaginggroupID AS CHAR),	CAST(NEW.packaginggroupID AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','packaginggroupID'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.isDeleted,\"\") != IFNULL(NEW.isDeleted,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Deleted',  \n" +
      "			NULL,				OLD.mfgPN,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPN'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.PIDCode,\"\") != IFNULL(NEW.PIDCode,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'PID Code',  \n" +
      "			CAST(OLD.PIDCode AS CHAR),	CAST(NEW.PIDCode AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','PIDCode'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.isGoodPart,\"\") != IFNULL(NEW.isGoodPart,\"\") THEN  \n" +
      "		IF OLD.isGoodPart IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.isGoodPart = 1 THEN  \n" +
      "										'Correct Part'  \n" +
      "								WHEN OLD.isGoodPart = 2 THEN  \n" +
      "										'Incorrect Part'  \n" +
      "								WHEN OLD.isGoodPart = 3 THEN  \n" +
      "										'TBD Part'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.isGoodPart IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.isGoodPart = 1 THEN  \n" +
      "										'Correct Part'  \n" +
      "								WHEN NEW.isGoodPart = 2 THEN  \n" +
      "										'Incorrect Part'  \n" +
      "								WHEN NEW.isGoodPart = 3 THEN  \n" +
      "										'TBD Part'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Correct Part',  \n" +
      "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.rohsgroupID,\"\") != IFNULL(NEW.rohsgroupID,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'RoHS Group',  \n" +
      "			CAST(OLD.rohsgroupID AS CHAR),	CAST(NEW.rohsgroupID AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rohsgroupID'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.leadTime,\"\") != IFNULL(NEW.leadTime,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Standard Lead Time',  \n" +
      "			CAST(OLD.leadTime AS CHAR),	CAST(NEW.leadTime AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','leadTime'));  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	/*IF IFNULL(OLD.packaging,\"\") != IFNULL(NEW.packaging,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby)  \n" +
      "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
      "			CAST(OLD.packaging AS CHAR),	CAST(NEW.packaging AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
      "	END IF;*/  \n" +
      "	IF IFNULL(OLD.noOfPosition,\"\") != IFNULL(NEW.noOfPosition,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Pin Count',  \n" +
      "			CAST(OLD.noOfPosition AS CHAR),	CAST(NEW.noOfPosition AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfPosition'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.countryOfOrigin,\"\") != IFNULL(NEW.countryOfOrigin,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Country Of Origin',  \n" +
      "			CAST(OLD.countryOfOrigin AS CHAR),	CAST(NEW.countryOfOrigin AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','countryOfOrigin'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.uom,\"\") != IFNULL(NEW.uom,\"\") THEN  \n" +
      "		IF OLD.uom IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
      "			FROM uoms  \n" +
      "			WHERE id =OLD.uom  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.uom IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
      "			FROM uoms  \n" +
      "			WHERE id =NEW.uom  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'UOM',  \n" +
      "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.mountingTypeID,\"\") != IFNULL(NEW.mountingTypeID,\"\") THEN  \n" +
      "		IF OLD.mountingTypeID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
      "			FROM rfq_mountingtypemst  \n" +
      "			WHERE id =OLD.mountingTypeID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.mountingTypeID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
      "  \n" +
      "			FROM rfq_mountingtypemst  \n" +
      "			WHERE id =NEW.mountingTypeID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Mounting Type',  \n" +
      "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.partPackage,\"\") != IFNULL(NEW.partPackage,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Package/ Case (Shape) (External)',  \n" +
      "			CAST(OLD.partPackage AS CHAR),	CAST(NEW.partPackage AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','partPackage'));  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.partPackageID,\"\") != IFNULL(NEW.partPackageID,\"\") THEN  \n" +
      "		IF OLD.partPackageID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
      "			FROM rfq_packagecasetypemst  \n" +
      "			WHERE id =OLD.partPackageID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.partPackageID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
      "			FROM rfq_packagecasetypemst  \n" +
      "			WHERE id =NEW.partPackageID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Package/Case (Shape)',  \n" +
      "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.deviceMarking,\"\") != IFNULL(NEW.deviceMarking,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Device Marking',  \n" +
      "			CAST(OLD.deviceMarking AS CHAR),	CAST(NEW.deviceMarking AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','deviceMarking'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.minimum,\"\") != IFNULL(NEW.minimum,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Min',  \n" +
      "			CAST(OLD.minimum AS CHAR),	CAST(NEW.minimum AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','minimum'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.mult,\"\") != IFNULL(NEW.mult,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Mult',  \n" +
      "			CAST(OLD.mult AS CHAR),		CAST(NEW.mult AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mult'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.uomText,\"\") != IFNULL(NEW.uomText,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'UOM (External)',  \n" +
      "			CAST(OLD.uomText AS CHAR),	CAST(NEW.uomText AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','uomText'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.htsCode,\"\") != IFNULL(NEW.htsCode,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'HTS Code',  \n" +
      "			CAST(OLD.htsCode AS CHAR),	CAST(NEW.htsCode AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','htsCode'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.category,\"\") != IFNULL(NEW.category,\"\") THEN  \n" +
      "		IF OLD.category IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
      "			FROM rfq_partcategory  \n" +
      "			WHERE id =OLD.category  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.category IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
      "			FROM rfq_partcategory  \n" +
      "			WHERE id =NEW.category  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Part Category',  \n" +
      "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.rohsText,\"\") != IFNULL(NEW.rohsText,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'RoHS (External)',  \n" +
      "			CAST(OLD.rohsText AS CHAR),	CAST(NEW.rohsText AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rohsText'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.dataSheetLink,\"\") != IFNULL(NEW.dataSheetLink,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Data Sheet Link (Set Default)',  \n" +
      "			CAST(OLD.dataSheetLink AS CHAR),	CAST(NEW.dataSheetLink AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','dataSheetLink'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.replacementPartID,\"\") != IFNULL(NEW.replacementPartID,\"\") THEN  \n" +
      "		IF OLD.replacementPartID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
      "			FROM COMPONENT  \n" +
      "			WHERE id =OLD.replacementPartID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.replacementPartID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
      "			FROM COMPONENT  \n" +
      "			WHERE id =NEW.replacementPartID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Corrected Part',  \n" +
      "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.eolDate,\"\") != IFNULL(NEW.eolDate,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'EOL Date',  \n" +
      "			CAST(DATE(OLD.eolDate) AS CHAR),	CAST(DATE(NEW.eolDate) AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','eolDate'));  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.reversalDate,\"\") != IFNULL(NEW.reversalDate,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Reversal Date',  \n" +
      "			CAST(DATE(OLD.reversalDate) AS CHAR),	CAST(DATE(NEW.reversalDate) AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','reversalDate'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.value,\"\") != IFNULL(NEW.value,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Value',  \n" +
      "			CAST(OLD.value AS CHAR),	CAST(NEW.value AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','value'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.tolerance,\"\") != IFNULL(NEW.tolerance,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Tolerance',  \n" +
      "			CAST(OLD.tolerance AS CHAR),	CAST(NEW.tolerance AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','tolerance'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.minOperatingTemp,\"\") != IFNULL(NEW.minOperatingTemp,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Min Operating Temperature',  \n" +
      "			CAST(OLD.minOperatingTemp AS CHAR),	CAST(NEW.minOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','minOperatingTemp'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.maxOperatingTemp,\"\") != IFNULL(NEW.maxOperatingTemp,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Max Operating Temperature',  \n" +
      "			CAST(OLD.maxOperatingTemp AS CHAR),	CAST(NEW.maxOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','maxOperatingTemp'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.functionalCategoryID,\"\") != IFNULL(NEW.functionalCategoryID,\"\") THEN  \n" +
      "		IF OLD.functionalCategoryID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`partTypeName`, '') INTO `pOldValue`  \n" +
      "			FROM rfq_parttypemst  \n" +
      "			WHERE id =OLD.functionalCategoryID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.functionalCategoryID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`partTypeName`, '') INTO `pNewValue`  \n" +
      "			FROM rfq_parttypemst  \n" +
      "			WHERE id =NEW.functionalCategoryID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Functional Type',  \n" +
      "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.weight,\"\") != IFNULL(NEW.weight,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Weight',  \n" +
      "			CAST(OLD.weight AS CHAR),	CAST(NEW.weight AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','weight'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.length,\"\") != IFNULL(NEW.length,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Length',  \n" +
      "			CAST(OLD.length AS CHAR),	CAST(NEW.length AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.width,\"\") != IFNULL(NEW.width,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Width',  \n" +
      "			CAST(OLD.width AS CHAR),	CAST(NEW.width AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.height,\"\") != IFNULL(NEW.height,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Height',  \n" +
      "			CAST(OLD.height AS CHAR),	CAST(NEW.height AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.saftyStock,\"\") != IFNULL(NEW.saftyStock,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Min. Count(Qty) (Safety Stock)',  \n" +
      "			CAST(OLD.saftyStock AS CHAR),	CAST(NEW.saftyStock AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','saftyStock'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.specialNote,\"\") != IFNULL(NEW.specialNote,\"\") THEN  \n" +
      "		INSERT INTO common_longtext_history  \n" +
      "			(refTransId,				Colname,				Oldval,  \n" +
      "			 Newval,					valueDataType,				Tablename,  \n" +
      "			 createdBy,  				createdAt,  			updatedAt, 			Updatedby,  \n" +
      "			createByRoleId,		updateByRoleId )  \n" +
      "		 VALUES(NEW.id,					'Special Note',			CAST(OLD.specialNote AS CHAR),  \n" +
      "				 CAST(NEW.specialNote AS CHAR),	 	fun_getDataTypeBasedOnTableAndColumnName('component', 'specialNote'), 'component',  \n" +
      "				 OLD.createdBy,  			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "				OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.heightText,\"\") != IFNULL(NEW.heightText,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Height - Seated (Max)',  \n" +
      "			CAST(OLD.heightText AS CHAR),	CAST(NEW.heightText AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','heightText'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.partStatus,\"\") != IFNULL(NEW.partStatus,\"\") THEN  \n" +
      "		IF OLD.partStatus IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
      "			FROM component_partstatusmst  \n" +
      "			WHERE id = OLD.partStatus  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.partStatus IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
      "			FROM component_partstatusmst  \n" +
      "			WHERE id = NEW.partStatus  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Part Status',  \n" +
      "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.partStatusText,\"\") != IFNULL(NEW.partStatusText,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Status (External)',  \n" +
      "			CAST(OLD.partStatusText AS CHAR),	CAST(NEW.partStatusText AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','partStatusText'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.isPIDManual,\"\") != IFNULL(NEW.isPIDManual,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'PID Manual',  \n" +
      "			CAST(OLD.isPIDManual AS CHAR),	CAST(NEW.isPIDManual AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','isPIDManual'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.feature,\"\") != IFNULL(NEW.feature,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Feature',  \n" +
      "			CAST(OLD.feature AS CHAR),	CAST(NEW.feature AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','feature'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.functionalCategoryText,\"\") != IFNULL(NEW.functionalCategoryText,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Functional Type (External)',  \n" +
      "			CAST(OLD.functionalCategoryText AS CHAR),	CAST(NEW.functionalCategoryText AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','functionalCategoryText'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.mountingTypeText,\"\") != IFNULL(NEW.mountingTypeText,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Mounting Type (External)',  \n" +
      "			CAST(OLD.mountingTypeText AS CHAR),	CAST(NEW.mountingTypeText AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mountingTypeText'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.maxPriceLimit,\"\") != IFNULL(NEW.maxPriceLimit,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Max. Price Limit',  \n" +
      "			CAST(OLD.maxPriceLimit AS CHAR),	CAST(NEW.maxPriceLimit AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'amount');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.selfLifeDays,\"\") != IFNULL(NEW.selfLifeDays,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Self Life Days',  \n" +
      "			CAST(OLD.selfLifeDays AS CHAR),	CAST(NEW.selfLifeDays AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','selfLifeDays'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.isCustom,\"\") != IFNULL(NEW.isCustom,\"\") THEN  \n" +
      "		IF OLD.isCustom IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.isCustom = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.isCustom = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.isCustom IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.isCustom = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.isCustom = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Custom MFG Part',  \n" +
      "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.rev,\"\") != IFNULL(NEW.rev,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Rev',  \n" +
      "			CAST(OLD.rev AS CHAR),		CAST(NEW.rev AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rev'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.mslID,\"\") != IFNULL(NEW.mslID,\"\") THEN  \n" +
      "		IF OLD.mslID IS NOT NULL THEN  \n" +
      "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pOldValue`  \n" +
      "			FROM component_mslmst  \n" +
      "			WHERE id =OLD.mslID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.mslID IS NOT NULL THEN  \n" +
      "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pNewValue`  \n" +
      "			FROM component_mslmst  \n" +
      "			WHERE id =NEW.mslID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'MSL',  \n" +
      "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.connecterTypeID,\"\") != IFNULL(NEW.connecterTypeID,\"\") THEN  \n" +
      "		IF OLD.connecterTypeID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
      "			FROM rfq_connectertypemst  \n" +
      "			WHERE id =OLD.connecterTypeID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.connecterTypeID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
      "			FROM rfq_connectertypemst  \n" +
      "			WHERE id =NEW.connecterTypeID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Connector Type',  \n" +
      "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.connectorTypeText,\"\") != IFNULL(NEW.connectorTypeText,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Connector Type (External)',  \n" +
      "			CAST(OLD.connectorTypeText AS CHAR),		CAST(NEW.connectorTypeText AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','connectorTypeText'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.costCategoryID,\"\") != IFNULL(NEW.costCategoryID,\"\") THEN  \n" +
      "		IF OLD.costCategoryID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
      "			FROM cost_category  \n" +
      "			WHERE id =OLD.costCategoryID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.costCategoryID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
      "			FROM cost_category  \n" +
      "			WHERE id =NEW.costCategoryID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Cost Category',  \n" +
      "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.maxQtyonHand,\"\") != IFNULL(NEW.maxQtyonHand,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Max. Qty on Hand',  \n" +
      "			CAST(OLD.maxQtyonHand AS CHAR),		CAST(NEW.maxQtyonHand AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                       'sixdigitunitprice');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.noOfRows,\"\") != IFNULL(NEW.noOfRows,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'No Of Rows',  \n" +
      "			CAST(OLD.noOfRows AS CHAR),		CAST(NEW.noOfRows AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfRows'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.bookValue,\"\") != IFNULL(NEW.bookValue,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Book Value',  \n" +
      "			CAST(OLD.bookValue AS CHAR),		CAST(NEW.bookValue AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','bookValue'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.voltage,\"\") != IFNULL(NEW.voltage,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Voltage',  \n" +
      "			CAST(OLD.voltage AS CHAR),		CAST(NEW.voltage AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','voltage'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.operatingTemp,\"\") != IFNULL(NEW.operatingTemp,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Operating Temperature',  \n" +
      "			CAST(OLD.operatingTemp AS CHAR), CAST(NEW.operatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','operatingTemp'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.powerRating,\"\") != IFNULL(NEW.powerRating,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Power (Watts)',  \n" +
      "			CAST(OLD.powerRating AS CHAR), CAST(NEW.powerRating AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','powerRating'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.pitch,\"\") != IFNULL(NEW.pitch,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Pitch (Unit in mm)',  \n" +
      "			CAST(OLD.pitch AS CHAR), 	CAST(NEW.pitch AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pitch'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.pitchMating,\"\") != IFNULL(NEW.pitchMating,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Pitch Mating(Unit in mm)',  \n" +
      "			CAST(OLD.pitchMating AS CHAR), 	CAST(NEW.pitchMating AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pitchMating'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.plannedOverRunPercentagePerBuild,\"\") != IFNULL(NEW.plannedOverRunPercentagePerBuild,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build) (%)',  \n" +
      "			CAST(OLD.plannedOverRunPercentagePerBuild AS CHAR), 	CAST(NEW.plannedOverRunPercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.nickName,\"\") != IFNULL(NEW.nickName,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Nickname',  \n" +
      "			CAST(OLD.nickName AS CHAR), 	CAST(NEW.nickName AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','nickName'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.bomLock,\"\") != IFNULL(NEW.bomLock,\"\") THEN  \n" +
      "		IF OLD.bomLock IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.bomLock = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.bomLock = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.bomLock IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.bomLock = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.bomLock = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Lock BOM',  \n" +
      "			pOldValue, 				pNewValue,	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.restrictUSEwithpermission,\"\") != IFNULL(NEW.restrictUSEwithpermission,\"\") THEN  \n" +
      "		IF OLD.restrictUSEwithpermission IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.restrictUSEwithpermission = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.restrictUSEwithpermission = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.restrictUSEwithpermission IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.restrictUSEwithpermission = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.restrictUSEwithpermission = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Restrict Use Including Packaging Alias (With Permission)',  \n" +
      "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.sizeDimension,\"\") != IFNULL(NEW.sizeDimension,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Size/Dimension',  \n" +
      "			CAST(OLD.sizeDimension AS CHAR), 	CAST(NEW.sizeDimension AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','sizeDimension'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.plannedValuePerBuild,\"\") != IFNULL(NEW.plannedValuePerBuild,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build)',  \n" +
      "			CAST(OLD.plannedValuePerBuild AS CHAR), 	CAST(NEW.plannedValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','plannedValuePerBuild'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.scrapValuePerBuild,\"\") != IFNULL(NEW.scrapValuePerBuild,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build)',  \n" +
      "			CAST(OLD.scrapValuePerBuild AS CHAR), 	CAST(NEW.scrapValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','scrapValuePerBuild'));  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.scrapRatePercentagePerBuild,\"\") != IFNULL(NEW.scrapRatePercentagePerBuild,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build) (%)',  \n" +
      "			CAST(OLD.scrapRatePercentagePerBuild AS CHAR), 	CAST(NEW.scrapRatePercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.restrictUsePermanently,\"\") != IFNULL(NEW.restrictUsePermanently,\"\") THEN  \n" +
      "		IF OLD.restrictUsePermanently IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.restrictUsePermanently = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.restrictUsePermanently = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.restrictUsePermanently IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.restrictUsePermanently = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.restrictUsePermanently = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,			'component',			'Restrict Use Including Packaging Alias (Permanently)',  \n" +
      "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.customerID,\"\") != IFNULL(NEW.customerID,\"\") THEN  \n" +
      "		IF OLD.customerID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
      "			FROM mfgcodemst  \n" +
      "			WHERE id =OLD.customerID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.customerID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
      "			FROM mfgcodemst  \n" +
      "			WHERE id =NEW.customerID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Customer',  \n" +
      "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.eau,\"\") != IFNULL(NEW.eau,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'EAU',  \n" +
      "			CAST(OLD.eau AS CHAR), 	CAST(NEW.eau AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','eau'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.assyCode,\"\") != IFNULL(NEW.assyCode,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Assy Code',  \n" +
      "			CAST(OLD.assyCode AS CHAR), 	CAST(NEW.assyCode AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','assyCode'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.pcbPerArray,\"\") != IFNULL(NEW.pcbPerArray,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'PCB Per Array',  \n" +
      "			CAST(OLD.pcbPerArray AS CHAR), 	CAST(NEW.pcbPerArray AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pcbPerArray'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.temperatureCoefficient,\"\") != IFNULL(NEW.temperatureCoefficient,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient',  \n" +
      "			CAST(OLD.temperatureCoefficient AS CHAR), 	CAST(NEW.temperatureCoefficient AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficient'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.temperatureCoefficientValue,\"\") != IFNULL(NEW.temperatureCoefficientValue,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Value',  \n" +
      "			CAST(OLD.temperatureCoefficientValue AS CHAR), 	CAST(NEW.temperatureCoefficientValue AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficientValue'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.temperatureCoefficientUnit,\"\") != IFNULL(NEW.temperatureCoefficientUnit,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Unit',  \n" +
      "			CAST(OLD.temperatureCoefficientUnit AS CHAR), 	CAST(NEW.temperatureCoefficientUnit AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficientUnit'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.isCPN,\"\") != IFNULL(NEW.isCPN,\"\") THEN  \n" +
      "		IF OLD.isCPN IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.isCPN = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.isCPN = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.isCPN IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.isCPN = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.isCPN = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'CPN',  \n" +
      "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.matingPartRquired,\"\") != IFNULL(NEW.matingPartRquired,\"\") THEN  \n" +
      "		IF OLD.matingPartRquired IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.matingPartRquired = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.matingPartRquired = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.matingPartRquired IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.matingPartRquired = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.matingPartRquired = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Require Mating Part',  \n" +
      "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.driverToolRequired,\"\") != IFNULL(NEW.driverToolRequired,\"\") THEN  \n" +
      "		IF OLD.driverToolRequired IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.driverToolRequired = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.driverToolRequired = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.driverToolRequired IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.driverToolRequired = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.driverToolRequired = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Require Driver Tool',  \n" +
      "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.pickupPadRequired,\"\") != IFNULL(NEW.pickupPadRequired,\"\") THEN  \n" +
      "		IF OLD.pickupPadRequired IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.pickupPadRequired = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.pickupPadRequired = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.pickupPadRequired IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.pickupPadRequired = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.pickupPadRequired = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Require Pick up Pad',  \n" +
      "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.programingRequired,\"\") != IFNULL(NEW.programingRequired,\"\") THEN  \n" +
      "		IF OLD.programingRequired IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.programingRequired = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.programingRequired = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.programingRequired IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.programingRequired = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.programingRequired = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Require Programming',  \n" +
      "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.functionalTestingRequired,\"\") != IFNULL(NEW.functionalTestingRequired,\"\") THEN  \n" +
      "		IF OLD.functionalTestingRequired IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.functionalTestingRequired = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.functionalTestingRequired = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.functionalTestingRequired IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.functionalTestingRequired = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.functionalTestingRequired = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Require Functional Testing',  \n" +
      "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.liveInternalVersion,\"\") != IFNULL(NEW.liveInternalVersion,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Live Internal Version',  \n" +
      "			CAST(OLD.liveInternalVersion AS CHAR), 	CAST(NEW.liveInternalVersion AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','liveInternalVersion'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.custAssyPN,\"\") != IFNULL(NEW.custAssyPN,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Part#',  \n" +
      "			CAST(OLD.custAssyPN AS CHAR), 	CAST(NEW.custAssyPN AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','custAssyPN'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.partType,\"\") != IFNULL(NEW.partType,\"\") THEN  \n" +
      "		IF OLD.partType IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
      "			FROM rfq_partcategory  \n" +
      "			WHERE id =OLD.partType  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.partType IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
      "			FROM rfq_partcategory  \n" +
      "			WHERE id =NEW.partType  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Part Type',  \n" +
      "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                      'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.functionalTypePartRequired,\"\") != IFNULL(NEW.functionalTypePartRequired,\"\") THEN  \n" +
      "		IF OLD.functionalTypePartRequired IS NOT NULL THEN  \n" +
      "				SET pOldValue = CASE WHEN OLD.functionalTypePartRequired = 1 THEN  \n" +
      "											'Yes'  \n" +
      "									WHEN OLD.functionalTypePartRequired = 0 THEN  \n" +
      "											'No'  \n" +
      "									ELSE '' END;  \n" +
      "			END IF;  \n" +
      "		IF NEW.functionalTypePartRequired IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.functionalTypePartRequired = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.functionalTypePartRequired = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Require Functional Type Parts',  \n" +
      "			pOldValue, pNewValue,	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.mountingTypePartRequired,\"\") != IFNULL(NEW.mountingTypePartRequired,\"\") THEN  \n" +
      "		IF OLD.mountingTypePartRequired IS NOT NULL THEN  \n" +
      "				SET pOldValue = CASE WHEN OLD.mountingTypePartRequired = 1 THEN  \n" +
      "											'Yes'  \n" +
      "									WHEN OLD.mountingTypePartRequired = 0 THEN  \n" +
      "											'No'  \n" +
      "									ELSE '' END;  \n" +
      "			END IF;  \n" +
      "		IF NEW.mountingTypePartRequired IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.mountingTypePartRequired = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.mountingTypePartRequired = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Require Mounting Type Parts',  \n" +
      "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.shelfLifeAcceptanceDays,\"\") != IFNULL(NEW.shelfLifeAcceptanceDays,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Days)',  \n" +
      "			CAST(OLD.shelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.shelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','shelfLifeAcceptanceDays'));  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF IFNULL(OLD.shelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.shelfListDaysThresholdPercentage,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Threshold(%))',  \n" +
      "			CAST(OLD.shelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.shelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF IFNULL(OLD.maxShelfLifeAcceptanceDays,\"\") != IFNULL(NEW.maxShelfLifeAcceptanceDays,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Days)',  \n" +
      "			CAST(OLD.maxShelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.maxShelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','maxShelfLifeAcceptanceDays'));  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.maxShelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.maxShelfListDaysThresholdPercentage,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Threshold(%))',  \n" +
      "			CAST(OLD.maxShelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.maxShelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.shelfLifeDateType,\"\") != IFNULL(NEW.shelfLifeDateType,\"\") THEN  \n" +
      "		SELECT (CASE WHEN (OLD.shelfLifeDateType = 'N') THEN 'None'  \n" +
      "					WHEN (OLD.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
      "                    WHEN (OLD.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
      "                    ELSE '' END) INTO `pOldValue`   ;  \n" +
      "		SELECT (CASE WHEN (NEW.shelfLifeDateType = 'N') THEN 'None'  \n" +
      "					WHEN (NEW.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
      "                    WHEN (NEW.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
      "                    ELSE '' END) INTO `pNewValue`   ;  \n" +
      "		INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Shelf Life Date Typ',  \n" +
      "			pOldValue, 	pNewValue,	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.color,\"\") != IFNULL(NEW.color,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Color',  \n" +
      "			CAST(OLD.color AS CHAR), 	CAST(NEW.color AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','color'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.refSupplierMfgpnComponentID,\"\") != IFNULL(NEW.refSupplierMfgpnComponentID,\"\") THEN  \n" +
      "		IF OLD.partType IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
      "				FROM COMPONENT  \n" +
      "			WHERE id =OLD.refSupplierMfgpnComponentID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.partType IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
      "				FROM COMPONENT  \n" +
      "			WHERE id = NEW.refSupplierMfgpnComponentID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'MFR PN',  \n" +
      "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.imageURL,\"\") != IFNULL(NEW.imageURL,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Image URL',  \n" +
      "			CAST(OLD.imageURL AS CHAR), 	CAST(NEW.imageURL AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','imageURL'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.businessRisk,\"\") != IFNULL(NEW.businessRisk,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Business Risk',  \n" +
      "			CAST(OLD.businessRisk AS CHAR), 	CAST(NEW.businessRisk AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','businessRisk'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.exteranalAPICallStatus,\"\") != IFNULL(NEW.exteranalAPICallStatus,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Exteranal API Call Status',  \n" +
      "			CAST(OLD.exteranalAPICallStatus AS CHAR), 	CAST(NEW.exteranalAPICallStatus AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','exteranalAPICallStatus'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.isBOMVerified,\"\") != IFNULL(NEW.isBOMVerified,\"\") THEN  \n" +
      "		IF OLD.isBOMVerified IS NOT NULL THEN  \n" +
      "				SET pOldValue = CASE WHEN OLD.isBOMVerified = 1 THEN  \n" +
      "											'Yes'  \n" +
      "									WHEN OLD.isBOMVerified = 0 THEN  \n" +
      "											'No'  \n" +
      "									ELSE '' END;  \n" +
      "			END IF;  \n" +
      "		IF NEW.isBOMVerified IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.isBOMVerified = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.isBOMVerified = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'BOM Verified',  \n" +
      "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.liveVersion,\"\") != IFNULL(NEW.liveVersion,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Live Version',  \n" +
      "			CAST(OLD.liveVersion AS CHAR), 	CAST(NEW.liveVersion AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','liveVersion'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.packagingID,\"\") != IFNULL(NEW.packagingID,\"\") THEN  \n" +
      "		IF OLD.packagingID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
      "			FROM component_packagingmst  \n" +
      "			WHERE id =OLD.packagingID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.packagingID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
      "			FROM component_packagingmst  \n" +
      "			WHERE id =NEW.packagingID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
      "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.isTemperatureSensitive,\"\") != IFNULL(NEW.isTemperatureSensitive,\"\") THEN  \n" +
      "		IF OLD.isTemperatureSensitive IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.isTemperatureSensitive = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.isTemperatureSensitive = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.isTemperatureSensitive IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.isTemperatureSensitive = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.isTemperatureSensitive = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Temperature Sensitive Data',  \n" +
      "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.unit,\"\") != IFNULL(NEW.unit,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Unit',  \n" +
      "			CAST(OLD.unit AS CHAR), 	CAST(NEW.unit AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.grossWeight,\"\") != IFNULL(NEW.grossWeight,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Unit Gross Weight',  \n" +
      "			CAST(OLD.grossWeight AS CHAR), 	CAST(NEW.grossWeight AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.packagingWeight,\"\") != IFNULL(NEW.packagingWeight,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Unit Net Weight',  \n" +
      "			CAST(OLD.packagingWeight AS CHAR), 	CAST(NEW.packagingWeight AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.epicorType,\"\") != IFNULL(NEW.epicorType,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Purchase Type',  \n" +
      "			CAST(OLD.epicorType AS CHAR), 	CAST(NEW.epicorType AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','epicorType'));  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.grossWeightUom,\"\") != IFNULL(NEW.grossWeightUom,\"\") THEN  \n" +
      "		IF OLD.grossWeightUom IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
      "			FROM uoms  \n" +
      "			WHERE id =OLD.grossWeightUom  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.grossWeightUom IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
      "			FROM uoms  \n" +
      "			WHERE id =NEW.grossWeightUom  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Unit Gross Weight (UOM)',  \n" +
      "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
      "	END IF;  \n" +
      "     IF IFNULL(OLD.packagingWeightUom,\"\") != IFNULL(NEW.packagingWeightUom,\"\") THEN  \n" +
      "		IF OLD.packagingWeightUom IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
      "			FROM uoms  \n" +
      "			WHERE id =OLD.packagingWeightUom  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.packagingWeightUom IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
      "			FROM uoms  \n" +
      "			WHERE id =NEW.packagingWeightUom  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Unit Net Weight (UOM)',  \n" +
      "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.price,\"\") != IFNULL(NEW.price,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Tentative Price Ea($)',  \n" +
      "			CAST(OLD.price AS CHAR),	CAST(NEW.price AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'amout');  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.noOfPositionText,\"\") != IFNULL(NEW.noOfPositionText,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Pin Count (External)',  \n" +
      "			OLD.noOfPositionText,	NEW.noOfPositionText,	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfPositionText'));  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.uomClassID,\"\") != IFNULL(NEW.uomClassID,\"\") THEN  \n" +
      "		IF OLD.uomClassID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
      "			FROM measurement_types  \n" +
      "			WHERE id =OLD.uomClassID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.uomClassID IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
      "			FROM measurement_types  \n" +
      "			WHERE id =NEW.uomClassID  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'UOM Class',  \n" +
      "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.noOfRowsText,\"\") != IFNULL(NEW.noOfRowsText,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,        tableName,          Colname,  \n" +
      "			Oldval, 				Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,			'component',		'No. of Rows (External)',  \n" +
      "			OLD.noOfRowsText,		NEW.noOfRowsText,	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfRowsText'));  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.rohsDeviation,\"\") != IFNULL(NEW.rohsDeviation,\"\") THEN  \n" +
      "		IF OLD.rohsDeviation IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.rohsDeviation = -1 THEN  \n" +
      "										'No'  \n" +
      "								WHEN OLD.rohsDeviation = -2 THEN  \n" +
      "										'With Approval'  \n" +
      "								WHEN OLD.rohsDeviation = -3 THEN  \n" +
      "										'Yes'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.rohsDeviation IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.rohsDeviation = -1 THEN  \n" +
      "										'No'  \n" +
      "								WHEN NEW.rohsDeviation = -2 THEN  \n" +
      "										'With Approval'  \n" +
      "								WHEN NEW.rohsDeviation = -3 THEN  \n" +
      "										'Yes'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,        tableName,          Colname,  \n" +
      "			Oldval, 				Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,			'component',		'RoHS Deviation',  \n" +
      "			pOldValue,				pNewValue,			OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.alertExpiryDays,\"\") != IFNULL(NEW.alertExpiryDays,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Alert Days before Expiry Date',  \n" +
      "			CAST(OLD.alertExpiryDays AS CHAR),	CAST(NEW.alertExpiryDays AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','alertExpiryDays'));  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.umidVerificationRequire,\"\") != IFNULL(NEW.umidVerificationRequire,\"\") THEN  \n" +
      "		IF OLD.umidVerificationRequire IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.umidVerificationRequire = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.umidVerificationRequire = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.umidVerificationRequire IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.umidVerificationRequire = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.umidVerificationRequire = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 				Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,			'component',		'Require Supervisor Approval (Before Use)',  \n" +
      "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.totalSolderPoints,\"\") != IFNULL(NEW.totalSolderPoints,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 				Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Total Solder Points',  \n" +
      "			CAST(OLD.totalSolderPoints AS CHAR),	CAST(NEW.totalSolderPoints AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','totalSolderPoints'));  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.trackSerialNumber,\"\") != IFNULL(NEW.trackSerialNumber,\"\") THEN  \n" +
      "		IF OLD.trackSerialNumber IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.trackSerialNumber = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.trackSerialNumber = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.trackSerialNumber IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.trackSerialNumber = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.trackSerialNumber = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 				Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,			'component',		'Track Serial Numbers',  \n" +
      "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.restrictPackagingUsePermanently,\"\") != IFNULL(NEW.restrictPackagingUsePermanently,\"\") THEN  \n" +
      "		IF OLD.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.restrictPackagingUsePermanently = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.restrictPackagingUsePermanently = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.restrictPackagingUsePermanently = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.restrictPackagingUsePermanently = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 				Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (Permanently)',  \n" +
      "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.restrictPackagingUseWithpermission,\"\") != IFNULL(NEW.restrictPackagingUseWithpermission,\"\") THEN  \n" +
      "		IF OLD.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.restrictPackagingUseWithpermission = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.restrictPackagingUseWithpermission = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.restrictPackagingUseWithpermission = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.restrictPackagingUseWithpermission = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 				Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (With Permission)',  \n" +
      "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.rfqOnly,\"\") != IFNULL(NEW.rfqOnly,\"\") THEN  \n" +
      "		IF OLD.rfqOnly IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.rfqOnly = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.rfqOnly = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.rfqOnly IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.rfqOnly = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.rfqOnly = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 				Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,			'component',		'RFQ Only',  \n" +
      "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.isCloudApiUpdateAttribute,\"\") != IFNULL(NEW.isCloudApiUpdateAttribute,\"\") THEN  \n" +
      "		IF OLD.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.isCloudApiUpdateAttribute = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.isCloudApiUpdateAttribute = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.isCloudApiUpdateAttribute = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.isCloudApiUpdateAttribute = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 				Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,			'component',		'Cloud API update',  \n" +
      "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.isAutoVerificationOfAllAssemblyParts,\"\") != IFNULL(NEW.isAutoVerificationOfAllAssemblyParts,\"\") THEN  \n" +
      "		IF OLD.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 				Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,			'component',		'Bypass Machine Setup Verification (Only for Assembly)',  \n" +
      "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.purchasingComment,\"\") != IFNULL(NEW.purchasingComment,\"\") THEN  \n" +
      "		INSERT INTO common_longtext_history  \n" +
      "			(refTransId,				Colname,				Oldval,  \n" +
      "			 Newval,					valueDataType,				Tablename,  \n" +
      "			 createdBy,  				createdAt,  			updatedAt, 			Updatedby,  \n" +
      "			createByRoleId,		updateByRoleId )  \n" +
      "		 VALUES(NEW.id,					'MISC Comment',			CAST(OLD.purchasingComment AS CHAR),  \n" +
      "				 CAST(NEW.purchasingComment AS CHAR),	 	fun_getDataTypeBasedOnTableAndColumnName('component', 'purchasingComment'), 'component',  \n" +
      "				 OLD.createdBy,  			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "				OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.predictedObsolescenceYear,\"\") != IFNULL(NEW.predictedObsolescenceYear,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Predicted Obsolescence Year',  \n" +
      "			CAST(OLD.predictedObsolescenceYear AS CHAR),	CAST(NEW.predictedObsolescenceYear AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','predictedObsolescenceYear'));  \n" +
      "	END IF;  \n" +
      "    IF IFNULL(OLD.requiredTestTime,\"\") != IFNULL(NEW.requiredTestTime,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Functional Testing Time',  \n" +
      "			CAST(OLD.requiredTestTime AS CHAR),	CAST(NEW.requiredTestTime AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','requiredTestTime'));  \n" +
      "	END IF;  \n" +
      "  \n" +
      "  \n" +
      "    IF IFNULL(OLD.detailDescription,\"\") != IFNULL(NEW.detailDescription,\"\") THEN  \n" +
      "     INSERT INTO common_longtext_history  \n" +
      "		(refTransId,				Colname,				Oldval,  \n" +
      "		 Newval,					valueDataType,				Tablename,  \n" +
      "         createdBy,  				createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId )  \n" +
      "	 VALUES(NEW.id,					'Detailed Description',			CAST(OLD.detailDescription AS CHAR),  \n" +
      "			 CAST(NEW.detailDescription AS CHAR),	 	fun_getDataTypeBasedOnTableAndColumnName('component', 'detailDescription'), 'component',  \n" +
      "			 OLD.createdBy,  			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "			OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF IFNULL(OLD.obsoleteDate,\"\") != IFNULL(NEW.obsoleteDate,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Obsolete Date',  \n" +
      "			CAST(DATE(OLD.obsoleteDate) AS CHAR),	CAST(DATE(NEW.obsoleteDate) AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','obsoleteDate'));  \n" +
      "	END IF;  \n" +
      "	IF IFNULL(OLD.mfrNameText,\"\") != IFNULL(NEW.mfrNameText,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'MFR (External)',  \n" +
      "			CAST(OLD.mfrNameText AS CHAR),	CAST(NEW.mfrNameText AS CHAR),	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfrNameText'));  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF IFNULL(OLD.assemblyType,0) != IFNULL(NEW.assemblyType,0) THEN  \n" +
      "		IF OLD.assemblyType IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
      "			FROM rfq_assy_typemst  \n" +
      "			WHERE id =OLD.assemblyType  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.assemblyType IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
      "			FROM rfq_assy_typemst  \n" +
      "			WHERE id =NEW.assemblyType  \n" +
      "			ORDER BY id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "       INSERT INTO Component_History  \n" +
      "		(refComponentID,                tableName,                 	Colname,  \n" +
      "		Oldval, 			Newval, 			createdBy,  \n" +
      "		createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "       VALUES(NEW.id,				'component',			'Assy Type',  \n" +
      "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "    IF ((OLD.isWaterSoluble != NEW.isWaterSoluble)  \n" +
      "			OR (OLD.isNoClean != NEW.isNoClean)  \n" +
      "            OR (OLD.isFluxNotApplicable != NEW.isFluxNotApplicable))  \n" +
      "    THEN  \n" +
      "		-- Create string for Old configure value for Flux Type  \n" +
      "		SET pOldValue = '';  \n" +
      "        IF(OLD.isFluxNotApplicable = 1) THEN  \n" +
      "			SET pOldValue = 'Not Applicable';  \n" +
      "		END IF;  \n" +
      "        IF(OLD.isNoClean = 1) THEN  \n" +
      "			SET pOldValue = CONCAT((CASE WHEN (pOldValue != '') THEN CONCAT(pOldValue, ', ') ELSE '' END), 'No-Clean');  \n" +
      "		END IF;  \n" +
      "        IF(OLD.isWaterSoluble = 1) THEN  \n" +
      "			SET pOldValue = CONCAT((CASE WHEN (pOldValue != '') THEN CONCAT(pOldValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
      "		END IF;  \n" +
      "  \n" +
      "        -- Create string for New configure value for Flux Type  \n" +
      "        SET pNewValue = '';  \n" +
      "        IF(NEW.isFluxNotApplicable = 1) THEN  \n" +
      "			SET pNewValue = 'Not Applicable';  \n" +
      "		END IF;  \n" +
      "        IF(NEW.isNoClean = 1) THEN  \n" +
      "			SET pNewValue = CONCAT((CASE WHEN (pNewValue != '') THEN CONCAT(pNewValue, ', ') ELSE '' END), 'No-Clean');  \n" +
      "		END IF;  \n" +
      "        IF(NEW.isWaterSoluble = 1) THEN  \n" +
      "			SET pNewValue = CONCAT((CASE WHEN (pNewValue != '') THEN CONCAT(pNewValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
      "		END IF;  \n" +
      "  \n" +
      "       INSERT INTO Component_History  \n" +
      "		(refComponentID,                tableName,                 	Colname,  \n" +
      "		Oldval, 			Newval, 			createdBy,  \n" +
      "		createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "       VALUES(NEW.id,				'component',			'Flux Type',  \n" +
      "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF IFNULL(OLD.isHazmatMaterial,\"\") != IFNULL(NEW.isHazmatMaterial,\"\") THEN  \n" +
      "		IF OLD.isHazmatMaterial IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.isHazmatMaterial = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.isHazmatMaterial = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.isHazmatMaterial IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.isHazmatMaterial = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.isHazmatMaterial = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Hazmat Material',  \n" +
      "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF IFNULL(OLD.isReceiveBulkItem,\"\") != IFNULL(NEW.isReceiveBulkItem,\"\") THEN  \n" +
      "		IF OLD.isReceiveBulkItem IS NOT NULL THEN  \n" +
      "			SET pOldValue = CASE WHEN OLD.isReceiveBulkItem = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN OLD.isReceiveBulkItem = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "		IF NEW.isReceiveBulkItem IS NOT NULL THEN  \n" +
      "			SET pNewValue = CASE WHEN NEW.isReceiveBulkItem = 1 THEN  \n" +
      "										'Yes'  \n" +
      "								WHEN NEW.isReceiveBulkItem = 0 THEN  \n" +
      "										'No'  \n" +
      "								ELSE '' END;  \n" +
      "		END IF;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Receive as a Bulk item',  \n" +
      "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF IFNULL(OLD.internalReference,\"\") != IFNULL(NEW.internalReference,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "	       VALUES(NEW.id,				'component',			'Internal Ref#',  \n" +
      "			CAST(OLD.internalReference AS CHAR),	CAST(NEW.internalReference AS CHAR),	 OLD.createdBy,  \n" +
      "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','internalReference'));  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF IFNULL(OLD.purchaseacctId,\"\") != IFNULL(NEW.purchaseacctId,\"\") THEN  \n" +
      "		IF OLD.purchaseacctId IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`acct_name`, '') INTO `pOldValue`  \n" +
      "			FROM acct_acctmst  \n" +
      "			WHERE acct_id =OLD.purchaseacctId  \n" +
      "			ORDER BY acct_id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.purchaseacctId IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`acct_name`, '') INTO `pNewValue`  \n" +
      "			FROM acct_acctmst  \n" +
      "			WHERE acct_id =NEW.purchaseacctId  \n" +
      "			ORDER BY acct_id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "       INSERT INTO Component_History  \n" +
      "		(refComponentID,                tableName,                 	Colname,  \n" +
      "		Oldval, 			Newval, 			createdBy,  \n" +
      "		createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "       VALUES(NEW.id,				'component',			'Purchase COA',  \n" +
      "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF IFNULL(OLD.salesacctId,\"\") != IFNULL(NEW.salesacctId,\"\") THEN  \n" +
      "		IF OLD.salesacctId IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`acct_name`, '') INTO `pOldValue`  \n" +
      "			FROM acct_acctmst  \n" +
      "			WHERE acct_id =OLD.salesacctId  \n" +
      "			ORDER BY acct_id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "		IF NEW.salesacctId IS NOT NULL THEN  \n" +
      "			SELECT IFNULL(`acct_name`, '') INTO `pNewValue`  \n" +
      "			FROM acct_acctmst  \n" +
      "			WHERE acct_id =NEW.salesacctId  \n" +
      "			ORDER BY acct_id DESC LIMIT 1;  \n" +
      "		END IF;  \n" +
      "       INSERT INTO Component_History  \n" +
      "		(refComponentID,                tableName,                 	Colname,  \n" +
      "		Oldval, 			Newval, 			createdBy,  \n" +
      "		createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "       VALUES(NEW.id,				'component',			'Sales COA',  \n" +
      "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF IFNULL(OLD.frequency,\"\") != IFNULL(NEW.frequency,\"\") THEN  \n" +
      "		SET pOldValue = (CASE WHEN OLD.frequency = 1 THEN \"Every\"  \n" +
      "							  WHEN OLD.frequency = 1 THEN \"First\"  \n" +
      "                              WHEN OLD.frequency = 1 THEN \"Last\"  \n" +
      "                              ELSE '' END);  \n" +
      "  \n" +
      "        SET pNewValue = (CASE WHEN NEW.frequency = 1 THEN \"Every\"  \n" +
      "							  WHEN NEW.frequency = 1 THEN \"First\"  \n" +
      "                              WHEN NEW.frequency = 1 THEN \"Last\"  \n" +
      "                              ELSE '' END);  \n" +
      "  \n" +
      "       INSERT INTO Component_History  \n" +
      "		(refComponentID,                tableName,                 	Colname,  \n" +
      "		Oldval, 			Newval, 			createdBy,  \n" +
      "		createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "       VALUES(NEW.id,				'component',			'Charge Frequency',  \n" +
      "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    IF IFNULL(OLD.frequencyType,\"\") != IFNULL(NEW.frequencyType,\"\") THEN  \n" +
      "		SET pOldValue = (CASE WHEN OLD.frequencyType = 1 THEN \"Release\"  \n" +
      "							  WHEN OLD.frequencyType = 1 THEN \"Shipment\"  \n" +
      "                              ELSE '' END);  \n" +
      "  \n" +
      "        SET pNewValue = (CASE WHEN NEW.frequencyType = 1 THEN \"Release\"  \n" +
      "							  WHEN NEW.frequencyType = 1 THEN \"Shipment\"  \n" +
      "                              ELSE '' END);  \n" +
      "  \n" +
      "       INSERT INTO Component_History  \n" +
      "		(refComponentID,                tableName,                 	Colname,  \n" +
      "		Oldval, 			Newval, 			createdBy,  \n" +
      "		createdAt,  			updatedAt, 			Updatedby,  \n" +
      "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
      "       VALUES(NEW.id,				'component',			'Charge Frequency Type',  \n" +
      "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
      "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
      "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
      "	END IF;  \n" +
      "END;  \n" +
  /* **************************** Add Script Version -> 17-02-2022 *********************************** */
      "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Component_History_ExternalCall` ;  \n" +
      "CREATE TRIGGER `Trg_AU_Component_History_ExternalCall` AFTER UPDATE ON `component_last_external_apicall`  \n" +
      "    FOR EACH ROW BEGIN  \n" +
      "	DECLARE pOldValue TEXT;  \n" +
      "	DECLARE pNewValue TEXT;  \n" +
      "  \n" +
      "  \n" +
      "	IF IFNULL(OLD.updatedAtApi,\"\") != IFNULL(NEW.updatedAtApi,\"\") THEN  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "			 			updatedAt, 			Updatedby,  \n" +
      "        				valueDataType)  \n" +
      "	       VALUES(NEW.refComponentID,				'component',			'Updated At Api',  \n" +
      "			OLD.updatedAtApi,	NEW.updatedAtApi,	 	'Auto',  \n" +
      "					CURRENT_TIMESTAMP,			 'Auto',  \n" +
      "       	          fun_getDataTypeBasedOnTableAndColumnName('component_last_external_apicall','updatedAtApi'));  \n" +
      "	END IF;  \n" +
      "  \n" +
      "	IF IFNULL(OLD.supplierID,\"\") != IFNULL(NEW.supplierID,\"\") THEN  \n" +
      "	SELECT mfgcode INTO pOldValue FROM mfgcodemst WHERE id=OLD.supplierID;  \n" +
      "	SELECT mfgcode INTO pNewValue FROM mfgcodemst WHERE id=NEW.supplierID;  \n" +
      "	       INSERT INTO Component_History  \n" +
      "			(refComponentID,                tableName,                 	Colname,  \n" +
      "			Oldval, 			Newval, 			createdBy,  \n" +
      "					updatedAt, 			Updatedby,  \n" +
      "        		valueDataType)  \n" +
      "	       VALUES(NEW.refComponentID,				'component',			'Supplier',  \n" +
      "			CAST(pOldValue AS CHAR),	CAST(pNewValue AS CHAR),	 	'Auto',  \n" +
      "					CURRENT_TIMESTAMP,			 'Auto',  \n" +
      "                             fun_getDataTypeBasedOnTableAndColumnName('mfgcodemst','mfgcode'));  \n" +
      "	END IF;  \n" +
      "END;  \n" +
  /* **************************** Add Script Version -> 17-02-2022 *********************************** */
      "DROP FUNCTION IF EXISTS `fun_getOldComponentDetailsForScheduleStatusUpdate` ;  \n" +
      "CREATE FUNCTION `fun_getOldComponentDetailsForScheduleStatusUpdate`(  \n" +
      "	pdays INT(11)  \n" +
      "  \n" +
      ") RETURNS TINYINT(1)  \n" +
      "BEGIN  \n" +
      "DROP TEMPORARY TABLE IF EXISTS tempComponentDetails;  \n" +
      "CREATE TEMPORARY TABLE IF NOT EXISTS   tempComponentDetails AS  \n" +
      "	SELECT c.mfgPN, mg.mfgcode AS supplier, c.PIDCode, c.id,clea.updatedAtApi  \n" +
      "	FROM `component` c LEFT JOIN   component_last_external_apicall clea ON c.id=clea. refComponentID  \n" +
      "	LEFT JOIN mfgcodemst mg ON mg.id=clea.supplierId  \n" +
      "	WHERE c.deletedAt IS NULL  \n" +
      "	AND c.category=2  \n" +
      "	AND c.refSupplierMfgpnComponentID IS NULL  \n" +
      "	AND (clea.updatedAtApi IS NULL  \n" +
      "		OR clea.updatedAtApi < DATE_SUB(UTC_TIMESTAMP(), INTERVAL pdays DAY)  \n" +
      "	) AND c.id  IN  ( SELECT mfgpnid FROM rfq_lineitems_alternatepart  \n" +
      "WHERE mfgpnid IS NOT NULL AND partid IN  \n" +
      "(SELECT id FROM `component` WHERE partstatus=(SELECT id FROM component_partstatusmst WHERE `name`='Active' AND deletedat IS NULL)))  \n" +
      "UNION  \n" +
      "SELECT comp.* FROM  \n" +
      "(SELECT c.mfgPN, mg.mfgcode AS supplier, c.PIDCode, c.id,clea.updatedAtApi  \n" +
      "	FROM `COMPONENT` c LEFT JOIN   component_last_external_apicall clea ON c.id=clea.refComponentID  \n" +
      "	LEFT JOIN mfgcodemst mg ON mg.id=clea.supplierId  \n" +
      "	WHERE c.deletedAt IS NULL  \n" +
      "	AND c.isDeleted = 0  \n" +
      "	AND c.category=2  \n" +
      "	AND c.refSupplierMfgpnComponentID IS NULL  \n" +
      "	AND (clea.updatedAtApi IS NULL  \n" +
      "		OR clea.updatedAtApi < DATE_SUB(UTC_TIMESTAMP(), INTERVAL pdays DAY)  \n" +
      "	) AND c.id > 0 ORDER BY clea.updatedAtApi ASC)comp;  \n" +
      "  \n" +
      "	RETURN 1;  \n" +
      "END;  \n" +
  /* **************************** Add Script Version -> 17-02-2022 *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_GetOldComponentDetails` ;  \n" +
      "CREATE PROCEDURE `Sproc_GetOldComponentDetails`(  \n" +
      "IN pdays INT(11)  \n" +
      "  \n" +
      ")  \n" +
      "BEGIN  \n" +
      "  \n" +
      "  -- check old component which not update  \n" +
      "DROP TEMPORARY TABLE IF EXISTS tempComponentDetails;  \n" +
      "CREATE TEMPORARY TABLE IF NOT EXISTS   tempComponentDetails AS  \n" +
      "	SELECT c.mfgPN, IFNULL(mg.mfgcode,\"DK\") supplier, c.PIDCode, c.id,clea.updatedAtApi  \n" +
      "	FROM `component` c LEFT JOIN   component_last_external_apicall clea ON c.id=clea.refComponentID  \n" +
      "	LEFT JOIN mfgcodemst mg ON mg.id=clea.supplierId  \n" +
      "	WHERE c.deletedAt IS NULL  \n" +
      "	AND c.category=2  \n" +
      "	AND c.isCustom=0  \n" +
      "	AND c.refSupplierMfgpnComponentID IS NULL  \n" +
      "	AND (clea.updatedAtApi IS NULL  \n" +
      "		OR clea.updatedAtApi < DATE_SUB(fun_DatetimetoUTCDateTime(), INTERVAL pdays DAY)  \n" +
      "	) AND c.id  IN  ( SELECT mfgpnid FROM rfq_lineitems_alternatepart  \n" +
      "WHERE mfgpnid IS NOT NULL AND partid IN  \n" +
      "(SELECT id FROM COMPONENT WHERE partstatus=(SELECT id FROM component_partstatusmst WHERE `name`='Active' AND deletedat IS NULL)))  \n" +
      "UNION  \n" +
      "SELECT comp.* FROM  \n" +
      "(SELECT c.mfgPN, IFNULL(mg.mfgcode,\"DK\") supplier, c.PIDCode, c.id,clea.updatedAtApi  \n" +
      "	FROM `component` c LEFT JOIN   component_last_external_apicall clea ON c.id=clea.refComponentID  \n" +
      "	LEFT JOIN mfgcodemst mg ON mg.id=clea.supplierId  \n" +
      "	WHERE c.deletedAt IS NULL  \n" +
      "	AND c.isDeleted = 0  \n" +
      "	AND c.isCustom=0  \n" +
      "	AND c.category=2  \n" +
      "	AND c.refSupplierMfgpnComponentID IS NULL  \n" +
      "	AND (clea.updatedAtApi IS NULL  \n" +
      "		OR clea.updatedAtApi < DATE_SUB(fun_DatetimetoUTCDateTime(), INTERVAL pdays DAY)  \n" +
      "	) AND c.id > 0 ORDER BY updatedAtApi ASC)comp;  \n" +
      "	-- end sproc code  \n" +
      "  \n" +
      "SELECT * FROM tempComponentDetails;  \n" +
      "  \n" +
      "END;  \n" +
  /* **************************** Add Script Version -> 17-02-2022 *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_component` ;  \n" +
      "CREATE PROCEDURE `Sproc_checkDelete_component`(  \n" +
      "	IN tableName VARCHAR(255),  \n" +
      "	IN IDs LONGTEXT,  \n" +
      "	IN deletedBy INT,  \n" +
      "	IN entityID VARCHAR(255),  \n" +
      "	IN refrenceIDs LONGTEXT,  \n" +
      "	IN countList INT,  \n" +
      "    IN pRoleID INT  \n" +
      "    )  \n" +
      "BEGIN  \n" +
      "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
      "BEGIN  \n" +
      "	ROLLBACK;  \n" +
      "	RESIGNAL;  \n" +
      "END;  \n" +
      "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
      "BEGIN  \n" +
      "	ROLLBACK;  \n" +
      "	RESIGNAL;  \n" +
      "END;  \n" +
      "DROP TEMPORARY TABLE IF EXISTS tempComponentIds;  \n" +
      "SET @sqlIds = CONCAT(' create temporary table tempComponentIds  \n" +
      "					select GROUP_CONCAT(id) id  \n" +
      "					  from component  \n" +
      "					 where systemGenerated = false  \n" +
      "                       and id in (',IDs,')  \n" +
      "						or refSupplierMfgpnComponentID in (',IDs,') ');  \n" +
      "		PREPARE stmt FROM @sqlIds;  \n" +
      "        EXECUTE stmt;  \n" +
      "		DEALLOCATE PREPARE stmt;  \n" +
      "  \n" +
      "	SELECT id INTO IDs  \n" +
      "    FROM tempComponentIds;  \n" +
      "    SET @deletedByUser = deletedBy;  \n" +
      "    DROP TEMPORARY TABLE IF EXISTS tempComponent;  \n" +
      "	SET @SQL = 	CONCAT('CREATE TEMPORARY TABLE if not exists tempComponent as  \n" +
      "				select sum(cnt) cnt, msg, min(componentID) componentID  \n" +
      "                from (  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(componentID) componentID FROM component_rohsalternatepn WHERE deletedAt IS NULL AND componentID IN(',IDs,') LIMIT 1)  \n" +
      "					UNION ALL  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(mfgPNID) componentID FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)  \n" +
      "					UNION ALL  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg, min(partID) componentID FROM assemblystock WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg, min(fromPartID) componentID FROM eco_request WHERE deletedAt IS NULL AND fromPartID IN(',IDs,') LIMIT 1)  \n" +
      "                    union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"eco_request\" else \"\" end as msg, min(toPartID) componentID FROM eco_request WHERE deletedAt IS NULL AND toPartID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems_additional_comment WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_assembly_excessstock_location\" else \"\" end as msg, min(partID) componentID FROM workorder_assembly_excessstock_location WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(refComponentID) componentID FROM component_cust_alias_rev_pn WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"operation_part\" else \"\" end as msg, min(partID) componentID FROM operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_operation_part\" else \"\" end as msg, min(partID) componentID FROM workorder_operation_part WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(refComponentID) componentID FROM rfq_bom_header_component_configuration WHERE deletedAt IS NULL AND refComponentID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg, min(partID) componentID FROM workorder WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"kit_allocation\" else \"\" end as msg, min(assyID) componentID FROM kit_allocation WHERE assyID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg, min(partID) componentID FROM rfq_assemblies WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesorderdet\" else \"\" end as msg, min(partID) componentID FROM salesorderdet WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det\" else \"\" end as msg, min(partID) componentID FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND partID IN(',IDs,') or refSupplierPartId IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(custPNID) componentID FROM rfq_lineitems WHERE deletedAt IS NULL AND custPNID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
      "                    union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(distMfgPNID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND distMfgPNID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(mfgPNID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgPNID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems\" else \"\" end as msg, min(partID) componentID FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
      "                    union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(assyID) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND assyID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(refcompid) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND refcompid IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(RefCPNMFGPNID) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND RefCPNMFGPNID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_sid_stock\" else \"\" end as msg, min(refSupplierPartId) componentID FROM component_sid_stock WHERE deletedAt IS NULL AND refSupplierPartId IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg, min(replacementPartID) componentID FROM component WHERE deletedAt IS NULL AND replacementPartID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg, min(assyId) componentID FROM equipment WHERE deletedAt IS NULL and equipmentAs =''S'' AND assyId IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_parts_det\" else \"\" end as msg, min(partID) componentID FROM supplier_quote_parts_det WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_parts_det\" else \"\" end as msg, min(supplierPartID) componentID FROM supplier_quote_parts_det WHERE deletedAt IS NULL AND supplierPartID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg, min(mfgPartID) componentID FROM purchase_order_det WHERE deletedAt IS NULL AND (mfgPartID IN(',IDs,') OR supplierPartID IN(',IDs,')) LIMIT 1)  \n" +
      "					union all  \n" +
      "					(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_priority_detail\" else \"\" end as msg, min(partID) componentID FROM component_approved_supplier_priority_detail WHERE deletedAt IS NULL AND partID IN(',IDs,') LIMIT 1)  \n" +
      "					union all  \n" +
      "                    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip\" else \"\" end as msg, min(partID) componentID FROM customer_packingslip_det WHERE isDeleted = 0 and refCustPackingSlipID in (select id from customer_packingslip where transType = \"P\" and isDeleted = 0) AND partID IN(',IDs,') LIMIT 1)  \n" +
      "                    union all  \n" +
      "                    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_invoice\" else \"\" end as msg, min(partID) componentID FROM customer_packingslip_det WHERE isDeleted = 0 and refCustPackingSlipID in (select id from customer_packingslip where transType = \"I\" and isDeleted = 0) AND partID IN(',IDs,') LIMIT 1)  \n" +
      "                    union all  \n" +
      "                    (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_creditmemo\" else \"\" end as msg, min(partID) componentID FROM customer_packingslip_det WHERE isDeleted = 0 and refCustPackingSlipID in (select id from customer_packingslip where transType = \"C\" and isDeleted = 0) AND partID IN(',IDs,') LIMIT 1)  \n" +
      "                ) q group by msg');  \n" +
      "  \n" +
      "		PREPARE stmt FROM @SQL;  \n" +
      "        EXECUTE stmt;  \n" +
      "		DEALLOCATE PREPARE stmt;  \n" +
      "        IF (countList=FALSE) THEN  \n" +
      "			IF (SELECT SUM(t.cnt) FROM tempComponent t)=0 THEN  \n" +
      "				START TRANSACTION;  \n" +
      "				SET @SQl1 = CONCAT('update component set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" , packaginggroupID = null  where id IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				SET @SQl1 = CONCAT('update part_sub_assy_relationship set  isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where (partID IN(',IDs,') or prPerPartID IN (',IDs,'))and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				SET @SQl1 = CONCAT('update component_alternatepn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				SET @SQl1 = CONCAT('update component_processmaterial set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				SET @SQl1 = CONCAT('update component_drivetools set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				SET @SQl1 = CONCAT('update component_cust_alias_rev_pn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refCPNPartID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				-- MISC DATA  \n" +
      "				SET @SQl1 = CONCAT('update component_dataelement set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "                SET @SQl1 = CONCAT('update dataelement_transactionvalues set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refTransID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "						SET @SQl1 = CONCAT('update component_last_external_apicall set isDeleted=',1,',deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "  \n" +
      "				-- start delete packaging alias  \n" +
      "                SET @SQl1 = CONCAT('update component_packagingalias set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "					UPDATE COMPONENT c  \n" +
      "					   SET packaginggroupID = NULL,  \n" +
      "							updatedBy = @deletedByUser,  \n" +
      "							updateByRoleId = pRoleID,  \n" +
      "							updatedAt = fun_DatetimetoUTCDateTime()  \n" +
      "					 WHERE isdeleted = FALSE  \n" +
      "					   AND EXISTS (SELECT c1.componentID  \n" +
      "							 FROM component_packagingalias c1  \n" +
      "								WHERE c1.isdeleted = FALSE  \n" +
      "                                  AND c1.componentID = c.id  \n" +
      "								  AND c1.aliasgroupID IN  \n" +
      "										(SELECT c2.aliasgroupID  \n" +
      "										   FROM component_packagingalias c2  \n" +
      "										  WHERE c2.isdeleted = FALSE  \n" +
      "										  GROUP BY c2.aliasgroupID  \n" +
      "										 HAVING COUNT(1)=1));  \n" +
      "  \n" +
      "				UPDATE component_packagingalias a  \n" +
      "                JOIN (SELECT c2.aliasgroupID  \n" +
      "							FROM component_packagingalias c2  \n" +
      "							WHERE c2.isdeleted = FALSE  \n" +
      "							GROUP BY c2.aliasgroupID  \n" +
      "							HAVING COUNT(1)=1) b  \n" +
      "				   SET a.isDeleted = 1,  \n" +
      "						a.deletedBy = @deletedByUser,  \n" +
      "						a.deleteByRoleId = pRoleID,  \n" +
      "						a.deletedAt = fun_DatetimetoUTCDateTime()  \n" +
      "					WHERE a.isdeleted = FALSE  \n" +
      "					AND a.aliasgroupID = b.aliasgroupID;  \n" +
      "				-- end delete packaging alias  \n" +
      "  \n" +
      "                -- start delete RoHS alias  \n" +
      "                SET @SQl1 = CONCAT('update component_rohsalternatepn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				UPDATE COMPONENT c  \n" +
      "				 SET rohsgroupID = NULL,  \n" +
      "					updatedBy = @deletedByUser,  \n" +
      "					updateByRoleId = pRoleID,  \n" +
      "					updatedAt = fun_DatetimetoUTCDateTime()  \n" +
      "					WHERE isdeleted = FALSE  \n" +
      "					  AND EXISTS (  \n" +
      "						SELECT c1.componentID  \n" +
      "						 FROM component_rohsalternatepn c1  \n" +
      "						WHERE c1.isdeleted = FALSE  \n" +
      "                         AND c1.componentID = c.id  \n" +
      "						  AND c1.aliasgroupID IN  \n" +
      "								(SELECT c2.aliasgroupID  \n" +
      "								   FROM component_rohsalternatepn c2  \n" +
      "									WHERE c2.isdeleted = FALSE  \n" +
      "									GROUP BY c2.aliasgroupID  \n" +
      "									HAVING COUNT(1)=1));  \n" +
      "  \n" +
      "				UPDATE component_rohsalternatepn a  \n" +
      "                JOIN (SELECT c2.aliasgroupID  \n" +
      "							   FROM component_rohsalternatepn c2  \n" +
      "								WHERE c2.isdeleted = FALSE  \n" +
      "								GROUP BY c2.aliasgroupID  \n" +
      "								HAVING COUNT(1)=1) b  \n" +
      "					SET a.isDeleted = 1,  \n" +
      "						a.deletedBy = @deletedByUser,  \n" +
      "						a.deleteByRoleId = pRoleID,  \n" +
      "						a.deletedAt = fun_DatetimetoUTCDateTime()  \n" +
      "					WHERE a.isdeleted = FALSE  \n" +
      "					  AND a.aliasgroupID = b.aliasgroupID;  \n" +
      "                -- start delete RoHS alias  \n" +
      "  \n" +
      "                SET @SQl1 = CONCAT('update component_otherpn set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				SET @SQl1 = CONCAT('update component_functionaltestingequipment set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				SET @SQl1 = CONCAT('update component_requirefunctionaltype set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				SET @SQl1 = CONCAT('update component_requiremountingtype set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				SET @SQl1 = CONCAT('update component_standard_details set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "                -- Document Data  \n" +
      "                SET @SQl1 = CONCAT('update genericfiles set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refTransID IN(',IDs,') and entityID =',entityID,' and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				SET @SQl1 = CONCAT('update generic_folder set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refTransID IN(',IDs,') and entityID =',entityID,' and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "                -- Customer LOA Data  \n" +
      "                SET @SQl1 = CONCAT('update component_customer_loa set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where componentID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				SET @SQl1 = CONCAT('update genericfiles set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where  gencFileOwnerType = ''component_customer_loa'' and refTransID in (select Id from component_customer_loa where componentID IN(',IDs,')) and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				-- Comments  \n" +
      "                SET @SQl1 = CONCAT('update componenet_inspection_requirement_det set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where partId IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				SET @SQl1 = CONCAT('update assembly_revision_comments set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where partId IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				-- Disapproved Supplier  \n" +
      "				SET @SQl1 = CONCAT('update component_approved_supplier_mst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where partId IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "                -- Sales Price Matrix  \n" +
      "				SET @SQl1 = CONCAT('update component_price_break_details set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where mfgPNID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				-- Part Images  \n" +
      "				SET @SQl1 = CONCAT('update component_images set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				-- Part Datasheet  \n" +
      "				SET @SQl1 = CONCAT('update component_datasheets set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				-- Operational Attributes  \n" +
      "				SET @SQl1 = CONCAT('update component_dynamic_attribute_mapping_part set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where mfgPNID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				-- Acceptable Shipping Countries  \n" +
      "				SET @SQl1 = CONCAT('update component_acceptable_shipping_countries set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where refComponentID IN(',IDs,') and deletedAt is NULL');  \n" +
      "						PREPARE stmt1 FROM @SQL1;  \n" +
      "						EXECUTE stmt1;  \n" +
      "						DEALLOCATE PREPARE stmt1;  \n" +
      "  \n" +
      "				SELECT * FROM tempComponent WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
      "				COMMIT;  \n" +
      "			ELSE  \n" +
      "					SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempComponent t;  \n" +
      "			END IF;  \n" +
      "		ELSE  \n" +
      "				SELECT t1.cnt,t2.display_page_name AS msg, componentID, mf.mfgType  \n" +
      "				   FROM tempComponent t1  \n" +
      "					INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
      "                    LEFT JOIN COMPONENT co ON co.id = t1.componentID  \n" +
      "					JOIN mfgcodemst mf ON mf.id = co.mfgcodeid  \n" +
      "					WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
      "					ORDER BY t2.display_page_name;  \n" +
      "		END IF;  \n" +
      "		DROP TEMPORARY TABLE tempComponent;  \n" +
      "END;  \n" +
  /* **************************** Add Script Version -> 17-02-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5936,'2.00','V1','User Story 40463: BOM Directive > API Error Popup Changes - CC '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
        case 5936:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetUMIDDetailsForManageStock`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUMIDDetailsForManageStock`(  \n" +
                "IN pInventoryType VARCHAR(5),  \n" +
                "IN pWOID INT,  \n" +
                "IN pPackingSlipDetID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	IF(pInventoryType = 'AI') THEN  \n" +
                "		SELECT  \n" +
                "			atk.woID,  \n" +
                "			IFNULL(css.pkgQty, 0) AS totalUMIDCreatedQty,  \n" +
                "			((SUM(atk.openingStock) - (SELECT  \n" +
                "					IFNULL(SUM(ss.shippedqty), 0)  \n" +
                "				FROM  \n" +
                "					shippedassembly ss  \n" +
                "				WHERE  \n" +
                "					((ss.isDeleted = 0)  \n" +
                "						AND (ss.woNumber = atk.woNumber)  \n" +
                "						AND (ss.partID = atk.partID)))) - IFNULL(css.pkgQty, 0)) AS availableQty  \n" +
                "		FROM assemblystock atk  \n" +
                "		LEFT JOIN (SELECT  \n" +
                "						cs.woID, SUM(cs.pkgQty) AS pkgQty  \n" +
                "					FROM  \n" +
                "					component_sid_stock cs  \n" +
                "					WHERE cs.isDeleted = 0 AND cs.woID =  pWOID GROUP BY cs.woID) css ON css.woID = atk.woID  \n" +
                "		WHERE atk.isDeleted = 0 AND atk.woID =  pWOID  \n" +
                "		GROUP BY atk.woNumber,atk.partID,atk.whID,atk.binID,atk.woID,atk.woNumber,css.pkgQty;  \n" +
                "    ELSEIF(pInventoryType = 'NI') THEN  \n" +
                "		SELECT  SUM(orgPkgUnit) AS totalUMIDCreatedQty,  \n" +
                "				SUM(packingSlipQty) AS packingSlipQty,  \n" +
                "                SUM(packingSlipQty) - SUM(orgPkgUnit) AS availableQty  \n" +
                "			FROM component_sid_stock c  \n" +
                "			JOIN component_sid_stock_packing_detail cp ON cp.refComponentSidStockID = c.id AND cp.isDeleted = 0  \n" +
                "			where  c.isDeleted = 0 AND cp.refPackingSlipDetailID = pPackingSlipDetID;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetSameCriteriaUMIDPackingSlipDet`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSameCriteriaUMIDPackingSlipDet`(  \n" +
                "	IN pPackagingID INT,  \n" +
                "	IN pBinID INT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pUIDId INT,  \n" +
                "    IN pType VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_PackingSlipId INT;  \n" +
                "    DECLARE v_PackingSlipDetailID INT;  \n" +
                "    DECLARE v_ReceivedStatus VARCHAR(10);  \n" +
                "    DECLARE v_PackingSlipNumber VARCHAR(55);  \n" +
                "    DECLARE v_PackingSlipModeStatus VARCHAR(5);  \n" +
                "  \n" +
                "    IF(pType = 'UC') THEN  \n" +
                "		SELECT			vucp.packingSlipID,			vucp.PartId,	vucp.packingSlipDetID,  \n" +
                "						vucp.packingSlipNumber,  	vucp.packingSlipSerialNumber,  \n" +
                "                        IFNULL(c.umidSPQ,0) AS partPackagingMinQty,  \n" +
                "						vucp.BinID,  \n" +
                "                        cp.name packagingType,  \n" +
                "                        cp.sourceName,  \n" +
                "                        fun_getBinNameByID(vucp.BinID) AS binName,  \n" +
                "						vucp.packagingID AS packaging,  \n" +
                "						vucp.InQty AS receivedQty,					vucp.UMIDCreatedQty,  \n" +
                "                        vucp.returnQty,  			vucp.BalanceQty,  \n" +
                "						vucp.receivedStatus,    	ps.packingSlipModeStatus,  \n" +
                "                        IF(vucp.receivedStatus = 'P' OR vucp.receivedStatus = 'R' OR ps.packingSlipModeStatus = 'D',TRUE,FALSE) AS isDisable,  \n" +
                "                        ps.isCustConsigned,			ps.CustomerID,  \n" +
                "                        psd.isLineCustConsigned, 	psd.LineCustomerID  \n" +
                "				FROM 		vu_umid_creation_pending vucp  \n" +
                "				INNER JOIN 	component c on c.id = vucp.partId AND c.isdeleted = 0  \n" +
                "                INNER JOIN 	component_packagingmst cp on cp.id = vucp.packagingID AND cp.isdeleted = 0  \n" +
                "				INNER JOIN	packing_slip_material_receive ps on ps.id = vucp.packingSlipID AND ps.isdeleted = 0  \n" +
                "				JOIN	packing_slip_material_receive_det psd on psd.id = vucp.packingSlipDetID AND psd.isdeleted = 0  \n" +
                "				WHERE 		vucp.BalanceQty > 0 AND vucp.BinID = pBinID AND vucp.partId = pPartId GROUP BY vucp.packingSlipDetID;  \n" +
                "    ELSE  \n" +
                "		SELECT  \n" +
                "				 p.refPackingSlipMaterialRecID, ps.packingSlipNumber, ps.packingSlipModeStatus, p.receivedStatus, cp.refPackingSlipDetailID  \n" +
                "			INTO v_PackingSlipId, v_PackingSlipNumber, v_PackingSlipModeStatus, v_ReceivedStatus, v_PackingSlipDetailID  \n" +
                "			FROM  \n" +
                "				component_sid_stock c  \n" +
                "				JOIN component_sid_stock_packing_detail cp ON cp.refComponentSidStockID = c.id AND cp.isDeleted = 0  \n" +
                "				JOIN packing_slip_material_receive_det p ON p.id = cp.refPackingSlipDetailID AND p.isDeleted = 0  \n" +
                "				JOIN packing_slip_material_receive ps ON p.refPackingSlipMaterialRecID = ps.id  AND ps.isDeleted = 0  \n" +
                "				AND c.isDeleted = 0 AND c.id = pUIDId;  \n" +
                "  \n" +
                "		SELECT  \n" +
                "			packingSlipID, packagingID, BinID, PartId, nickname, InQty, UMIDCreatedQty, returnQty, BalanceQty, receivedStatus,  \n" +
                "			fun_getMfgCodeAndNameByPartID(PartId) mfgCodeName,  \n" +
                "			fun_getBinNameByID(BinID) binName,  \n" +
                "			fun_getPackingSlipNumberById(packingSlipID) packingSlipNumber,  \n" +
                "			fun_getPackagingNameByID(packagingID) packaging,  \n" +
                "			fun_getAssyPIDCodeByID(PartId) pidCode  \n" +
                "		FROM  \n" +
                "			vu_umid_creation_pending vu  \n" +
                "		WHERE  \n" +
                "			EXISTS(SELECT  \n" +
                "				1  \n" +
                "				FROM  \n" +
                "				component_sid_stock t WHERE  \n" +
                "					t.fromBin = vu.BinID  \n" +
                "					AND t.refcompid = vu.PartId  \n" +
                "					AND t.packaging = vu.packagingID  \n" +
                "					AND t.isDeleted = 0) AND packagingID = pPackagingID AND BinID = pBinID AND PartId = pPartId AND packingSlipID <> v_PackingSlipId AND receivedStatus = v_ReceivedStatus;  \n" +
                "		SELECT v_PackingSlipNumber AS packingSlipNumber, v_PackingSlipDetailID AS packingSlipDetID, v_PackingSlipModeStatus AS packingSlipModeStatus, IF(v_PackingSlipModeStatus = 'D',1,0) AS errorCode;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "    pIsCheckMRR TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);  \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);  \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
                "    DECLARE v_WhereKitNameFilter VARCHAR(10000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vUTCDateTime datetime;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() into vUTCDateTime;  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "     SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "			select  a.* ,  \n" +
                "					fun_getKitReturnStatus(a.pendingReleaseCount, a.releasedNotReturnedCount, a.returnedCount, a.readyToReturnCount, a.shortageReturnCount) AS kitReturnStatus  \n" +
                "				from  \n" +
                "							(SELECT 	        c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                            c.actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "                            SUM(CASE WHEN c.kitReturnStatus ='NA' THEN 1 ELSE 0 END) over (  partition by c.salesOrderDetID,refAssyId,subAssyID) pendingReleaseCount,  \n" +
                "                            SUM(CASE WHEN c.kitReturnStatus ='NR' THEN 1 ELSE 0 END) over (  partition by c.salesOrderDetID,refAssyId,subAssyID) releasedNotReturnedCount,  \n" +
                "                            SUM(CASE WHEN c.kitReturnStatus ='FR' THEN 1 ELSE 0 END) over (  partition by c.salesOrderDetID,refAssyId,subAssyID) returnedCount,  \n" +
                "                            SUM(CASE WHEN c.kitReturnStatus ='RR' THEN 1 ELSE 0 END) over (  partition by c.salesOrderDetID,refAssyId,subAssyID) readyToReturnCount,  \n" +
                "                            SUM(CASE WHEN c.kitReturnStatus ='RS' THEN 1 ELSE 0 END) over (  partition by c.salesOrderDetID,refAssyId,subAssyID) shortageReturnCount,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber,  \n" +
                "                            min(kitreleasedate)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minKitReleaseDate,  \n" +
                "                             min(id)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minkitid  \n" +
                "					FROM     vu_release_plan_detail AS c  \n" +
                "                      ) a where a.kitreleasedate = a.minKitReleaseDate  and a.id = a.minkitid \");  \n" +
                "  \n" +
                "  IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
                "				csd.binId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	binmst  \n" +
                "						WHERE 	isdeleted = 0  \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
                "					)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
                "				ka.refUIDId IN (  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock  \n" +
                "					WHERE 	isdeleted = 0  \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "				)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"  \n" +
                "			EXISTS (  \n" +
                "				SELECT 		1  \n" +
                "				FROM 		kit_allocation ka  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "							AND ka.status = 'A'  \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")  \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
                "	END IF;  \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET v_WhereKitNameFilter = \" 1 = 1 \";  \n" +
                "    IF(pSearchString IS NOT NULL OR pSearchString != '') THEN  \n" +
                "		SET v_WhereKitNameFilter = CONCAT(v_WhereKitNameFilter, \" AND  name LIKE '%\", pSearchString ,\"%' \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET v_WhereKitFilterCondition = CONCAT(\" kitReturnStatus != 'Fully Returned' AND ( \");  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		IF (pIsCheckMRP = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Not Released' OR \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition =  CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Ready To Release' OR \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Fully Released' OR \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN  \n" +
                "            SET v_WhereKitFilterCondition =  CONCAT(v_WhereKitFilterCondition, \" shortageLines > 0 OR \");  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (pIsCheckPRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Fully Released' OR \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Partially Released' OR \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Not Released' OR \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	SET v_WhereKitFilterCondition =  CONCAT(v_WhereKitFilterCondition, \" 1 = 0 ) \");  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"  \n" +
                "		SELECT k.* FROM  \n" +
                "			(SELECT	a.*,  \n" +
                "					(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore,  \n" +
                "					FUNC_MISMATCHITEMFORKIT(a.refSalesOrderDetID, IFNULL(a.subAssyID,a.refAssyId), 'M', NULL, NULL) AS mismatchItem,  \n" +
                "					fun_getKitReleaseStatus(a.kitPlanPercentage,totalKitReleaseQty,totalPOReleaseQty,a.assyKitQty,a.assyPOQty,a.totalKitReleasePlan,a.pendingCount) kitReleaseStatus  \n" +
                "				FROM	(  \n" +
                "					SELECT 	sd.id refSalesOrderDetID,  \n" +
                "							sd.kitNumber,  \n" +
                "							IFNULL(kad.partId, sd.partID) assyID,  \n" +
                "							(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
                "							(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
                "							sd.partID assyMainId,  \n" +
                "							c.mfgPN assyMainName,  \n" +
                "							c.PIDCode assyMainPIDCode,  \n" +
                "							kad.partId assySubId,  \n" +
                "							cs.mfgPN assySubName,  \n" +
                "							cs.PIDCode assySubPIDCode,  \n" +
                "							CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
                "							sd.kitNumber kitName,  \n" +
                "							s.id soId,  \n" +
                "							s.poNumber,  \n" +
                "							s.salesOrderNumber,  \n" +
                "							s.poDate,  \n" +
                "							sd.qty,  \n" +
                "							sd.kitQty,  \n" +
                "							kad.totalAssyBuildQty,  \n" +
                "							\", pDeptID ,\" AS deptID,  \n" +
                "							'\", v_ParentWHType ,\"' AS deptType,  \n" +
                "							fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
                "							IFNULL(b.uidCount, 0) uidCount,  \n" +
                "							IFNULL(b.binCount, 0) binCount,  \n" +
                "							ka.totalLines,  \n" +
                "							ka.shortageLines,  \n" +
                "							sd.isHotJob,  \n" +
                "							IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
                "                            r.name as  rohs,  \n" +
                "                         r.rohsIcon as rohsIcon,  \n" +
                "							/*fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
                "							fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
                "							fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  */  \n" +
                "                             ka.minBuild kitBuildFeasibility,  \n" +
                "							fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
                "							sp.totalKitPlan,  \n" +
                "							sp.pendingCount,  \n" +
                "							sp.totalKitReleasePlan,  \n" +
                "                            IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.qty,0) AS assyPOQty,  \n" +
                "							IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.kitQty,0) AS assyKitQty,  \n" +
                "							sp.totalKitReleaseQty,  \n" +
                "							sp.totalPOReleaseQty,  \n" +
                "							(  \n" +
                "								SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
                "								FROM 	holdunholdtrans h  \n" +
                "								WHERE 	h.refTransId = sd.id  \n" +
                "										AND h.refType = 'PO'  \n" +
                "										AND h.`status` = 'H'  \n" +
                "								ORDER BY h.id DESC  \n" +
                "								LIMIT 1  \n" +
                "							) poHalt,  \n" +
                "							(  \n" +
                "								SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	a.haltTooltip  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "												FROM 	holdunholdtrans h  \n" +
                "												WHERE 	h.refTransId = sd.id  \n" +
                "														AND h.refType = 'KR'  \n" +
                "														AND h.`status` = 'H'  \n" +
                "												ORDER BY h.id DESC  \n" +
                "												LIMIT 1  \n" +
                "										) a  \n" +
                "										UNION  \n" +
                "										SELECT 	b.haltTooltip  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "												FROM 	holdunholdtrans h  \n" +
                "												WHERE 	h.refTransId = sd.id  \n" +
                "														AND h.refType = 'KA'  \n" +
                "														AND h.`status` = 'H'  \n" +
                "												ORDER BY h.id DESC  \n" +
                "												LIMIT 1  \n" +
                "										) b  \n" +
                "								) c  \n" +
                "							) kitHalt,  \n" +
                "							p.woID,  \n" +
                "							p.workorderNumber,  \n" +
                "							p.id AS id,  \n" +
                "							p.salesOrderDetID,  \n" +
                "							p.refAssyId,  \n" +
                "							p.subAssyID,  \n" +
                "							p.plannKitNumber,  \n" +
                "							p.poQty,  \n" +
                "							p.poDueDate,  \n" +
                "							p.mfrLeadTime,  \n" +
                "							p.materialDockDate,  \n" +
                "							p.kitReleaseQty,  \n" +
                "							p.kitReleaseDate,  \n" +
                "							(DATEDIFF(fun_ConvertUTCDatetimeToSpecificTimeZone('\",vUTCDateTime,\"','\",v_TimeZone,\"'), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
                "							p.feasibilityWithAllocatedQty,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
                "							p.releasedBy,  \n" +
                "							p.releaseTimeFeasibility,  \n" +
                "							p.kitStatus,  \n" +
                "							p.rushJob,  \n" +
                "							p.woStatusID,  \n" +
                "							p.refPlanId,  \n" +
                "							p.releasedNote,  \n" +
                "							p.releaseKitNumber,  \n" +
                "							p.kitReturnStatus,  \n" +
                "							ka.kitPlanPercentage,  \n" +
                "							fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,'\",vUTCDateTime,\"'), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0), FALSE) kitReleaseIndicator,  \n" +
                "							ka.allocationUMIDCount allocationUMIDCount  \n" +
                "					FROM 		salesorderdet sd  \n" +
                "					INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "					INNER JOIN	component c ON sd.partID = c.id  \n" +
                "					Inner Join rfq_rohsmst r on r.id = c.RoHSStatusID  \n" +
                "					LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
                "					LEFT JOIN  	component cs ON kad.partId = cs.id  \n" +
                "					LEFT JOIN (  \n" +
                "							SELECT  salesOrderDetID, refAssyId, subAssyID,  \n" +
                "									COUNT(1) totalKitPlan,  \n" +
                "									SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) totalKitReleasePlan,  \n" +
                "									SUM(CASE WHEN kitStatus = 'P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "									SUM(kitReleaseQty) totalKitReleaseQty,  \n" +
                "									SUM(poQty) totalPOReleaseQty  \n" +
                "									FROM salesorder_plan_detailsmst WHERE isDeleted = 0  \n" +
                "									GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "						) AS sp ON sp.salesOrderDetID =  sd.id  AND sp.refAssyId = sd.partID  AND (CASE WHEN kad.partId = sd.partID THEN sp.subAssyID IS NULL ELSE sp.subAssyID = kad.partId END)  \n" +
                "					LEFT JOIN	(  \n" +
                "								SELECT 	a.refSalesOrderDetID,  \n" +
                "									a.assyID,  \n" +
                "									# a.binID,  \n" +
                "									COUNT(1) binCount,  \n" +
                "									SUM(a.uidCount) uidCount,  \n" +
                "									SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
                "								FROM 	(  \n" +
                "										SELECT 		k.refSalesOrderDetID,  \n" +
                "												k.assyID,  \n" +
                "												csd.binID,  \n" +
                "												COUNT(1) uidCount,  \n" +
                "												(  \n" +
                "													SELECT IF( EXISTS(  \n" +
                "														SELECT 	binId  \n" +
                "														FROM 	component_sid_stock  \n" +
                "														WHERE 	binID = csd.binID  \n" +
                "															AND isdeleted = 0  \n" +
                "															and isinstk  =1  \n" +
                "															AND id NOT IN (  \n" +
                "																SELECT 	refUIDId  \n" +
                "																FROM 	kit_allocation  \n" +
                "																WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
                "																		AND assyID = k.assyID  \n" +
                "																		AND `status` = 'A'  \n" +
                "															)  \n" +
                "													), 1, 0)  \n" +
                "												) mismatchUMIDBin  \n" +
                "											FROM 		kit_allocation k  \n" +
                "											INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "											INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "											INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "											WHERE		k.status = 'A'  \n" +
                "														AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
                "														AND	csd.isDeleted = 0  \n" +
                "														AND	b.isDeleted = 0  \n" +
                "														AND	w.isDeleted = 0  \n" +
                "											GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
                "									) AS a  \n" +
                "								GROUP BY   a.refSalesOrderDetID, a.assyID  \n" +
                "							) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	k.refSalesOrderDetID,  \n" +
                "									k.assyID,  \n" +
                "									k.totalLines,  \n" +
                "									k.shortageLines,  \n" +
                "									k.kitAllocationPercentage kitPlanPercentage,  \n" +
                "									(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  ,  \n" +
                "                                    k.minBuild  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	k.refSalesOrderDetID,  \n" +
                "											k.assyID,  \n" +
                "											COUNT(1) AS totalLines,  \n" +
                "											SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
                "											ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS kitAllocationPercentage  ,  \n" +
                "                                             min(minBuild) minBuild  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	vk.refSalesOrderDetID,  \n" +
                "														vk.assyID,  vk.qpaWithDnp,  \n" +
                "														vk.isNotRequiredKitAllocation AS isNotRequiredKitAllocation,  \n" +
                "														IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "														(CASE WHEN vk.connecterTypeID = -2 THEN vk.shortagePins ELSE vk.shortage END) AS shortage ,  \n" +
                "                                                        (  \n" +
                "															CASE  \n" +
                "																WHEN connecterTypeID = -2 THEN  \n" +
                "																	(IFNULL(allocatedpin, 0) / (IFNULL(qpaWithDnp, 0) * bomNumOfPosition))  \n" +
                "																ELSE  \n" +
                "																	(IFNULL(allocatedunit, 0) / IFNULL(qpaWithDnp, 0))  \n" +
                "  \n" +
                "															END  \n" +
                "														) AS minBuild  \n" +
                "												FROM 	vu_kit_allocation_detail vk  \n" +
                "                                                Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  AND sd.isDeleted = 0  \n" +
                "												WHERE    vk.`isNotRequiredKitAllocation` != 1 and vk.qpaWithDnp != 0  \n" +
                "											) k  GROUP BY k.refSalesOrderDetID, k.assyID  \n" +
                "									) k  \n" +
                "							) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
                "					LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
                "									AND p.refAssyId = sd.partID  \n" +
                "									AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
                "					WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
                "								AND 	s.isDeleted = 0  \n" +
                "								AND 	(\", v_WhereClauseFilter ,\")  \n" +
                "								AND 	(\", v_WhereClause ,\")  \n" +
                "				) AS a  \n" +
                "		) AS k WHERE 	(\", v_WhereKitFilterCondition ,\")  AND (\", v_WhereKitNameFilter ,\")  \n" +
                "	\");  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 kitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 actualKitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pBinID INT,  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pClusterWHID INT,  \n" +
                "	pKitSalesOrderDetID INT,  \n" +
                "	pKitAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_Where VARCHAR(10000);  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "  \n" +
                "	SET v_Where = \"\";  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "    IF (pGlobalSearchUIDString IS NOT NULL ) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.uid LIKE '%\", pGlobalSearchUIDString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  	IF ( pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.uid LIKE '%\", pSearchUIDString ,\"%' \");  \n" +
                "	END IF;  \n" +
                "	/* old Logic  \n" +
                "    IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND (css.id IN (  \n" +
                "				SELECT 	id  \n" +
                "				FROM 	component_sid_stock  \n" +
                "				WHERE 	isdeleted = 0  \n" +
                "						AND (uid LIKE '%\", pGlobalSearchUIDString ,\"%' AND uid LIKE '%\", pSearchUIDString ,\"%')  \n" +
                "			)  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
                "			SELECT 	id  \n" +
                "			FROM 	component_sid_stock  \n" +
                "			WHERE 	deletedAt IS NULL  \n" +
                "					AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchUIDString IS NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
                "			SELECT 	id  \n" +
                "			FROM 	component_sid_stock  \n" +
                "			WHERE 	deletedAt IS NULL  \n" +
                "					AND uid LIKE '%\", pSearchUIDString ,\"%'  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  */  \n" +
                "	IF (pBinID IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.binID  = \", pBinID);  \n" +
                "	END IF;  \n" +
                "   IF (pBinID IS  NULL and pClusterWHID is null  ) THEN  /*Xfer Screen if bin and warehouse both nulll then dont return any result of UMID*/  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  1 = 0\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pClusterWHID IS NOT NULL and pBinID is null) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.binID  in (SELECT id FROM binmst bm WHERE   isdeleted = 0 and  \n" +
                "															 bm.warehouseid in (Select id from warehousemst where id = \", pClusterWHID, \" and warehouseType ='SMC' )	)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.uid like '%\", pSearchString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"  \n" +
                "				SELECT 		css.id,  \n" +
                "						css.scanlabel,  \n" +
                "						css.pkgQty,  \n" +
                "						css.uid,  \n" +
                "						c.PIDCode,  \n" +
                "						c.mfgcodeID,  \n" +
                "						c.mfgPN,  \n" +
                "						mfg.mfgCode,  \n" +
                "						mfg.mfgName,  \n" +
                "						ro.rohsIcon,  \n" +
                "						ro.name AS rohsName,  \n" +
                "						css.nickName,  \n" +
                "						css.binID,  \n" +
                "						cast(NULL as char(50)) binName,  \n" +
                "						0 warehouseID,  \n" +
                "						cast(NULL as char(50)) warehouseName,  \n" +
                "						0 parentWHID,  \n" +
                "						cast(NULL as char(50)) deptName,  \n" +
                "						css.uom,  \n" +
                "						cast('' as char(100)) uomName,  \n" +
                "						false isAllocatedToKit,  \n" +
                "						css.receiveMaterialType,  \n" +
                "						css.refcompid,  \n" +
                "						css.pkgUnit,  \n" +
                "						false isBelongsToSameKit,  \n" +
                "						fun_getMountingTypeNameByID(c.mountingTypeID) mountingTypeName,  \n" +
                "						0 refSalesOrderDetID, 	0 assyID,  \n" +
                "						fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKits,  \n" +
                "						cast(NULL as char(50)) warehouseType,  \n" +
                "						c.isCustom,  \n" +
                "						css.updatedAt,  \n" +
                "                        fun_ConvertInternalDateCodeIntoDateInDefaultFormate(css.dateCode) internalDateCodeInDate  \n" +
                "				FROM 		component_sid_stock css  \n" +
                "				LEFT OUTER JOIN component c ON c.id=css.refcompid AND c.isdeleted=0  \n" +
                "				LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND ro.isdeleted=0  \n" +
                "				LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND mfg.isdeleted=0  \n" +
                "				WHERE	css.isdeleted = 0  \n" +
                "							AND css.isinStk = 1  \n" +
                "			\", v_Where , \" ORDER BY css.updatedAt DESC \"  \n" +
                "		);  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@SQLStatement1,\" ) c \");  \n" +
                "	PREPARE query1 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS Results AS \", @SQLStatement1, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @SQLStatement1;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	-- SET Bin name  \n" +
                "	UPDATE 	Results r, binmst b  \n" +
                "	SET   	r.binName = b.Name, r.warehouseID = b.WarehouseID  \n" +
                "	WHERE	r.binID = b.id;  \n" +
                "  \n" +
                "	-- SET warehouse name  \n" +
                "	UPDATE 	Results r, warehousemst w  \n" +
                "	SET   	r.warehouseName = w.Name, r.parentWHID = w.parentWHID, r.warehouseType = w.warehouseType  \n" +
                "	WHERE	r.warehouseID = w.id;  \n" +
                "  \n" +
                "	-- SET department name  \n" +
                "	UPDATE 	Results r, warehousemst w  \n" +
                "	SET   	r.deptName = w.Name  \n" +
                "	WHERE	r.parentWHID = w.id;  \n" +
                "  \n" +
                "	-- Set UOM  \n" +
                "	UPDATE 	Results r, uoms u  \n" +
                "	SET   	r.uomName = u.unitName  \n" +
                "	WHERE	r.uom = u.id;  \n" +
                "  \n" +
                "	-- Set UMID is allocated to kit  \n" +
                "	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
                "		UPDATE 	Results r, kit_allocation k  \n" +
                "		SET   	r.isAllocatedToKit = TRUE,  \n" +
                "			r.refSalesOrderDetID = k.refSalesOrderDetID,  \n" +
                "			r.assyID = k.assyID,  \n" +
                "			r.isBelongsToSameKit = (CASE WHEN k.refSalesOrderDetID = pKitSalesOrderDetID AND k.assyID = pKitAssyID THEN TRUE ELSE FALSE END)  \n" +
                "		WHERE	r.id = k.refUIDId  \n" +
                "		AND 	k.status = 'A'  \n" +
                "		AND 	k.refSalesOrderDetID = pKitSalesOrderDetID  \n" +
                "		AND 	k.assyID = pKitAssyID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results  ORDER BY isAllocatedToKit ASC, internalDateCodeInDate ASC  \"); -- order by isBelongsToSameKit desc  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5937,'2.00','V1','Bug 41365 & User Story 39783 - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
            case 5937:
  allDbChangesArray.push(
  /* **************************** New Script -> 17-02-2022 *********************************** */
      "DROP VIEW vu_activeassyobsolatedpartlist;  \n" +
      "CREATE VIEW `vu_activeassyobsolatedpartlist` AS  \n" +
      "SELECT  \n" +
      "  `a`.`MfgCode`        AS `MfgCode`,  \n" +
      "  `a`.`AssyID`         AS `AssyID`,  \n" +
      "  `a`.`mfgPN`          AS `MfgPN`,  \n" +
      "  `a`.`RoHSStatus`     AS `RoHSStatus`,  \n" +
      "  `a`.`lineid`         AS `lineid`,  \n" +
      "  `a`.`qpa`            AS `qpa`,  \n" +
      "  `a`.`refDesig`       AS `refdesig`,  \n" +
      "  `a`.`pidcode`        AS `pidcode`,  \n" +
      "  `a`.`partStatus`     AS `partStatus`,  \n" +
      "  `a`.`PartStatusName` AS `PartStatusName`,  \n" +
      "  `a`.`ltbdate`        AS `ltbdate`,  \n" +
      "  `a`.`eolDate`        AS `eolDate`,  \n" +
      "  `a`.`LastModifyDate` AS `LastModifyDate`  \n" +
      "FROM (SELECT  \n" +
      "        `FUN_GETMFGCODEANDNAMEBYID`(`d`.`mfgcodeID`)  AS `MfgCode`,  \n" +
      "        `d`.`PIDCode`         AS `AssyID`,  \n" +
      "        `d`.`mfgPN`           AS `mfgPN`,  \n" +
      "        `FUN_GETROHSNAMEBYID`(`d`.`RoHSStatusID`)  AS `RoHSStatus`,  \n" +
      "        `e`.`lineID`          AS `lineid`,  \n" +
      "        `e`.`qpa`             AS `qpa`,  \n" +
      "        `e`.`refDesig`        AS `refDesig`,  \n" +
      "        `c`.`PIDCode`         AS `pidcode`,  \n" +
      "        `c`.`partStatus`      AS `partStatus`,  \n" +
      "        `c`.`ltbDate`         AS `ltbdate`,  \n" +
      "        `c`.`eolDate`         AS `eolDate`,  \n" +
      "        (SELECT `g`.`name` FROM `component_partstatusmst` `g` WHERE (`g`.`id` = `c`.`partStatus`)) AS `PartStatusName`,  \n" +
      "        IFNULL(`cle`.`updatedAtApi`,`c`.`updatedAt`) AS `LastModifyDate`  \n" +
      "      FROM rfq_lineitems_alternatepart b JOIN `component` c ON c.id=b.mfgPNID  \n" +
      "      JOIN  `component` `d` ON `d`.`id` = `b`.`partID`  \n" +
      "      JOIN `rfq_lineitems` `e` ON `b`.`rfqLineItemsID` = `e`.`id`  \n" +
      "      LEFT JOIN component_last_external_apicall cle ON  c.id=cle.refComponentID  \n" +
      "      WHERE `b`.`mfgPNID` IS NOT NULL AND `b`.`partID` IN(SELECT  \n" +
      "                                   `a`.`id`  \n" +
      "                                 FROM `component` `a`  \n" +
      "                                 WHERE (`a`.`category` = 3))) `a`  \n" +
      "WHERE (`a`.`PartStatusName` <> 'Active')  \n" +
      "ORDER BY `a`.`LastModifyDate` DESC;  \n" +
  /* **************************** New Script -> 17-02-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5938,'2.00','V1',' Alter view vu_activeassyobsolatedpartlist - CC '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
case 5938:
  allDbChangesArray.push(
  /* **************************** New Script -> 17-02-2022 *********************************** */
      "DROP function IF EXISTS `fun_getCommonConsolidateLineMFGPN_New`;  \n" +
      "CREATE FUNCTION `fun_getCommonConsolidateLineMFGPN_New`(  \n" +
      "  pIsPackaging TINYINT,  \n" +
      "  pRfqAssyID INT,  \n" +
      "  pCustomerID INT  \n" +
      "	) RETURNS longtext CHARSET utf8mb4  \n" +
      "BEGIN  \n" +
      "	DECLARE result TEXT;  \n" +
      "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
      "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
      "		SELECT  CONCAT('(SELECT  \n" +
      "			GROUP_CONCAT(  \n" +
      "				IFNULL(REPLACE(REPLACE(a.PIDCode,\",\",\"***\"),\",\",\"..\"),\"N/A\"),''@@@'',  \n" +
      "				a.RoHSStatusID,''@@@'',  \n" +
      "				IFNULL(a.name,\"\"),''@@@'',  \n" +
      "				IFNULL(a.rohsIcon,\"\"),''@@@'',  \n" +
      "				IFNULL(a.isCustom,\"\"),''@@@'',  \n" +
      "				REPLACE(IFNULL(a.feature,\"\"),\",\",\"\"),''@@@'',  \n" +
      "				IFNULL(a.partStatusName,\"\"),''@@@'',  \n" +
      "				REPLACE(IFNULL(a.partStatusColor,\"\"),\",\",\"***\"),''@@@'',  \n" +
      "				REPLACE(IFNULL(a.partTBD,\"\"),\",\",\"***\"),''@@@'',  \n" +
      "				IFNULL(a.restrictUseInBOMStep,0) ,''@@@'',  \n" +
      "				IFNULL(a.restrictUseInBOMWithPermissionStep,0),''@@@'',  \n" +
      "				IFNULL(a.restrictUsePermanentlyStep,1) ,''@@@'',  \n" +
      "				IFNULL(a.restrictUseWithPermissionStep,1),''@@@'',  \n" +
      "				IFNULL(a.restrictUseInBOMExcludingAliasStep,0),''@@@'',  \n" +
      "				IFNULL(a.restrictUseInBOMExcludingAliasWithPermissionStep,0),''@@@'',  \n" +
      "				IFNULL(a.restrictUseExcludingAliasStep,1),''@@@'',  \n" +
      "				IFNULL(a.restrictUseExcludingAliasWithPermissionStep,1),''@@@'','''',''@@@'','''',''@@@'','''',''@@@'',  \n" +
      "				IFNULL(a.approvedMountingType,0),''@@@'',  \n" +
      "				IFNULL(a.mismatchMountingTypeStep,1),''@@@'' ,  \n" +
      "				REPLACE(a.mfgPN,\",\",\"***\"),''@@@'',  \n" +
      "				a.mfgCode,''@@@'',  \n" +
      "				a.mfgPNID,''@@@'',  \n" +
      "				IFNULL(a.isDocumentUpload,0), ''@@@'',  \n" +
      "                ifnull(a.custAssyPN,''''), ''@@@'',  \n" +
      "                IFNULL(a.mismatchFunctionalCategoryStep,1)  \n" +
      "                SEPARATOR \"', v_GroupConcatSeparator ,'\")  \n" +
      "			FROM  \n" +
      "			( select z.mfgPNID ,PIDCode,RoHSStatusID , fun_getRoHSNameByID(z.RoHSStatusID)  AS `name`,fun_getRoHSIconByID(z.RoHSStatusID)  AS rohsIcon,  \n" +
      "						fun_getPartStatusNameByID(z.partStatus) AS partStatusName,  \n" +
      "                        approvedMountingType, mismatchMountingTypeStep, mismatchFunctionalCategoryStep,  \n" +
      "                        fun_getPartStatusColorByID(z.partStatus) AS partStatusColor,  \n" +
      "						fun_getPartTBDDetails(z.mfgPNID) partTBD,  \n" +
      "						fun_getMfgCodeByID(z.mfgCodeID)  mfgCode,  z.iscustom,`z`.`custAssyPN` as custAssyPN,  z.feature, z.mfgpn,z.isDocumentUpload,  \n" +
      "						 max(z.restrictUseInBOMStep) restrictUseInBOMStep,  \n" +
      "						 max(restrictUseInBOMWithPermissionStep) restrictUseInBOMWithPermissionStep,  \n" +
      "						 min(restrictUsePermanentlyStep) restrictUsePermanentlyStep,  \n" +
      "						 min(restrictUseWithPermissionStep) restrictUseWithPermissionStep,  \n" +
      "						 max(restrictUseInBOMExcludingAliasStep) restrictUseInBOMExcludingAliasStep ,  \n" +
      "						 max(restrictUseInBOMExcludingAliasWithPermissionStep) restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
      "						 min(restrictUseExcludingAliasStep) restrictUseExcludingAliasStep,  \n" +
      "						 min(restrictUseExcludingAliasWithPermissionStep) restrictUseExcludingAliasWithPermissionStep  \n" +
      "						  from  \n" +
      "							(SELECT IFNULL(d.id,c.id) AS mfgPNID ,  \n" +
      "									ifnull(d.mfgcodeID,c.mfgCodeId) mfgCodeID,  \n" +
      "									IFNULL(d.mfgPN,c.mfgPN) AS mfgPN,  \n" +
      "								   IFNULL(d.PIDCode,c.PIDCode)  AS PIDCode,  IFNULL(d.RoHSStatusID,c.RoHSStatusID)  AS  RoHSStatusID,  \n" +
      "								   IFNULL(d.feature,c.feature)  AS feature,   IFNULL(d.isCustom,c.isCustom)  AS isCustom,  \n" +
      "                                    IFNULL(`d`.`custAssyPN`, `c`.`custAssyPN`) AS `custAssyPN`,  \n" +
      "								   IFNULL(d.partStatus,c.partStatus) as partStatus,	IFNULL(al.restrictUseInBOMStep,0) restrictUseInBOMStep, 	/*Only Restrict from BOM*/  \n" +
      "								   IFNULL(al.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,  \n" +
      "								   CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN  /*BOM Part */  \n" +
      "										IFNULL(al.restrictUsePermanentlyStep,1)  \n" +
      "									ELSE    /*Packaging Alias*/  \n" +
      "										CASE WHEN IFNULL(d.restrictUsePermanently,0) = 1 THEN 0 ELSE 1 END   /*Restrct from part master , UI side 0 equal to restrict*/  \n" +
      "									END AS restrictUsePermanentlyStep,  \n" +
      "									IFNULL(al.restrictUseWithPermissionStep,1)  restrictUseWithPermissionStep, /*Based on BOM Permission Packaging Alias will allow/Disallow  */  \n" +
      "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then/*BOM Part*/  \n" +
      "											IFNULL(al.restrictUseInBOMExcludingAliasStep,0)   /*Ui side 1 equal to restrict value*/  \n" +
      "									ELSE  \n" +
      "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
      "									END AS restrictUseInBOMExcludingAliasStep,  \n" +
      "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) then /*BOM Part*/  \n" +
      "										IFNULL(al.restrictUseInBOMExcludingAliasWithPermissionStep,0)  \n" +
      "									ELSE     /*Packaging Alias*/  \n" +
      "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 1 else 0 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
      "									END AS restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
      "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*Bom Part*/  \n" +
      "										IFNULL(al.restrictUseExcludingAliasStep,1)   /*UI Side 0 equal to restrict*/  \n" +
      "									ELSE  \n" +
      "										case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
      "									END AS restrictUseExcludingAliasStep,  \n" +
      "									CASE WHEN al.mfgPnId = IFNULL(d.id,al.mfgPnId) THEN /*BOM Part*/  \n" +
      "										 IFNULL(al.restrictUseExcludingAliasWithPermissionStep,1) /*UI Side 0 equal to restrict*/  \n" +
      "									ELSE  \n" +
      "									case when (ifnull(d.restrictUsePermanently,0)+ ifnull(d.restrictUSEwithpermission,0)+ifnull(d.restrictPackagingUsePermanently,0)+ifnull(d.restrictPackagingUseWithpermission,0) > 0) then 0 else 1 end /*In packaging Alias we have to check at part level if packaging alias is restric then we not allow */  \n" +
      "									END AS restrictUseExcludingAliasWithPermissionStep,  \n" +
      "									IFNULL(al.approvedMountingType,0) approvedMountingType,  \n" +
      "									IFNULL(al.mismatchMountingTypeStep,1) mismatchMountingTypeStep,  \n" +
      "									IFNULL(al.mismatchFunctionalCategoryStep,1) mismatchFunctionalCategoryStep,  \n" +
      "									IFNULL(ccl.isDocumentUpload,IFNULL(ccld.isDocumentUpload,0)) AS isDocumentUpload  \n" +
      "									FROM rfq_consolidated_mfgpn_lineitem_alternate  al  \n" +
      "									JOIN rfq_consolidated_mfgpn_lineitem l ON  l.id = al.consolidateID  \n" +
      "									JOIN component c ON al.mfgPNID = c.id  \n" +
      "									LEFT JOIN Component d ON c.packagingGroupid = d.packagingGroupid  \n" +
      "									and  not exists ( select 1  from  rfq_consolidated_mfgpn_lineitem_alternate x  \n" +
      "													where  x.consolidateID  =  al.consolidateID  \n" +
      "															 and x.mfgpnid = d.id  \n" +
      "															 and d.id != c.id and `x`.`isdeleted` = 0)  \n" +
      "									LEFT JOIN component_customer_loa ccl ON ccl.componentID = c.id AND ccl.customerID = ',pCustomerID,' AND ccl.isDeleted = 0  \n" +
      "									LEFT JOIN component_customer_loa ccld ON ccld.componentID = d.id AND ccld.customerID = ',pCustomerID,' AND ccld.isDeleted = 0  \n" +
      "									WHERE l.rfqAssyid = ', pRfqAssyID,'  \n" +
      "									AND l.id = rl.id AND al.isDeleted = 0 ',  \n" +
      "									CASE WHEN (pIsPackaging = 0) THEN ' AND c.id = IFNULL(d.id,c.id)' ELSE '' END ,'  \n" +
      "							) z group by  z.mfgPNID ,z.mfgCodeID,z.PIDCode,z.RoHSStatusID , z.partStatus,z.approvedMountingType,z.mismatchMountingTypeStep, z.mismatchFunctionalCategoryStep ,z.iscustom ,z.feature,z.mfgpn,z.isDocumentUpload, z.custAssyPN  \n" +
      "					) a  \n" +
      "  		) AS mfgPN')  INTO @result;  \n" +
      "	SET result = @result;  \n" +
      "	RETURN result;  \n" +
      "    END;  \n" +
     
  /* **************************** New Script -> 17-02-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5939,'2.00','V1',' fun_getCommonConsolidateLineMFGPN_New - CC '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
case 5939:
  allDbChangesArray.push(
  /* **************************** New Script -> 18-02-2022 *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_getComponentDetailByPartNumber` ;  \n" +
      "CREATE PROCEDURE `Sproc_getComponentDetailByPartNumber`(  \n" +
      "    IN ppartNumber VARCHAR(100),  \n" +
      "    IN pmfgtype VARCHAR(50)  \n" +
      "  \n" +
      "	)  \n" +
      "BEGIN  \n" +
      "  \n" +
      "    SELECT c.id,  \n" +
      "           c.mfgPN,  \n" +
      "           c.mfgcodeID,  \n" +
      "           c.mfgPNDescription,  \n" +
      "           c.imageURL,  \n" +
      "           c.isGoodPart,  \n" +
      "           mcm.mfgCode AS supplier,  \n" +
      "           c.isCustom,  \n" +
      "           m.mfgCode,  \n" +
      "           m.mfgName,  \n" +
      "           c.RoHSStatusID,  \n" +
      "           rr.name,  \n" +
      "           rr.rohsIcon,  \n" +
      "           c.refSupplierMfgpnComponentID,  \n" +
      "           mc.mfgPN AS mfgPartNumber,  \n" +
      "           mcd.mfgCode AS mfgPartManufacturerCode,  \n" +
      "           mcd.mfgName AS mfgPartManufacturerName,  \n" +
      "           m.mfgType,  \n" +
      "           '' otherPartName  \n" +
      "               FROM COMPONENT c JOIN mfgcodemst m ON m.id=c.mfgcodeID AND m.isdeleted=0  \n" +
      "               JOIN rfq_rohsmst rr ON rr.id=c.RoHSStatusID AND rr.isdeleted=0  \n" +
      "               LEFT JOIN component_last_external_apicall cle ON cle.refComponentID=c.id  \n" +
      "               LEFT JOIN mfgcodeMst mcm ON  mcm.id=cle.supplierID  \n" +
      "               LEFT JOIN COMPONENT mc ON mc.id=c.refSupplierMfgpnComponentID AND mc.isdeleted=0  \n" +
      "               LEFT JOIN mfgcodemst mcd ON mcd.id=mc.mfgcodeID AND mcd.isdeleted=0  \n" +
      "    WHERE c.mfgPn=ppartNumber AND c.isdeleted=0 AND m.mfgType=IFNULL(pmfgtype,m.mfgType)  \n" +
      "  \n" +
      "    UNION  \n" +
      "  \n" +
      "     SELECT c.id,  \n" +
      "           c.mfgPN,  \n" +
      "           c.mfgcodeID,  \n" +
      "           c.mfgPNDescription,  \n" +
      "           c.imageURL,  \n" +
      "           c.isGoodPart,  \n" +
      "           mcm.mfgCode AS supplier,  \n" +
      "           c.isCustom,  \n" +
      "           m.mfgCode,  \n" +
      "           m.mfgName,  \n" +
      "           c.RoHSStatusID,  \n" +
      "           rr.name,  \n" +
      "           rr.rohsIcon,  \n" +
      "           c.refSupplierMfgpnComponentID,  \n" +
      "           mc.mfgPN AS mfgPartNumber,  \n" +
      "           mcd.mfgCode AS mfgPartManufacturerCode,  \n" +
      "           mcd.mfgName AS mfgPartManufacturerName,  \n" +
      "           m.mfgType,  \n" +
      "           co.name AS otherPartName  \n" +
      "               FROM component_otherpn co JOIN COMPONENT c ON c.id=co.refComponentID  \n" +
      "               JOIN mfgcodemst m ON m.id=c.mfgcodeID AND m.isdeleted=0  \n" +
      "               JOIN rfq_rohsmst rr ON rr.id=c.RoHSStatusID AND rr.isdeleted=0  \n" +
      "               LEFT JOIN component_last_external_apicall cle ON cle.refComponentID=c.id  \n" +
      "               LEFT JOIN mfgcodeMst mcm ON  mcm.id=cle.supplierID  \n" +
      "               LEFT JOIN COMPONENT mc ON mc.id=c.refSupplierMfgpnComponentID AND mc.isdeleted=0  \n" +
      "               LEFT JOIN mfgcodemst mcd ON mcd.id=mc.mfgcodeID AND mcd.isdeleted=0  \n" +
      "         WHERE co.name=ppartNumber AND c.isdeleted=0 AND m.mfgType=IFNULL(pmfgtype,m.mfgType);  \n" +
      "  \n" +
      "  \n" +
      "    END;  \n" +
  /* **************************** New Script -> 18-02-2022 *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_GetActiveManualPartDetail` ;  \n" +
      "CREATE PROCEDURE `Sproc_GetActiveManualPartDetail`(  \n" +
      "	IN ppartID INT(11)  \n" +
      "    )  \n" +
      "BEGIN  \n" +
      "	SELECT DISTINCT rl.lineID, rla.mfgCode AS MFR, c.mfgPN, c.PIDCode, rl.custPN AS CPN, rl.customerRev AS CPNRev  \n" +
      "	FROM rfq_lineitems_alternatepart rla  \n" +
      "	JOIN COMPONENT c ON c.id = rla.mfgPnId  \n" +
      "	LEFT JOIN component_last_external_apicall cle ON cle.refComponentID=c.id  \n" +
      "	JOIN rfq_lineitems rl ON rl.id = rla.rfqLineItemsID AND rl.isDeleted = 0  \n" +
      "	WHERE rla.partID = ppartID AND c.createdBy != \"Auto\" AND c.category !=3 AND cle.supplierID IS NULL AND  \n" +
      "	  rla.isdeleted = 0  \n" +
      "      AND EXISTS  \n" +
      "		(  \n" +
      "			SELECT 1 FROM component_partstatusmst  \n" +
      "			WHERE id = c.partStatus AND `name` = 'Active' AND deletedAT IS NULL  \n" +
      "		)  \n" +
      "      ORDER BY rl.lineID;  \n" +
      "END;  \n" +
  /* **************************** New Script -> 18-02-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5940,'2.00','V1',' Sproc_getComponentDetailByPartNumber-CC '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
case 5940:
  allDbChangesArray.push(
  /* **************************** New Script -> 21-02-2022 *********************************** */
      "DROP procedure IF EXISTS `Sproc_GetAssyCompListForCustomerPackingSlipMISC`;  \n" +
      "CREATE PROCEDURE `Sproc_GetAssyCompListForCustomerPackingSlipMISC`(  \n" +
      "	IN pCustomerID INT,  \n" +
      "	IN pSearch VARCHAR(300),  \n" +
      "	IN pPartID INT,  \n" +
      "	IN pisFromSO TINYINT  ,  \n" +
      "    IN pSalesOrderID INT  \n" +
      ")  \n" +
      "BEGIN  \n" +
      "	/*NOTE:	pSalesOrderID is used for  RMA SO  for fetching part of original Q2C SO      */  \n" +
      "	DECLARE v_respOfGetAcquiredMFRListFn INT;  \n" +
      "    DECLARE vMfgCodeFormat INT;  \n" +
      "    select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
      "  \n" +
      "	DROP TEMPORARY TABLE IF EXISTS temp_Customers;  \n" +
      "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_Customers (  \n" +
      "		customerID INT  \n" +
      "    );  \n" +
      "    /* If Selected customer's isComapny true then make it null as in case of company we have to fetch all customer's assembly*/  \n" +
      "    IF (SELECT COUNT(1) FROM mfgcodemst WHERE id=pCustomerID AND isCompany = 1) > 0 THEN  \n" +
      "		SET pCustomerID = NULL;  \n" +
      "	END IF;  \n" +
      "  \n" +
      "    /* IF customer selected and is comapny is not true then we have select customer based on acquire, and supplier mapping*/  \n" +
      "    IF 	pCustomerID IS NOT NULL THEN  \n" +
      "		SELECT fun_getAcquiredMFRList(pCustomerID) INTO v_respOfGetAcquiredMFRListFn;  \n" +
      "  \n" +
      "        INSERT INTO temp_Customers  \n" +
      "		SELECT buyTo AS customerID  \n" +
      "		FROM acquireCustomers  \n" +
      "		union all  \n" +
      "       # INSERT INTO temp_Customers  \n" +
      "        SELECT smm.refMfgCodeMstID AS customerID  \n" +
      "		FROM supplier_mapping_mst smm  \n" +
      "		WHERE smm.supplierID = pCustomerID  \n" +
      "        AND smm.isDeleted = 0  \n" +
      "        AND smm.isCustMapping=0;  \n" +
      "	END IF;  \n" +
      "	IF pSalesOrderID IS NULL THEN  \n" +
      "			/* Select assembly, sales kit, custom part and cpn part of selected customer and all the off the self MFR parts*/  \n" +
      "			SELECT *  \n" +
      "			FROM (  \n" +
      "				SELECT 	co.id,            	co.mfgPN,				co.PIDCode,			co.mfgPNDescription AS description,  \n" +
      "						co.rev,				co.nickName,			co.partType,		u.unitName,				u.id unitID,  \n" +
      "						ro.rohsIcon,		ro.name AS rohsName,	CONCAT('(', mfg.mfgcode, ')', ' ', co.mfgPN) combinemfgPN,  \n" +
      "						co.mfgcodeID,		 cst.co_standards as standards,  \n" +
      "                        fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgCodeFormat) mfgName,  \n" +
      "						mfg.mfgType,		co.category,            co.iscustom,		co.isCPN,  \n" +
      "						cst.componentStandardList,					co.rfqOnly,			co.partStatus  \n" +
      "				FROM 	component co  \n" +
      "				INNER JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id  #AND mfg.isDeleted = 0  \n" +
      "				INNER JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id #AND ro.isDeleted = 0  \n" +
      "				INNER JOIN uoms u ON co.uom = u.id #AND u.isDeleted = 0  \n" +
      "				LEFT JOIN (  \n" +
      "					SELECT 	csd.componentID,  \n" +
      "							GROUP_CONCAT(cs.fullName) componentStandardList,  \n" +
      "							GROUP_CONCAT(CASE WHEN csd.classID IS NULL  \n" +
      "													THEN cs.fullName  \n" +
      "												ELSE  \n" +
      "													(SELECT GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))  \n" +
      "													FROM standard_class s  \n" +
      "													WHERE s.classID = csd.classID AND isDeleted = 0)  \n" +
      "										END  \n" +
      "										ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC  \n" +
      "										SEPARATOR ', ') co_standards  \n" +
      "					FROM component_standard_details csd  \n" +
      "					INNER JOIN certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID AND cs.isDeleted = 0  \n" +
      "					WHERE csd.isDeleted = 0  \n" +
      "					GROUP BY csd.componentID  \n" +
      "				) cst ON co.id = cst.componentID  \n" +
      "				WHERE co.id > 0  \n" +
      "				AND  co.mfgType = 'MFG'  \n" +
      "				AND (CASE WHEN (co.iscustom = 1 AND pCustomerID IS NOT NULL)  \n" +
      "								THEN (EXISTS (SELECT 1 FROM temp_Customers ta WHERE ta.customerID = co.mfgCodeID))  \n" +
      "							  ELSE 1 = 1  END)  \n" +
      "				AND co.id = IFNULL(pPartID, co.id)  \n" +
      "				AND co.partstatus!=(CASE WHEN pisFromSO=1 THEN -3 ELSE 0 END)  \n" +
      "				AND co.isDeleted = 0  \n" +
      "				AND co.isGoodPart = 1  \n" +
      "               and  co.partType not in (4)  \n" +
      "				#AND co.partType != 4  \n" +
      "			) AS co  \n" +
      "			WHERE (CASE WHEN pSearch IS NOT NULL  \n" +
      "						THEN (co.PIDCode LIKE CONCAT('%',pSearch,'%') OR co.combinemfgPN LIKE CONCAT('%',pSearch,'%'))  \n" +
      "						ELSE 1 = 1  \n" +
      "				END);  \n" +
      "    ELSE  \n" +
      "			/* Select assembly, sales kit, custom part and cpn part of selected customer and all the off the self MFR parts*/  \n" +
      "			SELECT *  \n" +
      "			FROM (  \n" +
      "				SELECT 	co.id,            	co.mfgPN,				co.PIDCode,			co.mfgPNDescription AS description,  \n" +
      "						co.rev,				co.nickName,			co.partType,		u.unitName,				u.id unitID,  \n" +
      "						ro.rohsIcon,		ro.name AS rohsName,	CONCAT('(', mfg.mfgcode, ')', ' ', co.mfgPN) combinemfgPN,  \n" +
      "						co.mfgcodeID,		 cst.co_standards as standards,  \n" +
      "                        fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgCodeFormat) mfgName,  \n" +
      "						mfg.mfgType,		co.category,            co.iscustom,		co.isCPN,  \n" +
      "						cst.componentStandardList,					co.rfqOnly,			co.partStatus  ,sod.custPOLineNumber  \n" +
      "				FROM 	component co  \n" +
      "				INNER JOIN mfgcodemst mfg ON co.mfgCodeID = mfg.id  #AND mfg.isDeleted = 0  \n" +
      "				INNER JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id #AND ro.isDeleted = 0  \n" +
      "				INNER JOIN uoms u ON co.uom = u.id #AND u.isDeleted = 0  \n" +
      "				LEFT JOIN (  \n" +
      "					SELECT 	csd.componentID,  \n" +
      "							GROUP_CONCAT(cs.fullName) componentStandardList,  \n" +
      "							GROUP_CONCAT(CASE WHEN csd.classID IS NULL  \n" +
      "													THEN cs.fullName  \n" +
      "												ELSE  \n" +
      "													(SELECT GROUP_CONCAT(cs.fullName, ' ', IFNULL(className, ''))  \n" +
      "													FROM standard_class s  \n" +
      "													WHERE s.classID = csd.classID AND isDeleted = 0)  \n" +
      "										END  \n" +
      "										ORDER BY cs.priority IS NULL , cs.priority ASC , cs.fullName ASC  \n" +
      "										SEPARATOR ', ') co_standards  \n" +
      "					FROM component_standard_details csd  \n" +
      "					INNER JOIN certificate_standards cs ON csd.certificateStandardID = cs.certificateStandardID AND cs.isDeleted = 0  \n" +
      "					WHERE csd.isDeleted = 0  \n" +
      "					GROUP BY csd.componentID  \n" +
      "				) cst ON co.id = cst.componentID  \n" +
      "				JOIN salesorderdet sod ON sod.partID = co.id and sod.isDeleted = 0  \n" +
      "				WHERE co.id = IFNULL(pPartID, co.id)  \n" +
      "				AND co.mfgType = 'MFG'  \n" +
      "				AND co.isDeleted = 0  \n" +
      "                AND co.partstatus!= -3  \n" +
      "                AND co.partType != 4  \n" +
      "                and sod.refSalesOrderId = pSalesOrderID  \n" +
      "			) AS co  ;  \n" +
      "	END IF;  \n" +
      "END;  \n" +
  /* **************************** Add Script Version -> 21-02-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5941,'2.00','V1',' Tune Procedure Sproc_GetAssyCompListForCustomerPackingSlipMISC - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
case 5941:
  allDbChangesArray.push(
  /* **************************** New Script -> 21-02-2022 *********************************** */
      "ALTER TABLE `component`  \n" +
      "DROP INDEX `idx_id_desc` ,  \n" +
      "ADD INDEX `idx_id_desc` (`id` DESC, `mfgType` ASC) VISIBLE;  \n" +
      "ALTER TABLE `uoms`  \n" +
      "ADD INDEX `idx_uoms_isdeleted_id` (`id` ASC, `isDeleted` ASC, `unitName` ASC) VISIBLE;  \n" +
      "ALTER TABLE `rfq_rohsmst`  \n" +
      "ADD INDEX `idx_rfq_rohsmst_isdeleted` (`id` ASC, `isDeleted` ASC, `name` ASC) VISIBLE;  \n" +

  /* **************************** Add Script Version -> 21-02-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5942,'2.00','V1',' created new indexes in Component,uoms, rfq_rohsmst -DP '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
case 5942:
  allDbChangesArray.push(
  /* **************************** New Script -> 22-02-2022 *********************************** */
      "DROP procedure IF EXISTS `Sproc_CreateRfqConsolidateLineItem`;  \n" +
      "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(  \n" +
      "	IN prfqAssyID INT,  \n" +
      "    IN ppartID INT,  \n" +
      "	IN puserID INT,  \n" +
      "    IN pBOMVersion VARCHAR(50)  \n" +
      ")  \n" +
      "BEGIN  \n" +
      "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
      "BEGIN  \n" +
      "	ROLLBACK;  \n" +
      "	RESIGNAL;  \n" +
      "END;  \n" +
      "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
      "  BEGIN  \n" +
      "	ROLLBACK;  \n" +
      "	RESIGNAL;  \n" +
      "END;  \n" +
      " DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqConsolidateLineItem;  \n" +
      "  \n" +
      "  START TRANSACTION;  \n" +
      "	SET SESSION group_concat_max_len = 500000;  \n" +
      "# consoliadte select  \n" +
      "		 DROP TEMPORARY TABLE IF EXISTS tempconsolidate;  \n" +
      "		 CREATE TEMPORARY TABLE IF NOT EXISTS tempconsolidate AS  \n" +
      "		 SELECT id FROM  rfq_consolidated_mfgpn_lineitem WHERE isDeleted=0 AND rfqAssyID = prfqAssyID;  \n" +
      "  \n" +
      "  /* call SP for generate consolidated data in temp_Sproc_CreateRfqConsolidateLineItem temporary table */  \n" +
      "        CALL Sproc_CreateConsolidateDataForPart(prfqAssyID, ppartID);  \n" +
      "  \n" +
      "# Delete consolidated lineItem if consolidatedLineItemIDs  change  \n" +
      "		UPDATE rfq_consolidated_mfgpn_lineitem cl  \n" +
      "        SET  \n" +
      "        cl.isDeleted = TRUE,  \n" +
      "        cl.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        cl.deletedBy = puserID  \n" +
      "        WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0  \n" +
      "        AND NOT EXISTS (  \n" +
      "			SELECT  1 FROM (  \n" +
      "				SELECT rcl.id FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
      "				INNER JOIN temp_Sproc_CreateRfqConsolidateLineItem R ON R.rfqAssyIDORrefSalesOrderdetID = rcl.rfqAssyID AND rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND R.category <> 3  \n" +
      "				WHERE rcl.rfqAssyID = prfqAssyID  \n" +
      "				AND rcl.isDeleted = 0  \n" +
      "			)a WHERE a.id = cl.id  \n" +
      "        );  \n" +
      "  \n" +
      "# insert Consolidated lineItems  \n" +
      "		INSERT INTO `rfq_consolidated_mfgpn_lineitem`  \n" +
      "        (`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`rfqLineItemID`,`uomID`,  \n" +
      "        `qpa`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`numOfPosition`,`isMultiple`,`consolidatedLineItemIDs`,`refDesig`,`consolidatedpartlineID`,`isqpaMismatch`,  \n" +
      "        `restrictCPNUseInBOMStep`, `restrictCPNUsePermanentlyStep`, `restrictCPNUseWithPermissionStep`, `custPNID`,`consolidateRestrictPartDetail`,`consolidatedPartWithFlagDetail`)  \n" +
      "        SELECT R.`lineID`,R.`isInstall`,R.`isPurchaseWithDNP`,prfqAssyID `rfqAssyID`,  \n" +
      "        R.`rfqLineItemsID`,R.`uomID`, R.`qpa`, fun_DatetimetoUTCDateTime() `createdAt`, puserID `createdBy`, fun_DatetimetoUTCDateTime() `updatedAt`,  \n" +
      "        puserID `updatedBy`, R.`numOfPosition`,(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`,  \n" +
      "        R.`consolidatedLineItemIDs`, R.`consolidatedrefDesig`,R.`consolidatedpartlineID`,R.`isqpaMismatch`, R.`restrictCPNUseInBOMStep`, R.`restrictCPNUsePermanentlyStep`,  \n" +
      "        R.`restrictCPNUseWithPermissionStep`, R.`custPNID`,R.`consolidateRestrictPartDetail`, R.`consolidatedPartWithFlagDetail`  \n" +
      "        FROM temp_Sproc_CreateRfqConsolidateLineItem R  \n" +
      "        LEFT JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND cl.rfqAssyID = prfqAssyID  \n" +
      "        AND cl.rfqAssyID = R.rfqAssyIDORrefSalesOrderdetID AND cl.isDeleted = 0  \n" +
      "        WHERE cl.id IS NULL AND R.category <> 3;  \n" +
      "# insert Consolidated lineItems Quentity  \n" +
      "		INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`  \n" +
      "        (`qtyID`,`consolidateID`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`rfqPriceGroupId`,`rfqPriceGroupDetailId`)  \n" +
      "        SELECT rq.id `qtyID`, cl.id `consolidateID`,puserID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`, puserID `updatedBy`,fun_DatetimetoUTCDateTime() `updatedAt`,rq.rfqPriceGroupId ,rq.rfqPriceGroupDetailId  \n" +
      "        FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
      "        JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND rq.isDeleted = 0  \n" +
      "        LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id  \n" +
      "        WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND clq.id IS NULL;  \n" +
      "# Update Consilidated LineItems Quantity  \n" +
      "  \n" +
      "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT qpa,consolidatedLineItemIDs FROM temp_Sproc_CreateRfqConsolidateLineItem WHERE category <> 3) Rs,  \n" +
      "        (  \n" +
      "			SELECT cl.id ,cl.qpa,cl.consolidatedLineItemIDs,consolidateRestrictPartDetail FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
      "			WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND cl.id  IS NOT NULL  \n" +
      "		) rcl  \n" +
      "        SET  \n" +
      "        rq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        rq.updatedBy = puserID,  \n" +
      "        rq.unitPrice= (CASE WHEN (rcl.qpa = Rs.qpa) THEN rq.unitPrice ELSE NULL END),  \n" +
      "        rq.quoteqty=(CASE WHEN (rcl.qpa = Rs.qpa) THEN rq.quoteqty ELSE NULL END),  \n" +
      "        rq.rfqQtySupplierID= (CASE WHEN (rcl.qpa = Rs.qpa) THEN rq.rfqQtySupplierID ELSE NULL END),  \n" +
      "        rq.finalPrice = (CASE WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE NULL END)  \n" +
      "        WHERE rq.consolidateID = rcl.id AND rcl.qpa <> Rs.qpa AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs  \n" +
      "        AND rq.isDeleted = 0;  \n" +
      "  \n" +
      "# Update Consilidated LineItems Quantity  \n" +
      "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT numOfPosition, consolidatedLineItemIDs FROM temp_Sproc_CreateRfqConsolidateLineItem WHERE category <> 3) Rs,  \n" +
      "        (  \n" +
      "			SELECT cl.id ,IFNULL(cl.numOfPosition,0) AS numOfPosition, cl.consolidatedLineItemIDs,consolidateRestrictPartDetail FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
      "            WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND cl.id IS NOT NULL  \n" +
      "		) rcl  \n" +
      "        SET  \n" +
      "        rq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        rq.updatedBy = puserID,  \n" +
      "        rq.unitPrice= (CASE WHEN (IFNULL(rcl.numOfPosition,0)  = Rs.numOfPosition) THEN rq.unitPrice ELSE NULL END),  \n" +
      "        rq.quoteqty=(CASE WHEN (IFNULL(rcl.numOfPosition,0)  = Rs.numOfPosition) THEN rq.quoteqty ELSE NULL END),  \n" +
      "        rq.rfqQtySupplierID= (CASE WHEN (IFNULL(rcl.numOfPosition,0)  = Rs.numOfPosition) THEN rq.rfqQtySupplierID ELSE NULL END),  \n" +
      "        rq.finalPrice = (CASE WHEN (IFNULL(rcl.numOfPosition,0)  = Rs.numOfPosition) THEN rq.finalPrice ELSE NULL END)  \n" +
      "        WHERE rq.consolidateID = rcl.id AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs AND rq.isDeleted = 0  \n" +
      "        AND IFNULL(rcl.numOfPosition,0)  <> Rs.numOfPosition;  \n" +
      "# Update Consilidated LineItems Quantity  \n" +
      "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT consolidatedLineItemIDs, consolidateRestrictPartDetail FROM temp_Sproc_CreateRfqConsolidateLineItem WHERE category <> 3) Rs,  \n" +
      "        (  \n" +
      "			SELECT rl.id, rl.consolidatedLineItemIDs, rl.consolidateRestrictPartDetail  \n" +
      "            FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
      "            WHERE rl.rfqAssyID = prfqAssyID AND rl.isDeleted = 0  \n" +
      "		) rcl  \n" +
      "         SET  \n" +
      "        rq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        rq.updatedBy = puserID,  \n" +
      "        rq.isBomUpdate=(CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN 0  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN 1 ELSE 0 END),  \n" +
      "        rq.unitPrice= (CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN NULL  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN rq.unitPrice ELSE NULL END),  \n" +
      "        rq.quoteqty= (CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN NULL  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN rq.quoteqty ELSE NULL END),  \n" +
      "        rq.rfqQtySupplierID= (CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN NULL  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN rq.rfqQtySupplierID ELSE NULL END),  \n" +
      "        rq.finalPrice =(CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN NULL  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN rq.finalPrice ELSE NULL END)  \n" +
      "        WHERE rq.consolidateID = rcl.id AND rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs  \n" +
      "        AND rq.isDeleted = 0;  \n" +
      "  \n" +
      "# Update Consilidated LineItems  \n" +
      "		UPDATE rfq_consolidated_mfgpn_lineitem cl,  \n" +
      "        (  \n" +
      "			SELECT isInstall, isPurchaseWithDNP, numOfPosition, rfqLineItemsID, qpa, uomID, consolidatedrefDesig, lineID, consolidatedLineItemIDs,  \n" +
      "				   consolidatedpartlineID, consolidateRestrictPartDetail, restrictCPNUseWithPermissionStep, restrictCPNUsePermanentlyStep, restrictCPNUseInBOMStep,  \n" +
      "                   custPNID, isqpaMismatch, consolidatedPartWithFlagDetail  \n" +
      "			FROM temp_Sproc_CreateRfqConsolidateLineItem WHERE category <> 3  \n" +
      "		) R  \n" +
      "        SET  \n" +
      "        cl.isInstall = R.isInstall ,  \n" +
      "        cl.isPurchase = R.isPurchaseWithDNP,  \n" +
      "        cl.numOfPosition = R.numOfPosition,  \n" +
      "        cl.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        cl.rfqLineItemID = R.rfqLineItemsID,  \n" +
      "        cl.qpa = R.qpa,  \n" +
      "        cl.uomID = R.uomID,  \n" +
      "        cl.refDesig = R.consolidatedrefDesig,  \n" +
      "        cl.lineID = R.lineID,  \n" +
      "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,  \n" +
      "        cl.consolidatedpartlineID = R.consolidatedpartlineID,  \n" +
      "        cl.consolidateRestrictPartDetail = R.consolidateRestrictPartDetail,  \n" +
      "        cl.updatedBy = puserID,  \n" +
      "        cl.restrictCPNUseWithPermissionStep = R.restrictCPNUseWithPermissionStep,  \n" +
      "        cl.restrictCPNUsePermanentlyStep = R.restrictCPNUsePermanentlyStep,  \n" +
      "        cl.restrictCPNUseInBOMStep = R.restrictCPNUseInBOMStep,  \n" +
      "        cl.custPNID = R.custPNID,  \n" +
      "        cl.isqpaMismatch = R.isqpaMismatch,  \n" +
      "        cl.consolidatedPartWithFlagDetail = R.consolidatedPartWithFlagDetail  \n" +
      "        WHERE cl.rfqAssyID = prfqAssyID AND cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND cl.id  IS NOT NULL  \n" +
      "        AND cl.isDeleted = 0;  \n" +
      "  \n" +
      "     # Manage table before executing alternate part table  \n" +
      "                DROP TEMPORARY TABLE IF EXISTS tempconsolidateAlternatePart;  \n" +
      "		 CREATE TEMPORARY TABLE IF NOT EXISTS tempconsolidateAlternatePart AS  \n" +
      "		 SELECT rcml.id,rcml.consolidateID,rcml.mfgPNID,rcml.approvedMountingType FROM  rfq_consolidated_mfgpn_lineitem_alternate rcml WHERE rcml.consolidateID IN (SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqassyid=prfqAssyID AND isdeleted=0) AND isDeleted=0;  \n" +
      "# Update Consilidated LineItems alternate part  \n" +
      "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cla,  \n" +
      "		(SELECT cl.id `consolidateID`, ap.`mfgPNID`, MIN(ap.`customerApproval`) customerApproval,  \n" +
      "				IFNULL(ap.restrictUseInBOMStep,0) restrictUseInBOMStep, IFNULL(ap.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,IFNULL(ap.restrictUseWithPermissionStep,1)restrictUseWithPermissionStep,  \n" +
      "				IFNULL(ap.restrictUsePermanentlyStep,1)restrictUsePermanentlyStep,IFNULL(ap.restrictUseExcludingAliasStep,1)restrictUseExcludingAliasStep,  \n" +
      "				IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1)restrictUseExcludingAliasWithPermissionStep,IFNULL(ap.restrictUseInBOMExcludingAliasStep,0)restrictUseInBOMExcludingAliasStep,  \n" +
      "				IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0)restrictUseInBOMExcludingAliasWithPermissionStep, IFNULL(ap.approvedMountingType,0)approvedMountingType,  \n" +
      "				IFNULL(ap.mismatchMountingTypeStep,1)mismatchMountingTypeStep,  \n" +
      "                IFNULL(ap.mismatchFunctionalCategoryStep,1)mismatchFunctionalCategoryStep  \n" +
      "		FROM rfq_lineitems_alternatepart ap  \n" +
      "		JOIN (  \n" +
      "			SELECT rcl.id, rcl.consolidatedLineItemIDs  \n" +
      "			FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
      "			JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID AND rl.isdeleted = 0  \n" +
      "			WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isdeleted = 0  \n" +
      "		) cl ON FIND_IN_SET(ap.rfqLineitemsID,cl.consolidatedLineItemIDs)  \n" +
      "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0  \n" +
      "		WHERE ap.isdeleted = 0 AND cap.consolidateID IS NOT NULL  \n" +
      "		GROUP BY cl.id, ap.`mfgPNID`, IFNULL(ap.restrictUseInBOMStep,0), IFNULL(ap.restrictUseInBOMWithPermissionStep,0),IFNULL(ap.restrictUseWithPermissionStep,1),IFNULL(ap.restrictUsePermanentlyStep,1),  \n" +
      "				IFNULL(ap.restrictUseExcludingAliasStep,1), IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1),IFNULL(ap.restrictUseInBOMExcludingAliasStep,0),IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0),  \n" +
      "				IFNULL(ap.approvedMountingType,0), IFNULL(ap.mismatchMountingTypeStep,1), IFNULL(ap.mismatchFunctionalCategoryStep,1)  \n" +
      "		)b  \n" +
      "		SET  \n" +
      "			cla.customerApproval = b.customerApproval,  \n" +
      "			cla.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "			cla.updatedBy = puserID,  \n" +
      "			cla.restrictUseInBOMStep =  b.restrictUseInBOMStep,  \n" +
      "			cla.restrictUseInBOMWithPermissionStep = b.restrictUseInBOMWithPermissionStep,  \n" +
      "			cla.restrictUseWithPermissionStep = b.restrictUseWithPermissionStep,  \n" +
      "			cla.restrictUsePermanentlyStep = b.restrictUsePermanentlyStep,  \n" +
      "			cla.restrictUseExcludingAliasStep =  b.restrictUseExcludingAliasStep,  \n" +
      "			cla.restrictUseExcludingAliasWithPermissionStep = b.restrictUseExcludingAliasWithPermissionStep,  \n" +
      "			cla.restrictUseInBOMExcludingAliasStep = b.restrictUseInBOMExcludingAliasStep,  \n" +
      "			cla.restrictUseInBOMExcludingAliasWithPermissionStep = b.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
      "			cla.approvedMountingType = b.approvedMountingType,  \n" +
      "			cla.mismatchMountingTypeStep = b.mismatchMountingTypeStep,  \n" +
      "			cla.mismatchFunctionalCategoryStep = b.mismatchFunctionalCategoryStep  \n" +
      "		WHERE cla.consolidateID = b.consolidateID AND  cla.mfgPNID = b.mfgPNID AND  cla.isDeleted = 0;  \n" +
      "# delete from consolidated Alternatepart if lineItem removed  \n" +
      "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap  \n" +
      "        SET  \n" +
      "        cap.isDeleted = TRUE,  \n" +
      "        cap.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        cap.deletedBy = puserID  \n" +
      "        WHERE EXISTS (SELECT 1 FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id = cap.consolidateID  AND cl.isDeleted = 1)  \n" +
      "        AND cap.isdeleted = 0;  \n" +
      "  \n" +
      "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem  \n" +
      "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap,  \n" +
      "			(  \n" +
      "				SELECT DISTINCT (rcla.id) capID FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
      "				INNER JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcla.consolidateID = rcl.id AND rcla.isdeleted = 0  \n" +
      "				INNER JOIN rfq_lineitems_alternatepart rla ON rla.mfgPNID = rcla.mfgPNID AND FIND_IN_SET(rla.rfqLineitemsID,rcl.consolidatedLineItemIDs) AND rla.isdeleted = 1  \n" +
      "				WHERE rcl.rfqAssyID = prfqAssyID AND rcl.isdeleted = 0  \n" +
      "            )AS rcap  \n" +
      "        SET  \n" +
      "        cap.isDeleted = TRUE,  \n" +
      "        cap.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        cap.deletedBy = puserID  \n" +
      "        WHERE cap.id = rcap.capID AND cap.isdeleted = 0;  \n" +
      "  \n" +
      "# delete Consolidated lineItems Quentity  if rfq Quantity remove  \n" +
      "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT id,rfqAssyID FROM rfq_assy_quantity q WHERE q.rfqAssyID = prfqAssyID AND q.isDeleted = 1 ) rq  \n" +
      "        SET  \n" +
      "        cq.isDeleted = TRUE,  \n" +
      "        cq.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        cq.deletedBy = puserID  \n" +
      "        WHERE cq.qtyID = rq.id AND cq.isDeleted= 0;  \n" +
      "  \n" +
      "  \n" +
      "# delete Consolidated lineitem Quantity if Consolidate lineitem remove  \n" +
      "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID = prfqAssyID AND isDeleted = 1 ) rcl  \n" +
      "        SET  \n" +
      "        cq.isDeleted = TRUE,  \n" +
      "        cq.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        cq.deletedBy = puserID  \n" +
      "        WHERE cq.consolidateID = rcl.id AND cq.isDeleted= 0;  \n" +
      "  \n" +
      "# delete Consolidate lineItems  \n" +
      "		UPDATE rfq_consolidated_mfgpn_lineitem cl  \n" +
      "        SET  \n" +
      "        cl.isDeleted = TRUE,  \n" +
      "        cl.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        cl.deletedBy = puserID  \n" +
      "        WHERE  cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0  \n" +
      "        AND NOT EXISTS (SELECT 1 FROM temp_Sproc_CreateRfqConsolidateLineItem tcd WHERE  tcd.rfqLineItemsID = cl.rfqLineItemID AND tcd.category <> 3);  \n" +
      "  \n" +
      "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part  \n" +
      "		INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`  \n" +
      "        (`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`customerApproval`,  \n" +
      "        `restrictUseInBOMStep`, `restrictUseInBOMWithPermissionStep`,`restrictUseWithPermissionStep`,`restrictUsePermanentlyStep`,  \n" +
      "        `restrictUseExcludingAliasStep`,`restrictUseExcludingAliasWithPermissionStep`, `restrictUseInBOMExcludingAliasStep`, `restrictUseInBOMExcludingAliasWithPermissionStep`,`approvedMountingType`, `mismatchMountingTypeStep`,`mismatchFunctionalCategoryStep`)  \n" +
      "        SELECT ap.`mfgPN`, cl.id `consolidateID`, ap.`mfgPNID`,ap.`mfgCodeID`, fun_getAssyPIDCodeByID(ap.`mfgPNID`) AS `PIDCode`,  \n" +
      "		puserID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`,puserID `updatedBy`,fun_DatetimetoUTCDateTime() `updatedAt`, MIN(ap.`customerApproval`),  \n" +
      "				IFNULL(ap.restrictUseInBOMStep,0), IFNULL(ap.restrictUseInBOMWithPermissionStep,0),IFNULL(ap.restrictUseWithPermissionStep,1),IFNULL(ap.restrictUsePermanentlyStep,1),  \n" +
      "				IFNULL(ap.restrictUseExcludingAliasStep,1), IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1),IFNULL(ap.restrictUseInBOMExcludingAliasStep,0),IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0),  \n" +
      "				IFNULL(ap.approvedMountingType,0), IFNULL(ap.mismatchMountingTypeStep,1), IFNULL(ap.mismatchFunctionalCategoryStep,1)  \n" +
      "		FROM rfq_lineitems_alternatepart ap  \n" +
      "		JOIN (  \n" +
      "			SELECT rcl.id, rcl.consolidatedLineItemIDs  \n" +
      "			FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
      "			JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID AND rl.isdeleted = 0  \n" +
      "			WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isdeleted = 0  \n" +
      "		) cl ON FIND_IN_SET(ap.rfqLineitemsID,cl.consolidatedLineItemIDs)  \n" +
      "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0  \n" +
      "		WHERE IFNULL(ap.mfgGoodPartMappingStep,1) = 1 AND IFNULL(ap.suggestedGoodPartStep,1) = 1 AND IFNULL(ap.distGoodPartMappingStep,1) = 1 AND IFNULL(ap.suggestedGoodDistPartStep,1) = 1 AND ap.isdeleted = 0 AND cap.consolidateID IS NULL  \n" +
      "		GROUP BY cl.id, ap.`mfgPN`, ap.`mfgPNID`, ap.`mfgCodeID`,  \n" +
      "				IFNULL(ap.restrictUseInBOMStep,0), IFNULL(ap.restrictUseInBOMWithPermissionStep,0),IFNULL(ap.restrictUseWithPermissionStep,1),IFNULL(ap.restrictUsePermanentlyStep,1),  \n" +
      "				IFNULL(ap.restrictUseExcludingAliasStep,1), IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1),IFNULL(ap.restrictUseInBOMExcludingAliasStep,0),IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0),  \n" +
      "				IFNULL(ap.approvedMountingType,0), IFNULL(ap.mismatchMountingTypeStep,1), IFNULL(ap.mismatchFunctionalCategoryStep,1);  \n" +
      "# Delete consolidated mfgPart if mfgPart Changed  \n" +
      "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (SELECT a.id FROM rfq_consolidated_mfgpn_lineitem a WHERE a.rfqAssyID = prfqAssyID AND a.isDeleted = 0) rcl  \n" +
      "        SET  \n" +
      "        cap.isDeleted = TRUE,  \n" +
      "        cap.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        cap.deletedBy = puserID  \n" +
      "		WHERE cap.consolidateID = rcl.id  \n" +
      "        AND cap.id NOT IN (  \n" +
      "			SELECT capid FROM(  \n" +
      "				SELECT  DISTINCT(rcap.id) AS capid  \n" +
      "				FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
      "				INNER JOIN rfq_consolidated_mfgpn_lineitem_alternate rcap ON rcap.consolidateID = cl.id AND rcap.isdeleted = 0  \n" +
      "				JOIN rfq_lineitems_alternatepart ap ON ap.mfgPNID = rcap.mfgPNID AND FIND_IN_SET(ap.rfqLineitemsID,cl.consolidatedLineItemIDs) AND ap.isdeleted = 0  \n" +
      "				WHERE cl.rfqAssyID = prfqAssyID AND cl.isdeleted = 0  \n" +
      "            ) rcap  \n" +
      "		);  \n" +
      "  \n" +
      " # delete Consolidated lineitem Quantity if selected alternate part remove  \n" +
      "       UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,  \n" +
      "        (SELECT id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 ) rcl  \n" +
      "        SET  \n" +
      "        cq.finalPrice = NULL,  \n" +
      "        cq.selectedPIDCode = NULL,  \n" +
      "        cq.selectedMpn = NULL,  \n" +
      "        cq.selectionMode = NULL,  \n" +
      "        cq.supplier = NULL,  \n" +
      "        cq.refSupplierID=NULL,  \n" +
      "        cq.supplierStock = NULL,  \n" +
      "        cq.currentStock = NULL,  \n" +
      "        cq.grossStock = NULL,  \n" +
      "        cq.leadTime = NULL,  \n" +
      "        cq.rfqQtySupplierID=NULL,  \n" +
      "        cq.min = NULL,  \n" +
      "        cq.mult = NULL,  \n" +
      "        cq.unitPrice = NULL,  \n" +
      "        cq.quoteqty=NULL,  \n" +
      "        cq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        cq.updatedBy = puserID  \n" +
      "        WHERE cq.consolidateID = (rcl.id) AND NOT EXISTS  \n" +
      "         (SELECT 1 FROM rfq_consolidated_mfgpn_lineitem_alternate rc JOIN tempconsolidateAlternatePart ta ON rc.id=ta.id WHERE rc.mfgPNID = cq.componentID AND rc.consolidateid = rcl.id AND rc.isDeleted = 0 AND rc.approvedMountingType =ta.approvedMountingType )  \n" +
      "        AND cq.isDeleted= 0;  \n" +
      "  \n" +
      " # remove pricing if selected alternate part remove  \n" +
      "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,  \n" +
      "       (SELECT rcla.consolidateID , COUNT(1) alternateline FROM rfq_consolidated_mfgpn_lineitem_alternate rcla  \n" +
      "       WHERE rcla.consolidateID IN (SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0)  \n" +
      "       AND approvedMountingType = 1 AND rcla.isdeleted = 0 GROUP BY rcla.consolidateID) rcl  \n" +
      "        SET  \n" +
      "        cq.finalPrice = NULL,  \n" +
      "        cq.selectedPIDCode = NULL,  \n" +
      "        cq.selectedMpn = NULL,  \n" +
      "        cq.selectionMode = NULL,  \n" +
      "        cq.supplier = NULL,  \n" +
      "        cq.refSupplierID=NULL,  \n" +
      "        cq.supplierStock = NULL,  \n" +
      "        cq.currentStock = NULL,  \n" +
      "        cq.grossStock = NULL,  \n" +
      "        cq.leadTime = NULL,  \n" +
      "        cq.rfqQtySupplierID=NULL,  \n" +
      "        cq.min = NULL,  \n" +
      "        cq.mult = NULL,  \n" +
      "        cq.unitPrice = NULL,  \n" +
      "        cq.quoteqty=NULL,  \n" +
      "        cq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        cq.updatedBy = puserID  \n" +
      "        WHERE cq.consolidateID = (rcl.consolidateID)  \n" +
      "        AND (CASE WHEN rcl.alternateline > 0 THEN  \n" +
      "			cq.componentID NOT IN (SELECT rc.mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate rc JOIN tempconsolidateAlternatePart ta ON rc.id=ta.id WHERE rc.consolidateid = rcl.consolidateID AND rc.isDeleted = 0 AND rc.approvedMountingType = ta.approvedMountingType)  \n" +
      "		ELSE 1=1 END)  \n" +
      "        AND cq.isDeleted= 0;  \n" +
      "  \n" +
      "# remove pricing for Change is buy  \n" +
      "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,  \n" +
      "        (SELECT id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0  \n" +
      "        AND (cl.isPurchase = 0 OR restrictCPNUseInBOMStep = 1 OR restrictCPNUsePermanentlyStep = 0 OR restrictCPNUseWithPermissionStep= 0)) rcl  \n" +
      "        SET  \n" +
      "        cq.finalPrice = NULL,  \n" +
      "        cq.selectedPIDCode = NULL,  \n" +
      "        cq.selectedMpn = NULL,  \n" +
      "        cq.selectionMode = NULL,  \n" +
      "        cq.supplier = NULL,  \n" +
      "        cq.refSupplierID=NULL,  \n" +
      "        cq.supplierStock = NULL,  \n" +
      "        cq.currentStock = NULL,  \n" +
      "        cq.grossStock = NULL,  \n" +
      "        cq.leadTime = NULL,  \n" +
      "        cq.min = NULL,  \n" +
      "        cq.mult = NULL,  \n" +
      "        cq.quoteqty=NULL,  \n" +
      "        cq.unitPrice = NULL,  \n" +
      "        cq.rfqQtySupplierID=NULL,  \n" +
      "        cq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        cq.updatedBy = puserID  \n" +
      "        WHERE cq.consolidateID IN(rcl.id) AND cq.isDeleted= 0;  \n" +
      "  \n" +
      "# Delete summary details if exists  \n" +
      "		UPDATE `rfq_assy_quotations` rq ,  \n" +
      "			( SELECT rq.qtyID,rl.requestQty,(SUM(rq.unitPrice * ra.qpa * IFNULL(ra.numOfPosition,1))) AS TotalExtendedPrice  \n" +
      "				FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
      "				JOIN rfq_assy_quantity rl ON rl.id = rq.qtyID AND rl.isDeleted = 0  \n" +
      "				JOIN rfq_consolidated_mfgpn_lineitem ra ON ra.id = rq.consolidateID AND ra.isdeleted = 0  \n" +
      "				WHERE  rl.rfqAssyid = prfqAssyID AND ra.isPurchase = 1 AND rq.isDeleted = 0  \n" +
      "				GROUP BY rq.qtyID, rl.requestQty  \n" +
      "			) qtychange  \n" +
      "        SET  \n" +
      "        rq.`unitPrice` = (CASE WHEN CONVERT(rq.unitPrice, DECIMAL(10,2)) != ROUND(qtychange.TotalExtendedPrice,2) THEN 0 ELSE CONVERT(rq.unitPrice, DECIMAL(10,2)) END),  \n" +
      "        rq.`updatedBy` = puserID,  \n" +
      "        rq.`updatedAt` = fun_DatetimetoUTCDateTime()  \n" +
      "        WHERE rq.rfqAssyID = prfqAssyID AND rq.rfqAssyQtyID = qtychange.qtyID AND  CONVERT(rq.unitPrice, DECIMAL(10,2)) != ROUND(qtychange.TotalExtendedPrice,2)  \n" +
      "        AND rq.refSubmittedQuoteID IS NULL AND rq.isDeleted = 0;  \n" +
      "  \n" +
      "# update rfq assembly pricing status  \n" +
      "  \n" +
      "        UPDATE rfq_assemblies  \n" +
      "        SET isReadyForPricing = TRUE,  \n" +
      "        partCostingBOMInternalVersion = pBOMVersion,  \n" +
      "        updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        updatedBy = puserID  \n" +
      "        WHERE id = prfqAssyID AND isDeleted = 0;  \n" +
      "  \n" +
      "# update rfq assembly pricing status  \n" +
      "  \n" +
      "        UPDATE rfq_lineitem_autopricingstatus rlas  \n" +
      "        SET `status` = NULL  \n" +
      "        WHERE rlas.rfqAssyID = prfqAssyID  \n" +
      "        AND EXISTS (SELECT id FROM tempconsolidate tc WHERE tc.id = rlas.consolidateID  \n" +
      "        AND NOT EXISTS (SELECT 1 FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.id = tc.id AND rl.rfqassyId = prfqAssyID AND isdeleted=0));  \n" +
      "--        AND rlas.consolidateID IN (SELECT id FROM tempconsolidate WHERE id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId = prfqAssyID AND isdeleted=0));  \n" +
      "  \n" +
      "#==================================  \n" +
      "/*  Submit Data for Labor Costing */  \n" +
      "#==================================  \n" +
      "        DROP TEMPORARY TABLE IF EXISTS laborResult;  \n" +
      "        CREATE TEMPORARY TABLE IF NOT EXISTS laborResult AS  \n" +
      "        SELECT prfqAssyID AS rfqAssyID, ppartID AS partID, id AS parPartID, id AS subAssyID, 1 AS perBuildQty, liveVersion AS BOMinternalversion, 0 isMismatchQPA,1 originalQPA, 0 LEVEL,0 isInstall  \n" +
      "        FROM COMPONENT WHERE id = ppartID AND isDeleted = 0  \n" +
      "        UNION  \n" +
      "        SELECT prfqAssyID AS rfqAssyID, ppartID AS partID, partID AS parPartID, mfgPNID AS subAssyID, QPA1 AS perBuildQty, liveVersion BOMinternalversion,  \n" +
      "        (CASE WHEN actualQPA != actualDesgCount THEN 1 ELSE 0 END) isMismatchQPA, (CASE WHEN actualQPA >= actualDesgCount THEN actualQPA ELSE actualDesgCount END) originalQPA, LEVEL, isInstall  \n" +
      "        FROM leveldata  \n" +
      "        WHERE category = 3;  \n" +
      "  \n" +
      "#  delete Labor assy Qty detail when line item removed from assy BOM  \n" +
      "  \n" +
      "        UPDATE rfq_labor_assy_qpa_detail rla  \n" +
      "        SET  \n" +
      "        rla.isDeleted = 1,  \n" +
      "        rla.deletedBy = puserID,  \n" +
      "        rla.deletedAt = fun_DatetimetoUTCDateTime()  \n" +
      "        WHERE rla.partID = ppartID AND rla.rfqAssyID = prfqAssyID AND rla.isDeleted  = 0  \n" +
      "        AND NOT EXISTS(SELECT 1 FROM laborResult lr WHERE lr.subAssyID = rla.subAssyID AND lr.parPartID = rla.parPartID  \n" +
      "        AND rla.rfqAssyID = prfqAssyID AND rla.partID = ppartID AND rla.level = lr.level);  \n" +
      "# Insert Data in to rfq_labor_assy_qpa_detail table for  \n" +
      "        INSERT INTO `rfq_labor_assy_qpa_detail`  \n" +
      "        (`rfqAssyID`,`partID`,`parPartID`,`subAssyID`,`level`,`perBuildQty`,`bomInternalVersion`, `originalQPA`, `isMismatchQPA`,`createdBy`,`updatedBy`,`createdAt`,`updatedAt`)  \n" +
      "		SELECT rfqAssyID, partID, parPartID,subAssyID,LEVEL ,perBuildQty, BOMinternalversion, originalQPA, isMismatchQPA, puserID `createdBy`, puserID `updatedBy`,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime()  \n" +
      "		FROM laborResult lr  \n" +
      "		WHERE NOT EXISTS(SELECT 1 FROM rfq_labor_assy_qpa_detail rla WHERE rla.isDeleted = 0 AND lr.subAssyID = rla.subAssyID  \n" +
      "		AND lr.parPartID = rla.parPartID AND rla.rfqAssyID = prfqAssyID AND rla.partID = ppartID AND lr.level = rla.level);  \n" +
      "  \n" +
      "# Update Data in rfq_labor_assy_qpa_detail table updated record  \n" +
      "		UPDATE rfq_labor_assy_qpa_detail rlaqd,  \n" +
      "        (SELECT parPartID, subAssyID, LEVEL, perBuildQty, bomInternalVersion, originalQPA, isMismatchQPA, isInstall  \n" +
      "        FROM laborResult) lr  \n" +
      "        SET  \n" +
      "        rlaqd.perBuildQty = lr.perBuildQty,  \n" +
      "        rlaqd.bomInternalVersion = lr.bomInternalVersion,  \n" +
      "        rlaqd.originalQPA = lr.originalQPA,  \n" +
      "        rlaqd.isMismatchQPA = lr.isMismatchQPA,  \n" +
      "        rlaqd.isInstall = lr.isInstall,  \n" +
      "        updatedBy = puserID,  \n" +
      "        updatedAt = fun_DatetimetoUTCDateTime()  \n" +
      "        WHERE rlaqd.rfqAssyID = prfqAssyID AND rlaqd.partID = ppartID AND lr.parPartID = rlaqd.parPartID AND lr.subAssyID = rlaqd.subAssyID AND lr.level = rlaqd.level AND rlaqd.isDeleted = 0  \n" +
      "        AND (rlaqd.perBuildQty != lr.perBuildQty OR rlaqd.bomInternalVersion != lr.bomInternalVersion OR rlaqd.originalQPA != lr.originalQPA OR rlaqd.isMismatchQPA != lr.isMismatchQPA OR rlaqd.isInstall != lr.isInstall);  \n" +
      "# create temporary table for mounting type wise detail  \n" +
      "        DROP TEMPORARY TABLE IF EXISTS assyBOMMountingTypeDet;  \n" +
      "        CREATE TEMPORARY TABLE IF NOT EXISTS assyBOMMountingTypeDet AS  \n" +
      "		SELECT prfqAssyID `rfqAssyID`, partID AS parPartID, mountingTypeID, `mountingType`,`lineCount`,`totalQPA`,NULL `subAssyID`, isInstall AS `isInstall`  \n" +
      "		FROM (  \n" +
      "			(  \n" +
      "				SELECT  SUM(qpa) AS `totalQPA`, COUNT(a.id) AS `lineCount`,  fun_getMountingTypeNameByID(mountingTypeID) AS mountingType, mountingTypeID, partID, isinstall  \n" +
      "				FROM  \n" +
      "				(  \n" +
      "					SELECT rl.id,(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
      "								(CASE WHEN rl.qpa < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE rl.qpa END)  \n" +
      "							ELSE rl.qpa END) AS qpa, rl.partID, rl.isInstall  \n" +
      "					FROM rfq_lineitems rl  \n" +
      "					WHERE rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
      "				) a  \n" +
      "				INNER JOIN  \n" +
      "				(  \n" +
      "					SELECT 	rl.id,  \n" +
      "					CASE WHEN IFNULL(MAX(com.mountingtypeID),'Unknown') = IFNULL(MIN(com.mountingtypeID),'Unknown')  THEN  \n" +
      "							MAX(com.mountingtypeID)  \n" +
      "						ELSE (SELECT id FROM rfq_mountingtypemst WHERE NAME = \"Mismatched\" LIMIT 1)  END  AS mountingTypeID  \n" +
      "					FROM rfq_lineitems rl  \n" +
      "					INNER JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0  \n" +
      "					LEFT JOIN COMPONENT com ON com.id = (CASE WHEN ra.mfgPNID = -3 AND rl.custPNID IS NOT NULL THEN rl.custPNID ELSE ra.mfgPNID END) AND com.isGoodPart <> 2  \n" +
      "					WHERE rl.partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
      "					AND IFNULL(ra.mfgGoodPartMappingStep,1) = 1 AND IFNULL(ra.suggestedGoodPartStep,1) = 1 AND IFNULL(ra.distGoodPartMappingStep,1) = 1 AND IFNULL(ra.suggestedGoodDistPartStep,1) = 1  \n" +
      "					AND rl.isDeleted = 0  AND com.category != 3 AND com.isGoodPart <> 2   AND (IFNULL(ra.mismatchMountingTypeStep,0) = 1 OR ra.approvedMountingType = 1)  \n" +
      "					GROUP BY rl.id  \n" +
      "                    HAVING IFNULL(MAX(com.mountingtypeID),-100) = IFNULL(MIN(com.mountingtypeID),-100) OR (IFNULL(MAX(com.mountingtypeID),-100) != IFNULL(MIN(com.mountingtypeID),-100) AND MAX(IFNULL(ra.approvedMountingType,0)) = 1)  \n" +
      "				) b ON a.id = b.id  \n" +
      "				GROUP BY a.partID , b.mountingTypeID, a.isinstall  \n" +
      "				)  \n" +
      "				UNION  \n" +
      "				(SELECT  SUM(qpa) AS `totalQPA`, COUNT(a.id) AS `lineCount`,  fun_getMountingTypeNameByID(mountingTypeID) AS mountingType, mountingTypeID, partID,isinstall  \n" +
      "				FROM  \n" +
      "				(  \n" +
      "					SELECT rl.id,(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
      "								(CASE WHEN rl.qpa < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE rl.qpa END)  \n" +
      "							ELSE rl.qpa END) AS qpa, rl.partID, rl.isInstall  \n" +
      "					FROM rfq_lineitems rl  \n" +
      "					WHERE rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
      "				) a  \n" +
      "				INNER JOIN  \n" +
      "				(  \n" +
      "					SELECT 	rl.id,  \n" +
      "					(SELECT id FROM rfq_mountingtypemst WHERE NAME = \"Mismatched\" LIMIT 1) AS mountingTypeID  \n" +
      "					FROM rfq_lineitems rl  \n" +
      "					INNER JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0  \n" +
      "					LEFT JOIN COMPONENT com ON com.id = (CASE WHEN ra.mfgPNID = -3 AND rl.custPNID IS NOT NULL THEN rl.custPNID ELSE ra.mfgPNID END) AND com.isGoodPart <> 2  \n" +
      "					WHERE rl.partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
      "                    AND IFNULL(ra.mfgGoodPartMappingStep,1) = 1 AND IFNULL(ra.suggestedGoodPartStep,1) = 1 AND IFNULL(ra.distGoodPartMappingStep,1) = 1 AND IFNULL(ra.suggestedGoodDistPartStep,1) = 1  \n" +
      "					AND rl.isDeleted = 0  AND com.category != 3 AND com.isGoodPart <> 2  \n" +
      "					GROUP BY rl.id  \n" +
      "					HAVING IFNULL(MAX(com.mountingtypeID),-100) != IFNULL(MIN(com.mountingtypeID),-100) AND MAX(IFNULL(ra.approvedMountingType,0)) != 1  \n" +
      "				) b ON a.id = b.id  \n" +
      "				GROUP BY a.partID , b.mountingTypeID, a.isInstall)  \n" +
      "			)a  \n" +
      "			UNION  \n" +
      "			(  \n" +
      "				SELECT rfqAssyID AS `rfqAssyID`,parPartID, NULL `mountingTypeID`, NULL mountingType, 1 AS `lineCount`,originalQPA AS `totalQPA`,subAssyID AS `subAssyID`, isInstall AS `isInstall`  \n" +
      "				FROM  \n" +
      "				(  \n" +
      "					SELECT rfqAssyID, parPartID, originalQPA,subAssyID,isInstall  \n" +
      "					FROM rfq_labor_assy_qpa_detail lr  \n" +
      "					WHERE lr.isDeleted = 0 AND lr.parpartId != lr.subAssyId AND lr.rfqAssyID = prfqAssyID  \n" +
      "				)b  \n" +
      "			);  \n" +
      "  \n" +
      "# delete assy Labor Mounting type wise Qty detail when line item removed from assy BOM  \n" +
      "# Note: -100 value is set for null value for mountingtypeID join purpose(in case of mounting type mismatch)  \n" +
      "  		UPDATE rfq_assy_labor_bom_mountingtype_qpa_detail rlmd  \n" +
      "        SET  \n" +
      "        rlmd.isDeleted = 1,  \n" +
      "        rlmd.deletedBy = puserID,  \n" +
      "        rlmd.deletedAt = fun_DatetimetoUTCDateTime()  \n" +
      "        WHERE rlmd.isDeleted = 0 AND rlmd.rfqAssyID = prfqAssyID  \n" +
      "        AND NOT EXISTS (SELECT 1 FROM assyBOMMountingTypeDet amd  \n" +
      "        WHERE rlmd.rfqAssyID = prfqAssyID AND amd.parPartID = rlmd.partID AND (IFNULL(rlmd.mountingTypeID,-100) = IFNULL(amd.mountingtypeID,-100) AND IFNULL(rlmd.subAssyID,-100) = IFNULL(amd.subAssyID,-100)));  \n" +
      "# Insert Data for assy Labor Mounting type wise Qty detail for new added data.  \n" +
      "# Note: -100 value is set for null value for mountingtypeID for join purpose(in case of mounting type mismatch)  \n" +
      "		INSERT INTO `rfq_assy_labor_bom_mountingtype_qpa_detail`  \n" +
      "        (`rfqAssyID`,`partID`,`subAssyID`,`mountingTypeID`,`lineCount`,`totalQPA`, `isInstall`, `createdBy`,`updatedBy`,`createdAt`,`updatedAt`)  \n" +
      "        SELECT rfqAssyID,parPartID,subAssyID,mountingtypeID,lineCount,totalQPA, isInstall, puserID `createdBy`,puserID `updatedBy`, fun_DatetimetoUTCDateTime() `createdAt`, fun_DatetimetoUTCDateTime() `updatedAt`  \n" +
      "		FROM assyBOMMountingTypeDet amd  \n" +
      "		WHERE NOT EXISTS(SELECT 1 FROM rfq_assy_labor_bom_mountingtype_qpa_detail rlmd  \n" +
      "		WHERE rlmd.rfqAssyID = prfqAssyID AND amd.parPartID = rlmd.partID AND rlmd.isDeleted = 0 AND (IFNULL(rlmd.mountingTypeID,-100) = IFNULL(amd.mountingtypeID,-100) AND IFNULL(rlmd.subAssyID,-100) = IFNULL(amd.subAssyID,-100) ));  \n" +
      "  \n" +
      "  \n" +
      "# Update Data for assy Labor Mounting type wise QPA detail for Updated line item when QPA and line count change.  \n" +
      "# Note: -100 value is set for null value for mountingtypeID for join purpose(in case of mounting type mismatch)  \n" +
      "		UPDATE rfq_assy_labor_bom_mountingtype_qpa_detail rlmd,  \n" +
      "        (SELECT lineCount,totalQPA,isInstall,mountingtypeID,subAssyID,parPartID FROM assyBOMMountingTypeDet) amd  \n" +
      "        SET  \n" +
      "        rlmd.lineCount = amd.lineCount,  \n" +
      "        rlmd.totalQPA = amd.totalQPA,  \n" +
      "        rlmd.isInstall = amd.isInstall,  \n" +
      "        rlmd.updatedby = puserID,  \n" +
      "        rlmd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
      "        WHERE  rlmd.rfqAssyID = prfqAssyID AND amd.parPartID = rlmd.partID AND rlmd.isDeleted = 0 AND (IFNULL(rlmd.mountingTypeID,-100) = IFNULL(amd.mountingtypeID,-100) AND IFNULL(rlmd.subAssyID,-100) = IFNULL(amd.subAssyID,-100))  \n" +
      "        AND (IFNULL(rlmd.lineCount,0) != IFNULL(amd.lineCount,0) OR IFNULL(rlmd.totalQPA,0) != IFNULL(amd.totalQPA,0) OR IFNULL(rlmd.isInstall,0) != IFNULL(amd.isInstall,1));  \n" +
      "  \n" +
      "# delete data from labor costing detail table if mounting type data deleted  \n" +
      "		UPDATE rfq_assy_qtywise_bom_laborcosting_detail raql  \n" +
      "        SET  \n" +
      "        raql.isDeleted = 1,  \n" +
      "        raql.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        raql.deletedBy = puserID  \n" +
      "        WHERE EXISTS (SELECT  1 FROM rfq_assy_labor_bom_mountingtype_qpa_detail ramd  \n" +
      "        WHERE ramd.id = raql.rfqAssyBOMMountingID AND ramd.isDeleted = 1 AND ramd.rfqAssyID = prfqAssyID)  \n" +
      "        AND raql.isDeleted = 0;  \n" +
      "# delete data from labor costing detail table if rfq assy quantity data deleted  \n" +
      "		UPDATE rfq_assy_qtywise_bom_laborcosting_detail raql  \n" +
      "        SET  \n" +
      "        raql.isDeleted = 1,  \n" +
      "        raql.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        raql.deletedBy = puserID  \n" +
      "        WHERE EXISTS (SELECT  1 FROM rfq_assy_quantity raq  \n" +
      "        WHERE raq.id = raql.rfqAssyQtyID AND raq.isDeleted = 1 AND raq.rfqAssyID = prfqAssyID)  \n" +
      "        AND raql.isDeleted = 0;  \n" +
      "  \n" +
      "# Insert New Data which are added in rfq_assy_labor_bom_mountingtype_qpa_detail and not in labor costing detail table  \n" +
      "		INSERT INTO `rfq_assy_qtywise_bom_laborcosting_detail`  \n" +
      "        (`rfqAssyQtyID`,`rfqAssyBOMMountingID`,`price`,`perAssyPrice`,`createdBy`,`updatedBy`,`createdAt`,`updatedAt`,`rfqPriceGroupId`,`rfqPriceGroupDetailId`)  \n" +
      "        SELECT raq.id `rfqAssyQtyID`,ramd.id `rfqAssyBOMMountingID`,0 `price`,0 `perAssyPrice`,puserID `createdBy`,puserID `updatedBy`,  \n" +
      "        fun_DatetimetoUTCDateTime() `createdAt`, fun_DatetimetoUTCDateTime() `updatedAt`,raq.rfqPriceGroupId,raq.rfqPriceGroupDetailId  \n" +
      "        FROM rfq_assy_labor_bom_mountingtype_qpa_detail ramd  \n" +
      "        JOIN rfq_assy_quantity raq ON ramd.rfqAssyID = raq.rfqAssyID AND raq.rfqAssyId = prfqAssyID AND raq.isDeleted = 0  \n" +
      "        WHERE ramd.rfqAssyId = prfqAssyID  \n" +
      "        AND NOT EXISTS (SELECT 1 FROM rfq_assy_qtywise_bom_laborcosting_detail raql WHERE raql.rfqAssyBOMMountingID = ramd.id AND raql.isDeleted = 0 AND raql.rfqAssyQtyID = raq.id)  \n" +
      "		AND ramd.isDeleted = 0;  \n" +
      "  \n" +
      "# update labor costing detail if there is any change in Mounting type wise QPA for update per assy price detail  \n" +
      "        UPDATE rfq_assy_qtywise_bom_laborcosting_detail raql,  \n" +
      "        (SELECT id,totalQPA,lineCount,mountingTypeID,partID,subAssyID FROM rfq_assy_labor_bom_mountingtype_qpa_detail ramd WHERE ramd.isDeleted = 0 AND ramd.rfqAssyID = prfqAssyID AND ramd.subAssyID IS NULL) ralmd,  \n" +
      "        (SELECT id FROM rfq_assy_quantity WHERE isDeleted = 0 AND rfqAssyID = prfqAssyID) raq  \n" +
      "        SET  \n" +
      "        raql.perAssyPrice = CAST((raql.price * IFNULL(ralmd.totalQPA,0)) AS DECIMAL(16,6)),  \n" +
      "        raql.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
      "        raql.updatedBy = puserID  \n" +
      "        WHERE ralmd.id = raql.rfqAssyBOMMountingID AND raq.id = raql.rfqAssyQtyID AND raql.isDeleted = 0 AND ralmd.subAssyID IS NULL  \n" +
      "        AND raql.perAssyPrice != CAST((raql.price * IFNULL(ralmd.totalQPA,0)) AS DECIMAL(16,6));  \n" +
      "# update Sub Assembly price based on qpa change  \n" +
      "		CALL `Sproc_getAllAssyLaborDetails`(NULL,prfqAssyID);  \n" +
      "  \n" +
      "#==================================  \n" +
      "/* End for Submit Data for Labor Costing */  \n" +
      "#==================================  \n" +
      "  \n" +
      "    -- Create consolidate qty for price group wise on same assembly,  \n" +
      "		CALL Sproc_CreateRfqConsolidateLineItem_Qty_With_All_RFQ(prfqAssyID,puserID);  \n" +
      "   COMMIT;  \n" +
      "    SELECT id FROM tempconsolidate WHERE id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId = prfqAssyID AND isdeleted=0);  \n" +
      "  \n" +
      "  \n" +
      "/*  UNION  \n" +
      "	SELECT rq.consolidateID AS id FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
      "    LEFT JOIN  rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
      "    WHERE rq.isdeleted=0 AND rq.finalprice IS NULL AND rl.rfqAssyID = prfqAssyID AND  (TIMESTAMPDIFF(SECOND, rq.updatedAt,fun_DatetimetoUTCDateTime())<120) AND (TIMESTAMPDIFF(SECOND, rq.createdAt,fun_DatetimetoUTCDateTime())>120);  \n" +
      "*/  \n" +
      "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqConsolidateLineItem;  \n" +
      "    DROP TEMPORARY  TABLE IF EXISTS tempconsolidate;  \n" +
      "    DROP TEMPORARY TABLE IF EXISTS leveldata;  \n" +
      "  \n" +
      "END;  \n" +
  /* **************************** New Script -> 22-02-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5943,'2.00','V1',' Sproc_CreateRfqConsolidateLineItem - CC '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
case 5943:
  allDbChangesArray.push(
  /* **************************** New Script -> 22-02-2022*********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_GetComponentByMFGPN_PIDAliasSearch;  \n" +
	"CREATE PROCEDURE `Sproc_GetComponentByMFGPN_PIDAliasSearch`(  \n" +
	"IN pSearch VARCHAR(500),  \n" +
	"IN pMfgType VARCHAR(50)  \n" +
	")  \n" +
	"BEGIN  \n" +
	"  SELECT * FROM  \n" +
	" (  \n" +
	"	 SELECT `com`.`id`,  \n" +
	"        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`, ' | ', `com`.`PIDCode`) mfgPN,  \n" +
	"        CONCAT('(',`mfgCodemst`.`mfgCode`, ') ',`com`.`mfgPN`, ' | ', `com`.`PIDCode` , (CASE WHEN com.productionPN IS NOT NULL THEN concat(' | ',com.productionPN) ELSE '' END) ) searchFormattted,  \n" +
	"		`com`.`mfgPN` orgMfgPN,  \n" +
	"		`com`.`packaginggroupID`,  \n" +
	"		`com`.`PIDCode`,  \n" +
	"		`com`.`isGoodPart`,  \n" +
	"		`com`.`RoHSStatusID`,  \n" +
	"		`com`.`rohsgroupID`,  \n" +
	"		`com`.`mfgcodeID`,  \n" +
	"		`mfgCodemst`.`mfgCode` AS `mfgCode`,  \n" +
	"		`mfgCodemst`.`mfgName` AS `mfgName`,  \n" +
	"		`mfgCodemst`.`mfgType` AS `mfgType`,  \n" +
	"		`com`.`category`,  \n" +
	"        `com`.`mfgPNDescription`,  \n" +
	"		`com`.`partStatus`,  \n" +
	"		`com`.`uom`,  \n" +
	"		`com`.`uomClassID`,  \n" +
	"		`com`.`unit`,  \n" +
	"		u.abbreviation AS uomName,  \n" +
	"		u.unitName AS  unitName,  \n" +
	"		r.rohsIcon,  \n" +
	"		r.name AS `rohsName`,  \n" +
	"		`com`.`isCPN`,  \n" +
	"		`com`.`isCustom`,  \n" +
	"		`com`.`partType`,  \n" +
	"		`com`.`rfqOnly`  ,  \n" +
	"        `com`.`productionPN`  \n" +
	"	FROM `component` AS `com`  \n" +
	"	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id` AND `mfgCodemst`.`isdeleted` =0 AND  `mfgCodemst`.`mfgType` =IFNULL(pMfgType, `mfgCodemst`.`mfgType`)  \n" +
	"	JOIN rfq_rohsmst r ON r.id = com.RoHSStatusID  \n" +
	"	JOIN  uoms u ON u.id= com.uom AND u.isdeleted=0  \n" +
	"	WHERE `com`.`isdeleted` =0  \n" +
	"    ) AS a  \n" +
	"	WHERE ((pSearch IS NULL AND 1=1) OR  \n" +
	"			(pSearch IS NOT NULL AND (mfgPN LIKE CONCAT('%', pSearch , '%') OR PIDCode LIKE CONCAT('%', pSearch , '%') OR productionPN LIKE CONCAT('%', pSearch , '%')  \n" +
	"             OR EXISTS (SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT('%', pSearch , '%'))))  \n" +
	")  \n" +
	"ORDER BY mfgPN;  \n" +
	"END;  \n" +
  /* **************************** Add Script Version -> 22-02-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5944,'2.00','V1','US: 39398: UI updates for filter changes on SO,CPS,CINV,CCM - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;

case 5944:
  allDbChangesArray.push(
  /* **************************** New Script -> 22-02-2022*********************************** */
	"drop procedure if exists Sproc_GetSalesorderList;  \n" +
	"CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
	"	IN ppageIndex INT,  \n" +
	"	IN precordPerPage INT,  \n" +
	"	IN pOrderBy VARCHAR(255),  \n" +
	"	IN pWhereClause VARCHAR(16383),  \n" +
	"	IN pIsKitList TINYINT,  \n" +
	"	IN pPlannedStatus VARCHAR(10),  \n" +
	"	IN pSalesOrderDetailId INT,  \n" +
	"	IN pIsPendingWOCreationList TINYINT,  \n" +
	"	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
	"	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
	"	IN pfilterStatus VARCHAR(100),  \n" +
	"	IN pcustomerIds VARCHAR(16000),  \n" +
	"	IN pshippingMethodId VARCHAR(16000),  \n" +
	"	IN ptermsIds VARCHAR(16000),  \n" +
	"	IN psearchposotext VARCHAR(1000),  \n" +
	"	IN psearchposotype VARCHAR(10),  \n" +
	"	IN pfromDate DATE,  \n" +
	"	IN ptoDate DATE,  \n" +
	"	IN prushJob TINYINT,  \n" +
	"	IN ppartIds VARCHAR(16000),  \n" +
	"	IN pworkorders VARCHAR(16000),  \n" +
	"	IN psearchextPricetext VARCHAR(1000),  \n" +
	"	IN psearchextPricetype VARCHAR(10),  \n" +
	"	IN pkitreturnStatus VARCHAR(100),  \n" +
	"	IN pkitReleaseStatus VARCHAR(100),  \n" +
	"    IN pfilterPOStatus VARCHAR(20) ,  \n" +
	"    IN pIsRmaPO TINYINT,  \n" +
	"    IN pDateType VARCHAR(10),  \n" +
	"    IN pSearchComments VARCHAR(200)  \n" +
	")  \n" +
	"BEGIN  \n" +
	"	DECLARE pOffset INT;  \n" +
	"	DECLARE rowNumWhere VARCHAR(255);  \n" +
	"	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
	"	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
	"	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
	"	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
	"	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
	"	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
	"    DECLARE vTimeZone VARCHAR(50);  \n" +
	"	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
	"	DECLARE v_mfrFormatType INT;  \n" +
	"  \n" +
	"	SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormatType;  \n" +
	"    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
	"	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
	"	SET v_PendingWOWhereClause='';  \n" +
	"  \n" +
	"	IF(pIsKitList=1) THEN  \n" +
	"		SET v_DynamicColumns = CONCAT(\",  \n" +
	"			hu.refType as refTypeKR,  \n" +
	"			hu.status as haltStatusKR,  \n" +
	"			(  \n" +
	"				CASE  \n" +
	"					WHEN hu.status = 'H' THEN  \n" +
	"						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
	"					ELSE ''  \n" +
	"				END  \n" +
	"			) AS reasonKR,  \n" +
	"			hutt.refType as refTypePO,  \n" +
	"			hutt.status as haltStatusPO,  \n" +
	"			(  \n" +
	"				CASE  \n" +
	"					WHEN hutt.status = 'H' THEN  \n" +
	"						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
	"					ELSE ''  \n" +
	"				END  \n" +
	"			) AS reasonPO,  \n" +
	"            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
	"		\");  \n" +
	"  \n" +
	"		SET v_DynamicJoin = CONCAT(\"  \n" +
	"			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
	"			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
	"            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
	"	ELSE  \n" +
	"		SET v_DynamicColumns=CONCAT(\",  \n" +
	"			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
	"			(  \n" +
	"				CASE  \n" +
	"					WHEN hut.status = 'H' THEN  \n" +
	"						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
	"					ELSE ''  \n" +
	"				END  \n" +
	"			) AS reasonPO  \n" +
	"		\");  \n" +
	"  \n" +
	"		SET v_DynamicJoin =CONCAT(\"  \n" +
	"			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
	"				SELECT 	MAX(ht.id)  \n" +
	"				FROM 	holdunholdtrans ht  \n" +
	"				WHERE 	hut.refTransId = ht.refTransId  \n" +
	"						AND ht.refType='PO'  \n" +
	"						AND ht.isdeleted=0  \n" +
	"					)  \n" +
	"				\") ;  \n" +
	"	END IF;  \n" +
	"	IF(pIsPendingWOCreationList = 1) THEN  \n" +
	"		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
	"		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
	"		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
	"				SELECT 		co.PIDCODE AS PIDCode,  \n" +
	"						co.mfgPN AS mfgPN,  \n" +
	"						co.nickname AS nickName,  \n" +
	"						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
	"						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
	"						vusalesorderdet.poNumber,  \n" +
	"						vusalesorderdet.salesOrderNumber  \n" +
	"				FROM 		workorder wod  \n" +
	"				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
	"				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
	"				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
	"			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
	"		\");  \n" +
	"	END IF;  \n" +
	"    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
	"		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
	"								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
	"        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
	"									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
	"		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
	"        IF pOrderBy IS NULL THEN  \n" +
	"			SET pOrderBy = ' promisedShipDate asc ';  \n" +
	"        END IF;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
	"		SELECT  a.*,  \n" +
	"				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
	"                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
	"                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
	"		FROM  \n" +
	"			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
	"				(  \n" +
	"					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
	"							'No'  \n" +
	"						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
	"							'Yes'  \n" +
	"						ELSE  \n" +
	"							''  \n" +
	"					END  \n" +
	"				) AS `isHotJobValue`,  \n" +
	"				`vuss`.`isHotJob`,  \n" +
	"				`vuss`.`Sales Order ID` AS id,  \n" +
	"				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
	"				`vuss`.`Balanced Due Qty` as openQty,  \n" +
	"				`vuss`.frequency as frequencyName,  \n" +
	"				vuss.frequencyType as frequencyTypeName,  \n" +
	"				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
	"                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
	"				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
	"                  sr.salesRelease as salesRelease,  \n" +
	"				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
	"				`vuss`.`Po Number` AS poNumber,  \n" +
	"				`vuss`.`Po Date` AS poDate,  \n" +
	"				`vuss`.`Customer ID` AS customerID,  \n" +
	"				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
	"				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
	"				`vuss`.`Sales Order Status` AS `status`,  \n" +
	"				`vuss`.`Revision` AS revision,  \n" +
	"				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
	"				`vuss`.`Terms ID` AS termsID,  \n" +
	"				`vuss`.`So Date` AS soDate,  \n" +
	"				fun_GetFormattedMfgCode(vuss.mfgCode,vuss.mfgName,\",v_mfrFormatType,\") AS companyName,  \n" +
	"				`vuss`.`internalPO` AS internalPO,  \n" +
	"				`vuss`.`mfgCode` AS mfgCode,  \n" +
	"				`vuss`.`Full Name` AS fullName,  \n" +
	"				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
	"				`vuss`.`PO Qty` AS qty,  \n" +
	"				vuss.assignQty as assignBlanketPOQty,  \n" +
	"				case when vuss.isBlanketPO=1 and vuss.blanketPOOption=2 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
	"				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
	"				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
	"				`vuss`.`mrpQty` AS mrpQty,  \n" +
	"				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
	"				`vuss`.`kitQty` AS kitQty, \",  \n" +
	"				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
	"				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
	"				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
	"				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
	"				`vuss`.`shippingQty` AS shippingQty,  \n" +
	"				`vuss`.`remark` AS remark,  \n" +
	"				`vuss`.`Assy ID` AS PIDCode,  \n" +
	"				`vuss`.`Assy Name` AS mfgPN,  \n" +
	"				 vuss.poRevisionDate  As poRevisionDate,  \n" +
	"				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
	"				`vuss`.`NickName` AS nickName,  \n" +
	"				`vuss`.`liveVersion` AS liveVersion,  \n" +
	"				`vuss`.`partDescription` AS partDescription,  \n" +
	"				`vuss`.`cancleReason` AS cancleReason,  \n" +
	"				vuss.blanketPOOption,  \n" +
	"				vuss.blanketPOOptionText,  \n" +
	"                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
	"				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
	"                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
	"				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
	"                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
	"				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
	"				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
	"				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
	"				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
	"				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
	"				vuss.isBlanketPO,  \n" +
	"				vuss.blanketPOText,  \n" +
	"				vuss.poRevision,  \n" +
	"				vuss.partType,  \n" +
	"				vuss.isCancle,  \n" +
	"				vuss.mfgcodeID,  \n" +
	"				vuss.manufacturerName,  \n" +
	"				`vuss`.`PartID` AS partID,  \n" +
	"				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
	"				`vuss`.`kitNumber` AS kitNumber,  \n" +
	"				`vuss`.`serialNumber` AS serialNumber,  \n" +
	"				`vuss`.partCategory,  \n" +
	"				vuss.lineID,  \n" +
	"				vuss.internalCommentSo,  \n" +
	"				vuss.internalComment,  \n" +
	"				vuss.originalPODate,  \n" +
	"				vuss.linkToBlanketPO,  \n" +
	"				vuss.linkToBlanketPOText,  \n" +
	"				vuss.isRmaPO,  \n" +
	"				vuss.rmaPOText,  \n" +
	"				vuss.isLegacyPO,  \n" +
	"				vuss.legacyPOText,  \n" +
	"				vuss.originalPOQty,  \n" +
	"				vuss.requestedBPOStartDate,  \n" +
	"				 vuss.blanketPOEndDate,  \n" +
	"				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
	"				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
	"				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
	"				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
	"                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
	"				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
	"				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
	"                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
	"				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
	"                p.nextShipDate as nextShipDate,  \n" +
	"				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
	"                wo.WONumber as workorders,  \n" +
	"				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
	"                wo.WOIds as workorderIds,  \n" +
	"				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
	"				(  \n" +
	"					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
	"							'Draft'  \n" +
	"						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
	"							'Published'  \n" +
	"						ELSE  \n" +
	"							''  \n" +
	"					END  \n" +
	"				) AS `statusConvertedValue`,  \n" +
	"				hutkit.refType as refTypeKA,  \n" +
	"				hutkit.status as haltStatusKA,  \n" +
	"				(  \n" +
	"					CASE  \n" +
	"						WHEN 	hutkit.status = 'H' THEN  \n" +
	"								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
	"						ELSE 	''  \n" +
	"					END  \n" +
	"				) AS reasonKA,  \n" +
	"				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
	"				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
	"				(  \n" +
	"				CASE  \n" +
	"					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
	"						TRUE  \n" +
	"					ELSE  \n" +
	"						FALSE  \n" +
	"				END  \n" +
	"				) as isKitPlanningRequired,  \n" +
	"				(  \n" +
	"					CASE  \n" +
	"						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
	"							'Unplanned'  \n" +
	"						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
	"							'Partially Planned'  \n" +
	"						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
	"							'Fully Planned'  \n" +
	"						ELSE  \n" +
	"							NULL  \n" +
	"					END  \n" +
	"				) as kitPlanStatus,  \n" +
	"				/*(  \n" +
	"					CASE  \n" +
	"						WHEN 	ka.kitReturnStatus is null then  \n" +
	"							'N/A'  \n" +
	"						ELSE  \n" +
	"							ka.kitReturnStatus  \n" +
	"					END  \n" +
	"				) as kitReturnStatus,  */  \n" +
	"               fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToReturnCount,vrr.shortageReturnCount) as kitReturnStatus,  \n" +
	"				/*(  \n" +
	"					CASE  \n" +
	"						WHEN ka.kitReleaseStatus is null then  \n" +
	"							'Not Released'  \n" +
	"						else  \n" +
	"							ka.kitReleaseStatus  \n" +
	"					END  \n" +
	"				) as kitReleaseStatus,  */  \n" +
	"				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
	"				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
	"				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
	"					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
	"				p.nextReleaseDate,  \n" +
	"				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
	"				p.releasedPlanCount totalkitRelease,  \n" +
	"				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
	"				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
	"				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
	"				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
	"				vuss.releasedWorkorder,  \n" +
	"                ka.shortagePer,  \n" +
	"				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
	"                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
	"					 when vuss.partCategory <> 3 then 0  \n" +
	"                     else 1 end) isKitPlanAllowed,  \n" +
	"				vuss.releasedWorkorderNmberAndId , astk.initialStockCount ,  \n" +
	"				vuss.rmaNumber,vuss.isDebitedByCustomer, vuss.debitedByCustText,  \n" +
	"				vuss.rmaOrgPONumber,vuss.orgSalesOrderID,vuss.isReworkRequired,  \n" +
	"				vuss.reworkReqText, vuss.reworkPONumber,vuss.custOrgPOLineNumber \",v_DynamicColumns,  \n" +
	"		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
	"		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
	"					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
	"					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
	"	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
	"					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
	"	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
	"					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
	"					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
	"	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
	"					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
	"					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
	"					group by wsd.salesOrderDetailID ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
	"        LEFT JOIN  	(  \n" +
	"					SELECT  salesOrderDetID,  \n" +
	"							refAssyId,  \n" +
	"                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
	"                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
	"                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
	"						count(1) totalPlan,  \n" +
	"						SUM(poQty) totalPOQty,  \n" +
	"						SUM(kitReleaseQty) totalKitQty,  \n" +
	"						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
	"						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
	"					FROM 	salesorder_plan_detailsmst  \n" +
	"					WHERE 	isDeleted = 0  \n" +
	"					AND 	subAssyID is null  \n" +
	"					GROUP BY salesOrderDetID, refAssyId  \n" +
	"				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
	"		LEFT JOIN (  \n" +
	"				SELECT	salesOrderDetID,  \n" +
	"						refAssyId,  \n" +
	"						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
	"						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
	"						SUM(CASE WHEN kitReturnStatus ='FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
	"						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToReturnCount,  \n" +
	"						SUM(CASE WHEN kitReturnStatus ='RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
	"				FROM 	vu_release_plan_release_return_status_det  \n" +
	"                GROUP BY salesOrderDetID, refAssyId  \n" +
	"        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
	"		LEFT JOIN 	(  \n" +
	"						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
	"						`k`.`assyID` AS `assyID`,  \n" +
	"						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
	"						`k`.`shortageLine` AS `shortageLine`,  \n" +
	"						allocPermainAssy allocPerComponent,  \n" +
	"						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
	"						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
	"						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
	"						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
	"						FROM (  \n" +
	"							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
	"								mainAssy AS `assyID`,  \n" +
	"								COUNT(1) AS `totalLine`,  \n" +
	"								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
	"								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
	"								sum( k.shortageline) shortageline,  \n" +
	"								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
	"								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
	"							  FROM (  \n" +
	"  \n" +
	"									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
	"										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
	"										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
	"										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
	"										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
	"										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
	"										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
	"										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
	"									FROM  	`vu_kit_allocation_detail` vk  \n" +
	"									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
	"									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
	"								) `k`  \n" +
	"							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
	"						) `k`  \n" +
	"					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
	"			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
	"			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
	"            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
	"							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
	"                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
	"						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
	"		) AS a  \n" +
	"    \");  \n" +
	"    IF(pIsKitList = 1) THEN  \n" +
	"		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF (pOrderBy IS NOT NULL) THEN  \n" +
	"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
	"	ELSE  \n" +
	"		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
	"		SET pWhereClause = '1=1' ;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
	"		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
	"			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
	"		ELSE  \n" +
	"			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
	"		END IF;  \n" +
	"	END IF;  \n" +
	"    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
	"          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
	"	  IF(psearchposotype='C')THEN  \n" +
	"             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'' OR rmaNumber  like ''%',psearchposotext,'%'')');  \n" +
	"          ELSE  \n" +
	"             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''' OR rmaNumber  =''',psearchposotext,''')');  \n" +
	"          END IF;  \n" +
	"	 END IF;  \n" +
	"    IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
	"	  IF(psearchextPricetype='C')THEN  \n" +
	"			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
	"		ELSE  \n" +
	"			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
	"		END IF;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(prushJob = 1) THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(pworkorders IS NOT NULL)THEN  \n" +
	"		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
	"	END IF;  \n" +
	"	IF(ppartIds IS NOT NULL)THEN  \n" +
	"		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
	"	END IF;  \n" +
	"	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(pIsRmaPO = 1) THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause, ' AND isRmaPO = 1');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	-- from date to date filter  \n" +
	"	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
	"		IF pDateType='SO' THEN  \n" +
	"			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
	"        ELSEIF pDateType='PO' THEN  \n" +
	"			SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromDate,''' and poDate<=''',ptoDate,''')');  \n" +
	"         ELSEIF pDateType='PR' THEN  \n" +
	"			SET pWhereClause=CONCAT(pWhereClause, ' and (poRevisionDate>=''',pfromDate,''' and poRevisionDate<=''',ptoDate,''')');  \n" +
	"         END IF;  \n" +
	"	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
	"		IF pDateType='SO' THEN  \n" +
	"			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
	"        ELSEIF pDateType='PO' THEN  \n" +
	"			SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromDate,''')');  \n" +
	"         ELSEIF pDateType='PR' THEN  \n" +
	"            SET pWhereClause=CONCAT(pWhereClause, ' and (poRevisionDate>=''',pfromDate,''')');  \n" +
	"         END IF;  \n" +
	"	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
	"		IF pDateType='SO' THEN  \n" +
	"			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
	"        ELSEIF pDateType='PO' THEN  \n" +
	"			SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoDate,''')');  \n" +
	"         ELSEIF pDateType='PR' THEN  \n" +
	"            SET pWhereClause=CONCAT(pWhereClause, ' and (poRevisionDate<=''',ptoDate,''')');  \n" +
	"         END IF;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF pSearchComments IS NOT NULL AND pSearchComments <> '' THEN  \n" +
	"		SET pWhereClause= CONCAT(pWhereClause, \" AND (remark like '%\", pSearchComments, \"%'  \n" +
	"									OR internalComment like '%\", pSearchComments, \"%'  \n" +
	"                                    OR internalCommentSO like '%\", pSearchComments, \"%'  \n" +
	"                                    OR shippingComment like '%\", pSearchComments, \"%'  \n" +
	"                                    OR partDescription like '%\", pSearchComments, \"%')\" );  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
	"    END IF;  \n" +
	"  \n" +
	"  	IF(pIsKitList = 1) THEN  \n" +
	"  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
	"		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
	"		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
	"			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
	"		END IF;  \n" +
	"		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
	"			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
	"		END IF;  \n" +
	"		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
	"			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
	"		END IF;  \n" +
	"        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF (pSalesOrderDetailId != 0) THEN  \n" +
	"		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
	"	END IF;  \n" +
	"  \n" +
	"  \n" +
	"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
	"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
	"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
	"	ELSE  \n" +
	"		SET rowNumWhere = '';  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	/* to get total count of rows */  \n" +
	"	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
	"   PREPARE query1 FROM @SQLStatement1;  \n" +
	"	EXECUTE query1;  \n" +
	"	DEALLOCATE PREPARE query1;  \n" +
	"  \n" +
	"	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
	"    PREPARE query2 FROM @SQLStatement2;  \n" +
	"	EXECUTE query2;  \n" +
	"	DEALLOCATE PREPARE query2;  \n" +
	"  \n" +
	"	IF pIsKitList = 1 THEN  \n" +
	"		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
	"		PREPARE query3 FROM @SQLStatement3;  \n" +
	"		EXECUTE query3;  \n" +
	"		DEALLOCATE PREPARE query3;  \n" +
	"    END IF;  \n" +
	"END;  \n" +
  /* **************************** Add Script Version -> 22-02-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5945,'2.00','V1','US: 39398: UI updates for filter changes on SO,CPS,CINV,CCM - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;

case 5945:
  allDbChangesArray.push(
  /* **************************** New Script -> 22-02-2022*********************************** */
	"drop procedure if exists Sproc_GetSalesOrderSummaryList;  \n" +
	"CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
	"	IN ppageIndex INT(11),  \n" +
	"	IN precordPerPage INT(11),  \n" +
	"	IN pOrderBy VARCHAR(255),  \n" +
	"	IN pWhereClause VARCHAR(16383),  \n" +
	"	IN pfilterStatus VARCHAR(100),  \n" +
	"	IN pcustomerIds VARCHAR(16000),  \n" +
	"	IN pshippingMethodId VARCHAR(16000),  \n" +
	"	IN ptermsIds VARCHAR(16000),  \n" +
	"	IN psearchposotext VARCHAR(1000),  \n" +
	"	IN psearchposotype VARCHAR(10),  \n" +
	"	IN pfromDate DATE,  \n" +
	"	IN ptoDate DATE,  \n" +
	"	IN psearchextPricetext VARCHAR(1000),  \n" +
	"	IN psearchextPricetype VARCHAR(10),  \n" +
	"	IN pfilterPOStatus VARCHAR(20)  ,  \n" +
	"    IN pIsRmaPO TINYINT,  \n" +
	"    IN pDateType VARCHAR(10),  \n" +
	"    IN pSearchComments VARCHAR(200),  \n" +
	"    IN ppartIds VARCHAR(16000)  \n" +
	"	)  \n" +
	"BEGIN  \n" +
	"  \n" +
	"		DECLARE pOffset INT(11);  \n" +
	"		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
	"		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
	"		DECLARE v_TimeZone VARCHAR(50);  \n" +
	"		DECLARE v_mfrFormat INT;  \n" +
	"		DECLARE v_empFormat INT;  \n" +
	"  \n" +
	"		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
	"		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
	"		SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormat;  \n" +
	"		SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
	"  \n" +
	"		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
	"       s.salesOrderNumber,  \n" +
	"       s.poNumber,  \n" +
	"       s.poDate,  \n" +
	"       s.customerID,  \n" +
	"       s.contactPersonID,  \n" +
	"       s.billingAddressID,  \n" +
	"       s.shippingAddressID,  \n" +
	"       s.shippingMethodID,  \n" +
	"       s.revision,  \n" +
	"       s.shippingComment,  \n" +
	"       s.termsID,  \n" +
	"       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
	"       CASE WHEN s.blanketPOOption=1 THEN 'Use This Blanket PO# for All Releases' WHEN s.blanketPOOption=2 THEN 'Link Future PO(s) to This Blanket PO' WHEN s.blanketPOOption=3 THEN 'Use Blanket PO# and Release# for All Releases' ELSE '' END blanketPOOptionText,  \n" +
	"       s.blanketPOOption,  \n" +
	"       s.status,  \n" +
	"       s.soDate,  \n" +
	"       s.revisionChangeNote,  \n" +
	"       s.salesCommissionTo,  \n" +
	"       s.intermediateShipmentId,  \n" +
	"       s.freeOnBoardId,  \n" +
	"       s.internalComment as internalCommentSo,  \n" +
	"       s.serialNumber,  \n" +
	"       s.carrierID,  \n" +
	"       s.carrierAccountNumber,  \n" +
	"       s.originalPODate,  \n" +
	"       s.isLegacyPO,  \n" +
	"       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
	"       s.isRmaPO,  \n" +
	"       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
	"       s.poRevision,  \n" +
	"       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
	"       s.isBlanketPO,  \n" +
	"       fun_GetFormattedMfgCode(mg.mfgCode,mg.mfgName,\",v_mfrFormat,\") companyName,  \n" +
	"       mg.mfgName,  \n" +
	"       mg.mfgCode,  \n" +
	"       s.poRevisionDate,  \n" +
	"       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
	"        s.linkToBlanketPO,  \n" +
	"        CASE WHEN s.linkToBlanketPO=1 THEN 'Yes' ELSE 'No' END linkToBlanketPOText,  \n" +
	"       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
	"       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
	"       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
	"       fb.name freeOnBoardName,  \n" +
	"       s.`rmaNumber` AS `rmaNumber`,  \n" +
	"	   s.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
	"	   (CASE WHEN (s.`isDebitedByCustomer` = 1) THEN 'Yes' ELSE 'No' END) AS `debitedByCustText`,  \n" +
	"       s.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
	"       s.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
	"		s.`isReworkRequired` AS `isReworkRequired`,  \n" +
	"       (CASE  WHEN (s.`isReworkRequired` = 1) THEN 'Yes'  ELSE 'No'  END) AS `reworkReqText`,  \n" +
	"	   s.`reworkPONumber` AS `reworkPONumber`,  \n" +
	"      ifnull(sodCnt.totalLineCount,0)  totalSOLines,  \n" +
	"       ifnull(sodCnt.completedLineCount,0) totalCompletedSOLines,  \n" +
	"       (case when sodCnt.totalLineCount is null then 0 else  Round((sodCnt.completedLineCount * 100/sodCnt.totalLineCount),2) end)soCompletionPercentage,  \n" +
	"      (case when sodCnt.canceledLineCount = ifnull(sodCnt.totalLineCount,0) then 'Canceled'  \n" +
	"			when (sodCnt.canceledLineCount + sodCnt.completedLineCount) = ifnull(sodCnt.totalLineCount,0)  then 'Completed'  \n" +
	"            else 'In Progress' end) salesOrderDetStatusConvertedValues,  \n" +
	"      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
	"      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
	"			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
	"			fun_getAddressbyID(s.billingAddressID) billingAddressText,  \n" +
	"			fun_getAddressbyID(s.shippingAddressID) shippingAddressText,  \n" +
	"			fun_getAddressbyID(s.intermediateShipmentId) intermediateText,  \n" +
	"			fun_contactPersonDetailByID(s.billingContactPersonID) billToContactPerson,  \n" +
	"			fun_contactPersonDetailByID(s.shippingContactPersonID) shipToToContactPerson,  \n" +
	"			fun_contactPersonDetailByID(s.intermediateContactPersonID) markToToContactPerson,  \n" +
	"			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
	"			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
	"			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
	"                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
	"		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  ,  \n" +
	"               fun_GetEmployeeFormattedName(salecomm.firstName,salecomm.middleName,salecomm.lastName,salecomm.initialName,\",v_empFormat,\") salesCommName  \n" +
	"			FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
	"			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
	"            LEFT JOIN employees salecomm ON salecomm.id = s.salesCommissionTo and salecomm.isDeleted = 0  \n" +
	"			LEFT JOIN ( select sod.refSalesOrderID as soId ,  \n" +
	"							sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
	"							count(1) totalLineCount,  \n" +
	"                            sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
	"                            From salesorderdet sod where sod.isDeleted = 0  \n" +
	"                            Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = s.id  \n" +
	"			WHERE s.isdeleted=0  \n" +
	"			\");  \n" +
	"  \n" +
	"  \n" +
	"		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
	"			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
	"		ELSE  \n" +
	"			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
	"		END IF;  \n" +
	"  \n" +
	"		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
	"			SET pWhereClause = '1=1' ;  \n" +
	"		END IF;  \n" +
	"  \n" +
	"			IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
	"		  SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
	"		END IF;  \n" +
	"	        IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
	"  \n" +
	"		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
	"	        END IF;  \n" +
	"	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
	"		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
	"		END IF;  \n" +
	"  \n" +
	"		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
	"			SET pWhereClause = '1=1' ;  \n" +
	"		END IF;  \n" +
	"                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
	"			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
	"		END IF;  \n" +
	"                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
	"			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
	"		END IF;  \n" +
	"		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
	"			IF(psearchposotype='C')THEN  \n" +
	"				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
	"			ELSE  \n" +
	"				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
	"			END IF;  \n" +
	"		END IF;  \n" +
	"		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
	"			IF(psearchextPricetype='C')THEN  \n" +
	"				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
	"			ELSE  \n" +
	"				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
	"			END IF;  \n" +
	"		END IF;  \n" +
	"		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
	"			IF pDateType='SO' THEN  \n" +
	"				SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
	"			ELSEIF pDateType='PO' THEN  \n" +
	"				SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromDate,''' and poDate<=''',ptoDate,''')');  \n" +
	"			ELSEIF pDateType='PR' THEN  \n" +
	"				SET pWhereClause=CONCAT(pWhereClause, ' and (poRevisionDate>=''',pfromDate,''' and poRevisionDate<=''',ptoDate,''')');  \n" +
	"			END IF;  \n" +
	"			-- SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
	"		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
	"			IF pDateType='SO' THEN  \n" +
	"				SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
	"			ELSEIF pDateType='PO' THEN  \n" +
	"				SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromDate,''')');  \n" +
	"			ELSEIF pDateType='PR' THEN  \n" +
	"				SET pWhereClause=CONCAT(pWhereClause, ' and (poRevisionDate>=''',pfromDate,''')');  \n" +
	"			END IF;  \n" +
	"			-- SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
	"		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
	"			IF pDateType='SO' THEN  \n" +
	"				SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
	"			ELSEIF pDateType='PO' THEN  \n" +
	"				SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoDate,''')');  \n" +
	"			ELSEIF pDateType='PR' THEN  \n" +
	"				SET pWhereClause=CONCAT(pWhereClause, ' and (poRevisionDate<=''',ptoDate,''')');  \n" +
	"			END IF;  \n" +
	"			-- SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
	"		END IF;  \n" +
	"       /* IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
	"			SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
	"		ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
	"		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
	"		ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
	"		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
	"		END IF;  */  \n" +
	"        IF pSearchComments IS NOT NULL AND pSearchComments <> '' THEN  \n" +
	"			SET pWhereClause= CONCAT(pWhereClause, \" AND (internalCommentSo like '%\", pSearchComments, \"%'  \n" +
	"									OR shippingComment like '%\", pSearchComments, \"%')\" );  \n" +
	"		END IF;  \n" +
	"        IF ppartIds IS NOT NULL THEN  \n" +
	"              SET pWhereClause= CONCAT(pWhereClause, \" AND c.id in (select refSalesOrderID from salesorderdet where isDeleted =0 and FIND_IN_SET(partID ,'\",ppartIds,\"'))\");  \n" +
	"        END IF;  \n" +
	"  \n" +
	"		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
	"			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
	"			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
	"		ELSE  \n" +
	"			SET rowNumWhere = '';  \n" +
	"		END IF;  \n" +
	"  \n" +
	"		/* to get total count of rows */  \n" +
	"		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
	" -- select @SQLStatement2;  \n" +
	"		PREPARE query2 FROM @SQLStatement2;  \n" +
	"		EXECUTE query2;  \n" +
	"		DEALLOCATE PREPARE query2;  \n" +
	"  \n" +
	"		SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
	"				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
	"  \n" +
	"			PREPARE query1 FROM @SQLStatement1;  \n" +
	"  \n" +
	"			 EXECUTE query1;  \n" +
	"		       DEALLOCATE PREPARE query1;  \n" +
	"  \n" +
	"END;  \n" +
  /* **************************** Add Script Version -> 22-02-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5946,'2.00','V1','US: 39398: UI updates for filter changes on SO,CPS,CINV,CCM - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;

case 5946:
  allDbChangesArray.push(
  /* **************************** New Script -> 22-02-2022*********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerInvoiceDetails;  \n" +
	"CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(  \n" +
	"	IN ppageIndex INT,  \n" +
	"	IN precordPerPage INT,  \n" +
	"	IN pOrderBy VARCHAR(255),  \n" +
	"	IN pWhereClause VARCHAR(16383),  \n" +
	"	IN pFilterStatus LONGTEXT,  \n" +
	"	IN pDueDate DATE,  \n" +
	"	IN pAdditionalDays INT,  \n" +
	"	IN pTermsAndAboveDays INT,  \n" +
	"	IN pPoNumber VARCHAR(50),  \n" +
	"	IN pIsExactSearchPO TINYINT,  \n" +
	"	IN pMfgCodeIds LONGTEXT ,  \n" +
	"	IN pPaymentTermsIds LONGTEXT ,  \n" +
	"	IN pPartId VARCHAR(5000) ,  \n" +
	"	IN pTransType VARCHAR(5) ,  \n" +
	"	IN pFromDate DATE,  \n" +
	"	IN pToDate DATE,  \n" +
	"	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
	"	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
	"	IN pZeroAmountFilter TINYINT,  \n" +
	"	IN pCreditMemoRefundStatusFilter VARCHAR(100)      ,  \n" +
	"	IN pMarkedForRefund TINYINT  ,  \n" +
	"    IN pDateType VARCHAR(10),  \n" +
	"    IN pSearchComments VARCHAR(200)  \n" +
	"	-- IN pChequeNumber  VARCHAR(50)  \n" +
	")  \n" +
	"BEGIN  \n" +
	"  \n" +
	"	DECLARE pOffset INT;  \n" +
	"	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
	"	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
	"	DECLARE vTimeZone VARCHAR(50);  \n" +
	"	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
	"	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
	"	DECLARE vMfgCodeFormat INT;  \n" +
	"    DECLARE v_empFormat INT;  \n" +
	"  \n" +
	"	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
	"	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
	"	SET v_appliedCMPDJoin = '';  \n" +
	"	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
	"    SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
	"  \n" +
	"	IF pTransType = 'C' THEN  \n" +
	"		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
	"				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
	"						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
	"				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
	"		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
	"						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
	"	ELSE  \n" +
	"		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount ,  \n" +
	"						NULL as totRefundIssuedAgainstCreditMemo , ');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"  \n" +
	"  \n" +
	"	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"  \n" +
	"		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
	"        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
	"        cp.packingSlipNumber,cp.packingslipDate,  \n" +
	"        cp.invoiceNumber,cp.invoiceDate, cp.revision,  \n" +
	"        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
	"        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
	"        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
	"				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
	"	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
	"				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
	"        cp.soNumber,cp.soDate,  \n" +
	"		cp.sorevision,  \n" +
	"        cp.refSalesOrderID,  \n" +
	"        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,  \n" +
	"        cp.refCustInvoiceID,  \n" +
	"		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
	"		 cp.status,  \n" +
	"         cp.subStatus,  \n" +
	"		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
	"		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
	"		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
	"			ELSE '' END) AS creditAppliedStatus ,  \n" +
	"		  cp.paymentStatus,  \n" +
	"          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
	"		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
	"		  ifnull(cp.totalAmount,0) totalAmount,  \n" +
	"          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
	"		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
	"		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,  \n" +
	"         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,  \n" +
	"		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,  \n" +
	"		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\", vMfgCodeFormat,\") as customerName,  \n" +
	"		 m.mfgcode as customerCode,  \n" +
	"         cp.customerID,  \n" +
	"         cp.createdBy as createdById,  \n" +
	"		\",v_receivedAmtSF,\"  \n" +
	"		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,  \n" +
	"		 fun_getUserNameByID(cp.updatedBy) updatedby,  \n" +
	"		 fun_getUserNameByID(cp.createdBy) createdby,  \n" +
	"		 fun_getRoleByID(cp.createByRoleId) createdbyRole,  \n" +
	"		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,  \n" +
	"		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
	"		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
	"         fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,  \n" +
	"         cp.salesCommissionTo,  \n" +
	"         fun_GetEmployeeFormattedName(salecomm.firstName,salecomm.middleName,salecomm.lastName,salecomm.initialName,\",v_empFormat,\") salesCommissionToName,  \n" +
	"         cp.termsDays termDays,  \n" +
	"         cp.freeOnBoardId,  \n" +
	"         cp.freeOnBoardName,  \n" +
	"         cp.isLocked,  \n" +
	"         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
	"         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
	"         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
	"         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
	"         cp.shippingMethodId, fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
	"         packingSlip.id packingSlipId,  \n" +
	"         (select group_concat(paymentNumber)  \n" +
	"				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
	"				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
	"                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
	"		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,  \n" +
	"		 (select COUNT(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) cpTrackNumberCount,  \n" +
	"         cp.rmaNumber , cp.systemId,  \n" +
	"        fun_getAddressbyID(cp.intermediateShipmentId) intermediateAddress,  \n" +
	"		fun_getAddressbyID(cp.shipToId) shippingAddress,  \n" +
	"		fun_getAddressbyID(cp.billToId) billingAddress,  \n" +
	"        fun_getFormattedContactPerson(billCP.firstName,billCP.middleName,billCP.lastName,billCP.division,billCP.email,billCP.phoneCountryCode, fun_getPrimaryPhoneFromJsonList(billCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(billCP.phoneNumber), billCP.mobile, billCP.faxCountryCode, billCP.faxNumber) billToContactPerson,  \n" +
	"		fun_getFormattedContactPerson(shipCP.firstName,shipCP.middleName,shipCP.lastName,shipCP.division,shipCP.email,shipCP.phoneCountryCode,fun_getPrimaryPhoneFromJsonList(shipCP.phoneNumber) , fun_getPrimaryPhExtensionFromJsonList(shipCP.phoneNumber), shipCP.mobile, shipCP.faxCountryCode, shipCP.faxNumber) shipToToContactPerson,  \n" +
	"		fun_getFormattedContactPerson(interCP.firstName,interCP.middleName,interCP.lastName,interCP.division,interCP.email,interCP.phoneCountryCode, fun_getPrimaryPhoneFromJsonList(interCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(interCP.phoneNumber), interCP.mobile, interCP.faxCountryCode, interCP.faxNumber) markToToContactPerson,  \n" +
	"         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
	"         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,  \n" +
	"         (SELECT `paymentDate` FROM packingslip_invoice_payment_det pipd  \n" +
	"					JOIN packingslip_invoice_payment pip ON pipd.`refPayementid` = pip.id  \n" +
	"		WHERE pipd.`refCustPackingslipInvoiceID` = cp.id AND pip.refPaymentMode = 'R' AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
	"		AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0 ORDER BY pipd.id DESC LIMIT 1) AS lastRcvdPaymentDate ,  \n" +
	"		fun_getGenericCategoryCodeNameByID(cp.carrierID) carrierName,  \n" +
	"        cp.carrierID , cp.carrierAccountNumber  \n" +
	"	 FROM customer_packingslip cp  \n" +
	"		JOIN mfgcodemst m on m.id = cp.customerID  \n" +
	"        LEFT JOIN contactperson billCP ON billCP.personId = cp.billingContactPersonID and billCP.isDeleted = 0  \n" +
	"        LEFT JOIN contactperson shipCP ON shipCP.personId = cp.shippingContactPersonID and shipCP.isDeleted = 0  \n" +
	"        LEFT JOIN contactperson interCP ON interCP.personId = cp.intermediateContactPersonID and interCP.isDeleted = 0  \n" +
	"		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
	"        LEFT JOIN employees salecomm ON salecomm.id = cp.salesCommissionTo and salecomm.isDeleted = 0  \n" +
	"		\" , v_appliedCMPDJoin ,\"  \n" +
	"	WHERE  cp.isDeleted=0  \n" +
	"        AND cp.transType = '\" , pTransType,\"'\");  \n" +
	"  \n" +
	"  \n" +
	"  \n" +
	"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
	"		IF pTransType = 'I' THEN  \n" +
	"			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
	"		ELSE  \n" +
	"			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
	"		END IF;  \n" +
	"	ELSE  \n" +
	"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
	"		SET pWhereClause = '1=1' ;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.termsId in (', pPaymentTermsIds, ' )');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF pPartId IS NOT NULL THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	# IF(pChequeNumber IS NOT NULL)THEN  \n" +
	"	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');  \n" +
	"	# END IF;  \n" +
	"  \n" +
	"	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF pDueDate IS NOT NULL THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) END) \");  \n" +
	"	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) END) \");  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
	"		IF pIsExactSearchPO = 1 THEN  \n" +
	"			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
	"										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
	"										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
	"										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
	"                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
	"										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
	"						);  \n" +
	"		ELSE  \n" +
	"			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
	"										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
	"										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
	"										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
	"                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
	"										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
	"						);  \n" +
	"		END IF;  \n" +
	"	END IF;  \n" +
	"    IF pSearchComments IS NOT NULL AND pSearchComments != '' THEN  \n" +
	"		SET pWhereClause= CONCAT(pWhereClause, \" AND (c.packingSlipComment like '%\", pSearchComments, \"%'  \n" +
	"									OR 	c.headerComment like '%\", pSearchComments, \"%')\" );  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	# select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
	"	/*IF pFromDate IS NOT NULL THEN  \n" +
	"		IF pTransType = 'I' THEN  \n" +
	"			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
	"		ELSE  \n" +
	"			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
	"		END IF;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF pToDate IS NOT NULL THEN  \n" +
	"		IF pTransType = 'I' THEN  \n" +
	"			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
	"		ELSE  \n" +
	"			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
	"		END IF;  \n" +
	"	END IF;  */  \n" +
	"    IF pFromDate IS NOT NULL THEN  \n" +
	"        IF pDateType = 'I' THEN  \n" +
	"			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
	"        ELSEIF pDateType = 'P' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.packingSlipDate >= '\",pFromDate ,\"'\");  \n" +
	"		ELSEIF pDateType = 'PO' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.poDate >= '\",pFromDate ,\"'\");  \n" +
	"		ELSEIF pDateType = 'SO' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.soDate >= '\",pFromDate ,\"'\");  \n" +
	"		ELSEIF pDateType = 'C' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
	"		ELSEIF pDateType = 'D' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.refDebitMemoDate >= '\",pFromDate ,\"'\");  \n" +
	"        END IF;  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF pToDate IS NOT NULL THEN  \n" +
	"		IF pDateType = 'I' THEN  \n" +
	"			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
	"        ELSEIF pDateType = 'P' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.packingSlipDate <= '\",pToDate ,\"'\");  \n" +
	"		ELSEIF pDateType = 'PO' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.poDate <= '\",pToDate ,\"'\");  \n" +
	"		ELSEIF pDateType = 'SO' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.soDate <= '\",pToDate ,\"'\");  \n" +
	"		ELSEIF pDateType = 'C' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
	"		ELSEIF pDateType = 'D' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.refDebitMemoDate <= '\",pToDate ,\"'\");  \n" +
	"        END IF;  \n" +
	"    END IF;  \n" +
	"  \n" +
	"	IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
	"		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"  \n" +
	"	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
	"		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
	"		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	-- filter zero amount invoice  \n" +
	"	IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
	"		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF pMarkedForRefund = 1 THEN  \n" +
	"		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
	"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
	"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
	"	ELSE  \n" +
	"		SET rowNumWhere = '';  \n" +
	"	END IF;  \n" +
	"  \n" +
	"  \n" +
	"  \n" +
	"	 /* to get total count of rows */  \n" +
	"	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
	"	PREPARE query2 FROM @SQLStatement2;  \n" +
	"	EXECUTE query2;  \n" +
	"	DEALLOCATE PREPARE query2;  \n" +
	"  \n" +
	"	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
	"		 round((c.totalAmount),2) totalAmount,  \n" +
	"    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,  \n" +
	"    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0) + IFNULL(c.totRefundIssuedAgainstCreditMemo,0) ),2)  \n" +
	"				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,  \n" +
	"                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
	"						else '' end) materialStatus from ( \",  \n" +
	"			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
	"  \n" +
	"	--  select @SQLStatement2	;  \n" +
	"  \n" +
	"	PREPARE query1 FROM @SQLStatement2;  \n" +
	"	EXECUTE query1;  \n" +
	"	DEALLOCATE PREPARE query1;  \n" +
	"END;  \n" +
  /* **************************** Add Script Version -> 22-02-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5947,'2.00','V1','US: 39398: UI updates for filter changes on SO,CPS,CINV,CCM - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;

case 5947:
  allDbChangesArray.push(
  /* **************************** New Script -> 22-02-2022*********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerInvoiceDetailsPerLine;  \n" +
	"CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetailsPerLine`(  \n" +
	"	IN ppageIndex INT,  \n" +
	"	IN precordPerPage INT,  \n" +
	"	IN pOrderBy VARCHAR(255),  \n" +
	"	IN pWhereClause VARCHAR(16383),  \n" +
	"	IN pFilterStatus LONGTEXT,  \n" +
	"	IN pDueDate DATE,  \n" +
	"	IN pAdditionalDays INT,  \n" +
	"	IN pTermsAndAboveDays INT,  \n" +
	"	IN pPoNumber VARCHAR(50),  \n" +
	"	IN pIsExactSearchPO TINYINT,  \n" +
	"	IN pMfgCodeIds LONGTEXT ,  \n" +
	"	IN pPaymentTermsIds LONGTEXT ,  \n" +
	"	IN pPartId VARCHAR(5000) ,  \n" +
	"	IN pTransType VARCHAR(5) ,  \n" +
	"	IN pFromDate DATE,  \n" +
	"	IN pToDate DATE,  \n" +
	"	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
	"	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
	"	IN pZeroAmountFilter TINYINT,  \n" +
	"	IN pCreditMemoRefundStatusFilter VARCHAR(100),  \n" +
	"    IN pMarkedForRefund TINYINT,  \n" +
	"    IN pWithCommissionLine TINYINT,  \n" +
	"    IN pWithOtherChargesLine TINYINT,  \n" +
	"    IN pZeroAmountLineFilter TINYINT,  \n" +
	"    IN pDateType VARCHAR(10),  \n" +
	"    IN pSearchComments VARCHAR(200)  \n" +
	")  \n" +
	"BEGIN  \n" +
	"  \n" +
	"	DECLARE pOffset INT;  \n" +
	"	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
	"	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
	"	DECLARE vTimeZone VARCHAR(50);  \n" +
	"	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
	"	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
	"	DECLARE vMfgCodeFormat INT;  \n" +
	"  \n" +
	"	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
	"	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
	"	SET v_appliedCMPDJoin = '';  \n" +
	"    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
	"  \n" +
	"	IF pTransType = 'C' THEN  \n" +
	"		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
	"				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
	"						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
	"				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
	"		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
	"						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
	"	ELSE  \n" +
	"		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount , ');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"  \n" +
	"  \n" +
	"	SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine = CONCAT(\"  \n" +
	"		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
	"        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
	"        cp.packingSlipNumber,  \n" +
	"        cp.packingslipDate,  \n" +
	"        cp.invoiceNumber,  \n" +
	"        cp.invoiceDate,  \n" +
	"        cp.revision,  \n" +
	"        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
	"        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
	"        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
	"				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
	"	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
	"				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
	"        cp.soNumber,cp.soDate,  \n" +
	"		cp.sorevision,  \n" +
	"        cp.refSalesOrderID,  \n" +
	"        cpd.shippingNotes , cpd.internalComment,  \n" +
	"		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
	"		 cp.status, cp.subStatus,  \n" +
	"         (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
	"		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
	"		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
	"			ELSE '' END) AS creditAppliedStatus ,  \n" +
	"		  cp.paymentStatus,  \n" +
	"          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
	"		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
	"          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
	"		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
	"		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\",vMfgCodeFormat,\") as customerName,  \n" +
	"		 m.mfgcode as customerCode,  \n" +
	"         cp.customerID,  \n" +
	"         cpd.createdBy as createdById,  \n" +
	"		\",v_receivedAmtSF,\"  \n" +
	"		 fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
	"		 fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
	"		 fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
	"		 fun_getRoleByID(cpd.updateByRoleId) updatedbyRole,  \n" +
	"		 fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
	"		 fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
	"         cp.freeOnBoardName,  \n" +
	"         cp.isLocked,  \n" +
	"         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
	"         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
	"         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
	"         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
	"         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
	"         packingSlip.id packingSlipId,  \n" +
	"         (select group_concat(paymentNumber)  \n" +
	"				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
	"				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
	"                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
	"         cp.rmaNumber , cp.systemId,  \n" +
	"         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
	"         cpd.isZeroValue,  fun_getIntToText(cpd.isZeroValue) isZeroValueConverted,  \n" +
	"         cp.termsDays termDays,  \n" +
	"         fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId) paymentDueDate,  \n" +
	"         cpd.id detID,  \n" +
	"         cpd.partId,  \n" +
	"         co.mfgpn,  \n" +
	"         cpd.assyDescription ,  \n" +
	"         co.PIDCode,  \n" +
	"         co.RoHSStatusID,  \n" +
	"         co.mfgcodeID,  \n" +
	"         co.nickname,  \n" +
	"         cpd.lineID,  \n" +
	"         cpd.reflineID,  \n" +
	"         cpd.custPOLineID,  \n" +
	"         cpd.shipQty,  \n" +
	"         cpd.unitPrice,  \n" +
	"         cpd.componentStockType,  \n" +
	"         cpd.extendedPrice,  \n" +
	"         othercharges AS lineOtherCharges,  \n" +
	"         (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,  \n" +
	"		 cpd.quoteNumber,  \n" +
	"		 cpd.quoteFrom,  \n" +
	"         (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,  \n" +
	"		 (case when cpd.quoteFrom = 2 then cpd.refAssyQtyTurnTimeID  \n" +
	"			  when cpd.quoteFrom = 1 then cpd.refRFQQtyTurnTimeID  \n" +
	"              else null end) qtyTurnTimeID,  \n" +
	"		 cpd.assyQtyTurnTimeText,  \n" +
	"		 cpd.refRFQGroupID,  \n" +
	"         rohs.rohsIcon,  \n" +
	"         rohs.name rohsName,  \n" +
	"         fun_GetFormattedMfgCode(partMfr.mfgcode,partMfr.mfgname,\",vMfgCodeFormat,\") as mfrName,  \n" +
	"         (select count(1) from customer_packingslip_commission_attribute_mstdet cpcomm where cpcomm.refCustPackingSlipDetID = cpd.id and cpcomm.isDeleted = 0 ) as commissionCnt,  \n" +
	"         (select count(1) from customer_packingslip_otherexpense_details cpOther where cpOther.refCustomerPackingSlipDetID = cpd.id and cpOther.isDeleted = 0 ) as lineOtherChargesCnt,  \n" +
	"         cp.totalAmount,  \n" +
	"         cp.refCustInvoiceID,  \n" +
	"         co.partType,  \n" +
	"         co.isCustom, co.custAssyPN customPartNumber ,  \n" +
	"         cpd.releaseNotes  ,  \n" +
	"         cp.headerComment,cp.packingSlipComment  \n" +
	"	 FROM customer_packingslip cp  \n" +
	"	JOIN mfgcodemst m on m.id = cp.customerID and m.isDeleted = 0  \n" +
	"	JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID = cp.id and cpd.isDeleted = 0  \n" +
	"	JOIN component co on co.id = cpd.partId  and co.isDeleted = 0  \n" +
	"	LEFT JOIN mfgcodemst partMfr on partMfr.id = co.mfgcodeID and partMfr.isDeleted = 0  \n" +
	"	LEFT JOIN rfq_rohsmst rohs ON rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
	"	LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
	"		\" , v_appliedCMPDJoin ,\"  \n" +
	"	WHERE  cp.isDeleted=0  \n" +
	"        AND cp.transType = '\" , pTransType,\"'\");  \n" +
	"  \n" +
	"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
	"		IF pTransType = 'I' THEN  \n" +
	"			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
	"        ELSE  \n" +
	"			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
	"        END IF;  \n" +
	"	ELSE  \n" +
	"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
	"	END IF;  \n" +
	"    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
	"		SET pWhereClause = '1=1' ;  \n" +
	"	END IF;  \n" +
	"    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND cp.termsId in (', pPaymentTermsIds, ' )');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"    IF pPartId IS NOT NULL THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND cpd.partId in (', pPartId , ')');  \n" +
	"    END IF;  \n" +
	"  \n" +
	"	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"    IF pDueDate IS NOT NULL THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
	"	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
	"		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
	"	END IF;  \n" +
	"  \n" +
	"    IF pSearchComments IS NOT NULL AND pSearchComments != '' THEN  \n" +
	"		SET pWhereClause= CONCAT(pWhereClause, \" AND (c.shippingNotes like '%\", pSearchComments, \"%'  \n" +
	"									OR 	c.internalComment like '%\", pSearchComments, \"%'  \n" +
	"                                    OR 	c.assyDescription like '%\", pSearchComments, \"%'  \n" +
	"                                    OR 	c.packingSlipComment like '%\", pSearchComments, \"%'  \n" +
	"                                    OR 	c.headerComment like '%\", pSearchComments, \"%')\" );  \n" +
	"	END IF;  \n" +
	"    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
	"		IF pIsExactSearchPO = 1 THEN  \n" +
	"			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
	"										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
	"										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
	"										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
	"                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
	"										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
	"						);  \n" +
	"		ELSE  \n" +
	"			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
	"										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
	"										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
	"										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
	"                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
	"										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
	"						);  \n" +
	"		END IF;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
	"  IF pFromDate IS NOT NULL THEN  \n" +
	"        IF pDateType = 'I' THEN  \n" +
	"			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
	"        ELSEIF pDateType = 'P' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.packingSlipDate >= '\",pFromDate ,\"'\");  \n" +
	"		ELSEIF pDateType = 'PO' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.poDate >= '\",pFromDate ,\"'\");  \n" +
	"		ELSEIF pDateType = 'SO' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.soDate >= '\",pFromDate ,\"'\");  \n" +
	"		ELSEIF pDateType = 'C' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
	"		ELSEIF pDateType = 'D' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.refDebitMemoDate >= '\",pFromDate ,\"'\");  \n" +
	"        END IF;  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF pToDate IS NOT NULL THEN  \n" +
	"		IF pDateType = 'I' THEN  \n" +
	"			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
	"        ELSEIF pDateType = 'P' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.packingSlipDate <= '\",pToDate ,\"'\");  \n" +
	"		ELSEIF pDateType = 'PO' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.poDate <= '\",pToDate ,\"'\");  \n" +
	"		ELSEIF pDateType = 'SO' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.soDate <= '\",pToDate ,\"'\");  \n" +
	"		ELSEIF pDateType = 'C' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
	"		ELSEIF pDateType = 'D' THEN  \n" +
	"        	SET pWhereClause = CONCAT(pWhereClause,\" and c.refDebitMemoDate <= '\",pToDate ,\"'\");  \n" +
	"        END IF;  \n" +
	"    END IF;  \n" +
	"  \n" +
	"     IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
	"		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"  \n" +
	"	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
	"		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
	"		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	-- filter zero amount invoice  \n" +
	"	IF pZeroAmountLineFilter IS NOT NULL AND pZeroAmountLineFilter = 1 THEN  \n" +
	"		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalExtPrice = 0');  \n" +
	"	END IF;  \n" +
	"    IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
	"		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
	"	END IF;  \n" +
	"  \n" +
	"    IF pWithCommissionLine = 1 THEN  \n" +
	"		SET pWhereClause =CONCAT(pWhereClause , ' and c.commissionCnt > 0');  \n" +
	"    END IF;  \n" +
	"  \n" +
	"    IF pWithOtherChargesLine = 1 THEN  \n" +
	"		SET pWhereClause =CONCAT(pWhereClause , ' and c.lineOtherChargesCnt > 0');  \n" +
	"    END IF;  \n" +
	"   IF pMarkedForRefund = 1 THEN  \n" +
	"		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
	"    END IF;  \n" +
	"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
	"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
	"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
	"	ELSE  \n" +
	"		SET rowNumWhere = '';  \n" +
	"	END IF;  \n" +
	"  \n" +
	"  \n" +
	"	 /* to get total count of rows */  \n" +
	"	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine,\" ) c where 1=1 and \", pWhereClause);  \n" +
	"	PREPARE query2 FROM @SQLStatement2;  \n" +
	"	EXECUTE query2;  \n" +
	"	DEALLOCATE PREPARE query2;  \n" +
	"  \n" +
	"	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
	"                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
	"						else '' end) materialStatus from ( \",  \n" +
	"			@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
	"  \n" +
	"  \n" +
	"	PREPARE query1 FROM @SQLStatement2;  \n" +
	"	EXECUTE query1;  \n" +
	"	DEALLOCATE PREPARE query1;  \n" +
	"END;  \n" +
  /* **************************** Add Script Version -> 22-02-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5948,'2.00','V1','US: 39398: UI updates for filter changes on SO,CPS,CINV,CCM - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;

case 5948:
  allDbChangesArray.push(
  /* **************************** New Script -> 22-02-2022*********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDeatils;  \n" +
	"CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(  \n" +
	"	IN ppageIndex INT,  \n" +
	"	IN precordPerPage INT,  \n" +
	"	IN pOrderBy VARCHAR(255),  \n" +
	"	IN pWhereClause VARCHAR(16383),  \n" +
	"	IN pfilterStatus VARCHAR(1000),  \n" +
	"	IN pmfgCodelist VARCHAR(16000),  \n" +
	"	IN pmfgPartID  VARCHAR(5000) ,  \n" +
	"	IN ppsSearchType VARCHAR(5),  \n" +
	"	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
	"	IN pstatusIds VARCHAR(50),  \n" +
	"	IN pfromDate DATE,  \n" +
	"	IN ptoDate DATE  ,  \n" +
	"    IN pDateType VARCHAR(10),  \n" +
	"	IN pSearchComments VARCHAR(200)  \n" +
	")  \n" +
	"BEGIN  \n" +
	"  \n" +
	"	DECLARE pOffset INT;  \n" +
	"	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
	"	DECLARE vTimeZone VARCHAR(50);  \n" +
	"	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
	"    DECLARE vMfgCodeFormat INT;  \n" +
	"	DECLARE v_empFormat INT;  \n" +
	"  \n" +
	"	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
	"	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
	"    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
	"	SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
	"  \n" +
	"	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
	"		SELECT cd.id,  \n" +
	"				cd.packingSlipNumber,  \n" +
	"		       cd.packingslipDate,  \n" +
	"		       cd.poNumber,  \n" +
	"		       cd.soNumber,  \n" +
	"		       cd.soDate,  \n" +
	"		       cd.poDate,  \n" +
	"               cd.poRevision,  \n" +
	"		       cd.customerID,  \n" +
	"			fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname,\", vMfgCodeFormat,\") customerName,  \n" +
	"			cd.systemID,  \n" +
	"			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
	"			cd.packingslipcomment,  \n" +
	"			cd.refCustInvoiceID,  \n" +
	"			cd.headerComment,  \n" +
	"			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
	"			cd.subStatus,  \n" +
	"			cd.sorevision,  \n" +
	"            cd.termsID,  \n" +
	"            cd.shippingmethodid,  \n" +
	"            invoice.invoiceNumber,  \n" +
	"            invoice.id as invoiceID,  \n" +
	"            invoice.subStatus as invoiceSubstatus,  \n" +
	"			mfgmst.mfgCode custCode,  \n" +
	"                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
	"				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
	"                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
	"				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
	"            cd.refSalesOrderID,  \n" +
	"            case when sm.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
	"            sm.isBlanketPO,  \n" +
	"cd.id AS customerslipId,  \n" +
	"case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
	"fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
	"  fun_getAddressbyID(cd.intermediateShipmentId) markFor,  \n" +
	"  fun_getAddressbyID(cd.shipToId) shipTo,  \n" +
	"  fun_getAddressbyID(cd.billToId) billTo,  \n" +
	"  fun_getFormattedContactPerson(billCP.firstName,billCP.middleName,billCP.lastName,billCP.division,billCP.email,billCP.phoneCountryCode, fun_getPrimaryPhoneFromJsonList(billCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(billCP.phoneNumber), billCP.mobile, billCP.faxCountryCode, billCP.faxNumber) billToContactPerson,  \n" +
	"  fun_getFormattedContactPerson(shipCP.firstName,shipCP.middleName,shipCP.lastName,shipCP.division,shipCP.email,shipCP.phoneCountryCode, fun_getPrimaryPhoneFromJsonList(shipCP.phoneNumber),fun_getPrimaryPhExtensionFromJsonList(shipCP.phoneNumber), shipCP.mobile, shipCP.faxCountryCode, shipCP.faxNumber) shipToToContactPerson,  \n" +
	"  fun_getFormattedContactPerson(interCP.firstName,interCP.middleName,interCP.lastName,interCP.division,interCP.email,interCP.phoneCountryCode, fun_getPrimaryPhoneFromJsonList(interCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(interCP.phoneNumber), interCP.mobile, interCP.faxCountryCode, interCP.faxNumber) markToToContactPerson,  \n" +
	"   fun_GetEmployeeFormattedName(emp.firstName,emp.middleName,emp.lastName,emp.initialName,\",v_empFormat,\") salesCommissionToName,  \n" +
	"   cd.salesCommissionTo,  \n" +
	"     (CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
	"         fun_getUserNameByID(cd.updatedBy) updatedby,  \n" +
	"         fun_getUserNameByID(cd.createdBy) createdby,  \n" +
	"         fun_getRoleByID(cd.createByRoleId) createdbyRole,  \n" +
	"         fun_getRoleByID(cd.updateByRoleId) updatedbyRole,  \n" +
	"         fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdAt,  \n" +
	"         fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS updatedAt,  \n" +
	"		 cd.isLocked,  \n" +
	"         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
	"         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
	"         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
	"         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS lockedAt,  \n" +
	"         cpTrack.cpTrackNumber,  \n" +
	"         ifnull(cpTrack.cpTrackNumberCount,0) cpTrackNumberCount,  \n" +
	"         (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
	"						else '' end) materialStatus,  \n" +
	"                        cd.revision ,  \n" +
	"           ifnull(packingdtl.packingSlipCnt,0)  packingSlipCnt,  \n" +
	"           sm.rmaNumber,sm.isRmaPO,  \n" +
	"           (CASE when sm.isRmaPO = 1 then 'YES' when sm.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
	"           (CASE when sm.isRmaPO = 1 then 'Yes' when sm.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp,  \n" +
	"           fun_getGenericCategoryCodeNameByID(cd.carrierID)  carrierName,  \n" +
	"           cd.carrierID , cd.carrierAccountNumber  \n" +
	"		FROM customer_packingslip cd  \n" +
	"        LEFT JOIN mfgcodemst mfgmst ON mfgmst.id = cd.customerId and mfgmst.isDeleted = 0  \n" +
	"		LEFT JOIN salesordermst sm on sm.id=cd.refSalesOrderID and sm.isdeleted=0  \n" +
	"		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
	"		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0  \n" +
	"		LEFT JOIN (  \n" +
	"		SELECT COUNT(cpTrack.trackNumber) cpTrackNumberCount,GROUP_CONCAT(cpTrack.trackNumber SEPARATOR ', ') cpTrackNumber,cpTrack.refCustPackingSlipID FROM customer_packing_slip_track_number cpTrack WHERE  cpTrack.isDeleted = 0 GROUP BY cpTrack.refCustPackingSlipID  \n" +
	"		) cpTrack on cpTrack.refCustPackingSlipID=cd.id  \n" +
	"		left join ( select count(1) packingSlipCnt,packingdtl.refCustPackingSlipID from customer_packingslip_det packingdtl where packingdtl.isDeleted = 0 GRoup by packingdtl.refCustPackingSlipID  \n" +
	"		) packingdtl on packingdtl.refCustPackingSlipID=cd.id  \n" +
	"        LEFT JOIN contactperson billCP ON billCP.personId = cd.billingContactPersonID and billCP.isDeleted = 0  \n" +
	"        LEFT JOIN contactperson shipCP ON shipCP.personId = cd.shippingContactPersonID and shipCP.isDeleted = 0  \n" +
	"        LEFT JOIN contactperson interCP ON interCP.personId = cd.intermediateContactPersonID and interCP.isDeleted = 0  \n" +
	"		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
	"	\");  \n" +
	"  \n" +
	"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
	"        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
	"	ELSE  \n" +
	"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"  \n" +
	"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
	"		SET pWhereClause = '1=1' ;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
	"	 IF (pfilterStatus = 0) THEN  \n" +
	"		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
	"    ELSE  \n" +
	"		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
	"    END IF;  \n" +
	"  END IF;  \n" +
	"  IF pSearchComments IS NOT NULL AND pSearchComments != '' THEN  \n" +
	"			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.packingSlipComment like '%\", pSearchComments, \"%'  \n" +
	"									OR 	c.headerComment like '%\", pSearchComments, \"%')\" );  \n" +
	"  END IF;  \n" +
	"  \n" +
	"  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
	"	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
	"  END IF;  \n" +
	"  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
	"	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
	"  END IF;  \n" +
	"  \n" +
	" IF pmfgPartID IS NOT NULL THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails= CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' AND cd.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pmfgPartID , ')) ');  \n" +
	" END IF;  \n" +
	"  \n" +
	"  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
	"    IF(ppsSearchType='E')THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
	"		padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,'''  or cd.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
	"   ELSE  \n" +
	"        SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
	"		padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%''  or cd.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
	"  END IF;  \n" +
	"  END IF;  \n" +
	"  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
	"	IF pDateType = 'P' THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
	"    ELSEIF pDateType = 'PO' THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poDate>=''',pfromDate,''' and cd.poDate<=''',ptoDate,''')');  \n" +
	"    ELSEIF pDateType = 'SO' THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.soDate>=''',pfromDate,''' and cd.soDate<=''',ptoDate,''')');  \n" +
	"    END IF;  \n" +
	"  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
	"		IF pDateType = 'P' THEN  \n" +
	"			SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
	"		ELSEIF pDateType = 'PO' THEN  \n" +
	"			SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poDate>=''',pfromDate,''')');  \n" +
	"		ELSEIF pDateType = 'SO' THEN  \n" +
	"			       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.soDate >=''',pfromDate,''')');  \n" +
	"		END IF;  \n" +
	"  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
	"  		IF pDateType = 'P' THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
	"		ELSEIF pDateType = 'PO' THEN  \n" +
	"			SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poDate<=''',ptoDate,''')');  \n" +
	"		ELSEIF pDateType = 'SO' THEN  \n" +
	"			       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.soDate<=''',ptoDate,''')');  \n" +
	"		END IF;  \n" +
	"  END IF;  \n" +
	"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
	"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
	"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
	"	ELSE  \n" +
	"		SET rowNumWhere = '';  \n" +
	"	END IF;  \n" +
	"  \n" +
	"	 /* to get total count of rows */  \n" +
	"	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
	"	PREPARE query2 FROM @SQLStatement2;  \n" +
	"	EXECUTE query2;  \n" +
	"	DEALLOCATE PREPARE query2;  \n" +
	"  \n" +
	"	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
	"	PREPARE query1 FROM @SQLStatement2;  \n" +
	"	-- select @SQLStatement2;  \n" +
	"	EXECUTE query1;  \n" +
	"	DEALLOCATE PREPARE query1;  \n" +
	"  \n" +
	"END;  \n" +
  /* **************************** Add Script Version -> 22-02-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5949,'2.00','V1','US: 39398: UI updates for filter changes on SO,CPS,CINV,CCM - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
case 5949:
  allDbChangesArray.push(
  /* **************************** New Script -> 22-02-2022*********************************** */
	"DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDetailPerLine;  \n" +
	"CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDetailPerLine`(  \n" +
	"	IN ppageIndex INT,  \n" +
	"	IN precordPerPage INT,  \n" +
	"	IN pOrderBy VARCHAR(255),  \n" +
	"	IN pWhereClause VARCHAR(16383),  \n" +
	"	IN pfilterStatus VARCHAR(1000),  \n" +
	"	IN pmfgCodelist VARCHAR(16000),  \n" +
	"	IN pmfgPartID  VARCHAR(5000) ,  \n" +
	"	IN ppsSearchType VARCHAR(5),  \n" +
	"	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
	"	IN pstatusIds VARCHAR(50),  \n" +
	"	IN pfromDate DATE,  \n" +
	"	IN ptoDate DATE   ,  \n" +
	"    IN pDateType VARCHAR(10),  \n" +
	"	IN pSearchComments VARCHAR(200)  \n" +
	")  \n" +
	"BEGIN  \n" +
	"  \n" +
	"	DECLARE pOffset INT;  \n" +
	"	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
	"	DECLARE vTimeZone VARCHAR(50);  \n" +
	"	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
	"    DECLARE vMfgCodeFormat INT;  \n" +
	"  \n" +
	"	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
	"	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
	"    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
	"  \n" +
	"	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
	"		SELECT cd.id,  \n" +
	"				cd.packingSlipNumber,  \n" +
	"		       cd.packingslipDate,  \n" +
	"		       cd.poNumber,  \n" +
	"		       cd.soNumber,  \n" +
	"		       cd.soDate,  \n" +
	"		       cd.poDate,  \n" +
	"               cd.poRevision,  \n" +
	"		       ss.releaseNumber,  \n" +
	"		       ss.qty as releaseLineQty,  \n" +
	"		       cd.customerID,  \n" +
	"			fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname,\", vMfgCodeFormat,\") customerName,  \n" +
	"			cd.systemID,  \n" +
	"			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
	"			cd.packingslipcomment,  \n" +
	"			cd.refCustInvoiceID,  \n" +
	"			cpd.internalComment,  \n" +
	"			cd.headerComment,  \n" +
	"			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
	"			cd.subStatus,  \n" +
	"			cd.sorevision,  \n" +
	"            cpd.poReleaseNumber,  \n" +
	"			cpd.refBlanketPONumber,  \n" +
	"            cpd.partId,  \n" +
	"            fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
	"            `cpd`.assyDescription,  \n" +
	"            fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
	"            c.mfgPN as assyName ,  \n" +
	"            c.PIDCode as assyId,  \n" +
	"            c.mfgCodeID,  \n" +
	"            cd.termsID,  \n" +
	"            cd.shippingmethodid,  \n" +
	"            invoice.invoiceNumber,  \n" +
	"            invoice.id as invoiceID,  \n" +
	"            invoice.subStatus as invoiceSubstatus,  \n" +
	"            fun_GetFormattedMfgCode(co_mfgmst.mfgcode,co_mfgmst.mfgname,\", vMfgCodeFormat,\")  mfrName,  \n" +
	"			mfgmst.mfgcode custCode,  \n" +
	"			case when som.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
	"			som.isBlanketPO,  \n" +
	"			ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
	"			case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
	"			case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
	"			fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
	"            cd.refSalesOrderID,  \n" +
	"			cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
	"			cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,  \n" +
	"			case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
	"			fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
	"			fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
	"			concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
	"		(CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
	"         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,  \n" +
	"         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,  \n" +
	"         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,  \n" +
	"         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,  \n" +
	"         CASE WHEN cpd.id IS NULL THEN fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  createdAt,  \n" +
	"         CASE WHEN cpd.id IS NULL THEN fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  updatedAt,  \n" +
	"		 cd.isLocked,  \n" +
	"         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
	"         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
	"         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
	"         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt ,  \n" +
	"		if(cd.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
	"        if(cd.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
	"        if(cd.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
	"		if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
	"        if(cd.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
	"        if(cd.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
	"        if(cd.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
	"		if(cd.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
	"		(case when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText,  \n" +
	"        (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
	"						else '' end) materialStatus,  \n" +
	"        cd.revision,  \n" +
	"		(select group_concat(cert.fullName)from  certificate_standards cert  \n" +
	"			where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
	"			from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
	"		c.isCustom,   c.custAssyPN customPartNumber  ,        cpd.remainingQty ,  \n" +
	"			som.rmaNumber,som.isRmaPO,  \n" +
	"			(CASE when som.isRmaPO = 1 then 'YES' when som.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
	"			(CASE when som.isRmaPO = 1 then 'Yes' when som.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp  ,  \n" +
	"            cpd.releaseNotes  \n" +
	"		FROM customer_packingslip cd  \n" +
	"		LEFT JOIN mfgcodemst mfgmst ON mfgmst.id = cd.customerId and mfgmst.isDeleted = 0  \n" +
	"		JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0  \n" +
	"		LEFT JOIN component c ON c.id=cpd.partid  \n" +
	"        LEFT JOIN mfgcodemst co_mfgmst ON co_mfgmst.id = c.mfgcodeID and co_mfgmst.isDeleted = 0  \n" +
	"		LEFT JOIN salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
	"		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
	"		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0 and invoice.transType ='I'  \n" +
	"        LEFT JOIN salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
	"        LEFT JOIN salesordermst som on som.id = cd.refSalesOrderID and som.isDeleted = 0  \n" +
	"		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
	"	\");  \n" +
	"  \n" +
	"	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
	"        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
	"	ELSE  \n" +
	"		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"  \n" +
	"	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
	"		SET pWhereClause = '1=1' ;  \n" +
	"	END IF;  \n" +
	"  \n" +
	"  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
	"    if (pfilterStatus = '0') then  \n" +
	"		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
	"    else  \n" +
	"		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
	"    end if;  \n" +
	"  END IF;  \n" +
	"  IF pSearchComments IS NOT NULL AND pSearchComments != '' THEN  \n" +
	"			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.shippingNotes like '%\", pSearchComments, \"%'  \n" +
	"									OR 	c.internalComment like '%\", pSearchComments, \"%'  \n" +
	"                                    OR 	c.assyDescription like '%\", pSearchComments, \"%'  \n" +
	"                                    OR 	c.packingSlipComment like '%\", pSearchComments, \"%'  \n" +
	"                                    OR 	c.headerComment like '%\", pSearchComments, \"%')\" );  \n" +
	"  END IF;  \n" +
	"  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
	"	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
	"  END IF;  \n" +
	"  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
	"	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
	"  END IF;  \n" +
	"  IF(pmfgPartID IS NOT NULL)THEN  \n" +
	"	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cpd.partId in ( ',pmfgPartID,')');  \n" +
	"  END IF;  \n" +
	"  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
	"    IF(ppsSearchType='E')THEN  \n" +
	"      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
	"      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or som.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
	"   ELSE  \n" +
	"       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
	"       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'' or som.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
	"  END IF;  \n" +
	"  END IF;  \n" +
	"   IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
	"	IF pDateType = 'P' THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
	"    ELSEIF pDateType = 'PO' THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poDate>=''',pfromDate,''' and cd.poDate<=''',ptoDate,''')');  \n" +
	"    ELSEIF pDateType = 'SO' THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.soDate>=''',pfromDate,''' and cd.soDate<=''',ptoDate,''')');  \n" +
	"    END IF;  \n" +
	"  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
	"		IF pDateType = 'P' THEN  \n" +
	"			SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
	"		ELSEIF pDateType = 'PO' THEN  \n" +
	"			SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poDate>=''',pfromDate,''')');  \n" +
	"		ELSEIF pDateType = 'SO' THEN  \n" +
	"			       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.soDate >=''',pfromDate,''')');  \n" +
	"		END IF;  \n" +
	"  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
	"  		IF pDateType = 'P' THEN  \n" +
	"		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
	"		ELSEIF pDateType = 'PO' THEN  \n" +
	"			SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poDate<=''',ptoDate,''')');  \n" +
	"		ELSEIF pDateType = 'SO' THEN  \n" +
	"			       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.soDate<=''',ptoDate,''')');  \n" +
	"		END IF;  \n" +
	"  END IF;  \n" +
	"  /*IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
	"	 SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
	"  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
	"       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
	"  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
	"       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
	"  END IF;  */  \n" +
	"	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
	"		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
	"		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
	"	ELSE  \n" +
	"		SET rowNumWhere = '';  \n" +
	"	END IF;  \n" +
	" -- select   @temp_Sproc_RetrieveCustomerPackingSlipDetails ,pWhereClause ;  \n" +
	"  \n" +
	"	 /* to get total count of rows */  \n" +
	"	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
	"	PREPARE query2 FROM @SQLStatement2;  \n" +
	"	EXECUTE query2;  \n" +
	"	DEALLOCATE PREPARE query2;  \n" +
	"  \n" +
	"	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
	"	PREPARE query1 FROM @SQLStatement2;  \n" +
	"	-- select @SQLStatement2;  \n" +
	"	EXECUTE query1;  \n" +
	"	DEALLOCATE PREPARE query1;  \n" +
	"  \n" +
	"END;  \n" +
  /* **************************** Add Script Version -> 22-02-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5950,'2.00','V1','US: 39398: UI updates for filter changes on SO,CPS,CINV,CCM - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;
        case 5950:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-02-2022 ******************************************* */
                "ALTER TABLE supplier_quote_part_price ADD COLUMN isPartCosting TINYINT DEFAULT FALSE;  \n" +
                /* **************************** Add Script Version -> 23-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5951,'2.00','V1','User Story 39319: Supplier Quote Delete/Address functionality related changes - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5951:
            allDbChangesArray.push(
                /* **************************** New Script -> 23-02-2022 ******************************************* */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierQuotePartPricingDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuotePartPricingDetails`(  \n" +
                "	IN pSupplierQuotePartDetalID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		/*For attributes fields*/  \n" +
                "		SELECT 	sqpa.attributeID, q.fieldName, q.toolingPrice,  \n" +
                "				REPLACE(REPLACE(q.fieldName,'.','@$@'), \" \", \"\") AS attributeColumnName  \n" +
                "		FROM    supplier_quote_part_attribute sqpa  \n" +
                "		inner JOIN 	quotecharges_dynamic_fields_mst q ON sqpa.attributeID = q.id AND q.isDeleted = 0  \n" +
                "		WHERE 	sqpa.supplierQuotePartDetID = pSupplierQuotePartDetalID  \n" +
                "		AND 	sqpa.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT  SQPP.id,				SQPP.supplierQuotePartDetID,	SQPP.itemNumber,  \n" +
                "				SQPP.qty,				SQPP.`min`,						SQPP.mult,  \n" +
                "				SQPP.stock,				SQPP.packageID,					SQPP.reeling,  \n" +
                "				SQPP.NCNR,				SQPP.leadTime,					SQPP.UnitOfTime,  \n" +
                "				SQPP.UnitPrice,			SQPP.negotiatePrice,            SQPP.isPartCosting,  \n" +
                "				fun_getPartAttibuteAndPriceBySupplierQuotePartPriceID(SQPP.id) attibutePriceList  \n" +
                "		FROM		supplier_quote_part_price SQPP  \n" +
                "		WHERE 		SQPP.supplierQuotePartDetID = pSupplierQuotePartDetalID  \n" +
                "		AND 		SQPP.isDeleted = 0 ;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-02-2022 *********************************** */
                "DROP function IF EXISTS `fun_getPartAttibuteAndPriceBySupplierQuotePartPriceID`;  \n" +
                "CREATE FUNCTION `fun_getPartAttibuteAndPriceBySupplierQuotePartPriceID`(  \n" +
                "	pSupplierQuotePartPriceID INT  \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE vAttibutes LONGTEXT;  \n" +
                "		SET SESSION group_concat_max_len = 500000;  \n" +
                "  \n" +
                "		SELECT 		GROUP_CONCAT(CONCAT(SQPPA.id,'$#@%&',SQPPA.attributeID,'$#@%&',AM.fieldName,'$#@%&',SQPPA.price) SEPARATOR '@@@')  \n" +
                "		INTO 		vAttibutes  \n" +
                "		FROM  		supplier_quote_part_price_attribute SQPPA  \n" +
                "		LEFT JOIN 	quotecharges_dynamic_fields_mst AM ON SQPPA.attributeID = AM.id AND AM.isDeleted = 0  \n" +
                "                WHERE 		SQPPA.supplierQuotePartPriceID = pSupplierQuotePartPriceID  \n" +
                "					AND   SQPPA.isDeleted = 0;  \n" +
                "  \n" +
                "		RETURN vAttibutes;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-02-2022 *********************************** */
                "DROP function IF EXISTS `fun_getPartPricingCountBySupplierQuoteDetailID`;  \n" +
                "CREATE FUNCTION `fun_getPartPricingCountBySupplierQuoteDetailID`(  \n" +
                "	pSupplierQuoteDetailID INT  \n" +
                ") RETURNS int  \n" +
                "BEGIN  \n" +
                "	DECLARE vCount INT;  \n" +
                "	SELECT COUNT(1) INTO vCount FROM supplier_quote_part_price s WHERE s.supplierQuotePartDetID =pSupplierQuoteDetailID AND s.isDeleted = 0;  \n" +
                "	RETURN vCount;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_quotecharges_dynamic_fields_mst`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_quotecharges_dynamic_fields_mst`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "	IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempQuotecharges_dynamic_fields_mst;  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempQuotecharges_dynamic_fields_mst as  \n" +
                "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assy_quotations_additionalcost\" else \"\" end as msg  \n" +
                "	FROM rfq_assy_quotations_additionalcost WHERE isDeleted = 0 AND quoteChargeDynamicFieldID IN (',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_part_attribute\" else \"\" end as msg  \n" +
                "	FROM supplier_quote_part_attribute WHERE isDeleted = 0 AND attributeID IN (',IDs,') LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_part_price_attribute\" else \"\" end as msg  \n" +
                "	FROM supplier_quote_part_price_attribute WHERE isDeleted = 0 AND attributeID IN (',IDs,') LIMIT 1)  \n" +
                "    		UNION ALL  \n" +
                "	(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_attribute_template_det\" else \"\" end as msg  \n" +
                "	FROM supplier_attribute_template_det WHERE isDeleted = 0 AND attributeID IN (',IDs,') LIMIT 1)  \n" +
                "	');  \n" +
                "	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "  \n" +
                "    IF (countList=FALSE) THEN  \n" +
                "		IF (SELECT SUM(t.cnt) FROM tempQuotecharges_dynamic_fields_mst t)=0 THEN  \n" +
                "			SET @SQl1 = CONCAT('update quotecharges_dynamic_fields_mst set isDeleted=',1,', deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and isDeleted = 0');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "			SELECT * FROM tempQuotecharges_dynamic_fields_mst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempQuotecharges_dynamic_fields_mst t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "		FROM tempQuotecharges_dynamic_fields_mst t1  \n" +
                "		INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "		WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "		ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-02-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_BI_supplier_quote_parts_det`;  \n" +
                "CREATE TRIGGER `TRG_BI_supplier_quote_parts_det` BEFORE INSERT ON `supplier_quote_parts_det` FOR EACH ROW BEGIN  \n" +
                "IF((select count(1)  \n" +
                "		from supplier_quote_mst  \n" +
                "        where id = NEW.supplierQuoteMstID and isDeleted = 0) = 0 ) THEN  \n" +
                "		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "     END IF;  \n" +
                "     IF((select count(1)  \n" +
                "		from component  \n" +
                "        where id = NEW.partID and isDeleted = 0) = 0 ) THEN  \n" +
                "		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "     END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-02-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_BU_supplier_quote_parts_det`;  \n" +
                "CREATE TRIGGER `TRG_BU_supplier_quote_parts_det` BEFORE UPDATE ON `supplier_quote_parts_det` FOR EACH ROW BEGIN  \n" +
                "IF NEW.isDeleted = 0 THEN  \n" +
                "		IF((select count(1) from supplier_quote_mst  \n" +
                "			where id = NEW.supplierQuoteMstID and isDeleted = 0) = 0 ) THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		 END IF;  \n" +
                "		 IF((select count(1) from component  \n" +
                "			where id = NEW.partID and isDeleted = 0) = 0 ) THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		 END IF;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-02-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_BI_supplier_quote_part_price`;  \n" +
                "CREATE TRIGGER `TRG_BI_supplier_quote_part_price` BEFORE INSERT ON `supplier_quote_part_price` FOR EACH ROW BEGIN  \n" +
                "IF((select count(1)  \n" +
                "		from supplier_quote_parts_det  \n" +
                "        where id = NEW.supplierQuotePartDetID and isDeleted = 0) = 0 ) THEN  \n" +
                "		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "     END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-02-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_BU_supplier_quote_part_price`;  \n" +
                "CREATE TRIGGER `TRG_BU_supplier_quote_part_price` BEFORE UPDATE ON `supplier_quote_part_price` FOR EACH ROW BEGIN  \n" +
                "IF NEW.isDeleted = 0 THEN  \n" +
                "		IF((select count(1) from supplier_quote_parts_det  \n" +
                "			where id = NEW.supplierQuotePartDetID and isDeleted = 0) = 0 ) THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		 END IF;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-02-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_BI_supplier_quote_part_attribute`;  \n" +
                "CREATE TRIGGER `TRG_BI_supplier_quote_part_attribute` BEFORE INSERT ON `supplier_quote_part_attribute` FOR EACH ROW BEGIN  \n" +
                "IF((select count(1)  \n" +
                "		from supplier_quote_parts_det  \n" +
                "        where id = NEW.supplierQuotePartDetID and isDeleted = 0) = 0 ) THEN  \n" +
                "		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "     END IF;  \n" +
                "     IF((select count(1)  \n" +
                "		from quotecharges_dynamic_fields_mst  \n" +
                "        where id = NEW.attributeID and isDeleted = 0) = 0 ) THEN  \n" +
                "		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "     END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-02-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_BU_supplier_quote_part_attribute`;  \n" +
                "CREATE TRIGGER `TRG_BU_supplier_quote_part_attribute` BEFORE UPDATE ON `supplier_quote_part_attribute` FOR EACH ROW BEGIN  \n" +
                "IF NEW.isDeleted = 0 THEN  \n" +
                "		IF((select count(1) from supplier_quote_parts_det  \n" +
                "			where id = NEW.supplierQuotePartDetID and isDeleted = 0) = 0 ) THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		 END IF;  \n" +
                "		 IF((select count(1) from quotecharges_dynamic_fields_mst  \n" +
                "			where id = NEW.attributeID and isDeleted = 0) = 0 ) THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		 END IF;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-02-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_BI_supplier_quote_part_price_attribute`;  \n" +
                "CREATE TRIGGER `TRG_BI_supplier_quote_part_price_attribute` BEFORE INSERT ON `supplier_quote_part_price_attribute` FOR EACH ROW BEGIN  \n" +
                "IF((select count(1)  \n" +
                "		from supplier_quote_part_price  \n" +
                "        where id = NEW.supplierQuotePartPriceID and isDeleted = 0) = 0 ) THEN  \n" +
                "		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "     END IF;  \n" +
                "     IF((select count(1)  \n" +
                "		from quotecharges_dynamic_fields_mst  \n" +
                "        where id = NEW.attributeID and isDeleted = 0) = 0 ) THEN  \n" +
                "		SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "     END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-02-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_BU_supplier_quote_part_price_attribute`;  \n" +
                "CREATE TRIGGER `TRG_BU_supplier_quote_part_price_attribute` BEFORE UPDATE ON `supplier_quote_part_price_attribute` FOR EACH ROW BEGIN  \n" +
                "IF NEW.isDeleted = 0 THEN  \n" +
                "		IF((select count(1) from supplier_quote_part_price  \n" +
                "			where id = NEW.supplierQuotePartPriceID and isDeleted = 0) = 0 ) THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		 END IF;  \n" +
                "		 IF((select count(1) from quotecharges_dynamic_fields_mst  \n" +
                "			where id = NEW.attributeID and isDeleted = 0) = 0 ) THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		 END IF;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 23-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5952,'2.00','V1','User Story 39319: Supplier Quote Delete/Address functionality related changes - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;            
        case 5952:
	        allDbChangesArray.push(
	        /* **************************** New Script -> 25-02-2022 *********************************** */
	        "DROP PROCEDURE IF EXISTS Sproc_getSalesOrderListAgainstShipment;  \n" +
	        "CREATE PROCEDURE `Sproc_getSalesOrderListAgainstShipment`(  \n" +
	        "	IN ppageIndex INT,  \n" +
	        "	IN precordPerPage INT,  \n" +
	        "	IN pCustomerID INT,  \n" +
	        "    IN pSearchText VARCHAR(1000) ,  \n" +
	        "    IN pSoWorkingStatus TINYINT,  \n" +
	        "    IN pAllowToUpdateComment TINYINT ,  \n" +
	        "    IN pSortByColumn TINYINT  ,  \n" +
	        "    IN pSoStatus TINYINT,  \n" +
	        "    IN pSortingOrder TINYINT  \n" +
	        ")  \n" +
	        "BEGIN  \n" +
	        "	DECLARE vMfgCodeFormat INT;  \n" +
	        "    DECLARE headerWhereClause VARCHAR(3000);  \n" +
	        "   -- DECLARE detailWhereClause VARCHAR(1000);  \n" +
	        "	DECLARE vOrderBy VARCHAR(200);  \n" +
	        "   	DECLARE pOffset INT;  \n" +
	        "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
	        "	DECLARE vContactPersonFormat INT;  \n" +
	        "  \n" +
	        "    SELECT fun_getContPersonNameDisplayFormat() INTO vContactPersonFormat;  \n" +
	        "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
	        "  \n" +
	        "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
	        "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
	        "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
	        "	ELSE  \n" +
	        "		SET rowNumWhere = '';  \n" +
	        "	END IF;  \n" +
	        "  \n" +
	        "	IF pSortByColumn = 1 THEN  \n" +
	        "		SET vOrderBy =' order by customerName' ;  \n" +
	        "    ELSEIF pSortByColumn = 2 THEN  \n" +
	        "		SET vOrderBy =' order by poNumber ' ;  \n" +
	        "    ELSEIF pSortByColumn = 3 THEN  \n" +
	        "		SET vOrderBy =' order by poDate ' ;  \n" +
	        "    ELSEIF pSortByColumn = 4 THEN  \n" +
	        "		SET vOrderBy =' order by soDate ' ;  \n" +
	        "    ELSE  \n" +
	        "		SET vOrderBy =' order by soId Desc ' ;  \n" +
	        "    END IF;  \n" +
	        "    IF pSortingOrder = 2 THEN  \n" +
	        "		SET vOrderBy = concat(vOrderBY , ' Desc');  \n" +
	        "    ELSE  \n" +
	        "		SET vOrderBy = concat(vOrderBY , ' Asc');  \n" +
	        "    END IF;  \n" +
	        "  \n" +
	        "    IF pCustomerID IS NOT NULL THEN  \n" +
	        "		SET headerWhereClause = concat(\" (salesOrder.customerID=\",pCustomerID,\") \");  \n" +
	        "	ELSE  \n" +
	        "		SET headerWhereClause = ' 1=1 ';  \n" +
	        "    END IF;  \n" +
	        "    IF pSoWorkingStatus IS  NULL OR pSoWorkingStatus = 0 THEN  \n" +
	        "		SET headerWhereClause = concat(headerWhereClause, ' AND 1=1 ');  \n" +
	        "	ELSE  \n" +
	        "		SET headerWhereClause = concat(headerWhereClause, ' and salesOrder.workingStatus = ' , pSoWorkingStatus)  ;  \n" +
	        "    END IF;  \n" +
	        "    IF pSoStatus IS NULL OR pSoStatus <> -1 THEN  \n" +
	        "		SET headerWhereClause = concat(headerWhereClause, ' and salesOrder.`status` = ' , pSoStatus)  ;  \n" +
	        "    END IF;  \n" +
	        "  \n" +
	        "    IF pSearchText IS NOT NULL  THEN  \n" +
	        "		SET headerWhereClause = CONCAT(headerWhereClause ,\" AND  (salesOrder.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
	        "									or salesOrder.poNumber like '%\",pSearchText,\"%'  \n" +
	        "									or salesOrder.customerName like '%\",pSearchText,\"%'  \n" +
	        "                                    or salesOrder.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
	        "                                    or salesOrder.shippingComment like '%\",pSearchText,\"%' \",  \n" +
	        "                                    CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR salesOrder.internalComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
	        "                                    \" or salesOrder.soId in (select refSalesOrderID from salesorderdet  sodet  \n" +
	        "														 join component comp on comp.id = sodet.partID and sodet.isDeleted = 0  \n" +
	        "                                                         left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
	        "																	from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sodet.id  and workOrderDet.partID = sodet.partId  \n" +
	        "														 where sodet.isDeleted = 0	and (comp.PIDCode like '%\",pSearchText,\"%' OR comp.mfgPN like '%\",pSearchText,\"%'  \n" +
	        "																OR comp.nickName like '%\",pSearchText,\"%' OR sodet.woComment like '%\",pSearchText,\"%'  \n" +
	        "                                                                OR sodet.internalComment like '%\",pSearchText,\"%'\",  \n" +
	        "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.remark like '%\",pSearchText,\"%'\") else '' END,  \n" +
	        "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.releaseLevelComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
	        "                                                                \" OR workOrderDet.woList like '\",pSearchText,\"%'  )	))\");  \n" +
	        "  \n" +
	        "    END IF;  \n" +
	        "    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
	        "	SET @SQLStatement1 = concat(\"CREATE TEMPORARY TABLE temp_so_mst AS  select soId, salesOrderNumber,  \n" +
	        "						soDate, poNumber, poDate, poRevision, poRevisionDate,  \n" +
	        "						sorevision, ifnull(shippingComment,'-') shippingComment, internalComment, isBlanketPO, isLegacyPO, isRmaPO,  \n" +
	        "                        soStatus, soStatusText,  shippingMethodID,termsID,freeOnBoardId, salesCommissionTo,contactPersonId,  \n" +
	        "						customerID, mfgCode, mfgName, customerName,  \n" +
	        "                        lastCPSId,lastCPSNumber,lastCPSDate,ifnull(lastCPSComment,'-') lastCPSComment,CPSCount,  CPSDraftCnt,  \n" +
	        "                        billingAddressID, intermediateShipmentId,  \n" +
	        "                        shippingAddressID,defaultAddress,  \n" +
	        "                        companyName,street1,street2, street3,city, state,  \n" +
	        "						postcode,countryName, isAddrDefault, isAddrActive,  \n" +
	        "						firstName,lastName,middleName,personName,  \n" +
	        "						mobile,mobileCountryCode,faxNumber,faxCountryCode,title,isContactDefault, isContactActive,  \n" +
	        "						phoneNumber,email,division,emailList,phoneList,  \n" +
	        "                        workingStatus, isLegacyPOText,isBlanketPOText,isRmaPOText,blanketPOOption, isAlreadyPublished  ,  \n" +
	        "                        carrierID,carrierAccountNumber ,  \n" +
	        "                        billingContactPersonID, intermediateContactPersonID, shippingContactPersonID,  \n" +
	        "                        linkToBlanketPOText,shippingMethodText,carrierText  \n" +
	        "    from (select som.id as soId, som.salesOrderNumber,  \n" +
	        "            som.soDate, som.poNumber, som.poDate, som.poRevision, som.poRevisionDate,  \n" +
	        "            som.revision as sorevision , som.shippingComment, som.internalComment,  \n" +
	        "            som.isBlanketPO, som.isLegacyPO, som.isRmaPO, som.customerID,  \n" +
	        "            som.status as soStatus ,(case when som.`status` = 1 then 'Published' else 'Draft' end) soStatusText,  \n" +
	        "            som.shippingMethodID,som.termsID,som.freeOnBoardId, som.salesCommissionTo,som.contactPersonId,  \n" +
	        "            som.billingAddressID, som.intermediateShipmentId,  \n" +
	        "            cust.mfgCode, cust.mfgName, fun_GetFormattedMfgCode(cust.mfgCode,cust.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
	        "            cpsDetails.lastCPSId,  \n" +
	        "            cpsDetails.lastCPSNumber,  \n" +
	        "            cpsDetails.lastCPSDate,  \n" +
	        "			cpsDetails.lastCPSComment,  \n" +
	        "            cpsDetails.CPSCount,  \n" +
	        "            ifnull(cpsDetails.CPSDraftCnt,0) CPSDraftCnt,  \n" +
	        "            som.shippingAddressID,  \n" +
	        "            custAddr.isDefault as defaultAddress,  \n" +
	        "            custAddr.companyName,custAddr.street1,custAddr.street2, custAddr.street3,custAddr.city, custAddr.state,  \n" +
	        "            custAddr.postcode,country.countryName, custAddr.isDefault isAddrDefault, custAddr.isActive isAddrActive,  \n" +
	        "            fun_GetFormattedContactPersonName(contactP.firstName, contactP.middleName,contactP.lastName,\",vContactPersonFormat,\") personName,  \n" +
	        "            contactP.firstName,contactP.lastName,contactP.middleName,  \n" +
	        "            contactP.mobile,contactP.mobileCountryCode,contactP.faxNumber,contactP.faxCountryCode,  \n" +
	        "            contactP.title,contactP.isDefault isContactDefault, contactP.isActive isContactActive,  \n" +
	        "            contactP.phoneNumber,contactP.email,contactP.division,  \n" +
	        "            fun_convertJsonEmailToCommaSepList(contactP.email) emailList,  \n" +
	        "            fun_convertJsonPhoneToCommaSepList(contactP.phoneNumber) phoneList,  \n" +
	        "             (case when sodCnt.totalLineCount = sodCnt.completedLineCount  then 2  \n" +
	        "				  when sodCnt.totalLineCount = sodCnt.canceledLineCount then -1  \n" +
	        "                  else 1 end) workingStatus,  \n" +
	        "            (case when som.isLegacyPO = 1 then 'Legacy PO' else '' end) isLegacyPOText,  \n" +
	        "            (case when som.isRmaPO = 1 then 'RMA PO' else '' end) isRmaPOText,  \n" +
	        "            (case when som.isBlanketPO = 1 then 'Blanket PO' else '' end) isBlanketPOText,  \n" +
	        "            som.blanketPOOption,som.`status`,som.isAlreadyPublished ,  \n" +
	        "            som.carrierID, som.carrierAccountNumber  ,  \n" +
	        "            som.billingContactPersonID, som.intermediateContactPersonID, som.shippingContactPersonID,  \n" +
	        "            (case when som.linkToBlanketPO = 1 then 'Linked to Blanket PO' else '' end) linkToBlanketPOText,  \n" +
	        "             shippingMethod.gencCategoryName shippingMethodText, carrier.gencCategoryName carrierText  \n" +
	        "	from salesordermst som  \n" +
	        "    join mfgcodemst cust on cust.id = som.customerID and cust.isDeleted = 0  \n" +
	        "	left join customer_addresses custAddr on  custAddr.customerId = som.customerID and custAddr.id = som.shippingAddressID and custAddr.isDeleted = 0  \n" +
	        "	left join countrymst country on country.countryID = custAddr.countryID and country.isDeleted = 0  \n" +
	        "    left join contactperson contactP on contactP.personId = som.shippingContactPersonID and contactP.isDeleted = 0  \n" +
	        "    left join genericcategory  shippingMethod on shippingMethod.gencCategoryID = som.shippingMethodID and shippingMethod.categoryType ='Shipping Methods' and shippingMethod.isDeleted = 0  \n" +
	        "	left join genericcategory  carrier on carrier.gencCategoryID = som.termsID and carrier.categoryType ='Carrier' and shippingMethod.isDeleted = 0  \n" +
	        "    left join ( select  a.refSalesOrderID, max(lastCPSId) lastCPSId, max(lastCPSNumber) lastCPSNumber,  \n" +
	        "				max(lastCPSDate) lastCPSDate, max(lastCPSComment) lastCPSComment, max(CPSCount) CPSCount, max(CPSDraftCnt) CPSDraftCnt  \n" +
	        "				from (select cps.refSalesOrderID, cps.id,cps.packingSlipNumber,cps.packingSlipDate,cps.packingSlipComment ,  \n" +
	        "						LAST_VALUE(cps.id) over (partition by cps.refSalesOrderID) lastCPSId ,  \n" +
	        "						LAST_VALUE(cps.packingSlipNumber) over (partition by cps.refSalesOrderID) lastCPSNumber,  \n" +
	        "						LAST_VALUE(cps.packingSlipDate) over (partition by cps.refSalesOrderID) lastCPSDate,  \n" +
	        "						LAST_VALUE(cps.packingSlipComment) over (partition by cps.refSalesOrderID) lastCPSComment,  \n" +
	        "						count(1) over (partition by cps.refSalesOrderID) CPSCount,  \n" +
	        "						cpd.draftCnt AS CPSDraftCnt  \n" +
	        "				from customer_packingslip cps  \n" +
	        "                left join (select custp.refSalesOrderID draftRefSoId, count(1) draftCnt from customer_packingslip custp  \n" +
	        "						where custp.isDeleted = 0  and custp.substatus = 1 and transType ='P'  \n" +
	        "						group by custp.refSalesOrderID) cpd on cpd.draftRefSoId = cps.refSalesOrderID  \n" +
	        "                where cps.isDeleted = 0  and cps.transType = 'P' and cps.refsalesorderid is not null) a  \n" +
	        "				group by a.refSalesOrderID) cpsDetails on cpsDetails.refSalesOrderID = som.id  \n" +
	        "	left join (select sod.refSalesOrderID as soId ,  \n" +
	        "				sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
	        "				count(1) totalLineCount,  \n" +
	        "				sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
	        "				From salesorderdet sod where sod.isDeleted = 0  \n" +
	        "				Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = som.id  \n" +
	        "    where som.isDeleted = 0  \n" +
	        "    ) salesOrder  \n" +
	        "    where 1=1 and \", headerWhereClause,    vOrderBy , rowNumWhere) ;  \n" +
	        "  \n" +
	        "	PREPARE query1 FROM @SQLStatement1;  \n" +
	        "	EXECUTE query1;  \n" +
	        "	DEALLOCATE PREPARE query1;  \n" +
	        "  \n" +
	        "    DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
	        "    CREATE TEMPORARY TABLE temp_so_detail AS  \n" +
	        "    select soDetId,  \n" +
	        "				refSalesOrderID, partID, lineID, custPOQty, tbdComment, internalComment,  \n" +
	        "				shippingComment, isCancle,partDescription,salesOrderDetStatus,custPOLineNumber,  \n" +
	        "				PIDCode, mfgPN,mfgcodeID,mfrName, rohsName, rohsIcon,  nickName,  partType,  isCustom,custAssyPN,partSpecialNote,  \n" +
	        "                po_TBDQty,shippedQty AS shippedQty , woComment  ,  \n" +
	        "                cancelStatus, isHotJob,isDetHalt,  \n" +
	        "                soWorkingStatus, materialTentitiveDocDate  ,refSODetID,blanketSOId,  \n" +
	        "                blanketPONumber  ,parentReleaseNumber,linkdPOCnt  \n" +
	        "	from (select  sod.id as soDetId,  \n" +
	        "				sod.refSalesOrderID,  \n" +
	        "				sod.partID,  \n" +
	        "				sod.lineID,  \n" +
	        "				sod.qty as custPOQty,  \n" +
	        "				sod.releaseLevelComment as tbdComment, -- TBD comments  \n" +
	        "				sod.internalComment,  \n" +
	        "				sod.remark as shippingComment,  \n" +
	        "				sod.isCancle,  \n" +
	        "                ifnull(sod.partDescription,'-') partDescription,  \n" +
	        "                sod.salesOrderDetStatus,  \n" +
	        "                sod.custPOLineNumber,  \n" +
	        "				co.PIDCode,  \n" +
	        "				co.mfgPN,  \n" +
	        "                co.mfgcodeID,  \n" +
	        "                fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName,  \n" +
	        "				rohs.name AS rohsName,  \n" +
	        "				rohs.rohsIcon,  \n" +
	        "                co.nickName,  \n" +
	        "                co.partType,  \n" +
	        "                co.isCustom,  \n" +
	        "                co.custAssyPN ,  \n" +
	        "                co.specialNote partSpecialNote,  \n" +
	        "				(sod.qty - ifnull(soDetQty.relQty,0)) po_TBDQty,  \n" +
	        "                cpd.shippedQty,  \n" +
	        "                ifnull(sod.woComment, workOrderDet.woList) woComment  ,  \n" +
	        "                sod.isCancle cancelStatus,  \n" +
	        "                sod.isHotJob,  \n" +
	        "                (case when holdTrans.holdCnt > 0 then 1 else 0 end ) isDetHalt,  \n" +
	        "                (CASE 	WHEN (sod.isCancle = 1) THEN 'Canceled'  \n" +
	        "						WHEN (sod.`salesOrderDetStatus` = 1)   THEN 'In Progress'  \n" +
	        "						ELSE 'Completed'  END) soWorkingStatus,  \n" +
	        "                materialTentitiveDocDate ,  \n" +
	        "                sod.refSODetID,  \n" +
	        "                blanketPO.blanketSOId,  \n" +
	        "                blanketPO.poNumber AS blanketPONumber  ,  \n" +
	        "                soDetQty.parentReleaseNumber,  \n" +
	        "                linkedPO.linkdPOCnt  \n" +
	        "		from salesorderdet sod  \n" +
	        "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
	        "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
	        "        left join (select shipChild.sDetID, sum(shipChild.qty) relQty, GROUP_CONCAT(shipParent.releaseNumber) parentReleaseNumber from salesshippingmst shipChild  \n" +
	        "					LEFT JOIN salesshippingmst shipParent ON shipParent.refShippingLineID = shipChild.shippingID   AND shipParent.isDeleted = 0  \n" +
	        "					where shipChild.isDeleted = 0  group by shipChild.sDetID) as soDetQty on  soDetQty.sDetID = sod.id  \n" +
	        "        left join (select refSalesorderDetid , sum(cpd.shipQty) shippedQty  \n" +
	        "					from customer_packingslip_det  cpd  \n" +
	        "					join customer_packingslip cps on cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0  \n" +
	        "                    where cpd.isDeleted = 0 and cps.transType='P' group by refSalesorderDetid) cpd on cpd.refSalesorderDetid = sod.id  \n" +
	        "		left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
	        "					from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sod.id  and workOrderDet.partID = sod.partId  \n" +
	        "		left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
	        "        left join mfgcodemst partMfg on partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
	        "        left join (select refTransid ,count(1) holdCnt from holdunholdtrans where refType='PO' and isDeleted = 0 and endDate is NUll and `status` = 'H' group by refTransid) holdTrans  \n" +
	        "			on holdTrans.refTransid = sod.id  \n" +
	        "        left join (select blanketDet.id blanketDetId, blanketSO.id blanketSOId , blanketSO.poNumber from salesorderdet blanketDet  \n" +
	        "				join salesordermst blanketSO on blanketSO.id = blanketDet.refSalesOrderID and blanketSO.isDeleted = 0  \n" +
	        "                where blanketSO.isDeleted = 0) blanketPO on blanketPO.blanketDetId = sod.refBlanketPOID  \n" +
	        "        left join (select childPO.refBlanketPOID , count(1) linkdPOCnt from salesorderdet childPO where childPO.isDeleted = 0 group by childPO.refBlanketPOID) linkedPO on linkedPO.refBlanketPOID = sod.id  \n" +
	        "		where sod.isDeleted = 0  \n" +
	        "	) a;  \n" +
	        "  \n" +
	        "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
	        "    CREATE TEMPORARY TABLE temp_so_rel_detail AS  \n" +
	        "    select soDetId,  \n" +
	        "				packingSlipDate,  \n" +
	        "				promisedShipDate,  \n" +
	        "                refCustPackingSlipID, packingSlipDetId,  \n" +
	        "                  row_number() over (partition by releaseId,soDetId order by packingSlipDate desc) cpsIndex,  \n" +
	        "				refSalesOrderID,releaseId, partID, lineID, custPOQty,  internalComment,  releaseLineComment,  \n" +
	        "				shippingComment, isCancle, releaseNumber, soReleaseQty,  \n" +
	        "                shippedQty AS shippedQty,  \n" +
	        "                 cpsDetailCnt,  \n" +
	        "                 isReadyToShip  ,cpsDetailShippedQty  ,  \n" +
	        "                (case when  (soReleaseQty - cpsDetailShippedQty) <= 0 then 1 else 0 end) relCompletedStatus,  \n" +
	        "                cpsSubStatus  ,poReleaseNumber,salesOrderDetStatus,'completed ' as firstInsert, shippingDetailCnt  \n" +
	        "	from (select  sod.id as soDetId,  \n" +
	        "				sod.refSalesOrderID,  \n" +
	        "				sod.partID,  \n" +
	        "				sod.lineID,  \n" +
	        "				sod.qty as custPOQty,  \n" +
	        "				sod.internalComment,  \n" +
	        "				sod.remark as shippingComment,  \n" +
	        "                soship.releaseNotes releaseLineComment,  \n" +
	        "				sod.isCancle,  \n" +
	        "                soship.shippingID releaseId,  \n" +
	        "				soship.releaseNumber,  \n" +
	        "				soship.promisedShipDate,  \n" +
	        "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
	        "				cpd.refCustPackingSlipID,  \n" +
	        "                cpd.id packingSlipDetId,  \n" +
	        "				cpd.shipQty AS shippedQty,  \n" +
	        "                cp.packingSlipDate ,  \n" +
	        "                SUM(cpd.shipQty) over (partition by soship.shippingID,sod.id ) cpsDetailShippedQty,  \n" +
	        "                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
	        "--                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex,  \n" +
	        "                soship.isReadyToShip,  \n" +
	        "                cp.subStatus AS cpsSubStatus,  \n" +
	        "                soship.poReleaseNumber,  \n" +
	        "                sod.salesOrderDetStatus ,  \n" +
	        "                sum(case when (soship.carrierAccountNumber is not null AND trim(soship.carrierAccountNumber) <>'')  OR soship.carrierID is not null OR  \n" +
	        "                                soship.shippingMethodID is not null OR soship.shippingAddressID is not null OR  \n" +
	        "                                soship.shippingContactPersonID is not null then 1 else 0 end) over (partition by soship.shippingID,sod.id) shippingDetailCnt  \n" +
	        "		from salesorderdet sod  \n" +
	        "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
	        "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
	        "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
	        "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
	        "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
	        "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
	        "		where sod.isDeleted = 0  \n" +
	        "	) a;  \n" +
	        "  \n" +
	        "  \n" +
	        "	SELECT * from temp_so_mst;  \n" +
	        "  \n" +
	        "    SET @SQLStatement2 = CONCAT(\"SELECT soDetail.* from temp_so_detail AS soDetail  \n" +
	        "								left join temp_so_mst mst on mst.soId = soDetail.refSalesOrderID  \n" +
	        "                                order by soDetail.salesOrderDetStatus, soDetail.soDetId\");  \n" +
	        "	PREPARE query2 FROM @SQLStatement2;  \n" +
	        "	EXECUTE query2;  \n" +
	        "	DEALLOCATE PREPARE query2;  \n" +
	        "  \n" +
	        " 	SELECT * from temp_so_rel_detail order by relCompletedStatus,promisedShipDate;  \n" +
	        "		-- order by soDetId,relCompletedStatus,promisedShipDate;  \n" +
	        "  \n" +
	        "	DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
	        "	DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
	        "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
	        "END;  \n" +
	        /* **************************** Add Script Version -> 25-02-2022  *********************************** */
	        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
	        "VALUES (5953,'2.00','V1','Sproc_getSalesOrderListAgainstShipment - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
	        );
        break;
        case 5953:
  allDbChangesArray.push(
  /* **************************** New Script -> 25-02-2022 *********************************** */
      "DROP PROCEDURE IF EXISTS `Sproc_getExportLaborTemplateDetail` ;  \n" +
      "CREATE PROCEDURE `Sproc_getExportLaborTemplateDetail`(  \n" +
      "	IN pLaborTemplateID INT(11)  \n" +
      "	)  \n" +
      "BEGIN  \n" +
      "  \n" +
      "			DROP TEMPORARY TABLE IF EXISTS  templaborcomp;  \n" +
      "			CREATE TEMPORARY TABLE IF NOT EXISTS templaborcomp AS  \n" +
      "			SELECT * FROM labor_cost_price_det  \n" +
      "			WHERE laborcostmstID = pLaborTemplateID AND isDeleted = 0;  \n" +
      "  \n" +
      "			DROP TEMPORARY TABLE IF EXISTS qtyTempTable;  \n" +
      "			CREATE TEMPORARY TABLE IF NOT EXISTS qtyTempTable AS  \n" +
      "			SELECT id, CAST(orderedQty AS DECIMAL(10,1)) AS orderedQty, fun_getMountingTypeNameByID(mountingTypeID) `MountingType`,mountingTypeID,qpa,price  \n" +
      "			FROM labor_cost_price_det WHERE deletedat IS NULL AND laborcostmstID = pLaborTemplateID ORDER BY mountingTypeID,orderedQty ASC;  \n" +
      "			SELECT GROUP_CONCAT(DISTINCT CONCAT('max((IF(qt.orderedQty = ''',orderedQty,''', qt.price, null))) AS ''',orderedQty,'''')ORDER BY orderedQty) INTO @sqlQty  \n" +
      "			FROM qtyTempTable ORDER BY mountingTypeID,orderedQty ASC;  \n" +
      "  \n" +
      "  \n" +
      "			DROP TEMPORARY TABLE IF EXISTS lbormounttemp;  \n" +
      "			CREATE TEMPORARY TABLE IF NOT EXISTS lbormounttemp AS  \n" +
      "			SELECT fun_getMountingTypeNameByID(mountingTypeID) `Mounting Type`,  \n" +
      "			qpa AS `QPA / Line Count`,mountingTypeID,orderedQty FROM labor_cost_price_det WHERE deletedat IS NULL AND laborcostmstID = pLaborTemplateID ORDER BY `Mounting Type` ASC;  \n" +
      "			DROP TEMPORARY TABLE IF EXISTS qtymounttemp;  \n" +
      "			SET @SQLStatement1 =   CONCAT(\"  \n" +
      "			CREATE TEMPORARY TABLE IF NOT EXISTS qtymounttemp AS  \n" +
      "			select distinct qt.MountingType,qt.qpa as `QPA / Line Count`, \", @sqlQty,\"  \n" +
      "			FROM qtyTempTable qt  \n" +
      "			join lbormounttemp qt2 on qt.mountingTypeID = qt2.mountingTypeID  \n" +
      "			where qt.mountingTypeID = qt2.mountingTypeID and qt.orderedQty = qt2.orderedQty  \n" +
      "            group by qt.MountingType,qt.qpa\");  \n" +
      "  \n" +
      "			PREPARE query1 FROM @SQLStatement1;  \n" +
      "			EXECUTE query1;  \n" +
      "			DEALLOCATE PREPARE query1;  \n" +
      "  \n" +
      "  \n" +
      "  \n" +
      "               SELECT * FROM qtymounttemp q;  \n" +
      "    END;  \n" +
  /* **************************** Add Script Version -> 25-02-2022 *********************************** */
  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
  "VALUES (5954,'2.00','V1',' Sproc_getExportLaborTemplateDetail - CC '," + userid + " , '" + requiredDet.ipAddress + "');"
  );
break;

        case 5954:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop function if exists `fun_getCategoryWisePhonesFromJsonList`;  \n" +
                "CREATE FUNCTION `fun_getCategoryWisePhonesFromJsonList`(  \n" +
                "	pJsonPhoneList TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE v_Phones TEXT;  \n" +
                "  \n" +
                "	select GROUP_CONCAT(catgWiseList.catgWisePhones SEPARATOR ' | ') INTO v_Phones  \n" +
                "		FROM (SELECT concat(jsonTblPhone.category,': ', GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''))) catgWisePhones  \n" +
                "			FROM JSON_TABLE(pJsonPhoneList,  \n" +
                "				'$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category')  \n" +
                "			) jsonTblPhone group by jsonTblPhone.category order by FIELD(jsonTblPhone.category,'Home Fax','Work Fax','Home','Main','Mobile','Work') DESC  \n" +
                "        ) catgWiseList;  \n" +
                "  \n" +
                "	RETURN v_Phones;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_contactperson`;  \n" +
                "CREATE TRIGGER `Trg_AU_contactperson` AFTER UPDATE ON `contactperson` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_createdAt DATETIME DEFAULT fun_DatetimetoUTCDateTime();  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"contactperson\";  \n" +
                "  \n" +
                "	IF IFNULL(OLD.firstName,0) != IFNULL(NEW.firstName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'First Name',CAST(OLD.firstName AS CHAR), CAST(NEW.firstName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'firstName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.lastName,0) != IFNULL(NEW.lastName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Last Name',CAST(OLD.lastName AS CHAR), CAST(NEW.lastName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'lastName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Email',CAST((SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(OLD.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails) AS CHAR),  \n" +
                "			CAST(( SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(NEW.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails)AS CHAR), v_createdAt,NEW.createdBy,v_createdAt,  \n" +
                "            NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'email'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.division,0) != IFNULL(NEW.division,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Department',CAST(OLD.division AS CHAR), CAST(NEW.division AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'division'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.middleName,0) != IFNULL(NEW.middleName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Middle Name',CAST(OLD.middleName AS CHAR), CAST(NEW.middleName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'middleName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDefault,0) != IFNULL(NEW.isDefault,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Set as Default \"Attention to\"',CAST((CASE WHEN OLD.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isDefault'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.additionalComment,0) != IFNULL(NEW.additionalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Comment',CAST(OLD.additionalComment AS CHAR), CAST(NEW.additionalComment AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'longtext');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPrimary,0) != IFNULL(NEW.isPrimary,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Primary Person',CAST((CASE WHEN OLD.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isPrimary'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(OLD.refTableName,0) != IFNULL(NEW.refTableName,0) OR IFNULL(OLD.refTransID,0) != IFNULL(NEW.refTransID,0) ) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Contact Person Type',CAST((CASE WHEN (OLD.refTableName = 'employees') THEN 'Personnel' WHEN (OLD.refTableName = 'mfgcodemst') THEN (SELECT (CASE  \n" +
                "			WHEN a.mfgType = 'MFG' THEN 'Customer/Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = OLD.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "			CAST((CASE WHEN (NEW.refTableName = 'employees') THEN 'Personnel' WHEN (NEW.refTableName = 'mfgcodemst') THEN (SELECT (CASE WHEN a.mfgType = 'MFG' THEN 'Customer/Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = NEW.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "             v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'refTableName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.title,0) != IFNULL(NEW.title,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Title',CAST(OLD.title AS CHAR), CAST(NEW.title AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'title'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Status',CAST((CASE WHEN OLD.isActive = '1' THEN 'Active' ELSE 'Inactive' END) AS CHAR), CAST((CASE WHEN NEW.isActive = '1' THEN 'Active' ELSE 'Inactive' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phoneNumber,0) != IFNULL(NEW.phoneNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Phone Numbers',  \n" +
                "        CAST(fun_getCategoryWisePhonesFromJsonList(OLD.phoneNumber) AS CHAR),  \n" +
                "		CAST(fun_getCategoryWisePhonesFromJsonList(NEW.phoneNumber) AS CHAR),  \n" +
                "        v_createdAt,NEW.createdBy,v_createdAt, NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phoneNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mailToCategory,0) != IFNULL(NEW.mailToCategory,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Mail To', CAST((CASE WHEN (OLD.mailToCategory = 'N') THEN 'None' WHEN (OLD.mailToCategory = 'P') THEN 'Primary Email' WHEN (OLD.mailToCategory = 'A') THEN 'All Email' ELSE '' END) AS CHAR),  \n" +
                "			CAST((CASE WHEN (NEW.mailToCategory = 'N') THEN 'None' WHEN (NEW.mailToCategory = 'P') THEN 'Primary Email' WHEN (NEW.mailToCategory = 'A') THEN 'All Email' ELSE '' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop function if Exists `fun_getFormattedContactPerson`;  \n" +
                "CREATE FUNCTION `fun_getFormattedContactPerson`(  \n" +
                "	 pFirstName VARCHAR(255),  \n" +
                "     pMiddleName VARCHAR(255),  \n" +
                "     pLastName VARCHAR(255),  \n" +
                "     pDivision VARCHAR(100),  \n" +
                "     pEmail LONGTEXT,  \n" +
                "     pPhone VARCHAR(255),  \n" +
                "     pPhExtension VARCHAR(8)  \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn LONGTEXT;  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "	SELECT  CONCAT( fun_GetFormattedContactPersonName(pFirstName, pMiddleName,pLastName,vContPersonNameFormat),  \n" +
                "		 CASE WHEN pDivision IS NULL THEN '' ELSE pDivision END,  \n" +
                "		 CASE WHEN pEmail IS NULL THEN '' ELSE fun_convertJsonEmailToCommaSepList(pEmail) END,  \n" +
                "		 CASE WHEN pPhone IS NULL THEN '' ELSE pPhone END,  \n" +
                "		 CASE WHEN pPhExtension IS NULL THEN '' ELSE CONCAT('Ext. ',pPhExtension) END) INTO  vReturn;  \n" +
                "  \n" +
                "	RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop function if Exists `fun_contactPersonDetailByID`;  \n" +
                "CREATE FUNCTION `fun_contactPersonDetailByID`(  \n" +
                "	pContactPersonID INT  \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pContactPerson VARCHAR(2000);  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "  \n" +
                "	  SELECT  CONCAT('ATTN: ',fun_GetFormattedContactPersonName(firstName,middleName,lastName,vContPersonNameFormat), CASE WHEN division IS NULL THEN '' ELSE CONCAT('  \n" +
                "',division) END,  \n" +
                "	                 CASE WHEN email IS NULL THEN '' ELSE CONCAT('  \n" +
                "Email: ',fun_convertJsonEmailToCommaSepList(email)) END,  \n" +
                "	                 CASE WHEN phoneNumber IS NULL THEN '' ELSE CONCAT('  \n" +
                "Phone: ',fun_getCategoryWisePhonesFromJsonList(phoneNumber)) END  \n" +
                "	                 ) INTO  pContactPerson FROM contactperson  \n" +
                "	                 WHERE personID=pContactPersonID;  \n" +
                "  \n" +
                "	RETURN pContactPerson;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop function if Exists `fun_getAddressbyIDAndContactPersonID`;  \n" +
                "CREATE FUNCTION `fun_getAddressbyIDAndContactPersonID`(  \n" +
                "	pAddressID INT,  \n" +
                "	pcontactPersonID INT  \n" +
                ") RETURNS varchar(2000) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pAddress VARCHAR(2000);  \n" +
                "    DECLARE vFormatValue INT;  \n" +
                "  \n" +
                "	SELECT `values` INTO vFormatValue FROM systemconfigrations WHERE `key`='ContactPersonDisplayNameFormat';  \n" +
                "  \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>','ATTN: ',fun_GetFormattedContactPersonName(cp.firstName,cp.middleName,cp.lastName,vFormatValue),'<br/>', IFNULL(cp.division,''),(CASE WHEN cp.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),  \n" +
                "	 CASE WHEN cp.phoneNumber IS NOT NULL THEN '<br/>' ELSE '' END,  \n" +
                "	 CASE WHEN cp.phoneNumber IS NULL THEN '' ELSE CONCAT('Phone: ', IFNULL(fun_getPrimaryPhoneFromJsonList(cp.phoneNumber),'')) END,  \n" +
                "	CASE WHEN cp.phoneNumber IS NULL THEN '' ELSE CONCAT(' Ext. ', IFNULL(fun_getPrimaryPhExtensionFromJsonList(cp.phoneNumber),'')) END,  \n" +
                "	(CASE WHEN cp.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',fun_getPrimaryEmailFromJsonList(cp.email)),'')) INTO  pAddress  \n" +
                "	FROM customer_addresses ca  \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "	LEFT JOIN contactperson cp ON ca.customerId=cp.refTransID AND cp.personId=pcontactPersonID  \n" +
                "	WHERE ca.id = pAddressID  AND ca.isDeleted = 0;  \n" +
                "  \n" +
                "	RETURN pAddress;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_mfgcodemst`;  \n" +
                "CREATE TRIGGER `Trg_AU_mfgcodemst` AFTER UPDATE ON `mfgcodemst` FOR EACH ROW BEGIN  \n" +
                "    IF IFNULL(OLD.mfgCode,0) != IFNULL(NEW.mfgCode,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Code',CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mfgName,0) != IFNULL(NEW.mfgName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),CAST(CASE WHEN NEW.mfgType='DIST' THEN 'Company' ELSE 'Business Name' END AS CHAR),CAST(OLD.mfgName AS CHAR), CAST(NEW.mfgName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.legalName,0) != IFNULL(NEW.legalName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Legal Name',CAST(OLD.legalName AS CHAR), CAST(NEW.legalName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.customerType,0) != IFNULL(NEW.customerType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer Type',CAST(CASE WHEN  OLD.customerType='B'  THEN 'Broker' WHEN OLD.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR), CAST(CASE WHEN  NEW.customerType='B'  THEN 'Broker' WHEN NEW.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Sales Commission To',fun_getUserNameByEmployeID(IFNULL(OLD.salesCommissionTo, NULL)), fun_getUserNameByEmployeID(IFNULL(NEW.salesCommissionTo, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.customerSystemID,0) != IFNULL(NEW.customerSystemID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer#',CAST(OLD.customerSystemID AS CHAR), CAST(NEW.customerSystemID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.carrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.carrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmaCarrierID,0) != IFNULL(NEW.rmaCarrierID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmaCarrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmaCarrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmashippingMethodId,0) != IFNULL(NEW.rmashippingMethodId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmashippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmashippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.shippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.shippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.carrierAccount,0) != IFNULL(NEW.carrierAccount,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier Account#',CAST(OLD.carrierAccount AS CHAR), CAST(NEW.carrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmaCarrierAccount,0) != IFNULL(NEW.rmaCarrierAccount,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier Account#',CAST(OLD.rmaCarrierAccount AS CHAR), CAST(NEW.rmaCarrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingInsurence,0) != IFNULL(NEW.shippingInsurence,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping insurance',CAST(CASE WHEN OLD.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmaShippingInsurence,0) != IFNULL(NEW.rmaShippingInsurence,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping insurance',CAST(CASE WHEN OLD.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.authorizeType,0) != IFNULL(NEW.authorizeType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Authorize Type',CAST(CASE WHEN OLD.authorizeType=1 THEN 'Authorized' WHEN OLD.authorizeType=2 THEN 'Independent' WHEN OLD.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR), CAST(CASE WHEN NEW.authorizeType=1 THEN 'Authorized' WHEN NEW.authorizeType=2 THEN 'Independent' WHEN NEW.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Email',CAST(OLD.email AS CHAR), CAST(NEW.email AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.website,0) != IFNULL(NEW.website,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Website',CAST(OLD.website AS CHAR), CAST(NEW.website AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.contact,0) != IFNULL(NEW.contact,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Phone',CAST(OLD.contact AS CHAR), CAST(NEW.contact AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCustOrDisty,0) != IFNULL(NEW.isCustOrDisty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Current Status(Manufacturer/Customer)',CAST(CASE WHEN OLD.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR), CAST(CASE WHEN NEW.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoicesRequireManagementApproval,0) != IFNULL(NEW.invoicesRequireManagementApproval,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'All Invoices Require Management Approval',CAST(CASE WHEN OLD.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.taxID,0) != IFNULL(NEW.taxID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Tax ID',CAST(OLD.taxID AS CHAR), CAST(NEW.taxID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.accountRef,0) != IFNULL(NEW.accountRef,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Account Reference',CAST(OLD.accountRef AS CHAR), CAST(NEW.accountRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.paymentMethodID,0) != IFNULL(NEW.paymentMethodID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Payment Method',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentMethodID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentMethodID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'COA',fun_getChartOfAccountsCodeNameByID(IFNULL(OLD.acctId, NULL)), fun_getChartOfAccountsCodeNameByID(IFNULL(NEW.acctId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Terms',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentTermsID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentTermsID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.dateCodeFormatID,0) != IFNULL(NEW.dateCodeFormatID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'MFR Date Code Format',fun_getDateCodeFormatById(IFNULL(OLD.dateCodeFormatID, NULL)), fun_getDateCodeFormatById(IFNULL(NEW.dateCodeFormatID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.comments,0) != IFNULL(NEW.comments,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Internal Comments',CAST(OLD.comments AS CHAR), CAST(NEW.comments AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.freeOnBoardId,0) != IFNULL(NEW.freeOnBoardId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'FOB',CAST(fun_getFOBById(OLD.freeOnBoardId) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardId) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.poComment,0) != IFNULL(NEW.poComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Misc. Comments',CAST(OLD.poComment AS CHAR), CAST(NEW.poComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.scanDocumentSide,0) != IFNULL(NEW.scanDocumentSide,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Scanning Side',CAST(CASE WHEN OLD.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR), CAST(CASE WHEN NEW.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isOrderQtyRequiredInPackingSlip,0) != IFNULL(NEW.isOrderQtyRequiredInPackingSlip,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Require Order Qty in Packing Slip',CAST(CASE WHEN OLD.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isSupplierEnable,0) != IFNULL(NEW.isSupplierEnable,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Enable Supplier API Request for All Users',CAST(CASE WHEN OLD.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR), CAST(CASE WHEN NEW.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR),  \n" +
                "        fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.externalSupplierOrder,0) != IFNULL(NEW.externalSupplierOrder,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Supplier API Request Order',CAST(OLD.externalSupplierOrder AS CHAR), CAST(NEW.externalSupplierOrder AS CHAR),  \n" +
                "        fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.supplierMFRMappingType,0) != IFNULL(NEW.supplierMFRMappingType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Type Of Supplier',CAST(CASE WHEN OLD.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN OLD.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR),  \n" +
                "        CAST(CASE WHEN NEW.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN NEW.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.displayOrder,0) != IFNULL(NEW.displayOrder,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Display Order',CAST(FORMAT(OLD.displayOrder, 5) AS CHAR), CAST(FORMAT(NEW.displayOrder, 5) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                /* **************************** Add Script Version -> 25-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5955,'2.00','V1',' US 40746 And User Story 40551: Show Primary contact person in detail tab of customer/supplier page. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5955:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetCompanyDetailsForReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCompanyDetailsForReport`()  \n" +
                "BEGIN  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "	SELECT CONCAT(IFNULL(ci.street1, ', '),', ',IFNULL(ci.city,', '),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode,''))AS address,  \n" +
                "	   fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName, vContPersonNameFormat) companyContactName,ci.registeredEmail as companyEmail,ci.faxNumber,ci.contactNumber as phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail as email  \n" +
                "	FROM company_info ci  \n" +
                "	LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "    LEFT JOIN contactperson cp ON ci.mfgCodeId = cp.refTransID and cp.refTableName = 'mfgcodemst' and cp.isDefault = 1 and cp.isActive = 1 and cp.isDeleted = 0  \n" +
                "	WHERE ci.isDeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetCompanyReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCompanyReportDetails`()  \n" +
                "BEGIN  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "	# Company detail for Report  \n" +
                "	SELECT CONCAT( IF(ci.legalName = '' OR ci.legalName is null,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'<br/>',  \n" +
                "    IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''), ', ',  \n" +
                "    IFNULL(c.countryName,''),'<br/>','Email: &nbsp;',IFNULL(ci.registeredEmail,''),'<br/>','Phone: ', IFNULL(ci.contactNumber,''),  \n" +
                "    '<br/>','Fax: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',IFNULL(ci.faxNumber,''))AS address,  \n" +
                "		ci.registeredEmail AS companyEmail, ci.registeredEmail as email,   ci.faxNumber,ci.contactNumber AS contact,ci.phoneExt,ci.contactNumber AS phoneNo, ci.name AS  mfgName,'' AS headerName,'accounting@flextronassembly.com' AS billingEmail,  \n" +
                "		ci.ein, ci.remittanceAddress,  \n" +
                "        fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName, vContPersonNameFormat) companyContactName  \n" +
                "	FROM company_info ci  \n" +
                "		LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "		LEFT JOIN contactperson cp ON ci.mfgCodeId = cp.refTransID and cp.refTableName = 'mfgcodemst' and cp.isDefault = 1 and cp.isActive = 1 and cp.isDeleted = 0  \n" +
                "	WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveContactPersonList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveContactPersonList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefEntityType VARCHAR(255),  \n" +
                "	IN pisPrimary TINYINT,  \n" +
                "	IN pisDefault TINYINT,  \n" +
                "	IN prefName VARCHAR(255),  \n" +
                "	IN padditionalComment VARCHAR(2000)  \n" +
                "   )  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "        DECLARE mfgcodemstCondition VARCHAR(255) DEFAULT '';  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE vMfgCodeFormat INT;  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "		DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "		SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "  		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = ' 1=1 ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefEntityType = 'Customer/Manufacturer') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'MFG'\");  \n" +
                "		ELSEIF (prefEntityType = 'Supplier') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisPrimary) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isPrimary = '\",pisPrimary,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisDefault) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isDefault = '\",pisDefault,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefName IS NOT NULL AND prefName != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND refName LIKE '%\",prefName,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(padditionalComment IS NOT NULL AND padditionalComment != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND additionalComment LIKE '%\",padditionalComment,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # Common Details for Retrive Contact Person.  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_Common = CONCAT(\"  \n" +
                "			fun_GetFormattedContactPersonName(a.firstName, a.middleName, a.lastName, \",vContPersonNameFormat,\") formattedName,  \n" +
                "			fun_getUserNameByID(a.updatedBy) updatedbyValue, fun_getUserNameByID(a.createdBy) createdbyValue,  \n" +
                "			fun_getRoleByID(a.createByRoleId) createdbyRoleValue, fun_getRoleByID(a.updateByRoleId) updatedbyRoleValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "			(CASE WHEN (a.systemGenerated = 0) THEN 'No' WHEN (a.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `syatemGeneratedValue`,  \n" +
                "			(CASE WHEN (a.isDefault = 0) THEN 'No' WHEN (a.isDefault = 1) THEN 'Yes' ELSE '' END) AS `isDefaultValue`,  \n" +
                "			(CASE WHEN (a.isPrimary = 0) THEN 'No' WHEN (a.isPrimary = 1) THEN 'Yes' ELSE '' END) AS `isPrimaryValue`,  \n" +
                "            (CASE WHEN (a.mailToCategory = 'N') THEN 'None' WHEN (a.mailToCategory = 'P') THEN 'Primary Email' WHEN (a.mailToCategory = 'A') THEN 'All Email' ELSE '' END) AS `mailToValue`  \n" +
                "		\");  \n" +
                "  \n" +
                "		# Filter: Personnel  \n" +
                "		SET @temp_Sproc_RetrieveMasterTemplate_employees = CONCAT(\"  \n" +
                "			select cp.personId, ecp.employeeId AS refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment, cp.phoneNumber, cp.mailToCategory,  \n" +
                "					cp.division, cp.isPrimary, cp.systemGenerated, '' As refName, 'Personnel' AS refEntityType,  \n" +
                "                    fun_convertJsonEmailToCommaSepList(cp.email) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive,  \n" +
                "                    fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName,\",vEmployeeNameFormat,\") personnel,  \n" +
                "                    (SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40)  PATH '$.phExtension')) jsonTblPhone ) phoneNumberList,  \n" +
                "					cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "				FROM contactperson cp  \n" +
                "                LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "				LEFT JOIN employees emp ON emp.id = ecp.employeeId and emp.isDeleted = 0  \n" +
                "					WHERE cp.refTableName = 'employees' AND cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # Filter: Manufacturer AND Supplier  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_mfgcodemst = CONCAT(\"  \n" +
                "			select cp.personId, cp.refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment, cp.phoneNumber, cp.mailToCategory,  \n" +
                "					cp.division, cp.isPrimary, cp.systemGenerated, fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName, \",vMfgCodeFormat,\") AS refName,  \n" +
                "					(CASE WHEN mfg.mfgType = 'MFG' THEN 'Customer/Manufacturer' WHEN mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "					(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive, '' AS personnels,  \n" +
                "                    (SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40)  PATH '$.phExtension')) jsonTblPhone ) phoneNumberList,  \n" +
                "                    cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "                FROM contactperson cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID and mfg.isDeleted = 0 \",mfgcodemstCondition,\"  \n" +
                "						WHERE cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # UNION Records based of Filer : Create Final Query for Fetch Contact Person Records.  \n" +
                "        IF(prefEntityType = 'Supplier' OR prefEntityType = 'Customer/Manufacturer') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "		ELSEIF (prefEntityType = 'Personnel') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\") a \");  \n" +
                "        ELSE  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate= CONCAT(\"select *,\",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\" UNION ALL \",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY firstName ASC\" ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		 /* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveMasterTemplate,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveMasterTemplate,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetContactPersonForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetContactPersonForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    IN pFromdate DATE,  \n" +
                "    IN pTodate DATE,  \n" +
                "    IN pRequiredCount TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE vEmployeeNameFormat INT;  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			COUNT(1)  \n" +
                "		FROM `contactperson`  \n" +
                "		WHERE `isDeleted` = 0 AND `personId` = IFNULL(pId,`personId`);  \n" +
                "	ELSE  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.division, cp.additionalComment, ecp.employeeId AS refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName,vContPersonNameFormat) fullName, 'Personnel' AS refEntityType,  \n" +
                "				NULL AS refName, fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName, vEmployeeNameFormat) personnels,  \n" +
                "				fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "                fun_getCategoryWisePhonesFromJsonList(cp.phoneNumber) phoneNumberList,  \n" +
                "				NULL AS isDefault,  \n" +
                "				NULL AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) STATUS,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "			LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId AND ecp.isDeleted = 0 AND ecp.releasedAt IS NULL  \n" +
                "			LEFT JOIN employees emp ON emp.id = ecp.employeeId AND emp.isDeleted = 0  \n" +
                "				WHERE `personId` = IFNULL(pId,`personId`) AND cp.refTableName ='employees'  \n" +
                "				AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "						OR (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "					ELSE 1 = 1 END)  \n" +
                "		UNION ALL  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.division, cp.additionalComment, cp.refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName,vContPersonNameFormat) fullName,  \n" +
                "				(CASE WHEN mfg.mfgType = 'MFG' THEN 'Customer/Manufacturer' WHEN mfg.mfgType = 'DIST' AND mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "                fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,vMfgCodeFormat) AS refName,  NULL AS personnels,  \n" +
                "                fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "                fun_getCategoryWisePhonesFromJsonList(cp.phoneNumber) phoneNumberList,  \n" +
                "				(CASE WHEN (cp.isDefault = 0) THEN 'No'  \n" +
                "					WHEN (cp.isDefault = 1) THEN 'Yes' ELSE '' END) AS isDefault,  \n" +
                "				(CASE WHEN (cp.isPrimary = 0) THEN 'No'  \n" +
                "					WHEN (cp.isPrimary = 1) THEN 'Yes' ELSE '' END) AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) STATUS,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID AND mfg.isDeleted = 0  \n" +
                "			WHERE `personId` = IFNULL(pId,`personId`)  \n" +
                "				AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "						OR (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveCustomerInvoiceDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pFilterStatus LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pPoNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearchPO TINYINT,  \n" +
                "	IN pMfgCodeIds LONGTEXT ,  \n" +
                "	IN pPaymentTermsIds LONGTEXT ,  \n" +
                "	IN pPartId VARCHAR(5000) ,  \n" +
                "	IN pTransType VARCHAR(5) ,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
                "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
                "	IN pZeroAmountFilter TINYINT,  \n" +
                "	IN pCreditMemoRefundStatusFilter VARCHAR(100)      ,  \n" +
                "	IN pMarkedForRefund TINYINT  \n" +
                "	-- IN pChequeNumber  VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_empFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET v_appliedCMPDJoin = '';  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN  \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
                "	ELSE  \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount ,  \n" +
                "						NULL as totRefundIssuedAgainstCreditMemo , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"  \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,  \n" +
                "        cp.invoiceNumber,cp.invoiceDate, cp.revision,  \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
                "        cp.soNumber,cp.soDate,  \n" +
                "		cp.sorevision,  \n" +
                "        cp.refSalesOrderID,  \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,  \n" +
                "        cp.refCustInvoiceID,  \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "		 cp.status,  \n" +
                "         cp.subStatus,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
                "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
                "			ELSE '' END) AS creditAppliedStatus ,  \n" +
                "		  cp.paymentStatus,  \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
                "		  ifnull(cp.totalAmount,0) totalAmount,  \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,  \n" +
                "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,  \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,  \n" +
                "		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\", vMfgCodeFormat,\") as customerName,  \n" +
                "		 m.mfgcode as customerCode,  \n" +
                "         cp.customerID,  \n" +
                "         cp.createdBy as createdById,  \n" +
                "		\",v_receivedAmtSF,\"  \n" +
                "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,  \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,  \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,  \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,  \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,  \n" +
                "         cp.salesCommissionTo,  \n" +
                "         fun_GetEmployeeFormattedName(salecomm.firstName,salecomm.middleName,salecomm.lastName,salecomm.initialName,\",v_empFormat,\") salesCommissionToName,  \n" +
                "         cp.termsDays termDays,  \n" +
                "         cp.freeOnBoardId,  \n" +
                "         cp.freeOnBoardName,  \n" +
                "         cp.isLocked,  \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "         cp.shippingMethodId, fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
                "         packingSlip.id packingSlipId,  \n" +
                "         (select group_concat(paymentNumber)  \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,  \n" +
                "		 (select COUNT(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) cpTrackNumberCount,  \n" +
                "         cp.rmaNumber , cp.systemId,  \n" +
                "        fun_getAddressbyID(cp.intermediateShipmentId) intermediateAddress,  \n" +
                "		fun_getAddressbyID(cp.shipToId) shippingAddress,  \n" +
                "		fun_getAddressbyID(cp.billToId) billingAddress,  \n" +
                "        fun_getFormattedContactPerson(billCP.firstName,billCP.middleName,billCP.lastName,billCP.division,billCP.email, fun_getPrimaryPhoneFromJsonList(billCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(billCP.phoneNumber)) billToContactPerson, fun_getFormattedContactPerson(shipCP.firstName,shipCP.middleName,shipCP.lastName,shipCP.division,shipCP.email,fun_getPrimaryPhoneFromJsonList(shipCP.phoneNumber) , fun_getPrimaryPhExtensionFromJsonList(shipCP.phoneNumber)) shipToToContactPerson,  \n" +
                "		fun_getFormattedContactPerson(interCP.firstName,interCP.middleName,interCP.lastName,interCP.division,interCP.email, fun_getPrimaryPhoneFromJsonList(interCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(interCP.phoneNumber)) markToToContactPerson,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
                "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,  \n" +
                "         (SELECT `paymentDate` FROM packingslip_invoice_payment_det pipd  \n" +
                "					JOIN packingslip_invoice_payment pip ON pipd.`refPayementid` = pip.id  \n" +
                "		WHERE pipd.`refCustPackingslipInvoiceID` = cp.id AND pip.refPaymentMode = 'R' AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "		AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0 ORDER BY pipd.id DESC LIMIT 1) AS lastRcvdPaymentDate ,  \n" +
                "		fun_getGenericCategoryCodeNameByID(cp.carrierID) carrierName,  \n" +
                "        cp.carrierID , cp.carrierAccountNumber  \n" +
                "	 FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID  \n" +
                "        LEFT JOIN contactperson billCP ON billCP.personId = cp.billingContactPersonID and billCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson shipCP ON shipCP.personId = cp.shippingContactPersonID and shipCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson interCP ON interCP.personId = cp.intermediateContactPersonID and interCP.isDeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
                "        LEFT JOIN employees salecomm ON salecomm.id = cp.salesCommissionTo and salecomm.isDeleted = 0  \n" +
                "		\" , v_appliedCMPDJoin ,\"  \n" +
                "	WHERE  cp.isDeleted=0  \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.termsId in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPartId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN  \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');  \n" +
                "	# END IF;  \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) END) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) END) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
                "		IF pIsExactSearchPO = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
                "                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
                "                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
                "	IF pFromDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pToDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- filter zero amount invoice  \n" +
                "	IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefund = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "		 round((c.totalAmount),2) totalAmount,  \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,  \n" +
                "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0) + IFNULL(c.totRefundIssuedAgainstCreditMemo,0) ),2)  \n" +
                "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,  \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
                "						else '' end) materialStatus from ( \",  \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	--  select @SQLStatement2	;  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveCustomerPackingSlipDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE v_empFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname,\", vMfgCodeFormat,\") customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "			mfgmst.mfgCode custCode,  \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "            case when sm.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
                "            sm.isBlanketPO,  \n" +
                "cd.id AS customerslipId,  \n" +
                "case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "  fun_getAddressbyID(cd.intermediateShipmentId) markFor,  \n" +
                "  fun_getAddressbyID(cd.shipToId) shipTo,  \n" +
                "  fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "  fun_getFormattedContactPerson(billCP.firstName,billCP.middleName,billCP.lastName,billCP.division,billCP.email, fun_getPrimaryPhoneFromJsonList(billCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(billCP.phoneNumber)) billToContactPerson,  \n" +
                "  fun_getFormattedContactPerson(shipCP.firstName,shipCP.middleName,shipCP.lastName,shipCP.division,shipCP.email, fun_getPrimaryPhoneFromJsonList(shipCP.phoneNumber),fun_getPrimaryPhExtensionFromJsonList(shipCP.phoneNumber)) shipToToContactPerson,  \n" +
                "  fun_getFormattedContactPerson(interCP.firstName,interCP.middleName,interCP.lastName,interCP.division,interCP.email, fun_getPrimaryPhoneFromJsonList(interCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(interCP.phoneNumber)) markToToContactPerson,  \n" +
                "   fun_GetEmployeeFormattedName(emp.firstName,emp.middleName,emp.lastName,emp.initialName,\",v_empFormat,\") salesCommissionToName,  \n" +
                "   cd.salesCommissionTo,  \n" +
                "     (CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         fun_getUserNameByID(cd.updatedBy) updatedby,  \n" +
                "         fun_getUserNameByID(cd.createdBy) createdby,  \n" +
                "         fun_getRoleByID(cd.createByRoleId) createdbyRole,  \n" +
                "         fun_getRoleByID(cd.updateByRoleId) updatedbyRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdAt,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS lockedAt,  \n" +
                "         cpTrack.cpTrackNumber,  \n" +
                "         ifnull(cpTrack.cpTrackNumberCount,0) cpTrackNumberCount,  \n" +
                "         (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "                        cd.revision ,  \n" +
                "           ifnull(packingdtl.packingSlipCnt,0)  packingSlipCnt,  \n" +
                "           sm.rmaNumber,sm.isRmaPO,  \n" +
                "           (CASE when sm.isRmaPO = 1 then 'YES' when sm.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "           (CASE when sm.isRmaPO = 1 then 'Yes' when sm.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp,  \n" +
                "           fun_getGenericCategoryCodeNameByID(cd.carrierID)  carrierName,  \n" +
                "           cd.carrierID , cd.carrierAccountNumber  \n" +
                "		FROM customer_packingslip cd  \n" +
                "        LEFT JOIN mfgcodemst mfgmst ON mfgmst.id = cd.customerId and mfgmst.isDeleted = 0  \n" +
                "		LEFT JOIN salesordermst sm on sm.id=cd.refSalesOrderID and sm.isdeleted=0  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0  \n" +
                "		LEFT JOIN (  \n" +
                "		SELECT COUNT(cpTrack.trackNumber) cpTrackNumberCount,GROUP_CONCAT(cpTrack.trackNumber SEPARATOR ', ') cpTrackNumber,cpTrack.refCustPackingSlipID FROM customer_packing_slip_track_number cpTrack WHERE  cpTrack.isDeleted = 0 GROUP BY cpTrack.refCustPackingSlipID  \n" +
                "		) cpTrack on cpTrack.refCustPackingSlipID=cd.id  \n" +
                "		left join ( select count(1) packingSlipCnt,packingdtl.refCustPackingSlipID from customer_packingslip_det packingdtl where packingdtl.isDeleted = 0 GRoup by packingdtl.refCustPackingSlipID  \n" +
                "		) packingdtl on packingdtl.refCustPackingSlipID=cd.id  \n" +
                "        LEFT JOIN contactperson billCP ON billCP.personId = cd.billingContactPersonID and billCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson shipCP ON shipCP.personId = cd.shippingContactPersonID and shipCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson interCP ON interCP.personId = cd.intermediateContactPersonID and interCP.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "	 IF (pfilterStatus = 0) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    ELSE  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  \n" +
                "   IF pmfgPartID IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails= CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' AND cd.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pmfgPartID , ')) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "		padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,'''  or cd.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "        SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "		padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%''  or cd.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "  SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveSupplierQuote`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuote`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pIsSummary TINYINT,  \n" +
                "	IN pSupplierIds VARCHAR(16000),  \n" +
                "	IN pQuoteStatus VARCHAR(1000),  \n" +
                "	IN pSearchType VARCHAR(5),  \n" +
                "	IN pAdvanceSearchSQ VARCHAR(100),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN pPartIds VARCHAR(16000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_MfgNameFormat VARCHAR(100);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO v_MfgNameFormat;  \n" +
                "  \n" +
                "	IF (pIsSummary = FALSE) THEN  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "				SELECT  \n" +
                "					s.id,  \n" +
                "					spd.id AS supplierQuotePartDetID,  \n" +
                "					fun_GetFormattedMfgCode(cm.mfgCode, cm.mfgName, \",v_MfgNameFormat,\") mfgName,  \n" +
                "					cm.mfgCode,  \n" +
                "					s.supplierID,  \n" +
                "					spd.partID,  \n" +
                "                    c.custAssyPN,  \n" +
                "					c.mfgPN AS mfgPN,  \n" +
                "                    c.mfgPNDescription,  \n" +
                "					c.mfgcodeID,  \n" +
                "					sc.mfgPN AS supplierPN,  \n" +
                "					spd.supplierPartID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "					IF(spd.isActive = 0, 'Inactive', 'Active') AS isActiveConvertedValueDetail,  \n" +
                "					spd.isActive,  \n" +
                "					spd.scanLabel,  \n" +
                "                    IF(s.quoteStatus = 'P',true, false) AS isDisabledDelete,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricing,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledCopySupplierQuote,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricingHistory,  \n" +
                "                    IF(spd.id IS NULL, false, true) AS isRequirementReference,  \n" +
                "					c.isCustom,  \n" +
                "					sc.isCustom AS isCustomSupplier,  \n" +
                "					rhc.rohsIcon,  \n" +
                "					rhc.name rohsName,  \n" +
                "					rhsc.rohsIcon supplierRohsIcon,  \n" +
                "					rhsc.name supplierRohsName,  \n" +
                "					fun_getPartAttibutesBySupplierQuoteDetailID(spd.id) AS attributesList,  \n" +
                "					fun_getPartPricingCountBySupplierQuoteDetailID(spd.id) AS pricingCount,  \n" +
                "					fun_getUserNameByID(spd.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(spd.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(spd.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(spd.createByRoleId) createdByRole  \n" +
                "				FROM  supplier_quote_parts_det spd  \n" +
                "				LEFT JOIN supplier_quote_mst s ON spd.supplierQuoteMstID = s.id AND s.isDeleted = 0  \n" +
                "				LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN rfq_rohsmst rhc ON c.RoHSStatusID = rhc.id AND rhc.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "				LEFT JOIN rfq_rohsmst rhsc ON sc.RoHSStatusID = rhsc.id AND rhsc.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst cm ON cm.id = c.mfgcodeID  AND cm.isDeleted = 0  \n" +
                "				WHERE spd.isDeleted = 0 \");  \n" +
                "	 ELSE  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "			SELECT 	s.id,  \n" +
                "					s.supplierID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "                    IF(s.quoteStatus = 'P', true, false) AS isDisabledDelete,  \n" +
                "                    fun_getAddressbyID(s.billingAddressID) billTo,  \n" +
                "                    fun_getAddressbyID(s.shippingAddressID) shipTo,  \n" +
                "                    fun_getFormattedContactPerson(cntb.firstName,cntb.middleName,cntb.lastName,cntb.division,cntb.email, fun_getPrimaryPhoneFromJsonList(cntb.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(cntb.phoneNumber)) billToContactName,  \n" +
                "                    fun_getFormattedContactPerson(cnts.firstName,cnts.middleName,cnts.lastName,cnts.division,cnts.email, fun_getPrimaryPhoneFromJsonList(cnts.phoneNumber),fun_getPrimaryPhExtensionFromJsonList(cnts.phoneNumber)) shipToContactName,  \n" +
                "                    (SELECT COUNT(0) FROM supplier_quote_parts_det WHERE isDeleted = 0 AND supplierQuoteMstID = s.id) AS noOfSupplierPartLine,  \n" +
                "					fun_getUserNameByID(s.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(s.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(s.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(s.createByRoleId) createdByRole  \n" +
                "			FROM   supplier_quote_mst s  \n" +
                "			LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "			LEFT JOIN contactperson cntb ON s.billingContactPersonID = cntb.personId AND cntb.isDeleted = 0  \n" +
                "			LEFT JOIN contactperson cnts ON s.shippingContactPersonID = cnts.personId AND cnts.isDeleted = 0  \n" +
                "			WHERE  s.isDeleted = 0  AND  \n" +
                "            (CASE WHEN ('\",pPartIds,\"' != '') THEN  \n" +
                "				s.id IN  (SELECT spd.supplierQuoteMstID FROM  \n" +
                "				supplier_quote_parts_det spd  \n" +
                "                LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "                WHERE spd.isDeleted = 0 AND (FIND_IN_SET(spd.supplierPartID, ('\",pPartIds,\"')) OR FIND_IN_SET(spd.partID, ('\",pPartIds,\"'))))  \n" +
                "				ELSE 1 = 1 END)  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSupplierIds IS NOT NULL OR pSupplierIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND supplierID in (\"',pSupplierIds,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pQuoteStatus IS NOT NULL OR pQuoteStatus != '') THEn  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND quoteStatus in (\"',pQuoteStatus,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pAdvanceSearchSQ IS NOT NULL OR pAdvanceSearchSQ != '') THEN  \n" +
                "		IF(pSearchType = 'E') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber = \"', pAdvanceSearchSQ , '\" ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber LIKE \"%', pAdvanceSearchSQ ,'%\" ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''' and quoteDate <= ''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate <= ''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPartIds != '' AND (pIsSummary = FALSE)) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( supplierPartID in (\"',pPartIds,'\") OR partID in (\"',pPartIds,'\") )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuote,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuote,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "   PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetCheckPrintAndRemittanceCustRefundReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceCustRefundReport`(  \n" +
                "	IN pPaymentID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		/* Refund master details */  \n" +
                "		SELECT pip.id, pip.accountReference,  \n" +
                "			pip.paymentDate, pip.paymentNumber,  \n" +
                "			pip.paymentAmount,  \n" +
                "			fun_NumberToWords(pip.paymentAmount) AS paymentAmountInWords,  \n" +
                "			pip.payToName ,   -- pip.payToAddress,  \n" +
                "			fun_getAddressbyIDForCheckPrint(pip.payToAddressID, pip.payToContactPersonID) AS payToAddress,  \n" +
                "			 pip.billToName AS customerName,  \n" +
                "			 -- pip.billToAddress AS customerAddress,  \n" +
                "			fun_getAddressbyIDForCheckPrint(pip.billToAddressID, pip.billToContactPersonID) AS customerAddress,  \n" +
                "			-- ca.email AS customerEmail, ca.faxNumber AS customerFaxNumber,  \n" +
                "			fun_getPrimaryEmailFromJsonList(cp.email) AS customerEmail ,  \n" +
                "			#cp.faxNumber AS customerFaxNumber ,  \n" +
                "			'' AS customerFaxNumber ,  \n" +
                "			pip.bankAccountNo, pip.refGencTransModeID,  \n" +
                "			g.gencCategoryName AS paymentType ,  \n" +
                "			pip.remark  \n" +
                "		FROM packingslip_invoice_payment pip  \n" +
                "			-- LEFT JOIN customer_addresses ca ON ca.customerId = pip.mfgcodeID AND ca.isDeleted = 0 AND ca.addressType = 'B' AND ca.isDefault = 1  \n" +
                "			LEFT JOIN contactperson cp ON cp.personId = pip.billToContactPersonID AND cp.isDeleted = 0  \n" +
                "			JOIN genericcategory g ON g.categoryType = 'Payable Payment Method' AND g.gencCategoryID = pip.paymentType  \n" +
                "		WHERE pip.id = pPaymentID  \n" +
                "		AND pip.refPaymentMode = 'CR'  \n" +
                "		AND pip.isDeleted = 0  ;  \n" +
                "  \n" +
                "		/* get refunded payment or refunded credit memo details */  \n" +
                "		SELECT  \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoNumber  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumber  \n" +
                "				ELSE NULL END) AS paymentCMNumber ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoDate  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentDate  \n" +
                "				ELSE NULL END) AS paymentCMDate ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.paymentAmount  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentAmount  \n" +
                "				ELSE NULL END) AS refundedAmountForPaymentCM ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.comment  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.comment  \n" +
                "				ELSE NULL END) AS commentForPaymentCM  \n" +
                "  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount, psipd.comment, psipt.paymentNumber, psipt.paymentDate  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0 AND psipt.isPaymentVoided = 0  \n" +
                "					WHERE psipd.refPayementid = pPaymentID  \n" +
                "					AND psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					 ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount ,psipd.comment, cps.creditMemoNumber, cps.creditMemoDate  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refPayementid = pPaymentID  \n" +
                "					AND psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		WHERE psip.id = pPaymentID  \n" +
                "		AND psip.refPaymentMode = 'CR'  \n" +
                "		AND psip.isDeleted = 0  ;  \n" +
                "  \n" +
                "		/* Default set company (isCompany = 1) address details  */  \n" +
                "		SELECT CONCAT('<b>', IF(ci.legalName = '' OR ci.legalName IS NULL,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'</b><br/>',IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''),'<br/>',  \n" +
                "			IFNULL(c.countryName,''))AS address,  \n" +
                "			ci.personName AS companyContactName,ci.registeredEmail AS companyEmail,ci.faxNumber,ci.contactNumber AS phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail AS email  \n" +
                "		FROM company_info ci  \n" +
                "		LEFT JOIN countrymst c ON ci.countryID=c.countryID AND c.isDeleted = 0  \n" +
                "		WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetCheckPrintAndRemittanceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(  \n" +
                "	IN pPaymentID int  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		select pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,  \n" +
                "				pip.paymentAmount,  \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,  \n" +
                "                fun_getAddressbyIDForCheckPrint(pip.payToAddressID, pip.payToContactPersonID) payToAddress,  \n" +
                "				/*pip.payToAddress,  */  \n" +
                "				pip.billToName supplierName,  \n" +
                "                fun_getAddressbyIDForCheckPrint(pip.billToAddressID, pip.billToContactPersonID) supplierAddress,  \n" +
                "                /*pip.billToAddress supplierAddress,*/  \n" +
                "                ca.email supplierEmail, '' supplierFaxNumber,  \n" +
                "                pip.bankAccountNo,  \n" +
                "                g.gencCategoryName paymentType  \n" +
                "		  from packingslip_invoice_payment pip  \n" +
                "          left join customer_addresses ca ON ca.customerId = pip.mfgcodeID and ca.isDeleted = 0 and ca.addressType = 'B' and ca.isDefault = 1  \n" +
                "          join genericcategory g ON g.categoryType = 'Payable Payment Method' and g.gencCategoryID = pip.paymentType  \n" +
                "		 where pip.isDeleted = 0  \n" +
                "			and pip.refPaymentMode = 'P'  \n" +
                "		   and pip.id = pPaymentID;  \n" +
                "  \n" +
                "		  SELECT pd.refPayementid id,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoNumber  \n" +
                "						ELSE  \n" +
                "							p.debitMemoNumber  \n" +
                "					END) invoiceNumber,  \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "				else  \n" +
                "					(SELECT 	ps.invoiceNumber  \n" +
                "					FROM 	packing_slip_material_receive ps  \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno  \n" +
                "							AND ps.isDeleted = 0  )  \n" +
                "				end  \n" +
                "				) refInvoiceNumber,  \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceDate  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoDate  \n" +
                "						ELSE  \n" +
                "							p.debitMemoDate  \n" +
                "					END) invoiceDate,  \n" +
                "  \n" +
                "				p.remark `description`,  \n" +
                "				/*(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,*/  \n" +
                "                pd.paymentAmount extendedPrice,  \n" +
                "				0 discount,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							'Invoice'  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							'Credit Memo'  \n" +
                "						ELSE  \n" +
                "							'Debit Memo'  \n" +
                "					END) receiptMemoType,  \n" +
                "                    p.poNumber  \n" +
                "			FROM packing_slip_material_receive p  \n" +
                "            join packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id  \n" +
                "			WHERE /*p.isDeleted =0  \n" +
                "			and*/ p.receiptType in ('I','C','D')  \n" +
                "            and exists (select 1 from packingslip_invoice_payment pip where pip.refPaymentMode = 'P' and pip.id = pd.refPayementid)  \n" +
                "			/*and p.`status` = 'P'*/  \n" +
                "			and pd.refPayementid = pPaymentID  \n" +
                "            order by invoiceDate, invoiceNumber;  \n" +
                "  \n" +
                "        	SELECT CONCAT('<b>',IF(ci.legalName = '' OR ci.legalName is null,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'</b><br/>',IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''),'<br/>',  \n" +
                "				IFNULL(c.countryName,''))AS address,  \n" +
                "				ci.personName as companyContactName,ci.registeredEmail as companyEmail,ci.faxNumber,ci.contactNumber as phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName,ci.registeredEmail as email  \n" +
                "			FROM company_info ci  \n" +
                "			LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "			WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetCustomerPackingslipHeaderDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipHeaderDetails`(  \n" +
                "	IN cpid INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	SELECT  \n" +
                "    cp.id,  \n" +
                "    cp.status,  \n" +
                "    cp.packingSlipType,  \n" +
                "    cp.packingSlipNumber AS PackingSlip,  \n" +
                "    cp.packingSlipDate AS PackingSlipDate,  \n" +
                "    cp.poDate AS PODate,  \n" +
                "    cp.soNumber AS SalesOrderNumber,  \n" +
                "    cp.poNumber AS PONumber,  \n" +
                "    cp.packingSlipComment,  \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,  \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,  \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,  \n" +
                "    cp.soDate AS SODate,  \n" +
                "    cp.sorevision AS SORevision,  \n" +
                "    fun_getAddressbyIDAndContactPersonID(cp.billToId,cp.billingContactPersonID) SoldToAddress,  \n" +
                "    fun_getAddressbyIDAndContactPersonID(cp.shipToId,cp.shippingContactPersonID) ShippingAddress,  \n" +
                "	fun_getAddressbyIDAndContactPersonID(cp.intermediateShipmentId,cp.intermediateContactPersonID) IntermediateAddress,  \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),  \n" +
                "            '-') AS SalesOrderPersonName,  \n" +
                "	fun_getUserNameByID(cp.updatedBy) AS  preparedBy, us.emailAddress, emp.phExtension  \n" +
                "FROM  \n" +
                "    customer_packingslip cp  \n" +
                "        LEFT JOIN  \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID  \n" +
                "        AND sm.isDeleted = 0  \n" +
                "        LEFT JOIN  \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId  \n" +
                "        AND gc.isDeleted = 0  \n" +
                "        AND gc.categoryType = 'Shipping Methods'  \n" +
                "        LEFT JOIN  \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = cp.termsID  \n" +
                "        AND gcc.isDeleted = 0  \n" +
                "        AND gcc.categoryType = 'Payment Terms'  \n" +
                "	LEFT JOIN users us ON us.id = cp.updatedBy  \n" +
                "	LEFT JOIN employees emp ON emp.id = us.employeeID  \n" +
                "WHERE  \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid  \n" +
                "LIMIT 1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_getCustomerSupplierGeographicalLocationReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_getCustomerSupplierGeographicalLocationReportDetails`(  \n" +
                "	IN pEntityType varchar(5),  \n" +
                "	IN pAddressType varchar(5),  \n" +
                "	IN pisDefaultAddress tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vWhereClause VARCHAR(16383);  \n" +
                "    SET vWhereClause = ' 1=1 ';  \n" +
                "	IF(pEntityType IS NOT NULL) THEN  \n" +
                "		IF pEntityType = 'CUST' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cu.mfgType = 'MFG' AND cu.isCustOrDisty = 1 \");  \n" +
                "		ELSEIF pEntityType = 'DIST' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cu.mfgType = 'DIST' \");  \n" +
                "		ELSE  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND 1=1 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAddressType IS NOT NULL) THEN  \n" +
                "		IF pAddressType = 'B' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'B' \");  \n" +
                "		ELSEIF pAddressType = 'S' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'S' \");  \n" +
                "		ELSEIF pAddressType = 'I' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'I' \");  \n" +
                "		ELSEIF pAddressType = 'P' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'P' \");  \n" +
                "		ELSEIF pAddressType = 'R' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'R' \");  \n" +
                "		ELSE  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND 1=1 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pisDefaultAddress = 1 THEN  \n" +
                "		SET vWhereClause = CONCAT(vWhereClause, ' AND cua.isDefault = 1 ');  \n" +
                "    ELSE  \n" +
                "		SET vWhereClause = CONCAT(vWhereClause, ' AND 1=1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @tempQuery = CONCAT(\"SELECT DISTINCT CONCAT(IF(cu.legalName = '' OR cu.legalName is null,'' ,CONCAT(cu.legalName, ' d/b/a, ')), IFNULL(cu.mfgName, ''), ' Address: ',IFNULL(cua.street1, ''), ' ',IFNULL(cua.city, ''),', ',IFNULL(cua.state, ''),' ',IFNULL(cua.postcode, ''), ',', IFNULL(c.countryName,''), ' ' ,IFNULL(CONCAT('Email:',fun_getPrimaryEmailFromJsonList(cp.email)),''), IFNULL(CONCAT(' Phone: ',fun_getPrimaryPhoneFromJsonList(cp.phoneNumber)),''),IFNULL(CONCAT(' Ext.',fun_getPrimaryPhExtensionFromJsonList(cp.phoneNumber)),''))AS Address, CONCAT(cua.Latitude ,' ',  cua.longitude) AS Location , cu.mfgCode as Code, cu.mfgName as Name, (case WHEN cu.mfgType = 'MFG' then 'Customer' WHEN cu.mfgType = 'DIST' then 'Supplier' else '' END) as Type, (case WHEN cua.isDefault = 1 then 'Yes' else 'No' END) as DefaultAddress,  \n" +
                "    (case WHEN cua.addressType = 'B' then 'Billing Address' WHEN cua.addressType = 'S' then 'Shipping Address'  WHEN cua.addressType = 'I' then 'Intermediate Address' WHEN cua.addressType = 'P' then 'Pay To Information' WHEN cua.addressType = 'R' then 'RMA Shipping Address' else '' END) as AddressType  \n" +
                "        FROM customer_addresses cua  \n" +
                "				Left Join contactperson cp on cua.defaultContactPersonID = cp.personId  \n" +
                "				JOIN mfgcodemst cu ON cu.id = cua.customerId  \n" +
                "				LEFT JOIN countrymst c ON cua.countryID=c.countryID  \n" +
                "				WHERE (cua.latitude is not null And cua.longitude is not null) and\", vWhereClause ,\";\");  \n" +
                "  \n" +
                "	PREPARE query1 FROM @tempQuery;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_PackingslipAndInovoiceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_PackingslipAndInovoiceReport`(  \n" +
                "	IN pSupplierIDs LONGTEXT,  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN pEmployeeID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE SQLStatement TEXT;  \n" +
                "	DECLARE v_SupplierID LONGTEXT;  \n" +
                "	IF(pSupplierIDs != '') THEN  \n" +
                "		SET v_SupplierID = CONCAT(\"a.mfgCodeID in (\",pSupplierIDs,\")\");  \n" +
                "	ELSE  \n" +
                "		SET v_SupplierID = \"1=1\";  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	SET SQLStatement  = CONCAT(\"  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_PackingslipAndInovoiceReport AS  \n" +
                "		SELECT 	ReceiptMonthYear,  \n" +
                "			Supplier,  \n" +
                "			SUM(NoOfReceivedLine) NoOfReceivedLine,  \n" +
                "			SUM(NoOfDisputeLine) NoOfDisputeLine,  \n" +
                "			SUM(NoOfLineWaitingForInvoice) NoOfLineWaitingForInvoice,  \n" +
                "			-- SUM(LinewiseDisputeRatio) LinewiseDisputeRatio,  \n" +
                "			ROUND((sum(NoOfDisputeLine)/sum(NoOfReceivedLine))*100,2) As LinewiseDisputeRatio,  \n" +
                "			SUM(TotalQtyReceived) TotalQtyReceived,  \n" +
                "			SUM(DisputeLineQty) DisputeLineQty,  \n" +
                "			-- SUM(QtywiseDisputeRatio) QtywiseDisputeRatio  \n" +
                "			ROUND((sum(DisputeLineQty)/sum(TotalQtyReceived))*100,2) QtywiseDisputeRatio  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		a.receiptDate As ReceiptDate,  \n" +
                "						fun_getMfgCodeByID(a.mfgCodeID) Supplier,  \n" +
                "						Date_format(a.receiptDate ,'%M %Y') As ReceiptMonthYear,  \n" +
                "						b.NumberofReceivedLine As NoOfReceivedLine,  \n" +
                "						b.DisputeLine As NoOfDisputeLine,  \n" +
                "						b.WaitingForInvoiceLine As NoOfLineWaitingForInvoice,  \n" +
                "						-- Round((b.DisputeLine/b.NumberofReceivedLine)*100,2) As LinewiseDisputeRatio,  \n" +
                "						b.TotalReceivedQty As TotalQtyReceived,  \n" +
                "						b.DisputeLineQty As DisputeLineQty  \n" +
                "						-- Round((DisputeLineQty/TotalReceivedQty)*100,2) As QtywiseDisputeRatio  \n" +
                "				FROM 		packing_slip_material_receive a  \n" +
                "				LEFT JOIN 	(  \n" +
                "							SELECT 		refPackingSlipMaterialRecID, count(1) NumberofReceivedLine,  \n" +
                "									SUM(CASE  \n" +
                "										WHEN 	Status = 'A' and RefCreditDebitInvoiceNo is not null then  \n" +
                "											1  \n" +
                "										WHEN 	Status = 'D' then  \n" +
                "											1  \n" +
                "										ELSE  \n" +
                "											0  \n" +
                "									END)  DisputeLine,  \n" +
                "									SUM(CASE  \n" +
                "										WHEN 	Status ='P' then  \n" +
                "											1  \n" +
                "										ELSE 	0  \n" +
                "									END) waitingForInvoiceLine,  \n" +
                "									SUM(receivedQty) TotalReceivedQty,  \n" +
                "									SUM(CASE  \n" +
                "										WHEN 	Status = 'A' and RefCreditDebitInvoiceNo is not null then  \n" +
                "											receivedQty  \n" +
                "										WHEN 	Status = 'D' then  \n" +
                "											receivedQty  \n" +
                "										ELSE 	0  \n" +
                "									END)  DisputeLineQty  \n" +
                "							FROM 		packing_slip_material_receive_det  \n" +
                "							GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) b ON a.id = b.refPackingSlipMaterialRecID  \n" +
                "				WHERE 		\",v_SupplierID,\"  \n" +
                "							AND receiptType ='I'  \n" +
                "							AND a.receiptDate IS NOT NULL  \n" +
                "							-- AND CAST(a.receiptDate AS DATE) BETWEEN DATE(\", pfromDate ,\") AND DATE(\", ptoDate ,\")  \n" +
                "							AND DATE(a.receiptDate)>=IFNULL(DATE('\",pfromDate,\"'),DATE(a.receiptDate))  \n" +
                "							AND DATE(a.receiptDate)<=IFNULL(DATE('\",ptoDate,\"'),DATE(a.receiptDate))  \n" +
                "							AND deletedAt IS NULL  \n" +
                "				ORDER BY 	a.receiptDate  \n" +
                "			) AS A  \n" +
                "		GROUP BY 	ReceiptMonthYear,Supplier  \n" +
                "		ORDER BY 	ReceiptMonthYear,Supplier  \n" +
                "	\");  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_PackingslipAndInovoiceReport;  \n" +
                "	SET @SQLStatement1 = SQLStatement;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT('SELECT * FROM temp_Sproc_PackingslipAndInovoiceReport');  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	CALL Sproc_GetCompanyDetailsForReport();  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetReversalPartDetailReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReversalPartDetailReport`(  \n" +
                "	IN pCustomerID text,  \n" +
                "    IN pWhereClause TEXT,  \n" +
                "    IN pWithAlternateParts TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE SQLStatement TEXT;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "		SET SQLStatement  = CONCAT(\"  \n" +
                "		Create temporary table if not exists Results as  \n" +
                "		SELECT * FROM  \n" +
                "		 (  \n" +
                "			 SELECT id, (select mfgName from mfgcodemst where id = mfgCodeId) Customer, mfgcodeID as customerID ,mfgPN as AssyPN,rev as AssyRev,RoHSStatusID FROM component  \n" +
                "			 WHERE category = 3 AND deletedAT IS NULL and  \n" +
                "			 partStatus IN ( SELECT id FROM component_partstatusmst WHERE `name`='Active')  \n" +
                "		 ) a,  \n" +
                "		 (  \n" +
                "			 SELECT a.partid, trim(a.Lineid)+0 Lineid, a.CustPN CPN,a.CustomerRev CPNRev,a.QPA, (select mfgName from mfgcodemst where id = b.mfgCodeID) mfgName,  \n" +
                "					 b.mfgCode,b.mfgCodeID,b.MFgPN,b.mfgPNId,c.eolDate EOLDate,c.ltbdate LTBDate,  \n" +
                "					 (SELECT `name` FROM component_partstatusmst WHERE id=c.partStatus)PartStatus,  \n" +
                "					 c.price as TentativePrice, (select mfgName from mfgcodemst where id = (select mfgCodeID from component where id = ( SELECT componentID FROM component_alternatepn WHERE refComponentID = b.mfgPNid and isDeleted = 0 order by componentID asc LIMIT 1))) alternatePartMFG,  \n" +
                "					 (select mfgPN from component where id = (SELECT componentID FROM component_alternatepn WHERE refComponentID = b.mfgPNid and isDeleted = 0 order by componentID asc  LIMIT 1)) alternatePart,  \n" +
                "					 c.updatedAt as modifiedAt,  \n" +
                "					 c.reversalDate,  \n" +
                "					 c.isReversal  \n" +
                "			 FROM rfq_lineitems a, rfq_lineitems_alternatepart b ,component c  \n" +
                "			 WHERE a.id = b.rfqlineitemsId AND b.mfgpnid =c.id AND a.deletedAt IS NULL AND b.deletedAT IS NULL  \n" +
                "             and not exists (select 1 from component_partstatusmst cp where cp.id = c.partStatus and cp.name='TBD')  \n" +
                "			 and (case when \",pWithAlternateParts,\" = 1 then 1=1 else ( exists (SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`!='Active' and deletedAT IS NULL  and id = c.partStatus))  \n" +
                "					end)  \n" +
                "			 AND a.partid IN  \n" +
                "			 (  \n" +
                "				SELECT id FROM component c WHERE c.category = 3 AND c.deletedAT IS NULL  \n" +
                "				AND exists  \n" +
                "				(  \n" +
                "					SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`='Active' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "				)  \n" +
                "			 )  \n" +
                "			 AND EXISTS  \n" +
                "			 (  \n" +
                "				SELECT rfqlineitemsid FROM rfq_lineitems_alternatepart dp  \n" +
                "				WHERE dp.rfqlineitemsid = a.id and dp.deletedAT IS NULL  \n" +
                "				AND EXISTS  \n" +
                " 				(  \n" +
                " 					SELECT 1  \n" +
                "                      FROM component c  \n" +
                "					 WHERE c.id = dp.mfgPnID  \n" +
                "                       and c.deletedAT IS NULL  \n" +
                "                       and c.isReversal = true  \n" +
                "                       /*AND exists (  \n" +
                "								SELECT 1 FROM component_partstatusmst  \n" +
                "								WHERE `name` != 'Active' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "								)*/  \n" +
                " 				)  \n" +
                "			  )  \n" +
                "		 ) b  \n" +
                "		 WHERE a.id =b.partid\");  \n" +
                "  \n" +
                "		IF pCustomerID != '' THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(SQLStatement,' and customerID in (',pCustomerID,')');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = SQLStatement;  \n" +
                "		END IF;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	IF(pWhereClause != '') THEN  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from Results  where ', pWhereClause);  \n" +
                "	else  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from Results');  \n" +
                "	end if;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	CALL Sproc_GetCompanyDetailsForReport();  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                /* **************************** Add Script Version -> 25-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5956,'2.00','V1',' US 40746 And User Story 40551: Show Primary contact person in detail tab of customer/supplier page. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5956:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_getPartnerPrtformanceReportDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_getPartnerPrtformanceReportDetail`(  \n" +
                "	IN pSupplierIDs LONGTEXT,  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN pEmployeeID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE SQLStatement TEXT;  \n" +
                "	IF(pSupplierIDs != '') THEN  \n" +
                "		SET @supplierID = CONCAT(\"a.mfgCodeID in (\",pSupplierIDs,\")\");  \n" +
                "	ELSE  \n" +
                "		SET @supplierID = \"1=1\";  \n" +
                "	END IF;  \n" +
                "	SET SQLStatement  = CONCAT(\"  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_getPartnerPrtformanceReportDetail as  \n" +
                "		SELECT 	ReceiptMonthYear,  \n" +
                "			Supplier,  \n" +
                "			SUM(NoOfReceivedLine) NoOfReceivedLine,  \n" +
                "			SUM(NoOfDisputeLine) NoOfDisputeLine,  \n" +
                "			ROUND((sum(NoOfDisputeLine)/sum(NoOfReceivedLine))*100,2) As LinewiseDisputeRatio,  \n" +
                "			#ROUND(((((sum(NoOfDisputeLine)/sum(NoOfReceivedLine))*100)/100)*50),2) As QualityGrade,  \n" +
                "			ROUND(50-Round(((((sum(NoOfDisputeLine)/sum(NoOfReceivedLine))*100)/100)*50),2),2) As QualityGrade,  \n" +
                "			SUM(TotalQtyReceived) TotalPartReceived,  \n" +
                "			0 as TotalOnTimePartReceived,  \n" +
                "			ROUND((0/sum(TotalQtyReceived))*100,2) PartsOnTimeRatio,  \n" +
                "			ROUND((((0/sum(TotalQtyReceived))*100/100)*50),2) as DiliveryGrade  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		DATE_FORMAT(receiptDate,'%Y%m')receiptmonth,  \n" +
                "						a.receiptDate As ReceiptDate,  \n" +
                "						fun_getMfgCodeByID(a.mfgCodeID) Supplier,  \n" +
                "						Date_format(a.receiptDate ,'%b %Y') As ReceiptMonthYear,  \n" +
                "						b.NumberofReceivedLine As NoOfReceivedLine,  \n" +
                "						b.DisputeLine As NoOfDisputeLine,  \n" +
                "						b.WaitingForInvoiceLine As NoOfLineWaitingForInvoice,  \n" +
                "						b.TotalReceivedQty As TotalQtyReceived,  \n" +
                "						b.DisputeLineQty As DisputeLineQty  \n" +
                "				FROM 		packing_slip_material_receive a  \n" +
                "				LEFT JOIN 	(  \n" +
                "								SELECT 		refPackingSlipMaterialRecID,  \n" +
                "										COUNT(1) NumberofReceivedLine,  \n" +
                "										SUM(  \n" +
                "											CASE  \n" +
                "												WHEN 	Status = 'A' AND RefCreditDebitInvoiceNo IS NOT NULL THEN  \n" +
                "													1  \n" +
                "												WHEN 	Status = 'D' THEN  \n" +
                "													1  \n" +
                "												ELSE 	0  \n" +
                "											END)  DisputeLine,  \n" +
                "										SUM(  \n" +
                "											CASE  \n" +
                "												WHEN 	Status ='P' THEN  \n" +
                "													1  \n" +
                "												ELSE 	0  \n" +
                "											END  \n" +
                "										) waitingForInvoiceLine,  \n" +
                "										SUM(receivedQty) TotalReceivedQty,  \n" +
                "										SUM(  \n" +
                "											CASE  \n" +
                "												WHEN Status = 'A' AND RefCreditDebitInvoiceNo IS NOT NULL THEN  \n" +
                "													receivedQty  \n" +
                "												WHEN Status = 'D' THEN  \n" +
                "													receivedQty  \n" +
                "												ELSE  \n" +
                "													0  \n" +
                "											END  \n" +
                "										)  DisputeLineQty  \n" +
                "								FROM 		packing_slip_material_receive_det  \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) b on a.id = b.refPackingSlipMaterialRecID  \n" +
                "				WHERE \",@supplierID,\"  \n" +
                "						AND  receiptType ='I'  \n" +
                "						AND a.receiptDate is not null  \n" +
                "						AND DATE(a.receiptDate)>=IFNULL(DATE('\",pfromDate,\"'),DATE(a.receiptDate))  \n" +
                "						AND DATE(a.receiptDate)<=IFNULL(DATE('\",ptoDate,\"'),DATE(a.receiptDate))  \n" +
                "						AND deletedAt IS NULL  \n" +
                "				ORDER BY 	a.receiptDate  \n" +
                "			) AS A  \n" +
                "		GROUP BY ReceiptMonthYear,Supplier  \n" +
                "		ORDER BY receiptmonth,Supplier  \n" +
                "	\");  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_getPartnerPrtformanceReportDetail;  \n" +
                "	SET @SQLStatement1 = SQLStatement;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT('SELECT * from temp_Sproc_getPartnerPrtformanceReportDetail');  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	CALL Sproc_GetCompanyDetailsForReport();  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetLaborComparisonActualvsEstimatedReportDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetLaborComparisonActualvsEstimatedReportDetail`(  \n" +
                "IN pAssyID int,  \n" +
                "IN pEmployeeID int  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE tRfqAssyID int;  \n" +
                "select id into tRfqAssyID from rfq_assemblies where partid = pAssyID and isdeleted = 0 and status = 3  \n" +
                "order by quoteSubmitDate desc limit 1;  \n" +
                "if tRfqAssyID is null then  \n" +
                "select id into tRfqAssyID from rfq_assemblies where partid = pAssyID and isdeleted = 0 and status = 2 order by quoteSubmitDate desc limit 1;  \n" +
                "end if;  \n" +
                "		select fun_getAssyNameByID(partID) assembly, partID,  \n" +
                "        (case when mountingTypeID is not null then fun_getMountingTypeNameByID(mountingTypeID) else fun_getAssyNameByID(subAssyID) end) as mountingtype,  \n" +
                "		(case when mountingTypeID is not null then mountingTypeID else subAssyID end) as mountingTypeID,  \n" +
                "		CAST((perAssyPrice + overHeadAssyPrice) AS DECIMAL(12,5)) perAssyPrice ,  \n" +
                "        CAST(((perAssyPrice + overHeadAssyPrice) * requestQty) AS DECIMAL(12,2)) as totalCost,  \n" +
                "        0 costType,requestQty as Qty, subAssyID as sid  \n" +
                "		from rfq_assy_qtywise_bom_laborcosting_detail rbl  \n" +
                "		join rfq_assy_labor_bom_mountingtype_qpa_detail rlm on rlm.id = rfqAssyBOMMountingID  \n" +
                "		join rfq_assy_quantity raq on raq.id = rbl.rfqAssyQtyID and raq.isdeleted = 0  \n" +
                "		where rbl.isdeleted = 0 and partid = pAssyID  \n" +
                "		and rlm.rfqAssyID = tRfqAssyID  \n" +
                "		and rbl.rfqAssyQtyID = (case when (select count(1) from rfq_assy_quantity where rfqAssyID = tRfqAssyID and isDeleted = 0 and requestQty <= (select max(buildQty) from workorder where partID = pAssyID and isDeleted = 0)) > 0  \n" +
                "        then  \n" +
                "			(select id from rfq_assy_quantity where rfqAssyID = tRfqAssyID and isDeleted = 0 and requestQty <= (select max(buildQty) from workorder where partID = pAssyID and isDeleted = 0) order by requestQty desc limit 1)  \n" +
                "		else  \n" +
                "			(select id from rfq_assy_quantity where rfqAssyID = tRfqAssyID and isDeleted = 0 and requestQty >= (select max(buildQty) from workorder where partID = pAssyID and isDeleted = 0) order by requestQty asc limit 1)  \n" +
                "		end)  \n" +
                "		union  \n" +
                "		select fun_getWorkorderNumberByID(woId) assembly, woId,fun_getMountingTypeNameByID(mountingTypeID) as mountingtype,  \n" +
                "		mountingTypeID, sum(CAST(perAssytotalcost AS DECIMAL(12,5))) perAssytotalcostAS, sum(CAST((perAssytotalcost * woQty)AS DECIMAL(12,2))) totalcost,  \n" +
                "        1 costType, woQty as Qty,null as sid  \n" +
                "		from (  \n" +
                "		select wte.woid,wte.woOPID,wte.employeeID, woop.mountingTypeID,  \n" +
                "		wte.burdenRate,wte.paymentMode, (wo.buildQty) woQty,  \n" +
                "		(sum((case when wte.paymentMode = #'Exempt' then  \n" +
                "		'Non-exempt' then  \n" +
                "		((wte.burdenRate) * (((wte.productionTime)/60)/60))  \n" +
                "		else  \n" +
                "		((wte.burdenRate/(52*5*8))* (((wte.productionTime)/60)/60))  \n" +
                "		end))/wo.buildQty) perAssytotalcost,  \n" +
                "		((wte.productionTime)/60)/60 totalhr,  \n" +
                "		wte.productionTime,  \n" +
                "		wte.totalTime,  \n" +
                "		wte.woTransID,wt.issueQty,wtp.totalQty,wtp.passQty,wtp.reprocessQty,wtp.observedQty,wtp.reworkQty,wo.woID as parentWO  \n" +
                "		from workorder_trans_empinout wte  \n" +
                "		left join workorder wo on wo.woid = wte.woid and wo.isDeleted = 0  \n" +
                "		left join workorder_operation woop on woop.woopid = wte.woopid and woop.isDeleted = 0  \n" +
                "		join workorder_trans wt on wt.woTransID =  wte.woTransID and wt.isDeleted = 0  \n" +
                "		join workorder_trans_production wtp on wtp.woTransID = wt.woTransID and wtp.isDeleted = 0  \n" +
                "		where wo.partID = pAssyID  \n" +
                "		group by wte.woid,wte.employeeid,#wte.woopid  \n" +
                "		woop.mountingTypeID  \n" +
                "		union  \n" +
                "		select wte.woid,wte.woOPID,wte.employeeID, woop.mountingTypeID,  \n" +
                "		wte.burdenRate,wte.paymentMode, ((select buildQty from workorder where woid = wamd.parentWOID)*  \n" +
                "		(select qpa from kit_allocation_lineitems_alternatepart kala  \n" +
                "		left join kit_allocation_lineitems kal on kal.id = kala.refKitAllocationLineItemId and kal.isdeleted = 0  \n" +
                "		left join workorder woi on woi.partID = kala.partID  \n" +
                "		where kala.mfgPNID = wo.partID and  \n" +
                "		kala.refSalesOrderDetID in (select salesOrderDetailID from workorder_salesorder_details where woid = wamd.parentWOID and isdeleted = 0)  \n" +
                "		and kala.isDeleted = 0)) woQty,  \n" +
                "		(sum((case when wte.paymentMode = #'Exempt' then  \n" +
                "		'Non-exempt' then  \n" +
                "		(((wte.burdenRate) * (((wte.productionTime)/60)/60) ))  \n" +
                "		else  \n" +
                "		((wte.burdenRate/(52*5*8))* (((wte.productionTime)/60)/60))  \n" +
                "		end)))perAssytotalcost,  \n" +
                "		((wte.productionTime)/60)/60 totalhr,  \n" +
                "		wte.productionTime,  \n" +
                "		wte.totalTime,  \n" +
                "		wte.woTransID,wt.issueQty,wtp.totalQty,wtp.passQty,wtp.reprocessQty,wtp.observedQty,wtp.reworkQty,wo.woID as parentWO  \n" +
                "		from workorder_trans_empinout wte  \n" +
                "		left join workorder wo on wo.woid = wte.woid and wo.isDeleted = 0  \n" +
                "		left join workorder_operation woop on woop.woopid = wte.woopid and woop.isDeleted = 0  \n" +
                "		join workorder_trans wt on wt.woTransID =  wte.woTransID and wt.isDeleted = 0  \n" +
                "		join workorder_trans_production wtp on wtp.woTransID = wt.woTransID and wtp.isDeleted = 0  \n" +
                "		left join workorder_main_assembly_mapping_details wamd on wamd.refWOID = wo.woid and wamd.isDeleted = 0  \n" +
                "		where wamd.parentWOID in (select woid from workorder where partid = pAssyID and isdeleted = 0)  \n" +
                "		group by wte.woid,wte.employeeid,#wte.woopid  \n" +
                "		woop.mountingTypeID  \n" +
                "		)a  \n" +
                "        group by a.mountingTypeID,a.woid;  \n" +
                "  \n" +
                "	CALL Sproc_GetCompanyDetailsForReport();  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetObsoletePartDetailReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetObsoletePartDetailReport`(  \n" +
                "	IN pCustomerID text,  \n" +
                "    IN pWhereClause TEXT,  \n" +
                "    IN pWithAlternateParts TINYINT,  \n" +
                "    In pAssyId text  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE SQLStatement TEXT;  \n" +
                "if pAssyId is null or pAssyId =\"\"  then  \n" +
                "	set @assyIdCondition = \"1 = 1\";  \n" +
                "else  \n" +
                "	set @assyIdCondition = concat(\" id in (\",pAssyId,\")\");  \n" +
                "end if;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "		SET SQLStatement  = CONCAT(\"  \n" +
                "		Create temporary table if not exists Results as  \n" +
                "		SELECT * FROM  \n" +
                "	(SELECT * FROM  \n" +
                "		(  \n" +
                "			 SELECT id , (select mfgName from mfgcodemst where id = mfgCodeId) Customer, mfgcodeID as customerID ,mfgPN as AssyPN,rev as AssyRev,RoHSStatusID FROM component  \n" +
                "			 WHERE \", @assyIdCondition,\" and category = 3 AND isdeleted = 0 and  \n" +
                "			 partStatus IN ( SELECT id FROM component_partstatusmst WHERE `name`='Active')  \n" +
                "		 ) a,  \n" +
                "		 (  \n" +
                "			 SELECT a.id as lineitemid,b.id as rfqalternatePartID,a.partID, trim(a.Lineid)+0 Lineid, a.CustPN CPN,a.CustomerRev CPNRev,a.QPA, (select mfgName from mfgcodemst where id = b.mfgCodeID) mfgName,  \n" +
                "			 b.mfgCode,b.mfgCodeID,b.MFgPN,b.mfgPNId,c.eolDate EOLDate,c.ltbdate LTBDate,  \n" +
                "			 (SELECT `name` FROM component_partstatusmst WHERE id=c.partStatus)PartStatus , c.rohsgroupID,  \n" +
                "			 c.price as TentativePrice, fun_getRoHSIconByPartID(b.mfgPNId) rohsImage,  \n" +
                "			 c.updatedAt as modifiedAt  \n" +
                "			 FROM rfq_lineitems a, rfq_lineitems_alternatepart b ,component c  \n" +
                "			 WHERE a.id = b.rfqlineitemsId AND b.mfgpnid =c.id AND a.isdeleted =0 AND b.isdeleted = 0  \n" +
                "             and not exists (select 1 from component_partstatusmst cp where cp.id = c.partStatus and cp.name='TBD')  \n" +
                "			 and (case when \",pWithAlternateParts,\" = 1 then  1=1 else ( exists (SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`!='Active' and deletedAT IS NULL  and id = c.partStatus))  \n" +
                "					end)  \n" +
                "			 AND a.partid IN  \n" +
                "			 (  \n" +
                "				SELECT id FROM component c WHERE c.category = 3 AND c.deletedAT IS NULL  \n" +
                "				AND exists  \n" +
                "				(  \n" +
                "					SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`='Active' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "				)  \n" +
                "			 )  \n" +
                "			 AND EXISTS  \n" +
                "			 (  \n" +
                "				SELECT rfqlineitemsid FROM rfq_lineitems_alternatepart dp  \n" +
                "				WHERE dp.rfqlineitemsid = a.id and dp.deletedAT IS NULL  \n" +
                "				AND EXISTS  \n" +
                "				(  \n" +
                "					SELECT 1 FROM component c WHERE c.id = dp.mfgPnID and c.deletedAT IS NULL AND exists  \n" +
                "					(  \n" +
                "						SELECT 1 FROM component_partstatusmst  \n" +
                "						WHERE `name` != 'Active' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "					)  \n" +
                "				)  \n" +
                "			  )  \n" +
                "		 ) b  \n" +
                "         WHERE a.id =b.partID  \n" +
                "         )t  \n" +
                "  \n" +
                "            where 1=1 \");  \n" +
                "		IF pCustomerID != '' THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(SQLStatement,' and customerID in (',pCustomerID,')');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = SQLStatement;  \n" +
                "		END IF;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	IF(pWhereClause != '') THEN  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from Results  where ', pWhereClause);  \n" +
                "	else  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from Results');  \n" +
                "	end if;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	CALL Sproc_GetCompanyDetailsForReport();  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetObsoletePartDetailForCompanyReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetObsoletePartDetailForCompanyReport`(  \n" +
                "	IN pCustomerID text,  \n" +
                "    IN pWhereClause TEXT,  \n" +
                "    IN pWithAlternateParts TINYINT,  \n" +
                "    IN pFromDate DATE,  \n" +
                "    IN pToDate DATE  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE SQLStatement TEXT;  \n" +
                "		IF(pFromDate IS NULL OR pToDate IS NULL) THEN  \n" +
                "			SET @dateRangeStatement = ' 1=1 ';  \n" +
                "		ELSe  \n" +
                "            SET @dateRangeStatement = concat(\" c.obsoletedate between '\",pFromDate,\"' and '\",pToDate,\"' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS ObsoletePartsForCompany;  \n" +
                "		SET SQLStatement  = CONCAT(\"  \n" +
                "		Create temporary table if not exists ObsoletePartsForCompany as  \n" +
                "		SELECT * FROM  \n" +
                "		 (  \n" +
                "			 SELECT id, (select mfgName from mfgcodemst where id = mfgCodeId) Customer, mfgcodeID as customerID ,mfgPN as AssyPN,rev as AssyRev,RoHSStatusID FROM component  \n" +
                "			 WHERE category = 3 AND deletedAT IS NULL and  \n" +
                "			 partStatus IN ( SELECT id FROM component_partstatusmst WHERE `name`='Active')  \n" +
                "		 ) a,  \n" +
                "		 (  \n" +
                "			 SELECT a.partid, trim(a.Lineid)+0 Lineid, a.CustPN CPN,a.CustomerRev CPNRev,a.QPA, (select mfgName from mfgcodemst where id = b.mfgCodeID) mfgName,  \n" +
                "			 b.mfgCode,b.mfgCodeID,b.MFgPN,b.mfgPNId,c.eolDate EOLDate,c.ltbdate LTBDate,  \n" +
                "			 (SELECT `name` FROM component_partstatusmst WHERE id=c.partStatus)PartStatus ,  \n" +
                "			 c.price as TentativePrice, (select mfgName from mfgcodemst where id = (select mfgCodeID from component where id = ( SELECT componentID FROM component_alternatepn WHERE refComponentID = b.mfgPNid and isDeleted = 0 order by componentID asc LIMIT 1))) alternatePartMFG,  \n" +
                "			 (select mfgPN from component where id = (SELECT componentID FROM component_alternatepn WHERE refComponentID = b.mfgPNid and isDeleted = 0 order by componentID asc  LIMIT 1)) alternatePart,  \n" +
                "			 c.updatedAt as modifiedAt,  \n" +
                "             c.obsoleteDate  \n" +
                "			 FROM rfq_lineitems a, rfq_lineitems_alternatepart b ,component c  \n" +
                "			 WHERE a.id = b.rfqlineitemsId AND b.mfgpnid =c.id AND a.deletedAt IS NULL AND b.deletedAT IS NULL  \n" +
                "             and not exists (select 1 from component_partstatusmst cp where cp.id = c.partStatus and cp.name='TBD')  \n" +
                "			 and (case when \",pWithAlternateParts,\" = 1 then  1=1 else ( exists (SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`='Obsolete' and deletedAT IS NULL  and id = c.partStatus))  \n" +
                "					end)  \n" +
                "			 AND a.partid IN  \n" +
                "			 (  \n" +
                "				SELECT id FROM component c WHERE c.category = 3 AND c.deletedAT IS NULL  \n" +
                "				AND exists  \n" +
                "				(  \n" +
                "					SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`='Active' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "				)  \n" +
                "			 )  \n" +
                "			 AND EXISTS  \n" +
                "			 (  \n" +
                "				SELECT rfqlineitemsid FROM rfq_lineitems_alternatepart dp  \n" +
                "				WHERE dp.rfqlineitemsid = a.id and dp.deletedAT IS NULL  \n" +
                "				AND EXISTS  \n" +
                "				(  \n" +
                "					SELECT 1 FROM component c WHERE c.id = dp.mfgPnID and c.deletedAT IS NULL AND exists  \n" +
                "					(  \n" +
                "						SELECT 1 FROM component_partstatusmst  \n" +
                "						WHERE `name` = 'Obsolete' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "					)  \n" +
                "                    and \",@dateRangeStatement ,\"  \n" +
                "				)  \n" +
                "			  )  \n" +
                "		 ) b  \n" +
                "		 WHERE a.id =b.partid\");  \n" +
                "		IF pCustomerID != '' THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(SQLStatement,' and customerID in (',pCustomerID,')');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = SQLStatement;  \n" +
                "		END IF;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	IF(pWhereClause != '') THEN  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from ObsoletePartsForCompany  where ', pWhereClause);  \n" +
                "	else  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from ObsoletePartsForCompany');  \n" +
                "	end if;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	CALL Sproc_GetCompanyDetailsForReport();  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetManufacturer`;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturer`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	-- IN pIsMFG TINYINT(1),  \n" +
                "	IN pmfgType VARCHAR(20),  \n" +
                "	IN pisCustOrDisty TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(\"  \n" +
                "       SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,mc.legalName,mc.customerType, (case when  mc.customerType='B'  then 'Broker' when   mc.customerType='E' then 'End Customer'  else '' end) as customerTypeName,  \n" +
                "       (CASE WHEN (mc.isPricingApi = 1 OR mc.systemGenerated = 1) THEN 1 ELSE 0 END) isDisabledDelete, mc.isPricingApi , mc.systemGenerated,fun_getDateCodeFormatById(mc.dateCodeFormatID) dateCodeFormat,  \n" +
                "		fun_getUserNameByEmployeID(mc.salesCommissionTo) salesCommissionTo,  \n" +
                "		mc.isSupplierEnable,  \n" +
                "		mc.externalSupplierOrder,  \n" +
                "		mc.systemID,mc.customerSystemID,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.carrierID) carrierName,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmaCarrierID) rmacarrierName,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmashippingMethodId) rmaShippingName,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.shippingMethodId) ShippingName,  \n" +
                "		mc.carrierAccount,mc.rmaCarrierAccount,case when mc.shippingInsurence =1 then 'Yes' else 'No' end shippingInsuranceName,  \n" +
                "	        case when mc.rmaShippingInsurence =1 then 'Yes' else 'No' end rmashippingInsuranceName,  \n" +
                "	        case when mc.isPricingApi =1 and mc.isSupplierEnable=1 then 'Yes' else 'No' end supplierEnableText,  \n" +
                "	        mc.shippingInsurence, mc.rmaShippingInsurence,  \n" +
                "		fun_getUserNameByID(mc.updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(mc.createdBy) createdby,  \n" +
                "		fun_getRoleByID(mc.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(mc.updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		smm.mappingMfr,  \n" +
                "        cmm.customerMapping,  \n" +
                "       CASE WHEN mc.authorizeType=1 THEN 'Authorized'  \n" +
                "            WHEN mc.authorizeType=2 THEN 'Independent'  \n" +
                "            WHEN mc.authorizeType=3 THEN 'Authorized & Independent'  \n" +
                "            ELSE '' END   authorizeTypeTxt,mc.authorizeType,  \n" +
                "		     wbw.buyBy,wbw.buyDate,wbw.description,wbw.id AS `acquiredID`,  \n" +
                "            wbw.acquired,  \n" +
                "		(SELECT GROUP_CONCAT(CONCAT(alias, '@@@',fun_getMappingManufacturerCount(id),  \n" +
                "        '@@@',fun_getUserNameByID(createdBy),  \n" +
                "        '@@@',fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"')  \n" +
                "        ) SEPARATOR '!!!!')  FROM mfgcodealias  \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist  ,  \n" +
                "		mc.email , mc.website, mc.contact, mc.comments , mc.phExtension,  \n" +
                "		mc.contactCountryCode,mc.faxNumber, mc.faxCountryCode,mc.isActive, mc.isCompany,  \n" +
                "        (CASE WHEN (mc.`isCompany` = 0) THEN 'No'  \n" +
                "				WHEN (mc.`isCompany` = 1) THEN 'Yes' ELSE '' END) AS `isCompanyConvertedValue`,  \n" +
                "		(CASE WHEN (mc.systemGenerated = 0) THEN 'No'  \n" +
                "				WHEN (mc.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,  \n" +
                "		(CASE WHEN (mc.`isActive` = 0) THEN 'Inactive'  \n" +
                "				WHEN (mc.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`  \n" +
                "		 ,gc.gencCategoryName,  \n" +
                "		 CASE WHEN mc.isCustOrDisty = 1 THEN 'Both'  \n" +
                "			WHEN mc.isCustOrDisty = 0 OR mc.isCustOrDisty IS NULL THEN 'Manufacturer Only'  \n" +
                "		END AS isCustOrDistyText,  \n" +
                "        mc.displayOrder,  \n" +
                "        mc.invoicesRequireManagementApproval,  \n" +
                "        (CASE WHEN (mc.invoicesRequireManagementApproval = 0) THEN 'No'  \n" +
                "				WHEN (mc.invoicesRequireManagementApproval = 1) THEN 'Yes' ELSE '' END) AS `invoicesRequireManagementApprovalValue`,  \n" +
                "		mc.taxID,  \n" +
                "        mc.accountRef,  \n" +
                "        mc.paymentMethodID,  \n" +
                "		pc.gencCategoryName paymentMethodName,  \n" +
                "        pc.systemGenerated systemGeneratedPaymentMethod  ,  \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS ChartOfAccounts,  \n" +
                "		mc.acctId,  \n" +
                "           (select GROUP_CONCAT(fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName, \",vContPersonNameFormat,\"))  \n" +
                "			from contactperson cp where cp.refTransID = mc.id AND cp.refTableName = 'mfgcodemst' AND cp.isPrimary = 1 AND cp.isActive = 1 AND cp.isDeleted = 0 ) personFullNameList  \n" +
                "	FROM mfgcodemst mc  \n" +
                "    LEFT JOIN  \n" +
                "		(SELECT supplierid,GROUP_CONCAT(fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,\", vMfgCodeFormat ,\") SEPARATOR '##$$') mappingmfr  \n" +
                "				FROM supplier_mapping_mst smm inner join mfgcodemst mfg on smm.refmfgcodemstid = mfg.id  where  smm.isCustMapping=0 and smm.isDeleted= 0  \n" +
                "		group by supplierid)smm on smm.supplierid=mc.id  \n" +
                "	LEFT JOIN  \n" +
                "		(SELECT supplierid,GROUP_CONCAT(fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,\", vMfgCodeFormat ,\") SEPARATOR '##$$') customerMapping  \n" +
                "				FROM supplier_mapping_mst smm inner join mfgcodemst mfg on smm.refmfgcodemstid = mfg.id  where  smm.isCustMapping=1 and smm.isDeleted= 0  \n" +
                "			group by supplierid) cmm on cmm.supplierid=mc.id  \n" +
                "    LEFT JOIN acct_acctmst aam ON aam.acct_id = mc.acctId AND aam.isDeleted=0  \n" +
                "    LEFT JOIN genericcategory gc ON gc.gencCategoryID = mc.paymentTermsID AND gc.isDeleted = 0  \n" +
                "    LEFT JOIN genericcategory pc ON pc.gencCategoryID = mc.paymentMethodID AND pc.isDeleted = 0  \n" +
                "	LEFT JOIN (SELECT wbwi.buyBy,wbwi.buyDate,wbwi.description,wbwi.id , wbwi.buyTo ,  \n" +
                "				CONCAT('(', mci.mfgcode,')' , ' ' ,mci.mfgName ) AS `acquired`  \n" +
                "			FROM  who_bought_who wbwi  \n" +
                "            JOIN mfgcodemst mci ON wbwi.buyBy = mci.id  \n" +
                "            AND wbwi.isDeleted = 0) wbw  \n" +
                "			ON wbw.buyTo = mc.id  \n" +
                "	WHERE mc.isdeleted = 0  \n" +
                "	AND mc.mfgType = '\", pmfgType , \"' \");  \n" +
                "  \n" +
                "	IF(pisCustOrDisty IS NOT NULL OR pisCustOrDisty != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(@temp_Sproc_RetriveWhereUsedComponents,\" and mc.isCustOrDisty = \",pisCustOrDisty);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" ,\"displayOrder IS NULL, displayOrder ASC ,mfgName ASC\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetriveWhereUsedComponents,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveWhereUsedComponents,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	 PREPARE query1 FROM @SQLStatement2;  \n" +
                "	 EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetMfgCodeDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetMfgCodeDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    IN pIsCustOrDisty BIT,  \n" +
                "    IN pmfgType NVARCHAR(10),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "     IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE IFNULL(isDeleted,0) = 0 AND  \n" +
                "			isCustOrDisty = IFNULL(pIsCustOrDisty,isCustOrDisty)  \n" +
                "			AND mfgType = IFNULL(pmfgType, mfgType);  \n" +
                "	ELSE  \n" +
                "		SELECT  id,mfgCode,mfgName,legalName,contact,faxNumber,isActive,mfgType,isCustOrDisty  ,  \n" +
                "            fun_getUserNameByEmployeID(salesCommissionTo) salesCommissionTo,  \n" +
                "            fun_getFOBById(freeOnBoardId) freeOnBoardMst ,  \n" +
                "			(SELECT gencCategoryName FROM genericcategory WHERE gencCategoryID = paymentTermsID) Terms,  \n" +
                "            (select GROUP_CONCAT(fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName, vContPersonNameFormat))  \n" +
                "				from contactperson cp where cp.refTransID = id AND cp.refTableName = 'mfgcodemst' AND cp.isPrimary = 1 AND cp.isActive = 1 AND cp.isDeleted = 0 ) contPersonList,  \n" +
                "			isDeleted  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE  id = IFNULL(pId,id) AND  \n" +
                "			isCustOrDisty = IFNULL(pIsCustOrDisty,isCustOrDisty)  \n" +
                "			AND mfgType = IFNULL(pmfgType, mfgType) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_Uti_AddExistingPrimaryContactDet`;  \n" +
                "CREATE PROCEDURE `Sproc_Uti_AddExistingPrimaryContactDet`(  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vCurrUTCDateTime DATETIME;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE totCustContPerson INT DEFAULT 0;  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	  BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() INTO vCurrUTCDateTime;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_AddContactList ;  \n" +
                "	CREATE TEMPORARY TABLE temp_AddContactList AS  \n" +
                "	SELECT mfg.id `refTransID` , 'mfgcodemst' `refTableName` ,  \n" +
                "		SUBSTRING_INDEX(SUBSTRING_INDEX(mfg.primaryContactName, ' ', 1), ' ', -1) `firstName`,  \n" +
                "		IF(LENGTH(primaryContactName) - LENGTH(REPLACE(mfg.primaryContactName, ' ', ''))>1,  SUBSTRING_INDEX(SUBSTRING_INDEX(mfg.primaryContactName, ' ', 2), ' ', -1) ,NULL) `middleName` ,  \n" +
                "		SUBSTRING_INDEX(SUBSTRING_INDEX(mfg.primaryContactName, ' ', 3), ' ', -1) `lastName` ,  \n" +
                "		1 `createdBy`, vCurrUTCDateTime `createdAt`, 1 `createByRoleId` ,  \n" +
                "		1 `updatedBy`, vCurrUTCDateTime `updatedAt`, 1 `updateByRoleId`  \n" +
                "	FROM `mfgcodemst` mfg  \n" +
                "	WHERE mfg.isDeleted = 0  \n" +
                "	AND mfg.primaryContactName IS NOT NULL  \n" +
                "	;  \n" +
                "  \n" +
                "    # Remove Duplicate Entry.  \n" +
                "	Delete tt from temp_AddContactList tt  \n" +
                "			LEFT JOIN contactperson Cp ON ifnull(cp.firstName,'') = ifnull(tt.firstName,'') AND ifnull(cp.middleName, '') = ifnull(tt.middleName,'') ANd ifnull(cp.lastName,'') = ifnull(tt.lastName,'') and cp.isDeleted = 0  \n" +
                "			where cp.personId is not null OR tt.firstName is null or tt.firstName = '';  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO totCustContPerson  \n" +
                "	FROM temp_AddContactList ;  \n" +
                "  \n" +
                "	WHILE i < totCustContPerson DO  \n" +
                "			INSERT INTO `contactperson` (`refTransID`,`refTableName`,`firstName`,`middleName`,`lastName`,  \n" +
                "				`createdBy`,`createdAt`,`createByRoleId`,  \n" +
                "				`updatedBy`,`updatedAt`,`updateByRoleId`)  \n" +
                "			SELECT  `refTransID` , `refTableName` ,  `firstName`, `middleName` , `lastName` ,  \n" +
                "				 `createdBy` ,  `createdAt`, `createByRoleId` ,  \n" +
                "				 `updatedBy` ,  `updatedAt`, `updateByRoleId`  \n" +
                "			FROM temp_AddContactList  \n" +
                "			LIMIT i,1;  \n" +
                "  \n" +
                "		SET i = i + 1;  \n" +
                "	END WHILE ;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_AddContactList ;  \n" +
                "  \n" +
                "	COMMIT;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop Procedure if exists `Sproc_checkDelete_contactperson`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_contactperson`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempContactperson;  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempContactperson as  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"contactperson\" else \"\" end as msg FROM employee_contactperson WHERE contactPersonId IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_supplier_rma\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"R\" AND (rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_debit_memo\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"D\" AND billToContactPersonID IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust_refund\" else \"\" end as msg FROM packingslip_invoice_payment  WHERE (billToContactPersonID IN (',IDs,') OR payToContactPersonID IN (',IDs,')) AND refPaymentMode = \"CR\" AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"P\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_invoice\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"I\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_creditmemo\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"C\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE  (supplierContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_line_release_det WHERE shippingContactPersonID IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0 AND (custBillingContactPersonID IN (',IDs,') OR custShippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR contactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0 AND shippingContactPersonID IN (',IDs,') LIMIT 1)  \n" +
                "		');  \n" +
                "/*	  (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive\" else \"\" end as msg FROM packing_slip_material_receive WHERE isDeleted = 0 AND (billToConactPerson IN (',IDs,')  \n" +
                "			OR shipToContactPersonID IN (',IDs,') OR rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted = 0 AND (payToContactPersonID IN (',IDs,') OR billToContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE isDeleted = 0 AND (custBillingConactPersonID IN (',IDs,') OR custShippingConactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "  */  \n" +
                "  \n" +
                "  	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "  \n" +
                "    IF(countList=FALSE) THEN  \n" +
                "		IF(SELECT SUM(t.cnt) FROM tempContactperson t)=0 THEN  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempSetIsDefaultContactperson AS  \n" +
                "				SELECT cp.refTransID,cp.refTableName FROM contactperson cp  WHERE FIND_IN_SET(cp.personId,IDs) AND cp.isDeleted = 0  group by cp.refTransID,cp.refTableName;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update contactperson set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where personId in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "            # If Default Contact person is Deleted then Set new Default Contact Person.  \n" +
                "            IF(EXISTS (SELECT 1 FROM tempSetIsDefaultContactperson)) THEN  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempPersonId AS (SELECT MIN(cp.personId) personId, count(cp.personId) activePersonCnt FROM contactperson cp  \n" +
                "						WHERE EXISTS (  \n" +
                "							SELECT 1 FROM tempSetIsDefaultContactperson tcp WHERE tcp.refTransID = cp.refTransID AND tcp.refTableName = cp.refTableName  \n" +
                "							) AND cp.isDeleted = 0 AND cp.isActive = 1 GROUP BY cp.refTransID,cp.refTableName);  \n" +
                "				UPDATE contactperson SET isDefault =1 WHERE personId IN  \n" +
                "					(SELECT personId FROM tempPersonId where activePersonCnt = 1);  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempPersonId;  \n" +
                "			END IF;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempSetIsDefaultContactperson;  \n" +
                "  \n" +
                "			SELECT * FROM tempContactperson WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempContactperson t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "		FROM tempContactperson t1  \n" +
                "		INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "			WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "			ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempContactperson;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_Uti_removeDuplicatePrimaryContactDet`;  \n" +
                "CREATE PROCEDURE `Sproc_Uti_removeDuplicatePrimaryContactDet`(  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	  BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE if exists tempDupPersonId;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE if not exists tempDupPersonId as  \n" +
                "		select a.dupPersonId as dupPersonIdList, a.maxPersonId as mainPersonId from (select group_concat(personId) dupPersonId, max(personId) maxPersonId from contactperson where isDeleted = 0  \n" +
                "			Group by refTableName, refTransID, firstName, middleName, lastName) a where dupPersonId like '%,%';  \n" +
                "		# [-S] employee_contactperson  \n" +
                "		SELECT count(1) FROM employee_contactperson tbl  \n" +
                "				INNER JOIN tempDupPersonId t on (FIND_IN_SET(tbl.contactPersonId ,t.dupPersonIdList) and tbl.contactPersonId <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update employee_contactperson tbl  \n" +
                "				INNER JOIN tempDupPersonId t on (FIND_IN_SET(tbl.contactPersonId ,t.dupPersonIdList) and tbl.contactPersonId <> t.mainPersonId)  \n" +
                "				SET tbl.contactPersonId = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		# [-E] employee_contactperson  \n" +
                "  \n" +
                "		# [-S] salesordermst  \n" +
                "		SELECT count(1) FROM salesordermst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update salesordermst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				   (FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.billingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		SELECT count(1) FROM salesordermst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.contactPersonID ,t.dupPersonIdList) AND tbl.contactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update salesordermst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				 (FIND_IN_SET(tbl.contactPersonID ,t.dupPersonIdList) AND tbl.contactPersonID <> t.mainPersonId)  \n" +
                "				 SET tbl.contactPersonId = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		SELECT count(1) FROM salesordermst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				(FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update salesordermst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.shippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		SELECT count(1) FROM salesordermst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				   (FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update salesordermst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.intermediateContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		# [-E] salesordermst  \n" +
                "  \n" +
                "		# [-S] packing_slip_material_receive  \n" +
                "		SELECT count(1) FROM packing_slip_material_receive tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.rmaShippingContactPersonID ,t.dupPersonIdList) AND tbl.rmaShippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.receiptType = \"R\" AND tbl.isDeleted = 0;  \n" +
                "		Update packing_slip_material_receive tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.rmaShippingContactPersonID ,t.dupPersonIdList) AND tbl.rmaShippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.rmaShippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.receiptType = \"R\" AND tbl.isDeleted = 0;  \n" +
                "		SELECT count(1) FROM packing_slip_material_receive tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.rmaMarkForContactPersonID ,t.dupPersonIdList) AND tbl.rmaMarkForContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.receiptType = \"R\" AND tbl.isDeleted = 0;  \n" +
                "		Update packing_slip_material_receive tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				 (FIND_IN_SET(tbl.rmaMarkForContactPersonID ,t.dupPersonIdList) AND tbl.rmaMarkForContactPersonID <> t.mainPersonId)  \n" +
                "				 SET tbl.rmaMarkForContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.receiptType = \"R\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM packing_slip_material_receive tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.billToContactPersonID ,t.dupPersonIdList) AND tbl.billToContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE receiptType = \"D\" AND tbl.isDeleted = 0;  \n" +
                "		Update packing_slip_material_receive tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.billToContactPersonID ,t.dupPersonIdList) AND tbl.billToContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.billToContactPersonID = t.mainPersonId  \n" +
                "			WHERE receiptType = \"D\" AND tbl.isDeleted = 0;  \n" +
                "		# [-E] packing_slip_material_receive  \n" +
                "  \n" +
                "		# [-S] packingslip_invoice_payment  \n" +
                "		SELECT count(1) FROM packingslip_invoice_payment tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.billToContactPersonID ,t.dupPersonIdList) AND tbl.billToContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE refPaymentMode = \"CR\" AND tbl.isDeleted = 0;  \n" +
                "		Update packingslip_invoice_payment tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.billToContactPersonID ,t.dupPersonIdList) AND tbl.billToContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.billToContactPersonID = t.mainPersonId  \n" +
                "			WHERE refPaymentMode = \"CR\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		  SELECT count(1) FROM packingslip_invoice_payment tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.payToContactPersonID ,t.dupPersonIdList) AND tbl.payToContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE refPaymentMode = \"CR\" AND tbl.isDeleted = 0;  \n" +
                "		Update packingslip_invoice_payment tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.payToContactPersonID ,t.dupPersonIdList) AND tbl.payToContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.payToContactPersonID = t.mainPersonId  \n" +
                "			WHERE refPaymentMode = \"CR\" AND tbl.isDeleted = 0;  \n" +
                "		# [-E] packingslip_invoice_payment  \n" +
                "  \n" +
                "		# [-S] customer_packingslip  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"P\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.billingContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"P\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"P\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.shippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"P\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"P\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.intermediateContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"P\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"I\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.billingContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"I\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"I\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.shippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"I\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"I\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.intermediateContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"I\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"C\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.billingContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"C\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"C\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.shippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"C\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"C\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.intermediateContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"C\" AND tbl.isDeleted = 0;  \n" +
                "		# [-E] customer_packingslip  \n" +
                "  \n" +
                "		# [-S] purchase_order_mst  \n" +
                "		SELECT count(1) FROM purchase_order_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.supplierContactPersonID ,t.dupPersonIdList) AND tbl.supplierContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update purchase_order_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.supplierContactPersonID ,t.dupPersonIdList) AND tbl.supplierContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.supplierContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		 SELECT count(1) FROM purchase_order_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update purchase_order_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.shippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		 SELECT count(1) FROM purchase_order_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update purchase_order_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.supplierContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		# [-E] purchase_order_mst  \n" +
                "  \n" +
                "		# [-S] purchase_order_line_release_det  \n" +
                "		SELECT count(1) FROM purchase_order_line_release_det tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update purchase_order_line_release_det tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.shippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		# [-E] purchase_order_line_release_det  \n" +
                "  \n" +
                "		# [-S] supplier_quote_mst  \n" +
                "		SELECT count(1) FROM supplier_quote_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update supplier_quote_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.billingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		 SELECT count(1) FROM supplier_quote_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update supplier_quote_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.shippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		# [-E] supplier_quote_mst  \n" +
                "  \n" +
                "		# [-S] rfq_assemblies_quotation_submitted  \n" +
                "		SELECT count(1) FROM rfq_assemblies_quotation_submitted tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.custBillingContactPersonID ,t.dupPersonIdList) AND tbl.custBillingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update rfq_assemblies_quotation_submitted tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.custBillingContactPersonID ,t.dupPersonIdList) AND tbl.custBillingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.custBillingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM rfq_assemblies_quotation_submitted tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.custShippingContactPersonID ,t.dupPersonIdList) AND tbl.custShippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update rfq_assemblies_quotation_submitted tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.custShippingContactPersonID ,t.dupPersonIdList) AND tbl.custShippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.custShippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		# [-E] rfq_assemblies_quotation_submitted  \n" +
                "  \n" +
                "		# [-S] salesshippingmst  \n" +
                "		SELECT count(1) FROM salesshippingmst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update salesshippingmst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.shippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		# [-E] salesshippingmst  \n" +
                "  \n" +
                "		# [-E] contactperson  \n" +
                "		SELECT count(1) FROM contactperson tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				   (FIND_IN_SET(tbl.personId ,t.dupPersonIdList) AND tbl.personId <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update contactperson tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				   (FIND_IN_SET(tbl.personId ,t.dupPersonIdList) AND tbl.personId <> t.mainPersonId)  \n" +
                "				SET tbl.isDeleted = 1, tbl.deletedBy = '1', tbl.deletedAt = fun_DatetimetoUTCDateTime(), tbl.deleteByRoleId = 1  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		# [-E] contactperson  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE if exists tempDupPersonId;  \n" +
                "  \n" +
                "	COMMIT;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerInvoiceDetails;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(  \n" +
                "IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pFilterStatus LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pPoNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearchPO TINYINT,  \n" +
                "	IN pMfgCodeIds LONGTEXT ,  \n" +
                "	IN pPaymentTermsIds LONGTEXT ,  \n" +
                "	IN pPartId VARCHAR(5000) ,  \n" +
                "	IN pTransType VARCHAR(5) ,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
                "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
                "	IN pZeroAmountFilter TINYINT,  \n" +
                "	IN pCreditMemoRefundStatusFilter VARCHAR(100)      ,  \n" +
                "	IN pMarkedForRefund TINYINT  ,  \n" +
                "    IN pDateType VARCHAR(10),  \n" +
                "    IN pSearchComments VARCHAR(200)  \n" +
                "	-- IN pChequeNumber  VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_empFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET v_appliedCMPDJoin = '';  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN  \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
                "	ELSE  \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount ,  \n" +
                "						NULL as totRefundIssuedAgainstCreditMemo , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"  \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,  \n" +
                "        cp.invoiceNumber,cp.invoiceDate, cp.revision,  \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
                "        cp.soNumber,cp.soDate,  \n" +
                "		cp.sorevision,  \n" +
                "        cp.refSalesOrderID,  \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,  \n" +
                "        cp.refCustInvoiceID,  \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "		 cp.status,  \n" +
                "         cp.subStatus,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
                "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
                "			ELSE '' END) AS creditAppliedStatus ,  \n" +
                "		  cp.paymentStatus,  \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
                "		  ifnull(cp.totalAmount,0) totalAmount,  \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,  \n" +
                "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,  \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,  \n" +
                "		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\", vMfgCodeFormat,\") as customerName,  \n" +
                "		 m.mfgcode as customerCode,  \n" +
                "         cp.customerID,  \n" +
                "         cp.createdBy as createdById,  \n" +
                "		\",v_receivedAmtSF,\"  \n" +
                "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,  \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,  \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,  \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,  \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,  \n" +
                "         cp.salesCommissionTo,  \n" +
                "         fun_GetEmployeeFormattedName(salecomm.firstName,salecomm.middleName,salecomm.lastName,salecomm.initialName,\",v_empFormat,\") salesCommissionToName,  \n" +
                "         cp.termsDays termDays,  \n" +
                "         cp.freeOnBoardId,  \n" +
                "         cp.freeOnBoardName,  \n" +
                "         cp.isLocked,  \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "         cp.shippingMethodId, fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
                "         packingSlip.id packingSlipId,  \n" +
                "         (select group_concat(paymentNumber)  \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,  \n" +
                "		 (select COUNT(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) cpTrackNumberCount,  \n" +
                "         cp.rmaNumber , cp.systemId,  \n" +
                "        fun_getAddressbyID(cp.intermediateShipmentId) intermediateAddress,  \n" +
                "		fun_getAddressbyID(cp.shipToId) shippingAddress,  \n" +
                "		fun_getAddressbyID(cp.billToId) billingAddress,  \n" +
                "        fun_getFormattedContactPerson(billCP.firstName,billCP.middleName,billCP.lastName,billCP.division,billCP.email, fun_getPrimaryPhoneFromJsonList(billCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(billCP.phoneNumber)) billToContactPerson, fun_getFormattedContactPerson(shipCP.firstName,shipCP.middleName,shipCP.lastName,shipCP.division,shipCP.email,fun_getPrimaryPhoneFromJsonList(shipCP.phoneNumber) , fun_getPrimaryPhExtensionFromJsonList(shipCP.phoneNumber)) shipToToContactPerson,  \n" +
                "		fun_getFormattedContactPerson(interCP.firstName,interCP.middleName,interCP.lastName,interCP.division,interCP.email, fun_getPrimaryPhoneFromJsonList(interCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(interCP.phoneNumber)) markToToContactPerson,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
                "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,  \n" +
                "         (SELECT `paymentDate` FROM packingslip_invoice_payment_det pipd  \n" +
                "					JOIN packingslip_invoice_payment pip ON pipd.`refPayementid` = pip.id  \n" +
                "		WHERE pipd.`refCustPackingslipInvoiceID` = cp.id AND pip.refPaymentMode = 'R' AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "		AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0 ORDER BY pipd.id DESC LIMIT 1) AS lastRcvdPaymentDate ,  \n" +
                "		fun_getGenericCategoryCodeNameByID(cp.carrierID) carrierName,  \n" +
                "        cp.carrierID , cp.carrierAccountNumber  \n" +
                "	 FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID  \n" +
                "        LEFT JOIN contactperson billCP ON billCP.personId = cp.billingContactPersonID and billCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson shipCP ON shipCP.personId = cp.shippingContactPersonID and shipCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson interCP ON interCP.personId = cp.intermediateContactPersonID and interCP.isDeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
                "        LEFT JOIN employees salecomm ON salecomm.id = cp.salesCommissionTo and salecomm.isDeleted = 0  \n" +
                "		\" , v_appliedCMPDJoin ,\"  \n" +
                "	WHERE  cp.isDeleted=0  \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.termsId in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPartId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN  \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');  \n" +
                "	# END IF;  \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) END) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) END) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
                "		IF pIsExactSearchPO = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
                "                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
                "                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF pSearchComments IS NOT NULL AND pSearchComments != '' THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND (c.packingSlipComment like '%\", pSearchComments, \"%'  \n" +
                "									OR 	c.headerComment like '%\", pSearchComments, \"%')\" );  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
                "	/*IF pFromDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pToDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  */  \n" +
                "    IF pFromDate IS NOT NULL THEN  \n" +
                "        IF pDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "        ELSEIF pDateType = 'P' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" and c.packingSlipDate >= '\",pFromDate ,\"'\");  \n" +
                "		ELSEIF pDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" and c.poDate >= '\",pFromDate ,\"'\");  \n" +
                "		ELSEIF pDateType = 'SO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" and c.soDate >= '\",pFromDate ,\"'\");  \n" +
                "		ELSEIF pDateType = 'C' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "		ELSEIF pDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" and c.refDebitMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pToDate IS NOT NULL THEN  \n" +
                "		IF pDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "        ELSEIF pDateType = 'P' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" and c.packingSlipDate <= '\",pToDate ,\"'\");  \n" +
                "		ELSEIF pDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" and c.poDate <= '\",pToDate ,\"'\");  \n" +
                "		ELSEIF pDateType = 'SO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" and c.soDate <= '\",pToDate ,\"'\");  \n" +
                "		ELSEIF pDateType = 'C' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
                "		ELSEIF pDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" and c.refDebitMemoDate <= '\",pToDate ,\"'\");  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- filter zero amount invoice  \n" +
                "	IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefund = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "		 round((c.totalAmount),2) totalAmount,  \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,  \n" +
                "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0) + IFNULL(c.totRefundIssuedAgainstCreditMemo,0) ),2)  \n" +
                "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,  \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
                "						else '' end) materialStatus from ( \",  \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	--  select @SQLStatement2	;  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDeatils;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(  \n" +
                "IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  ,  \n" +
                "    IN pDateType VARCHAR(10),  \n" +
                "	IN pSearchComments VARCHAR(200)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE v_empFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname,\", vMfgCodeFormat,\") customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "			mfgmst.mfgCode custCode,  \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "            case when sm.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
                "            sm.isBlanketPO,  \n" +
                "cd.id AS customerslipId,  \n" +
                "case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "  fun_getAddressbyID(cd.intermediateShipmentId) markFor,  \n" +
                "  fun_getAddressbyID(cd.shipToId) shipTo,  \n" +
                "  fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "  fun_getFormattedContactPerson(billCP.firstName,billCP.middleName,billCP.lastName,billCP.division,billCP.email, fun_getPrimaryPhoneFromJsonList(billCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(billCP.phoneNumber)) billToContactPerson,  \n" +
                "  fun_getFormattedContactPerson(shipCP.firstName,shipCP.middleName,shipCP.lastName,shipCP.division,shipCP.email, fun_getPrimaryPhoneFromJsonList(shipCP.phoneNumber),fun_getPrimaryPhExtensionFromJsonList(shipCP.phoneNumber)) shipToToContactPerson,  \n" +
                "  fun_getFormattedContactPerson(interCP.firstName,interCP.middleName,interCP.lastName,interCP.division,interCP.email, fun_getPrimaryPhoneFromJsonList(interCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(interCP.phoneNumber)) markToToContactPerson,  \n" +
                "   fun_GetEmployeeFormattedName(emp.firstName,emp.middleName,emp.lastName,emp.initialName,\",v_empFormat,\") salesCommissionToName,  \n" +
                "   cd.salesCommissionTo,  \n" +
                "     (CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         fun_getUserNameByID(cd.updatedBy) updatedby,  \n" +
                "         fun_getUserNameByID(cd.createdBy) createdby,  \n" +
                "         fun_getRoleByID(cd.createByRoleId) createdbyRole,  \n" +
                "         fun_getRoleByID(cd.updateByRoleId) updatedbyRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdAt,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS lockedAt,  \n" +
                "         cpTrack.cpTrackNumber,  \n" +
                "         ifnull(cpTrack.cpTrackNumberCount,0) cpTrackNumberCount,  \n" +
                "         (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "                        cd.revision ,  \n" +
                "           ifnull(packingdtl.packingSlipCnt,0)  packingSlipCnt,  \n" +
                "           sm.rmaNumber,sm.isRmaPO,  \n" +
                "           (CASE when sm.isRmaPO = 1 then 'YES' when sm.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "           (CASE when sm.isRmaPO = 1 then 'Yes' when sm.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp,  \n" +
                "           fun_getGenericCategoryCodeNameByID(cd.carrierID)  carrierName,  \n" +
                "           cd.carrierID , cd.carrierAccountNumber  \n" +
                "		FROM customer_packingslip cd  \n" +
                "        LEFT JOIN mfgcodemst mfgmst ON mfgmst.id = cd.customerId and mfgmst.isDeleted = 0  \n" +
                "		LEFT JOIN salesordermst sm on sm.id=cd.refSalesOrderID and sm.isdeleted=0  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0  \n" +
                "		LEFT JOIN (  \n" +
                "		SELECT COUNT(cpTrack.trackNumber) cpTrackNumberCount,GROUP_CONCAT(cpTrack.trackNumber SEPARATOR ', ') cpTrackNumber,cpTrack.refCustPackingSlipID FROM customer_packing_slip_track_number cpTrack WHERE  cpTrack.isDeleted = 0 GROUP BY cpTrack.refCustPackingSlipID  \n" +
                "		) cpTrack on cpTrack.refCustPackingSlipID=cd.id  \n" +
                "		left join ( select count(1) packingSlipCnt,packingdtl.refCustPackingSlipID from customer_packingslip_det packingdtl where packingdtl.isDeleted = 0 GRoup by packingdtl.refCustPackingSlipID  \n" +
                "		) packingdtl on packingdtl.refCustPackingSlipID=cd.id  \n" +
                "        LEFT JOIN contactperson billCP ON billCP.personId = cd.billingContactPersonID and billCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson shipCP ON shipCP.personId = cd.shippingContactPersonID and shipCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson interCP ON interCP.personId = cd.intermediateContactPersonID and interCP.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "	 IF (pfilterStatus = 0) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    ELSE  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    END IF;  \n" +
                "  END IF;  \n" +
                "  IF pSearchComments IS NOT NULL AND pSearchComments != '' THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.packingSlipComment like '%\", pSearchComments, \"%'  \n" +
                "									OR 	c.headerComment like '%\", pSearchComments, \"%')\" );  \n" +
                "  END IF;  \n" +
                "  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  \n" +
                " IF pmfgPartID IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails= CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' AND cd.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pmfgPartID , ')) ');  \n" +
                " END IF;  \n" +
                "  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "		padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,'''  or cd.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "        SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "		padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%''  or cd.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "	IF pDateType = 'P' THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "    ELSEIF pDateType = 'PO' THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poDate>=''',pfromDate,''' and cd.poDate<=''',ptoDate,''')');  \n" +
                "    ELSEIF pDateType = 'SO' THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.soDate>=''',pfromDate,''' and cd.soDate<=''',ptoDate,''')');  \n" +
                "    END IF;  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		IF pDateType = 'P' THEN  \n" +
                "			SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "		ELSEIF pDateType = 'PO' THEN  \n" +
                "			SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF pDateType = 'SO' THEN  \n" +
                "			       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.soDate >=''',pfromDate,''')');  \n" +
                "		END IF;  \n" +
                "  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "  		IF pDateType = 'P' THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "		ELSEIF pDateType = 'PO' THEN  \n" +
                "			SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF pDateType = 'SO' THEN  \n" +
                "			       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022 *********************************** */
                /* **************************** Add Script Version -> 25-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5957,'2.00','V1',' US 40746 And User Story 40551: Show Primary contact person in detail tab of customer/supplier page. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5957:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2022  *********************************** */
                "Drop procedure if exists `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "    IN pInvoiceLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_ParentPackingSlipId INT;  \n" +
                "	DECLARE v_InvoiceSlipId INT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                "	SELECT 	*,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "                WHEN a.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		) AS receivedStatusValue,  \n" +
                "		(  \n" +
                "			SELECT COUNT(id)  \n" +
                "			FROM packing_slip_material_receive_det_stock  \n" +
                "			WHERE refPackingSlipId = a.refPackingSlipMaterialRecID  \n" +
                "				AND partId = a.partID  \n" +
                "				AND packagingId = a.packagingID  \n" +
                "				AND binId = a.binID  \n" +
                "				AND isdeleted = 0  \n" +
                "                Limit 1  \n" +
                "		) AS isRMACreated,  \n" +
                "        (  \n" +
                "			CASE  \n" +
                "				WHEN a.TotalUMIDCount = a.orderedQty THEN TRUE  \n" +
                "				WHEN a.TotalUMIDCount <> a.orderedQty THEN  FALSE  \n" +
                "				ELSE False  \n" +
                "			END  \n" +
                "		) AS isPendingUMIDDisable  \n" +
                "	FROM 	(  \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
                "				p.invoicePrice, 				p.disputedPrice,  \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
                "				p.discount,  \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "				p.refCreditDebitInvoiceNo,  \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
                "				cmc.mfgCode,	fun_GetFormattedMfgCode(cmc.mfgCode, cmc.mfgName, vMfgCodeFormat) mfgName,  \n" +
                "                fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode1,  \n" +
                "                fun_GetFormattedMfgCode(scmc.mfgCode, scmc.mfgName, vMfgCodeFormat) supplierCode,  \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							p.receivedStatus  \n" +
                "						ELSE  \n" +
                "							(SELECT receivedStatus  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0 LIMIT 1)  \n" +
                "					END  \n" +
                "				) receivedStatus,  \n" +
                "				p.remark,  \n" +
                "				p.internalRemark,  \n" +
                "				p.comment,  \n" +
                "				p.internalRef,  \n" +
                "				p.purchaseInspectionComment,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
                "							WHERE EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det pslip  \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "											AND 	pslip.id = psmp.lineId  \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "											AND	pslip.isDeleted = 0)  \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS purchaseRequirementCount,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
                "							WHERE 	EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det psmr  \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "										AND	psmr.id = psm.lineId  \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "										AND 	psmr.isDeleted = 0  \n" +
                "									)  \n" +
                "								AND psm.inspectionStatus = 'R'  \n" +
                "								AND psm.isDeleted = 0  \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS rejectedPurchaseRequirementCount,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
                "				p.umidCreatedQty AS TotalUMIDCount,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
                "				ps.refInvoiceIdForMemo,  \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
                "				ps.refInvoiceNumberForMemo,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT `status`  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT refCreditDebitInvoiceNo  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceLineHasMemo,  \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
                "					AND pd.partId = p.partID) commentCount,  \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
                "				p.refPackingSlipIdForRma,  \n" +
                "				p.refPackingSlipDetIdForRMA,  \n" +
                "				p.refInvoiceIdForRma,  \n" +
                "				p.refPackingSlipForRma,  \n" +
                "				p.refInvoiceForRma,  \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.packingSlipNumber/*fun_getPackingSlipNumberById(p.refPackingSlipIdForRma)*/ ELSE p.refPackingSlipForRma END) refPackingSlipNumber,  \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE p.refInvoiceForRma END) refInvoiceNumber,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.mfgCodeID/*fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma)*/ ELSE NULL END) refPackingSlipSupplierId,  \n" +
                "                ps.packingSlipModeStatus,  \n" +
                "                fun_getBinNameByID(psd.binID) refPackingSlipBinName,  \n" +
                "                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty, p.totalLines, p.pendingLines, p.acceptedWithDeviationLines, p.rejectedLines, p.acceptedLines, c.isReceiveBulkItem,  \n" +
                "                p.isLineCustConsigned, p.isNonUMIDStock,  \n" +
                "                CASE WHEN p.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "                CASE WHEN p.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                p.LineCustomerID as lineCustomerID,  \n" +
                "				fun_GetFormattedMfgCode(mc.mfgcode, mc.mfgName, vMfgCodeFormat) customerName,  \n" +
                "                c.isCPN,  \n" +
                "                (  \n" +
                "						CASE 	WHEN p.isZeroValue = 0 THEN  \n" +
                "								'No'  \n" +
                "							WHEN p.isZeroValue = 1 THEN  \n" +
                "								'Yes'  \n" +
                "						END  \n" +
                "					) isZeroValueText,  \n" +
                "                p.isZeroValue  \n" +
                "		FROM		packing_slip_material_receive_det p  \n" +
                "        JOIN 	packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
                "        LEFT JOIN	packing_slip_material_receive ps on ps.id = p.refPackingSlipIdForRma and ps.isDeleted = 0 and ps.receiptType = 'P'  \n" +
                "        LEFT JOIN	packing_slip_material_receive_det psd on psd.id = p.refPackingSlipDetIdForRMA and psd.isDeleted = 0  \n" +
                "		JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
                "        join mfgcodemst cmc ON cmc.id = c.mfgCodeID and cmc.mfgType = 'MFG' and cmc.isDeleted = 0  \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.mfgType = 'DIST'  \n" +
                "        left join mfgcodemst scmc ON scmc.id = sc.mfgCodeID and scmc.mfgType = 'DIST' and scmc.isDeleted = 0  \n" +
                "        LEFT JOIN	mfgcodemst mc  on mc.id = p.LineCustomerID  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
                "					FROM 	packing_slip_material_receive_det ps  \n" +
                "					WHERE 	ps.isDeleted = 0  \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
                "		LEFT JOIN 	(  \n" +
                "					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
                "					FROM 	packing_slip_material_receive_det det  \n" +
                "					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
                "		AND 		p.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
                "	SELECT /*ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID*/  \n" +
                "			psm.partID, psm.refPOLineID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty  \n" +
                "	  FROM packing_slip_material_receive_det psm  \n" +
                "	 INNER JOIN packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
                "	 WHERE EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
                "       AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
                "	   AND ps.receiptType = 'P'  \n" +
                "	   AND psm.isDeleted = 0  \n" +
                "	/*GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID*/  \n" +
                "     GROUP BY 	psm.partID, psm.refPOLineID;  \n" +
                "  \n" +
                "	-- Set received qty detail  \n" +
                "	UPDATE packingSlipResult r, tempReceivedQtyResult q  \n" +
                "	   SET r.totalReceivedQty = q.totalReceivedQty,  \n" +
                "			r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
                "	 WHERE r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
                "											invoiceTotalDue As invoiceTotalDue,  \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
                "										 where b.refPackingslipInvoiceID = c.id  \n" +
                "                                           and a.refPaymentMode = 'P'  \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "END;  \n" +
                "Drop procedure if exists `Sproc_SaveInvoiceAndInvoiceLineDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_SaveInvoiceAndInvoiceLineDetail`(  \n" +
                "	IN pInvoiceDetail JSON,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pSystemId VARCHAR(20),  \n" +
                "	IN pUserId VARCHAR(50),  \n" +
                "	IN pUserRoleId VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountOfInvoiceDetail INT;  \n" +
                "	DECLARE v_CountOfInvoiceLineDetail INT;  \n" +
                "    DECLARE v_CountOfRMA INT;  \n" +
                "	DECLARE v_IdOfInvoice INT;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Detail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Invoice_Detail AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pInvoiceDetail,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				poNumber VARCHAR(50) PATH \"$.poNumber\",  \n" +
                "				poDate DATE PATH \"$.poDate\",  \n" +
                "				mfgCodeID INT PATH \"$.mfgCodeID\",  \n" +
                "				supplierSONumber VARCHAR(50) PATH \"$.supplierSONumber\",  \n" +
                "                soDate DATE PATH \"$.soDate\",  \n" +
                "				packingSlipNumber VARCHAR(50) PATH \"$.packingSlipNumber\",  \n" +
                "				packingSlipDate DATE PATH \"$.packingSlipDate\",  \n" +
                "				invoiceNumber VARCHAR(50) PATH \"$.invoiceNumber\",  \n" +
                "				invoiceDate DATE PATH \"$.invoiceDate\",  \n" +
                "				creditMemoNumber VARCHAR(50) PATH \"$.creditMemoNumber\",  \n" +
                "				creditMemoDate DATE PATH \"$.creditMemoDate\",  \n" +
                "				debitMemoNumber VARCHAR(50) PATH \"$.debitMemoNumber\",  \n" +
                "				debitMemoDate DATE PATH \"$.debitMemoDate\",  \n" +
                "				receiptDate DATE PATH \"$.receiptDate\",  \n" +
                "				receiptType VARCHAR(1) PATH \"$.receiptType\",  \n" +
                "				`status` VARCHAR(5) PATH \"$.status\",  \n" +
                "				applyDate DATE PATH \"$.applyDate\",  \n" +
                "				invoiceTotalDue DECIMAL(18,8) PATH \"$.invoiceTotalDue\",  \n" +
                "				isTariffInvoice TINYINT PATH \"$.isTariffInvoice\",  \n" +
                "				refPackingSlipId INT PATH \"$.refPackingSlipId\",  \n" +
                "				paymentTermsID INT PATH \"$.paymentTermsID\",  \n" +
                "				termsDays INT PATH \"$.termsDays\",  \n" +
                "				creditMemoType VARCHAR(5) PATH \"$.creditMemoType\",  \n" +
                "                invoiceRequireManagementApproval INT PATH \"$.invoiceRequireManagementApproval\",  \n" +
                "                internalRemark  VARCHAR(1000) PATH \"$.internalRemark\",  \n" +
                "                remark  VARCHAR(1000) PATH \"$.remark\",  \n" +
                "                refSupplierCreditMemoNumber  VARCHAR(50) PATH \"$.refSupplierCreditMemoNumber\",  \n" +
                "                refPurchaseOrderID INT PATH \"$.refPurchaseOrderID\",  \n" +
                "                billToAddress VARCHAR(1000) PATH \"$.billToAddress\",  \n" +
                "                billToAddressID INT PATH \"$.billToAddressID\",  \n" +
                "                billToConactPerson VARCHAR(1000) PATH \"$.billToConactPerson\",  \n" +
                "                billToContactPersonID INT PATH \"$.billToContactPersonID\",  \n" +
                "                isZeroValue TINYINT PATH \"$.isZeroValue\"  \n" +
                "			)  \n" +
                "		) AS Invoice_Detail_JT;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Line_Detail;  \n" +
                "		CREATE TEMPORARY TABLE temp_Invoice_Line_Detail  \n" +
                "		(  \n" +
                "			packingSlipSerialNumber VARCHAR(50),  \n" +
                "			nickname VARCHAR(50),  \n" +
                "			partID INT,  \n" +
                "			refSupplierPartId INT,  \n" +
                "			scanLabel VARCHAR(1000),  \n" +
                "			receivedQty DECIMAL(18,8),  \n" +
                "			packingSlipQty DECIMAL(18,8),  \n" +
                "			binID INT,  \n" +
                "			warehouseID INT,  \n" +
                "			parentWarehouseID INT,  \n" +
                "			invoicePrice DECIMAL(18,8),  \n" +
                "			purchasePrice DECIMAL(18,8),  \n" +
                "			disputedPrice DECIMAL(18,8),  \n" +
                "			approveNote VARCHAR(1000),  \n" +
                "			otherCharges INT,  \n" +
                "			`status` VARCHAR(1),  \n" +
                "			extendedPrice DECIMAL(18,8),  \n" +
                "			refCreditDebitInvoiceNo INT,  \n" +
                "			difference DECIMAL(18,8),  \n" +
                "			umidCreated TINYINT,  \n" +
                "			poReleaseNumber VARCHAR(1000),  \n" +
                "			packagingID INT,  \n" +
                "			receivedStatus VARCHAR(2),  \n" +
                "			remark LONGTEXT,  \n" +
                "            isZeroValue tinyint  \n" +
                "		);  \n" +
                "  \n" +
                "		INSERT INTO temp_Invoice_Line_Detail (  \n" +
                "			packingSlipSerialNumber,  \n" +
                "			nickname,  \n" +
                "			partID,  \n" +
                "			refSupplierPartId,  \n" +
                "			scanLabel,  \n" +
                "			receivedQty,  \n" +
                "			packingSlipQty,  \n" +
                "			binID,  \n" +
                "			warehouseID,  \n" +
                "			parentWarehouseID,  \n" +
                "			invoicePrice,  \n" +
                "			disputedPrice,  \n" +
                "			approveNote,  \n" +
                "			otherCharges,  \n" +
                "			`status`,  \n" +
                "			extendedPrice,  \n" +
                "			refCreditDebitInvoiceNo,  \n" +
                "			difference,  \n" +
                "			umidCreated,  \n" +
                "			poReleaseNumber,  \n" +
                "			packagingID,  \n" +
                "			receivedStatus,  \n" +
                "			remark,  \n" +
                "            isZeroValue  \n" +
                "		)  \n" +
                "		SELECT  packingSlipSerialNumber,  \n" +
                "			nickname,  \n" +
                "			partID,  \n" +
                "			refSupplierPartId,  \n" +
                "			scanLabel,  \n" +
                "			receivedQty,  \n" +
                "			packingSlipQty,  \n" +
                "			binID,  \n" +
                "			warehouseID,  \n" +
                "			parentWarehouseID,  \n" +
                "			invoicePrice,  \n" +
                "			disputedPrice,  \n" +
                "			approveNote,  \n" +
                "			otherCharges,  \n" +
                "			`status`,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN (packingSlipQty IS NOT NULL AND invoicePrice IS NOT NULL) THEN  \n" +
                "						(packingSlipQty * invoicePrice)  \n" +
                "					ELSE  \n" +
                "						NULL  \n" +
                "				END  \n" +
                "			),  \n" +
                "			refCreditDebitInvoiceNo,  \n" +
                "			difference,  \n" +
                "			umidCreated,  \n" +
                "			poReleaseNumber,  \n" +
                "			packagingID,  \n" +
                "			receivedStatus,  \n" +
                "			remark,  \n" +
                "            isZeroValue  \n" +
                "		FROM 	packing_slip_material_receive_det  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "				AND refPackingSlipMaterialRecID = pPackingSlipId;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_CountOfInvoiceDetail FROM temp_Invoice_Detail;  \n" +
                "  \n" +
                "			IF (v_CountOfInvoiceDetail > 0) THEN  \n" +
                "				INSERT INTO packing_slip_material_receive (systemId, poNumber, poDate, mfgCodeID, supplierSONumber, soDate, packingSlipNumber, packingSlipDate, invoiceNumber, invoiceDate,  \n" +
                "							creditMemoNumber, creditMemoDate, debitMemoNumber, debitMemoDate, receiptDate, receiptType, `status`, applyDate, invoiceTotalDue, isTariffInvoice,  \n" +
                "							creditMemoType, createdBy, updatedBy, createByRoleId, updateByRoleId, paymentTermsID,termsDays, invoiceRequireManagementApproval,  \n" +
                "                            internalRemark, remark, invoiceApprovalStatus, refSupplierCreditMemoNumber, refPurchaseOrderID,  \n" +
                "                            billToAddress, billToAddressID, billToConactPerson, billToContactPersonID, isZeroValue)  \n" +
                "				SELECT 	pSystemId,  \n" +
                "					(CASE WHEN (poNumber IS NULL OR poNumber = \"\") THEN NULL ELSE poNumber END),  \n" +
                "					(CASE WHEN (poDate IS NULL OR poDate = \"0000-00-00\") THEN NULL ELSE poDate END),  \n" +
                "					mfgCodeID,  \n" +
                "					(CASE WHEN (supplierSONumber IS NULL OR supplierSONumber = \"\") THEN NULL ELSE supplierSONumber END),  \n" +
                "                    (CASE WHEN (soDate IS NULL OR soDate = \"0000-00-00\") THEN NULL ELSE soDate END),  \n" +
                "					packingSlipNumber, packingSlipDate,  \n" +
                "					(CASE WHEN (invoiceNumber IS NULL OR invoiceNumber = \"\") THEN NULL ELSE invoiceNumber END),  \n" +
                "					(CASE WHEN (invoiceDate IS NULL OR invoiceDate = \"0000-00-00\") THEN NULL ELSE invoiceDate END),  \n" +
                "					(CASE WHEN (creditMemoNumber IS NULL OR creditMemoNumber = \"\") THEN NULL ELSE creditMemoNumber END),  \n" +
                "					(CASE WHEN (creditMemoDate IS NULL OR creditMemoDate = \"0000-00-00\") THEN NULL ELSE creditMemoDate END),  \n" +
                "					(CASE WHEN (debitMemoNumber IS NULL OR debitMemoNumber = \"\") THEN NULL ELSE debitMemoNumber END),  \n" +
                "					(CASE WHEN (debitMemoDate IS NULL OR debitMemoDate = \"0000-00-00\") THEN NULL ELSE debitMemoDate END),  \n" +
                "					receiptDate, receiptType,  \n" +
                "					`status`, -- (case when invoiceRequireManagementApproval = 0 then `status` else 'I' end), /*status*/  \n" +
                "					applyDate, invoiceTotalDue, isTariffInvoice,  \n" +
                "					(CASE WHEN creditMemoType IS NULL OR creditMemoType = \"\" THEN NULL ELSE creditMemoType END),  \n" +
                "					pUserId, pUserId, pUserRoleId, pUserRoleId, paymentTermsID, termsDays, invoiceRequireManagementApproval,  \n" +
                "                    internalRemark,  \n" +
                "                    remark,  \n" +
                "					(CASE WHEN invoiceRequireManagementApproval = 0 THEN 3 ELSE 2 END) /*invoiceApprovalStatus*/,  \n" +
                "                    (CASE WHEN (refSupplierCreditMemoNumber IS NULL OR refSupplierCreditMemoNumber = \"\") THEN NULL ELSE refSupplierCreditMemoNumber END) /*refSupplierCreditMemoNumber*/,  \n" +
                "                    (CASE WHEN (refPurchaseOrderID IS NULL OR refPurchaseOrderID = 0) THEN NULL ELSE refPurchaseOrderID END)  /*refPurchaseOrderID*/,  \n" +
                "                    (CASE WHEN (billToAddress IS NULL OR billToAddress = \"\") THEN NULL ELSE billToAddress END) /*billToAddress*/,  \n" +
                "                    (CASE WHEN (billToAddressID IS NULL OR billToAddressID = 0) THEN NULL ELSE billToAddressID END)  /*billToAddressID*/,  \n" +
                "                    (CASE WHEN (billToConactPerson IS NULL OR billToConactPerson = \"\") THEN NULL ELSE billToConactPerson END) /*billToConactPerson*/,  \n" +
                "                    (CASE WHEN (billToContactPersonID IS NULL OR billToContactPersonID = 0) THEN NULL ELSE billToContactPersonID END)  /*billToContactPersonID*/,  \n" +
                "                    isZeroValue  \n" +
                "				FROM 	temp_Invoice_Detail;  \n" +
                "  \n" +
                "				SELECT LAST_INSERT_ID() INTO v_IdOfInvoice;  \n" +
                "  \n" +
                "				UPDATE 	packing_slip_material_receive  \n" +
                "				SET 	refPackingSlipNumberForInvoice = v_IdOfInvoice,  \n" +
                "					`status` = (CASE WHEN receiptType = 'P' THEN 'IR' WHEN receiptType = 'R' THEN 'CR' ELSE NULL END)  \n" +
                "				WHERE	id = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1)  \n" +
                "						AND isDeleted = 0;  \n" +
                "  \n" +
                "				select count(1) into v_CountOfRMA  \n" +
                "                  from packing_slip_material_receive_det d  \n" +
                "				 where exists (select 1 from packing_slip_material_receive p where p.id = d.refPackingSlipMaterialRecID and p.receiptType = 'R' and p.isDeleted = 0)  \n" +
                "					and d.refPackingSlipIdForRma = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1) /*packing slip id*/  \n" +
                "                    and d.isDeleted = 0  \n" +
                "					and d.refPackingSlipForRma is null/*manual packing slip*/  \n" +
                "					and d.refInvoiceIdForRma is null /* invoice id */;  \n" +
                "                 IF v_CountOfRMA != 0 THEN  \n" +
                "					/*update invoice id in RMA packing slip which is created before creating invoice*/  \n" +
                "                    update packing_slip_material_receive_det d  \n" +
                "						set d.refInvoiceIdForRma = v_IdOfInvoice  \n" +
                "					 where exists (select 1 from packing_slip_material_receive p where p.id = d.refPackingSlipMaterialRecID and p.receiptType = 'R' and p.isDeleted = 0)  \n" +
                "						and d.refPackingSlipIdForRma = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1) /*packing slip id*/  \n" +
                "						and d.isDeleted = 0  \n" +
                "						and d.refPackingSlipForRma is null/*manual packing slip*/  \n" +
                "						and d.refInvoiceIdForRma is null /* invoice id */;  \n" +
                "				 END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_CountOfInvoiceLineDetail FROM temp_Invoice_Line_Detail;  \n" +
                "			IF (v_CountOfInvoiceLineDetail > 0) THEN  \n" +
                "				INSERT INTO packing_slip_material_receive_det (refPackingSlipMaterialRecID, packingSlipSerialNumber, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, purchasePrice, disputedPrice, otherCharges, `status`, extendedPrice, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, isZeroValue, createdBy, updatedBy, createByRoleId, updateByRoleId)  \n" +
                "				SELECT 	v_IdOfInvoice, packingSlipSerialNumber,  \n" +
                "					nickname,  \n" +
                "					(CASE WHEN ( partID > 0) THEN  partID ELSE NULL END),  \n" +
                "					(CASE WHEN ( refSupplierPartId > 0) THEN  refSupplierPartId ELSE NULL END),  \n" +
                "					scanLabel,  \n" +
                "					receivedQty,  \n" +
                "					packingSlipQty,  \n" +
                "					(CASE WHEN ( binID > 0) THEN  binID ELSE NULL END),  \n" +
                "					(CASE WHEN ( warehouseID > 0) THEN  warehouseID ELSE NULL END),  \n" +
                "					(CASE WHEN ( parentWarehouseID < 0) THEN  parentWarehouseID ELSE NULL END),  \n" +
                "					invoicePrice,  \n" +
                "					purchasePrice,  \n" +
                "					disputedPrice,  \n" +
                "					otherCharges,  \n" +
                "					`status`,  \n" +
                "					extendedPrice,  \n" +
                "					(CASE WHEN ( refCreditDebitInvoiceNo > 0) THEN  refCreditDebitInvoiceNo ELSE NULL END),  \n" +
                "					difference,  \n" +
                "					umidCreated,  \n" +
                "					poReleaseNumber,  \n" +
                "					(CASE WHEN ( packagingID > 0) THEN  packagingID ELSE NULL END),  \n" +
                "					receivedStatus,  \n" +
                "					remark,  \n" +
                "                    isZeroValue,  \n" +
                "					pUserId,  \n" +
                "					pUserId,  \n" +
                "					pUserRoleId,  \n" +
                "					pUserRoleId  \n" +
                "				FROM 	temp_Invoice_Line_Detail;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "	SELECT v_IdOfInvoice AS PackingSlipId;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5958,'2.00','V1','User Story 37932: [Main Branch] Requesting Confirming Zero Value Invoice at Supplier invoice Header - Ashish (Check-in Bhavik)'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5958:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2022  *********************************** */
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(30),  \n" +
                "	IN pMfgCodeIds LONGTEXT,  \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearch TINYINT,  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pInvoiceIds LONGTEXT,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvoiceFromDate DATE,  \n" +
                "    IN pInvoiceToDate DATE,  \n" +
                "    IN pMarkedForRefundStatus LONGTEXT,  \n" +
                "    IN pInvoiceComments VARCHAR(1000),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pSelectedDateType VARCHAR(10),  \n" +
                "    IN pIsConfirmedZeroValueInvoicesOnly TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentDate DATE;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
                "			SELECT 		p.id,  \n" +
                "					p.systemId,  \n" +
                "					p.poNumber,  \n" +
                "                    p.poDate,  \n" +
                "                    p.refPurchaseOrderID poId,  \n" +
                "					p.mfgCodeID,  \n" +
                "					p.supplierSONumber,  \n" +
                "                    p.soDate,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
                "					p.packingSlipDate,  \n" +
                "					p.invoiceNumber,  \n" +
                "                    p.lockStatus invoiceLockStatus,  \n" +
                "					p.invoiceDate,  \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
                "					p.creditMemoNumber,  \n" +
                "                    p.lockStatus creditMemoLockStatus,  \n" +
                "					p.creditMemoDate,  \n" +
                "					p.debitMemoNumber,  \n" +
                "                    p.refSupplierCreditMemoNumber,  \n" +
                "                    p.lockStatus debitMemoLockStatus,  \n" +
                "					p.debitMemoDate,  \n" +
                "					p.receiptDate,  \n" +
                "					p.description,  \n" +
                "					p.billToAddress,  \n" +
                "					p.shipToAddress,  \n" +
                "					p.poVersion,  \n" +
                "					p.isDeleted,  \n" +
                "					p.receiptType,  \n" +
                "					p.`status`,  \n" +
                "					p.applyDate,  \n" +
                "					p.refParentCreditDebitInvoiceno,  \n" +
                "					p.refPackingSlipNumberForInvoice,  \n" +
                "					p.invoiceTotalDue,  \n" +
                "					p.isTariffInvoice,  \n" +
                "					p.creditMemoType,  \n" +
                "                    (  \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
                "								'Invoice Credit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MC' THEN  \n" +
                "								'MISC Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'RC' THEN  \n" +
                "								'RMA Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'ID' THEN  \n" +
                "								'Invoice Debit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MD' THEN  \n" +
                "								'MISC Debit Memo'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
                "								'Invoice'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
                "								'MISC Invoice'  \n" +
                "						END  \n" +
                "					) subTypeValue,  \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                    m.mfgName supplierName,  \n" +
                "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
                "					m.mfgCode supplierCodeName,  \n" +
                "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
                "					pg.packingSlipDocCount,  \n" +
                "					pd.itemReceived,  \n" +
                "					pd.otherChargesItemReceived,  \n" +
                "					pd.itemDisapproved,  \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
                "					ps.status parentInvoiceStatus,  \n" +
                "					ps.invoiceNumber refInvoiceNumber,  \n" +
                "                    ps.lockStatus refInvoiceLockStatus,  \n" +
                "					ps.creditMemoType parentCreditMemoType,  \n" +
                "					pd.totalExtendedAmount,  \n" +
                "                    pd.totalDiscount,  \n" +
                "					pe.totalCreditAmount,  \n" +
                "					pe.totalDebitAmount,  \n" +
                "					(  \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
                "					) amountToPay,  \n" +
                "                    pd.totalExtendedReceivedPrice,  \n" +
                "					pd.packingDetailNote,  \n" +
                "					pd.approveLineCount,  \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
                "											p.debitMemoDate  \n" +
                "										WHEN p.receiptType = 'C' THEN  \n" +
                "											p.creditMemoDate  \n" +
                "										ELSE p.invoiceDate  \n" +
                "									end), payTerm.termsDays, p.paymentTermsID) paymentDueDate,  \n" +
                "					g.gencCategoryName paymentTermName,  \n" +
                " 					m.paymentTermsID paymentTermsID,  \n" +
                "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
                "                    p.paymentTermsID invPaymentTermsID,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
                "					psm.packingSlipModeStatus,  \n" +
                "                    psPay.paymentDate,  \n" +
                "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
                "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
                "					p.invoiceRequireManagementApproval,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
                "								'Yes'  \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
                "								'No'  \n" +
                "						END  \n" +
                "					) invoiceRequireManagementApprovalValue,  \n" +
                "					p.invoiceApprovalStatus,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
                "								'Approved'  \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
                "								'Pending'  \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
                "								'N/A'  \n" +
                "						END  \n" +
                "					) invoiceApprovalStatusValue,  \n" +
                "					p.invoiceApprovedBy,  \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.invoiceApprovalDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') invoiceApprovalDate,  \n" +
                "					p.invoiceApprovalComment,  \n" +
                "					p.internalRemark,  \n" +
                "                    p.remark,  \n" +
                "					p.lockStatus,  \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "						when p.lockStatus = 'LC' then 'Locked'  \n" +
                "						else null end  \n" +
                "					) lockStatusValue,  \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                    case when p.receiptType = 'I' then  \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
                "					h1.refType as haltRefType,  \n" +
                "                    h1.status as haltStatus,  \n" +
                "                    (CASE WHEN h1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltStatusText,  \n" +
                "                    (CASE  \n" +
                "							WHEN h1.status = 'H' THEN  \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReason,  \n" +
                "                    psh1.refType as haltRefTypeRefInv,  \n" +
                "                    psh1.status as haltStatusRefInv,  \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInvText,  \n" +
                "                    (CASE  \n" +
                "							WHEN psh1.status = 'H' THEN  \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInv,  \n" +
                "                    p.markedForRefund,  \n" +
                "                    (case when p.markedForRefund = 0 then 'N/A'  \n" +
                "						else case when ifnull(psPay.refundAmount,0) = 0 then  \n" +
                "										'Waiting for Refund'  \n" +
                "								when ifnull(psPay.refundAmount,0) <> 0 and ifnull(psPay.refundAmount,0) <> ifnull(p.markedForRefundAmt,0)  then  \n" +
                "										'Partially Refunded'  \n" +
                "								when ifnull(psPay.refundAmount,0) = ifnull(p.markedForRefundAmt,0) then  \n" +
                "										'Fully Refunded'  \n" +
                "								else '' end  \n" +
                "						end  \n" +
                "					) markedForRefundValue,  \n" +
                "                    p.markedForRefundAmt,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.isZeroValue = 0 THEN  \n" +
                "								'No'  \n" +
                "							WHEN p.isZeroValue = 1 THEN  \n" +
                "								'Yes'  \n" +
                "						END  \n" +
                "					) isZeroValueText,  \n" +
                "                    p.isZeroValue  \n" +
                "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
                "							gFiles.gencFileOwnerType,  \n" +
                "							gFiles.refTransID,  \n" +
                "							gFiles.entityID  \n" +
                "						FROM genericfiles gFiles  \n" +
                "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
                "						and gFiles.entityID in (-13,-15,-16)  \n" +
                "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
                "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
                "																		WHEN p.receiptType = 'D' THEN -16  \n" +
                "																		ELSE -13  \n" +
                "																	END)  \n" +
                "				and psDoc.refTransID = p.id  \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
                "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where h2.refTransId = h1.refTransId  \n" +
                " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
                "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
                "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where psh1.refTransId = h2.refTransId  \n" +
                " 											  and h2.refType = 'SINV'  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
                "            left join (  \n" +
                "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
                "				FROM 	vu_genericfilescount g  \n" +
                "				WHERE 	g.entityID = -14  \n" +
                "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
                "            ) pg on pg.refTransID = psm.id  \n" +
                "			left join (  \n" +
                "							select 	a.refPackingSlipMaterialRecID,  \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
                "								sum(a.itemReceived) itemReceived,  \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
                "								sum(a.itemDisapproved) itemDisapproved,  \n" +
                "								sum(a.approveLineCount) approveLineCount,  \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
                "                                sum(discount) totalDiscount,  \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
                "							from 	(  \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
                "										psm.packingSlipSerialNumber,  \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
                "										extendedPrice,  \n" +
                "                                        discount,  \n" +
                "										extendedReceivedPrice  \n" +
                "									FROM 	packing_slip_material_receive_det psm  \n" +
                "									WHERE 	psm.isDeleted = 0  \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
                "								) a  \n" +
                "							group by a.refPackingSlipMaterialRecID  \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
                "				left join (select b.refPackingslipInvoiceID,  \n" +
                "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount,  \n" +
                "                                    max(case when a.refPaymentMode = 'P' then a.paymentDate else null end) paymentDate  \n" +
                "							  from packingslip_invoice_payment a  \n" +
                "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "							 where a.refPaymentMode IN ('P','RR')  \n" +
                "							   and a.isPaymentVoided = 0  \n" +
                "							   and b.isDeleted = 0  \n" +
                "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
                "				left join (  \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
                "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
                "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
                "							from 		packing_slip_material_receive ps  \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
                "                            left join (select b.refPackingslipInvoiceID,  \n" +
                "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "										 where a.refPaymentMode IN ('P','RR')  \n" +
                "										   and b.isPaymentVoided = 0  \n" +
                "										   and b.isDeleted = 0  \n" +
                "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
                "								  where ps.receiptType in ('C','D')  \n" +
                "									and ps.isDeleted = 0  \n" +
                "									and pd.isDeleted = 0  \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
                "				WHERE p.`status` in ('PE','I','A','P','PP', 'PM') and p.isDeleted = 0 \",  \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END),  \n" +
                "                (CASE WHEN pIsConfirmedZeroValueInvoicesOnly = 1 THEN CONCAT(\"  AND p.isZeroValue = true \") ELSE \"\" END)  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pInvPaymentTermsIds IS NOT NULL AND pInvPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pInvPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and p.lockStatus IN (\", pLockStatusFilter ,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "      IF(pInvoiceComments IS NOT NULL AND pInvoiceComments != '')THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and (p.internalRemark LIKE '%\",pInvoiceComments,\"%' OR p.remark LIKE '%\",pInvoiceComments,\"%')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = p.id  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefundStatus IS NOT NULL and pMarkedForRefundStatus != '' THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.markedForRefundValue in (\",pMarkedForRefundStatus,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
                "													or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		END IF;  \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
                "													   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
                "		IF pIsExactSearch = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
                "				SELECT 1  \n" +
                "				  FROM packing_slip_material_receive_det x  \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "    EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*,  \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "				round(c.paidAmount,2) totalPaidAmount,  \n" +
                "                round(c.refundAmount,2) totalRefundAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  select @temp_Sproc_RetriveSupplierInvoiceList;  \n" +
                "END;  \n" +
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	IF OLD.receiptType = \"P\" AND OLD.refPurchaseOrderID IS NULL AND NEW.isCustConsigned != OLD.isCustConsigned THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isLineCustConsigned=NEW.isCustConsigned, LineCustomerID=NEW.CustomerID,updatedBy=NEW.updatedBy, updateByRoleId=NEW.updateByRoleId ,updatedAt=fun_DatetimetoUTCDateTime()  WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		CASE  \n" +
                "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
                "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
                "			ELSE 'PO Date'  \n" +
                "		END ,  \n" +
                "		CAST(OLD.poDate AS CHAR), CAST(NEW.poDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(NEW.soDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip Date', CAST(OLD.packingSlipDate AS CHAR), CAST(NEW.packingSlipDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(NEW.invoiceDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(NEW.creditMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(NEW.debitMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(NEW.receiptDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
                "				ELSE 'Supplier Invoice Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN OLD.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN NEW.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
                "				ELSE 'Supplier Invoice Posting Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(NEW.applyDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
                "				ELSE 'Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
                "				ELSE 'PS Internal Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "	IF IFNULL(OLD.billToAddress,0) != IFNULL(NEW.billToAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To', CAST(OLD.billToAddress AS CHAR), CAST(new.billToAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.billToConactPerson,0) != IFNULL(NEW.billToConactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To Contact Person', CAST(OLD.billToConactPerson AS CHAR), CAST(new.billToConactPerson AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToConactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaShippingContactPerson,0) != IFNULL(NEW.rmaShippingContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To Contact Person', OLD.rmaShippingContactPerson, new.rmaShippingContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaMarkForContactPerson,0) != IFNULL(NEW.rmaMarkForContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For Contact Person', OLD.rmaMarkForContactPerson, new.rmaMarkForContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			case when OLD.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "            case when new.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CustomerID, 0) != IFNULL(NEW.CustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.CustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.CustomerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovalComment, 0) != IFNULL(NEW.invoiceApprovalComment, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approval Comment',  CAST(OLD.invoiceApprovalComment AS CHAR), CAST(NEW.invoiceApprovalComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovalDate, 0) != IFNULL(NEW.invoiceApprovalDate, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approved On',  CAST(fun_ApplyCommonDateTimeFormatByParaValue(OLD.invoiceApprovalDate,FUN_GETTIMEZONE(), FUN_GETDATETIMEFORMAT()) AS CHAR), CAST(fun_ApplyCommonDateTimeFormatByParaValue(NEW.invoiceApprovalDate,FUN_GETTIMEZONE(), FUN_GETDATETIMEFORMAT()) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovedBy, 0) != IFNULL(NEW.invoiceApprovedBy, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approved By',  CAST(fun_getUserNameByID(OLD.invoiceApprovedBy) AS CHAR), CAST(fun_getUserNameByID(NEW.invoiceApprovedBy) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "      IF IFNULL(OLD.invoiceRequireManagementApproval, 0) != IFNULL(NEW.invoiceRequireManagementApproval, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Invoice Require Management Approval',  CAST(CASE WHEN OLD.invoiceRequireManagementApproval=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.invoiceRequireManagementApproval=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isZeroValue, 0) != IFNULL(NEW.isZeroValue, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Confirmed Zero Value Invoices Only',  CAST(CASE WHEN OLD.isZeroValue=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isZeroValue=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5959,'2.00','V1','User Story 37932: [Main Branch] Requesting Confirming Zero Value Invoice at Supplier invoice Header - Ashish Check-in Bhavik)'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5959:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_PackingSlipReceiptType VARCHAR(5);  \n" +
                "	DECLARE v_CreditMemoType VARCHAR(5);  \n" +
                "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE PORLINE_OTY INT;  \n" +
                "	DECLARE vTotalQty INT;  \n" +
                "    DECLARE vPOID INT;  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
                "    select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
                "  \n" +
                "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vPOID IS NOT NULL) THEN  \n" +
                "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
                "        /* (-20) is Purchase Order Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-20,concat('{\"id\":', vPOID , '}'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','packingSlipSerialNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poReleaseNumber,0) != IFNULL(NEW.poReleaseNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Release#', CAST(OLD.poReleaseNumber AS CHAR), CAST(new.poReleaseNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','poReleaseNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRef'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','nickname'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rohsstatus,0) != IFNULL(NEW.rohsstatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'RoHS Requirement', CAST(fun_getRoHSNameByID(OLD.rohsstatus) AS CHAR), CAST(fun_getRoHSNameByID(new.rohsstatus) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MPN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'SPN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),  \n" +
                "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'qty');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),  \n" +
                "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN  \n" +
                "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(OLD.invoicePrice AS CHAR), CAST(new.invoicePrice AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'unitprice');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(OLD.purchasePrice AS CHAR), CAST(new.purchasePrice AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'unitprice');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','approveNote'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN old.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN old.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN new.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN new.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),  \n" +
                "			OLD.extendedPrice, new.extendedPrice, fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',  \n" +
                "		OLD.extendedReceivedPrice, new.extendedReceivedPrice,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(OLD.difference AS CHAR), CAST(new.difference AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'unitprice');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(OLD.differenceQty AS CHAR), CAST(new.differenceQty AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN old.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN old.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN new.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN new.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','comment'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF v_PackingSlipReceiptType = 'R' THEN  \n" +
                "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,  \n" +
                "		CONCAT(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '  \n" +
                "					ELSE 'Line# '  \n" +
                "				END  \n" +
                "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isLineCustConsigned,0) != IFNULL(NEW.isLineCustConsigned,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer Consigned (No Charge)',CAST(CASE WHEN OLD.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.LineCustomerID,0) != IFNULL(NEW.LineCustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.LineCustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.LineCustomerID;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer',CAST(vOldCustomer AS CHAR),  \n" +
                "		CAST(vNewCustomer AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isNonUMIDStock,0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Do Not Create UMID',CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Confirming Zero Value Line',CAST(CASE WHEN OLD.isZeroValue=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isZeroValue=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5960,'2.00','V1','User Story 37932: [Main Branch] Requesting Confirming Zero Value Invoice at Supplier invoice Header - Ashish (Check-in Bhavik)'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
      case 5960:
        allDbChangesArray.push(
          /* **************************** New Script -> 25-02-2022  *********************************** */
          "DROP procedure IF EXISTS `Sproc_RetriveSupplierInvoiceList`;  \n" +
          "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
          "	IN pPageIndex INT,  \n" +
          "	IN pRecordPerPage INT,  \n" +
          "	IN pOrderBy VARCHAR(255),  \n" +
          "	IN pWhereClause VARCHAR(16383),  \n" +
          "	IN pReceiptType VARCHAR(30),  \n" +
          "	IN pMfgCodeIds LONGTEXT,  \n" +
          "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
          "	IN pDueDate DATE,  \n" +
          "	IN pAdditionalDays INT,  \n" +
          "	IN pTermsAndAboveDays INT,  \n" +
          "	IN pInvoiceNumber VARCHAR(50),  \n" +
          "	IN pIsExactSearch TINYINT,  \n" +
          "	IN pMfrPnId INT,  \n" +
          "    IN pInvoiceIds LONGTEXT,  \n" +
          "    IN pExactPaymentNumberSearch TINYINT,  \n" +
          "    IN pPaymentNumber VARCHAR(50),  \n" +
          "    IN pPaymentTermsIds LONGTEXT,  \n" +
          "    IN pInvPaymentTermsIds LONGTEXT,  \n" +
          "    IN pInvoiceFromDate DATE,  \n" +
          "    IN pInvoiceToDate DATE,  \n" +
          "    IN pMarkedForRefundStatus LONGTEXT,  \n" +
          "    IN pInvoiceComments VARCHAR(1000),  \n" +
          "    IN pLockStatusFilter VARCHAR(50),  \n" +
          "    IN pSelectedDateType VARCHAR(10),  \n" +
          "    IN pIsConfirmedZeroValueInvoicesOnly TINYINT,  \n" +
          "    IN pPaidAmount VARCHAR(50),  \n" +
          "    IN pExactPaidAmountSearch TINYINT,  \n" +
          "    IN pExtendedAmount VARCHAR(50),  \n" +
          "    IN pExactExtendedAmountSearch TINYINT  \n" +
          ")  \n" +
          "BEGIN  \n" +
          "	DECLARE pOffset INT;  \n" +
          "	DECLARE rowNumWhere VARCHAR(255);  \n" +
          "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
          "	DECLARE v_TimeZone VARCHAR(50);  \n" +
          "    DECLARE vCurrentDate DATE;  \n" +
          "    DECLARE vMfgCodeFormat INT;  \n" +
          "  \n" +
          "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
          "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
          "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
          "  \n" +
          "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
          "  \n" +
          "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
          "			SELECT 		p.id,  \n" +
          "					p.systemId,  \n" +
          "					p.poNumber,  \n" +
          "                    p.poDate,  \n" +
          "                    p.refPurchaseOrderID poId,  \n" +
          "					p.mfgCodeID,  \n" +
          "					p.supplierSONumber,  \n" +
          "                    p.soDate,  \n" +
          "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
          "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
          "					p.packingSlipDate,  \n" +
          "					p.invoiceNumber,  \n" +
          "                    p.lockStatus invoiceLockStatus,  \n" +
          "					p.invoiceDate,  \n" +
          "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
          "					p.creditMemoNumber,  \n" +
          "                    p.lockStatus creditMemoLockStatus,  \n" +
          "					p.creditMemoDate,  \n" +
          "					p.debitMemoNumber,  \n" +
          "                    p.refSupplierCreditMemoNumber,  \n" +
          "                    p.lockStatus debitMemoLockStatus,  \n" +
          "					p.debitMemoDate,  \n" +
          "					p.receiptDate,  \n" +
          "					p.description,  \n" +
          "					p.billToAddress,  \n" +
          "					p.shipToAddress,  \n" +
          "					p.poVersion,  \n" +
          "					p.isDeleted,  \n" +
          "					p.receiptType,  \n" +
          "					p.`status`,  \n" +
          "					p.applyDate,  \n" +
          "					p.refParentCreditDebitInvoiceno,  \n" +
          "					p.refPackingSlipNumberForInvoice,  \n" +
          "					p.invoiceTotalDue,  \n" +
          "					p.isTariffInvoice,  \n" +
          "					p.creditMemoType,  \n" +
          "                    (  \n" +
          "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
          "								'Invoice Credit Memo (Auto)'  \n" +
          "							WHEN p.creditMemoType = 'MC' THEN  \n" +
          "								'MISC Credit Memo'  \n" +
          "							WHEN p.creditMemoType = 'RC' THEN  \n" +
          "								'RMA Credit Memo'  \n" +
          "							WHEN p.creditMemoType = 'ID' THEN  \n" +
          "								'Invoice Debit Memo (Auto)'  \n" +
          "							WHEN p.creditMemoType = 'MD' THEN  \n" +
          "								'MISC Debit Memo'  \n" +
          "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
          "								'Invoice'  \n" +
          "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
          "								'MISC Invoice'  \n" +
          "						END  \n" +
          "					) subTypeValue,  \n" +
          "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
          "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
          "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
          "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
          "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
          "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
          "                    m.mfgName supplierName,  \n" +
          "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
          "					m.mfgCode supplierCodeName,  \n" +
          "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
          "					pg.packingSlipDocCount,  \n" +
          "					pd.itemReceived,  \n" +
          "					pd.otherChargesItemReceived,  \n" +
          "					pd.itemDisapproved,  \n" +
          "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
          "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
          "					ps.status parentInvoiceStatus,  \n" +
          "					ps.invoiceNumber refInvoiceNumber,  \n" +
          "                    ps.lockStatus refInvoiceLockStatus,  \n" +
          "					ps.creditMemoType parentCreditMemoType,  \n" +
          "					pd.totalExtendedAmount,  \n" +
          "                    pd.totalDiscount,  \n" +
          "					pe.totalCreditAmount,  \n" +
          "					pe.totalDebitAmount,  \n" +
          "					(  \n" +
          "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
          "					) amountToPay,  \n" +
          "                    pd.totalExtendedReceivedPrice,  \n" +
          "					pd.packingDetailNote,  \n" +
          "					pd.approveLineCount,  \n" +
          "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
          "											p.debitMemoDate  \n" +
          "										WHEN p.receiptType = 'C' THEN  \n" +
          "											p.creditMemoDate  \n" +
          "										ELSE p.invoiceDate  \n" +
          "									end), payTerm.termsDays, p.paymentTermsID) paymentDueDate,  \n" +
          "					g.gencCategoryName paymentTermName,  \n" +
          " 					m.paymentTermsID paymentTermsID,  \n" +
          "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
          "                    p.paymentTermsID invPaymentTermsID,  \n" +
          "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
          "					psm.packingSlipModeStatus,  \n" +
          "                    psPay.paymentDate,  \n" +
          "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
          "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
          "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
          "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
          "					p.invoiceRequireManagementApproval,  \n" +
          "					(  \n" +
          "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
          "								'Yes'  \n" +
          "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
          "								'No'  \n" +
          "						END  \n" +
          "					) invoiceRequireManagementApprovalValue,  \n" +
          "					p.invoiceApprovalStatus,  \n" +
          "					(  \n" +
          "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
          "								'Approved'  \n" +
          "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
          "								'Pending'  \n" +
          "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
          "								'N/A'  \n" +
          "						END  \n" +
          "					) invoiceApprovalStatusValue,  \n" +
          "					p.invoiceApprovedBy,  \n" +
          "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
          "					fun_ApplyCommonDateTimeFormatByParaValue(p.invoiceApprovalDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') invoiceApprovalDate,  \n" +
          "					p.invoiceApprovalComment,  \n" +
          "					p.internalRemark,  \n" +
          "                    p.remark,  \n" +
          "					p.lockStatus,  \n" +
          "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
          "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
          "						when p.lockStatus = 'LC' then 'Locked'  \n" +
          "						else null end  \n" +
          "					) lockStatusValue,  \n" +
          "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
          "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
          "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
          "                    case when p.receiptType = 'I' then  \n" +
          "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
          "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
          "					h1.refType as haltRefType,  \n" +
          "                    h1.status as haltStatus,  \n" +
          "                    (CASE WHEN h1.status = 'H' THEN  \n" +
          "								'Halted'  \n" +
          "							ELSE ''  \n" +
          "						END  \n" +
          "					) AS haltStatusText,  \n" +
          "                    (CASE  \n" +
          "							WHEN h1.status = 'H' THEN  \n" +
          "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
          "							ELSE ''  \n" +
          "						END  \n" +
          "					) AS haltReason,  \n" +
          "                    psh1.refType as haltRefTypeRefInv,  \n" +
          "                    psh1.status as haltStatusRefInv,  \n" +
          "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
          "								'Halted'  \n" +
          "							ELSE ''  \n" +
          "						END  \n" +
          "					) AS haltReasonRefInvText,  \n" +
          "                    (CASE  \n" +
          "							WHEN psh1.status = 'H' THEN  \n" +
          "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
          "							ELSE ''  \n" +
          "						END  \n" +
          "					) AS haltReasonRefInv,  \n" +
          "                    p.markedForRefund,  \n" +
          "                    (case when p.markedForRefund = 0 then 'N/A'  \n" +
          "						else case when ifnull(psPay.refundAmount,0) = 0 then  \n" +
          "										'Waiting for Refund'  \n" +
          "								when ifnull(psPay.refundAmount,0) <> 0 and ifnull(psPay.refundAmount,0) <> ifnull(p.markedForRefundAmt,0)  then  \n" +
          "										'Partially Refunded'  \n" +
          "								when ifnull(psPay.refundAmount,0) = ifnull(p.markedForRefundAmt,0) then  \n" +
          "										'Fully Refunded'  \n" +
          "								else '' end  \n" +
          "						end  \n" +
          "					) markedForRefundValue,  \n" +
          "                    p.markedForRefundAmt,  \n" +
          "					(  \n" +
          "						CASE 	WHEN p.isZeroValue = 0 THEN  \n" +
          "								'No'  \n" +
          "							WHEN p.isZeroValue = 1 THEN  \n" +
          "								'Yes'  \n" +
          "						END  \n" +
          "					) isZeroValueText,  \n" +
          "                    p.isZeroValue  \n" +
          "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
          "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
          "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
          "							gFiles.gencFileOwnerType,  \n" +
          "							gFiles.refTransID,  \n" +
          "							gFiles.entityID  \n" +
          "						FROM genericfiles gFiles  \n" +
          "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
          "						and gFiles.entityID in (-13,-15,-16)  \n" +
          "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
          "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
          "																		WHEN p.receiptType = 'D' THEN -16  \n" +
          "																		ELSE -13  \n" +
          "																	END)  \n" +
          "				and psDoc.refTransID = p.id  \n" +
          "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
          "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
          " 											 from holdunholdtrans h2  \n" +
          " 											where h2.refTransId = h1.refTransId  \n" +
          " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
          " 											  and h2.isDeleted = 0)*/  \n" +
          "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
          "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
          "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
          "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
          "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
          " 											 from holdunholdtrans h2  \n" +
          " 											where psh1.refTransId = h2.refTransId  \n" +
          " 											  and h2.refType = 'SINV'  \n" +
          " 											  and h2.isDeleted = 0)*/  \n" +
          "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
          "            left join (  \n" +
          "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
          "				FROM 	vu_genericfilescount g  \n" +
          "				WHERE 	g.entityID = -14  \n" +
          "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
          "            ) pg on pg.refTransID = psm.id  \n" +
          "			left join (  \n" +
          "							select 	a.refPackingSlipMaterialRecID,  \n" +
          "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
          "								sum(a.itemReceived) itemReceived,  \n" +
          "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
          "								sum(a.itemDisapproved) itemDisapproved,  \n" +
          "								sum(a.approveLineCount) approveLineCount,  \n" +
          "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
          "                                sum(discount) totalDiscount,  \n" +
          "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
          "							from 	(  \n" +
          "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
          "										psm.packingSlipSerialNumber,  \n" +
          "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
          "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
          "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
          "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
          "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
          "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
          "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
          "										extendedPrice,  \n" +
          "                                        discount,  \n" +
          "										extendedReceivedPrice  \n" +
          "									FROM 	packing_slip_material_receive_det psm  \n" +
          "									WHERE 	psm.isDeleted = 0  \n" +
          "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
          "								) a  \n" +
          "							group by a.refPackingSlipMaterialRecID  \n" +
          "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
          "				left join (select b.refPackingslipInvoiceID,  \n" +
          "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
          "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount,  \n" +
          "                                    max(case when a.refPaymentMode = 'P' then a.paymentDate else null end) paymentDate  \n" +
          "							  from packingslip_invoice_payment a  \n" +
          "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
          "							 where a.refPaymentMode IN ('P','RR')  \n" +
          "							   and a.isPaymentVoided = 0  \n" +
          "							   and b.isDeleted = 0  \n" +
          "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
          "				left join (  \n" +
          "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
          "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
          "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
          "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
          "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
          "							from 		packing_slip_material_receive ps  \n" +
          "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
          "                            left join (select b.refPackingslipInvoiceID,  \n" +
          "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
          "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
          "										  from packingslip_invoice_payment a  \n" +
          "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
          "										 where a.refPaymentMode IN ('P','RR')  \n" +
          "										   and b.isPaymentVoided = 0  \n" +
          "										   and b.isDeleted = 0  \n" +
          "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
          "								  where ps.receiptType in ('C','D')  \n" +
          "									and ps.isDeleted = 0  \n" +
          "									and pd.isDeleted = 0  \n" +
          "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
          "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
          "				WHERE p.`status` in ('PE','I','A','P','PP', 'PM') and p.isDeleted = 0 \",  \n" +
          "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
          "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END),  \n" +
          "                (CASE WHEN pIsConfirmedZeroValueInvoicesOnly = 1 THEN CONCAT(\"  AND p.isZeroValue = true \") ELSE \"\" END)  \n" +
          "	);  \n" +
          "  \n" +
          "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
          "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
          "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "    IF (pInvPaymentTermsIds IS NOT NULL AND pInvPaymentTermsIds != '') THEN  \n" +
          "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pInvPaymentTermsIds, ' )');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
          "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "     IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
          "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and p.lockStatus IN (\", pLockStatusFilter ,\")\");  \n" +
          "	END IF;  \n" +
          "  \n" +
          "      IF(pInvoiceComments IS NOT NULL AND pInvoiceComments != '')THEN  \n" +
          "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and (p.internalRemark LIKE '%\",pInvoiceComments,\"%' OR p.remark LIKE '%\",pInvoiceComments,\"%')\");  \n" +
          "	END IF;  \n" +
          "  \n" +
          "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
          "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
          "				and exists (select 1  \n" +
          "							  from packingslip_invoice_payment pm  \n" +
          "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
          "							 where pm.isPaymentVoided = 0  \n" +
          "							   and pm.refPaymentMode = 'P'  \n" +
          "							   and pd.refPackingslipInvoiceID = p.id  \n" +
          "							   and pm.isDeleted = 0  \n" +
          "                               and pd.isDeleted = 0  \n" +
          "							   and pm.paymentNumber \",  \n" +
          "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
          "                               ,\") \");  \n" +
          "    END IF;  \n" +
          "	IF (pPaidAmount IS NOT NULL AND pPaidAmount != '') THEN  \n" +
          "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \" and paidAmount \", CASE WHEN pExactPaidAmountSearch = TRUE THEN CONCAT(\" = '\", pPaidAmount ,\"' \") ELSE CONCAT(\" like '%\", pPaidAmount, \"%' \") END);  \n" +
          "    END IF;  \n" +
          "  \n" +
          "    IF (pExtendedAmount IS NOT NULL AND pExtendedAmount != '') THEN  \n" +
          "    	SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \" and pd.totalExtendedAmount \", CASE WHEN pExactExtendedAmountSearch = TRUE THEN CONCAT(\" = '\", pExtendedAmount ,\"' \") ELSE CONCAT(\" like '%\", pExtendedAmount, \"%' \") END);  \n" +
          "    END IF;  \n" +
          "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
          "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
          "	ELSE  \n" +
          "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
          "		SET pWhereClause = '1=1' ;  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF pMarkedForRefundStatus IS NOT NULL and pMarkedForRefundStatus != '' THEN  \n" +
          "		SET pWhereClause = CONCAT(pWhereClause,\" and c.markedForRefundValue in (\",pMarkedForRefundStatus,\")\");  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF pDueDate IS NOT NULL THEN  \n" +
          "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
          "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
          "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
          "	END IF;  \n" +
          "  \n" +
          "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
          "		IF pSelectedDateType = 'I' THEN  \n" +
          "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
          "													or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
          "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
          "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
          "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
          "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
          "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
          "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
          "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
          "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
          "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
          "			SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
          "		END IF;  \n" +
          "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
          "		IF pSelectedDateType = 'I' THEN  \n" +
          "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
          "													   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
          "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
          "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pInvoiceFromDate,\"')\");  \n" +
          "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
          "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pInvoiceFromDate,\"')\");  \n" +
          "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
          "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
          "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
          "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
          "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
          "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate = '\",pInvoiceFromDate,\"')\");  \n" +
          "		END IF;  \n" +
          "    END IF;  \n" +
          "  \n" +
          "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
          "		IF pIsExactSearch = 1 THEN  \n" +
          "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
          "									AND (  \n" +
          "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
          "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
          "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
          "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
          "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
          "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
          "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
          "									  \" ) \"  \n" +
          "						);  \n" +
          "		ELSE  \n" +
          "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
          "									AND (  \n" +
          "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
          "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
          "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
          "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
          "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
          "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
          "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
          "									  \" ) \"  \n" +
          "						);  \n" +
          "		END IF;  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
          "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
          "				SELECT 1  \n" +
          "				  FROM packing_slip_material_receive_det x  \n" +
          "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
          "			)  \n" +
          "		\");  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
          "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
          "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
          "	ELSE  \n" +
          "		SET rowNumWhere = '';  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	/* to get total count of rows */  \n" +
          "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
          "    PREPARE query1 FROM @SQLStatement1;  \n" +
          "    EXECUTE query1;  \n" +
          "	DEALLOCATE PREPARE query1;  \n" +
          "  \n" +
          "	SET @SQLStatement2 = CONCAT(\"  \n" +
          "			SELECT 	c.*,  \n" +
          "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
          "				round(c.paidAmount,2) totalPaidAmount,  \n" +
          "                round(c.refundAmount,2) totalRefundAmount,  \n" +
          "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
          "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
          "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
          "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
          "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
          "  \n" +
          "	PREPARE query2 FROM @SQLStatement2;  \n" +
          "	EXECUTE query2;  \n" +
          "	DEALLOCATE PREPARE query2;  \n" +
          "END;  \n" +
          /* **************************** New Script -> 25-02-2022  *********************************** */
          "DROP procedure IF EXISTS `Sproc_GetAllOtherComponentList`;  \n" +
          "CREATE PROCEDURE `Sproc_GetAllOtherComponentList`(  \n" +
          "    )  \n" +
          "BEGIN  \n" +
          "      DECLARE pmfgCodeID INT;  \n" +
          "      DECLARE vMfgCodeIds VARCHAR(50) DEFAULT '';  \n" +
          "      DECLARE v_mfgNameFormat VARCHAR(10);  \n" +
          "	  SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
          "      SELECT id INTO pmfgCodeID FROM mfgcodemst WHERE iscompany=1  AND isdeleted=0;  \n" +
          "      SELECT GROUP_CONCAT(refMfgCodeMstID) INTO vMfgCodeIds  \n" +
          "      FROM supplier_mapping_mst  \n" +
          "      WHERE supplierID  = pmfgCodeID AND isDeleted =0 AND isCustMapping=0;  \n" +
          "      #get component having mfg as iscompany and part type other  \n" +
          "      SELECT c.pidcode,c.id,c.mfgPN,rr.name AS rohsName,rr.rohsIcon,c.frequency,c.mfgPNDescription,c.category,c.partType,  \n" +
          "      cp.name AS packagingName,c.imageURL,c.unit, c.pcbPerArray, c.packageQty,c.minimum, c.mult,  \n" +
          "      c.packagingId,u.unitName,c.rohsStatusID,mc.mfgCode,mc.mfgName,c.mfgcodeid , pmfgCodeID   fcaCompId , c.partStatus,  \n" +
          "      c.frequencyType, fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, v_mfgNameFormat) mfgCodeName, c.internalReference  \n" +
          "      FROM COMPONENT c JOIN rfq_rohsmst rr ON rr.id=c.rohsStatusID  \n" +
          "      LEFT JOIN component_packagingmst cp ON cp.id=c.packagingId  \n" +
          "      LEFT JOIN uoms u ON u.id=c.uom  \n" +
          "      JOIN mfgcodemst mc ON  mc.id=c.mfgcodeid  \n" +
          "      WHERE c.partType=4  \n" +
          "      AND c.isdeleted=0  \n" +
          "      AND (c.mfgcodeid=pmfgCodeID OR FIND_IN_SET(c.mfgcodeid ,vMfgCodeIds))  \n" +
          "      AND c.isGoodPart  = 1;  \n" +
          "END;  \n" +
          /* **************************** Add Script Version ->  *********************************** */
          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
          "VALUES (5961,'2.00','V1',' User Story 40988: [Main Branch] Demo Improvement points for Add some filters in Advance Filter given on 01-02-2022 - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
        );
        break;
      case 5961:
        allDbChangesArray.push(
          /* **************************** New Script -> 25-02-2022  *********************************** */
          "DROP TRIGGER IF EXISTS `TRG_BU_purchase_order_line_release_det`;  \n" +
          "CREATE TRIGGER `TRG_BU_purchase_order_line_release_det` BEFORE UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN  \n" +
          "	IF(NEW.isdeleted = 0) THEN  \n" +
          "		IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = NEW.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
          "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
          "		END IF;  \n" +
          "		IF (NEW.qty = NEW.receivedQty AND NEW.poLineWorkingStatus='P') THEN  \n" +
          "			SET NEW.poLineWorkingStatus='C';  \n" +
          "			SET NEW.poLineCompleteType='A';  \n" +
          "		ELSEIF ((NEW.qty > NEW.receivedQty AND NEW.poLineCompleteType != 'M') OR (NEW.qty != OLD.qty AND New.poLineCompleteType = 'M' AND NEW.poLineWorkingStatus='C')) THEN  \n" +
          "			SET NEW.poLineWorkingStatus='P';  \n" +
          "			SET NEW.poLineCompleteType='P';  \n" +
          "		END IF;  \n" +
          "	END IF;  \n" +
          "END;  \n" +
          /* **************************** New Script -> 25-02-2022  *********************************** */
          "DROP TRIGGER IF EXISTS `TRG_AI_packing_slip_material_receive_det`;  \n" +
          "CREATE TRIGGER `TRG_AI_packing_slip_material_receive_det` AFTER INSERT ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
          "	DECLARE PORLINE_OTY INT;  \n" +
          "	DECLARE vTotalQty INT;  \n" +
          "    DECLARE vPOID INT;  \n" +
          "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
          "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
          "	select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
          "	IF (NEW.isDeleted = TRUE)THEN  \n" +
          "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',poLineCompleteType='P',poLineCompleteReason=(NULL),receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
          "	ELSEIF( NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND  \n" +
          "		PORLINE_OTY <= vTotalQty) THEN  \n" +
          "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='A', receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
          "		ELSE  \n" +
          "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType='P',poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
          "	END IF;  \n" +
          "    IF(vPOID IS NOT NULL) THEN  \n" +
          "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
          "	END IF;  \n" +
          "END;  \n" +
          /* **************************** New Script -> 25-02-2022  *********************************** */
          "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
          "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
          "	DECLARE v_PackingSlipReceiptType VARCHAR(5);  \n" +
          "	DECLARE v_CreditMemoType VARCHAR(5);  \n" +
          "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);  \n" +
          "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);  \n" +
          "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);  \n" +
          "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);  \n" +
          "	DECLARE PORLINE_OTY INT;  \n" +
          "	DECLARE vTotalQty INT;  \n" +
          "    DECLARE vPOID INT;  \n" +
          "	DECLARE vMfgCodeFormat INT;  \n" +
          "    DECLARE vOldCustomer VARCHAR(100);  \n" +
          "    DECLARE vNewCustomer VARCHAR(100);  \n" +
          "  \n" +
          "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
          "  \n" +
          "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
          "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
          "    select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
          "  \n" +
          "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN  \n" +
          "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='A',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
          "	ELSE  \n" +
          "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType='P',poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF(vPOID IS NOT NULL) THEN  \n" +
          "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
          "        /* (-20) is Purchase Order Entity Default Entry ID*/  \n" +
          "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-20,concat('{\"id\":', vPOID , '}'));  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "        valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),  \n" +
          "		(  \n" +
          "			CASE  \n" +
          "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'  \n" +
          "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'  \n" +
          "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'  \n" +
          "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'  \n" +
          "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'  \n" +
          "				ELSE NULL  \n" +
          "			END  \n" +
          "		),  \n" +
          "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','packingSlipSerialNumber'));  \n" +
          "	END IF;  \n" +
          "  \n" +
          "    IF IFNULL(OLD.poReleaseNumber,0) != IFNULL(NEW.poReleaseNumber,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "        valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Release#', CAST(OLD.poReleaseNumber AS CHAR), CAST(new.poReleaseNumber AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','poReleaseNumber'));  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "        valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRef'));  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "        valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','nickname'));  \n" +
          "	END IF;  \n" +
          "  \n" +
          "    IF IFNULL(OLD.rohsstatus,0) != IFNULL(NEW.rohsstatus,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "        valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'RoHS Requirement', CAST(fun_getRoHSNameByID(OLD.rohsstatus) AS CHAR), CAST(fun_getRoHSNameByID(new.rohsstatus) AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        'varchar');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
          "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
          "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "			valueDataType)  \n" +
          "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),  \n" +
          "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "            'varchar');  \n" +
          "		END IF;  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "		valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MPN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        'varchar');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN  \n" +
          "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
          "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "			valueDataType)  \n" +
          "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),  \n" +
          "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "            'varchar');  \n" +
          "		END IF;  \n" +
          "  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "		valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'SPN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        'varchar');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "		valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        'qty');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
          "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
          "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "			valueDataType)  \n" +
          "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),  \n" +
          "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),  \n" +
          "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "            'qty');  \n" +
          "		END IF;  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "		valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),  \n" +
          "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        'qty');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "		valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        'varchar');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "		valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        'varchar');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "		valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        'varchar');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN  \n" +
          "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN  \n" +
          "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "			valueDataType)  \n" +
          "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(OLD.invoicePrice AS CHAR), CAST(new.invoicePrice AS CHAR),  \n" +
          "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "            'unitprice');  \n" +
          "		END IF;  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN  \n" +
          "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
          "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "			valueDataType)  \n" +
          "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(OLD.purchasePrice AS CHAR), CAST(new.purchasePrice AS CHAR),  \n" +
          "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "            'unitprice');  \n" +
          "		END IF;  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "			valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','approveNote'));  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "			valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',  \n" +
          "		CAST(  \n" +
          "			(  \n" +
          "				CASE  \n" +
          "					WHEN old.`status` = 'P' THEN 'Pending'  \n" +
          "					WHEN old.`status` = 'A' THEN 'Approved'  \n" +
          "					WHEN old.`status` = 'D' THEN 'Disapproved'  \n" +
          "				END  \n" +
          "			)  \n" +
          "		AS CHAR),  \n" +
          "		CAST(  \n" +
          "			(  \n" +
          "				CASE  \n" +
          "					WHEN new.`status` = 'P' THEN 'Pending'  \n" +
          "					WHEN new.`status` = 'A' THEN 'Approved'  \n" +
          "					WHEN new.`status` = 'D' THEN 'Disapproved'  \n" +
          "				END  \n" +
          "			)  \n" +
          "		AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        'varchar');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
          "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
          "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "			valueDataType)  \n" +
          "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),  \n" +
          "			OLD.extendedPrice, new.extendedPrice, fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "            'amount');  \n" +
          "		END IF;  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "			valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',  \n" +
          "		OLD.extendedReceivedPrice, new.extendedReceivedPrice,  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        'amount');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "			valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(OLD.difference AS CHAR), CAST(new.difference AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        'unitprice');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "        valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(OLD.differenceQty AS CHAR), CAST(new.differenceQty AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        'qty');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "        valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        'varchar');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "        valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',  \n" +
          "		CAST(  \n" +
          "			(  \n" +
          "				CASE  \n" +
          "					WHEN old.receivedStatus = 'P' THEN 'Pending'  \n" +
          "					WHEN old.receivedStatus = 'A' THEN 'Accepted'  \n" +
          "					WHEN old.receivedStatus = 'R' THEN 'Rejected'  \n" +
          "				END  \n" +
          "			)  \n" +
          "		AS CHAR),  \n" +
          "		CAST(  \n" +
          "			(  \n" +
          "				CASE  \n" +
          "					WHEN new.receivedStatus = 'P' THEN 'Pending'  \n" +
          "					WHEN new.receivedStatus = 'A' THEN 'Accepted'  \n" +
          "					WHEN new.receivedStatus = 'R' THEN 'Rejected'  \n" +
          "				END  \n" +
          "			)  \n" +
          "		AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        'varchar');  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "        valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','comment'));  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "        valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','remark'));  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "        valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRemark'));  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF v_PackingSlipReceiptType = 'R' THEN  \n" +
          "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
          "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;  \n" +
          "		ELSE  \n" +
          "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;  \n" +
          "		END IF;  \n" +
          "  \n" +
          "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
          "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;  \n" +
          "		ELSE  \n" +
          "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;  \n" +
          "		END IF;  \n" +
          "  \n" +
          "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
          "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;  \n" +
          "		ELSE  \n" +
          "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;  \n" +
          "		END IF;  \n" +
          "  \n" +
          "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
          "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;  \n" +
          "		ELSE  \n" +
          "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;  \n" +
          "		END IF;  \n" +
          "  \n" +
          "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN  \n" +
          "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "			valueDataType)  \n" +
          "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),  \n" +
          "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "            'varchar');  \n" +
          "		END IF;  \n" +
          "  \n" +
          "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN  \n" +
          "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "			valueDataType)  \n" +
          "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),  \n" +
          "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "            'varchar');  \n" +
          "		END IF;  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "			valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,  \n" +
          "		CONCAT(  \n" +
          "			(  \n" +
          "				CASE  \n" +
          "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '  \n" +
          "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '  \n" +
          "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '  \n" +
          "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '  \n" +
          "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '  \n" +
          "					ELSE 'Line# '  \n" +
          "				END  \n" +
          "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'  \n" +
          "		),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        'varchar');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
          "			valueDataType)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),  \n" +
          "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
          "        'varchar');  \n" +
          "	END IF;  \n" +
          "  \n" +
          "  IF IFNULL(OLD.isLineCustConsigned,0) != IFNULL(NEW.isLineCustConsigned,0) THEN  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer Consigned (No Charge)',CAST(CASE WHEN OLD.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
          "		CAST(CASE WHEN NEW.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
          "	END IF;  \n" +
          "  \n" +
          "    IF IFNULL(OLD.LineCustomerID,0) != IFNULL(NEW.LineCustomerID,0) THEN  \n" +
          "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.LineCustomerID;  \n" +
          "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.LineCustomerID;  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer',CAST(vOldCustomer AS CHAR),  \n" +
          "		CAST(vNewCustomer AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF IFNULL(OLD.isNonUMIDStock,0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Do Not Create UMID',CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
          "		CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
          "	END IF;  \n" +
          "  \n" +
          "    IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
          "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Confirming Zero Value Line',CAST(CASE WHEN OLD.isZeroValue=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
          "		CAST(CASE WHEN NEW.isZeroValue=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
          "	END IF;  \n" +
          "  \n" +
          "    END;  \n" +
          /* **************************** Add Script Version ->  *********************************** */
          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
          "VALUES (5962,'2.00','V1',' User Story 40988: [Main Branch] Demo Improvement points for Add some filters in Advance Filter given on 01-02-2022 - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
        );
        break;
      case 5962:
        allDbChangesArray.push(
          /* **************************** New Script -> 25-02-2022  *********************************** */
          "DROP procedure IF EXISTS `Sproc_UpdatePoWorkingLineStatus`;  \n" +
          "CREATE PROCEDURE `Sproc_UpdatePoWorkingLineStatus`(  \n" +
          "	IN pPOID INT  \n" +
          ")  \n" +
          "BEGIN  \n" +
          "	DECLARE vStatus VARCHAR(50);  \n" +
          "    DECLARE vPOTotalLinesWithOtherPart INT;  \n" +
          "	DECLARE vPOLines INT;  \n" +
          "	DECLARE vIsManualCompleted INT;  \n" +
          "  \n" +
          "    SELECT count(1) INTO vPOTotalLinesWithOtherPart FROM purchase_order_det WHERE refPurchaseOrderID=pPOID AND isDeleted=0;  \n" +
          "    SELECT count(1) INTO vPOLines FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID;  \n" +
          "    SELECT count(1) INTO vIsManualCompleted FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID AND poLineCompleteType='M';  \n" +
          "  \n" +
          "    SELECT poLineWorkingStatus INTO vStatus FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID AND poLineWorkingStatus='P' LIMIT 1;  \n" +
          "	IF vPOTotalLinesWithOtherPart > 0 THEN -- check po have any lines  \n" +
          "		IF vPOLines IS NULL OR vPOLines=0 THEN  \n" +
          "			SET vStatus='P';  \n" +
          "		ELSE  \n" +
          "			SET vStatus=IFNULL(vStatus,'C');  \n" +
          "		END IF;  \n" +
          "	ELSE  \n" +
          "		SET vStatus='P';  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF(vStatus='P') THEN  \n" +
          "		UPDATE purchase_order_mst SET poWorkingStatus=(case when poWorkingStatus='CA' then poWorkingStatus else vStatus end),lockStatus='NA',lockedAt=null,lockedBy=null,lockedByRoleId=null WHERE id=pPOID;  \n" +
          "	ELSE  \n" +
          "		UPDATE purchase_order_mst SET poWorkingStatus=(case when poWorkingStatus='CA' then poWorkingStatus else vStatus end),poCompleteType=(case when vIsManualCompleted > 0 then 'M' else 'A' end),lockStatus='RL' WHERE id=pPOID;  \n" +
          "	END IF;  \n" +
          "END;  \n" +
          /* **************************** New Script -> 25-02-2022  *********************************** */
          "DROP VIEW IF EXISTS `vu_purchaseorder_shipping_release` ;  \n" +
          "CREATE VIEW `vu_purchaseorder_shipping_release` AS  \n" +
          "    SELECT  \n" +
          "        `pold`.`refPurchaseOrderDetID` AS `refPurchaseOrderDetID`,  \n" +
          "        `pod`.`refPurchaseOrderID` AS `refPurchaseOrderID`,  \n" +
          "        SUM(`pold`.`qty`) AS `totalQty`,  \n" +
          "        SUM(IFNULL(`pold`.`receivedQty`, 0)) AS `totalReceivedQty`,  \n" +
          "        (CASE  \n" +
          "            WHEN ((SUM(`pold`.`qty`) - SUM(IFNULL(`pold`.`receivedQty`, 0))) > 0) THEN (SUM(`pold`.`qty`) - SUM(IFNULL(`pold`.`receivedQty`, 0)))  \n" +
          "            ELSE 0  \n" +
          "        END) AS `totalPendingQty`,  \n" +
          "        MAX((CASE  \n" +
          "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 'P'  \n" +
          "            ELSE 'C'  \n" +
          "        END)) AS `poLineWorkingStatus`,  \n" +
          "        MAX((CASE  \n" +
          "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 'Open'  \n" +
          "            ELSE 'Closed'  \n" +
          "        END)) AS `poLineWorkingDisplayStatus`,  \n" +
          "        MAX((CASE  \n" +
          "            WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'Manually Completed'  \n" +
          "            WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'Auto Completed'  \n" +
          "            ELSE 'Open'  \n" +
          "        END)) AS `poLineCompleteTypeDisplayValue`,  \n" +
          "        MAX((CASE  \n" +
          "            WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'M'  \n" +
          "            WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'A'  \n" +
          "            ELSE 'P'  \n" +
          "        END)) AS `poLineCompleteType`,  \n" +
          "        SUM((CASE  \n" +
          "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 1  \n" +
          "            ELSE 0  \n" +
          "        END)) AS `pendingLineCount`,  \n" +
          "        SUM((CASE  \n" +
          "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'C') THEN 1  \n" +
          "            ELSE 0  \n" +
          "        END)) AS `receivedLineCount`,  \n" +
          "        (CASE  \n" +
          "            WHEN  \n" +
          "                (MAX((CASE  \n" +
          "                    WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'Manually Completed'  \n" +
          "                    WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'Auto Completed'  \n" +
          "                    ELSE 'Open'  \n" +
          "                END)) = 'Manually Completed')  \n" +
          "            THEN  \n" +
          "                GROUP_CONCAT(CONCAT('Release#:',  \n" +
          "                            ' ',  \n" +
          "                            `pold`.`releaseNumber`,  \n" +
          "                            '  \n" +
          "                                                                                                                                                                                                    ',  \n" +
          "                            'PO Release Complete Type:',  \n" +
          "                            ' ',  \n" +
          "                            (CASE  \n" +
          "                                WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'Manually Completed'  \n" +
          "                                WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'Auto Completed'  \n" +
          "                                ELSE 'Open'  \n" +
          "                            END),  \n" +
          "                            '  \n" +
          "                                                                                                                                                                                                    ',  \n" +
          "                            'PO Release Complete Reason:',  \n" +
          "                            IFNULL(`pold`.`poLineCompleteReason`, ''))  \n" +
          "                    SEPARATOR '  \n" +
          "                                                                                                                                            ')  \n" +
          "            ELSE ''  \n" +
          "        END) AS `poLineCompleteReason`  \n" +
          "    FROM  \n" +
          "        (`purchase_order_line_release_det` `pold`  \n" +
          "        JOIN `purchase_order_det` `pod` ON ((`pod`.`id` = `pold`.`refPurchaseOrderDetID`)))  \n" +
          "    WHERE  \n" +
          "        (`pold`.`isDeleted` = 0)  \n" +
          "    GROUP BY `pold`.`refPurchaseOrderDetID` , `pod`.`refPurchaseOrderID`;  \n" +
          /* **************************** Add Script Version ->  *********************************** */
          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
          "VALUES (5963,'2.00','V1',' User Story 39185: [Main Branch] Purchase Order Changes December-2021 - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
        );
        break;
      case 5963:
        allDbChangesArray.push(
          /* **************************** New Script -> 25-02-2022  *********************************** */
          "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDetails`;  \n" +
          "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDetails`(  \n" +
          "	IN ppageIndex INT,  \n" +
          "	IN precordPerPage INT,  \n" +
          "	IN pOrderBy VARCHAR(255),  \n" +
          "	IN pWhereClause VARCHAR(16383),  \n" +
          "	IN psupplierID VARCHAR(16000),  \n" +
          "	IN pshippingMethodId VARCHAR(16000),  \n" +
          "	IN psearchposotype VARCHAR(10),  \n" +
          "	IN psearchposotext VARCHAR(1000),  \n" +
          "	IN ppartIds VARCHAR(1000),  \n" +
          "    IN ppolinestatus VARCHAR(10),  \n" +
          "	IN ppostatus VARCHAR(50),  \n" +
          "	IN pfromDate DATE,  \n" +
          "	IN ptoDate DATE,  \n" +
          "    IN ponlyOtherPart boolean,  \n" +
          "    IN pwithoutOtherPart boolean,  \n" +
          "    IN pisonlyPendingLines boolean,  \n" +
          "    IN pPOComments VARCHAR(1000)  \n" +
          ")  \n" +
          "BEGIN  \n" +
          "	DECLARE pOffset INT;  \n" +
          "	DECLARE rowNumWhere VARCHAR(255);  \n" +
          "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
          "	DECLARE vTimeZone VARCHAR(50);  \n" +
          "	DECLARE vMfgCodeFormat INT;  \n" +
          "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
          "  \n" +
          "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
          "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
          "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
          "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
          "  \n" +
          "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"  \n" +
          "			SELECT  \n" +
          "				pod.id,  \n" +
          "				pom.id AS refPurchaseOrderID,  \n" +
          "				CASE  \n" +
          "					WHEN pom.status = 0 THEN 'Draft'  \n" +
          "					ELSE 'Published'  \n" +
          "				END statusName,  \n" +
          "				pod.mfgPartID,  \n" +
          "				pod.packagingID,  \n" +
          "				pod.supplierPartID,  \n" +
          "				pod.partDescription,  \n" +
          "				pod.pcbPerArray,  \n" +
          "				pod.rohsStatusID,  \n" +
          "				pod.internalRef,  \n" +
          "				pod.qty,  \n" +
          "				pod.price,  \n" +
          "				pom.shippingMethodID,  \n" +
          "				(pod.qty * pod.price) extPrice,  \n" +
          "				pod.totalRelease,  \n" +
          "				pod.lineComment,  \n" +
          "				pod.lineID,  \n" +
          "				pod.supplierQuoteNumber,  \n" +
          "				(CASE  \n" +
          "					WHEN (vups.totalReceivedQty * 100 / pod.qty) > 100 THEN 100  \n" +
          "					ELSE IFNULL(ROUND((vups.totalReceivedQty * 100 / pod.qty),  \n" +
          "									2),  \n" +
          "							0)  \n" +
          "				END) poLineCompletionPercentage,  \n" +
          "				pom.poDate,  \n" +
          "				pom.poRevision,  \n" +
          "				pom.soNumber,  \n" +
          "				pom.soDate,  \n" +
          "				c.mfgPN,  \n" +
          "				c.pidCode,  \n" +
          "				c.unit,  \n" +
          "				c.iscustom,  \n" +
          "				c.partType,  \n" +
          "				rr.name AS rohsName,  \n" +
          "				rr.rohsIcon,  \n" +
          "				FUN_GETPACKAGINGNAMEBYID(pod.packagingID) packagingName,  \n" +
          "				mc.mfgCode,  \n" +
          "				mc.mfgName,  \n" +
          "				mc.id AS mfgcodeID,  \n" +
          "				pom.poNumber,  \n" +
          "				pom.status,  \n" +
          "				pom.carrierID,  \n" +
          "				pom.poWorkingStatus,  \n" +
          "				IFNULL(vups.poLineWorkingDisplayStatus, 'Open') poLineWorkingDisplayStatus,  \n" +
          "				CASE  \n" +
          "					WHEN pom.poWorkingStatus = 'C' THEN 'Completed'  \n" +
          "					WHEN pom.poWorkingStatus = 'CA' THEN 'Canceled'  \n" +
          "					ELSE 'In Progress'  \n" +
          "				END poWorkingStatusDisplayStatus,  \n" +
          "				vups.totalReceivedQty,  \n" +
          "				vups.totalPendingQty,  \n" +
          "				vups.poLineCompleteReason,  \n" +
          "				vups.poLineCompleteTypeDisplayValue poCompleteType,  \n" +
          "				FUN_GETFORMATTEDMFGCODE(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
          "				FUN_GETUNITNAMEBYID(c.uom) uomName,  \n" +
          "				sc.mfgPN supplierPN,  \n" +
          "				pom.supplierID,  \n" +
          "				pom.termsID,  \n" +
          "				FUN_GETGENERICCATEGORYCODENAMEBYID(pom.termsID) termsName,  \n" +
          "				FUN_GETGENERICCATEGORYCODENAMEBYID(pom.shippingMethodID) shippingMethod,  \n" +
          "				FUN_GETGENERICCATEGORYCODENAMEBYID(pom.carrierID) carrierName,  \n" +
          "				pom.carrierAccountNumber,  \n" +
          "				pom.poComment,  \n" +
          "				pom.shippingComment,  \n" +
          "				pod.internalLineComment,  \n" +
          "				m.mfgcode AS supplierMfgName,  \n" +
          "				pol.otherExpense,  \n" +
          "				(IFNULL(pol.otherExpense, 0) + (pod.qty * pod.price)) totalExtPrice,  \n" +
          "				FUN_GETFORMATTEDMFGCODE(mc.mfgCode, mc.mfgName, \",vMfgCodeFormat,\") mfgcodeName,  \n" +
          "				FUN_GETUSERNAMEBYID(pod.updatedBy) updatedby,  \n" +
          "				FUN_GETUSERNAMEBYID(pod.createdBy) createdby,  \n" +
          "				FUN_GETROLEBYID(pod.createByRoleId) createdbyRole,  \n" +
          "				FUN_GETROLEBYID(pod.updateByRoleId) updatedbyRole,  \n" +
          "				(SELECT  \n" +
          "						pold.shippingDate  \n" +
          "					FROM  \n" +
          "						purchase_order_line_release_det pold  \n" +
          "					WHERE  \n" +
          "						pold.refPurchaseOrderDetID = pod.id  \n" +
          "							AND pold.isDeleted = 0  \n" +
          "					LIMIT 1) shipDate,  \n" +
          "				(SELECT  \n" +
          "						pold.promisedShipDate  \n" +
          "					FROM  \n" +
          "						purchase_order_line_release_det pold  \n" +
          "					WHERE  \n" +
          "						pold.refPurchaseOrderDetID = pod.id  \n" +
          "							AND pold.isDeleted = 0  \n" +
          "					LIMIT 1) promisedShipDate,  \n" +
          "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
          "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
          "				ps.packingSlipDate,  \n" +
          "				ps.packingSlipId,  \n" +
          "				c.custAssyPN,  \n" +
          "				(SELECT  \n" +
          "						GROUP_CONCAT(DISTINCT psmr.id, '@@@', psmr.packingSlipNumber  \n" +
          "								ORDER BY psmr.packingSlipDate DESC  \n" +
          "								SEPARATOR '\",v_GroupConcatSeparator,\"')  \n" +
          "					FROM  \n" +
          "						packing_slip_material_receive psmr  \n" +
          "							JOIN  \n" +
          "						packing_slip_material_receive_det psmrd ON psmrd.refPackingSlipMaterialRecID = psmr.id  \n" +
          "							AND psmrd.isDeleted = FALSE  \n" +
          "					WHERE  \n" +
          "						psmr.refPurchaseOrderID = pom.id  \n" +
          "							AND psmrd.refPurchaseOrderDetID = pod.id  \n" +
          "							AND psmr.receiptType = 'P'  \n" +
          "							AND psmr.isDeleted = FALSE  \n" +
          "					GROUP BY psmr.refPurchaseOrderID , psmrd.refPurchaseOrderDetID) packingSlip,  \n" +
          "				pod.isdeleted,  \n" +
          "				IFNULL(vups.poLineWorkingStatus, 'P') poLineWorkingStatus,  \n" +
          "				pod.isLineCustConsigned,  \n" +
          "				CASE  \n" +
          "					WHEN pod.isLineCustConsigned = 0 THEN 'No'  \n" +
          "					ELSE 'Yes'  \n" +
          "				END isLineCustConsignedValue,  \n" +
          "				pod.lineCustomerID,  \n" +
          "				FUN_GETFORMATTEDMFGCODE(pm.mfgCode, pm.mfgName, \",vMfgCodeFormat,\") customerName,  \n" +
          "				m.mfgName AS POSupplierName,  \n" +
          "				pod.isNonUMIDStock,  \n" +
          "				CASE  \n" +
          "					WHEN pod.isNonUMIDStock = 0 THEN 'No'  \n" +
          "					ELSE 'Yes'  \n" +
          "				END isNonUMIDStockValue,  \n" +
          "				pom.lockStatus  \n" +
          "			FROM  \n" +
          "				purchase_order_det pod  \n" +
          "					LEFT JOIN  \n" +
          "						(SELECT  \n" +
          "							MAX(psm.receiptDate) packingSlipDate,  \n" +
          "								MAX(psm.id) packingSlipId,  \n" +
          "								psmr.refPurchaseOrderDetID  \n" +
          "						FROM  \n" +
          "							packing_slip_material_receive psm  \n" +
          "						INNER JOIN packing_slip_material_receive_det psmr ON psmr.refPackingSlipMaterialRecID = psm.id  \n" +
          "							AND psmr.isdeleted = 0  \n" +
          "						GROUP BY psmr.refPurchaseOrderDetID) ps ON ps.refPurchaseOrderDetID = pod.id  \n" +
          "					LEFT JOIN  \n" +
          "						(SELECT  \n" +
          "							SUM(qty * price) AS otherExpense, refPurchaseOrderDetID  \n" +
          "						FROM  \n" +
          "							purchase_order_line_othercharges  \n" +
          "						WHERE  \n" +
          "							isDeleted = 0  \n" +
          "						GROUP BY refPurchaseOrderDetID) pol ON pol.refPurchaseOrderDetID = pod.id  \n" +
          "					LEFT JOIN  \n" +
          "						purchase_order_mst pom ON pom.id = pod.refPurchaseOrderID AND pom.isdeleted = 0  \n" +
          "					LEFT JOIN  \n" +
          "						vu_purchaseorder_shipping_release vups ON vups.refPurchaseOrderDetID = pod.id  \n" +
          "					JOIN  \n" +
          "						mfgcodemst m ON m.id = pom.supplierID  \n" +
          "					LEFT JOIN  \n" +
          "						component c ON c.id = pod.mfgPartID  \n" +
          "					LEFT JOIN  \n" +
          "						component sc ON sc.id = pod.supplierPartID  \n" +
          "					LEFT JOIN  \n" +
          "						mfgcodemst mc ON mc.id = c.mfgcodeID  \n" +
          "					LEFT JOIN  \n" +
          "						mfgcodemst pm ON pm.id = pod.lineCustomerID  \n" +
          "					LEFT JOIN  \n" +
          "						rfq_rohsmst rr ON rr.id = pod.rohsStatusID  \n" +
          "			WHERE  \n" +
          "				pod.isdeleted = 0  \n" +
          "	\");  \n" +
          "  \n" +
          "	IF(psupplierID IS NOT NULL)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.supplierID in (',psupplierID,')');  \n" +
          "	END IF;  \n" +
          "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');  \n" +
          "	END IF;  \n" +
          "	IF(psearchposotext IS NOT NULL)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  ', CASE WHEN psearchposotype=\"C\" THEN CONCAT(' = \"', psearchposotext ,'\" ') ELSE CONCAT(' like \"%',psearchposotext,'%\" ') END, ' OR pom.poNumber ', CASE WHEN psearchposotype=\"C\" THEN CONCAT(' = \"', psearchposotext ,'\" ') ELSE CONCAT(' like \"%',psearchposotext,'%\" ') END,')');  \n" +
          "	END IF;  \n" +
          "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate BETWEEN ''',pfromDate,''' AND ''',ptoDate,''')');  \n" +
          "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate =''',pfromDate,''')');  \n" +
          "	END IF;  \n" +
          "    IF(ppolinestatus IS NOT NULL)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" and poLineWorkingStatus = '\", ppolinestatus ,\"'\");  \n" +
          "	END IF;  \n" +
          "	IF(ppostatus IS NOT NULL)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" and pom.poWorkingStatus IN (\", ppostatus ,\")\");  \n" +
          "	END IF;  \n" +
          "    IF(pPOComments IS NOT NULL AND pPOComments != '')THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, \"  \n" +
          "				AND (pom.shippingComment LIKE '%\",pPOComments,\"%'  \n" +
          "                OR pod.partDescription LIKE '%\",pPOComments,\"%'  \n" +
          "                OR pod.internalLineComment LIKE '%\",pPOComments,\"%'  \n" +
          "                OR pod.lineComment LIKE '%\",pPOComments,\"%'  \n" +
          "                OR pom.poComment LIKE '%\",pPOComments,\"%')  \n" +
          "                \");  \n" +
          "    END IF;  \n" +
          "	IF(ppartIds IS NOT NULL)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,'))');  \n" +
          "	END IF;  \n" +
          "    IF(pwithoutOtherPart=TRUE)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and c.partType!=4');  \n" +
          "	END IF;  \n" +
          "    IF(ponlyOtherPart=TRUE)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and c.partType=4');  \n" +
          "	END IF;  \n" +
          "	IF(pisonlyPendingLines=TRUE)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and poLineWorkingStatus=\"P\"');  \n" +
          "	END IF;  \n" +
          "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
          "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
          "	ELSE  \n" +
          "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
          "	END IF;  \n" +
          "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
          "		SET pWhereClause = '1=1';  \n" +
          "	END IF;  \n" +
          "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
          "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
          "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
          "	ELSE  \n" +
          "		SET rowNumWhere = '';  \n" +
          "	END IF;  \n" +
          "	/* to get total count of rows */  \n" +
          "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
          "	PREPARE query2 FROM @SQLStatement2;  \n" +
          "	EXECUTE query2;  \n" +
          "	DEALLOCATE PREPARE query2;  \n" +
          "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
          "    PREPARE query1 FROM @SQLStatement2;  \n" +
          "	EXECUTE query1;  \n" +
          "	DEALLOCATE PREPARE query1;  \n" +
          "END;  \n" +
          /* **************************** New Script -> 25-02-2022  *********************************** */
          "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderSummaryDeatils`;  \n" +
          "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderSummaryDeatils`(  \n" +
          "	IN ppageIndex INT,  \n" +
          "	IN precordPerPage INT,  \n" +
          "	IN pOrderBy VARCHAR(255),  \n" +
          "	IN pWhereClause VARCHAR(16383),  \n" +
          "	IN psupplierID VARCHAR(16000),  \n" +
          "	IN pshippingMethodId VARCHAR(16000),  \n" +
          "	IN psearchposotype VARCHAR(10),  \n" +
          "	IN psearchposotext VARCHAR(1000),  \n" +
          "	IN ppartIds VARCHAR(1000),  \n" +
          "	IN ppostatus VARCHAR(50),  \n" +
          "	IN pfromDate DATE,  \n" +
          "	IN ptoDate DATE,  \n" +
          "   IN pLockFilterStatus VARCHAR(50),  \n" +
          "   IN pPoPostingStatusFilter VARCHAR(20),  \n" +
          "   IN pPOComments VARCHAR(1000)  \n" +
          ")  \n" +
          "BEGIN  \n" +
          "	DECLARE pOffset INT;  \n" +
          "	DECLARE rowNumWhere VARCHAR(255);  \n" +
          "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
          "	DECLARE vTimeZone VARCHAR(50);  \n" +
          "    DECLARE vMfgCodeFormat INT;  \n" +
          "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
          "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
          "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
          "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
          "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
          "  \n" +
          "	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(\"  \n" +
          "			SELECT  \n" +
          "				pom.id,  \n" +
          "				pom.poNumber,  \n" +
          "				pom.supplierID,  \n" +
          "				pom.poDate,  \n" +
          "				pom.soNumber,  \n" +
          "				pom.soDate,  \n" +
          "				pom.termsID,  \n" +
          "				pom.shippingMethodID,  \n" +
          "				CASE  \n" +
          "					WHEN pom.status = 0 THEN 'Draft'  \n" +
          "					ELSE 'Published'  \n" +
          "				END statusName,  \n" +
          "				pom.status,  \n" +
          "				pom.poComment,  \n" +
          "				pom.shippingComment,  \n" +
          "				pom.serialNumber,  \n" +
          "				pom.poRevision,  \n" +
          "				pom.carrierID,  \n" +
          "				pom.carrierAccountNumber,  \n" +
          "				CASE  \n" +
          "					WHEN pom.shippingInsurance = 0 THEN 'No'  \n" +
          "					ELSE 'Yes'  \n" +
          "				END shippingInsuranceName,  \n" +
          "				pom.shippingInsurance,  \n" +
          "				FUN_GETADDRESSBYIDANDCONTACTPERSONID(pom.supplierAddressID,  \n" +
          "						pom.supplierContactPersonID) AS supplierAddress,  \n" +
          "				FUN_GETADDRESSBYIDANDCONTACTPERSONID(pom.shippingAddressID,  \n" +
          "						pom.shippingContactPersonID) AS shippingAddress,  \n" +
          "				FUN_GETADDRESSBYIDANDCONTACTPERSONID(pom.intermediateShipmentID,  \n" +
          "						pom.intermediateContactPersonID) AS intermediateAddress,  \n" +
          "				CASE  \n" +
          "					WHEN pom.isBlanketPO = 0 THEN 'No'  \n" +
          "					ELSE 'Yes'  \n" +
          "				END blanketPO,  \n" +
          "				pom.isBlanketPO,  \n" +
          "				m.mfgcode,  \n" +
          "				pom.poCompleteReason,  \n" +
          "                CASE  \n" +
          "					WHEN pom.poCompleteType = 'A' THEN 'Auto Completed'  \n" +
          "					WHEN pom.poCompleteType = 'M' THEN 'Manually Completed'  \n" +
          "					ELSE 'Open'  \n" +
          "				END  \n" +
          "				poCompleteType,  \n" +
          "				pom.cancleReason,  \n" +
          "				FUN_GETFORMATTEDMFGCODE(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
          "				pom.poWorkingStatus,  \n" +
          "				pom.CancellationConfirmed,  \n" +
          "				CASE  \n" +
          "					WHEN pom.CancellationConfirmed = 0 THEN 'No'  \n" +
          "					ELSE 'Yes'  \n" +
          "				END CancellationConfirmedStatus,  \n" +
          "				CASE  \n" +
          "					WHEN pom.poWorkingStatus = 'P' THEN 'In Progress'  \n" +
          "					WHEN pom.poWorkingStatus = 'C' THEN 'Completed'  \n" +
          "					ELSE 'Canceled'  \n" +
          "				END workingStatusName,  \n" +
          "				IFNULL(vgf.cnt, 0) poDocumentCount,  \n" +
          "				FUN_GETFOBBYID(pom.freeOnBoardId) freeOnBoard,  \n" +
          "				FUN_GETGENERICCATEGORYCODENAMEBYID(pom.termsID) termsName,  \n" +
          "				FUN_GETGENERICCATEGORYCODENAMEBYID(pom.shippingMethodID) shippingMethod,  \n" +
          "				FUN_GETGENERICCATEGORYCODENAMEBYID(pom.carrierID) carrierName,  \n" +
          "				FUN_GETUSERNAMEBYID(pom.updatedBy) updatedby,  \n" +
          "				FUN_GETUSERNAMEBYID(pom.createdBy) createdby,  \n" +
          "				FUN_GETROLEBYID(pom.createByRoleId) createdbyRole,  \n" +
          "				FUN_GETROLEBYID(pom.updateByRoleId) updatedbyRole,  \n" +
          "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(pom.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
          "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(pom.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
          "				(SELECT  \n" +
          "						id  \n" +
          "					FROM  \n" +
          "						packing_slip_material_receive  \n" +
          "					WHERE  \n" +
          "						refPurchaseOrderID = pom.id  \n" +
          "							AND receiptType = 'P'  \n" +
          "							AND isdeleted = FALSE  \n" +
          "					ORDER BY receiptDate DESC  \n" +
          "					LIMIT 1) packingSlipId,  \n" +
          "				pom.isCustConsigned,  \n" +
          "				CASE  \n" +
          "					WHEN pom.isCustConsigned = 0 THEN 'No'  \n" +
          "					ELSE 'Yes'  \n" +
          "				END isCustConsignedValue,  \n" +
          "				pom.customerID,  \n" +
          "				FUN_GETFORMATTEDMFGCODE(pm.mfgcode, pm.mfgName, \",vMfgCodeFormat,\") customerName,  \n" +
          "				pom.isNonUMIDStock,  \n" +
          "				CASE  \n" +
          "					WHEN pom.isNonUMIDStock = 0 THEN 'No'  \n" +
          "					ELSE 'Yes'  \n" +
          "				END isNonUMIDStockValue,  \n" +
          "				pom.lockStatus,  \n" +
          "				(CASE  \n" +
          "					WHEN pom.lockStatus = 'NA' THEN 'Not Applicable'  \n" +
          "					WHEN pom.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
          "					WHEN pom.lockStatus = 'LC' THEN 'Locked'  \n" +
          "					ELSE NULL  \n" +
          "				END) lockStatusValue,  \n" +
          "				FUN_GETUSERNAMEBYID(pom.lockedBy) lockByName,  \n" +
          "				FUN_GETROLEBYID(pom.lockedByRoleId) lockedByRoleName,  \n" +
          "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(pom.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
          "				(SELECT  \n" +
          "						GROUP_CONCAT(DISTINCT psmr.id, '@@@', psmr.packingSlipNumber  \n" +
          "								ORDER BY psmr.packingSlipDate DESC  \n" +
          "								SEPARATOR '\",v_GroupConcatSeparator,\"')  \n" +
          "					FROM  \n" +
          "						packing_slip_material_receive psmr  \n" +
          "					WHERE  \n" +
          "						psmr.refPurchaseOrderID = pom.id  \n" +
          "							AND psmr.receiptType = 'P'  \n" +
          "							AND psmr.isDeleted = FALSE  \n" +
          "					GROUP BY psmr.refPurchaseOrderID) packingSlip,  \n" +
          "				vups.poPendingLine,  \n" +
          "				vups.poCompletedLine,  \n" +
          "				pod.totalAmount,  \n" +
          "				pod.totalPOLines,  \n" +
          "				pod.totalItems,  \n" +
          "				pod.totalOtherItems,  \n" +
          "				(CASE  \n" +
          "					WHEN  \n" +
          "						(IFNULL((vups.poCompletedLine * 100 / pod.totalPOLines),  \n" +
          "								0)) > 100  \n" +
          "					THEN  \n" +
          "						100  \n" +
          "					ELSE IFNULL(ROUND((vups.poCompletedLine * 100 / pod.totalPOLines),  \n" +
          "									2),  \n" +
          "							0)  \n" +
          "				END) poCompletionPercentage  \n" +
          "			FROM  \n" +
          "				purchase_order_mst pom  \n" +
          "					JOIN  \n" +
          "				mfgcodemst m ON m.id = pom.supplierID  \n" +
          "					LEFT JOIN  \n" +
          "				vu_genericfilescount vgf ON vgf.entityID = - 20  \n" +
          "					AND vgf.refTransID = pom.id  \n" +
          "					LEFT JOIN  \n" +
          "				(SELECT  \n" +
          "					SUM(CASE  \n" +
          "							WHEN poLineWorkingStatus = 'P' THEN 1  \n" +
          "							ELSE 0  \n" +
          "						END) poPendingLine,  \n" +
          "						SUM(CASE  \n" +
          "							WHEN poLineWorkingStatus = 'C' THEN 1  \n" +
          "							ELSE 0  \n" +
          "						END) poCompletedLine,  \n" +
          "						refPurchaseOrderID  \n" +
          "				FROM  \n" +
          "					vu_purchaseorder_shipping_release  \n" +
          "				GROUP BY refPurchaseOrderID) vups ON vups.refPurchaseOrderID = pom.id  \n" +
          "					LEFT JOIN  \n" +
          "				(SELECT  \n" +
          "					SUM((p.qty * p.price) + IFNULL(FUN_GETOTHERCHARGESBYPURCHASEORDERDETID(p.id), 0)) totalAmount,  \n" +
          "						COUNT(1) totalPOLines,  \n" +
          "						SUM(CASE  \n" +
          "							WHEN c.partType != 4 AND c.id IS NOT NULL THEN 1  \n" +
          "							ELSE 0  \n" +
          "						END) totalItems,  \n" +
          "						SUM(CASE  \n" +
          "							WHEN c.partType = 4 AND c.id IS NOT NULL THEN 1  \n" +
          "							ELSE 0  \n" +
          "						END) totalOtherItems,  \n" +
          "						p.refPurchaseOrderID  \n" +
          "				FROM  \n" +
          "					purchase_order_det p  \n" +
          "				LEFT JOIN component c ON c.id = p.mfgPartID  \n" +
          "				WHERE  \n" +
          "					p.isdeleted = 0  \n" +
          "				GROUP BY p.refPurchaseOrderID) pod ON pod.refPurchaseOrderID = pom.id  \n" +
          "					LEFT JOIN  \n" +
          "				mfgcodemst pm ON pm.id = pom.customerID  \n" +
          "			WHERE  \n" +
          "				pom.isdeleted = 0\");  \n" +
          "	IF(psupplierID IS NOT NULL)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.supplierID in (',psupplierID,')');  \n" +
          "	END IF;  \n" +
          "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');  \n" +
          "	END IF;  \n" +
          "	IF(psearchposotext IS NOT NULL)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (pom.soNumber  ', CASE WHEN psearchposotype=\"C\" THEN CONCAT(' like \"%',psearchposotext,'%\" ') ELSE CONCAT(' = \"', psearchposotext ,'\" ') END, ' OR pom.poNumber ', CASE WHEN psearchposotype=\"C\" THEN CONCAT(' like \"%',psearchposotext,'%\" ') ELSE CONCAT(' = \"', psearchposotext ,'\" ') END,')');  \n" +
          "	END IF;  \n" +
          "    IF(pPOComments IS NOT NULL AND pPOComments != '')THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, \"  \n" +
          "				AND (pom.shippingComment LIKE '%\",pPOComments,\"%'  \n" +
          "                OR pom.poComment LIKE '%\",pPOComments,\"%')  \n" +
          "                \");  \n" +
          "    END IF;  \n" +
          "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (pom.poDate  BETWEEN ''',pfromDate,''' AND ''',ptoDate,''')');  \n" +
          "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (pom.poDate = ''',pfromDate,''')');  \n" +
          "	END IF;  \n" +
          "    IF(ppostatus IS NOT NULL)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and pom.poWorkingStatus IN (\", ppostatus ,\")\");  \n" +
          "	END IF;  \n" +
          "	IF(ppartIds IS NOT NULL)THEN  \n" +
          "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' AND exists (select 1 from purchase_order_det pod where pod.refPurchaseOrderID = pom.id and pod.isDeleted = 0 and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,')))');  \n" +
          "	END IF;  \n" +
          "    IF(pLockFilterStatus IS NOT NULL)THEN  \n" +
          "    	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and pom.lockStatus IN (\", pLockFilterStatus ,\")\");  \n" +
          "	END IF;  \n" +
          "    IF(pPoPostingStatusFilter IS NOT NULL)THEN  \n" +
          "    	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and pom.status = '\", pPoPostingStatusFilter ,\"'\");  \n" +
          "	END IF;  \n" +
          "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
          "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
          "	ELSE  \n" +
          "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
          "	END IF;  \n" +
          "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
          "		SET pWhereClause = '1=1';  \n" +
          "	END IF;  \n" +
          "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
          "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
          "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
          "	ELSE  \n" +
          "		SET rowNumWhere = '';  \n" +
          "	END IF;  \n" +
          "	/* to get total count of rows */  \n" +
          "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
          "	PREPARE query1 FROM @SQLStatement1;  \n" +
          "	EXECUTE query1;  \n" +
          "	DEALLOCATE PREPARE query1;  \n" +
          "    SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
          "    PREPARE query2 FROM @SQLStatement2;  \n" +
          "	EXECUTE query2;  \n" +
          "    DEALLOCATE PREPARE query2;  \n" +
          "END;  \n" +
          /* **************************** Add Script Version ->  *********************************** */
          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
          "VALUES (5964,'2.00','V1',' User Story 40988: [Main Branch] Demo Improvement points for Add some filters in Advance Filter given on 01-02-2022 - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
        );
        break;
      case 5964:
        allDbChangesArray.push(
          /* **************************** New Script -> 25-02-2022  *********************************** */
          "UPDATE page_detail  \n" +
          "SET  \n" +
          "    isReadOnlyDeveloped = 1  \n" +
          "WHERE  \n" +
          "    pageName IN ('Add Purchase Order' , 'Add Purchase Order Documents','Add Purchase Order MISC')  \n" +
          "        AND isReadOnlyDeveloped = 0  \n" +
          "        AND isdeleted = 0;  \n" +
          /* **************************** Add Script Version ->  *********************************** */
          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
          "VALUES (5965,'2.00','V1',' User Story 39185: [Main Branch] Purchase Order Changes December-2021 - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5965:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-02-2022 ******************************************* */
                "DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pBinID INT,  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pClusterWHID INT,  \n" +
                "	pKitSalesOrderDetID INT,  \n" +
                "	pKitAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_Where VARCHAR(10000);  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "  \n" +
                "	SET v_Where = \"\";  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "    IF (pGlobalSearchUIDString IS NOT NULL ) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.uid LIKE '%\", pGlobalSearchUIDString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  	IF ( pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.uid LIKE '%\", pSearchUIDString ,\"%' \");  \n" +
                "	END IF;  \n" +
                "	/* old Logic  \n" +
                "    IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND (css.id IN (  \n" +
                "				SELECT 	id  \n" +
                "				FROM 	component_sid_stock  \n" +
                "				WHERE 	isdeleted = 0  \n" +
                "						AND (uid LIKE '%\", pGlobalSearchUIDString ,\"%' AND uid LIKE '%\", pSearchUIDString ,\"%')  \n" +
                "			)  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
                "			SELECT 	id  \n" +
                "			FROM 	component_sid_stock  \n" +
                "			WHERE 	deletedAt IS NULL  \n" +
                "					AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchUIDString IS NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
                "			SELECT 	id  \n" +
                "			FROM 	component_sid_stock  \n" +
                "			WHERE 	deletedAt IS NULL  \n" +
                "					AND uid LIKE '%\", pSearchUIDString ,\"%'  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  */  \n" +
                "	IF (pBinID IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.binID  = \", pBinID);  \n" +
                "	END IF;  \n" +
                "   IF (pBinID IS  NULL and pClusterWHID is null  ) THEN  /*Xfer Screen if bin and warehouse both nulll then dont return any result of UMID*/  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  1 = 0\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pClusterWHID IS NOT NULL and pBinID is null) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.binID  in (SELECT id FROM binmst bm WHERE   isdeleted = 0 and  \n" +
                "															 bm.warehouseid in (Select id from warehousemst where id = \", pClusterWHID, \" and warehouseType ='SMC' )	)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.uid like '%\", pSearchString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"  \n" +
                "				SELECT 		css.id,  \n" +
                "						css.scanlabel,  \n" +
                "						css.pkgQty,  \n" +
                "						css.uid,  \n" +
                "						c.PIDCode,  \n" +
                "						c.mfgcodeID,  \n" +
                "						c.mfgPN,  \n" +
                "                        c.mfgPNDescription,  \n" +
                "						mfg.mfgCode,  \n" +
                "						mfg.mfgName,  \n" +
                "						ro.rohsIcon,  \n" +
                "						ro.name AS rohsName,  \n" +
                "						css.nickName,  \n" +
                "						css.binID,  \n" +
                "						cast(NULL as char(50)) binName,  \n" +
                "						0 warehouseID,  \n" +
                "						cast(NULL as char(50)) warehouseName,  \n" +
                "						0 parentWHID,  \n" +
                "						cast(NULL as char(50)) deptName,  \n" +
                "						css.uom,  \n" +
                "						cast('' as char(100)) uomName,  \n" +
                "						false isAllocatedToKit,  \n" +
                "						css.receiveMaterialType,  \n" +
                "						css.refcompid,  \n" +
                "						css.pkgUnit,  \n" +
                "						false isBelongsToSameKit,  \n" +
                "						fun_getMountingTypeNameByID(c.mountingTypeID) mountingTypeName,  \n" +
                "						0 refSalesOrderDetID, 	0 assyID,  \n" +
                "						fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKits,  \n" +
                "						cast(NULL as char(50)) warehouseType,  \n" +
                "						c.isCustom,  \n" +
                "						css.updatedAt,  \n" +
                "                        fun_ConvertInternalDateCodeIntoDateInDefaultFormate(css.dateCode) internalDateCodeInDate  \n" +
                "				FROM 		component_sid_stock css  \n" +
                "				LEFT OUTER JOIN component c ON c.id=css.refcompid AND c.isdeleted=0  \n" +
                "				LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND ro.isdeleted=0  \n" +
                "				LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND mfg.isdeleted=0  \n" +
                "				WHERE	css.isdeleted = 0  \n" +
                "							AND css.isinStk = 1  \n" +
                "			\", v_Where , \" ORDER BY css.updatedAt DESC \"  \n" +
                "		);  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@SQLStatement1,\" ) c \");  \n" +
                "	PREPARE query1 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS Results AS \", @SQLStatement1, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @SQLStatement1;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	-- SET Bin name  \n" +
                "	UPDATE 	Results r, binmst b  \n" +
                "	SET   	r.binName = b.Name, r.warehouseID = b.WarehouseID  \n" +
                "	WHERE	r.binID = b.id;  \n" +
                "  \n" +
                "	-- SET warehouse name  \n" +
                "	UPDATE 	Results r, warehousemst w  \n" +
                "	SET   	r.warehouseName = w.Name, r.parentWHID = w.parentWHID, r.warehouseType = w.warehouseType  \n" +
                "	WHERE	r.warehouseID = w.id;  \n" +
                "  \n" +
                "	-- SET department name  \n" +
                "	UPDATE 	Results r, warehousemst w  \n" +
                "	SET   	r.deptName = w.Name  \n" +
                "	WHERE	r.parentWHID = w.id;  \n" +
                "  \n" +
                "	-- Set UOM  \n" +
                "	UPDATE 	Results r, uoms u  \n" +
                "	SET   	r.uomName = u.unitName  \n" +
                "	WHERE	r.uom = u.id;  \n" +
                "  \n" +
                "	-- Set UMID is allocated to kit  \n" +
                "	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
                "		UPDATE 	Results r, kit_allocation k  \n" +
                "		SET   	r.isAllocatedToKit = TRUE,  \n" +
                "			r.refSalesOrderDetID = k.refSalesOrderDetID,  \n" +
                "			r.assyID = k.assyID,  \n" +
                "			r.isBelongsToSameKit = (CASE WHEN k.refSalesOrderDetID = pKitSalesOrderDetID AND k.assyID = pKitAssyID THEN TRUE ELSE FALSE END)  \n" +
                "		WHERE	r.id = k.refUIDId  \n" +
                "		AND 	k.status = 'A'  \n" +
                "		AND 	k.refSalesOrderDetID = pKitSalesOrderDetID  \n" +
                "		AND 	k.assyID = pKitAssyID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results  ORDER BY isAllocatedToKit ASC, internalDateCodeInDate ASC  \"); -- order by isBelongsToSameKit desc  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5966,'2.00','V1','User Story 41587: [Main branch]Demo improvement point related to Xfer Bulk Material screen (22-02-2022) - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5966:
          allDbChangesArray.push(
            /* **************************** New Script -> 26-02-2022  *********************************** */
            "DROP procedure IF EXISTS `Sproc_GetFilterComponentlist`;  \n" +
            "CREATE PROCEDURE `Sproc_GetFilterComponentlist`(  \n" +
            "	IN searchString VARCHAR(255),  \n" +
            "	IN pIsSalesOrder TINYINT,  \n" +
            "    IN pID INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pWhereClause VARCHAR(16383);  \n" +
            "	SET pWhereClause = '1=1' ;  \n" +
            "	SET @Sproc_GetFilterComponentlist = CONCAT(\"  \n" +
            "		SELECT  \n" +
            "			c.mfgCodeID,  \n" +
            "            c.id,  \n" +
            "            c.PIDCode,  \n" +
            "            c.mfgPn,  \n" +
            "			CONCAT('(',mg.mfgcode,')',' ',c.mfgPn,' | ',c.PIDCode, CASE WHEN c.productionPN IS NULL THEN '' ELSE ' | ' END,IFNULL(c.productionPN,'')) componentParts  \n" +
            "		FROM  \n" +
            "			`component` c  \n" +
            "				JOIN  \n" +
            "			mfgcodemst mg ON mg.id=c.mfgCodeID  \n" +
            "		WHERE  \n" +
            "			c.isDeleted=0 AND c.isgoodpart=1  \n" +
            "	\");  \n" +
            "  \n" +
            "	IF(pIsSalesOrder=1)THEN  \n" +
            "		SET @Sproc_GetFilterComponentlist=CONCAT(@Sproc_GetFilterComponentlist,' AND c.refSupplierMfgpnComponentID IS NULL');  \n" +
            "	END IF;  \n" +
            "	IF(pID IS NOT NULL AND pID != '')THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,' AND c.id = ', pID);  \n" +
            "	END IF;  \n" +
            "    IF(searchString IS NOT NULL AND searchString != '')THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause,' AND ( componentParts LIKE ''%', searchString, '%'')');  \n" +
            "	END IF;  \n" +
            "	SET @SQLStatement1 = CONCAT(\"SELECT * FROM ( \", @Sproc_GetFilterComponentlist,\" ) c  WHERE \", pWhereClause);  \n" +
            "    PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "END;  \n" +
            /* **************************** Add Script Version -> 26-02-2022 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5967,'2.00','V1',' User Story 41340: [Main Branch] Create Directive for Purchase Order List page - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
          );
          break;
        case 5967:
            allDbChangesArray.push(
            /* **************************** New Script -> 26-02-2022*********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesOrderSummaryList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pfilterPOStatus VARCHAR(20)  ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "    IN pDateType VARCHAR(10),  \n" +
                "    IN pSearchComments VARCHAR(200),  \n" +
                "    IN ppartIds VARCHAR(16000)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE v_mfrFormat INT;  \n" +
                "		DECLARE v_empFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
                "       s.salesOrderNumber,  \n" +
                "       s.poNumber,  \n" +
                "       s.poDate,  \n" +
                "       s.customerID,  \n" +
                "       s.contactPersonID,  \n" +
                "       s.billingAddressID,  \n" +
                "       s.shippingAddressID,  \n" +
                "       s.shippingMethodID,  \n" +
                "       s.revision,  \n" +
                "       s.shippingComment,  \n" +
                "       s.termsID,  \n" +
                "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
                "       CASE WHEN s.blanketPOOption=1 THEN 'Use This Blanket PO# for All Releases' WHEN s.blanketPOOption=2 THEN 'Link Future PO(s) to This Blanket PO' WHEN s.blanketPOOption=3 THEN 'Use Blanket PO# and Release# for All Releases' ELSE '' END blanketPOOptionText,  \n" +
                "       s.blanketPOOption,  \n" +
                "       s.status,  \n" +
                "       s.soDate,  \n" +
                "       s.revisionChangeNote,  \n" +
                "       s.salesCommissionTo,  \n" +
                "       s.intermediateShipmentId,  \n" +
                "       s.freeOnBoardId,  \n" +
                "       s.internalComment as internalCommentSo,  \n" +
                "       s.serialNumber,  \n" +
                "       s.carrierID,  \n" +
                "       s.carrierAccountNumber,  \n" +
                "       s.originalPODate,  \n" +
                "       s.isLegacyPO,  \n" +
                "       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
                "       s.isRmaPO,  \n" +
                "       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
                "       s.poRevision,  \n" +
                "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
                "       s.isBlanketPO,  \n" +
                "       fun_GetFormattedMfgCode(mg.mfgCode,mg.mfgName,\",v_mfrFormat,\") companyName,  \n" +
                "       mg.mfgName,  \n" +
                "       mg.mfgCode,  \n" +
                "       s.poRevisionDate,  \n" +
                "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
                "        s.linkToBlanketPO,  \n" +
                "        CASE WHEN s.linkToBlanketPO=1 THEN 'Yes' ELSE 'No' END linkToBlanketPOText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
                "       fb.name freeOnBoardName,  \n" +
                "       s.`rmaNumber` AS `rmaNumber`,  \n" +
                "	   s.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "	   (CASE WHEN (s.`isDebitedByCustomer` = 1) THEN 'Yes' ELSE 'No' END) AS `debitedByCustText`,  \n" +
                "       s.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "       s.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "		s.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "       (CASE  WHEN (s.`isReworkRequired` = 1) THEN 'Yes'  ELSE 'No'  END) AS `reworkReqText`,  \n" +
                "	   s.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "      ifnull(sodCnt.totalLineCount,0)  totalSOLines,  \n" +
                "       ifnull(sodCnt.completedLineCount,0) totalCompletedSOLines,  \n" +
                "       (case when sodCnt.totalLineCount is null then 0 else  Round((sodCnt.completedLineCount * 100/sodCnt.totalLineCount),2) end)soCompletionPercentage,  \n" +
                "      (case when sodCnt.canceledLineCount = ifnull(sodCnt.totalLineCount,0) then 'Canceled'  \n" +
                "			when (sodCnt.canceledLineCount + sodCnt.completedLineCount) = ifnull(sodCnt.totalLineCount,0)  then 'Completed'  \n" +
                "            else 'In Progress' end) salesOrderDetStatusConvertedValues,  \n" +
                "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
                "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
                "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
                "			fun_getAddressbyID(s.billingAddressID) billingAddressText,  \n" +
                "			fun_getAddressbyID(s.shippingAddressID) shippingAddressText,  \n" +
                "			fun_getAddressbyID(s.intermediateShipmentId) intermediateText,  \n" +
                "			fun_contactPersonDetailByID(s.billingContactPersonID) billToContactPerson,  \n" +
                "			fun_contactPersonDetailByID(s.shippingContactPersonID) shipToToContactPerson,  \n" +
                "			fun_contactPersonDetailByID(s.intermediateContactPersonID) markToToContactPerson,  \n" +
                "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
                "		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  ,  \n" +
                "               fun_GetEmployeeFormattedName(salecomm.firstName,salecomm.middleName,salecomm.lastName,salecomm.initialName,\",v_empFormat,\") salesCommName  \n" +
                "			FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
                "			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
                "            LEFT JOIN employees salecomm ON salecomm.id = s.salesCommissionTo and salecomm.isDeleted = 0  \n" +
                "			LEFT JOIN ( select sod.refSalesOrderID as soId ,  \n" +
                "							sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
                "							count(1) totalLineCount,  \n" +
                "                            sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
                "                            From salesorderdet sod where sod.isDeleted = 0  \n" +
                "                            Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = s.id  \n" +
                "			WHERE s.isdeleted=0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "			IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		  SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	        IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "		END IF;  \n" +
                "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "		END IF;  \n" +
                "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "			IF(psearchposotype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "			IF(psearchextPricetype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "        IF(pIsRmaPO = 1) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND isRmaPO = 1');  \n" +
                "		END IF;  \n" +
                "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "			IF pDateType='SO' THEN  \n" +
                "				SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "			ELSEIF pDateType='PO' THEN  \n" +
                "				SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromDate,''' and poDate<=''',ptoDate,''')');  \n" +
                "			ELSEIF pDateType='PR' THEN  \n" +
                "				SET pWhereClause=CONCAT(pWhereClause, ' and (poRevisionDate>=''',pfromDate,''' and poRevisionDate<=''',ptoDate,''')');  \n" +
                "			END IF;  \n" +
                "			-- SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "			IF pDateType='SO' THEN  \n" +
                "				SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "			ELSEIF pDateType='PO' THEN  \n" +
                "				SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromDate,''')');  \n" +
                "			ELSEIF pDateType='PR' THEN  \n" +
                "				SET pWhereClause=CONCAT(pWhereClause, ' and (poRevisionDate>=''',pfromDate,''')');  \n" +
                "			END IF;  \n" +
                "			-- SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "			IF pDateType='SO' THEN  \n" +
                "				SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "			ELSEIF pDateType='PO' THEN  \n" +
                "				SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoDate,''')');  \n" +
                "			ELSEIF pDateType='PR' THEN  \n" +
                "				SET pWhereClause=CONCAT(pWhereClause, ' and (poRevisionDate<=''',ptoDate,''')');  \n" +
                "			END IF;  \n" +
                "			-- SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "       /* IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "		ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "		ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "		END IF;  */  \n" +
                "        IF pSearchComments IS NOT NULL AND pSearchComments <> '' THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (internalCommentSo like '%\", pSearchComments, \"%'  \n" +
                "									OR shippingComment like '%\", pSearchComments, \"%')\" );  \n" +
                "		END IF;  \n" +
                "        IF ppartIds IS NOT NULL THEN  \n" +
                "              SET pWhereClause= CONCAT(pWhereClause, \" AND c.id in (select refSalesOrderID from salesorderdet where isDeleted =0 and FIND_IN_SET(partID ,'\",ppartIds,\"'))\");  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                " -- select @SQLStatement2;  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "  \n" +
                "			 EXECUTE query1;  \n" +
                "		       DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
            /* **************************** Add Script Version -> 26-02-2022 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5968,'2.00','V1','Bug 41668: QA Testing issues of US 39398: UI updates for advance filter changes  - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5968:
              allDbChangesArray.push(
              /* **************************** New Script -> 21-02-2022 *********************************** */
                 "ALTER TABLE `who_bought_who`  \n" +
                  "ADD INDEX `IDX_who_bougth_who` (`buyBy` ASC, `buyTo` ASC, `isDeleted` ASC) VISIBLE;  \n" +
                  "DROP function IF EXISTS `fun_getAcquiredMFRList`;  \n" +
                  "CREATE FUNCTION `fun_getAcquiredMFRList`(  \n" +
                  "	pcustomerID INT  \n" +
                  ") RETURNS int  \n" +
                  "BEGIN  \n" +
                  "	/*NOTE:We are using below temporary table to get acquire mfg list till end level inculding it self.  \n" +
                  "	We are returning static 1*/  \n" +
                  "	DROP TEMPORARY TABLE IF EXISTS acquireCustomers;  \n" +
                  "	CREATE TEMPORARY TABLE IF NOT EXISTS acquireCustomers AS  \n" +
                  "	SELECT * FROM (  \n" +
                  "		WITH RECURSIVE cte AS  \n" +
                  "		(  \n" +
                  "			SELECT buyTo  \n" +
                  "            FROM who_bought_who WHERE buyby = pcustomerID AND isDeleted = 0  \n" +
                  "			UNION  \n" +
                  "			SELECT ra.buyTo  \n" +
                  "            FROM who_bought_who ra  \n" +
                  "			LEFT JOIN cte ON cte.buyTo=ra.buyBy  \n" +
                  "			WHERE ra.buyBy=cte.buyTo AND ra.isDeleted = 0  \n" +
                  "		)  \n" +
                  "	SELECT * FROM cte c) a  \n" +
                  "	UNION  \n" +
                  "	SELECT pcustomerID AS buyTo;  \n" +
                  "	RETURN 1;  \n" +
                  "END;  \n" +
              /* **************************** Add Script Version -> 21-02-2022 *********************************** */
              "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
              "VALUES (5969,'2.00','V1',' Added new Index in uoms, rfq_rohsmst, Sample entry,who_bought_who & change isdeleted condition in fun_getAcquiredMFRList  - DP '," + userid + " , '" + requiredDet.ipAddress + "');"
              );
            break;
      case 5969:
            allDbChangesArray.push(
            /* **************************** New Script -> 26-02-2022 *********************************** */
              "DROP procedure IF EXISTS `Sproc_PurchaseOrderChangeHistory`;  \n" +
              "CREATE PROCEDURE `Sproc_PurchaseOrderChangeHistory`(  \n" +
              "	IN ppurchaseOrderID INT,  \n" +
              "	IN ppurchaseOrderDetId INT,  \n" +
              "	IN ppageIndex INT,  \n" +
              "	IN precordPerPage INT,  \n" +
              "	IN pOrderBy VARCHAR(255),  \n" +
              "	IN pWhereClause VARCHAR(16383)  \n" +
              "    )  \n" +
              "BEGIN  \n" +
              "  \n" +
              "	DECLARE pOffset INT;  \n" +
              "	DECLARE rowNumWhere VARCHAR(255);  \n" +
              "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
              "	DECLARE vTimeZone VARCHAR(50);  \n" +
              "  \n" +
              "    SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
              "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
              "  \n" +
              "	SET @temp_Sproc_PurchaseOrderChangeHistory = CONCAT(\"  \n" +
              "			SELECT  \n" +
              "				da.ID,  \n" +
              "				da.Tablename,  \n" +
              "				da.RefTransID,  \n" +
              "				NULL AS poLineNumber,  \n" +
              "				NULL AS lineReleaseNumber,  \n" +
              "				FUN_GETPURCHASEORDERFIELDLABEL(da.Colname) Colname,  \n" +
              "				da.Oldval,  \n" +
              "				da.Newval,  \n" +
              "				da.valueDataType,  \n" +
              "				FUN_GETUSERNAMEBYID(da.updatedBy) updatedby,  \n" +
              "				FUN_GETUSERNAMEBYID(da.createdBy) createdby,  \n" +
              "				FUN_GETROLEBYID(da.createByRoleId) createdbyRole,  \n" +
              "				FUN_GETROLEBYID(da.updateByRoleId) updatedbyRole,  \n" +
              "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.createdAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
              "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.UpdatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
              "			FROM  \n" +
              "				dataentrychange_auditlog da  \n" +
              "			WHERE  \n" +
              "				da.RefTransID = \",ppurchaseOrderID,\" AND da.Tablename = 'PURCHASEORDERMST'  \n" +
              "			UNION ALL  \n" +
              "            SELECT  \n" +
              "				da.ID,  \n" +
              "				da.Tablename,  \n" +
              "				da.RefTransID,  \n" +
              "				pod.lineID AS poLineNumber,  \n" +
              "				NULL AS lineReleaseNumber,  \n" +
              "				FUN_GETPURCHASEORDERFIELDLABEL(da.Colname) Colname,  \n" +
              "				da.Oldval,  \n" +
              "				da.Newval,  \n" +
              "				da.valueDataType,  \n" +
              "				FUN_GETUSERNAMEBYID(da.updatedBy) updatedby,  \n" +
              "				FUN_GETUSERNAMEBYID(da.createdBy) createdby,  \n" +
              "				FUN_GETROLEBYID(da.createByRoleId) createdbyRole,  \n" +
              "				FUN_GETROLEBYID(da.updateByRoleId) updatedbyRole,  \n" +
              "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.createdAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
              "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.UpdatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
              "			FROM  \n" +
              "				dataentrychange_auditlog da  \n" +
              "					INNER JOIN  \n" +
              "				purchase_order_det pod ON pod.id = da.RefTransID AND da.Tablename = 'PURCHASE_ORDER_DET'  \n" +
              "			WHERE  \n" +
              "				da.RefTransID IN (SELECT id FROM purchase_order_det WHERE \",  \n" +
              "                case when ppurchaseOrderDetId is not null then concat(\"id=\",ppurchaseOrderDetId,\" AND\")  else '' end ,\" refpurchaseorderid = \",ppurchaseOrderID,\")  \n" +
              "			UNION ALL  \n" +
              "			SELECT  \n" +
              "				da.ID,  \n" +
              "				da.Tablename,  \n" +
              "				da.RefTransID,  \n" +
              "				pod.lineID AS poLineNumber,  \n" +
              "				pol.releaseNumber AS lineReleaseNumber,  \n" +
              "				FUN_GETPURCHASEORDERFIELDLABEL(da.Colname) Colname,  \n" +
              "				da.Oldval,  \n" +
              "				da.Newval,  \n" +
              "				da.valueDataType,  \n" +
              "				FUN_GETUSERNAMEBYID(da.updatedBy) updatedby,  \n" +
              "				FUN_GETUSERNAMEBYID(da.createdBy) createdby,  \n" +
              "				FUN_GETROLEBYID(da.createByRoleId) createdbyRole,  \n" +
              "				FUN_GETROLEBYID(da.updateByRoleId) updatedbyRole,  \n" +
              "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.createdAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
              "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.UpdatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') updatedAt  \n" +
              "			FROM  \n" +
              "				dataentrychange_auditlog da  \n" +
              "					INNER JOIN  \n" +
              "				purchase_order_line_release_det pol ON pol.id = da.RefTransID  \n" +
              "					INNER JOIN  \n" +
              "				purchase_order_det pod ON pod.id = pol.refpurchaseorderdetid  \n" +
              "			WHERE  \n" +
              "				da.RefTransID IN (  \n" +
              "					SELECT id FROM purchase_order_line_release_det WHERE refPurchaseOrderDetID IN (  \n" +
              "						SELECT id FROM purchase_order_det WHERE \",  \n" +
              "                case when ppurchaseOrderDetId is not null then concat(\"id=\",ppurchaseOrderDetId,\" AND\")  else '' end ,\" refpurchaseorderid = \",ppurchaseOrderID,\"  \n" +
              "					)) AND da.Tablename = 'PURCHASEORDERLINERELEASEDET'  \n" +
              "         \");  \n" +
              "  \n" +
              "    IF (pOrderBy IS NOT NULL) THEN  \n" +
              "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
              "	ELSE  \n" +
              "		SET pOrderBy = \"ORDER BY ID DESC\";  \n" +
              "	END IF;  \n" +
              "  \n" +
              "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
              "		SET pWhereClause = '1=1' ;  \n" +
              "	END IF;  \n" +
              "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
              "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
              "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
              "	ELSE  \n" +
              "		SET rowNumWhere = '';  \n" +
              "	END IF;  \n" +
              "  \n" +
              "  \n" +
              "	/* to get total count of rows */  \n" +
              "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) AS TotalRecord FROM ( \",@temp_Sproc_PurchaseOrderChangeHistory,\" ) c WHERE 1=1 AND \", pWhereClause);  \n" +
              "    PREPARE query1 FROM @SQLStatement1;  \n" +
              "	EXECUTE query1;  \n" +
              "	DEALLOCATE PREPARE query1;  \n" +
              "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_PurchaseOrderChangeHistory,\" ) c  WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
              "    PREPARE query2 FROM @SQLStatement2;  \n" +
              "	EXECUTE query2;  \n" +
              "	DEALLOCATE PREPARE query2;  \n" +
              "END;  \n" +
              /* **************************** New Script -> 26-02-2022 *********************************** */
              "DROP function IF EXISTS `fun_getPurchaseOrderFieldLabel`;  \n" +
              "CREATE FUNCTION `fun_getPurchaseOrderFieldLabel` (  \n" +
              "fieldName TEXT  \n" +
              ")  \n" +
              "RETURNS TEXT  \n" +
              "BEGIN  \n" +
              "	SELECT (CASE  \n" +
              "		WHEN fieldName = 'QTY' THEN 'Qty'  \n" +
              "        WHEN fieldName = 'PRICE' THEN 'Price ($)'  \n" +
              "        WHEN fieldName = 'INTERNALNOTES' THEN 'Internal Notes'  \n" +
              "        WHEN fieldName = 'COMMENTS' THEN 'Comments'  \n" +
              "        WHEN fieldName = 'DUEDATE' THEN 'Due Date'  \n" +
              "        WHEN fieldName = 'PROMISESHIPDATE' THEN 'Supplier Promised Delivery Date'  \n" +
              "        WHEN fieldName = 'RELEASE#' THEN 'Release#'  \n" +
              "        WHEN fieldName = 'SHIPPINGMETHOD' THEN 'Shipping Method'  \n" +
              "        WHEN fieldName = 'SHIPPINGADDRESS' THEN 'Shipping Address'  \n" +
              "        WHEN fieldName = 'RELEASENOTES' THEN 'Release Notes'  \n" +
              "        WHEN fieldName = 'ADDITIONALNOTES' THEN 'Additional Notes'  \n" +
              "        WHEN fieldName = 'POLINEWORKINGSTATUS' THEN 'PO Release Working Status'  \n" +
              "        WHEN fieldName = 'RECEIVEDQTY' THEN 'Received Qty'  \n" +
              "        WHEN fieldName = 'POLINECOMPLETEREASON' THEN 'PO Release Complete Reason'  \n" +
              "        WHEN fieldName = 'POLINECOMPLETETYPE' THEN 'PO Release Complete Type'  \n" +
              "        WHEN fieldName = 'CARRIERACCOUNT#' THEN 'Carrier Account#'  \n" +
              "        WHEN fieldName = 'CARRIER' THEN 'Carrier'  \n" +
              "        WHEN fieldName = 'CONTACTPERSON' THEN 'Contact Person'  \n" +
              "        WHEN fieldName = 'MFGPART' THEN 'MPN'  \n" +
              "        WHEN fieldName = 'SUPPLIERPART' THEN 'SPN'  \n" +
              "        WHEN fieldName = 'PARTDESCRIPTION' THEN 'Description'  \n" +
              "        WHEN fieldName = 'PCBPERARRAY' THEN 'PCB Per Array'  \n" +
              "        WHEN fieldName = 'INTERNALREF' THEN 'Internal Ref#'  \n" +
              "        WHEN fieldName = 'TOTALRELEASE' THEN 'Total Release'  \n" +
              "        WHEN fieldName = 'POQTY' THEN 'PO Qty'  \n" +
              "        WHEN fieldName = 'LINECOMMENT' THEN 'Line Comment'  \n" +
              "        WHEN fieldName = 'SUPPLIERQUOTE#' THEN 'Supplier Quote#'  \n" +
              "        WHEN fieldName = 'PACKAGING' THEN 'Packaging'  \n" +
              "        WHEN fieldName = 'ROHSSTATUS' THEN 'RoHS Requirement'  \n" +
              "        WHEN fieldName = 'INTERNALLINECOMMENT' THEN 'Line Internal Notes'  \n" +
              "        WHEN fieldName = 'LINECUSTCONSIGNED' THEN 'PO Line Customer Consigned (No Charge)'  \n" +
              "        WHEN fieldName = 'LINECUSTOMER' THEN 'PO Line Customer'  \n" +
              "        WHEN fieldName = 'LINENONUMIDSTOCK' THEN 'PO Line Do Not Create UMID Stock'  \n" +
              "        WHEN fieldName = 'PONUMBER' THEN 'PO#'  \n" +
              "        WHEN fieldName = 'SONUMBER' THEN 'SO#'  \n" +
              "        WHEN fieldName = 'PODATE' THEN 'PO Date'  \n" +
              "        WHEN fieldName = 'SODATE' THEN 'SO Date'  \n" +
              "        WHEN fieldName = 'SUPPLIER' THEN 'Supplier'  \n" +
              "        WHEN fieldName = 'TERMS' THEN 'Terms'  \n" +
              "        WHEN fieldName = 'POREVISION' THEN 'PO Revision'  \n" +
              "        WHEN fieldName = 'POCOMMENT' THEN 'PO Comment'  \n" +
              "        WHEN fieldName = 'POSTATUS' THEN 'PO Status'  \n" +
              "        WHEN fieldName = 'BLANKETPO' THEN 'Blanket PO'  \n" +
              "        WHEN fieldName = 'SHIPPINGINSURANCE' THEN 'Shipping with Insurance'  \n" +
              "        WHEN fieldName = 'SUPPLIERADDRESS' THEN 'Supplier Address'  \n" +
              "        WHEN fieldName = 'SHIPPINGADDRESS' THEN 'Bill To / Ship To'  \n" +
              "        WHEN fieldName = 'INTERMEDIATEADDRESS' THEN 'Mark For (Intermediate Ship to)'  \n" +
              "        WHEN fieldName = 'FOB' THEN 'FOB'  \n" +
              "        WHEN fieldName = 'POWORKINGSTATUS' THEN 'PO Working Status'  \n" +
              "        WHEN fieldName = 'CANCELREASON' THEN 'PO Cancellation / Undo Reason'  \n" +
              "        WHEN fieldName = 'CANCELLATIONCONFIRMED' THEN 'Cancellation Confirmed by Supplier'  \n" +
              "        WHEN fieldName = 'POCUSTCONSIGNED' THEN 'PO Customer Consigned (No Charge)'  \n" +
              "        WHEN fieldName = 'POCUSTOMER' THEN 'PO Customer'  \n" +
              "        WHEN fieldName = 'NONSTOCKUMID' THEN 'PO Do Not Create UMID Stock'  \n" +
              "        WHEN fieldName = 'LOCKSTATUS' THEN 'Lock Status'  \n" +
              "        WHEN fieldName = 'LOCKEDBY' THEN 'Locked By'  \n" +
              "        WHEN fieldName = 'LOCKEDAT' THEN 'Locked Date'  \n" +
              "        WHEN fieldName = 'LOCKEDBYROLE' THEN 'Locked By Role'  \n" +
              "        WHEN fieldName = 'POCOMPLETEREASON' THEN 'PO Complete Reason'  \n" +
              "        WHEN fieldName = 'SUPPLIERCONTACTPERSON' THEN 'Supplier Address Contact Person'  \n" +
              "        WHEN fieldName = 'SHIPPINGCONTACTPERSON' THEN 'Bill To / Ship To Contact Person'  \n" +
              "        WHEN fieldName = 'INTERMEDIATECONTACTPERSON' THEN 'Mark For (Intermediate Ship to) Contact Person'  \n" +
              "	END) INTO fieldName;  \n" +
              "	RETURN fieldName;  \n" +
              "END;  \n" +
              /* **************************** New Script -> 26-02-2022 *********************************** */
              "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_line_othercharges`;  \n" +
              "CREATE TRIGGER `Trg_AU_purchase_order_line_othercharges` AFTER UPDATE ON `purchase_order_line_othercharges` FOR EACH ROW  \n" +
              "BEGIN  \n" +
              "	IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINEOTHERCHARGES\",CAST(NEW.id AS CHAR),'QTY',CAST(OLD.qty AS CHAR),  \n" +
              "		CAST(NEW.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty');  \n" +
              "	END IF;  \n" +
              "	IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINEOTHERCHARGES\",CAST(NEW.id AS CHAR),'PRICE',CAST(OLD.price AS CHAR),  \n" +
              "		CAST(NEW.price AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'unitprice');  \n" +
              "	END IF;  \n" +
              "    IF IFNULL(OLD.lineComment,0) != IFNULL(NEW.lineComment,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINEOTHERCHARGES\",CAST(NEW.id AS CHAR),'INTERNALNOTES',CAST(OLD.lineComment AS CHAR),  \n" +
              "		CAST(NEW.lineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
              "	END IF;  \n" +
              "    IF IFNULL(OLD.lineInternalComment,0) != IFNULL(NEW.lineInternalComment,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINEOTHERCHARGES\",CAST(NEW.id AS CHAR),'COMMENTS',CAST(OLD.lineInternalComment AS CHAR),  \n" +
              "		CAST(NEW.lineInternalComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
              "	END IF;  \n" +
              "END;  \n" +
              /* **************************** New Script -> 26-02-2022 *********************************** */
              "DROP TRIGGER IF EXISTS `TRG_AU_purchase_order_line_release_det`;  \n" +
              "CREATE TRIGGER `TRG_AU_purchase_order_line_release_det` AFTER UPDATE ON `purchase_order_line_release_det` FOR EACH ROW  \n" +
              "BEGIN  \n" +
              "	IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'RELEASELINEQTY',CAST(OLD.qty AS CHAR),  \n" +
              "		CAST(NEW.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty');  \n" +
              "	END IF;  \n" +
              "    IF IFNULL(OLD.shippingDate,0) != IFNULL(NEW.shippingDate,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'DUEDATE',CAST(OLD.shippingDate AS CHAR),  \n" +
              "		CAST(NEW.shippingDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','shippingDate'));  \n" +
              "	END IF;  \n" +
              "    IF IFNULL(OLD.promisedShipDate,0) != IFNULL(NEW.promisedShipDate,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'PROMISESHIPDATE',CAST(OLD.promisedShipDate AS CHAR),  \n" +
              "		CAST(NEW.promisedShipDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','promisedShipDate'));  \n" +
              "	END IF;  \n" +
              "    IF IFNULL(OLD.releaseNumber,0) != IFNULL(NEW.releaseNumber,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'RELEASE#',CAST(OLD.releaseNumber AS CHAR),  \n" +
              "		CAST(NEW.releaseNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','releaseNumber'));  \n" +
              "	END IF;  \n" +
              "    IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'SHIPPINGMETHOD',CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodID) AS CHAR),  \n" +
              "		CAST(fun_getGenericCategoryCodeNameByID(NEW.shippingMethodID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
              "	END IF;  \n" +
              "    IF IFNULL(OLD.shippingAddressID,0) != IFNULL(NEW.shippingAddressID,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'SHIPPINGADDRESS',CAST(OLD.shippingAddress AS CHAR),  \n" +
              "		CAST(NEW.shippingAddress AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
              "	END IF;  \n" +
              "    IF IFNULL(OLD.releaseNotes,0) != IFNULL(NEW.releaseNotes,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'RELEASENOTES',CAST(OLD.releaseNotes AS CHAR),  \n" +
              "		CAST(NEW.releaseNotes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','releaseNotes'));  \n" +
              "	END IF;  \n" +
              "	IF IFNULL(OLD.additionalNotes,0) != IFNULL(NEW.additionalNotes,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'ADDITIONALNOTES',CAST(OLD.additionalNotes AS CHAR),  \n" +
              "		CAST(NEW.additionalNotes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','additionalNotes'));  \n" +
              "	END IF;  \n" +
              "	IF IFNULL(OLD.poLineWorkingStatus,0) != IFNULL(NEW.poLineWorkingStatus,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'POLINEWORKINGSTATUS',CAST((CASE WHEN OLD.poLineWorkingStatus='C' THEN 'Close' ELSE 'Open' END) AS CHAR),  \n" +
              "		CAST((CASE WHEN NEW.poLineWorkingStatus='C' THEN 'Close' ELSE 'Open' END) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
              "	END IF;  \n" +
              "    IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'RECEIVEDQTY',CAST(OLD.receivedQty AS CHAR),  \n" +
              "		CAST(NEW.receivedQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty');  \n" +
              "	END IF;  \n" +
              "    IF IFNULL(OLD.poLineCompleteReason,0) != IFNULL(NEW.poLineCompleteReason,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'POLINECOMPLETEREASON',CAST(OLD.poLineCompleteReason AS CHAR),  \n" +
              "		CAST(NEW.poLineCompleteReason AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
              "	END IF;  \n" +
              "    IF IFNULL(OLD.poLineCompleteType,0) != IFNULL(NEW.poLineCompleteType,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'POLINECOMPLETETYPE',CAST((CASE WHEN OLD.poLineCompleteType = 'M' THEN 'Manually Completed' WHEN OLD.poLineCompleteType = 'A' THEN 'Auto Completed' ELSE 'Open' END) AS CHAR),  \n" +
              "		CAST((CASE WHEN NEW.poLineCompleteType = 'M' THEN 'Manually Completed' WHEN NEW.poLineCompleteType = 'A' THEN 'Auto Completed' ELSE 'Open' END) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
              "	END IF;  \n" +
              "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'CARRIERACCOUNT#',CAST(OLD.carrierAccountNumber AS CHAR),  \n" +
              "		CAST(NEW.carrierAccountNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
              "	END IF;  \n" +
              "    IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'CARRIER',CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR),  \n" +
              "		CAST(fun_getGenericCategoryCodeNameByID(NEW.carrierID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
              "	END IF;  \n" +
              "    IF IFNULL(OLD.shippingContactPersonID,0) != IFNULL(NEW.shippingContactPersonID,0) THEN  \n" +
              "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
              "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'SHIPPINGCONTACTPERSON',CAST(OLD.shippingContactPerson AS CHAR),  \n" +
              "		CAST(NEW.shippingContactPerson AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
              "	END IF;  \n" +
              "END;  \n" +
            /* **************************** Add Script Version -> 26-02-2022 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5970,'2.00','V1',' User Story 39330: Maintain DataType wise history in Purchase Order Page - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
          break;
      case 5970:
        allDbChangesArray.push(
        /* **************************** New Script -> 26-02-2022 *********************************** */
          "ALTER TABLE `dataentrychange_auditlog`  \n" +
          "ADD INDEX `IDX_dataentrychange_auditlog_TableName_reftransID` (`RefTransID` DESC, `Tablename` DESC, `ID` DESC) VISIBLE;  \n" +
          /* **************************** Add Script Version -> 26-02-2022 *********************************** */
          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
          "VALUES (5971,'2.00','V1',' User Story 39330: Maintain DataType wise history in Purchase Order Page - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
        case 5971:
         allDbChangesArray.push(
         /* **************************** New Script -> 28-02-2022 *********************************** */
         "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_customer_packingslip` ;  \n" +
         "CREATE TRIGGER `Trg_AU_customer_packingslip` AFTER UPDATE ON `customer_packingslip`  \n" +
         "    FOR EACH ROW BEGIN  \n" +
         "	DECLARE vTransTypeText VARCHAR(20);  \n" +
         "	SET vTransTypeText= IF(NEW.transType='I','Invoice','Credit Memo');  \n" +
         "  \n" +
         "    IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
         "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO#',CAST(OLD.soNumber AS CHAR),  \n" +
         "       CAST(NEW.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
         "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO#',CAST(OLD.poNumber AS CHAR),  \n" +
         "       CAST(NEW.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
         "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO Date',CAST(DATE_FORMAT(OLD.poDate, '%m/%d/%y') AS CHAR),  \n" +
         "       CAST(DATE_FORMAT(NEW.poDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
         "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Date', CAST(DATE_FORMAT(OLD.soDate, '%m/%d/%y') AS CHAR),  \n" +
         "       CAST(DATE_FORMAT(NEW.soDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) THEN  \n" +
         "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Contact Person',(SELECT CONCAT(firstName,' ',lastName) FROM contactperson WHERE personId=OLD.contactPersonId),  \n" +
         "      (SELECT CONCAT(firstName,' ',lastName) FROM contactperson WHERE personId=NEW.contactPersonId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.packingSlipComment,0) != IFNULL(NEW.packingSlipComment,0) THEN  \n" +
         "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Shipping Comments', OLD.packingSlipComment,  \n" +
         "       NEW.packingSlipComment, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.substatus ,0) != IFNULL(NEW.substatus ,0) THEN  \n" +
         "	IF(NEW.transType='P')THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft'WHEN OLD.substatus=2 THEN 'Ready To Ship'WHEN OLD.substatus=3 THEN 'Waiting For Shipping Label'WHEN OLD.substatus=4 THEN 'Waiting For Pickup' WHEN OLD.substatus= 6 THEN 'Published' WHEN OLD.substatus= 5 THEN 'Shipped'  ELSE '' END),  \n" +
         "		(CASE WHEN NEW.substatus=1 THEN 'Draft'WHEN NEW.substatus=2 THEN 'Ready To Ship'WHEN NEW.substatus=3 THEN 'Waiting For Shipping Label'WHEN NEW.substatus=4 THEN 'Waiting For Pickup' WHEN NEW.substatus=6 THEN 'Published'  ELSE 'Shipped' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	ELSEIF (NEW.transType='I')THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Shipped - Not Invoiced' WHEN OLD.substatus=2 THEN 'Invoiced' WHEN Old.subStatus=3 THEN 'Corrected and Invoiced'  WHEN Old.subStatus=4 THEN 'Draft' WHEN Old.subStatus=5 THEN 'Published' END),  \n" +
         "		(CASE WHEN NEW.substatus=1 THEN 'Shipped - Not Invoiced' WHEN NEW.substatus=2 THEN 'Invoiced' WHEN NEW.subStatus=3 THEN 'Corrected and Invoiced'  WHEN NEW.subStatus=4 THEN 'Draft' WHEN NEW.subStatus=5 THEN 'Published' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	ELSEIF (NEW.transType='C')THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft' WHEN OLD.substatus=2 THEN 'Published' ELSE '' END),  \n" +
         "		(CASE WHEN NEW.substatus=1 THEN 'Draft' WHEN NEW.substatus=2 THEN 'Published' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	END IF;  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.shippingMethodId ,0) != IFNULL(NEW.shippingMethodId ,0) THEN  \n" +
         "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Shipping Method', fun_getGenericCategoryNameByID(OLD.shippingMethodId),  \n" +
         "       fun_getGenericCategoryNameByID(NEW.shippingMethodId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.sorevision ,0) != IFNULL(NEW.sorevision ,0) THEN  \n" +
         "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Version', CAST(OLD.sorevision AS CHAR),  \n" +
         "       CAST(NEW.sorevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.freeOnBoardId ,0) != IFNULL(NEW.freeOnBoardId ,0) THEN  \n" +
         "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'FOB',(SELECT `name` FROM freeonboardmst WHERE id=OLD.freeOnBoardId) ,  \n" +
         "     (SELECT `name` FROM freeonboardmst WHERE id=NEW.freeOnBoardId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.invoiceNumber ,0) != IFNULL(NEW.invoiceNumber ,0) THEN  \n" +
         "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice#',CAST(OLD.invoiceNumber AS CHAR) ,  \n" +
         "     CAST(NEW.invoiceNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.invoiceDate ,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
         "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice Date',CAST(DATE_FORMAT(OLD.invoiceDate, '%m/%d/%y') AS CHAR) ,  \n" +
         "     CAST(DATE_FORMAT(NEW.invoiceDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.headerComment ,0) != IFNULL(NEW.headerComment,0) THEN  \n" +
         "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Internal Notes',CAST(OLD.headerComment AS CHAR),  \n" +
         "     CAST(NEW.headerComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
         "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip Date',CAST(DATE_FORMAT(OLD.packingSlipDate, '%m/%d/%y') AS CHAR),  \n" +
         "		CAST(DATE_FORMAT(NEW.packingSlipDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
         "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip#',CAST(OLD.packingSlipNumber AS CHAR),  \n" +
         "		CAST(NEW.packingSlipNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
         "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Terms',  \n" +
         "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
         "			FROM genericcategory  WHERE gencCategoryID = OLD.termsID) ,  \n" +
         "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
         "			FROM genericcategory  WHERE gencCategoryID = NEW.termsID) ,  \n" +
         "	fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN  \n" +
         "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Sales Commission To',  \n" +
         "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = OLD.salesCommissionTo),  \n" +
         "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = NEW.salesCommissionTo),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.totalAmount ,0) != IFNULL(NEW.totalAmount ,0) THEN  \n" +
         "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Total Amount ($)',  \n" +
         "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(OLD.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(OLD.totalAmount,2) AS CHAR) END,  \n" +
         "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(NEW.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(NEW.totalAmount,2) AS CHAR) END,  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.isLocked,0) != IFNULL(NEW.isLocked,0) THEN  \n" +
         "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Locked',(CASE WHEN OLD.isLocked=0 THEN 'No' WHEN OLD.isLocked=1 THEN 'Yes' ELSE '' END),  \n" +
         "      (CASE WHEN NEW.isLocked=0 THEN 'No' WHEN NEW.isLocked=1 THEN 'Yes' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.lockedAt ,0) != IFNULL(NEW.lockedAt ,0) THEN  \n" +
         "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
         "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked Date' ELSE 'Locked Date' END),'',  \n" +
         "		(CASE WHEN OLD.isLocked = 1 THEN fun_DatetimetoUTCDateTime() ELSE NEW.lockedAt END),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
         "		fun_getDataTypeBasedOnTableAndColumnName(\"CUSTOMER_PACKINGSLIP\",'lockedAt'));  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.lockedBy ,0) != IFNULL(NEW.lockedBy ,0) THEN  \n" +
         "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked By' ELSE 'Locked By' END),'',  \n" +
         "		(CASE WHEN OLD.isLocked = 1 THEN fun_getUserNameByID(NEW.updatedBy) ELSE fun_getUserNameByID(NEW.lockedBy) END) ,  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "   IF IFNULL(OLD.billingAddress ,0) != IFNULL(NEW.billingAddress ,0) THEN  \n" +
         "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Billing Address',CAST(OLD.billingAddress AS CHAR),  \n" +
         "		CAST(NEW.billingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.shippingAddress ,0) != IFNULL(NEW.shippingAddress ,0) THEN  \n" +
         "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Shipping Address',CAST(OLD.shippingAddress AS CHAR),  \n" +
         "		CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.intermediateAddress ,0) != IFNULL(NEW.intermediateAddress ,0) THEN  \n" +
         "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Mark For (Intermediate Ship To) Address',CAST(OLD.intermediateAddress AS CHAR) ,  \n" +
         "		CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.creditMemoNumber ,0) != IFNULL(NEW.creditMemoNumber ,0) THEN  \n" +
         "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Number',CAST(OLD.creditMemoNumber AS CHAR),  \n" +
         "		CAST(NEW.creditMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
         "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Date',CAST(DATE_FORMAT(OLD.creditMemoDate, '%m/%d/%y') AS CHAR),  \n" +
         "       CAST(DATE_FORMAT(NEW.creditMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.refDebitMemoNumber ,0) != IFNULL(NEW.refDebitMemoNumber ,0) THEN  \n" +
         "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo#',CAST(OLD.refDebitMemoNumber AS CHAR) ,  \n" +
         "		CAST(NEW.refDebitMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.refDebitMemoDate,0) != IFNULL(NEW.refDebitMemoDate,0) THEN  \n" +
         "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo Date',CAST(DATE_FORMAT(OLD.refDebitMemoDate, '%m/%d/%y') AS CHAR),  \n" +
         "       CAST(DATE_FORMAT(NEW.refDebitMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "  \n" +
         "    IF IFNULL(OLD.rmaNumber ,0) != IFNULL(NEW.rmaNumber ,0) THEN  \n" +
         "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'RMA#',CAST(OLD.rmaNumber AS CHAR) ,  \n" +
         "		CAST(NEW.rmaNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "   IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision,0) THEN  \n" +
         "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Revision',OLD.revision  ,  \n" +
         "		NEW.revision , fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "  \n" +
         "     IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),CONCAT('Confirming Zero Value',vTransTypeText),(CASE WHEN OLD.isZeroValue =0 THEN 'False' ELSE 'True' END),  \n" +
         "	   (CASE WHEN NEW.isZeroValue =0 THEN 'False' ELSE 'True' END),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	END IF;  \n" +
         "  \n" +
         "     IF IFNULL(OLD.poRevision,0) != IFNULL(NEW.poRevision,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'PO Revision',OLD.poRevision,NEW.poRevision,  \n" +
         "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	END IF;  \n" +
         "  \n" +
         "     IF IFNULL(OLD.isMarkForRefund,0) != IFNULL(NEW.isMarkForRefund,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Mark For Refund',OLD.isMarkForRefund,NEW.isMarkForRefund,  \n" +
         "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.agreedRefundAmt,0) != IFNULL(NEW.agreedRefundAmt,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Agreed Refund Amt',OLD.agreedRefundAmt,NEW.agreedRefundAmt,  \n" +
         "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	END IF;  \n" +
         "      IF IFNULL(OLD.carrierID ,0) != IFNULL(NEW.carrierID ,0) THEN  \n" +
         "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Carrier', fun_getGenericCategoryNameByID(OLD.carrierID),  \n" +
         "       fun_getGenericCategoryNameByID(NEW.carrierID), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "    IF IFNULL(OLD.carrierAccountNumber ,0) != IFNULL(NEW.carrierAccountNumber ,0) THEN  \n" +
         "		 INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Carrier Account# ', CAST(OLD.carrierAccountNumber AS CHAR),  \n" +
         "		   CAST(NEW.carrierAccountNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "    END IF;  \n" +
         "    IF IFNULL(OLD.billingContactPersonID,0) != IFNULL(NEW.billingContactPersonID,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'BillTo Contact Person',  \n" +
         "        fun_contactPersonDetailByID(OLD.billingContactPersonID),fun_contactPersonDetailByID(NEW.billingContactPersonID),  \n" +
         "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	END IF;  \n" +
         "	IF IFNULL(OLD.shippingContactPersonID,0) != IFNULL(NEW.shippingContactPersonID,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'ShipTo Contact Person',  \n" +
         "        fun_contactPersonDetailByID(OLD.shippingContactPersonID),fun_contactPersonDetailByID(NEW.shippingContactPersonID),  \n" +
         "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	END IF;  \n" +
         "    IF IFNULL(OLD.intermediateContactPersonID,0) != IFNULL(NEW.intermediateContactPersonID,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Mark For Contact Person',  \n" +
         "        fun_contactPersonDetailByID(OLD.intermediateContactPersonID),fun_contactPersonDetailByID(NEW.intermediateContactPersonID),  \n" +
         "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	END IF;  \n" +
         "   END;  \n" +
         /* **************************** New Script -> 28-02-2022 *********************************** */
         "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Packingslip_Invoice_Payment_History` ;  \n" +
         "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_History` AFTER UPDATE ON `packingslip_invoice_payment`  \n" +
         "    FOR EACH ROW BEGIN  \n" +
         "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment\";  \n" +
         "	DECLARE vOldval LONGTEXT DEFAULT '';  \n" +
         "	DECLARE vNewval LONGTEXT DEFAULT '';  \n" +
         "	DECLARE vLockUnlockFieldPTText VARCHAR(50) DEFAULT 'Locked' ;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.paymentNumber, \"\") != IFNULL(NEW.paymentNumber, \"\") THEN  \n" +
         "        INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,								valueDataType)  \n" +
         "		  VALUES 	(vTableName,										NEW.id,  \n" +
         "					(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Transaction#\"  \n" +
         "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off#\"  \n" +
         "						ELSE \"Payment# or Check#\" END),			OLD.paymentNumber,  \n" +
         "					NEW.paymentNumber,							OLD.updatedAt,  \n" +
         "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
         "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'paymentNumber'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.paymentDate, \"\") != IFNULL(NEW.paymentDate, \"\") THEN  \n" +
         "		INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,								valueDataType)  \n" +
         "		  VALUES 	(vTableName,										NEW.id,  \n" +
         "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Date\"  \n" +
         "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Date\"  \n" +
         "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Date\"  \n" +
         "						ELSE \"Payment Date\" END), 					OLD.paymentDate,  \n" +
         "					NEW.paymentDate,				OLD.updatedAt,  \n" +
         "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
         "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'paymentDate'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\")  THEN  \n" +
         "		INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,								valueDataType)  \n" +
         "		  VALUES 	(vTableName,										NEW.id,  \n" +
         "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Amount ($)\"  \n" +
         "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Amount ($)\"  \n" +
         "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Amount ($)\"  \n" +
         "					   ELSE \"Payment Amount ($)\" END),  						OLD.paymentAmount,  \n" +
         "					NEW.paymentAmount,								OLD.updatedAt,  \n" +
         "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,		'amount');  \n" +
         "	END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.paymentType, \"\") != IFNULL(NEW.paymentType, \"\") THEN  \n" +
         "		SELECT IFNULL(gencCategoryName, '') INTO vOldval  \n" +
         "		  FROM genericcategory  \n" +
         "		 WHERE gencCategoryID = OLD.paymentType  \n" +
         "		 LIMIT 1;  \n" +
         "  \n" +
         "		SELECT IFNULL(gencCategoryName, '') INTO vNewval  \n" +
         "		  FROM genericcategory  \n" +
         "		 WHERE gencCategoryID = NEW.paymentType  \n" +
         "		 LIMIT 1;  \n" +
         "  \n" +
         "         INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,								valueDataType)  \n" +
         "		  VALUES 	(vTableName,										NEW.id,  \n" +
         "					\"Payment Method\",								vOldval,  \n" +
         "					vNewval,									OLD.updatedAt,  \n" +
         "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
         "	END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.accountReference, \"\") != IFNULL(NEW.accountReference, \"\") THEN  \n" +
         "		INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,								valueDataType)  \n" +
         "		  VALUES 		(vTableName,								NEW.id,  \n" +
         "					\"Account Reference\",							OLD.accountReference,  \n" +
         "					NEW.accountReference,							OLD.updatedAt,  \n" +
         "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
         "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'accountReference'));  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.bankAccountNo, \"\") != IFNULL(NEW.bankAccountNo, \"\") THEN  \n" +
         "		INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,								valueDataType)  \n" +
         "		  VALUES 	(vTableName,										NEW.id,  \n" +
         "					(CASE WHEN old.refPaymentMode = \"CR\" THEN \"Refund To (Bank Account Code)\"  \n" +
         "						ELSE \"Bank Account Code\" END),						OLD.bankAccountNo,  \n" +
         "					NEW.bankAccountNo,								OLD.updatedAt,  \n" +
         "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
         "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'bankAccountNo'));  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.bankName, \"\") != IFNULL(NEW.bankName, \"\") THEN  \n" +
         "		INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,								valueDataType)  \n" +
         "		  VALUES 	(vTableName,									NEW.id,  \n" +
         "					\"Bank Name\",								OLD.bankName,  \n" +
         "					NEW.bankName,								OLD.updatedAt,  \n" +
         "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
         "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'bankName'));  \n" +
         "    END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.remark, \"\") != IFNULL(NEW.remark, \"\") THEN  \n" +
         "		INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,								valueDataType)  \n" +
         "		  VALUES 	(vTableName,										NEW.id,  \n" +
         "					\"Comments\",									OLD.remark,  \n" +
         "					NEW.remark,									OLD.updatedAt,  \n" +
         "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
         "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'remark'));  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.agreedRefundAmt, \"\") != IFNULL(NEW.agreedRefundAmt, \"\") THEN  \n" +
         "		INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,								valueDataType)  \n" +
         "		  VALUES 	(vTableName,									NEW.id,  \n" +
         "					\"Agreed Refund Amount ($)\",						OLD.agreedRefundAmt,  \n" +
         "					NEW.agreedRefundAmt,							OLD.updatedAt,  \n" +
         "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,			'amount');  \n" +
         "	END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.isMarkForRefund, \"\") != IFNULL(NEW.isMarkForRefund, \"\") THEN  \n" +
         "		INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,								valueDataType)  \n" +
         "			 VALUES 	(vTableName,								NEW.id,  \n" +
         "					\"Mark for Refund\",								(CASE WHEN OLD.isMarkForRefund =0 THEN 'False' ELSE 'True' END),  \n" +
         "					(CASE WHEN NEW.isMarkForRefund =0 THEN 'False' ELSE 'True' END),		OLD.updatedAt,  \n" +
         "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
         "	END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.isDeleted, \"\") != IFNULL(NEW.isDeleted, \"\") THEN  \n" +
         "		IF NEW.isDeleted = TRUE THEN  \n" +
         "			SET vNewval = 'Deleted';  \n" +
         "		ELSEIF NEW.isDeleted = FALSE THEN  \n" +
         "			SET vNewval = 'Restored';  \n" +
         "		ELSE  \n" +
         "			SET vNewval = 'Unknown action on delete';  \n" +
         "        END IF;  \n" +
         "		INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "                    Colname,									Oldval,  \n" +
         "                    Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,								valueDataType)  \n" +
         "		  VALUES 	(vTableName,								NEW.id,  \n" +
         "                    vNewval,									NULL,  \n" +
         "                    OLD.paymentNumber,							OLD.updatedAt,  \n" +
         "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") THEN  \n" +
         "		SET vOldval = CASE WHEN OLD.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
         "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
         "				END;  \n" +
         "		SET vNewval = CASE WHEN NEW.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
         "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
         "				END;  \n" +
         "        INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,								valueDataType)  \n" +
         "		  VALUES 	(vTableName,								NEW.id,  \n" +
         "					(CASE WHEN old.refPaymentMode = \"CA\" OR old.refPaymentMode = \"WOFF\"  \n" +
         "						OR old.refPaymentMode = \"CR\" THEN \"Voided Status\"  \n" +
         "						ELSE \"Payment Status\" END), 			vOldval,  \n" +
         "					vNewval,									OLD.updatedAt,  \n" +
         "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
         "  \n" +
         "  \n" +
         "		IF (IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") AND NEW.isPaymentVoided = TRUE) THEN  \n" +
         "			INSERT INTO supplier_invoice_payment_history  \n" +
         "							(tableName,									refPaymentID,  \n" +
         "							Colname,									Oldval,  \n" +
         "							Newval,										createdAt,  \n" +
         "							createdBy,									createByRoleId,  \n" +
         "							updatedAt,									updatedBy,  \n" +
         "							updateByRoleId,								valueDataType)  \n" +
         "				  VALUES 	(vTableName,									NEW.id,  \n" +
         "							\"Voided Date\",									'',  \n" +
         "							NEW.UpdatedAt,  								OLD.updatedAt,  \n" +
         "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "							fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
         "							NEW.updateByRoleId/*updateByRoleId*/,  \n" +
         "                            fun_getDataTypeBasedOnTableAndColumnName(vTableName,'UpdatedAt'));  \n" +
         "  \n" +
         "  \n" +
         "			  INSERT INTO supplier_invoice_payment_history  \n" +
         "							(tableName,									refPaymentID,  \n" +
         "							Colname,									Oldval,  \n" +
         "							Newval,										createdAt,  \n" +
         "							createdBy,									createByRoleId,  \n" +
         "							updatedAt,									updatedBy,  \n" +
         "							updateByRoleId,								valueDataType)  \n" +
         "				  VALUES 	(vTableName,									NEW.id,  \n" +
         "							\"Voided By\",									'',  \n" +
         "							fun_getUserNameByID(NEW.updatedBy),				OLD.updatedAt,  \n" +
         "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "							fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
         "							NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
         "		  END IF;  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.voidPaymentReason, \"\") != IFNULL(NEW.voidPaymentReason, \"\") THEN  \n" +
         "		INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,								valueDataType)  \n" +
         "		  VALUES 	(vTableName,										NEW.id,  \n" +
         "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Void Reason\"  \n" +
         "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Void Reason\"  \n" +
         "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Void Refund Reason\"  \n" +
         "						ELSE \"Void Payment Reason\" END),					OLD.voidPaymentReason,  \n" +
         "					NEW.voidPaymentReason,								OLD.updatedAt,  \n" +
         "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
         "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'voidPaymentReason'));  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.refVoidedPaymentNumber, \"\") != IFNULL(NEW.refVoidedPaymentNumber, \"\") THEN  \n" +
         "		INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,								valueDataType)  \n" +
         "		  VALUES 	(vTableName,										NEW.id,  \n" +
         "					\"Ref Voided Payment# Or Check#\",						OLD.refVoidedPaymentNumber,  \n" +
         "					NEW.refVoidedPaymentNumber,							OLD.updatedAt,  \n" +
         "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
         "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'refVoidedPaymentNumber'));  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.lockStatus, \"\") != IFNULL(NEW.lockStatus, \"\") THEN  \n" +
         "  \n" +
         "	IF (OLD.lockStatus = 'LC') THEN  \n" +
         "		SET vLockUnlockFieldPTText = \"Unlocked\";  \n" +
         "	END IF;  \n" +
         "  \n" +
         "        INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,									valueDataType)  \n" +
         "		  VALUES 	(vTableName,										NEW.id,  \n" +
         "				 \"Lock Status\",									(CASE WHEN OLD.lockStatus = 'NA' THEN 'Not Applicable'   WHEN OLD.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
         "																WHEN OLD.lockStatus = 'LC' THEN 'Locked' ELSE '' END),  \n" +
         "				(CASE WHEN NEW.lockStatus = 'NA' THEN 'Not Applicable'  \n" +
         "						WHEN NEW.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
         "						WHEN NEW.lockStatus = 'LC' THEN 'Locked' ELSE '' END),			OLD.updatedAt,  \n" +
         "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,						'varchar');  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.lockedAt, \"\") != IFNULL(NEW.lockedAt, \"\") THEN  \n" +
         "        INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,									valueDataType)  \n" +
         "		  VALUES 	(vTableName,										NEW.id,  \n" +
         "					CONCAT(vLockUnlockFieldPTText, \" Date\"),					'',  \n" +
         "					(CASE WHEN OLD.lockStatus = 'LC' THEN fun_DatetimetoUTCDateTime()  \n" +
         "						ELSE NEW.lockedAt END), 						OLD.updatedAt,  \n" +
         "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
         "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'lockedAt'));  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.lockedBy, \"\") != IFNULL(NEW.lockedBy, \"\") THEN  \n" +
         "        INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,									valueDataType)  \n" +
         "		  VALUES 		(vTableName,									NEW.id,  \n" +
         "					CONCAT(vLockUnlockFieldPTText, \" By\"),					'',  \n" +
         "					(CASE WHEN OLD.lockStatus = 'LC' THEN fun_getUserNameByID(NEW.updatedBy)  \n" +
         "						ELSE fun_getUserNameByID(NEW.lockedBy) END),				OLD.updatedAt,  \n" +
         "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,					'varchar');  \n" +
         "    END IF;  \n" +
         "  \n" +
         "		IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
         "			IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
         "				SELECT IFNULL(`mfgCode`, '') INTO vOldval  \n" +
         "				FROM mfgcodemst  \n" +
         "				WHERE id =OLD.mfgcodeID  \n" +
         "				ORDER BY id DESC LIMIT 1;  \n" +
         "			END IF;  \n" +
         "			IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
         "				SELECT IFNULL(`mfgCode`, '') INTO vNewval  \n" +
         "				FROM mfgcodemst  \n" +
         "				WHERE id =NEW.mfgcodeID  \n" +
         "				ORDER BY id DESC LIMIT 1;  \n" +
         "			END IF;  \n" +
         "			  INSERT INTO supplier_invoice_payment_history  \n" +
         "						(tableName,									refPaymentID,  \n" +
         "						Colname,									Oldval,  \n" +
         "						Newval,										createdAt,  \n" +
         "						createdBy,									createByRoleId,  \n" +
         "						updatedAt,									updatedBy,  \n" +
         "						updateByRoleId,								valueDataType)  \n" +
         "			  VALUES 	(vTableName,								NEW.id,  \n" +
         "						\"Supplier\",									vOldval,  \n" +
         "						vNewval,									OLD.updatedAt,  \n" +
         "						OLD.updatedBy,								OLD.updateByRoleId,  \n" +
         "						fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
         "						NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
         "		END IF;  \n" +
         "  \n" +
         "	    IF IFNULL(OLD.payToName, \"\") != IFNULL(NEW.payToName, \"\") THEN  \n" +
         "			INSERT INTO supplier_invoice_payment_history  \n" +
         "						(tableName,									refPaymentID,  \n" +
         "						Colname,									Oldval,  \n" +
         "						Newval,										createdAt,  \n" +
         "						createdBy,									createByRoleId,  \n" +
         "						updatedAt,									updatedBy,  \n" +
         "						updateByRoleId,								valueDataType)  \n" +
         "			  VALUES 	(vTableName,										NEW.id,  \n" +
         "						\"Remit To name\",									OLD.payToName,  \n" +
         "						NEW.payToName,									OLD.updatedAt,  \n" +
         "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
         "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
         "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'payToName'));  \n" +
         "	    END IF;  \n" +
         "  \n" +
         "	    IF IFNULL(OLD.payToAddress, \"\") != IFNULL(NEW.payToAddress, \"\") THEN  \n" +
         "			INSERT INTO supplier_invoice_payment_history  \n" +
         "						(tableName,									refPaymentID,  \n" +
         "						Colname,									Oldval,  \n" +
         "						Newval,										createdAt,  \n" +
         "						createdBy,									createByRoleId,  \n" +
         "						updatedAt,									updatedBy,  \n" +
         "						updateByRoleId,								valueDataType)  \n" +
         "			  VALUES 	(vTableName,										NEW.id,  \n" +
         "						\"Remit To Address\",									OLD.payToAddress,  \n" +
         "						NEW.payToAddress,								OLD.updatedAt,  \n" +
         "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
         "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
         "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'payToAddress'));  \n" +
         "	    END IF;  \n" +
         "  \n" +
         "	    IF IFNULL(OLD.payToContactPerson, \"\") != IFNULL(NEW.payToContactPerson, \"\") THEN  \n" +
         "			INSERT INTO supplier_invoice_payment_history  \n" +
         "						(tableName,									refPaymentID,  \n" +
         "						Colname,									Oldval,  \n" +
         "						Newval,										createdAt,  \n" +
         "						createdBy,									createByRoleId,  \n" +
         "						updatedAt,									updatedBy,  \n" +
         "						updateByRoleId,									valueDataType)  \n" +
         "			  VALUES 		(vTableName,									NEW.id,  \n" +
         "						\"Remit To Contact Person\",							OLD.payToContactPerson,  \n" +
         "						NEW.payToContactPerson,								OLD.updatedAt,  \n" +
         "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
         "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
         "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'payToContactPerson'));  \n" +
         "	    END IF;  \n" +
         "  \n" +
         "	    IF IFNULL(OLD.billToName, \"\") != IFNULL(NEW.billToName, \"\") THEN  \n" +
         "			INSERT INTO supplier_invoice_payment_history  \n" +
         "						(tableName,									refPaymentID,  \n" +
         "						Colname,									Oldval,  \n" +
         "						Newval,										createdAt,  \n" +
         "						createdBy,									createByRoleId,  \n" +
         "						updatedAt,									updatedBy,  \n" +
         "						updateByRoleId,								valueDataType)  \n" +
         "			  VALUES 	(vTableName,										NEW.id,  \n" +
         "						\"Bill To Name\",									OLD.billToName,  \n" +
         "						NEW.billToName,									OLD.updatedAt,  \n" +
         "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
         "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
         "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'billToName'));  \n" +
         "	    END IF;  \n" +
         "  \n" +
         "	    IF IFNULL(OLD.billToAddress, \"\") != IFNULL(NEW.billToAddress, \"\") THEN  \n" +
         "			INSERT INTO supplier_invoice_payment_history  \n" +
         "						(tableName,									refPaymentID,  \n" +
         "						Colname,									Oldval,  \n" +
         "						Newval,										createdAt,  \n" +
         "						createdBy,									createByRoleId,  \n" +
         "						updatedAt,									updatedBy,  \n" +
         "						updateByRoleId,									valueDataType)  \n" +
         "			  VALUES 	(vTableName,										NEW.id,  \n" +
         "						(CASE WHEN old.refPaymentMode = \"CR\" THEN \"Billing Address\"  \n" +
         "						ELSE \"Business Address\" END),							OLD.billToAddress,  \n" +
         "						NEW.billToAddress,								OLD.updatedAt,  \n" +
         "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
         "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
         "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'billToAddress'));  \n" +
         "	    END IF;  \n" +
         "  \n" +
         "	    IF IFNULL(OLD.billToContactPerson, \"\") != IFNULL(NEW.billToContactPerson, \"\") THEN  \n" +
         "			INSERT INTO supplier_invoice_payment_history  \n" +
         "						(tableName,									refPaymentID,  \n" +
         "						Colname,									Oldval,  \n" +
         "						Newval,										createdAt,  \n" +
         "						createdBy,									createByRoleId,  \n" +
         "						updatedAt,									updatedBy,  \n" +
         "						updateByRoleId,									valueDataType)  \n" +
         "			  VALUES 		(vTableName,									NEW.id,  \n" +
         "						(CASE WHEN old.refPaymentMode = \"CR\" THEN \"Billing Address Contact Person\"  \n" +
         "						ELSE \"Business Address Contact Person\" END),					OLD.billToContactPerson,  \n" +
         "						NEW.billToContactPerson,							OLD.updatedAt,  \n" +
         "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
         "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
         "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'billToContactPerson'));  \n" +
         "	    END IF;  \n" +
         "  \n" +
         "  \n" +
         "  \n" +
         "  \n" +
         "    IF NEW.refPaymentMode IN ('R','RR') THEN  \n" +
         "  \n" +
         "	    IF IFNULL(OLD.depositBatchNumber, \"\") != IFNULL(NEW.depositBatchNumber, \"\") THEN  \n" +
         "			INSERT INTO supplier_invoice_payment_history  \n" +
         "						(tableName,						refPaymentID,  \n" +
         "						Colname,						Oldval,  \n" +
         "						Newval,							createdAt,  \n" +
         "						createdBy,						createByRoleId,  \n" +
         "						updatedAt,						updatedBy,  \n" +
         "						updateByRoleId,					valueDataType)  \n" +
         "			  VALUES 	(vTableName,							NEW.id,  \n" +
         "					\"Deposit Batch#\",						OLD.depositBatchNumber,  \n" +
         "					NEW.depositBatchNumber,						OLD.updatedAt,  \n" +
         "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
         "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'depositBatchNumber'));  \n" +
         "	    END IF;  \n" +
         "  \n" +
         "    END IF;  \n" +
         "  \n" +
         "    IF NEW.refPaymentMode IN ('RR','CR') THEN  \n" +
         "		IF IFNULL(OLD.offsetAmount,0) != IFNULL(NEW.offsetAmount,0) THEN  \n" +
         "			INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,								valueDataType)  \n" +
         "			VALUES 	(vTableName,										NEW.id,  \n" +
         "					(CASE WHEN NEW.refPaymentMode = 'RR' THEN \"Offset Refund Amount ($)\"  \n" +
         "						WHEN NEW.refPaymentMode = 'CR' THEN \"Offset Amount ($)\"  \n" +
         "						ELSE '' END),								OLD.offsetAmount,  \n" +
         "					NEW.offsetAmount,								OLD.updatedAt,  \n" +
         "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
         "                    'amount');  \n" +
         "		END IF;  \n" +
         "  \n" +
         "		IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN  \n" +
         "			INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,									refPaymentID,  \n" +
         "					Colname,									Oldval,  \n" +
         "					Newval,										createdAt,  \n" +
         "					createdBy,									createByRoleId,  \n" +
         "					updatedAt,									updatedBy,  \n" +
         "					updateByRoleId,								valueDataType)  \n" +
         "		  VALUES 	(vTableName,								NEW.id,  \n" +
         "					\"COA\",  \n" +
         "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = OLD.acctId),  \n" +
         "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = NEW.acctId),  \n" +
         "					OLD.updatedAt,   							OLD.updatedBy,  \n" +
         "					OLD.updateByRoleId,							fun_DatetimetoUTCDateTime(), /*updatedAt*/  \n" +
         "					NEW.updatedBy, /*updatedBy*/				NEW.updateByRoleId/*updateByRoleId*/,  \n" +
         "                    'varchar');  \n" +
         "		END IF;  \n" +
         "    END IF;  \n" +
         "  \n" +
         "  \n" +
         "    IF NEW.refPaymentMode = 'CR' THEN  \n" +
         "		IF IFNULL(OLD.subStatus, \"\") != IFNULL(NEW.subStatus, \"\") THEN  \n" +
         "			INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,							refPaymentID,  \n" +
         "					Colname,							Oldval,  \n" +
         "					Newval,								createdAt,  \n" +
         "					createdBy,							createByRoleId,  \n" +
         "					updatedAt,							updatedBy,  \n" +
         "					updateByRoleId,						valueDataType)  \n" +
         "			  VALUES 	(vTableName,							NEW.id,  \n" +
         "					\"Refund Status\",						fun_getCustRefundSubStatusNameByID(OLD.subStatus),  \n" +
         "					fun_getCustRefundSubStatusNameByID(NEW.subStatus),		OLD.updatedAt,  \n" +
         "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,	'varchar');  \n" +
         "		END IF;  \n" +
         "  \n" +
         "		IF IFNULL(OLD.isMarkAsPaid, \"\") != IFNULL(NEW.isMarkAsPaid, \"\") THEN  \n" +
         "			INSERT INTO supplier_invoice_payment_history  \n" +
         "					(tableName,							refPaymentID,  \n" +
         "					Colname,							Oldval,  \n" +
         "					Newval,								createdAt,  \n" +
         "					createdBy,							createByRoleId,  \n" +
         "					updatedAt,							updatedBy,  \n" +
         "					updateByRoleId,						valueDataType)  \n" +
         "			  VALUES 	(vTableName,								NEW.id,  \n" +
         "					\"Mark As Paid\",									fun_getIntToText(OLD.isMarkAsPaid),  \n" +
         "					fun_getIntToText(NEW.isMarkAsPaid),				OLD.updatedAt,  \n" +
         "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
         "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
         "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
         "		END IF;  \n" +
         "    END IF;  \n" +
         "  \n" +
         "END;  \n" +
         /* **************************** New Script -> 28-02-2022 *********************************** */
         "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_packing_slip_material_receive` ;  \n" +
         "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive`  \n" +
         "    FOR EACH ROW BEGIN  \n" +
         "	DECLARE vMfgCodeFormat INT;  \n" +
         "    DECLARE vOldCustomer VARCHAR(100);  \n" +
         "    DECLARE vNewCustomer VARCHAR(100);  \n" +
         "  \n" +
         "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
         "	IF OLD.receiptType = \"P\" AND OLD.refPurchaseOrderID IS NULL AND NEW.isCustConsigned != OLD.isCustConsigned THEN  \n" +
         "		UPDATE packing_slip_material_receive_det SET isLineCustConsigned=NEW.isCustConsigned, LineCustomerID=NEW.CustomerID,updatedBy=NEW.updatedBy, updateByRoleId=NEW.updateByRoleId ,updatedAt=fun_DatetimetoUTCDateTime()  WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
         "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
         "        INSERT INTO pending_elastic_entity_sync_data(entityID,entityParamDet) VALUES(-14,CONCAT('{\"id\":', OLD.id , '}'));  \n" +
         "    END IF;  \n" +
         "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
         "		CASE  \n" +
         "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
         "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
         "			ELSE 'PO Date'  \n" +
         "		END ,  \n" +
         "		CAST(OLD.poDate AS CHAR), CAST(NEW.poDate AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        'varchar');  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(NEW.soDate AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip Date', CAST(OLD.packingSlipDate AS CHAR), CAST(NEW.packingSlipDate AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(NEW.invoiceDate AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(NEW.creditMemoDate AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(NEW.debitMemoDate AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
         "		CAST(OLD.receiptDate AS CHAR), CAST(NEW.receiptDate AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
         "		(  \n" +
         "			CASE  \n" +
         "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
         "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
         "				ELSE 'Supplier Invoice Status'  \n" +
         "			END  \n" +
         "		),  \n" +
         "		CAST(  \n" +
         "			(  \n" +
         "				CASE  \n" +
         "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
         "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
         "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
         "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
         "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
         "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
         "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
         "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
         "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
         "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
         "                    WHEN OLD.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
         "					ELSE NULL  \n" +
         "				END  \n" +
         "			) AS CHAR  \n" +
         "		),  \n" +
         "		CAST(  \n" +
         "			(  \n" +
         "				CASE  \n" +
         "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
         "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
         "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
         "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
         "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
         "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
         "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
         "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
         "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
         "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
         "                    WHEN NEW.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
         "					ELSE NULL  \n" +
         "				END  \n" +
         "			) AS CHAR  \n" +
         "		),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
         "		(  \n" +
         "			CASE  \n" +
         "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
         "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
         "				ELSE 'Supplier Invoice Posting Status'  \n" +
         "			END  \n" +
         "		),  \n" +
         "		CAST(  \n" +
         "			(  \n" +
         "				CASE  \n" +
         "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
         "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
         "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
         "					ELSE NULL  \n" +
         "				END  \n" +
         "			) AS CHAR  \n" +
         "		),  \n" +
         "		CAST(  \n" +
         "			(  \n" +
         "				CASE  \n" +
         "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
         "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
         "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
         "					ELSE NULL  \n" +
         "				END  \n" +
         "			) AS CHAR  \n" +
         "		),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(NEW.applyDate AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
         "		(  \n" +
         "			CASE  \n" +
         "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
         "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
         "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
         "				ELSE NULL  \n" +
         "			END  \n" +
         "		),  \n" +
         "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        'amount');  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        'varchar');  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
         "		(  \n" +
         "			CASE  \n" +
         "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
         "				ELSE 'Comment'  \n" +
         "			END  \n" +
         "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
         "		(  \n" +
         "			CASE  \n" +
         "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
         "				ELSE 'PS Internal Comment'  \n" +
         "			END  \n" +
         "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        'varchar');  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        'varchar');  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
         "		'varchar');  \n" +
         "	END IF;  \n" +
         "  \n" +
         "  /*address*/  \n" +
         "  \n" +
         "	IF IFNULL(OLD.billToAddress,0) != IFNULL(NEW.billToAddress,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Business Address', CAST(OLD.billToAddress AS CHAR), CAST(new.billToAddress AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToAddress'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.billToConactPerson,0) != IFNULL(NEW.billToConactPerson,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Business Address Contact Person', CAST(OLD.billToConactPerson AS CHAR), CAST(new.billToConactPerson AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToConactPerson'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Shipping Address', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.rmaShippingContactPerson,0) != IFNULL(NEW.rmaShippingContactPerson,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Shipping Address Contact Person', OLD.rmaShippingContactPerson, new.rmaShippingContactPerson,  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingContactPerson'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For (Intermediate Ship To) Address', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.rmaMarkForContactPerson,0) != IFNULL(NEW.rmaMarkForContactPerson,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For Contact Person', OLD.rmaMarkForContactPerson, new.rmaMarkForContactPerson,  \n" +
         "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForContactPerson'));  \n" +
         "	END IF;  \n" +
         "  \n" +
         "  /*address*/  \n" +
         "  \n" +
         "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
         "			CASE WHEN OLD.markedForRefund = 1 THEN 'Yes' ELSE 'No' END,  \n" +
         "            CASE WHEN new.markedForRefund = 1 THEN 'Yes' ELSE 'No' END,  \n" +
         "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
         "	END IF;  \n" +
         "  \n" +
         "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
         "		valueDataType)  \n" +
         "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
         "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
         "            'amount');  \n" +
         "	END IF;  \n" +
         "  \n" +
         "  IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	END IF;  \n" +
         "    IF IFNULL(OLD.CustomerID, 0) != IFNULL(NEW.CustomerID,0) THEN  \n" +
         "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.CustomerID;  \n" +
         "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.CustomerID;  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	END IF;  \n" +
         "  IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock, 0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	END IF;  \n" +
         "    IF IFNULL(OLD.invoiceApprovalComment, 0) != IFNULL(NEW.invoiceApprovalComment, 0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approval Comment',  CAST(OLD.invoiceApprovalComment AS CHAR), CAST(NEW.invoiceApprovalComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	END IF;  \n" +
         "    IF IFNULL(OLD.invoiceApprovalDate, 0) != IFNULL(NEW.invoiceApprovalDate, 0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approved On',  CAST(fun_ApplyCommonDateTimeFormatByParaValue(OLD.invoiceApprovalDate,FUN_GETTIMEZONE(), FUN_GETDATETIMEFORMAT()) AS CHAR), CAST(fun_ApplyCommonDateTimeFormatByParaValue(NEW.invoiceApprovalDate,FUN_GETTIMEZONE(), FUN_GETDATETIMEFORMAT()) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	END IF;  \n" +
         "    IF IFNULL(OLD.invoiceApprovedBy, 0) != IFNULL(NEW.invoiceApprovedBy, 0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approved By',  CAST(fun_getUserNameByID(OLD.invoiceApprovedBy) AS CHAR), CAST(fun_getUserNameByID(NEW.invoiceApprovedBy) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	END IF;  \n" +
         "      IF IFNULL(OLD.invoiceRequireManagementApproval, 0) != IFNULL(NEW.invoiceRequireManagementApproval, 0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Invoice Require Management Approval',  CAST(CASE WHEN OLD.invoiceRequireManagementApproval=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.invoiceRequireManagementApproval=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	END IF;  \n" +
         "    IF IFNULL(OLD.isZeroValue, 0) != IFNULL(NEW.isZeroValue, 0) THEN  \n" +
         "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
         "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Confirmed Zero Value Invoices Only',  CAST(CASE WHEN OLD.isZeroValue=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isZeroValue=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
         "	END IF;  \n" +
         "  END;  \n" +
         /* **************************** New Script -> 28-02-2022 *********************************** */
         "DROP PROCEDURE IF EXISTS `Sproc_GetCheckPrintAndRemittanceReport` ;  \n" +
         "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(  \n" +
         "	IN pPaymentID INT  \n" +
         "    )  \n" +
         "BEGIN  \n" +
         "		SELECT pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,  \n" +
         "				pip.paymentAmount,  \n" +
         "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,  \n" +
         "                fun_getAddressbyIDForCheckPrint(pip.payToAddressID, pip.payToContactPersonID) payToAddress,  \n" +
         "				/*pip.payToAddress,  */  \n" +
         "				pip.billToName supplierName,  \n" +
         "                fun_getAddressbyIDForCheckPrint(pip.billToAddressID, pip.billToContactPersonID) supplierAddress,  \n" +
         "                /*pip.billToAddress supplierAddress,*/  \n" +
         "                ca.email supplierEmail, '' supplierFaxNumber,  \n" +
         "                pip.bankAccountNo,  \n" +
         "                g.gencCategoryName paymentType  \n" +
         "		  FROM packingslip_invoice_payment pip  \n" +
         "          LEFT JOIN customer_addresses ca ON ca.customerId = pip.mfgcodeID AND ca.isDeleted = 0 AND ca.addressType = 'BU' AND ca.isDefault = 1  \n" +
         "          JOIN genericcategory g ON g.categoryType = 'Payable Payment Method' AND g.gencCategoryID = pip.paymentType  \n" +
         "		 WHERE pip.isDeleted = 0  \n" +
         "			AND pip.refPaymentMode = 'P'  \n" +
         "		   AND pip.id = pPaymentID;  \n" +
         "  \n" +
         "		  SELECT pd.refPayementid id,  \n" +
         "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
         "							p.invoiceNumber  \n" +
         "						WHEN p.`receiptType` = 'C' THEN  \n" +
         "							p.creditMemoNumber  \n" +
         "						ELSE  \n" +
         "							p.debitMemoNumber  \n" +
         "					END) invoiceNumber,  \n" +
         "  \n" +
         "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
         "							p.invoiceNumber  \n" +
         "				ELSE  \n" +
         "					(SELECT 	ps.invoiceNumber  \n" +
         "					FROM 	packing_slip_material_receive ps  \n" +
         "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno  \n" +
         "							AND ps.isDeleted = 0  )  \n" +
         "				END  \n" +
         "				) refInvoiceNumber,  \n" +
         "  \n" +
         "				(CASE WHEN p.`receiptType` = 'I' THEN  \n" +
         "							p.invoiceDate  \n" +
         "						WHEN p.`receiptType` = 'C' THEN  \n" +
         "							p.creditMemoDate  \n" +
         "						ELSE  \n" +
         "							p.debitMemoDate  \n" +
         "					END) invoiceDate,  \n" +
         "  \n" +
         "				p.remark `description`,  \n" +
         "				/*(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,*/  \n" +
         "                pd.paymentAmount extendedPrice,  \n" +
         "				0 discount,  \n" +
         "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
         "							'Invoice'  \n" +
         "						WHEN p.`receiptType` = 'C' THEN  \n" +
         "							'Credit Memo'  \n" +
         "						ELSE  \n" +
         "							'Debit Memo'  \n" +
         "					END) receiptMemoType,  \n" +
         "                    p.poNumber  \n" +
         "			FROM packing_slip_material_receive p  \n" +
         "            JOIN packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id  \n" +
         "			WHERE /*p.isDeleted =0  \n" +
         "			and*/ p.receiptType IN ('I','C','D')  \n" +
         "            AND EXISTS (SELECT 1 FROM packingslip_invoice_payment pip WHERE pip.refPaymentMode = 'P' AND pip.id = pd.refPayementid)  \n" +
         "			/*and p.`status` = 'P'*/  \n" +
         "			AND pd.refPayementid = pPaymentID  \n" +
         "            ORDER BY invoiceDate, invoiceNumber;  \n" +
         "  \n" +
         "        	SELECT CONCAT('<b>',IF(ci.legalName = '' OR ci.legalName IS NULL,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'</b><br/>',IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''),'<br/>',  \n" +
         "				IFNULL(c.countryName,''))AS address,  \n" +
         "				ci.personName AS companyContactName,ci.registeredEmail AS companyEmail,ci.faxNumber,ci.contactNumber AS phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName,ci.registeredEmail AS email  \n" +
         "			FROM company_info ci  \n" +
         "			LEFT JOIN countrymst c ON ci.countryID=c.countryID AND c.isDeleted = 0  \n" +
         "			WHERE ci.isDeleted=0;  \n" +
         "END;  \n" +
         /* **************************** New Script -> 28-02-2022 *********************************** */
         "DROP PROCEDURE IF EXISTS `Sproc_getDebitMemoReportDetail` ;  \n" +
         "CREATE PROCEDURE `Sproc_getDebitMemoReportDetail`(  \n" +
         "	IN pReceiptID INT,  \n" +
         "    IN pEmployeeID INT  \n" +
         ")  \n" +
         "BEGIN  \n" +
         "  \n" +
         "    # Debit Memo report details which shows in 2nd section as table format  \n" +
         "         SELECT c.mfgPN partNumber, c.mfgPNDescription DESCRIPTION,  \n" +
         "				psd.packingSlipQty quantity, psd.invoicePrice, psd.extendedPrice, psd.approveNote,  \n" +
         "				ps.debitMemoDate, ps.debitMemoNumber  \n" +
         "			FROM packing_slip_material_receive_det psd  \n" +
         "	  INNER JOIN packing_slip_material_receive ps ON ps.id = psd.refPackingSlipMaterialRecID  \n" +
         "	   LEFT JOIN COMPONENT c ON psd.partID = c.id AND c.isDeleted = 0  \n" +
         "		   WHERE psd.isDeleted = 0  \n" +
         "             AND psd.refPackingSlipMaterialRecID  = pReceiptID  \n" +
         "             AND ps.isDeleted =0;  \n" +
         "  \n" +
         "	# Debit Memo report main section details which shows in 1st section  \n" +
         "       SELECT ps.id, ps.poNumber, ps.debitMemoNumber,  \n" +
         "				DATE_FORMAT(ps.debitMemoDate, '%m/%d/%Y') debitMemoDate,  \n" +
         "				DATE_FORMAT(psr.invoiceDate, '%m/%d/%Y') refInvoiceDate,  \n" +
         "				psr.invoiceNumber refInvoiceNumber,  \n" +
         "				fun_getMfgNameByID(ps.mfgCodeID) supplier,  \n" +
         "				/*CONCAT('ATTN: ', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''), (CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/> ',  \n" +
         "				IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ',IFNULL(ca.postcode,''),'<br/>',IFNULL(co.countryName,'')) billingAddress*/  \n" +
         "                fun_getAddressbyIDAndContactPersonID(ps.billToAddressID, ps.billToContactPersonID) billingAddress  \n" +
         "		FROM packing_slip_material_receive ps  \n" +
         "	LEFT JOIN packing_slip_material_receive psr ON psr.id = ps.refParentCreditDebitInvoiceno  AND psr.isDeleted = 0  \n" +
         "	LEFT JOIN customer_addresses ca ON ca.customerID = ps.mfgCodeID AND ca.isDeleted = 0 AND ca.addressType = 'BU' AND ca.isDefault = 1  \n" +
         "	LEFT JOIN countrymst co ON co.countryID = ca.countryID  AND co.isDeleted = 0  \n" +
         "		WHERE ps.id = pReceiptID  \n" +
         "          AND ps.receiptType = 'D'  \n" +
         "          AND ps.isDeleted = 0;  \n" +
         "  \n" +
         "END;  \n" +
         /* **************************** New Script -> 28-02-2022 *********************************** */
         "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipInvoicePaymentToInformation` ;  \n" +
         "CREATE PROCEDURE `Sproc_GetPackingSlipInvoicePaymentToInformation`(  \n" +
         "	IN pPaymentId INT,  \n" +
         "	IN pMfgCodeId INT  \n" +
         ")  \n" +
         "BEGIN  \n" +
         "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
         "	DECLARE v_TimeZone VARCHAR(50);  \n" +
         "    DECLARE v_mfgNameFormat INT;  \n" +
         "  \n" +
         "SELECT FUN_GETMFGCODENAMEFORMAT() INTO v_mfgNameFormat;  \n" +
         "  \n" +
         "	IF pPaymentId IS NOT NULL THEN  \n" +
         "  \n" +
         "        SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
         "		SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
         "  \n" +
         "		SELECT  pi.systemId,  \n" +
         "				pi.id paymentId,  \n" +
         "				pi.accountReference,  \n" +
         "				pi.mfgcodeID,  \n" +
         "				m.mfgCode,  \n" +
         "				m.mfgName,  \n" +
         "				FUN_GETFORMATTEDMFGCODE(m.mfgCode, m.mfgName, v_mfgNameFormat) fullMfgName,  \n" +
         "				pi.paymentType,  \n" +
         "				p.gencCategoryName paymentTypeName,  \n" +
         "				pi.paymentNumber,  \n" +
         "				pi.bankAccountMasID,  \n" +
         "				pi.bankName,  \n" +
         "				pi.bankAccountNo,  \n" +
         "				pi.paymentDate,  \n" +
         "				pi.paymentAmount,  \n" +
         "				pi.payToName,  \n" +
         "				pi.payToAddress,  \n" +
         "                pi.payToAddressID,  \n" +
         "				pi.payToContactPersonID,  \n" +
         "				pi.remark,  \n" +
         "				pi.isPaymentVoided,  \n" +
         "				pi.voidPaymentReason,  \n" +
         "				pi.billToName,  \n" +
         "				pi.billToAddress,  \n" +
         "                pi.billToAddressID,  \n" +
         "				pi.billToContactPersonID,  \n" +
         "				pi.lockStatus,  \n" +
         "				FUN_GETUSERNAMEBYID(pi.lockedBy) lockByName,  \n" +
         "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(pi.lockedAt,  v_TimeZone,  v_DateTimeDisplayFormat) lockedAt,  \n" +
         "				PI.refPaymentMode  \n" +
         "		FROM  packingslip_invoice_payment PI  \n" +
         "        INNER JOIN  mfgcodemst m ON m.id = pi.mfgcodeID  \n" +
         "        INNER JOIN  genericcategory p ON p.gencCategoryID = pi.paymentType  \n" +
         "		WHERE  pi.isDeleted = 0  \n" +
         "        AND PI.refPaymentMode = 'P'  \n" +
         "        AND pi.id = pPaymentId;  \n" +
         "	ELSE  \n" +
         "		SELECT 		m.accountRef accountReference,  \n" +
         "				m.id mfgcodeID,  \n" +
         "				m.mfgCode,  \n" +
         "				m.mfgName,  \n" +
         "				fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) fullMfgName,  \n" +
         "				m.paymentMethodID paymentType,  \n" +
         "				p.gencCategoryName paymentTypeName,  \n" +
         "				NULL paymentNumber,  \n" +
         "				b.id bankAccountMasID,  \n" +
         "				b.bankName,  \n" +
         "				b.accountCode bankAccountNo,  \n" +
         "				NULL paymentDate,  \n" +
         "				NULL paymentAmount,  \n" +
         "				ca.bankRemitToName payToName,  \n" +
         "				fun_getAddressbyIDForCheckPrint(ca.id, ca.defaultContactPersonID) payToAddress,  \n" +
         "				NULL remark,  \n" +
         "				0 isPaymentVoided,  \n" +
         "				NULL voidPaymentReason,  \n" +
         "				cb.companyName billToName,  \n" +
         "				fun_getAddressbyIDForCheckPrint(cb.id, cb.defaultContactPersonID) billToAddress,  \n" +
         "				NULL lockStatus,  \n" +
         "				NULL lockByName,  \n" +
         "				NULL lockedAt  \n" +
         "		FROM 		mfgcodemst m  \n" +
         "		LEFT JOIN 	genericcategory p ON p.gencCategoryID = m.paymentMethodID  \n" +
         "        LEFT JOIN 	bank_mst b ON b.id = p.bankid AND b.isDeleted = 0 AND b.isActive = 1  \n" +
         "		LEFT JOIN 	customer_addresses ca ON ca.customerId = m.id AND ca.isDeleted = 0 AND ca.addressType = 'P' AND ca.isDefault = 1  \n" +
         "		LEFT JOIN 	customer_addresses cb ON cb.customerId = m.id AND cb.isDeleted = 0 AND cb.addressType = 'BU' AND cb.isDefault = 1  \n" +
         "		WHERE 		m.isDeleted = 0  \n" +
         "					AND m.id = pMfgCodeId;  \n" +
         "	END IF;  \n" +
         "END;  \n" +
         /* **************************** New Script -> 28-02-2022 *********************************** */
         "DROP FUNCTION IF EXISTS `fun_getDefaultCompanyRemitAddrByID` ;  \n" +
         "CREATE FUNCTION `fun_getDefaultCompanyRemitAddrByID`(  \n" +
         "	pAddressID INT  \n" +
         ") RETURNS LONGTEXT CHARSET utf8mb4  \n" +
         "BEGIN  \n" +
         "	DECLARE pAddress VARCHAR(2000);  \n" +
         "  \n" +
         "	SELECT CONCAT(UPPER(ca.companyName),fun_getNewLineCharacter(),ca.street1,' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),fun_getNewLineCharacter(),ca.city,', ',ca.state,' ',ca.postcode,', ',c.countryName) INTO pAddress  \n" +
         "	FROM customer_addresses ca  \n" +
         "		LEFT JOIN countrymst c ON c.countryID=ca.countryID  \n" +
         "	WHERE ca.id = pAddressID ;  \n" +
         "  \n" +
         "	RETURN pAddress;  \n" +
         "  \n" +
         "END;  \n" +
         /* **************************** New Script -> 28-02-2022 *********************************** */
         "DROP PROCEDURE IF EXISTS `Sproc_GetCompanyReportDetails` ;  \n" +
         "CREATE PROCEDURE `Sproc_GetCompanyReportDetails`()  \n" +
         "BEGIN  \n" +
         "	DECLARE vContPersonNameFormat INT;  \n" +
         "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
         "  \n" +
         "	# Company detail for Report  \n" +
         "	SELECT CONCAT( IF(ci.legalName = '' OR ci.legalName IS NULL,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'<br/>',  \n" +
         "    IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''), ', ',  \n" +
         "    IFNULL(c.countryName,''),'<br/>','Email: &nbsp;',IFNULL(ci.registeredEmail,''),'<br/>','Phone: ', IFNULL(ci.contactNumber,''),  \n" +
         "    '<br/>','Fax: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',IFNULL(ci.faxNumber,''))AS address,  \n" +
         "		ci.registeredEmail AS companyEmail, ci.registeredEmail AS email,   ci.faxNumber,ci.contactNumber AS contact,ci.phoneExt,ci.contactNumber AS phoneNo, ci.name AS  mfgName,'' AS headerName,'accounting@flextronassembly.com' AS billingEmail,  \n" +
         "		ci.ein, fun_getDefaultCompanyRemitAddrByID(ca.id) AS remittanceAddress,  \n" +
         "        fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName, vContPersonNameFormat) companyContactName  \n" +
         "	FROM company_info ci  \n" +
         "		LEFT JOIN countrymst c ON ci.countryID=c.countryID AND c.isDeleted = 0  \n" +
         "		LEFT JOIN contactperson cp ON ci.mfgCodeId = cp.refTransID AND cp.refTableName = 'mfgcodemst' AND cp.isDefault = 1 AND cp.isActive = 1 AND cp.isDeleted = 0  \n" +
         "		LEFT JOIN customer_addresses ca ON ca.customerId = ci.mfgCodeId AND ca.addressType = 'P' AND ca.isDefault = 1 AND ca.isDeleted = 0  \n" +
         "	WHERE ci.isDeleted=0;  \n" +
         "END;  \n" +
         /* **************************** New Script -> 28-02-2022 *********************************** */
         /* **************************** New Script -> 28-02-2022 *********************************** */
         /* **************************** Add Script Version -> 28-02-2022 *********************************** */
         "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
         "VALUES (5972,'2.00','V1',' #39488, 39489, 39490 merge from main to dev - KS '," + userid + " , '" + requiredDet.ipAddress + "');"
         );
        break;
        case 5972:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-02-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getCustomerSupplierGeographicalLocationReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_getCustomerSupplierGeographicalLocationReportDetails`(  \n" +
                "	IN pEntityType varchar(5),  \n" +
                "	IN pAddressType varchar(5),  \n" +
                "	IN pisDefaultAddress tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vWhereClause VARCHAR(16383);  \n" +
                "    SET vWhereClause = ' 1=1 ';  \n" +
                "	IF(pEntityType IS NOT NULL) THEN  \n" +
                "		IF pEntityType = 'CUST' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cu.mfgType = 'MFG' AND cu.isCustOrDisty = 1 \");  \n" +
                "		ELSEIF pEntityType = 'DIST' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cu.mfgType = 'DIST' \");  \n" +
                "		ELSE  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND 1=1 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAddressType IS NOT NULL) THEN  \n" +
                "		IF pAddressType = 'B' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'B' \");  \n" +
                "		ELSEIF pAddressType = 'S' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'S' \");  \n" +
                "		ELSEIF pAddressType = 'I' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'I' \");  \n" +
                "		ELSEIF pAddressType = 'P' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'P' \");  \n" +
                "		ELSEIF pAddressType = 'R' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'R' \");  \n" +
                "		ELSEIF pAddressType = 'W' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'W' \");  \n" +
                "		ELSEIF pAddressType = 'BU' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'BU' \");  \n" +
                "		ELSE  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND 1=1 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pisDefaultAddress = 1 THEN  \n" +
                "		SET vWhereClause = CONCAT(vWhereClause, ' AND cua.isDefault = 1 ');  \n" +
                "    ELSE  \n" +
                "		SET vWhereClause = CONCAT(vWhereClause, ' AND 1=1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @tempQuery = CONCAT(\"SELECT DISTINCT CONCAT(IF(cu.legalName = '' OR cu.legalName is null,'' ,CONCAT(cu.legalName, ' d/b/a, ')), IFNULL(cu.mfgName, ''), ' Address: ',IFNULL(cua.street1, ''), ' ',IFNULL(cua.city, ''),', ',IFNULL(cua.state, ''),' ',IFNULL(cua.postcode, ''), ',', IFNULL(c.countryName,''), ' ' ,IFNULL(CONCAT('Email:',fun_getPrimaryEmailFromJsonList(cp.email)),''), IFNULL(CONCAT(' Phone: ',fun_getPrimaryPhoneFromJsonList(cp.phoneNumber)),''),IFNULL(CONCAT(' Ext.',fun_getPrimaryPhExtensionFromJsonList(cp.phoneNumber)),''))AS Address, CONCAT(cua.Latitude ,' ',  cua.longitude) AS Location , cu.mfgCode as Code, cu.mfgName as Name, (case WHEN cu.mfgType = 'MFG' then 'Customer' WHEN cu.mfgType = 'DIST' then 'Supplier' else '' END) as Type, (case WHEN cua.isDefault = 1 then 'Yes' else 'No' END) as DefaultAddress,  \n" +
                "    (case WHEN cua.addressType = 'B' then 'Billing Address' WHEN cua.addressType = 'S' then 'Shipping Address'  WHEN cua.addressType = 'I' then 'Mark For (Intermediate Ship To) Address'  \n" +
                "		WHEN cua.addressType = 'P' then 'Remit To Address' WHEN cua.addressType = 'R' then 'RMA Shipping Address'  \n" +
                "        WHEN cua.addressType = 'W' then 'Wire Transfer Address' WHEN cua.addressType = 'BU' then 'Business Address' else '' END) as AddressType  \n" +
                "        FROM customer_addresses cua  \n" +
                "				Left Join contactperson cp on cua.defaultContactPersonID = cp.personId  \n" +
                "				JOIN mfgcodemst cu ON cu.id = cua.customerId  \n" +
                "				LEFT JOIN countrymst c ON cua.countryID=c.countryID  \n" +
                "				WHERE (cua.latitude is not null And cua.longitude is not null) and\", vWhereClause ,\";\");  \n" +
                "  \n" +
                "	PREPARE query1 FROM @tempQuery;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5973,'2.00','V1',' US 39489 : Task 41706: Geographical Address View Report Changes. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 5973:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-02-2022 ******************************************* */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
                "	IN pAssyIDs VARCHAR(16383),  \n" +
                "	IN pRestrictPart TINYINT,  \n" +
                "	IN pExpireMaterial TINYINT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pIsShowPackagingAlias TINYINT,  \n" +
                "	IN pStandardIDs VARCHAR(16383),  \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),  \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),  \n" +
                "	IN pDateCode VARCHAR(16383),  \n" +
                "	IN pIsAvailableToSell TINYINT,  \n" +
                "	IN pIsRestrictedUMID TINYINT,  \n" +
                "	IN pIsInternalStock TINYINT,  \n" +
                "	IN pIsCustomerStock TINYINT,  \n" +
                "	IN pdepartmentIDs VARCHAR(16383),  \n" +
                "	IN pwarehouseType VARCHAR(255),  \n" +
                "	IN pWarehouse VARCHAR(16383),  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pSearchTextAttribute LONGTEXT,  \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),  \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
                "	IN pInventoryType VARCHAR(255),  \n" +
                "    IN pInnerQueryWhereClause VARCHAR(16383),  \n" +
                "    IN pIsNonCofc TINYINT,  \n" +
                "    IN pEmployeeIDs VARCHAR(16383)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE attributeSearchString LONGTEXT;  \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "	DECLARE attributeSearchChip  VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);  \n" +
                "    DECLARE v_ExpiryDate datetime;  \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SET v_DescriptionWhereClause = '';  \n" +
                "    SET v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN  \n" +
                "		SET pInnerQueryWhereClause = ' ';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsNonCofc = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  packingSlipName IS NULL ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* Non COFc records filter */  \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pEmployeeIDs IS NOT NULL AND pEmployeeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND createdBy in (', pEmployeeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN  \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
                "            into	v_PartIDs  \n" +
                "			FROM 	component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 	c.id = pPartId  \n" +
                "			AND 	c.isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			select pPartId into v_PartIDs;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*below query need to refactor*/  \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
                "		SET attributeSearchString = pSearchTextAttribute;  \n" +
                "		do_this:  \n" +
                "		LOOP  \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
                "				LEAVE do_this;  \n" +
                "			END IF;  \n" +
                "		END LOOP do_this;  \n" +
                "	END IF;  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "			AND partId IN (SELECT id FROM component WHERE isDeleted = 0 AND mfgcodeid=pCustomerId);  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;  \n" +
                "    CREATE temporary table temp_component_sid_stock(  \n" +
                "		  id int NOT NULL DEFAULT '0',  \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
                "		  uid varchar(15) DEFAULT NULL,  \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
                "		  fromUIDId int DEFAULT NULL,  \n" +
                "		  fromUID varchar(15) DEFAULT NULL,  \n" +
                "		  parentUIDId int DEFAULT NULL,  \n" +
                "		  parentUID varchar(15) DEFAULT NULL,  \n" +
                "		  mfgcodeID int NOT NULL,  \n" +
                "		  mfg text,  \n" +
                "		  refcompid int DEFAULT NULL,  \n" +
                "		  mfgPN varchar(100) NOT NULL,  \n" +
                "		  PIDCode varchar(109) NOT NULL,  \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,  \n" +
                "		  RoHSStatusID int NOT NULL,  \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
                "		  rohsName varchar(50) DEFAULT NULL,  \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
                "		  spq decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
                "		  uom int DEFAULT NULL,  \n" +
                "          uomClassID int DEFAULT NULL,  \n" +
                "		  uomName varchar(100) NOT NULL,  \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  packaginggroupID int DEFAULT NULL,  \n" +
                "		  packaging int DEFAULT NULL,  \n" +
                "		  packagingName varchar(100) NOT NULL,  \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
                "		  costCategoryID int DEFAULT NULL,  \n" +
                "		  costCategory varchar(147) DEFAULT NULL,  \n" +
                "		  lotCode varchar(255) DEFAULT NULL,  \n" +
                "		  dateCode varchar(10) DEFAULT NULL,  \n" +
                "		  UMIDrohsStatusID int NOT NULL,  \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
                "		  binID int DEFAULT NULL,  \n" +
                "		  location varchar(110) DEFAULT NULL,  \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  warehouseID int DEFAULT NULL,  \n" +
                "		  warehouse varchar(50) NOT NULL,  \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,  \n" +
                "		  department varchar(50) NOT NULL,  \n" +
                "		  departmentID int NOT NULL DEFAULT '0',  \n" +
                "		  fromBin int DEFAULT NULL,  \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,  \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  fromWarehouse int DEFAULT NULL,  \n" +
                "		  fromWHName varchar(50) NOT NULL,  \n" +
                "		  fromDepartment int DEFAULT NULL,  \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,  \n" +
                "		  orgRecBin int DEFAULT NULL,  \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
                "		  orgRecWarehouse int DEFAULT NULL,  \n" +
                "		  orgRecWHName varchar(50) NOT NULL,  \n" +
                "		  orgRecDepartment int DEFAULT NULL,  \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
                "		  expiryDate date DEFAULT NULL,  \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
                "		  pcbPerArray int DEFAULT NULL,  \n" +
                "		  nickName varchar(50) DEFAULT NULL,  \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,  \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,  \n" +
                "		  woNumber varchar(255) DEFAULT NULL,  \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,  \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
                "		  mountingTypeID int NOT NULL,  \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
                "		  partPackage varchar(50) DEFAULT NULL,  \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
                "		  detailDescription text,  \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
                "		  customerID int DEFAULT NULL,  \n" +
                "		  customer text,  \n" +
                "		  assyID int DEFAULT NULL,  \n" +
                "		  assembly varchar(109),  \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
                "          cpnMFGCodeID INT DEFAULT NULL,  \n" +
                "		  cpnMFGCode text,  \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,  \n" +
                "		  cpnMFGPN varchar(100),  \n" +
                "		  refSupplierPartId int DEFAULT NULL,  \n" +
                "		  supplierMFGCode text,  \n" +
                "		  supplieMFGPN varchar(100),  \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
                "		  isTransit varchar(10) DEFAULT NULL,  \n" +
                "		  searchUser varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
                "		  createdAt varchar(50) DEFAULT NULL,  \n" +
                "		  createdBy varchar(255) NOT NULL,  \n" +
                "		  createdByName varchar(50) DEFAULT NULL,  \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,  \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,  \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  allocatedToKit text,  \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
                "		  packingSupplierName text,  \n" +
                "		  packingSlipId int DEFAULT NULL,  \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,  \n" +
                "          packingSlipNumber VARCHAR(100) DEFAULT NULL,  \n" +
                "          cocDocumentCount int default 0,  \n" +
                "          parentCofCDocumentCount int default 0,  \n" +
                "          createByRoleId int default null,  \n" +
                "          updateByRoleId int default null,  \n" +
                "          isReservedStock TINYINT DEFAULT FALSE,  \n" +
                "          reservedStock VARCHAR(10),  \n" +
                "          custAssyPN varchar(100) DEFAULT NULL  \n" +
                "		);  \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
                "					(		id, 				scanlabel, 			umidPrefix, 			uid,					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType, 					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "                            parentUID, 			mfgcodeID, 			mfg, 					refcompid, 				mfgPN, 					PIDCode,  \n" +
                "                            packageQty, 		mslLevel, 			RoHSStatusID, 			rohsIcon, 				rohsName, 				mfgPNDescription,  \n" +
                "                            spq, 				pkgQty, 			pkgUnit, 				uom, 					uomClassID, 			uomName,  \n" +
                "                            orgPkgUnit, 		orgQty, 			packaginggroupID, 		packaging, 				packagingName, 			printStatus,  \n" +
                "                            tentativePrice, 	costScrapQty, 		costCategoryID, 		costCategory, 			lotCode, 				dateCode,  \n" +
                "                            UMIDrohsStatusID, 	UMIDrohsStatus, 	binID, 					location, 				side, 					warehouseID,  \n" +
                "                            warehouse, 			warehouseType, 		department, 			departmentID, 			fromBin, 				fromBinName,  \n" +
                "                            fromSide, 			fromWarehouse, 		fromWHName, 			fromDepartment, 		fromDepartmentName, 	orgRecBin,  \n" +
                "                            orgRecBinName, 		orgRecWarehouse, 	orgRecWHName, 			orgRecDepartment, 		orgRecDepartmentName, 	expiryDate,  \n" +
                "                            expiredStatus, 		pcbPerArray, 		nickName, 				specialNote, 			isinStk, 				woNumber,  \n" +
                "                            refRestrictUMIDId, 	isUMIDRestrict, 	UMIDRestricted, 		restrictUsePermanently, restrictUSEwithpermission,  \n" +
                "                            restrictPackagingUsePermanently, 		restrictPackagingUseWithpermission, 			reasonUMIDRestricted, 	countOfRestrictUMID,  \n" +
                "                            mountingTypeID, 	mountingTypeName, 	externalPartPackage, 	partPackage, 			internalPartPackage, 	isCustom,  \n" +
                "                            detailDescription, 	pictureCount, 		customerID, 			customer, 				assyID,					assembly,  \n" +
                "                            cpn, 				mfgAvailable, 		customerConsign, 		cpnMFGCodeID, 			cpnMFGCode, 			refCPNMFGPNID,  \n" +
                "                            cpnMFGPN, 			refSupplierPartId, 	supplierMFGCode, 		supplieMFGPN, 			totalScrapUnit, 		perScrapQty,  \n" +
                "                            isTransit, 			searchUser, 		mfrDateCodeFormatID, 	mfrDateCode, 			mfrDateCodeFormat, 		createdAt,  \n" +
                "                            createdBy, 			createdByName, 		createdbyRole, 			createdUserCode, 		createByRoleId, 		updatedAt,  \n" +
                "                            updatedBy, 			umidModifiedBy, 	updatedbyRole, 			updateByRoleId, 		allocatedToKit, 		packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId, 		packingSlipSupplierId, 	packingSlipNumber,		isReservedStock,		reservedStock,  \n" +
                "                            custAssyPN)  \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomClassID,				uomName,  \n" +
                "                            orgPkgUnit,      	orgQty, 			packaginggroupID,		packaging,				packagingName,  		printStatus,  \n" +
                "                            tentativePrice,   	costScrapQty,		costCategoryID,			costCategory,			lotCode,  \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,  \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin,  \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName,  \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,  \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,  \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,  \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,  \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,  \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly,  \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCodeID,			cpnMFGCode, 		 	refCPNMFGPNID,  \n" +
                "                            cpnMFGPN,  			refSupplierPartId,	supplierMFGCode,		supplieMFGPN,			totalScrapUnit,			perScrapQty,  \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt,  \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt,  \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId,	packingSlipNumber,		isReservedStock,		reservedStock,  \n" +
                "                            custAssyPN  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,  \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'  \n" +
                "										WHEN css.receiveMaterialType = 'CP' THEN 'Customer Consigned Part'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayReceiveMaterialType,  \n" +
                "								css.stockInventoryType,  \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Incoming Stock'  \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Move Non-Q2C to Q2C Stock'  \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Non-UMID Assembly Stock'  \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayStockInventoryType,  \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,  \n" +
                "								fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat ,\") AS mfg,			css.refcompid,				c.mfgPN,					c.PIDCode,  \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,  \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,  \n" +
                "								css.pkgUnit,				css.uom,					u.measurementTypeID uomClassID,							u.unitName uomName,  \n" +
                "                                IFNULL(css.orgPkgUnit, 0) orgPkgUnit, 					css.orgQty,					c.packaginggroupID,			css.packaging,  \n" +
                "                                cp.name packagingName,		css.printStatus, 			IFNULL(c.price, 0) tentativePrice,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * IFNULL(c.price, 0)), 2) costScrapQty,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * 100), 2) perScrapQty,  \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,  \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,  \n" +
                "								fun_GetFormattedMfgCode(cust.mfgCode, cust.mfgName,\", vMfgCodeFormat ,\") AS customer,  \n" +
                "								css.assyID,					assy.PIDCode assembly,  \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,  \n" +
                "								css.refCPNMFGPNID,	 m_cpn.id cpnMFGCodeID,  \n" +
                "                                fun_GetFormattedMfgCode(m_cpn.mfgCode, m_cpn.mfgName,\", vMfgCodeFormat ,\") AS cpnMFGCode,  \n" +
                "                                cpn_comp.mfgPN cpnMFGPN,  \n" +
                "                                css.refSupplierPartId,  \n" +
                "								fun_GetFormattedMfgCode(m_supp.mfgCode, m_supp.mfgName,\", vMfgCodeFormat ,\") AS supplierMFGCode,  \n" +
                "                                supp_comp.mfgPN supplieMFGPN,  \n" +
                "								(IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0)) totalScrapUnit,  \n" +
                "								null isTransit,  \n" +
                "								null searchUser,  \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,  \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,  \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
                "								kit.kitname allocatedToKit,  \n" +
                "								null packingSlipName,  \n" +
                "								null packingSupplierName,  \n" +
                "								null packingSlipId,  \n" +
                "								null packingSlipSupplierId,  \n" +
                "                                NULL packingSlipNumber,  \n" +
                "                                css.isReservedStock,  \n" +
                "                                IF(css.isReservedStock = 0,'No','Yes') AS reservedStock,		c.custAssyPN  \n" +
                "					FROM 		component_sid_stock css  \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
                "								else ''  \n" +
                "                        end),  \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
                "                        /*below query need to refactor*/  \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN  \n" +
                "							' AND not exists (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	rfq_lineitems_alternatepart a  \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
                "								)  \n" +
                "						' else '' end),  \n" +
                "					\"  \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id  \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  \n" +
                "					inner join uoms u on css.uom = u.id  \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
                "					inner join binmst b on css.binID = b.id \" ,  \n" +
                "						(Case  \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id  \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id  \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
                "					left join (  \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit  \n" +
                "								FROM 		component_sid_stock_history cssh  \n" +
                "								where 		cssh.scrappedUnit > 0  \n" +
                "								GROUP BY 	cssh.refUIDId  \n" +
                "					) cssh on css.id = cssh.refUIDId  \n" +
                "                   left join (  \n" +
                "								SELECT 		vu.umidid,	SUM((IFNULL(vu.scrappedunit,0) - IFNULL(vu.scrapExpiredUnit,0))) AS kitScrappepUnit  \n" +
                "								FROM 		vu_material_consumption_scrapped_det vu  \n" +
                "                                LEFT JOIN  component_sid_stock_history cssh ON cssh.id = vu.componentSIDStockHistoryID AND cssh.isDeleted = 0  \n" +
                "								WHERE 		vu.scrappedunit > 0  \n" +
                "								GROUP BY 	vu.umidid  \n" +
                "					) vuu on vuu.umidid = css.id  \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
                "					left join (  \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
                "						from (  \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
                "							from component_sid_stock_restrict_umid rest_umid  \n" +
                "						) css_rst where css_rst.rnk = 1  \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
                "					left join (  \n" +
                "						SELECT 		k.refUIDId,  \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname  \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)  \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3  \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "						INNER JOIN	component c ON k.assyID = c.id  \n" +
                "						WHERE 		k.status = 'A'  \n" +
                "						GROUP BY 	k.refUIDId  \n" +
                "					) kit  ON kit.refUIDId = css.id  \n" +
                "					WHERE 	css.isdeleted = 0\",  \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
                "							  when (pCustomerId IS NOT NULL) then  \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
                "                        (case when (pExpireMaterial = 1) THEN  \n" +
                "									(case when (pExpiredDay = 0) THEN  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate = fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") ')  \n" +
                "									ELSE  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate BETWEEN fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") AND (fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") + INTERVAL ', pExpiredDay,' DAY ) ')  \n" +
                "									END)  \n" +
                "							  else ''  \n" +
                "						end),  \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 else ''  \n" +
                "                        end),  \n" +
                "						v_DescriptionWhereClause,  \n" +
                "                        pInnerQueryWhereClause,  \n" +
                "				\") As tempUMID\"  \n" +
                "			);  \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock;  \n" +
                "	EXECUTE tempSQLQuery;  \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;  \n" +
                "  \n" +
                "    # Update count for self documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.cocDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "	# Update count for parent documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "    # Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
                "	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
                "											then CONCAT(ps.mfgCode, ps.packingSlipNumber)  \n" +
                "										else null  \n" +
                "								  end),  \n" +
                "			t.packingSupplierName = fun_GetFormattedMfgCode(ps.mfgCode, ps.mfgName, vMfgCodeFormat),  \n" +
                "			t.packingSlipId = ps.packingSlipId,  \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId,  \n" +
                "            t.packingSlipNumber = ps.packingSlipNumber  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)  \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI');  \n" +
                "  \n" +
                "	# Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t  \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
                "	and		t.packingSlipId is null  \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "  \n" +
                "    # Update created by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.createByRoleId  \n" +
                "	set t.createdbyRole = r.name;  \n" +
                "  \n" +
                "    # Update updated by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.updateByRoleId  \n" +
                "	set t.updatedbyRole = r.name;  \n" +
                "  \n" +
                "    # Update created by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on u.id = t.createdBy  \n" +
                "    inner join employees emp on emp.id = u.employeeID  \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
                "  \n" +
                "    # Update updated by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on  u.id = t.updatedBy  \n" +
                "    inner join employees emp  on emp.id = u.employeeID  \n" +
                "	set t.umidModifiedBy = emp.initialName ;  \n" +
                "  \n" +
                "    # Update MFR Date Code Format  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "	inner join dateCodeFormatMst d on  d.id = t.mfrDateCodeFormatID  \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
                "  \n" +
                "    # Update In Transit Data  \n" +
                "	Update temp_component_sid_stock t  \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
                "	set t.isTransit = 'Yes',  \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)  \n" +
                "							when (messagetype = 1001) then 'Unauthorized'  \n" +
                "							else ''  \n" +
                "                        end);  \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \") as warehouseDetail\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT DISTINCT mfgcodeID AS id, mfg AS mfgCodeName from ( \", @vFromSQLQuery, \") as mfrDetail\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT DISTINCT packingSlipSupplierId AS id, packingSupplierName AS  mfgCodeName from ( \", @vFromSQLQuery, \") as supplierDetail\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetUMIDDetailsByID`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUMIDDetailsByID`(  \n" +
                "	IN pUIDId INT,  \n" +
                "	IN pUID VARCHAR(15)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE vMfgCodeFormat INT;  \n" +
                "        SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "		IF(pUIDId IS NULL) THEN  \n" +
                "			SET pUIDId = (SELECT cs.id FROM component_sid_stock cs WHERE cs.uid = pUID AND cs.isDeleted = 0);  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		SELECT 	css.id AS uidId, 		css.uid, 		css.orgqty AS orgQty,			css.pkgQty, 		css.orgPkgUnit,			css.pkgUnit,  \n" +
                "				css.prefix,		css.uidPrefix,	css.sealDate,		css.cpn,			css.RefCPNMFGPNID,		css.mfgAvailabel,  \n" +
                "                css.assyID AS uidAssyID,		css.receiveMaterialType,				css.refSupplierPartId,	css.customerConsign,  \n" +
                "				css.spq, 		css.uom,		css.dateCode, 		css.packaging,		css.stockInventoryType, css.specialNote,  \n" +
                "                css.mfrDateCodeFormatID,		css.mfrDateCode,	css.woID,			u.unitName,				u.measurementTypeID AS uomClassID,  \n" +
                "                css.woNumber, 	css.fromUIDId, 	css.fromUID, 		css.parentUIDId,		css.parentUID,		css.pcbPerArray,  \n" +
                "                (CASE WHEN css.fromUIDId IS NOT NULL AND css.parentUIDId IS NOT NULL THEN TRUE ELSE FALSE END) AS isSplitUID,	css.isReservedStock,  \n" +
                "                css.customerID,	css.scanlabel,	css.costCategoryID,  \n" +
                "                CONCAT(coc.categoryName, ' (', coc.`from`, ' - ', coc.`to`, ' )') costCategoryName,  \n" +
                "                css.lotCode,			css.dateCode,  \n" +
                "                css.nickName,	c.isCustom,    /*css.selfLifeDays,			css.shelfLifeAcceptanceDays,	css.maxShelfLifeAcceptanceDays,*/  \n" +
                "                c.selfLifeDays, 				c.maxShelfLifeAcceptanceDays, 			c.shelfLifeAcceptanceDays,  \n" +
                "				css.binID,				b.name AS currentBinName, 	css.orgRecBin, 		from_bin.Name AS fromBinName,  \n" +
                "                #org_bin.Name AS orgBinName,  \n" +
                "                w.Name AS currentWHName,							pw.Name AS currentParentWHName,  \n" +
                "                css.orgRecWarehouse,	css.orgRecDepartment,		css.fromBin,		css.fromWarehouse,		css.fromDepartment,  \n" +
                "				w.warehouseType,  		css.refcompid, 		c.mfgcodeID, 			c.mfgPN,					c.unit AS componentUnit,  \n" +
                "                c.PIDCode, 				c.mfgPNDescription,			c.imageURL, 		m.mfgName,				c.mfgType,  		c.custAssyPN,  \n" +
                " 				m.mfgCode, 				c.mountingTypeID,			cp.sourceName, 		cp.name packagingName,  \n" +
                "                c.partPackage, 			pc.Name AS externalPartPackage,  \n" +
                "                css.rohsStatusID AS uidRohsStatusID, 				umid_rohs.Name umidRohsName,				umid_rohs.rohsIcon umidRohsIcon,  \n" +
                "                c.rohsStatusID,			rohs.Name rohsName, 		rohs.rohsIcon, 								mt.hasLimitedShelfLife,  \n" +
                "				vu.packingSlipID,		vu.packingSlipSerialNumber, vu.packingSlipNumber,   					vu.packingSlipDetID,  \n" +
                "                vu.UMIDCreatedQty, 		vu.returnQty,  				vu.InQty, 			vu.BalanceQty,			vu.receivedStatus,  \n" +
                "                vu.packingSlipModeStatus,							fun_GetFormattedMfgCode(m.mfgCode,  m.mfgName, vMfgCodeFormat) as mfgCodeName,  \n" +
                "                (CASE WHEN (css.stockInventoryType = 'NI') THEN  \n" +
                "					CONCAT(mcm.mfgCode, vu.packingSlipNumber)  \n" +
                "				ELSE NULL END) As cofcCode,  \n" +
                "               CONCAT(cmsl.levelRating, '-', cmsl.`code`) AS mslLevel,  \n" +
                "               IFNULL(wo.woAvailableQty,0) AS woAvailableQty  \n" +
                "		FROM component_sid_stock css  \n" +
                "			JOIN component c ON css.refcompid = c.id AND c.isDeleted = 0  \n" +
                "			JOIN mfgcodemst m on c.mfgcodeID = m.id  AND m.isDeleted = 0  \n" +
                "			JOIN rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  AND c.isDeleted = 0  \n" +
                "			JOIN rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  AND umid_rohs.isDeleted = 0  \n" +
                "            LEFT JOIN component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "			JOIN component_packagingmst cp on css.packaging = cp.id  AND cp.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_packagecasetypemst pc ON c.partPackageID = pc.id AND pc.isDeleted = 0  \n" +
                "            JOIN cost_category coc ON css.costCategoryID = coc.id AND coc.isDeleted = 0  \n" +
                "            JOIN uoms u ON css.uom = u.id AND u.isDeleted = 0  \n" +
                "            JOIN rfq_mountingtypemst mt ON c.mountingTypeID = mt.id AND mt.isDeleted = 0  \n" +
                "			JOIN binmst b on css.binID = b.id AND b.isDeleted = 0  \n" +
                "            JOIN binmst from_bin on css.fromBin = from_bin.id AND from_bin.isdeleted = 0  \n" +
                "			JOIN warehousemst w ON b.WarehouseID = w.id AND w.isDeleted = 0  \n" +
                "			JOIN warehousemst pw ON w.parentWHID = pw.id AND pw.isDeleted = 0  \n" +
                "            LEFT JOIN component_sid_stock_packing_detail csp ON css.id = csp.refComponentSidStockID AND csp.isDeleted = 0  \n" +
                "            LEFT JOIN vu_umid_creation_pending vu ON csp.refPackingSlipDetailID = vu.packingSlipDetID  \n" +
                "            LEFT JOIN mfgcodemst mcm ON mcm.id = vu.mfgCodeID AND mcm.isDeleted = 0  \n" +
                "            LEFT JOIN (	SELECT     atk.woID,  \n" +
                "							((SUM(atk.openingStock) - (SELECT  \n" +
                "									IFNULL(SUM(ss.shippedqty), 0)  \n" +
                "								FROM  \n" +
                "									shippedassembly ss  \n" +
                "								WHERE  \n" +
                "									((ss.isDeleted = 0)  \n" +
                "										AND (ss.woNumber = atk.woNumber)  \n" +
                "										AND (ss.partID = atk.partID)))) - IFNULL(css.pkgQty, 0)) AS woAvailableQty  \n" +
                "						FROM assemblystock atk  \n" +
                "						LEFT JOIN (SELECT  \n" +
                "										cs.woID, SUM(cs.pkgQty) AS pkgQty  \n" +
                "									FROM  \n" +
                "									component_sid_stock cs  \n" +
                "									WHERE cs.isDeleted = 0 AND cs.woID IS NOT NULL GROUP BY cs.woID) css ON css.woID = atk.woID  \n" +
                "						WHERE atk.isDeleted = 0  \n" +
                "						GROUP BY atk.woNumber,atk.partID,atk.whID,atk.binID,atk.woID,atk.woNumber,css.pkgQty  \n" +
                "					) wo ON wo.woID = css.woID  \n" +
                "		WHERE css.id =  (CASE WHEN pUIDId IS NOT NULL THEN pUIDId  \n" +
                "				ELSE (SELECT cs.id FROM component_sid_stock cs WHERE cs.uid = pUID AND cs.isDeleted = 0) END);  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (5974,'2.00','V1','User Story 41585: Demo improvement points related to Identical UMID screen (22-02-22) - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
          case 5974:
            allDbChangesArray.push(
            /* **************************** New Script -> 28-02-2022 *********************************** */
              "Drop view if exists vu_purchaseorder_shipping_release;  \n" +
              "CREATE VIEW `vu_purchaseorder_shipping_release` AS  \n" +
              "    SELECT  \n" +
              "        `pold`.`refPurchaseOrderDetID` AS `refPurchaseOrderDetID`,  \n" +
              "        `pod`.`refPurchaseOrderID` AS `refPurchaseOrderID`,  \n" +
              "        SUM(`pold`.`qty`) AS `totalQty`,  \n" +
              "        SUM(IFNULL(`pold`.`receivedQty`, 0)) AS `totalReceivedQty`,  \n" +
              "        (CASE  \n" +
              "            WHEN ((SUM(`pold`.`qty`) - SUM(IFNULL(`pold`.`receivedQty`, 0))) > 0) THEN (SUM(`pold`.`qty`) - SUM(IFNULL(`pold`.`receivedQty`, 0)))  \n" +
              "            ELSE 0  \n" +
              "        END) AS `totalPendingQty`,  \n" +
              "        MAX((CASE  \n" +
              "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 'P'  \n" +
              "            ELSE 'C'  \n" +
              "        END)) AS `poLineWorkingStatus`,  \n" +
              "        MAX((CASE  \n" +
              "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 'Open'  \n" +
              "            ELSE 'Closed'  \n" +
              "        END)) AS `poLineWorkingDisplayStatus`,  \n" +
              "        MAX((CASE  \n" +
              "            WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'Manually Completed'  \n" +
              "            WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'Auto Completed'  \n" +
              "            ELSE 'Open'  \n" +
              "        END)) AS `poLineCompleteTypeDisplayValue`,  \n" +
              "        MAX((CASE  \n" +
              "            WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'M'  \n" +
              "            WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'A'  \n" +
              "            ELSE 'P'  \n" +
              "        END)) AS `poLineCompleteType`,  \n" +
              "        SUM((CASE  \n" +
              "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 1  \n" +
              "            ELSE 0  \n" +
              "        END)) AS `pendingLineCount`,  \n" +
              "        SUM((CASE  \n" +
              "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'C') THEN 1  \n" +
              "            ELSE 0  \n" +
              "        END)) AS `receivedLineCount`,  \n" +
              "        (CASE  \n" +
              "            WHEN  \n" +
              "                (MAX((CASE  \n" +
              "                    WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'Manually Completed'  \n" +
              "                    WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'Auto Completed'  \n" +
              "                    ELSE 'Open'  \n" +
              "                END)) = 'Manually Completed')  \n" +
              "            THEN  \n" +
              "                GROUP_CONCAT(CONCAT('Release#:',  \n" +
              "                            ' ',  \n" +
              "                            `pold`.`releaseNumber`,  \n" +
              "                            '		',  \n" +
              "                            'PO Release Completion Type:',  \n" +
              "                            ' ',  \n" +
              "                            CONVERT( (CASE  \n" +
              "                                WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'Manually Completed'  \n" +
              "                                WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'Auto Completed'  \n" +
              "                                ELSE 'Open'  \n" +
              "                            END) USING UTF8MB4),  \n" +
              "                            '<br />',  \n" +
              "                            '				PO Release Completion Reason:',  \n" +
              "                            IFNULL(`pold`.`poLineCompleteReason`, ''))  \n" +
              "                    SEPARATOR '<br />')  \n" +
              "            ELSE ''  \n" +
              "        END) AS `poLineCompleteReason`  \n" +
              "    FROM  \n" +
              "        (`purchase_order_line_release_det` `pold`  \n" +
              "        JOIN `purchase_order_det` `pod` ON ((`pod`.`id` = `pold`.`refPurchaseOrderDetID`)))  \n" +
              "    WHERE  \n" +
              "        (`pold`.`isDeleted` = 0)  \n" +
              "    GROUP BY `pold`.`refPurchaseOrderDetID` , `pod`.`refPurchaseOrderID`;  \n" +
            /* **************************** Add Script Version -> 28-02-2022 *********************************** */
            "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
            "VALUES (5975,'2.00','V1',' vu_purchaseorder_shipping_release - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
      case 5975:
        allDbChangesArray.push(
          /* **************************** New Script -> 28/02/2022  *********************************** */
          "DROP VIEW IF EXISTS `vu_purchaseorder_shipping_release` ;  \n" +
          "CREATE VIEW `vu_purchaseorder_shipping_release` AS  \n" +
          "    SELECT  \n" +
          "        `pold`.`refPurchaseOrderDetID` AS `refPurchaseOrderDetID`,  \n" +
          "        `pod`.`refPurchaseOrderID` AS `refPurchaseOrderID`,  \n" +
          "        SUM(`pold`.`qty`) AS `totalQty`,  \n" +
          "        SUM(IFNULL(`pold`.`receivedQty`, 0)) AS `totalReceivedQty`,  \n" +
          "        (CASE  \n" +
          "            WHEN ((SUM(`pold`.`qty`) - SUM(IFNULL(`pold`.`receivedQty`, 0))) > 0) THEN (SUM(`pold`.`qty`) - SUM(IFNULL(`pold`.`receivedQty`, 0)))  \n" +
          "            ELSE 0  \n" +
          "        END) AS `totalPendingQty`,  \n" +
          "        MAX((CASE  \n" +
          "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 'P'  \n" +
          "            ELSE 'C'  \n" +
          "        END)) AS `poLineWorkingStatus`,  \n" +
          "        MAX((CASE  \n" +
          "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 'Open'  \n" +
          "            ELSE 'Closed'  \n" +
          "        END)) AS `poLineWorkingDisplayStatus`,  \n" +
          "        MAX((CASE  \n" +
          "            WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'Manually Completed'  \n" +
          "            WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'Auto Completed'  \n" +
          "            ELSE 'Open'  \n" +
          "        END)) AS `poLineCompleteTypeDisplayValue`,  \n" +
          "        MAX((CASE  \n" +
          "            WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'M'  \n" +
          "            WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'A'  \n" +
          "            ELSE 'P'  \n" +
          "        END)) AS `poLineCompleteType`,  \n" +
          "        SUM((CASE  \n" +
          "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 1  \n" +
          "            ELSE 0  \n" +
          "        END)) AS `pendingLineCount`,  \n" +
          "        SUM((CASE  \n" +
          "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'C') THEN 1  \n" +
          "            ELSE 0  \n" +
          "        END)) AS `receivedLineCount`,  \n" +
          "        (CASE  \n" +
          "            WHEN  \n" +
          "                (MAX((CASE  \n" +
          "                    WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'Manually Completed'  \n" +
          "                    WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'Auto Completed'  \n" +
          "                    ELSE 'Open'  \n" +
          "                END)) = 'Manually Completed')  \n" +
          "            THEN  \n" +
          "                GROUP_CONCAT(CONCAT('Release#:',  \n" +
          "                            ' ',  \n" +
          "                            `pold`.`releaseNumber`,  \n" +
          "                            '		',  \n" +
          "                            'PO Release Completion Type:',  \n" +
          "                            ' ',  \n" +
          "                            CONVERT( (CASE  \n" +
          "                                WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'Manually Completed'  \n" +
          "                                WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'Auto Completed'  \n" +
          "                                ELSE 'Open'  \n" +
          "                            END) USING UTF8MB4),  \n" +
          "                            '<br />',  \n" +
          "                            '				PO Release Completion Reason: ',  \n" +
          "                            IFNULL(`pold`.`poLineCompleteReason`, ''))  \n" +
          "                    SEPARATOR '<br />')  \n" +
          "            ELSE ''  \n" +
          "        END) AS `poLineCompleteReason`  \n" +
          "    FROM  \n" +
          "        (`purchase_order_line_release_det` `pold`  \n" +
          "        JOIN `purchase_order_det` `pod` ON ((`pod`.`id` = `pold`.`refPurchaseOrderDetID`)))  \n" +
          "    WHERE  \n" +
          "        (`pold`.`isDeleted` = 0)  \n" +
          "    GROUP BY `pold`.`refPurchaseOrderDetID` , `pod`.`refPurchaseOrderID`;  \n" +
          /* **************************** Add Script Version -> 28/02/2022 *********************************** */
          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
          "VALUES (5976,'2.00','V1',' Bug 41714: PO Line Completion Reason pop-up UI is showing broken in details tab of the purchase order listing page - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
        );
        break;
    case 5976:
        allDbChangesArray.push(
        /* **************************** New Script -> 01-03-2022*********************************** */
            "DROP PROCEDURE IF EXISTS Sproc_GetSalesOrderHoldUnhold;  \n" +
            "CREATE PROCEDURE `Sproc_GetSalesOrderHoldUnhold`(  \n" +
            "	IN psalesorderID INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	        DECLARE v_TimeZone VARCHAR(50);  \n" +
            "  \n" +
            "	        SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "	        SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "  \n" +
            "	   SELECT id,`status`,  \n" +
            "	   fun_ApplyCommonDateTimeFormatByParaValue(endDate,v_TimeZone, v_DateTimeDisplayFormat)endDate,  \n" +
            "	   reason,  \n" +
            "	   refTransid,  \n" +
            "	   resumeReason,  \n" +
            "	   holdEmployeeId,  \n" +
            "	   CASE WHEN `status`='H' THEN CONCAT(reason, ' - Halt by ',fun_getUserNameByEmployeID(holdEmployeeId),' on ', fun_ApplyCommonDateTimeFormatByParaValue(startDate,v_TimeZone, v_DateTimeDisplayFormat)) ELSE '' END reasonPO,  \n" +
            "	   unHoldEmployeeId,  \n" +
            "	   fun_getEmployeeNameByEmpID(unHoldEmployeeId) unHoldEmpName  \n" +
            "	   FROM holdunholdtrans  \n" +
            "	   WHERE refType='PO' AND refTransid IN (SELECT sd.id FROM salesorderdet sd WHERE sd.refsalesorderid=psalesorderID)  \n" +
            "       order by refTransid,unHoldEmployeeId ;  \n" +
            "  \n" +
            "END;  \n" +
        /* **************************** Add Script Version -> 01-03-2022 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5977,'2.00','V1','User Story 39749: SO Improvement Points: Action Menu in Headers and Details with Save/Update & Next/Previous/New Provision - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
    case 5977:
        allDbChangesArray.push(
        /* **************************** New Script -> 01-03-2022*********************************** */
            "DROP PROCEDURE IF EXISTS Sproc_GetSalesOrderHoldUnhold;  \n" +
            "CREATE PROCEDURE `Sproc_GetSalesOrderHoldUnhold`(  \n" +
            "	IN psalesorderID INT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	        DECLARE v_TimeZone VARCHAR(50);  \n" +
            "  \n" +
            "	        SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "	        SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "  \n" +
            "	   SELECT id,`status`,  \n" +
            "	   fun_ApplyCommonDateTimeFormatByParaValue(endDate,v_TimeZone, v_DateTimeDisplayFormat)endDate,  \n" +
            "	   reason,  \n" +
            "	   refTransid,  \n" +
            "	   resumeReason,  \n" +
            "	   holdEmployeeId,  \n" +
            "	   CASE WHEN `status`='H' THEN CONCAT(reason, ' - Halt by ',fun_getUserNameByEmployeID(holdEmployeeId),' on ', fun_ApplyCommonDateTimeFormatByParaValue(startDate,v_TimeZone, v_DateTimeDisplayFormat)) ELSE '' END reasonPO,  \n" +
            "	   unHoldEmployeeId,  \n" +
            "	   fun_getEmployeeNameByEmpID(unHoldEmployeeId) unHoldEmpName  \n" +
            "	   FROM holdunholdtrans  \n" +
            "	   WHERE refType='PO' AND refTransid IN (SELECT sd.id FROM salesorderdet sd WHERE sd.refsalesorderid=psalesorderID) ; \n" +
            "  \n" +
            "END;  \n" +
        /* **************************** Add Script Version -> 01-03-2022 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5978,'2.00','V1','User Story 39749: SO Improvement Points: Action Menu in Headers and Details with Save/Update & Next/Previous/New Provision - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
    case 5978:
        allDbChangesArray.push(
        /* **************************** New Script -> 01-03-2022 *********************************** */
        "DROP TRIGGER IF EXISTS `TRG_AU_purchase_order_line_release_det`;  \n" +
        "CREATE TRIGGER `TRG_AU_purchase_order_line_release_det` AFTER UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN  \n" +
        "	IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'QTY',CAST(OLD.qty AS CHAR),  \n" +
        "		CAST(NEW.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.shippingDate,0) != IFNULL(NEW.shippingDate,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'DUEDATE',CAST(OLD.shippingDate AS CHAR),  \n" +
        "		CAST(NEW.shippingDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','shippingDate'));  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.promisedShipDate,0) != IFNULL(NEW.promisedShipDate,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'PROMISESHIPDATE',CAST(OLD.promisedShipDate AS CHAR),  \n" +
        "		CAST(NEW.promisedShipDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','promisedShipDate'));  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.releaseNumber,0) != IFNULL(NEW.releaseNumber,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'RELEASE#',CAST(OLD.releaseNumber AS CHAR),  \n" +
        "		CAST(NEW.releaseNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','releaseNumber'));  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'SHIPPINGMETHOD',CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodID) AS CHAR),  \n" +
        "		CAST(fun_getGenericCategoryCodeNameByID(NEW.shippingMethodID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.shippingAddressID,0) != IFNULL(NEW.shippingAddressID,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'SHIPPINGADDRESS',CAST(OLD.shippingAddress AS CHAR),  \n" +
        "		CAST(NEW.shippingAddress AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.releaseNotes,0) != IFNULL(NEW.releaseNotes,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'RELEASENOTES',CAST(OLD.releaseNotes AS CHAR),  \n" +
        "		CAST(NEW.releaseNotes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','releaseNotes'));  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.additionalNotes,0) != IFNULL(NEW.additionalNotes,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'ADDITIONALNOTES',CAST(OLD.additionalNotes AS CHAR),  \n" +
        "		CAST(NEW.additionalNotes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','additionalNotes'));  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.poLineWorkingStatus,0) != IFNULL(NEW.poLineWorkingStatus,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'POLINEWORKINGSTATUS',CAST((CASE WHEN OLD.poLineWorkingStatus='C' THEN 'Close' ELSE 'Open' END) AS CHAR),  \n" +
        "		CAST((CASE WHEN NEW.poLineWorkingStatus='C' THEN 'Close' ELSE 'Open' END) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'RECEIVEDQTY',CAST(OLD.receivedQty AS CHAR),  \n" +
        "		CAST(NEW.receivedQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.poLineCompleteReason,0) != IFNULL(NEW.poLineCompleteReason,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'POLINECOMPLETEREASON',CAST(OLD.poLineCompleteReason AS CHAR),  \n" +
        "		CAST(NEW.poLineCompleteReason AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.poLineCompleteType,0) != IFNULL(NEW.poLineCompleteType,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'POLINECOMPLETETYPE',CAST((CASE WHEN OLD.poLineCompleteType = 'M' THEN 'Manually Completed' WHEN OLD.poLineCompleteType = 'A' THEN 'Auto Completed' ELSE 'Open' END) AS CHAR),  \n" +
        "		CAST((CASE WHEN NEW.poLineCompleteType = 'M' THEN 'Manually Completed' WHEN NEW.poLineCompleteType = 'A' THEN 'Auto Completed' ELSE 'Open' END) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'CARRIERACCOUNT#',CAST(OLD.carrierAccountNumber AS CHAR),  \n" +
        "		CAST(NEW.carrierAccountNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'CARRIER',CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR),  \n" +
        "		CAST(fun_getGenericCategoryCodeNameByID(NEW.carrierID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.shippingContactPersonID,0) != IFNULL(NEW.shippingContactPersonID,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'CONTACTPERSON',CAST(OLD.shippingContactPerson AS CHAR),  \n" +
        "		CAST(NEW.shippingContactPerson AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "END;  \n" +
        /* **************************** New Script -> 01-03-2022 *********************************** */
        "DROP function IF EXISTS `fun_getPurchaseOrderFieldLabel`;  \n" +
        "CREATE FUNCTION `fun_getPurchaseOrderFieldLabel`(  \n" +
        "fieldName TEXT  \n" +
        ") RETURNS text CHARSET utf8mb4  \n" +
        "BEGIN  \n" +
        "	SELECT (CASE  \n" +
        "		WHEN fieldName = 'QTY' THEN 'Qty'  \n" +
        "        WHEN fieldName = 'PRICE' THEN 'Price ($)'  \n" +
        "        WHEN fieldName = 'INTERNALNOTES' THEN 'Internal Notes'  \n" +
        "        WHEN fieldName = 'COMMENTS' THEN 'Comments'  \n" +
        "        WHEN fieldName = 'DUEDATE' THEN 'Due Date'  \n" +
        "        WHEN fieldName = 'PROMISESHIPDATE' THEN 'Supplier Promised Delivery Date'  \n" +
        "        WHEN fieldName = 'RELEASE#' THEN 'Release#'  \n" +
        "        WHEN fieldName = 'SHIPPINGMETHOD' THEN 'Shipping Method'  \n" +
        "        WHEN fieldName = 'SHIPPINGADDRESS' THEN 'Shipping Address'  \n" +
        "        WHEN fieldName = 'RELEASENOTES' THEN 'Release Notes'  \n" +
        "        WHEN fieldName = 'ADDITIONALNOTES' THEN 'Additional Notes'  \n" +
        "        WHEN fieldName = 'POLINEWORKINGSTATUS' THEN 'PO Release Working Status'  \n" +
        "        WHEN fieldName = 'RECEIVEDQTY' THEN 'Received Qty'  \n" +
        "        WHEN fieldName = 'POLINECOMPLETEREASON' THEN 'PO Release Complete Reason'  \n" +
        "        WHEN fieldName = 'POLINECOMPLETETYPE' THEN 'PO Release Complete Type'  \n" +
        "        WHEN fieldName = 'CARRIERACCOUNT#' THEN 'Carrier Account#'  \n" +
        "        WHEN fieldName = 'CARRIER' THEN 'Carrier'  \n" +
        "        WHEN fieldName = 'CONTACTPERSON' THEN 'Contact Person'  \n" +
        "        WHEN fieldName = 'MFGPART' THEN 'MPN'  \n" +
        "        WHEN fieldName = 'SUPPLIERPART' THEN 'SPN'  \n" +
        "        WHEN fieldName = 'PARTDESCRIPTION' THEN 'Description'  \n" +
        "        WHEN fieldName = 'PCBPERARRAY' THEN 'PCB Per Array'  \n" +
        "        WHEN fieldName = 'INTERNALREF' THEN 'Internal Ref#'  \n" +
        "        WHEN fieldName = 'TOTALRELEASE' THEN 'Total Release'  \n" +
        "        WHEN fieldName = 'POQTY' THEN 'PO Qty'  \n" +
        "        WHEN fieldName = 'LINECOMMENT' THEN 'Line Comment'  \n" +
        "        WHEN fieldName = 'SUPPLIERQUOTE#' THEN 'Supplier Quote#'  \n" +
        "        WHEN fieldName = 'PACKAGING' THEN 'Packaging'  \n" +
        "        WHEN fieldName = 'ROHSSTATUS' THEN 'RoHS Requirement'  \n" +
        "        WHEN fieldName = 'INTERNALLINECOMMENT' THEN 'Line Internal Notes'  \n" +
        "        WHEN fieldName = 'LINECUSTCONSIGNED' THEN 'PO Line Customer Consigned (No Charge)'  \n" +
        "        WHEN fieldName = 'LINECUSTOMER' THEN 'PO Line Customer'  \n" +
        "        WHEN fieldName = 'LINENONUMIDSTOCK' THEN 'PO Line Do Not Create UMID Stock'  \n" +
        "        WHEN fieldName = 'PONUMBER' THEN 'PO#'  \n" +
        "        WHEN fieldName = 'SONUMBER' THEN 'SO#'  \n" +
        "        WHEN fieldName = 'PODATE' THEN 'PO Date'  \n" +
        "        WHEN fieldName = 'SODATE' THEN 'SO Date'  \n" +
        "        WHEN fieldName = 'SUPPLIER' THEN 'Supplier'  \n" +
        "        WHEN fieldName = 'TERMS' THEN 'Terms'  \n" +
        "        WHEN fieldName = 'POREVISION' THEN 'PO Revision'  \n" +
        "        WHEN fieldName = 'POCOMMENT' THEN 'PO Comment'  \n" +
        "        WHEN fieldName = 'POSTATUS' THEN 'PO Status'  \n" +
        "        WHEN fieldName = 'BLANKETPO' THEN 'Blanket PO'  \n" +
        "        WHEN fieldName = 'SHIPPINGINSURANCE' THEN 'Shipping with Insurance'  \n" +
        "        WHEN fieldName = 'SUPPLIERADDRESS' THEN 'Supplier Address'  \n" +
        "        WHEN fieldName = 'SHIPPINGADDRESS' THEN 'Bill To / Ship To'  \n" +
        "        WHEN fieldName = 'INTERMEDIATEADDRESS' THEN 'Mark For (Intermediate Ship to)'  \n" +
        "        WHEN fieldName = 'FOB' THEN 'FOB'  \n" +
        "        WHEN fieldName = 'POWORKINGSTATUS' THEN 'PO Working Status'  \n" +
        "        WHEN fieldName = 'CANCELREASON' THEN 'PO Cancellation / Undo Reason'  \n" +
        "        WHEN fieldName = 'CANCELLATIONCONFIRMED' THEN 'Cancellation Confirmed by Supplier'  \n" +
        "        WHEN fieldName = 'POCUSTCONSIGNED' THEN 'PO Customer Consigned (No Charge)'  \n" +
        "        WHEN fieldName = 'POCUSTOMER' THEN 'PO Customer'  \n" +
        "        WHEN fieldName = 'NONSTOCKUMID' THEN 'PO Do Not Create UMID Stock'  \n" +
        "        WHEN fieldName = 'LOCKSTATUS' THEN 'Lock Status'  \n" +
        "        WHEN fieldName = 'LOCKEDBY' THEN 'Locked By'  \n" +
        "        WHEN fieldName = 'LOCKEDAT' THEN 'Locked Date'  \n" +
        "        WHEN fieldName = 'LOCKEDBYROLE' THEN 'Locked By Role'  \n" +
        "        WHEN fieldName = 'POCOMPLETEREASON' THEN 'PO Complete Reason'  \n" +
        "        WHEN fieldName = 'SUPPLIERCONTACTPERSON' THEN 'Supplier Address Contact Person'  \n" +
        "        WHEN fieldName = 'SHIPPINGCONTACTPERSON' THEN 'Bill To / Ship To Contact Person'  \n" +
        "        WHEN fieldName = 'INTERMEDIATECONTACTPERSON' THEN 'Mark For (Intermediate Ship to) Contact Person'  \n" +
        "        WHEN fieldName = 'DELETED' THEN 'Deleted'  \n" +
        "	END) INTO fieldName;  \n" +
        "	RETURN fieldName;  \n" +
        "END;  \n" +
        /* **************************** New Script -> 01-03-2022 *********************************** */
        "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_mst`;  \n" +
        "CREATE TRIGGER `Trg_AU_purchase_order_mst` AFTER UPDATE ON `purchase_order_mst` FOR EACH ROW BEGIN  \n" +
        "	DECLARE vMfgCodeFormat INT;  \n" +
        "    DECLARE vOldCustomer VARCHAR(100);  \n" +
        "    DECLARE vNewCustomer VARCHAR(100);  \n" +
        "    DECLARE vOldSupplier VARCHAR(100);  \n" +
        "    DECLARE vNewSupplier VARCHAR(100);  \n" +
        "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
        "  \n" +
        "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PONUMBER',CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poNumber'));  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SONUMBER',CAST(OLD.soNumber AS CHAR), CAST(new.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','soNumber'));  \n" +
        "    END IF;  \n" +
        "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PODATE',CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poDate'));  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SODATE',CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','soDate'));  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.supplierID,0) != IFNULL(NEW.supplierID,0) THEN  \n" +
        "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldSupplier FROM mfgcodemst WHERE id=OLD.supplierID;  \n" +
        "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewSupplier FROM mfgcodemst WHERE id=NEW.supplierID;  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SUPPLIER', CAST(vOldSupplier AS CHAR), CAST(vNewSupplier AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'TERMS', CAST(fun_getGenericCategoryCodeNameByID(OLD.termsID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.termsID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SHIPPINGMETHOD', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POREVISION', CAST(OLD.poRevision AS CHAR), CAST(new.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poRevision'));  \n" +
        "    END IF;  \n" +
        "	IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'INTERNALNOTES', CAST(OLD.shippingComment AS CHAR), CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','shippingComment'));  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.poComment ,0) != IFNULL(NEW.poComment ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POCOMMENT', CAST(OLD.poComment AS CHAR), CAST(new.poComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poComment'));  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POSTATUS', CAST(CASE WHEN OLD.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), CAST(CASE WHEN NEW.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.carrierID ,0) != IFNULL(NEW.carrierID ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'CARRIER', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "    END IF;  \n" +
        "	IF IFNULL(OLD.carrierAccountNumber ,0) != IFNULL(NEW.carrierAccountNumber ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'CARRIERACCOUNT#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','carrierAccountNumber'));  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'DELETED', CAST(CASE WHEN OLD.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'BLANKETPO', CAST(CASE WHEN OLD.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "    END IF;  \n" +
        "    IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SHIPPINGINSURANCE', CAST(CASE WHEN OLD.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "    END IF;  \n" +
        "    IF IFNULL(OLD.supplierAddressID ,0) != IFNULL(NEW.supplierAddressID ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SUPPLIERADDRESS', CAST(OLD.supplierAddress AS CHAR), CAST(NEW.supplierAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.shippingAddressID ,0) != IFNULL(NEW.shippingAddressID ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SHIPPINGADDRESS', CAST(OLD.shippingAddress AS CHAR), CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.intermediateShipmentID ,0) != IFNULL(NEW.intermediateShipmentID ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'INTERMEDIATEADDRESS', CAST(OLD.intermediateAddress AS CHAR), CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "    END IF;  \n" +
        "    IF IFNULL(OLD.freeOnBoardID ,0) != IFNULL(NEW.freeOnBoardID ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'FOB', CAST(fun_getFOBById(OLD.freeOnBoardID) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar');  \n" +
        "    END IF;  \n" +
        "    IF IFNULL(OLD.poWorkingStatus ,0) != IFNULL(NEW.poWorkingStatus ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POWORKINGSTATUS', CAST(CASE WHEN IFNULL(OLD.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN OLD.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END  AS CHAR), CAST(CASE WHEN IFNULL(NEW.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN NEW.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poWorkingStatus'));  \n" +
        "    END IF;  \n" +
        "	IF IFNULL(OLD.cancleReason ,0) != IFNULL(NEW.cancleReason ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'CANCELREASON', CAST(OLD.cancleReason AS CHAR), CAST(NEW.cancleReason AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','cancleReason'));  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.CancellationConfirmed ,0) != IFNULL(NEW.CancellationConfirmed ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'CANCELLATIONCONFIRMED',  CAST(CASE WHEN OLD.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POCUSTCONSIGNED',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.customerID, 0) != IFNULL(NEW.customerID,0) THEN  \n" +
        "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.customerID;  \n" +
        "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.customerID;  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POCUSTOMER',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'NONSTOCKUMID',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.lockStatus, 0) != IFNULL(NEW.lockStatus,0) THEN  \n" +
        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'LOCKSTATUS',  CAST(CASE WHEN OLD.lockStatus='RL' THEN 'Ready To Lock' WHEN OLD.lockStatus='LC' THEN 'Locked' ELSE 'Not Applicable' END AS CHAR), CAST(CASE WHEN NEW.lockStatus='RL' THEN 'Ready To Lock' WHEN NEW.lockStatus='LC' THEN 'Locked' ELSE 'Not Applicable' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','lockStatus'));  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.lockedBy, 0) != IFNULL(NEW.lockedBy,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'LOCKEDBY',  CAST(fun_getUserNameByID(OLD.lockedBy) AS CHAR), CAST(fun_getUserNameByID(NEW.lockedBy) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','lockedBy'));  \n" +
        "    END IF;  \n" +
        "    IF IFNULL(OLD.lockedAt, 0) != IFNULL(NEW.lockedAt,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'LOCKEDAT',  CAST(OLD.lockedAt AS CHAR), CAST(NEW.lockedAt AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','lockedAt'));  \n" +
        "    END IF;  \n" +
        "    IF IFNULL(OLD.lockedByRoleId, 0) != IFNULL(NEW.lockedByRoleId,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'LOCKEDBYROLE',  CAST(fun_getRoleByID(OLD.lockedByRoleId) AS CHAR), CAST(fun_getRoleByID(NEW.lockedByRoleId) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "    END IF;  \n" +
        "    IF IFNULL(OLD.poCompleteReason, 0) != IFNULL(NEW.poCompleteReason, 0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POCOMPLETEREASON', CAST(OLD.poCompleteReason AS CHAR), CAST(NEW.poCompleteReason AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poCompleteReason'));  \n" +
        "	END IF;  \n" +
        "      IF IFNULL(OLD.supplierContactPersonID ,0) != IFNULL(NEW.supplierContactPersonID ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SUPPLIERCONTACTPERSON', CAST(OLD.supplierContactPerson AS CHAR), CAST(NEW.supplierContactPerson AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.shippingContactPersonID ,0) != IFNULL(NEW.shippingContactPersonID ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SHIPPINGCONTACTPERSON', CAST(OLD.shippingContactPerson AS CHAR), CAST(NEW.shippingContactPerson AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.intermediateContactPersonID ,0) != IFNULL(NEW.intermediateContactPersonID ,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'INTERMEDIATECONTACTPERSON', CAST(OLD.intermediateContactPerson AS CHAR), CAST(NEW.intermediateContactPerson AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "    END IF;  \n" +
        "END;  \n" +
        /* **************************** New Script -> 01-03-2022 *********************************** */
        "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_det`;  \n" +
        "CREATE TRIGGER `Trg_AU_purchase_order_det` AFTER UPDATE ON `purchase_order_det` FOR EACH ROW BEGIN  \n" +
        "	DECLARE vMfgCodeFormat INT;  \n" +
        "    DECLARE vOldCustomer VARCHAR(100);  \n" +
        "    DECLARE vNewCustomer VARCHAR(100);  \n" +
        "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
        "    IF IFNULL(OLD.mfgPartID,0) != IFNULL(NEW.mfgPartID,0) THEN  \n" +
        "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'MFGPART',CAST(fun_getComponentNameByID(OLD.mfgPartID) AS CHAR),  \n" +
        "       CAST(fun_getComponentNameByID(new.mfgPartID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.supplierPartID,0) != IFNULL(NEW.supplierPartID,0) THEN  \n" +
        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'SUPPLIERPART',CAST(fun_getComponentNameByID(OLD.supplierPartID) AS CHAR),  \n" +
        "       CAST(fun_getComponentNameByID(new.supplierPartID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar');  \n" +
        "	END IF;  \n" +
        "        IF IFNULL(OLD.partDescription,0) != IFNULL(NEW.partDescription,0) THEN  \n" +
        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PARTDESCRIPTION',CAST(OLD.partDescription AS CHAR),  \n" +
        "       CAST(new.partDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','partDescription'));  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.pcbPerArray,0) != IFNULL(NEW.pcbPerArray,0) THEN  \n" +
        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PCBPERARRAY',CAST(OLD.pcbPerArray AS CHAR),  \n" +
        "       CAST(new.pcbPerArray AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','pcbPerArray'));  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'INTERNALREF',CAST(OLD.internalRef AS CHAR),  \n" +
        "       CAST(new.internalRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','internalRef'));  \n" +
        "	END IF;  \n" +
        "     IF IFNULL(OLD.totalRelease,0) != IFNULL(NEW.totalRelease,0) THEN  \n" +
        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'TOTALRELEASE',CAST(OLD.totalRelease AS CHAR),  \n" +
        "       CAST(new.totalRelease AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','totalRelease'));  \n" +
        "	END IF;  \n" +
        "     IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
        "                  UPDATE packing_slip_material_receive_det SET orderedQty=NEW.qty WHERE refPurchaseOrderDetID=NEW.id AND isdeleted=0;  \n" +
        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'POQTY',CAST(OLD.qty AS CHAR),  \n" +
        "       CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN  \n" +
        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PRICE',CAST(OLD.price AS CHAR),  \n" +
        "       CAST(NEW.price AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'unitprice');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.lineComment,0) != IFNULL(NEW.lineComment,0) THEN  \n" +
        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'LINECOMMENT',CAST(OLD.lineComment AS CHAR),  \n" +
        "       CAST(NEW.lineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','lineComment'));  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.supplierQuoteNumber,0) != IFNULL(NEW.supplierQuoteNumber,0) THEN  \n" +
        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'SUPPLIERQUOTE#',CAST(OLD.supplierQuoteNumber AS CHAR),  \n" +
        "       CAST(NEW.supplierQuoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','supplierQuoteNumber'));  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PACKAGING',CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR),  \n" +
        "		CAST(fun_getPackagingNameByID(NEW.packagingID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.rohsStatusID,0) != IFNULL(NEW.rohsStatusID,0) THEN  \n" +
        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'ROHSSTATUS',CAST(fun_getRoHSNameByID(OLD.rohsStatusID) AS CHAR),  \n" +
        "		CAST(fun_getRoHSNameByID(NEW.rohsStatusID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.internalLineComment,0) != IFNULL(NEW.internalLineComment,0) THEN  \n" +
        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'INTERNALLINECOMMENT',CAST(OLD.internalLineComment AS CHAR),  \n" +
        "		CAST(NEW.internalLineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','internalLineComment'));  \n" +
        "	END IF;  \n" +
        "	IF IFNULL(OLD.isLineCustConsigned,0) != IFNULL(NEW.isLineCustConsigned,0) THEN  \n" +
        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'LINECUSTCONSIGNED',CAST(CASE WHEN OLD.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
        "		CAST(CASE WHEN NEW.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.lineCustomerID,0) != IFNULL(NEW.lineCustomerID,0) THEN  \n" +
        "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.lineCustomerID;  \n" +
        "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.lineCustomerID;  \n" +
        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'LINECUSTOMER',CAST(vOldCustomer AS CHAR),  \n" +
        "		CAST(vNewCustomer AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.isNonUMIDStock,0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
        "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'LINENONUMIDSTOCK',CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
        "		CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar');  \n" +
        "	END IF;  \n" +
        "    IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
        "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,valueDataType)  \n" +
        "		VALUES(\"PURCHASE_ORDER_DET\", CAST(new.id AS CHAR), 'DELETED', NULL,  \n" +
        "        CONCAT('PO Line ID ', CAST(OLD.lineID AS CHAR), ' is Deleted'),fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,'varchar');  \n" +
        "	END IF;  \n" +
        "END;  \n" +
        /* **************************** Add Script Version -> 01-03-2022 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5979,'2.00','V1',' Bug 41756: QA Testing findings for User Story 39330: Maintain DataType wise history in Purchase Order Page - Jay '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
    case 5979:
        allDbChangesArray.push(
        /* **************************** New Script -> 01-03-2022*********************************** */
            "DROP TRIGGER IF EXISTS Trg_BU_customer_addresses;  \n" +
            "CREATE TRIGGER `Trg_BU_customer_addresses` BEFORE UPDATE ON `customer_addresses` FOR EACH ROW BEGIN  \n" +
            "	IF( (SELECT COUNT(1) FROM customer_addresses ca  \n" +
            "		WHERE  ca.isDeleted = 0 AND NEW.isDeleted = 0 AND ca.customerId = NEW.customerId  \n" +
            "        AND ca.id <> NEW.id  \n" +
            "        AND ca.addressType = NEW.AddressType AND ca.isActive = NEW.isActive  \n" +
            "        AND ca.isDefault = NEW.isDefault  \n" +
            "        AND IFNULL(ca.companyName,'-') = IFNULL(NEW.companyName,'-')  \n" +
            "        AND IFNULL(ca.bankRemitToName,'-') = IFNULL(NEW.bankRemitToName,'-')  \n" +
            "		AND IFNULL(ca.street1,'-') = IFNULL(NEW.street1,'-') AND IFNULL(ca.street2,'-') = IFNULL(NEW.street2,'-')  \n" +
            "        AND IFNULL(ca.street3,'-') = IFNULL(NEW.street3,'-') AND IFNULL(ca.city,'-') = IFNULL(NEW.city,'-')  \n" +
            "        AND IFNULL(ca.state,'-') = IFNULL(NEW.state,'-') AND IFNULL(ca.countryID,0) = IFNULL(NEW.countryID,0)  \n" +
            "		AND IFNULL(ca.postcode,'-') = IFNULL(NEW.postcode,'-')  AND IFNULL(ca.additionalComment,'-') = IFNULL(NEW.additionalComment,'-')  \n" +
            "        AND IFNULL(ca.latitude,0) = IFNULL(NEW.latitude,0) AND IFNULL(ca.longitude,0) = IFNULL(NEW.longitude,0)  \n" +
            "		AND IFNULL(ca.defaultContactPersonID,0) = IFNULL(NEW.defaultContactPersonID,0) AND IFNULL(ca.shippingMethodID,0) = IFNULL(NEW.shippingMethodID,0)  \n" +
            "        AND IFNULL(ca.carrierID,0) = IFNULL(NEW.carrierID,0) AND IFNULL(ca.carrierAccount,'-') = IFNULL(NEW.carrierAccount,'-')) > 0) THEN  \n" +
            "       SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='Duplicate Address entry';  \n" +
            "    END IF;  \n" +
            "END;  \n" +
        /* **************************** Add Script Version -> 01-03-2022 *********************************** */
        "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
        "VALUES (5980,'2.00','V1','Task 41788: SD:[01/03/2022]:Regression Testing on 166 - Shweta '," + userid + " , '" + requiredDet.ipAddress + "');"
        );
        break;
    }
    return allDbChangesArray;
});

// sample
//break;
//case 5941:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 21-02-2022 *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version -> 21-02-2022 *********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
//  "VALUES (5942,'2.00','V1',' Sample entry - CC '," + userid + " , '" + requiredDet.ipAddress + "');"
//  );
//break;

/* ******** **********************/
// Please Note : Don't forgot to set schemaVersion as '2.00' instead of '1.00' as branch is Dev Branch
/* ******** **********************/